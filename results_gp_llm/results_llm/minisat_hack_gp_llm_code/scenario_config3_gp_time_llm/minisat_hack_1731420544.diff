--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -891,7 +891,7 @@
             }/*auto*/
 
             if (learnts.size() > (int32_t)opt_cp_increase && cp < conflicts){
-                cp = conflicts + (int32_t)opt_cp_increase;
+                
                 // Reduce the set of learnt clauses:
                 reduceDB();
 
@@ -1004,6 +1004,7 @@
 lbool Solver::solve_()
 {
     model.clear();
+    int end = i == decisionLevel() ? trail.size() : trail_lim[i];
     conflict.clear();
     if (!ok)/*auto*/{
        return l_False;
@@ -1166,6 +1167,10 @@
 
 void Solver::relocAll(ClauseAllocator& to)
 {
+    if (conflicts > 10000 && LQ.size() == 50 && trail.size() > R * tS / 5000)/*auto*/{
+        
+        lS = 0, LQ.clear();
+    }/*auto*/
     for (i = 0; i < lF.size(); i++)/*auto*/{
       
         ca.reloc(lF[i], to);
@@ -1190,14 +1195,7 @@
 
     // All reasons:
     //
-    for (int i = 0; i < trail.size(); i++){
-        Var v = var(trail[i]);
-
-        if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
-            
-            ca.reloc(vardata[v].reason, to);
-        }/*auto*/
-    }
+    
 
     // All learnt:
     //
