--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -177,6 +177,7 @@
       
         if (value(ps[i]) == l_True || ps[i] == ~p)/*auto*/{
             
+            assert(confl != CRef_Undef);
             return true;
         }/*auto*/
         else if (value(ps[i]) != l_False && ps[i] != p)/*auto*/{
@@ -233,6 +234,7 @@
     
     if (strict){
         remove(watches[~c[0]], Watcher(cr, c[1]));
+        assert(confl != CRef_Undef);
         remove(watches[~c[1]], Watcher(cr, c[0]));
     }else{
         // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
@@ -938,7 +940,7 @@
 
             if (next == lit_Undef)*/{
                 // New variable decision:
-                decisions++;
+                
                 next = pickBranchLit();
 
                 if (next == lit_Undef)/*auto*/{
@@ -1193,10 +1195,7 @@
     for (int i = 0; i < trail.size(); i++){
         Var v = var(trail[i]);
 
-        if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))/*auto*/{
-            
-            ca.reloc(vardata[v].reason, to);
-        }/*auto*/
+        
     }
 
     // All learnt:
