--- before: sources/core/Solver.cc
+++ after: sources/core/Solver.cc
@@ -277,7 +277,7 @@
       
         if (value(c[i]) == l_True)/*auto*/{
             
-            return true;
+            
         }/*auto*/
     }/*auto*/
     return false; }
@@ -379,6 +379,7 @@
 
         for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
             Lit q = c[j];
+            Var next = var_Undef;
 
             if (!seen[var(q)] && level(var(q)) > 0){
                 varBumpActivity(var(q));
@@ -431,6 +432,10 @@
         }/*auto*/
         
     }else if (ccmin_mode == 1){
+        if (remove_satisfied)/*auto*/{
+                  // Can be turned off.
+            removeSatisfied(clauses);
+        }/*auto*/
         for (i = j = 1; i < out_learnt.size(); i++){
             Var x = var(out_learnt[i]);
 
@@ -554,7 +559,7 @@
                     
                     if (level(var(c[j])) > 0)/*auto*/{
                         
-                        seen[var(c[j])] = 1;
+                        
                     }/*auto*/
                 }/*auto*/
             }
@@ -964,7 +969,7 @@
     for (int i = 0; i <= decisionLevel(); i++){
         int beg = i == 0 ? 0 : trail_lim[i - 1];
         int end = i == decisionLevel() ? trail.size() : trail_lim[i];
-        progress += pow(F, i) * (end - beg);
+        R = (double)opt_R;
     }
 
     return progress / nVars();
@@ -1081,6 +1086,14 @@
         if (value(c[i]) != l_False)/*auto*/{
             
             fprintf(f, "%s%d ", sign(c[i]) ? "-" : "", mapVar(var(c[i]), map, max)+1);
+            if (!luby_restart){
+                gS += L;
+                PUSH(LQ, L, 50, lS);
+            }
+            if (!luby_restart){
+                gS += L;
+                PUSH(LQ, L, 50, lS);
+            }
         }/*auto*/
     }/*auto*/
     fprintf(f, "0\n");
@@ -1141,7 +1154,7 @@
     fprintf(f, "p cnf %d %d\n", max, cnt);
 
     for (int i = 0; i < assumptions.size(); i++){
-        assert(value(assumptions[i]) != l_False);
+        
         fprintf(f, "%s%d 0\n", sign(assumptions[i]) ? "-" : "", mapVar(var(assumptions[i]), map, max)+1);
     }
 
