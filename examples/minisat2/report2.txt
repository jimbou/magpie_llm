 Percent |	Source code & Disassembly of minisat for cycles:u (56584 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000f450 <Minisat::Solver::propagate()>:
         : 6    Minisat::Solver::propagate():
         : 450  |
         : 451  |    Post-conditions:
         : 452  |      * the propagation queue is empty, even if there was a conflict.
         : 453  |________________________________________________________________________________________________@*/
         : 454  CRef Solver::propagate()
         : 455  {
    0.00 :   f450:   endbr64
    0.00 :   f454:   push   %r15
    0.00 :   f456:   mov    %rdi,%r9
    0.00 :   f459:   push   %r14
    0.00 :   f45b:   push   %r13
    0.00 :   f45d:   push   %r12
    0.00 :   f45f:   push   %rbp
         : 453  CRef    confl     = CRef_Undef;
         : 454  int     num_props = 0;
         : 455  watches.cleanAll();
    0.00 :   f460:   lea    0x138(%rdi),%rbp
         : 450  {
    0.00 :   f467:   push   %rbx
    0.00 :   f468:   sub    $0x28,%rsp
         : 453  Minisat::vec<Minisat::Lit>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.01 :   f46c:   mov    0x160(%rdi),%edi
         : 70   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   f472:   mov    0x158(%r9),%rdx
         : 129  Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         :
         :
         : 293  template<class Idx, class Vec, class Deleted>
         : 294  void OccLists<Idx,Vec,Deleted>::cleanAll()
         : 295  {
         : 296  for (int i = 0; i < dirties.size(); i++)
    0.00 :   f479:   test   %edi,%edi
    0.00 :   f47b:   jle    f4a5 <Minisat::Solver::propagate()+0x55>
    0.00 :   f47d:   mov    0x148(%r9),%rcx
    0.00 :   f484:   xor    %ebx,%ebx
    0.00 :   f486:   mov    %r9,%r12
         : 302  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f489:   lea    (%rdx,%rbx,4),%rsi
         : 89   Minisat::vec<char>::operator[](int):
    0.00 :   f48d:   movslq (%rsi),%rax
         : 88   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 293  // Dirties may contain duplicates so check here if a variable is already cleaned:
         : 294  if (dirty[toInt(dirties[i])])
    0.00 :   f490:   cmpb   $0x0,(%rcx,%rax,1)
    0.00 :   f494:   jne    f7e8 <Minisat::Solver::propagate()+0x398>
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   f49a:   add    $0x1,%rbx
    0.00 :   f49e:   cmp    %ebx,%edi
    0.00 :   f4a0:   jg     f489 <Minisat::Solver::propagate()+0x39>
    0.00 :   f4a2:   mov    %r12,%r9
         : 296  Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   f4a5:   test   %rdx,%rdx
    0.00 :   f4a8:   je     f4b5 <Minisat::Solver::propagate()+0x65>
         : 124  for (int i = 0; i < sz; i++) data[i].~T();
         : 125  sz = 0;
    0.00 :   f4aa:   movl   $0x0,0x160(%r9)
         : 127  Minisat::Solver::propagate():
         :
         : 456  while (qhead < trail.size()){
    0.00 :   f4b5:   movslq 0x1d0(%r9),%rdx
         : 458  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   f4bc:   mov    0x1a8(%r9),%ecx
    0.00 :   f4c3:   mov    %r9,%rbp
         : 66   Minisat::Solver::propagate():
    0.01 :   f4c6:   movl   $0x0,0x1c(%rsp)
    0.00 :   f4ce:   movl   $0xffffffff,0x18(%rsp)
    0.00 :   f4d6:   cmp    %edx,%ecx
    0.00 :   f4d8:   jle    f8c4 <Minisat::Solver::propagate()+0x474>
    0.00 :   f4de:   xchg   %ax,%ax
         : 456  Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
    0.02 :   f4e0:   mov    0x1a0(%rbp),%rax
    0.21 :   f4e7:   lea    0x1(%rdx),%esi
         : 459  vec<Watcher>&  ws  = watches[p];
         : 460  Watcher        *i, *j, *end;
         : 461  num_props++;
    0.01 :   f4ea:   addl   $0x1,0x1c(%rsp)
         : 456  Lit            p   = trail[qhead++];     // 'p' is enqueued fact to propagate.
    0.04 :   f4ef:   mov    %esi,0x1d0(%rbp)
    0.28 :   f4f5:   movslq (%rax,%rdx,4),%rax
    0.44 :   f4f9:   mov    %rax,%r15
         : 460  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f4fc:   shl    $0x4,%rax
    0.11 :   f500:   add    0x138(%rbp),%rax
         : 90   Minisat::vec<Minisat::Solver::Watcher>::operator Minisat::Solver::Watcher*():
         : 60   operator T*       (void)           { return data; }
    0.08 :   f507:   mov    (%rax),%r12
         : 62   Minisat::vec<Minisat::Solver::Watcher>::size() const:
         : 63   int      size     (void) const     { return sz; }
    1.71 :   f50a:   movslq 0x8(%rax),%rdx
         : 65   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.01 :   f50e:   mov    %rax,(%rsp)
         : 89   Minisat::Solver::propagate():
         :
         : 462  for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
    0.00 :   f512:   lea    (%r12,%rdx,8),%r14
    0.34 :   f516:   cmp    %r12,%r14
    0.53 :   f519:   je     f819 <Minisat::Solver::propagate()+0x3c9>
    0.00 :   f51f:   mov    %r12,%r8
         : 467  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   f522:   xor    $0x1,%r15d
    0.00 :   f526:   jmp    f59b <Minisat::Solver::propagate()+0x14b>
    0.00 :   f528:   nopl   0x0(%rax,%rax,1)
         : 63   Minisat::Solver::propagate():
         : 468  Lit blocker = i->blocker;
         : 469  if (value(blocker) == l_True){
         : 470  *j++ = *i++; continue; }
         :
         : 472  // Make sure the false literal is data[1]:
         : 473  CRef     cr        = i->cref;
    0.00 :   f530:   mov    (%r8),%r13d
         : 475  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    4.73 :   f533:   cmp    0x230(%rbp),%r13d
    0.08 :   f53a:   jae    f829 <Minisat::Solver::propagate()+0x3d9>
    0.00 :   f540:   mov    0x228(%rbp),%rcx
    0.56 :   f547:   mov    %r13d,%eax
    0.02 :   f54a:   lea    (%rcx,%rax,4),%rsi
         : 74   Minisat::Lit::operator==(Minisat::Lit) const:
         : 52   bool operator == (Lit p) const { return x == p.x; }
    0.46 :   f54e:   mov    0x4(%rsi),%ebx
         : 54   Minisat::Solver::propagate():
         : 472  Clause&  c         = ca[cr];
         : 473  Lit      false_lit = ~p;
         : 474  if (c[0] == false_lit)
         : 475  c[0] = c[1], c[1] = false_lit;
    6.73 :   f551:   mov    0x8(%rsi),%eax
         : 471  if (c[0] == false_lit)
    0.13 :   f554:   cmp    %r15d,%ebx
    0.02 :   f557:   je     f6d0 <Minisat::Solver::propagate()+0x280>
         : 473  assert(c[1] == false_lit);
    0.00 :   f55d:   cmp    %eax,%r15d
    0.99 :   f560:   jne    f848 <Minisat::Solver::propagate()+0x3f8>
         : 474  i++;
    0.36 :   f566:   lea    0x8(%r8),%r9
         :
         : 480  // If 0th watch is true, then clause is already satisfied.
         : 481  Lit     first = c[0];
         : 482  Watcher w     = Watcher(cr, first);
         : 483  if (first != blocker && value(first) == l_True){
    0.10 :   f56a:   cmp    %ebx,%edx
    0.68 :   f56c:   je     f640 <Minisat::Solver::propagate()+0x1f0>
         : 486  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   f572:   mov    %ebx,%eax
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.69 :   f574:   mov    %ebx,%edx
         : 63   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   f576:   sar    %eax
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.28 :   f578:   and    $0x1,%edx
         : 63   Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   f57b:   cltq
         : 88   Minisat::Solver::propagate():
    0.16 :   f57d:   cmp    %dl,(%rdi,%rax,1)
    1.13 :   f580:   jne    f640 <Minisat::Solver::propagate()+0x1f0>
         : 480  *j++ = w; continue; }
    0.00 :   f586:   mov    %r13d,(%r12)
         : 474  i++;
    0.99 :   f58a:   mov    %r9,%r8
         : 480  *j++ = w; continue; }
    0.00 :   f58d:   add    $0x8,%r12
    0.00 :   f591:   mov    %ebx,-0x4(%r12)
         : 461  for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
    0.08 :   f596:   cmp    %r8,%r14
    0.08 :   f599:   je     f5cf <Minisat::Solver::propagate()+0x17f>
         : 463  Lit blocker = i->blocker;
    0.00 :   f59b:   mov    0x4(%r8),%edx
         : 465  Minisat::vec<Minisat::lbool>::operator[](int) const:
    4.11 :   f59f:   mov    0x170(%rbp),%rdi
         : 87   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.29 :   f5a6:   mov    %edx,%eax
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.45 :   f5a8:   mov    %edx,%ecx
         : 63   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.06 :   f5aa:   sar    %eax
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.27 :   f5ac:   and    $0x1,%ecx
         : 63   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.77 :   f5af:   cltq
         : 87   Minisat::Solver::propagate():
         : 464  if (value(blocker) == l_True){
    0.03 :   f5b1:   cmp    %cl,(%rdi,%rax,1)
    5.39 :   f5b4:   jne    f530 <Minisat::Solver::propagate()+0xe0>
         : 465  *j++ = *i++; continue; }
    0.01 :   f5ba:   mov    (%r8),%rax
    4.26 :   f5bd:   add    $0x8,%r8
    0.01 :   f5c1:   add    $0x8,%r12
    0.09 :   f5c5:   mov    %rax,-0x8(%r12)
         : 461  for (i = j = (Watcher*)ws, end = i + ws.size();  i != end;){
    0.51 :   f5ca:   cmp    %r8,%r14
    0.00 :   f5cd:   jne    f59b <Minisat::Solver::propagate()+0x14b>
         : 464  Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   f5cf:   mov    (%rsp),%rax
         : 66   Minisat::Solver::propagate():
         : 502  }else
         : 503  uncheckedEnqueue(first, cr);
         :
         : 505  NextClause:;
         : 506  }
         : 507  ws.shrink(i - j);
    1.57 :   f5d3:   sub    %r12,%r14
    0.00 :   f5d6:   sar    $0x3,%r14
         : 510  Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
    0.00 :   f5da:   mov    0x8(%rax),%eax
    0.55 :   f5dd:   cmp    %eax,%r14d
    0.00 :   f5e0:   jg     f8a5 <Minisat::Solver::propagate()+0x455>
         : 67   Minisat::Solver::propagate():
         : 455  while (qhead < trail.size()){
    0.00 :   f5e6:   movslq 0x1d0(%rbp),%rdx
         : 457  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.01 :   f5ed:   mov    0x1a8(%rbp),%ecx
         : 65   Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   f5f3:   test   %r14d,%r14d
    0.00 :   f5f6:   jle    f602 <Minisat::Solver::propagate()+0x1b2>
    0.02 :   f5f8:   mov    (%rsp),%rbx
    0.24 :   f5fc:   sub    %r14d,%eax
    0.00 :   f5ff:   mov    %eax,0x8(%rbx)
         : 70   Minisat::Solver::propagate():
    0.20 :   f602:   cmp    %ecx,%edx
    0.08 :   f604:   jl     f4e0 <Minisat::Solver::propagate()+0x90>
         : 504  }
         : 505  propagations += num_props;
    0.01 :   f60a:   movslq 0x1c(%rsp),%rax
    0.14 :   f60f:   mov    %rbp,%r9
         : 505  simpDB_props -= num_props;
    0.00 :   f612:   mov    %rax,%rdx
         : 504  propagations += num_props;
    0.00 :   f615:   add    %rax,0xb8(%r9)
         :
         : 509  return confl;
         : 510  }
    0.05 :   f61c:   mov    0x18(%rsp),%eax
         : 505  simpDB_props -= num_props;
    0.01 :   f620:   sub    %rdx,0x1d8(%r9)
         : 508  }
    0.00 :   f627:   add    $0x28,%rsp
    0.00 :   f62b:   pop    %rbx
    0.01 :   f62c:   pop    %rbp
    0.00 :   f62d:   pop    %r12
    0.01 :   f62f:   pop    %r13
    0.00 :   f631:   pop    %r14
    0.01 :   f633:   pop    %r15
    0.01 :   f635:   ret
    0.00 :   f636:   cs nopw 0x0(%rax,%rax,1)
         : 518  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.04 :   f640:   mov    (%rsi),%eax
         : 164  Minisat::Solver::propagate():
         : 483  for (int k = 2; k < c.size(); k++)
    3.21 :   f642:   mov    $0x2,%edx
         : 485  Minisat::Clause::size() const:
    0.15 :   f647:   mov    %eax,%r11d
    0.15 :   f64a:   shr    $0x5,%r11d
         : 164  Minisat::Solver::propagate():
    0.04 :   f64e:   cmp    $0x5f,%eax
    0.40 :   f651:   ja     f669 <Minisat::Solver::propagate()+0x219>
    0.00 :   f653:   jmp    f6e0 <Minisat::Solver::propagate()+0x290>
    0.00 :   f658:   nopl   0x0(%rax,%rax,1)
    0.00 :   f660:   add    $0x1,%rdx
    3.27 :   f664:   cmp    %edx,%r11d
    0.36 :   f667:   jle    f6e0 <Minisat::Solver::propagate()+0x290>
    0.00 :   f669:   mov    0x4(%rsi,%rdx,4),%eax
    3.30 :   f66d:   movslq %edx,%r10
         : 488  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.02 :   f670:   mov    %eax,%ecx
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.15 :   f672:   and    $0x1,%eax
         : 63   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.19 :   f675:   sar    %ecx
         : 64   Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.40 :   f677:   movslq %ecx,%rcx
         : 88   Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.89 :   f67a:   xor    (%rdi,%rcx,1),%al
         : 101  Minisat::Solver::propagate():
         : 484  if (value(c[k]) != l_False){
    8.35 :   f67d:   cmp    $0x1,%al
    1.07 :   f67f:   je     f660 <Minisat::Solver::propagate()+0x210>
         : 485  c[1] = c[k]; c[k] = false_lit;
    0.00 :   f681:   mov    0x4(%rsi,%r10,4),%eax
    8.24 :   f686:   mov    %eax,0x8(%rsi)
    0.03 :   f689:   mov    %r15d,0x4(%rsi,%r10,4)
         : 489  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.31 :   f68e:   mov    0x8(%rsi),%eax
    3.03 :   f691:   xor    $0x1,%eax
         : 62   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.04 :   f694:   cltq
    0.04 :   f696:   shl    $0x4,%rax
    0.01 :   f69a:   add    0x138(%rbp),%rax
         : 91   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.12 :   f6a1:   movslq 0x8(%rax),%rdx
    2.26 :   f6a5:   cmp    0xc(%rax),%edx
    0.78 :   f6a8:   je     f7b0 <Minisat::Solver::propagate()+0x360>
    0.00 :   f6ae:   lea    0x1(%rdx),%ecx
         : 79   Minisat::Solver::propagate():
         : 474  i++;
    1.10 :   f6b1:   mov    %r9,%r8
         : 476  Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
    0.01 :   f6b4:   mov    %ecx,0x8(%rax)
    0.48 :   f6b7:   mov    (%rax),%rcx
    0.05 :   f6ba:   lea    (%rcx,%rdx,8),%rdx
    0.02 :   f6be:   mov    %r13d,(%rdx)
    9.08 :   f6c1:   mov    %ebx,0x4(%rdx)
         : 79   Minisat::Solver::propagate():
         : 487  goto NextClause; }
    0.55 :   f6c4:   jmp    f596 <Minisat::Solver::propagate()+0x146>
    0.00 :   f6c9:   nopl   0x0(%rax)
         : 472  c[0] = c[1], c[1] = false_lit;
    0.00 :   f6d0:   mov    %eax,0x4(%rsi)
    4.19 :   f6d3:   mov    %eax,%ebx
    0.00 :   f6d5:   mov    %r15d,0x8(%rsi)
         : 473  assert(c[1] == false_lit);
    0.00 :   f6d9:   jmp    f566 <Minisat::Solver::propagate()+0x116>
    0.00 :   f6de:   xchg   %ax,%ax
         : 476  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   f6e0:   mov    %ebx,%edx
         : 64   Minisat::Solver::propagate():
         : 490  *j++ = w;
    0.99 :   f6e2:   mov    %r13d,(%r12)
         : 492  Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    1.08 :   f6e6:   mov    %ebx,%ecx
         : 63   Minisat::Solver::propagate():
    0.00 :   f6e8:   lea    0x8(%r12),%rax
         : 491  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   f6ed:   sar    %edx
         : 64   Minisat::Solver::propagate():
    0.02 :   f6ef:   mov    %ebx,0x4(%r12)
         : 491  Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.33 :   f6f4:   and    $0x1,%ecx
         : 63   Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   f6f7:   movslq %edx,%rdx
    0.01 :   f6fa:   add    %rdx,%rdi
         : 89   Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   f6fd:   movzbl (%rdi),%esi
    0.58 :   f700:   xor    %ecx,%esi
         : 102  Minisat::Solver::propagate():
         : 491  if (value(first) == l_False){
    0.00 :   f702:   cmp    $0x1,%sil
    0.35 :   f706:   je     f760 <Minisat::Solver::propagate()+0x310>
         : 494  Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431  assert(value(p) == l_Undef);
    0.01 :   f708:   and    $0x2,%esi
    0.02 :   f70b:   je     f886 <Minisat::Solver::propagate()+0x436>
         : 432  assigns[var(p)] = lbool(!sign(p));
    0.44 :   f711:   mov    %cl,(%rdi)
         : 434  Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.01 :   f713:   mov    0x1c0(%rbp),%rsi
         : 89   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.06 :   f71a:   mov    0x1b8(%rbp),%ecx
         : 65   Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f720:   lea    (%rsi,%rdx,8),%rdx
         : 89   Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 433  vardata[var(p)] = mkVarData(from, decisionLevel());
    0.04 :   f724:   mov    %r13d,(%rdx)
    1.06 :   f727:   mov    %ecx,0x4(%rdx)
         : 436  Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75   void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.07 :   f72a:   movslq 0x1a8(%rbp),%rdx
    0.01 :   f731:   cmp    0x1ac(%rbp),%edx
    0.09 :   f737:   jge    f867 <Minisat::Solver::propagate()+0x417>
    0.00 :   f73d:   mov    0x1a0(%rbp),%rcx
    0.00 :   f744:   lea    0x1(%rdx),%esi
         : 81   Minisat::Solver::propagate():
         : 490  *j++ = w;
    0.00 :   f747:   mov    %rax,%r12
         : 474  i++;
    0.00 :   f74a:   mov    %r9,%r8
         : 476  Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
    0.00 :   f74d:   mov    %esi,0x1a8(%rbp)
    0.25 :   f753:   mov    %ebx,(%rcx,%rdx,4)
    0.52 :   f756:   jmp    f596 <Minisat::Solver::propagate()+0x146>
    0.00 :   f75b:   nopl   0x0(%rax,%rax,1)
         : 79   Minisat::Solver::propagate():
         : 493  qhead = trail.size();
    0.00 :   f760:   mov    0x1a8(%rbp),%edx
    0.08 :   f766:   mov    %edx,0x1d0(%rbp)
         : 495  while (i < end)
    0.00 :   f76c:   cmp    %r9,%r14
    0.00 :   f76f:   jbe    f7d8 <Minisat::Solver::propagate()+0x388>
         : 490  *j++ = w;
    0.00 :   f771:   mov    %rax,%rdi
         : 495  while (i < end)
    0.00 :   f774:   mov    %r9,%rsi
    0.00 :   f777:   nopw   0x0(%rax,%rax,1)
         : 496  *j++ = *i++;
    0.00 :   f780:   movsq  %ds:(%rsi),%es:(%rdi)
         : 495  while (i < end)
    0.14 :   f782:   cmp    %rsi,%r14
    0.00 :   f785:   ja     f780 <Minisat::Solver::propagate()+0x330>
    0.00 :   f787:   lea    -0x9(%r14),%rdx
         : 496  *j++ = *i++;
    0.08 :   f78b:   mov    %r13d,0x18(%rsp)
    0.02 :   f790:   sub    %r8,%rdx
    0.00 :   f793:   shr    $0x3,%rdx
    0.00 :   f797:   lea    0x8(,%rdx,8),%r12
    0.00 :   f79f:   lea    (%r9,%r12,1),%r8
    0.00 :   f7a3:   add    %rax,%r12
    0.00 :   f7a6:   jmp    f596 <Minisat::Solver::propagate()+0x146>
    0.00 :   f7ab:   nopl   0x0(%rax,%rax,1)
         : 505  Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   f7b0:   lea    0x1(%rdx),%esi
    0.00 :   f7b3:   mov    %rax,%rdi
    0.00 :   f7b6:   mov    %r9,0x10(%rsp)
    0.00 :   f7bb:   mov    %rax,0x8(%rsp)
    0.00 :   f7c0:   call   12380 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)>
    0.00 :   f7c5:   mov    0x8(%rsp),%rax
    0.00 :   f7ca:   mov    0x10(%rsp),%r9
    0.00 :   f7cf:   movslq 0x8(%rax),%rdx
    0.00 :   f7d3:   jmp    f6ae <Minisat::Solver::propagate()+0x25e>
         : 84   Minisat::Solver::propagate():
         : 495  while (i < end)
    0.00 :   f7d8:   mov    %r13d,0x18(%rsp)
         : 490  *j++ = w;
    0.02 :   f7dd:   mov    %rax,%r12
         : 495  while (i < end)
    0.00 :   f7e0:   mov    %r9,%r8
    0.00 :   f7e3:   jmp    f596 <Minisat::Solver::propagate()+0x146>
         : 498  Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 294  clean(dirties[i]);
    0.00 :   f7e8:   mov    %rbp,%rdi
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   f7eb:   add    $0x1,%rbx
         : 294  clean(dirties[i]);
    0.00 :   f7ef:   call   12410 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)>
         : 296  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   f7f4:   mov    0x160(%r12),%edi
         : 65   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   f7fc:   mov    0x158(%r12),%rdx
         : 124  Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   f804:   cmp    %ebx,%edi
    0.00 :   f806:   jle    f4a2 <Minisat::Solver::propagate()+0x52>
    0.00 :   f80c:   mov    0x148(%r12),%rcx
    0.00 :   f814:   jmp    f489 <Minisat::Solver::propagate()+0x39>
         : 296  Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   f819:   test   %edx,%edx
    0.10 :   f81b:   js     f8a5 <Minisat::Solver::propagate()+0x455>
    0.01 :   f821:   movslq %esi,%rdx
    0.00 :   f824:   jmp    f602 <Minisat::Solver::propagate()+0x1b2>
         : 69   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   f829:   lea    0x4208(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   f830:   mov    $0x3f,%edx
    0.00 :   f835:   lea    0x41de(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   f83c:   lea    0x4bd5(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   f843:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::Solver::propagate():
         : 473  assert(c[1] == false_lit);
    0.00 :   f848:   lea    0x5511(%rip),%rcx        # 14d60 <Minisat::lit_Undef+0x608>
    0.00 :   f84f:   mov    $0x1d9,%edx
    0.00 :   f854:   lea    0x58ec(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   f85b:   lea    0x598c(%rip),%rdi        # 151ee <Minisat::lit_Undef+0xa96>
    0.00 :   f862:   call   23b0 <__assert_fail@plt>
         : 479  Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75   void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.00 :   f867:   lea    0x517a(%rip),%rcx        # 149e8 <Minisat::lit_Undef+0x290>
    0.00 :   f86e:   mov    $0x4b,%edx
    0.00 :   f873:   lea    0x4c58(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   f87a:   lea    0x58ec(%rip),%rdi        # 1516d <Minisat::lit_Undef+0xa15>
    0.00 :   f881:   call   23b0 <__assert_fail@plt>
         : 81   Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431  assert(value(p) == l_Undef);
    0.00 :   f886:   lea    0x5113(%rip),%rcx        # 149a0 <Minisat::lit_Undef+0x248>
    0.00 :   f88d:   mov    $0x1af,%edx
    0.00 :   f892:   lea    0x58ae(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   f899:   lea    0x58b9(%rip),%rdi        # 15159 <Minisat::lit_Undef+0xa01>
    0.00 :   f8a0:   call   23b0 <__assert_fail@plt>
         : 437  Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   f8a5:   lea    0x59ec(%rip),%rcx        # 15298 <Minisat::lit_Undef+0xb40>
    0.00 :   f8ac:   mov    $0x40,%edx
    0.00 :   f8b1:   lea    0x4c1a(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   f8b8:   lea    0x4e53(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   f8bf:   call   23b0 <__assert_fail@plt>
         : 70   Minisat::Solver::propagate():
         : 455  while (qhead < trail.size()){
    0.00 :   f8c4:   xor    %edx,%edx
    0.00 :   f8c6:   xor    %eax,%eax
    0.00 :   f8c8:   jmp    f615 <Minisat::Solver::propagate()+0x1c5>
 Percent |	Source code & Disassembly of minisat for cycles:u (15060 samples, percent: local period)
--------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000d390 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)>:
         : 6    Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 265  |      * If out_learnt.size() > 1 then 'out_learnt[1]' has the greatest decision level of the
         : 266  |        rest of literals. There may be others from the same level though.
         : 267  |
         : 268  |________________________________________________________________________________________________@*/
         : 269  void Solver::analyze(CRef confl, vec<Lit>& out_learnt, int& out_btlevel)
         : 270  {
    0.00 :   d390:   endbr64
    0.01 :   d394:   push   %r15
    0.01 :   d396:   mov    %rdi,%r15
    0.00 :   d399:   push   %r14
    0.00 :   d39b:   mov    %rdx,%r14
    0.00 :   d39e:   push   %r13
    0.00 :   d3a0:   push   %r12
    0.01 :   d3a2:   push   %rbp
    0.00 :   d3a3:   push   %rbx
    0.01 :   d3a4:   mov    %esi,%ebx
    0.00 :   d3a6:   sub    $0x28,%rsp
         : 282  Minisat::vec<Minisat::Lit>::push():
         : 73   void     growTo   (int size);
         : 74   void     growTo   (int size, const T& pad);
         : 75   void     clear    (bool dealloc = false);
         :
         : 77   // Stack interface:
         : 78   void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
    0.00 :   d3aa:   mov    0x8(%rdx),%eax
         : 80   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.01 :   d3ad:   mov    %rcx,0x8(%rsp)
         : 266  Minisat::vec<Minisat::Lit>::push():
    0.01 :   d3b2:   cmp    0xc(%rdx),%eax
    0.00 :   d3b5:   je     d865 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x4d5>
    0.00 :   d3bb:   mov    (%r14),%rdx
    0.00 :   d3be:   movslq %eax,%rcx
    0.00 :   d3c1:   add    $0x1,%eax
         : 78   Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 301  inline void Solver::claDecayActivity() { cla_inc *= (1 / clause_decay); }
         : 302  inline void Solver::claBumpActivity (Clause& c) {
         : 303  if ( (c.activity() += cla_inc) > 1e20 ) {
         : 304  // Rescale:
         : 305  for (int i = 0; i < learnts.size(); i++)
         : 306  ca[learnts[i]].activity() *= 1e-20;
    0.00 :   d3c4:   movsd  0x7f44(%rip),%xmm1        # 15310 <typeinfo name for Minisat::Solver+0x30>
    0.07 :   d3cc:   movapd 0x7fac(%rip),%xmm4        # 15380 <typeinfo name for Minisat::Solver+0xa0>
    0.09 :   d3d4:   mov    %r14,(%rsp)
         : 310  Minisat::vec<Minisat::Lit>::push():
    0.00 :   d3d8:   movl   $0x0,(%rdx,%rcx,4)
         : 302  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 267  int pathC = 0;
         : 268  Lit p     = lit_Undef;
    0.13 :   d3df:   mov    $0xfffffffe,%ecx
         : 270  Minisat::vec<Minisat::Lit>::push():
    0.00 :   d3e4:   mov    %eax,0x8(%r14)
         : 74   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         :
         : 273  // Generate conflict clause:
         : 274  //
         : 275  out_learnt.push();      // (leave room for the asserting literal)
         : 276  int index   = trail.size() - 1;
    0.00 :   d3e8:   mov    0x1a8(%r15),%eax
    0.00 :   d3ef:   lea    -0x1(%rax),%r13d
         : 266  int pathC = 0;
    0.00 :   d3f3:   xor    %eax,%eax
    0.01 :   d3f5:   mov    %r13d,%r14d
    0.00 :   d3f8:   mov    %eax,%r13d
         :
         : 276  do{
         : 277  assert(confl != CRef_Undef); // (otherwise should be UIP)
    0.00 :   d3fb:   cmp    $0xffffffff,%ebx
    0.19 :   d3fe:   je     dba9 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x819>
         : 280  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.03 :   d404:   mov    0x230(%r15),%r8d
    1.20 :   d40b:   cmp    %r8d,%ebx
    0.00 :   d40e:   jae    db8a <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7fa>
    0.00 :   d414:   mov    0x228(%r15),%r9
    0.02 :   d41b:   lea    (%r9,%rbx,4),%r12
         : 74   Minisat::Clause::learnt() const:
         :
         :
         : 167  int          size        ()      const   { return header.size; }
         : 168  void         shrink      (int i)         { assert(i <= size()); if (header.has_extra) data[header.size-i] = data[header.size]; header.size -= i; }
         : 169  void         pop         ()              { shrink(1); }
         : 170  bool         learnt      ()      const   { return header.learnt; }
    0.01 :   d41f:   movzbl (%r12),%eax
         : 172  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 278  Clause& c = ca[confl];
         :
         : 280  if (c.learnt())
    3.96 :   d424:   test   $0x4,%al
    0.01 :   d426:   jne    d720 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x390>
         : 283  Minisat::Clause::activity():
         : 181  //       subsumption operations to behave correctly.
         : 182  Lit&         operator [] (int i)         { return data[i].lit; }
         : 183  Lit          operator [] (int i) const   { return data[i].lit; }
         : 184  operator const Lit* (void) const         { return (Lit*)data; }
         :
         : 186  float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   d42c:   mov    (%r12),%edx
    0.11 :   d430:   shr    $0x5,%edx
         : 189  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 281  claBumpActivity(c);
         :
         : 283  for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
    0.13 :   d433:   cmp    $0xfffffffe,%ecx
         : 285  Minisat::vec<char>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d436:   mov    0x240(%r15),%rsi
         : 94   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.01 :   d43d:   mov    0x1c0(%r15),%rdi
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.08 :   d444:   setne  %al
    0.00 :   d447:   setne  %bl
    0.32 :   d44a:   movzbl %al,%eax
    0.27 :   d44d:   cmp    %edx,%eax
    0.29 :   d44f:   jge    d630 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x2a0>
         : 286  Minisat::Solver::varBumpActivity(int, double):
         : 286  if ( (activity[v] += inc) > 1e100 ) {
    0.00 :   d455:   movsd  0x7ebb(%rip),%xmm5        # 15318 <typeinfo name for Minisat::Solver+0x38>
         : 289  activity[i] *= 1e-100;
    0.03 :   d45d:   movsd  0x7f1b(%rip),%xmm2        # 15380 <typeinfo name for Minisat::Solver+0xa0>
    0.00 :   d465:   movzbl %bl,%ebx
    0.01 :   d468:   jmp    d47c <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xec>
    0.00 :   d46a:   nopw   0x0(%rax,%rax,1)
         : 294  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.00 :   d470:   add    $0x1,%rbx
    2.82 :   d474:   cmp    %ebx,%edx
    0.37 :   d476:   jle    d630 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x2a0>
         : 282  Lit q = c[j];
    0.00 :   d47c:   mov    0x4(%r12,%rbx,4),%ebp
         : 284  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    2.50 :   d481:   mov    %ebp,%r9d
    0.11 :   d484:   sar    %r9d
         : 65   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.11 :   d487:   movslq %r9d,%r8
    0.50 :   d48a:   lea    (%rsi,%r8,1),%rax
         : 90   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         :
         : 285  if (!seen[var(q)] && level(var(q)) > 0){
    0.77 :   d48e:   cmpb   $0x0,(%rax)
    5.43 :   d491:   jne    d470 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xe0>
    0.00 :   d493:   mov    0x4(%rdi,%r8,8),%r10d
         : 285  Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    3.30 :   d498:   lea    0x0(,%r8,8),%rcx
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.02 :   d4a0:   test   %r10d,%r10d
    0.03 :   d4a3:   jle    d470 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xe0>
         : 286  Minisat::Solver::varBumpActivity(int, double):
         : 286  if ( (activity[v] += inc) > 1e100 ) {
    0.00 :   d4a5:   movsd  0x130(%r15),%xmm0
         : 288  Minisat::vec<double>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.15 :   d4ae:   mov    0x120(%r15),%rsi
    0.04 :   d4b5:   lea    (%rsi,%rcx,1),%rdx
         : 90   Minisat::Solver::varBumpActivity(int, double):
    0.00 :   d4b9:   addsd  (%rdx),%xmm0
    4.08 :   d4bd:   comisd %xmm5,%xmm0
    2.26 :   d4c1:   movsd  %xmm0,(%rdx)
    0.03 :   d4c5:   jbe    d544 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x1b4>
         : 290  Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   d4c7:   mov    0x1c8(%r15),%edi
         : 65   Minisat::Solver::varBumpActivity(int, double):
         : 288  for (int i = 0; i < nVars(); i++)
    0.00 :   d4ce:   test   %edi,%edi
    0.00 :   d4d0:   jle    d810 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x480>
    0.00 :   d4d6:   cmp    $0x1,%edi
    0.00 :   d4d9:   je     d879 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x4e9>
    0.00 :   d4df:   mov    %edi,%r10d
    0.00 :   d4e2:   mov    %rsi,%rdx
    0.00 :   d4e5:   shr    %r10d
    0.00 :   d4e8:   sub    $0x1,%r10d
    0.00 :   d4ec:   shl    $0x4,%r10
    0.00 :   d4f0:   lea    0x10(%rsi,%r10,1),%r10
    0.00 :   d4f5:   nopl   (%rax)
         : 289  activity[i] *= 1e-100;
    0.00 :   d4f8:   movupd (%rdx),%xmm0
    0.00 :   d4fc:   add    $0x10,%rdx
    0.00 :   d500:   mulpd  %xmm4,%xmm0
    0.00 :   d504:   movups %xmm0,-0x10(%rdx)
         : 294  Minisat::vec<Minisat::Solver::VarData>::size() const:
    0.00 :   d508:   cmp    %rdx,%r10
    0.00 :   d50b:   jne    d4f8 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x168>
    0.00 :   d50d:   mov    %edi,%edx
    0.00 :   d50f:   movapd %xmm2,%xmm3
    0.00 :   d513:   and    $0xfffffffe,%edx
    0.00 :   d516:   and    $0x1,%edi
    0.00 :   d519:   je     d532 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x1a2>
         : 70   Minisat::vec<double>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d51b:   movslq %edx,%rdx
         : 89   Minisat::Solver::varBumpActivity(int, double):
    0.00 :   d51e:   movapd %xmm2,%xmm3
         : 290  Minisat::vec<double>::operator[](int):
    0.00 :   d522:   lea    (%rsi,%rdx,8),%rdx
         : 88   Minisat::Solver::varBumpActivity(int, double):
    0.00 :   d526:   movsd  (%rdx),%xmm0
    0.00 :   d52a:   mulsd  %xmm2,%xmm0
    0.00 :   d52e:   movsd  %xmm0,(%rdx)
         : 290  var_inc *= 1e-100; }
    0.00 :   d532:   mulsd  0x130(%r15),%xmm3
    0.00 :   d53b:   movsd  %xmm3,0x130(%r15)
         : 293  Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80   public:
         : 81   Heap(const Comp& c) : lt(c) { }
         :
         : 83   int  size      ()          const { return heap.size(); }
         : 84   bool empty     ()          const { return heap.size() == 0; }
         : 85   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    1.37 :   d544:   cmp    0x210(%r15),%r9d
    0.08 :   d54b:   jge    d5f0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x260>
         : 88   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d551:   mov    0x208(%r15),%r10
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
    0.01 :   d558:   mov    (%r10,%r8,4),%edx
    0.06 :   d55c:   test   %edx,%edx
    0.05 :   d55e:   js     d5f0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x260>
         : 83   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d564:   mov    0x1f8(%r15),%r9
    1.32 :   d56b:   movslq %edx,%r11
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   d56e:   lea    -0x1(%rdx),%esi
    0.08 :   d571:   sar    %esi
         : 44   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.36 :   d573:   movslq (%r9,%r11,4),%r8
    0.84 :   d577:   mov    %r8d,0x18(%rsp)
         : 49   Minisat::vec<int>::operator[](int):
    0.02 :   d57c:   mov    %r8,0x10(%rsp)
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.05 :   d581:   test   %edx,%edx
    0.06 :   d583:   je     d5d9 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x249>
         : 52   Minisat::vec<double>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d585:   mov    0x1f0(%r15),%rdi
    0.03 :   d58c:   mov    %r13d,0x1c(%rsp)
    0.00 :   d591:   mov    (%rdi),%rdi
         : 90   Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165  bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.13 :   d594:   movsd  (%rdi,%r8,8),%xmm0
    2.11 :   d59a:   mov    %rdi,%r13
    0.00 :   d59d:   jmp    d5bd <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x22d>
    0.00 :   d59f:   nop
         : 170  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    0.51 :   d5a0:   mov    %edi,(%r11)
         : 51   indices[heap[p]] = i;
    3.15 :   d5a3:   mov    %edx,(%r10,%rdi,4)
         : 53   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.37 :   d5a7:   lea    -0x1(%rsi),%edx
    0.00 :   d5aa:   mov    %edx,%edi
    0.00 :   d5ac:   mov    %esi,%edx
    0.00 :   d5ae:   sar    %edi
         : 46   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.02 :   d5b0:   test   %esi,%esi
    0.00 :   d5b2:   je     d880 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x4f0>
         : 53   p                = parent(p);
    0.00 :   d5b8:   mov    %edi,%esi
    0.25 :   d5ba:   movslq %edx,%r11
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.01 :   d5bd:   movslq %esi,%rdi
    0.23 :   d5c0:   lea    (%r9,%r11,4),%r11
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.21 :   d5c4:   movslq (%r9,%rdi,4),%rdi
    0.57 :   d5c8:   comisd 0x0(%r13,%rdi,8),%xmm0
    6.53 :   d5cf:   ja     d5a0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x210>
         : 53   Minisat::vec<int>::operator[](int):
    0.63 :   d5d1:   mov    0x1c(%rsp),%r13d
    2.93 :   d5d6:   mov    %r11,%r9
         : 89   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 55   heap   [i] = x;
    0.00 :   d5d9:   mov    0x18(%rsp),%edi
    0.10 :   d5dd:   mov    %edi,(%r9)
         : 56   indices[x] = i;
    0.44 :   d5e0:   mov    0x10(%rsp),%rdi
    0.01 :   d5e5:   mov    %edx,(%r10,%rdi,4)
    0.64 :   d5e9:   nopl   0x0(%rax)
         : 60   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 286  varBumpActivity(var(q));
         : 287  seen[var(q)] = 1;
    0.01 :   d5f0:   movb   $0x1,(%rax)
         : 289  Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    1.58 :   d5f3:   mov    0x1c0(%r15),%rdi
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 287  if (level(var(q)) >= decisionLevel())
    0.12 :   d5fa:   mov    0x1b8(%r15),%eax
    0.29 :   d601:   cmp    %eax,0x4(%rdi,%rcx,1)
    0.83 :   d605:   jl     d7e0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x450>
         : 291  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   d60b:   mov    (%r12),%edx
         : 164  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 281  for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
    1.12 :   d60f:   add    $0x1,%rbx
         : 283  Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d613:   mov    0x240(%r15),%rsi
         : 89   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 288  pathC++;
    0.11 :   d61a:   add    $0x1,%r13d
         : 290  Minisat::Clause::size() const:
    0.00 :   d61e:   shr    $0x5,%edx
         : 163  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 281  for (int j = (p == lit_Undef) ? 0 : 1; j < c.size(); j++){
    0.17 :   d621:   cmp    %ebx,%edx
    0.13 :   d623:   jg     d47c <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xec>
    0.00 :   d629:   nopl   0x0(%rax)
    0.17 :   d630:   lea    -0x1(%r14),%eax
         : 286  Minisat::vec<Minisat::Lit>::operator[](int):
    0.84 :   d634:   mov    0x1a0(%r15),%r9
    0.81 :   d63b:   cltq
    0.18 :   d63d:   nopl   (%rax)
         : 90   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 295  out_learnt.push(q);
         : 296  }
         : 297  }
         :
         : 299  // Select next clause to look at:
         : 300  while (!seen[var(trail[index--])]);
    0.09 :   d640:   mov    0x4(%r9,%rax,4),%ecx
    3.90 :   d645:   mov    %eax,%r14d
    0.09 :   d648:   sub    $0x1,%rax
         : 304  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.03 :   d64c:   mov    %ecx,%edx
    0.00 :   d64e:   sar    %edx
         : 65   Minisat::vec<char>::operator[](int):
    0.01 :   d650:   movslq %edx,%rdx
    0.05 :   d653:   lea    (%rsi,%rdx,1),%r8
         : 89   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.66 :   d657:   cmpb   $0x0,(%r8)
    6.16 :   d65b:   je     d640 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x2b0>
         : 299  p     = trail[index+1];
         : 300  confl = reason(var(p));
         : 301  seen[var(p)] = 0;
         : 302  pathC--;
    0.00 :   d65d:   sub    $0x1,%r13d
         : 304  Minisat::Solver::reason(int) const:
         : 277  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    3.76 :   d661:   mov    (%rdi,%rdx,8),%ebx
         : 279  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 298  seen[var(p)] = 0;
    1.74 :   d664:   movb   $0x0,(%r8)
         :
         : 302  }while (pathC > 0);
    0.32 :   d668:   test   %r13d,%r13d
    0.00 :   d66b:   jg     d3fb <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6b>
         : 302  out_learnt[0] = ~p;
    0.00 :   d671:   mov    (%rsp),%r14
         : 304  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.19 :   d675:   xor    $0x1,%ecx
         : 61   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   d678:   cmpq   $0x0,0x260(%r15)
         : 129  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.02 :   d680:   mov    (%r14),%rax
         : 303  Minisat::operator~(Minisat::Lit):
    0.15 :   d683:   mov    %ecx,(%rax)
         : 60   Minisat::vec<Minisat::Lit>::clear(bool):
    0.05 :   d685:   je     db52 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7c2>
         : 124  for (int i = 0; i < sz; i++) data[i].~T();
         : 125  sz = 0;
    0.01 :   d68b:   movl   $0x0,0x268(%r15)
    0.00 :   d696:   xor    %eax,%eax
         : 128  Minisat::vec<Minisat::Lit>::copyTo(Minisat::vec<Minisat::Lit>&) const:
         : 90   void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
    0.00 :   d698:   mov    0x8(%r14),%ebx
         : 92   Minisat::vec<Minisat::Lit>::growTo(int):
         : 114  if (sz >= size) return;
    0.00 :   d69c:   cmp    %eax,%ebx
    0.00 :   d69e:   jg     d89a <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x50a>
         : 117  Minisat::vec<Minisat::Lit>::copyTo(Minisat::vec<Minisat::Lit>&) const:
         : 90   void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
    0.00 :   d6a4:   test   %ebx,%ebx
    0.00 :   d6a6:   jle    d6cf <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x33f>
         : 93   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d6a8:   mov    (%r14),%rdi
    0.03 :   d6ab:   mov    0x260(%r15),%rsi
    0.01 :   d6b2:   movslq %ebx,%rcx
    0.00 :   d6b5:   xor    %eax,%eax
    0.00 :   d6b7:   nopw   0x0(%rax,%rax,1)
         : 93   Minisat::vec<Minisat::Lit>::copyTo(Minisat::vec<Minisat::Lit>&) const:
         : 90   void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
    0.01 :   d6c0:   mov    (%rdi,%rax,4),%edx
    0.49 :   d6c3:   mov    %edx,(%rsi,%rax,4)
    0.09 :   d6c6:   add    $0x1,%rax
    0.00 :   d6ca:   cmp    %rax,%rcx
    0.01 :   d6cd:   jne    d6c0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x330>
         : 96   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         :
         : 309  // Simplify conflict clause:
         : 310  //
         : 311  int i, j;
         : 312  out_learnt.copyTo(analyze_toclear);
         : 313  if (ccmin_mode == 2){
    0.00 :   d6cf:   mov    0x54(%r15),%r12d
    0.34 :   d6d3:   cmp    $0x2,%r12d
    0.00 :   d6d7:   je     da95 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x705>
         :
         : 318  for (i = j = 1; i < out_learnt.size(); i++)
         : 319  if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
         : 320  out_learnt[j++] = out_learnt[i];
         :
         : 322  }else if (ccmin_mode == 1){
    0.00 :   d6dd:   cmp    $0x1,%r12d
    0.00 :   d6e1:   je     d8e4 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x554>
         : 334  }
         : 335  }
         : 336  }else
         : 337  i = j = out_learnt.size();
         :
         : 339  max_literals += out_learnt.size();
    0.00 :   d6e7:   movslq %ebx,%rax
    0.00 :   d6ea:   add    %rax,0xe0(%r15)
         : 342  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   d6f1:   test   %ebx,%ebx
    0.00 :   d6f3:   jns    d9c8 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x638>
    0.00 :   d6f9:   lea    0x73e8(%rip),%rcx        # 14ae8 <Minisat::lit_Undef+0x390>
    0.00 :   d700:   mov    $0x40,%edx
    0.00 :   d705:   lea    0x6dc6(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   d70c:   lea    0x6fff(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   d713:   call   23b0 <__assert_fail@plt>
    0.00 :   d718:   nopl   0x0(%rax,%rax,1)
         : 73   Minisat::Clause::activity():
         : 181  float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   d720:   test   $0x8,%al
    1.30 :   d722:   je     db6b <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7db>
    0.19 :   d728:   mov    (%r12),%edx
         : 185  Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 298  if ( (c.activity() += cla_inc) > 1e20 ) {
    0.34 :   d72c:   pxor   %xmm0,%xmm0
    0.00 :   d730:   movsd  0x118(%r15),%xmm3
         : 301  Minisat::Clause::activity():
    0.01 :   d739:   shr    $0x5,%edx
         : 182  Minisat::Solver::claBumpActivity(Minisat::Clause&):
    0.00 :   d73c:   movslq %edx,%rax
    0.00 :   d73f:   cvtss2sd 0x4(%r12,%rax,4),%xmm0
    1.10 :   d746:   addsd  %xmm3,%xmm0
    0.44 :   d74a:   cvtsd2ss %xmm0,%xmm0
    0.33 :   d74e:   movss  %xmm0,0x4(%r12,%rax,4)
    0.19 :   d755:   cvtss2sd %xmm0,%xmm0
    0.01 :   d759:   comisd 0x7ba7(%rip),%xmm0        # 15308 <typeinfo name for Minisat::Solver+0x28>
    0.33 :   d761:   jbe    d433 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xa3>
         : 306  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   d767:   mov    0x110(%r15),%eax
         : 65   Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 300  for (int i = 0; i < learnts.size(); i++)
    0.00 :   d76e:   test   %eax,%eax
    0.00 :   d770:   jle    db5e <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7ce>
    0.00 :   d776:   mov    0x108(%r15),%rdi
    0.00 :   d77d:   sub    $0x1,%eax
    0.00 :   d780:   lea    0x4(%rdi,%rax,4),%r10
    0.00 :   d785:   nopl   (%rax)
         : 301  ca[learnts[i]].activity() *= 1e-20;
    0.00 :   d788:   mov    (%rdi),%eax
         : 303  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   d78a:   cmp    %eax,%r8d
    0.00 :   d78d:   jbe    db8a <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7fa>
    0.00 :   d793:   lea    (%r9,%rax,4),%rsi
         : 66   Minisat::Clause::activity():
    0.00 :   d797:   testb  $0x8,(%rsi)
    0.00 :   d79a:   je     db6b <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7db>
    0.00 :   d7a0:   mov    (%rsi),%eax
         : 184  Minisat::Solver::claBumpActivity(Minisat::Clause&):
    0.00 :   d7a2:   pxor   %xmm0,%xmm0
         : 300  for (int i = 0; i < learnts.size(); i++)
    0.00 :   d7a6:   add    $0x4,%rdi
         : 301  ca[learnts[i]].activity() *= 1e-20;
    0.00 :   d7aa:   movapd %xmm1,%xmm2
         : 303  Minisat::Clause::activity():
    0.00 :   d7ae:   shr    $0x5,%eax
         : 182  Minisat::Solver::claBumpActivity(Minisat::Clause&):
    0.00 :   d7b1:   cvtss2sd 0x4(%rsi,%rax,4),%xmm0
    0.01 :   d7b7:   mulsd  %xmm1,%xmm0
    0.00 :   d7bb:   cvtsd2ss %xmm0,%xmm0
    0.00 :   d7bf:   movss  %xmm0,0x4(%rsi,%rax,4)
         : 300  for (int i = 0; i < learnts.size(); i++)
    0.00 :   d7c5:   cmp    %rdi,%r10
    0.00 :   d7c8:   jne    d788 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x3f8>
         : 302  cla_inc *= 1e-20; } }
    0.00 :   d7ca:   mulsd  %xmm3,%xmm2
    0.00 :   d7ce:   movsd  %xmm2,0x118(%r15)
    0.00 :   d7d7:   jmp    d433 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xa3>
    0.00 :   d7dc:   nopl   0x0(%rax)
         : 307  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d7e0:   mov    (%rsp),%rcx
    1.08 :   d7e4:   movslq 0x8(%rcx),%rax
    0.90 :   d7e8:   cmp    0xc(%rcx),%eax
    0.20 :   d7eb:   je     d81d <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x48d>
    0.00 :   d7ed:   mov    (%rsp),%rsi
    0.00 :   d7f1:   lea    0x1(%rax),%ecx
    0.03 :   d7f4:   mov    (%rsi),%rdx
    0.03 :   d7f7:   mov    %ecx,0x8(%rsi)
         : 83   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.19 :   d7fa:   mov    0x240(%r15),%rsi
         : 89   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.11 :   d801:   mov    %ebp,(%rdx,%rax,4)
         : 76   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.93 :   d804:   mov    (%r12),%edx
    0.00 :   d808:   shr    $0x5,%edx
         : 165  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.01 :   d80b:   jmp    d470 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0xe0>
    0.00 :   d810:   movsd  0x7b68(%rip),%xmm3        # 15380 <typeinfo name for Minisat::Solver+0xa0>
    0.00 :   d818:   jmp    d532 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x1a2>
    0.00 :   d81d:   mov    %rcx,%rdi
    0.00 :   d820:   lea    0x1(%rax),%esi
    0.00 :   d823:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
         : 80   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d828:   mov    0x7ae1(%rip),%rcx        # 15310 <typeinfo name for Minisat::Solver+0x30>
         : 88   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d82f:   mov    (%rsp),%rax
         : 76   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d833:   mov    0x1c0(%r15),%rdi
    0.00 :   d83a:   movapd 0x7b3e(%rip),%xmm4        # 15380 <typeinfo name for Minisat::Solver+0xa0>
    0.00 :   d842:   movq   %rcx,%xmm1
    0.00 :   d847:   mov    0x7b32(%rip),%rcx        # 15380 <typeinfo name for Minisat::Solver+0xa0>
         : 91   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d84e:   movslq 0x8(%rax),%rax
         : 76   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d852:   movq   %rcx,%xmm2
    0.00 :   d857:   mov    0x7aba(%rip),%rcx        # 15318 <typeinfo name for Minisat::Solver+0x38>
    0.00 :   d85e:   movq   %rcx,%xmm5
         : 90   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   d863:   jmp    d7ed <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x45d>
         : 87   Minisat::vec<Minisat::Lit>::push():
         : 73   void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
    0.00 :   d865:   lea    0x1(%rax),%esi
    0.00 :   d868:   mov    %rdx,%rdi
    0.00 :   d86b:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   d870:   mov    0x8(%r14),%eax
    0.00 :   d874:   jmp    d3bb <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x2b>
         : 79   Minisat::Solver::varBumpActivity(int, double):
         : 288  for (int i = 0; i < nVars(); i++)
    0.00 :   d879:   xor    %edx,%edx
    0.00 :   d87b:   jmp    d51b <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x18b>
         : 291  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 55   heap   [i] = x;
    0.00 :   d880:   mov    0x18(%rsp),%edi
    0.23 :   d884:   mov    0x1c(%rsp),%r13d
    0.00 :   d889:   mov    %edi,(%r9)
         : 56   indices[x] = i;
    0.04 :   d88c:   mov    0x10(%rsp),%rdi
    0.00 :   d891:   mov    %edx,(%r10,%rdi,4)
    0.08 :   d895:   jmp    d5f0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x260>
         : 60   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 307  out_learnt.copyTo(analyze_toclear);
    0.00 :   d89a:   lea    0x260(%r15),%rdi
         : 309  Minisat::vec<Minisat::Lit>::growTo(int):
         : 115  capacity(size);
    0.00 :   d8a1:   mov    %ebx,%esi
    0.00 :   d8a3:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.10 :   d8a8:   movslq 0x268(%r15),%rax
    0.02 :   d8af:   cmp    %eax,%ebx
    0.00 :   d8b1:   jle    d8d4 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x544>
    0.00 :   d8b3:   mov    %ebx,%edx
    0.00 :   d8b5:   mov    0x260(%r15),%rcx
    0.01 :   d8bc:   xor    %esi,%esi
    0.00 :   d8be:   sub    %eax,%edx
    0.00 :   d8c0:   sub    $0x1,%edx
    0.02 :   d8c3:   lea    (%rcx,%rax,4),%rdi
    0.01 :   d8c7:   lea    0x4(,%rdx,4),%rdx
    0.00 :   d8cf:   call   2370 <memset@plt>
         : 117  sz = size; }
    0.01 :   d8d4:   mov    %ebx,0x268(%r15)
         : 119  Minisat::vec<Minisat::Lit>::copyTo(Minisat::vec<Minisat::Lit>&) const:
         : 90   void copyTo(vec<T>& copy) const { copy.clear(); copy.growTo(sz); for (int i = 0; i < sz; i++) copy[i] = data[i]; }
    0.01 :   d8db:   mov    0x8(%r14),%ebx
    0.01 :   d8df:   jmp    d6a4 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x314>
         : 93   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 318  for (i = j = 1; i < out_learnt.size(); i++){
    0.00 :   d8e4:   cmp    $0x1,%ebx
    0.00 :   d8e7:   jle    d6e7 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x357>
         : 321  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d8ed:   mov    (%r14),%r9
         : 89   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d8f0:   mov    0x1c0(%r15),%r8
    0.00 :   d8f7:   lea    0x1(%rbx),%r10d
    0.00 :   d8fb:   mov    $0x2,%edi
    0.00 :   d900:   jmp    d922 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x592>
    0.00 :   d902:   nopw   0x0(%rax,%rax,1)
         : 92   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d908:   movslq %r12d,%rax
         : 89   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 322  out_learnt[j++] = out_learnt[i];
    0.00 :   d90b:   add    $0x1,%r12d
    0.00 :   d90f:   mov    %edx,(%r9,%rax,4)
         : 318  for (i = j = 1; i < out_learnt.size(); i++){
    0.00 :   d913:   mov    %edi,%ebp
    0.00 :   d915:   add    $0x1,%rdi
    0.00 :   d919:   cmp    %rdi,%r10
    0.00 :   d91c:   je     d9a6 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x616>
         : 323  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   d922:   mov    -0x4(%r9,%rdi,4),%edx
    0.00 :   d927:   mov    %edx,%eax
    0.00 :   d929:   sar    %eax
         : 66   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d92b:   cltq
         : 88   Minisat::Solver::reason(int) const:
         : 277  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    0.00 :   d92d:   mov    (%r8,%rax,8),%eax
         : 279  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 321  if (reason(x) == CRef_Undef)
    0.00 :   d931:   cmp    $0xffffffff,%eax
    0.00 :   d934:   je     d908 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x578>
         : 324  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   d936:   cmp    0x230(%r15),%eax
    0.00 :   d93d:   jae    db8a <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7fa>
    0.00 :   d943:   mov    0x228(%r15),%rdx
    0.00 :   d94a:   lea    (%rdx,%rax,4),%rax
         : 67   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   d94e:   mov    (%rax),%edx
    0.00 :   d950:   mov    %edx,%esi
    0.00 :   d952:   shr    $0x5,%esi
         : 166  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 325  for (int k = 1; k < c.size(); k++)
    0.00 :   d955:   cmp    $0x3f,%edx
    0.00 :   d958:   jbe    d913 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x583>
    0.00 :   d95a:   sub    $0x2,%esi
         : 329  Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d95d:   mov    0x240(%r15),%rcx
    0.00 :   d964:   lea    0x8(%rax),%rdx
    0.00 :   d968:   lea    0xc(%rax,%rsi,4),%rsi
    0.00 :   d96d:   jmp    d979 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x5e9>
    0.00 :   d96f:   nop
         : 93   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.00 :   d970:   add    $0x4,%rdx
    0.00 :   d974:   cmp    %rdx,%rsi
    0.00 :   d977:   je     d913 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x583>
         : 328  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   d979:   mov    (%rdx),%eax
    0.00 :   d97b:   sar    %eax
         : 65   Minisat::vec<char>::operator[](int):
    0.00 :   d97d:   cltq
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 326  if (!seen[var(c[k])] && level(var(c[k])) > 0){
    0.00 :   d97f:   cmpb   $0x0,(%rcx,%rax,1)
    0.00 :   d983:   jne    d970 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x5e0>
    0.00 :   d985:   mov    0x4(%r8,%rax,8),%r11d
    0.00 :   d98a:   test   %r11d,%r11d
    0.00 :   d98d:   jle    d970 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x5e0>
         : 327  out_learnt[j++] = out_learnt[i];
    0.00 :   d98f:   mov    -0x4(%r9,%rdi,4),%edx
         : 329  Minisat::vec<Minisat::Lit>::operator[](int):
    0.00 :   d994:   movslq %r12d,%rax
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.00 :   d997:   add    $0x1,%r12d
    0.00 :   d99b:   mov    %edx,(%r9,%rax,4)
         : 328  break; }
    0.00 :   d99f:   jmp    d913 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x583>
    0.00 :   d9a4:   mov    %ecx,%ebx
         : 335  out_learnt.shrink(i - j);
    0.18 :   d9a6:   sub    %r12d,%ebp
         : 334  max_literals += out_learnt.size();
    0.05 :   d9a9:   movslq %ebx,%rax
    0.00 :   d9ac:   add    %rax,0xe0(%r15)
         : 337  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.11 :   d9b3:   cmp    %ebx,%ebp
    0.00 :   d9b5:   jg     d6f9 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x369>
    0.00 :   d9bb:   test   %ebp,%ebp
    0.00 :   d9bd:   jle    d9c8 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x638>
    0.00 :   d9bf:   sub    %ebp,%ebx
    0.04 :   d9c1:   mov    %ebx,0x8(%r14)
         : 71   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 336  tot_literals += out_learnt.size();
    0.05 :   d9c5:   movslq %ebx,%rax
    0.00 :   d9c8:   add    %rax,0xe8(%r15)
         :
         : 341  // Find correct backtrack level:
         : 342  //
         : 343  if (out_learnt.size() == 1)
    0.10 :   d9cf:   xor    %edi,%edi
    0.00 :   d9d1:   cmp    $0x1,%ebx
    0.00 :   d9d4:   je     da4b <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6bb>
         : 347  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   d9d6:   mov    (%r14),%r10
         : 89   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.05 :   d9d9:   mov    0x1c0(%r15),%r9
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 349  // Find the first literal assigned at the next-highest level:
         : 350  for (int i = 2; i < out_learnt.size(); i++)
         : 351  if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
         : 352  max_i = i;
         : 353  // Swap-in this literal at index 1:
         : 354  Lit p             = out_learnt[max_i];
    0.02 :   d9e0:   mov    0x4(%r10),%ebp
         : 356  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.08 :   d9e4:   lea    0x4(%r10),%r8
         : 89   Minisat::var(Minisat::Lit):
    0.00 :   d9e8:   mov    %ebp,%eax
    0.00 :   d9ea:   sar    %eax
         : 64   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d9ec:   cltq
         : 88   Minisat::Solver::level(int) const:
         : 278  inline int  Solver::level (Var x) const { return vardata[x].level; }
    0.02 :   d9ee:   mov    0x4(%r9,%rax,8),%edi
         : 280  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 345  for (int i = 2; i < out_learnt.size(); i++)
    0.07 :   d9f3:   cmp    $0x2,%ebx
    0.00 :   d9f6:   jle    da40 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6b0>
    0.00 :   d9f8:   lea    0x8(%r10),%rax
    0.00 :   d9fc:   mov    $0x2,%ecx
         : 343  int max_i = 1;
    0.00 :   da01:   mov    $0x1,%r11d
    0.00 :   da07:   jmp    da22 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x692>
    0.00 :   da09:   nopl   0x0(%rax)
         : 347  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.02 :   da10:   movslq %r11d,%rdx
    0.25 :   da13:   lea    (%r10,%rdx,4),%r8
         : 90   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 345  for (int i = 2; i < out_learnt.size(); i++)
    0.06 :   da17:   add    $0x1,%ecx
    0.09 :   da1a:   add    $0x4,%rax
    0.02 :   da1e:   cmp    %ebx,%ecx
    0.06 :   da20:   je     da40 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6b0>
         : 350  Minisat::vec<Minisat::Lit>::operator[](int):
    0.02 :   da22:   mov    (%rax),%esi
    0.43 :   da24:   mov    %rax,%r8
         : 89   Minisat::var(Minisat::Lit):
    0.15 :   da27:   mov    %esi,%edx
    0.03 :   da29:   sar    %edx
         : 64   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.01 :   da2b:   movslq %edx,%rdx
         : 88   Minisat::Solver::level(int) const:
    0.01 :   da2e:   mov    0x4(%r9,%rdx,8),%edx
         : 279  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 346  if (level(var(out_learnt[i])) > level(var(out_learnt[max_i])))
    0.83 :   da33:   cmp    %edx,%edi
    0.03 :   da35:   jge    da10 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x680>
    0.00 :   da37:   mov    %edx,%edi
    0.39 :   da39:   mov    %esi,%ebp
    0.00 :   da3b:   mov    %ecx,%r11d
    0.00 :   da3e:   jmp    da17 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x687>
         : 350  out_learnt[max_i] = out_learnt[1];
    0.00 :   da40:   mov    0x4(%r10),%eax
    0.22 :   da44:   mov    %eax,(%r8)
         : 351  out_learnt[1]     = p;
    0.00 :   da47:   mov    %ebp,0x4(%r10)
         : 352  out_btlevel       = level(var(p));
    0.06 :   da4b:   mov    0x8(%rsp),%rax
         : 355  }
         :
         : 357  for (int j = 0; j < analyze_toclear.size(); j++) seen[var(analyze_toclear[j])] = 0;    // ('seen[]' is now cleared)
    0.00 :   da50:   xor    %edx,%edx
         : 352  out_btlevel       = level(var(p));
    0.00 :   da52:   mov    %edi,(%rax)
         : 355  for (int j = 0; j < analyze_toclear.size(); j++) seen[var(analyze_toclear[j])] = 0;    // ('seen[]' is now cleared)
    0.03 :   da54:   mov    0x268(%r15),%eax
    0.00 :   da5b:   test   %eax,%eax
    0.00 :   da5d:   jle    da86 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6f6>
    0.00 :   da5f:   nop
         : 360  Minisat::var(Minisat::Lit):
    0.00 :   da60:   mov    0x260(%r15),%rax
         : 63   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.05 :   da67:   mov    0x240(%r15),%rcx
         : 356  Minisat::var(Minisat::Lit):
    0.01 :   da6e:   mov    (%rax,%rdx,4),%eax
         : 63   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.31 :   da71:   add    $0x1,%rdx
         : 356  Minisat::var(Minisat::Lit):
    0.00 :   da75:   sar    %eax
         : 63   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   da77:   cltq
         : 89   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.03 :   da79:   movb   $0x0,(%rcx,%rax,1)
    1.29 :   da7d:   cmp    %edx,0x268(%r15)
    0.02 :   da84:   jg     da60 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x6d0>
         : 356  }
    0.00 :   da86:   add    $0x28,%rsp
    0.11 :   da8a:   pop    %rbx
    0.13 :   da8b:   pop    %rbp
    0.02 :   da8c:   pop    %r12
    0.01 :   da8e:   pop    %r13
    0.01 :   da90:   pop    %r14
    0.02 :   da92:   pop    %r15
    0.00 :   da94:   ret
         : 310  for (i = 1; i < out_learnt.size(); i++)
    0.00 :   da95:   cmp    $0x1,%ebx
    0.02 :   da98:   jle    d6e7 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x357>
         : 313  Minisat::vec<Minisat::Lit>::operator[](int):
    0.02 :   da9e:   mov    (%r14),%rsi
    0.04 :   daa1:   lea    -0x2(%rbx),%eax
         : 89   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   daa4:   mov    0x1c0(%r15),%rdi
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 309  uint32_t abstract_level = 0;
    0.00 :   daab:   xor    %r13d,%r13d
         : 311  Minisat::Solver::abstractLevel(int) const:
         : 320  inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
    0.00 :   daae:   mov    $0x1,%r8d
    0.00 :   dab4:   lea    0x4(%rsi),%rdx
    0.01 :   dab8:   lea    0x8(%rsi,%rax,4),%r9
    0.01 :   dabd:   nopl   (%rax)
         : 330  Minisat::var(Minisat::Lit):
    0.00 :   dac0:   mov    (%rdx),%eax
         : 63   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 310  for (i = 1; i < out_learnt.size(); i++)
    0.15 :   dac2:   add    $0x4,%rdx
         : 312  Minisat::var(Minisat::Lit):
    0.03 :   dac6:   sar    %eax
         : 63   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
    0.06 :   dac8:   cltq
         : 87   Minisat::Solver::abstractLevel(int) const:
    0.12 :   daca:   mov    0x4(%rdi,%rax,8),%ecx
    0.60 :   dace:   mov    %r8d,%eax
    0.00 :   dad1:   shl    %cl,%eax
         : 323  Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 311  abstract_level |= abstractLevel(var(out_learnt[i])); // (maintain an abstraction of levels involved in conflict)
    0.02 :   dad3:   or     %eax,%r13d
         : 310  for (i = 1; i < out_learnt.size(); i++)
    0.05 :   dad6:   cmp    %rdx,%r9
    0.01 :   dad9:   jne    dac0 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x730>
    0.00 :   dadb:   mov    $0x4,%ecx
    0.13 :   dae0:   mov    %ebx,%eax
    0.00 :   dae2:   mov    $0x1,%r12d
    0.01 :   dae8:   mov    $0x1,%ebp
    0.01 :   daed:   mov    %rcx,%rbx
    0.00 :   daf0:   mov    %eax,%ecx
    0.00 :   daf2:   jmp    db23 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x793>
         : 314  if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
    0.00 :   daf4:   mov    %r13d,%edx
    0.58 :   daf7:   mov    %r8d,%esi
    0.00 :   dafa:   mov    %r15,%rdi
    0.00 :   dafd:   call   d070 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)>
    0.19 :   db02:   test   %al,%al
    0.02 :   db04:   je     db45 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7b5>
         : 321  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.01 :   db06:   mov    0x8(%r14),%ecx
         : 65   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 313  for (i = j = 1; i < out_learnt.size(); i++)
    0.19 :   db0a:   add    $0x1,%ebp
    0.01 :   db0d:   add    $0x4,%rbx
    0.01 :   db11:   cmp    %ecx,%ebp
    0.08 :   db13:   jge    d9a4 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x614>
         : 318  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   db19:   mov    (%r14),%rsi
         : 89   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.25 :   db1c:   mov    0x1c0(%r15),%rdi
         : 88   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.13 :   db23:   lea    (%rsi,%rbx,1),%rdx
         : 89   Minisat::var(Minisat::Lit):
    0.07 :   db27:   mov    (%rdx),%r8d
    0.79 :   db2a:   mov    %r8d,%eax
    0.01 :   db2d:   sar    %eax
         : 65   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.01 :   db2f:   cltq
         : 88   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 314  if (reason(var(out_learnt[i])) == CRef_Undef || !litRedundant(out_learnt[i], abstract_level))
    0.15 :   db31:   cmpl   $0xffffffff,(%rdi,%rax,8)
    2.60 :   db35:   jne    daf4 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x764>
         : 315  out_learnt[j++] = out_learnt[i];
    0.01 :   db37:   mov    (%rdx),%edx
         : 317  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    2.10 :   db39:   movslq %r12d,%rax
         : 89   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
    0.01 :   db3c:   add    $0x1,%r12d
    0.01 :   db40:   mov    %edx,(%rsi,%rax,4)
    0.17 :   db43:   jmp    db0a <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x77a>
         : 318  Minisat::vec<Minisat::Lit>::operator[](int):
    0.00 :   db45:   mov    (%r14),%rsi
         : 88   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.29 :   db48:   mov    0x8(%r14),%ecx
         : 65   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.02 :   db4c:   lea    (%rsi,%rbx,1),%rdx
    0.00 :   db50:   jmp    db37 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x7a7>
         : 90   Minisat::vec<Minisat::Lit>::growTo(int):
         : 114  if (sz >= size) return;
    0.00 :   db52:   mov    0x268(%r15),%eax
    0.00 :   db59:   jmp    d698 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x308>
    0.00 :   db5e:   movsd  0x77aa(%rip),%xmm2        # 15310 <typeinfo name for Minisat::Solver+0x30>
    0.00 :   db66:   jmp    d7ca <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)+0x43a>
         : 119  Minisat::Clause::activity():
         : 181  float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   db6b:   lea    0x5fee(%rip),%rcx        # 13b60 <typeinfo name for Minisat::BoolOption+0x250>
    0.00 :   db72:   mov    $0xb5,%edx
    0.00 :   db77:   lea    0x68ab(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   db7e:   lea    0x69c2(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   db85:   call   23b0 <__assert_fail@plt>
         : 187  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   db8a:   lea    0x5ea7(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   db91:   mov    $0x3f,%edx
    0.00 :   db96:   lea    0x5e7d(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   db9d:   lea    0x6874(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   dba4:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&):
         : 275  assert(confl != CRef_Undef); // (otherwise should be UIP)
    0.00 :   dba9:   lea    0x6f78(%rip),%rcx        # 14b28 <Minisat::lit_Undef+0x3d0>
    0.00 :   dbb0:   mov    $0x113,%edx
    0.00 :   dbb5:   lea    0x758b(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   dbbc:   lea    0x75c0(%rip),%rdi        # 15183 <Minisat::lit_Undef+0xa2b>
    0.00 :   dbc3:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (3879 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000d070 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)>:
         : 6    Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         :
         :
         : 364  // Check if 'p' can be removed. 'abstract_levels' is used to abort early if the algorithm is
         : 365  // visiting literals at levels that cannot be removed later.
         : 366  bool Solver::litRedundant(Lit p, uint32_t abstract_levels)
         : 367  {
    1.55 :   d070:   endbr64
    0.00 :   d074:   push   %r15
         : 363  analyze_stack.clear(); analyze_stack.push(p);
    0.59 :   d076:   lea    0x250(%rdi),%rax
         : 362  {
    0.54 :   d07d:   mov    %edx,%r15d
    0.03 :   d080:   push   %r14
    0.18 :   d082:   push   %r13
    0.00 :   d084:   push   %r12
    0.85 :   d086:   push   %rbp
    0.00 :   d087:   mov    %esi,%ebp
    0.00 :   d089:   push   %rbx
    0.18 :   d08a:   mov    %rdi,%rbx
    0.72 :   d08d:   sub    $0x18,%rsp
         : 363  analyze_stack.clear(); analyze_stack.push(p);
    0.00 :   d091:   mov    %rax,0x8(%rsp)
         : 365  Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.15 :   d096:   mov    0x250(%rdi),%rax
    0.08 :   d09d:   test   %rax,%rax
    0.00 :   d0a0:   je     d2d3 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x263>
         : 124  for (int i = 0; i < sz; i++) data[i].~T();
         : 125  sz = 0;
    0.00 :   d0a6:   movl   $0x0,0x258(%rdi)
         : 127  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d0b0:   mov    0x25c(%rdi),%edx
    0.00 :   d0b6:   test   %edx,%edx
    0.80 :   d0b8:   je     d304 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x294>
         : 78   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   d0be:   mov    0x268(%rdi),%r13d
         : 65   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.05 :   d0c5:   movl   $0x1,0x258(%rdi)
    0.31 :   d0cf:   mov    %esi,(%rax)
         : 77   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.64 :   d0d1:   mov    $0x1,%esi
         : 65   Minisat::Solver::abstractLevel(int) const:
         : 320  inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
    0.03 :   d0d6:   mov    $0x1,%r8d
         : 327  Minisat::vec<Minisat::Lit>::last():
         : 83   T&       last  (void)              { return data[sz-1]; }
    0.00 :   d0dc:   movslq %esi,%rdx
         : 85   Minisat::var(Minisat::Lit):
         :
         : 63   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
         : 64   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
         : 65   inline  Lit  operator ^(Lit p, bool b)      { Lit q; q.x = p.x ^ (unsigned int)b; return q; }
         : 66   inline  bool sign      (Lit p)              { return p.x & 1; }
         : 67   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   d0df:   mov    -0x4(%rax,%rdx,4),%eax
         : 69   Minisat::Solver::reason(int) const:
         : 277  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    5.08 :   d0e3:   mov    0x1c0(%rbx),%rdx
         : 279  Minisat::var(Minisat::Lit):
    0.13 :   d0ea:   sar    %eax
         : 63   Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d0ec:   cltq
         : 88   Minisat::Solver::reason(int) const:
    0.72 :   d0ee:   mov    (%rdx,%rax,8),%eax
         : 278  Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 366  int top = analyze_toclear.size();
         : 367  while (analyze_stack.size() > 0){
         : 368  assert(reason(var(analyze_stack.last())) != CRef_Undef);
    6.55 :   d0f1:   cmp    $0xffffffff,%eax
    0.00 :   d0f4:   je     d326 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x2b6>
         : 371  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   d0fa:   cmp    %eax,0x230(%rbx)
    0.46 :   d100:   jbe    d364 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x2f4>
    0.00 :   d106:   mov    0x228(%rbx),%rdx
         : 72   Minisat::vec<Minisat::Lit>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.00 :   d10d:   sub    $0x1,%esi
    0.00 :   d110:   mov    %esi,0x258(%rbx)
         : 79   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   d116:   lea    (%rdx,%rax,4),%r14
         : 64   Minisat::Clause::size() const:
         : 162  for (int i = 0; i < size(); i++)
         : 163  abstraction |= 1 << (var(data[i].lit) & 31);
         : 164  data[header.size].abs = abstraction;  }
         :
         :
         : 167  int          size        ()      const   { return header.size; }
    0.87 :   d11a:   mov    (%r14),%eax
   11.92 :   d11d:   mov    %eax,%edi
    0.00 :   d11f:   shr    $0x5,%edi
         : 171  Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 369  Clause& c = ca[reason(var(analyze_stack.last()))]; analyze_stack.pop();
         :
         : 371  for (int i = 1; i < c.size(); i++){
    0.00 :   d122:   cmp    $0x3f,%eax
    0.00 :   d125:   jbe    d22e <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x1be>
    0.00 :   d12b:   mov    $0x1,%ebp
    0.00 :   d130:   jmp    d185 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x115>
    0.00 :   d132:   nopw   0x0(%rax,%rax,1)
         : 377  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d138:   mov    0x250(%rbx),%rax
    0.13 :   d13f:   lea    0x1(%rsi),%edx
    0.03 :   d142:   mov    %edx,0x258(%rbx)
    0.13 :   d148:   mov    %r12d,(%rax,%rsi,4)
    1.06 :   d14c:   movslq 0x268(%rbx),%rsi
    0.10 :   d153:   cmp    0x26c(%rbx),%esi
    0.03 :   d159:   je     d200 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x190>
    0.00 :   d15f:   mov    0x260(%rbx),%rax
    0.00 :   d166:   lea    0x1(%rsi),%edx
    0.00 :   d169:   mov    %edx,0x268(%rbx)
    0.00 :   d16f:   mov    %r12d,(%rax,%rsi,4)
         : 86   Minisat::Clause::size() const:
    1.01 :   d173:   mov    (%r14),%edi
    0.05 :   d176:   shr    $0x5,%edi
         : 164  Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
    0.03 :   d179:   add    $0x1,%rbp
    5.00 :   d17d:   cmp    %ebp,%edi
    1.03 :   d17f:   jle    d228 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x1b8>
         : 370  Lit p  = c[i];
    0.05 :   d185:   mov    0x4(%r14,%rbp,4),%r12d
         : 372  Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    5.83 :   d18a:   mov    0x240(%rbx),%rsi
         : 89   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.13 :   d191:   mov    %r12d,%eax
    1.05 :   d194:   sar    %eax
         : 65   Minisat::vec<char>::operator[](int):
    0.31 :   d196:   cltq
    0.39 :   d198:   lea    (%rsi,%rax,1),%rdx
         : 89   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 371  if (!seen[var(p)] && level(var(p)) > 0){
    1.78 :   d19c:   cmpb   $0x0,(%rdx)
   12.17 :   d19f:   jne    d179 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x109>
         : 374  Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   d1a1:   mov    0x1c0(%rbx),%rcx
    8.73 :   d1a8:   lea    (%rcx,%rax,8),%rax
         : 89   Minisat::Solver::level(int) const:
         : 278  inline int  Solver::level (Var x) const { return vardata[x].level; }
    0.10 :   d1ac:   mov    0x4(%rax),%ecx
         : 280  Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
    4.30 :   d1af:   test   %ecx,%ecx
    0.00 :   d1b1:   jle    d179 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x109>
         : 372  if (reason(var(p)) != CRef_Undef && (abstractLevel(var(p)) & abstract_levels) != 0){
    0.00 :   d1b3:   cmpl   $0xffffffff,(%rax)
    0.46 :   d1b6:   je     d248 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x1d8>
         : 375  Minisat::Solver::abstractLevel(int) const:
         : 320  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
    0.00 :   d1bc:   mov    %r8d,%eax
    1.91 :   d1bf:   shl    %cl,%eax
         : 323  Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
    0.49 :   d1c1:   test   %r15d,%eax
    0.67 :   d1c4:   je     d248 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x1d8>
         : 373  seen[var(p)] = 1;
    0.00 :   d1ca:   movb   $0x1,(%rdx)
         : 375  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    1.11 :   d1cd:   movslq 0x258(%rbx),%rsi
    0.03 :   d1d4:   cmp    0x25c(%rbx),%esi
    0.15 :   d1da:   jne    d138 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0xc8>
    0.00 :   d1e0:   mov    0x8(%rsp),%rdi
    0.00 :   d1e5:   add    $0x1,%esi
    0.00 :   d1e8:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   d1ed:   movslq 0x258(%rbx),%rsi
    0.00 :   d1f4:   mov    $0x1,%r8d
    0.00 :   d1fa:   jmp    d138 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0xc8>
    0.00 :   d1ff:   nop
    0.00 :   d200:   add    $0x1,%esi
         : 86   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 375  analyze_stack.push(p);
         : 376  analyze_toclear.push(p);
    0.00 :   d203:   lea    0x260(%rbx),%rdi
         : 378  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   d20a:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   d20f:   movslq 0x268(%rbx),%rsi
    0.00 :   d216:   mov    $0x1,%r8d
    0.00 :   d21c:   jmp    d15f <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0xef>
    0.00 :   d221:   nopl   0x0(%rax)
         : 79   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.08 :   d228:   mov    0x258(%rbx),%esi
         : 65   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 365  while (analyze_stack.size() > 0){
    3.69 :   d22e:   test   %esi,%esi
    0.00 :   d230:   jle    d2fd <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x28d>
         : 368  Minisat::vec<Minisat::Lit>::last():
         : 83   T&       last  (void)              { return data[sz-1]; }
    0.00 :   d236:   mov    0x250(%rbx),%rax
    0.57 :   d23d:   jmp    d0dc <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x6c>
    0.00 :   d242:   nopw   0x0(%rax,%rax,1)
         : 87   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   d248:   mov    0x268(%rbx),%eax
         : 65   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 377  }else{
         : 378  for (int j = top; j < analyze_toclear.size(); j++)
    4.41 :   d24e:   cmp    %r13d,%eax
    0.00 :   d251:   jle    d2aa <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x23a>
         : 381  Minisat::var(Minisat::Lit):
    0.00 :   d253:   mov    0x260(%rbx),%rdx
         : 63   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.34 :   d25a:   movslq %r13d,%rax
         : 89   Minisat::var(Minisat::Lit):
    0.00 :   d25d:   mov    (%rdx,%rax,4),%eax
         : 63   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
    0.85 :   d260:   lea    0x1(%r13),%edx
    0.00 :   d264:   movslq %edx,%rcx
         : 379  Minisat::var(Minisat::Lit):
    0.00 :   d267:   sar    %eax
    0.00 :   d269:   shl    $0x2,%rcx
         : 64   Minisat::vec<char>::operator[](int):
    0.00 :   d26d:   cltq
         : 88   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 378  seen[var(analyze_toclear[j])] = 0;
    0.18 :   d26f:   movb   $0x0,(%rsi,%rax,1)
         : 380  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.98 :   d273:   mov    0x268(%rbx),%eax
         : 65   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 377  for (int j = top; j < analyze_toclear.size(); j++)
    0.03 :   d279:   cmp    %edx,%eax
    0.00 :   d27b:   jle    d2aa <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x23a>
    0.00 :   d27d:   nopl   (%rax)
         : 381  Minisat::var(Minisat::Lit):
    0.13 :   d280:   mov    0x260(%rbx),%rax
         : 63   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 378  seen[var(analyze_toclear[j])] = 0;
    0.95 :   d287:   mov    0x240(%rbx),%rsi
         : 377  for (int j = top; j < analyze_toclear.size(); j++)
    0.23 :   d28e:   add    $0x1,%edx
         : 379  Minisat::var(Minisat::Lit):
    0.00 :   d291:   mov    (%rax,%rcx,1),%eax
         : 63   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
    0.10 :   d294:   add    $0x4,%rcx
         : 378  Minisat::var(Minisat::Lit):
    0.08 :   d298:   sar    %eax
         : 63   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.08 :   d29a:   cltq
         : 89   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 378  seen[var(analyze_toclear[j])] = 0;
    0.00 :   d29c:   movb   $0x0,(%rsi,%rax,1)
         : 380  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.41 :   d2a0:   mov    0x268(%rbx),%eax
         : 65   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 377  for (int j = top; j < analyze_toclear.size(); j++)
    0.03 :   d2a6:   cmp    %eax,%edx
    0.03 :   d2a8:   jl     d280 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x210>
         : 379  analyze_toclear.shrink(analyze_toclear.size() - top);
    0.00 :   d2aa:   mov    %eax,%edx
    0.31 :   d2ac:   sub    %r13d,%edx
         : 382  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.05 :   d2af:   cmp    %eax,%edx
    0.34 :   d2b1:   jg     d345 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x2d5>
    0.00 :   d2b7:   test   %edx,%edx
    0.13 :   d2b9:   jle    d2c2 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x252>
    0.00 :   d2bb:   mov    %r13d,0x268(%rbx)
         : 70   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 380  return false;
    0.34 :   d2c2:   xor    %eax,%eax
         : 387  }
         : 388  }
         : 389  }
         :
         : 391  return true;
         : 392  }
    0.49 :   d2c4:   add    $0x18,%rsp
    0.36 :   d2c8:   pop    %rbx
    2.50 :   d2c9:   pop    %rbp
    0.00 :   d2ca:   pop    %r12
    0.47 :   d2cc:   pop    %r13
    0.00 :   d2ce:   pop    %r14
    0.93 :   d2d0:   pop    %r15
    0.10 :   d2d2:   ret
         : 401  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d2d3:   movslq 0x258(%rdi),%rdx
    0.00 :   d2da:   lea    0x1(%rdx),%esi
    0.00 :   d2dd:   cmp    %edx,0x25c(%rdi)
    0.00 :   d2e3:   je     d309 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x299>
    0.00 :   d2e5:   mov    %esi,0x258(%rbx)
         : 80   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   d2eb:   mov    0x268(%rbx),%r13d
         : 65   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   d2f2:   mov    %ebp,(%rax,%rdx,4)
         : 76   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 365  while (analyze_stack.size() > 0){
    0.00 :   d2f5:   test   %esi,%esi
    0.00 :   d2f7:   jg     d0d6 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x66>
         : 386  return true;
    0.05 :   d2fd:   mov    $0x1,%eax
    0.10 :   d302:   jmp    d2c4 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x254>
         : 389  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   d304:   mov    $0x1,%esi
    0.00 :   d309:   mov    0x8(%rsp),%rdi
    0.00 :   d30e:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   d313:   movslq 0x258(%rbx),%rdx
    0.00 :   d31a:   mov    0x250(%rbx),%rax
    0.00 :   d321:   lea    0x1(%rdx),%esi
    0.00 :   d324:   jmp    d2e5 <Minisat::Solver::litRedundant(Minisat::Lit, unsigned int)+0x275>
         : 81   Minisat::Solver::litRedundant(Minisat::Lit, unsigned int):
         : 366  assert(reason(var(analyze_stack.last())) != CRef_Undef);
    0.00 :   d326:   lea    0x774b(%rip),%rcx        # 14a78 <Minisat::lit_Undef+0x320>
    0.00 :   d32d:   mov    $0x16e,%edx
    0.00 :   d332:   lea    0x7e0e(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   d339:   lea    0x7778(%rip),%rdi        # 14ab8 <Minisat::lit_Undef+0x360>
    0.00 :   d340:   call   23b0 <__assert_fail@plt>
         : 372  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   d345:   lea    0x779c(%rip),%rcx        # 14ae8 <Minisat::lit_Undef+0x390>
    0.00 :   d34c:   mov    $0x40,%edx
    0.00 :   d351:   lea    0x717a(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   d358:   lea    0x73b3(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   d35f:   call   23b0 <__assert_fail@plt>
         : 70   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   d364:   lea    0x66cd(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   d36b:   mov    $0x3f,%edx
    0.00 :   d370:   lea    0x66a3(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   d377:   lea    0x709a(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   d37e:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (2484 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000e9d0 <Minisat::Solver::cancelUntil(int) [clone .part.0]>:
         : 6    Minisat::Solver::cancelUntil(int):
         : 207  return false; }
         :
         :
         : 210  // Revert to the state at given level (keeping all assignment at 'level' but not beyond).
         : 211  //
         : 212  void Solver::cancelUntil(int level) {
    0.00 :   e9d0:   push   %r15
    0.08 :   e9d2:   movslq %esi,%rax
    0.00 :   e9d5:   push   %r14
         : 216  Minisat::vec<int>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.08 :   e9d7:   lea    0x0(,%rax,4),%r15
         : 94   Minisat::Solver::cancelUntil(int):
    0.04 :   e9df:   mov    %rax,%r14
    0.00 :   e9e2:   push   %r13
    0.08 :   e9e4:   push   %r12
    0.04 :   e9e6:   push   %rbp
    0.00 :   e9e7:   push   %rbx
    0.08 :   e9e8:   mov    %rdi,%rbx
    0.00 :   e9eb:   sub    $0x28,%rsp
         : 214  Minisat::vec<int>::operator[](int):
    0.08 :   e9ef:   mov    0x1b0(%rdi),%rdx
         : 88   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e9f6:   mov    0x1a8(%rdi),%ecx
         : 65   Minisat::Solver::cancelUntil(int):
         : 209  if (decisionLevel() > level){
         : 210  for (int c = trail.size()-1; c >= trail_lim[level]; c--){
    0.00 :   e9fc:   mov    (%rdx,%rax,4),%eax
    1.57 :   e9ff:   lea    -0x1(%rcx),%ebp
    0.00 :   ea02:   cmp    %eax,%ebp
    0.00 :   ea04:   jl     ebc3 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1f3>
    0.04 :   ea0a:   movslq %ebp,%r12
         : 216  Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 105  {
         : 106  indices.growTo(n+1, -1);
         : 107  assert(!inHeap(n));
         :
         : 109  indices[n] = heap.size();
         : 110  heap.push(n);
    0.00 :   ea0d:   lea    0x1f8(%rdi),%rax
    0.00 :   ea14:   mov    %r14d,0xc(%rsp)
    0.04 :   ea19:   mov    %r15,%r14
    0.00 :   ea1c:   mov    %rax,0x18(%rsp)
    0.00 :   ea21:   shl    $0x2,%r12
    0.08 :   ea25:   jmp    ea59 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x89>
    0.00 :   ea27:   nopw   0x0(%rax,%rax,1)
         : 118  Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.04 :   ea30:   mov    0x208(%rbx),%rdx
    0.36 :   ea37:   mov    (%rdx,%r13,4),%edx
    2.74 :   ea3b:   test   %edx,%edx
    0.12 :   ea3d:   js     ea9e <Minisat::Solver::cancelUntil(int) [clone .part.0]+0xce>
         : 85   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   ea3f:   mov    0x1b0(%rbx),%rdx
         : 89   Minisat::Solver::cancelUntil(int):
    1.17 :   ea46:   sub    $0x1,%ebp
    0.88 :   ea49:   sub    $0x4,%r12
    3.83 :   ea4d:   mov    (%rdx,%r14,1),%eax
    2.09 :   ea51:   cmp    %eax,%ebp
    1.21 :   ea53:   jl     ebb8 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1e8>
         : 214  Minisat::vec<Minisat::Lit>::operator[](int):
    0.00 :   ea59:   mov    0x1a0(%rbx),%rax
         : 88   Minisat::Solver::cancelUntil(int):
         : 211  Var      x  = var(trail[c]);
         : 212  assigns [x] = l_Undef;
    1.53 :   ea60:   mov    0x170(%rbx),%rsi
    1.05 :   ea67:   mov    (%rax,%r12,1),%eax
         : 215  Minisat::var(Minisat::Lit):
         :
         : 63   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
         : 64   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
         : 65   inline  Lit  operator ^(Lit p, bool b)      { Lit q; q.x = p.x ^ (unsigned int)b; return q; }
         : 66   inline  bool sign      (Lit p)              { return p.x & 1; }
         : 67   inline  int  var       (Lit p)              { return p.x >> 1; }
    3.39 :   ea6b:   mov    %eax,%r8d
    0.08 :   ea6e:   sar    %r8d
         : 70   Minisat::vec<Minisat::lbool>::operator[](int):
    0.88 :   ea71:   movslq %r8d,%r13
         : 88   Minisat::Solver::cancelUntil(int):
    4.07 :   ea74:   movb   $0x2,(%rsi,%r13,1)
         : 212  if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
   11.35 :   ea79:   cmpl   $0x1,0x58(%rbx)
    1.09 :   ea7d:   jle    eb98 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1c8>
         : 213  polarity[x] = sign(trail[c]);
    0.20 :   ea83:   mov    0x180(%rbx),%rdx
         : 215  Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.85 :   ea8a:   mov    %al,(%rdx,%r13,1)
    4.31 :   ea8e:   andb   $0x1,(%rdx,%r13,1)
         : 64   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
   29.98 :   ea93:   mov    0x210(%rbx),%eax
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
    0.32 :   ea99:   cmp    %eax,%r8d
    1.24 :   ea9c:   jl     ea30 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x60>
         : 82   Minisat::Solver::insertVarOrder(int):
         :
         : 282  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
         : 283  inline int  Solver::level (Var x) const { return vardata[x].level; }
         :
         : 285  inline void Solver::insertVarOrder(Var x) {
         : 286  if (!order_heap.inHeap(x) && decision[x]) order_heap.insert(x); }
    0.00 :   ea9e:   mov    0x190(%rbx),%rdx
    4.59 :   eaa5:   cmpb   $0x0,(%rdx,%r13,1)
    1.94 :   eaaa:   je     ea3f <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x6f>
         : 290  Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   eaac:   lea    0x1(%r8),%r9d
         : 103  Minisat::vec<int>::growTo(int, int const&):
         : 106  }
         :
         :
         : 109  template<class T>
         : 110  void vec<T>::growTo(int size, const T& pad) {
         : 111  if (sz >= size) return;
    0.00 :   eab0:   cmp    %r9d,%eax
    0.00 :   eab3:   jl     ec10 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x240>
         : 114  Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   eab9:   mov    0x208(%rbx),%r15
    0.00 :   eac0:   shl    $0x2,%r13
    0.00 :   eac4:   lea    (%r15,%r13,1),%rdx
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   eac8:   cmp    %eax,%r8d
    0.00 :   eacb:   jge    eaf8 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x128>
    0.00 :   eacd:   mov    (%rdx),%eax
    0.44 :   eacf:   test   %eax,%eax
    0.12 :   ead1:   js     eaf8 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x128>
         : 86   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 102  assert(!inHeap(n));
    0.00 :   ead3:   lea    0x55de(%rip),%rcx        # 140b8 <typeinfo name for Minisat::BoolOption+0x7a8>
    0.00 :   eada:   mov    $0x66,%edx
    0.00 :   eadf:   lea    0x59ad(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   eae6:   lea    0x59b4(%rip),%rdi        # 144a1 <typeinfo name for Minisat::BoolOption+0xb91>
    0.00 :   eaed:   call   23b0 <__assert_fail@plt>
    0.00 :   eaf2:   nopw   0x0(%rax,%rax,1)
         : 109  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   eaf8:   mov    0x200(%rbx),%esi
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 104  indices[n] = heap.size();
    0.04 :   eafe:   mov    %esi,(%rdx)
         : 106  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.04 :   eb00:   cmp    0x204(%rbx),%esi
    0.04 :   eb06:   je     ec88 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x2b8>
    0.00 :   eb0c:   movslq 0x200(%rbx),%rax
    0.00 :   eb13:   mov    0x1f8(%rbx),%rdi
    0.08 :   eb1a:   lea    0x1(%rax),%esi
    0.00 :   eb1d:   mov    %esi,0x200(%rbx)
    0.12 :   eb23:   mov    %r8d,(%rdi,%rax,4)
         : 82   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106  percolateUp(indices[n]);
    0.89 :   eb27:   movslq (%rdx),%r13
         : 108  Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.52 :   eb2a:   lea    -0x1(%r13),%edx
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.04 :   eb2e:   mov    (%rdi,%r13,4),%r9d
         : 48   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106  percolateUp(indices[n]);
    1.93 :   eb32:   mov    %r13,%rax
         : 108  Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   eb35:   sar    %edx
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   eb37:   test   %r13d,%r13d
    0.00 :   eb3a:   je     ecb8 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x2e8>
         : 52   Minisat::vec<double>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   eb40:   mov    0x1f0(%rbx),%rsi
    0.00 :   eb47:   movslq %r9d,%r10
    0.00 :   eb4a:   mov    (%rsi),%r8
         : 90   Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165  bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.00 :   eb4d:   movsd  (%r8,%r10,8),%xmm0
    1.77 :   eb53:   jmp    eb72 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1a2>
    0.00 :   eb55:   nopl   (%rax)
         : 169  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    1.85 :   eb58:   mov    %ecx,0x0(%r13)
         : 51   indices[heap[p]] = i;
    0.44 :   eb5c:   mov    %eax,(%r15,%rcx,4)
         : 53   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.16 :   eb60:   lea    -0x1(%rdx),%eax
    0.16 :   eb63:   sar    %eax
    0.08 :   eb65:   mov    %eax,%ecx
         : 45   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.08 :   eb67:   mov    %edx,%eax
    0.08 :   eb69:   test   %edx,%edx
    0.00 :   eb6b:   je     eb88 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1b8>
         : 53   p                = parent(p);
    0.00 :   eb6d:   mov    %ecx,%edx
    0.85 :   eb6f:   movslq %eax,%r13
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.36 :   eb72:   movslq %edx,%rcx
    0.20 :   eb75:   lea    (%rdi,%r13,4),%r13
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.12 :   eb79:   movslq (%rdi,%rcx,4),%rcx
    0.16 :   eb7d:   comisd (%r8,%rcx,8),%xmm0
    3.19 :   eb83:   ja     eb58 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x188>
         : 53   Minisat::vec<int>::operator[](int):
    0.00 :   eb85:   mov    %r13,%rdi
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 55   heap   [i] = x;
    1.73 :   eb88:   mov    %r9d,(%rdi)
         : 56   indices[x] = i;
    1.13 :   eb8b:   mov    %eax,(%r15,%r10,4)
         : 58   Minisat::Solver::insertVarOrder(int):
    0.16 :   eb8f:   jmp    ea3f <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x6f>
    0.00 :   eb94:   nopl   0x0(%rax)
         : 58   Minisat::Solver::cancelUntil(int):
         : 212  if (phase_saving > 1 || (phase_saving == 1) && c > trail_lim.last())
    0.00 :   eb98:   jne    ea93 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0xc3>
         : 214  Minisat::vec<int>::last():
         : 83   T&       last  (void)              { return data[sz-1]; }
    0.00 :   eb9e:   movslq 0x1b8(%rbx),%rsi
         : 85   Minisat::Solver::cancelUntil(int):
    0.00 :   eba5:   cmp    %ebp,-0x4(%rdx,%rsi,4)
    0.00 :   eba9:   jge    ea93 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0xc3>
    0.00 :   ebaf:   jmp    ea83 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0xb3>
    0.00 :   ebb4:   nopl   0x0(%rax)
         : 216  Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   ebb8:   mov    0xc(%rsp),%r14d
    1.21 :   ebbd:   mov    0x1a8(%rbx),%ecx
         : 66   Minisat::Solver::cancelUntil(int):
         : 216  insertVarOrder(x); }
         : 217  qhead = trail_lim[level];
         : 218  trail.shrink(trail.size() - trail_lim[level]);
    0.08 :   ebc3:   mov    %ecx,%edx
         : 215  qhead = trail_lim[level];
    0.00 :   ebc5:   mov    %eax,0x1d0(%rbx)
         : 216  trail.shrink(trail.size() - trail_lim[level]);
    0.00 :   ebcb:   sub    %eax,%edx
         : 218  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   ebcd:   cmp    %ecx,%edx
    0.12 :   ebcf:   jg     ecdf <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x30f>
    0.00 :   ebd5:   test   %edx,%edx
    0.00 :   ebd7:   jle    ebdf <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x20f>
    0.00 :   ebd9:   mov    %eax,0x1a8(%rbx)
         : 70   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.04 :   ebdf:   mov    0x1b8(%rbx),%edx
         : 65   Minisat::Solver::cancelUntil(int):
         : 217  trail_lim.shrink(trail_lim.size() - level);
    0.00 :   ebe5:   mov    %edx,%eax
    0.00 :   ebe7:   sub    %r14d,%eax
         : 220  Minisat::vec<int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   ebea:   cmp    %eax,%edx
    0.04 :   ebec:   jl     ecc0 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x2f0>
    0.00 :   ebf2:   test   %eax,%eax
    0.00 :   ebf4:   jle    ebfd <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x22d>
    0.00 :   ebf6:   mov    %r14d,0x1b8(%rbx)
         : 70   Minisat::Solver::cancelUntil(int):
         : 218  } }
    0.00 :   ebfd:   add    $0x28,%rsp
    0.00 :   ec01:   pop    %rbx
    0.12 :   ec02:   pop    %rbp
    0.00 :   ec03:   pop    %r12
    0.00 :   ec05:   pop    %r13
    0.00 :   ec07:   pop    %r14
    0.08 :   ec09:   pop    %r15
    0.00 :   ec0b:   ret
    0.00 :   ec0c:   nopl   0x0(%rax)
         : 228  Minisat::vec<int>::growTo(int, int const&):
         : 107  capacity(size);
    0.00 :   ec10:   mov    %r9d,%esi
         : 109  Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   ec13:   lea    0x208(%rbx),%rdi
    0.00 :   ec1a:   mov    %r8d,0x14(%rsp)
         : 104  Minisat::vec<int>::growTo(int, int const&):
    0.00 :   ec1f:   mov    %r9d,0x10(%rsp)
    0.00 :   ec24:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   ec29:   mov    0x10(%rsp),%r9d
    0.00 :   ec2e:   mov    0x14(%rsp),%r8d
    0.00 :   ec33:   movslq 0x210(%rbx),%rax
    0.00 :   ec3a:   cmp    %eax,%r9d
    0.00 :   ec3d:   jle    ecaf <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x2df>
    0.00 :   ec3f:   mov    %r8d,%edx
    0.00 :   ec42:   mov    $0xff,%esi
    0.00 :   ec47:   mov    %r9d,0x14(%rsp)
    0.00 :   ec4c:   mov    0x208(%rbx),%r15
    0.00 :   ec53:   sub    %eax,%edx
    0.00 :   ec55:   mov    %r8d,0x10(%rsp)
    0.00 :   ec5a:   lea    0x4(,%rdx,4),%rdx
    0.00 :   ec62:   lea    (%r15,%rax,4),%rdi
    0.00 :   ec66:   call   2370 <memset@plt>
    0.00 :   ec6b:   mov    0x10(%rsp),%r8d
    0.00 :   ec70:   mov    0x14(%rsp),%r9d
         : 109  sz = size; }
    0.00 :   ec75:   mov    %r9d,0x210(%rbx)
    0.00 :   ec7c:   mov    %r9d,%eax
    0.00 :   ec7f:   jmp    eac0 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0xf0>
    0.00 :   ec84:   nopl   0x0(%rax)
         : 114  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   ec88:   mov    0x18(%rsp),%rdi
    0.00 :   ec8d:   add    $0x1,%esi
    0.00 :   ec90:   mov    %r8d,0x10(%rsp)
    0.00 :   ec95:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 79   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   ec9a:   mov    0x208(%rbx),%r15
    0.00 :   eca1:   mov    0x10(%rsp),%r8d
    0.00 :   eca6:   lea    (%r15,%r13,1),%rdx
         : 91   Minisat::vec<int>::push(int const&):
    0.00 :   ecaa:   jmp    eb0c <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x13c>
         : 88   Minisat::vec<int>::growTo(int, int const&):
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   ecaf:   mov    0x208(%rbx),%r15
    0.00 :   ecb6:   jmp    ec75 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x2a5>
         : 111  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   ecb8:   movslq %r9d,%r10
    0.00 :   ecbb:   jmp    eb88 <Minisat::Solver::cancelUntil(int) [clone .part.0]+0x1b8>
         : 90   Minisat::vec<int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   ecc0:   lea    0x5f89(%rip),%rcx        # 14c50 <Minisat::lit_Undef+0x4f8>
    0.00 :   ecc7:   mov    $0x40,%edx
    0.00 :   eccc:   lea    0x57ff(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   ecd3:   lea    0x5a38(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   ecda:   call   23b0 <__assert_fail@plt>
         : 70   Minisat::vec<Minisat::Lit>::shrink(int):
    0.00 :   ecdf:   lea    0x5e02(%rip),%rcx        # 14ae8 <Minisat::lit_Undef+0x390>
    0.00 :   ece6:   mov    $0x40,%edx
    0.00 :   eceb:   lea    0x57e0(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   ecf2:   lea    0x5a19(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   ecf9:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (1743 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000124f0 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)>:
         : 6     void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 57    }
         : 58    template <class T> static inline void selectionSort(T* array, int size) {
         : 59    selectionSort(array, size, LessThan_default<T>()); }
         :
         : 61    template <class T, class LessThan>
         : 62    void sort(T* array, int size, LessThan lt)
    0.06 :   124f0:  endbr64
    0.00 :   124f4:  push   %r15
    0.00 :   124f6:  mov    %rdx,%r15
    0.00 :   124f9:  push   %r14
    0.11 :   124fb:  push   %r13
    0.06 :   124fd:  mov    %rdi,%r13
    0.00 :   12500:  push   %r12
    0.06 :   12502:  mov    %esi,%r12d
    0.00 :   12505:  push   %rbp
    0.00 :   12506:  push   %rbx
         : 59    {
         : 60    if (size <= 15)
    0.06 :   12507:  mov    %rdi,%rbx
         : 57    void sort(T* array, int size, LessThan lt)
    0.00 :   1250a:  sub    $0x28,%rsp
    0.00 :   1250e:  mov    %esi,0x18(%rsp)
         : 59    if (size <= 15)
    0.00 :   12512:  cmp    $0xf,%esi
    0.00 :   12515:  jle    126b6 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x1c6>
    0.00 :   1251b:  mov    %rdx,0x8(%rsp)
    0.23 :   12520:  mov    %esi,%eax
         : 63    selectionSort(array, size, lt);
         :
         : 65    else{
         : 66    T           pivot = array[size / 2];
    0.00 :   12522:  sar    %eax
         : 69    T           tmp;
         : 70    int         i = -1;
         : 71    int         j = size;
         :
         : 73    for(;;){
         : 74    do i++; while(lt(array[i], pivot));
    0.00 :   12524:  mov    0x0(%r13),%r11d
         : 63    T           pivot = array[size / 2];
    0.06 :   12528:  cltq
    0.06 :   1252a:  mov    0x0(%r13,%rax,4),%r15d
         : 66    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64    Ref      alloc     (int size);
         : 65    void     free      (int size)    { wasted_ += size; }
         :
         : 67    // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   1252f:  mov    0x8(%rsp),%rax
    0.06 :   12534:  mov    0x8(%rax),%r8d
    0.00 :   12538:  cmp    %r11d,%r8d
    0.00 :   1253b:  jbe    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
    0.00 :   12541:  mov    (%rax),%r14
    0.00 :   12544:  mov    %r15d,%eax
    0.00 :   12547:  mov    0x18(%rsp),%esi
    0.00 :   1254b:  mov    %r13,%rbx
         : 77    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 69    do i++; while(lt(array[i], pivot));
    0.00 :   1254e:  xor    %r12d,%r12d
         : 71    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   12551:  lea    (%r14,%rax,4),%rbp
    0.00 :   12555:  jmp    12604 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x114>
    0.00 :   1255a:  nopw   0x0(%rax,%rax,1)
         : 66    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 70    do j--; while(lt(pivot, array[j]));
    0.00 :   12560:  sub    $0x1,%esi
    0.00 :   12563:  movslq %esi,%rax
    0.00 :   12566:  lea    0x0(%r13,%rax,4),%r10
    0.00 :   1256b:  mov    (%r10),%ecx
         : 75    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   1256e:  cmp    %r8d,%r15d
    0.00 :   12571:  jae    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
         : 65    Minisat::Clause::size() const:
         : 162   for (int i = 0; i < size(); i++)
         : 163   abstraction |= 1 << (var(data[i].lit) & 31);
         : 164   data[header.size].abs = abstraction;  }
         :
         :
         : 167   int          size        ()      const   { return header.size; }
    0.00 :   12577:  mov    0x0(%rbp),%edi
    0.00 :   1257a:  shr    $0x5,%edi
    0.00 :   1257d:  cmp    $0x2,%edi
    0.00 :   12580:  jle    125d8 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0xe8>
    0.00 :   12582:  lea    -0x4(%r13,%rax,4),%rax
    0.00 :   12587:  nopw   0x0(%rax,%rax,1)
         : 174   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.46 :   12590:  cmp    %r8d,%ecx
    0.06 :   12593:  jae    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
    0.00 :   12599:  mov    %ecx,%edx
    0.06 :   1259b:  lea    (%r14,%rdx,4),%r9
         : 67    Minisat::Clause::size() const:
    1.04 :   1259f:  mov    (%r9),%edx
    2.59 :   125a2:  shr    $0x5,%edx
         : 164   reduceDB_lt::operator()(unsigned int, unsigned int):
         : 523   |________________________________________________________________________________________________@*/
         : 524   struct reduceDB_lt {
         : 525   ClauseAllocator& ca;
         : 526   reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
         : 527   bool operator () (CRef x, CRef y) {
         : 528   return ca[x].size() > 2 && (ca[y].size() == 2 || ca[x].activity() < ca[y].activity()); }
    0.00 :   125a5:  cmp    $0x2,%edx
    0.58 :   125a8:  je     12670 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x180>
         : 531   Minisat::Clause::activity():
         : 181   //       subsumption operations to behave correctly.
         : 182   Lit&         operator [] (int i)         { return data[i].lit; }
         : 183   Lit          operator [] (int i) const   { return data[i].lit; }
         : 184   operator const Lit* (void) const         { return (Lit*)data; }
         :
         : 186   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   125ae:  testb  $0x8,0x0(%rbp)
    0.06 :   125b2:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 189   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.46 :   125b8:  movss  0x4(%rbp,%rdi,4),%xmm0
         : 524   Minisat::Clause::activity():
    0.80 :   125be:  testb  $0x8,(%r9)
    0.06 :   125c2:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 183   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   125c8:  movss  0x4(%r9,%rdx,4),%xmm1
    4.13 :   125cf:  comiss %xmm0,%xmm1
    6.41 :   125d2:  ja     12670 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x180>
         : 526   void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         :
         : 73    if (i >= j) break;
    0.69 :   125d8:  cmp    %esi,%r12d
    2.24 :   125db:  jge    12688 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x198>
         : 76    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.34 :   125e1:  mov    0x8(%rsp),%rax
         : 64    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         :
         : 75    tmp = array[i]; array[i] = array[j]; array[j] = tmp;
    0.46 :   125e6:  mov    %ecx,(%rbx)
    0.00 :   125e8:  mov    %r11d,(%r10)
         : 78    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.23 :   125eb:  mov    0x8(%rax),%r8d
         : 64    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 69    do i++; while(lt(array[i], pivot));
    3.78 :   125ef:  mov    0x4(%rbx),%r11d
    3.28 :   125f3:  add    $0x4,%rbx
    0.12 :   125f7:  add    $0x1,%r12d
         : 73    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.29 :   125fb:  cmp    %r8d,%r11d
    0.00 :   125fe:  jae    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
    0.00 :   12604:  mov    %r11d,%eax
    0.11 :   12607:  lea    (%r14,%rax,4),%rdx
         : 65    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.12 :   1260b:  mov    (%rdx),%eax
    2.01 :   1260d:  mov    %eax,%ecx
    1.67 :   1260f:  shr    $0x5,%ecx
         : 166   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.46 :   12612:  cmp    $0x5f,%eax
    0.17 :   12615:  jbe    12560 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x70>
         : 525   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   1261b:  cmp    %r8d,%r15d
    0.29 :   1261e:  jae    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
         : 65    Minisat::Clause::size() const:
    0.00 :   12624:  mov    0x0(%rbp),%edi
    0.06 :   12627:  shr    $0x5,%edi
         : 164   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.06 :   1262a:  cmp    $0x2,%edi
    0.17 :   1262d:  je     125ef <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0xff>
         : 525   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   1262f:  testb  $0x8,(%rdx)
    0.23 :   12632:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 184   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   12638:  movss  0x4(%rdx,%rcx,4),%xmm0
         : 524   Minisat::Clause::activity():
    5.10 :   1263e:  testb  $0x8,0x0(%rbp)
    0.29 :   12642:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 183   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.23 :   12648:  movslq %edi,%rax
    0.34 :   1264b:  movss  0x4(%rbp,%rax,4),%xmm1
    0.23 :   12651:  comiss %xmm0,%xmm1
    6.54 :   12654:  ja     125ef <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0xff>
         : 527   void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 70    do j--; while(lt(pivot, array[j]));
    0.57 :   12656:  sub    $0x1,%esi
    2.87 :   12659:  movslq %esi,%rax
    0.17 :   1265c:  lea    0x0(%r13,%rax,4),%r10
    0.98 :   12661:  mov    (%r10),%ecx
         : 75    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    1.61 :   12664:  jmp    1257d <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x8d>
    0.00 :   12669:  nopl   0x0(%rax)
         : 65    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
    1.49 :   12670:  mov    (%rax),%ecx
    2.41 :   12672:  mov    %rax,%r10
    0.06 :   12675:  sub    $0x1,%esi
         : 73    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   12678:  sub    $0x4,%rax
    0.00 :   1267c:  jmp    12590 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0xa0>
    0.00 :   12681:  nopl   0x0(%rax)
         : 66    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 77    }
         :
         : 79    sort(array    , i     , lt);
    0.00 :   12688:  mov    0x8(%rsp),%rdx
    1.03 :   1268d:  mov    %r12d,%esi
    0.00 :   12690:  mov    %r13,%rdi
    0.00 :   12693:  call   124f0 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)>
         : 78    sort(&array[i], size-i, lt);
    0.00 :   12698:  sub    %r12d,0x18(%rsp)
    0.00 :   1269d:  mov    0x18(%rsp),%eax
         : 59    if (size <= 15)
    0.06 :   126a1:  cmp    $0xf,%eax
    0.00 :   126a4:  jle    126ae <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x1be>
    0.00 :   126a6:  mov    %rbx,%r13
    0.00 :   126a9:  jmp    12522 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x32>
    0.00 :   126ae:  mov    0x8(%rsp),%r15
    0.00 :   126b3:  mov    %eax,%r12d
         : 66    void Minisat::selectionSort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 44    for (i = 0; i < size-1; i++){
    0.00 :   126b6:  lea    -0x1(%r12),%eax
    0.12 :   126bb:  xor    %edi,%edi
    0.00 :   126bd:  mov    %eax,0x1c(%rsp)
    0.11 :   126c1:  test   %eax,%eax
    0.00 :   126c3:  jle    127c4 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2d4>
    0.00 :   126c9:  mov    %rbx,0x8(%rsp)
    0.00 :   126ce:  mov    %edi,%r13d
    0.00 :   126d1:  nopl   0x0(%rax)
         : 50    tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   126d8:  mov    0x8(%rsp),%rax
    0.29 :   126dd:  mov    %r13d,%r11d
         : 46    for (j = i+1; j < size; j++){
    0.00 :   126e0:  add    $0x1,%r13d
         : 50    tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   126e4:  mov    (%rax),%r8d
    1.15 :   126e7:  mov    %r8d,0x18(%rsp)
         : 46    for (j = i+1; j < size; j++){
    0.00 :   126ec:  cmp    %r12d,%r13d
    0.00 :   126ef:  jge    127d3 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2e3>
    0.00 :   126f5:  add    $0x4,%rax
         : 50    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   126f9:  mov    0x8(%r15),%ebp
    0.00 :   126fd:  mov    %rax,0x10(%rsp)
    0.00 :   12702:  mov    %rax,%rdx
    0.00 :   12705:  mov    %r13d,%eax
    0.00 :   12708:  jmp    1274c <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x25c>
    0.00 :   1270a:  nopw   0x0(%rax,%rax,1)
         : 69    Minisat::Clause::activity():
    0.00 :   12710:  testb  $0x8,(%rdi)
    0.23 :   12713:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 183   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   12719:  movss  0x4(%rdi,%r9,4),%xmm0
         : 524   Minisat::Clause::activity():
    1.03 :   12720:  testb  $0x8,(%r14)
    0.00 :   12724:  je     12800 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x310>
         : 183   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   1272a:  movss  0x4(%r14,%rsi,4),%xmm1
    8.04 :   12731:  ucomiss %xmm0,%xmm1
    7.69 :   12734:  cmova  %ecx,%r8d
    3.10 :   12738:  cmova  %rdx,%r10
    3.27 :   1273c:  cmova  %eax,%r11d
         : 528   void Minisat::selectionSort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
    1.49 :   12740:  add    $0x1,%eax
    0.00 :   12743:  add    $0x4,%rdx
    0.00 :   12747:  cmp    %r12d,%eax
    0.00 :   1274a:  je     127a0 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2b0>
         : 47    if (lt(array[j], array[best_i]))
    0.29 :   1274c:  movslq %r11d,%rcx
    1.55 :   1274f:  lea    (%rbx,%rcx,4),%r10
    3.84 :   12753:  mov    (%rdx),%ecx
         : 51    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.46 :   12755:  cmp    %ebp,%ecx
    0.29 :   12757:  jae    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
    0.00 :   1275d:  mov    (%r15),%r14
    0.00 :   12760:  mov    %ecx,%esi
    0.00 :   12762:  lea    (%r14,%rsi,4),%rdi
         : 68    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.11 :   12766:  mov    (%rdi),%esi
    1.49 :   12768:  mov    %esi,%r9d
    0.00 :   1276b:  shr    $0x5,%r9d
         : 166   reduceDB_lt::operator()(unsigned int, unsigned int):
    2.12 :   1276f:  cmp    $0x5f,%esi
    0.06 :   12772:  jbe    12740 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x250>
         : 525   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   12774:  cmp    %r8d,%ebp
    0.00 :   12777:  jbe    127e1 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2f1>
    0.00 :   12779:  mov    %r8d,%esi
    0.00 :   1277c:  lea    (%r14,%rsi,4),%r14
         : 67    Minisat::Clause::size() const:
    0.00 :   12780:  mov    (%r14),%esi
    1.49 :   12783:  shr    $0x5,%esi
         : 164   reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   12786:  cmp    $0x2,%esi
    1.84 :   12789:  jne    12710 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x220>
    0.00 :   1278b:  mov    %eax,%r11d
         : 526   void Minisat::selectionSort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 46    for (j = i+1; j < size; j++){
    0.00 :   1278e:  add    $0x1,%eax
         : 48    reduceDB_lt::operator()(unsigned int, unsigned int):
    0.00 :   12791:  mov    %rdx,%r10
    0.00 :   12794:  mov    %ecx,%r8d
         : 48    void Minisat::selectionSort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
    0.00 :   12797:  add    $0x4,%rdx
    0.00 :   1279b:  cmp    %r12d,%eax
    0.00 :   1279e:  jne    1274c <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x25c>
         : 50    tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   127a0:  mov    0x8(%rsp),%rax
    0.06 :   127a5:  mov    %r8d,(%rax)
    0.17 :   127a8:  mov    0x18(%rsp),%eax
    0.00 :   127ac:  mov    %eax,(%r10)
         : 44    for (i = 0; i < size-1; i++){
    1.21 :   127af:  mov    0x10(%rsp),%rax
    0.29 :   127b4:  mov    %rax,0x8(%rsp)
    0.00 :   127b9:  cmp    0x1c(%rsp),%r13d
    0.00 :   127be:  jne    126d8 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x1e8>
         : 49    void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 80    }
         : 81    }
    0.00 :   127c4:  add    $0x28,%rsp
    0.06 :   127c8:  pop    %rbx
    0.00 :   127c9:  pop    %rbp
    0.00 :   127ca:  pop    %r12
    0.00 :   127cc:  pop    %r13
    0.00 :   127ce:  pop    %r14
    0.00 :   127d0:  pop    %r15
    0.00 :   127d2:  ret
         : 90    void Minisat::selectionSort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt):
         : 46    for (j = i+1; j < size; j++){
    0.00 :   127d3:  mov    %rax,%r10
    0.00 :   127d6:  add    $0x4,%rax
    0.00 :   127da:  mov    %rax,0x10(%rsp)
    0.00 :   127df:  jmp    127a0 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)+0x2b0>
         : 51    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   127e1:  lea    0x1250(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   127e8:  mov    $0x3f,%edx
    0.00 :   127ed:  lea    0x1226(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   127f4:  lea    0x1c1d(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   127fb:  call   23b0 <__assert_fail@plt>
         : 68    Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   12800:  lea    0x1359(%rip),%rcx        # 13b60 <typeinfo name for Minisat::BoolOption+0x250>
    0.00 :   12807:  mov    $0xb5,%edx
    0.00 :   1280c:  lea    0x1c16(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   12813:  lea    0x1d2d(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   1281a:  call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (1270 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000c990 <Minisat::Solver::pickBranchLit()>:
         : 6    Minisat::Solver::pickBranchLit():
         : 226  //=================================================================================================
         : 227  // Major methods:
         :
         :
         : 230  Lit Solver::pickBranchLit()
         : 231  {
    0.00 :   c990:   endbr64
    0.08 :   c994:   push   %r15
    0.07 :   c996:   mov    %rdi,%r9
    0.00 :   c999:   push   %r14
    0.00 :   c99b:   push   %r13
    0.08 :   c99d:   push   %r12
    0.32 :   c99f:   push   %rbp
    0.00 :   c9a0:   push   %rbx
    0.00 :   c9a1:   sub    $0x18,%rsp
         : 241  Minisat::Solver::drand(double&):
         : 263  // Static helpers:
         : 264  //
         :
         : 266  // Returns a random float 0 <= x < 1. Seed must never be 0.
         : 267  static inline double drand(double& seed) {
         : 268  seed *= 1389796;
    0.00 :   c9a5:   movsd  0x48(%rdi),%xmm0
         : 270  Minisat::Solver::pickBranchLit():
         : 230  Var next = var_Undef;
         :
         : 232  // Random decision:
         : 233  if (drand(random_seed) < random_var_freq && !order_heap.empty()){
    0.00 :   c9aa:   movsd  0x40(%rdi),%xmm2
         : 235  Minisat::Solver::drand(double&):
    0.00 :   c9af:   movsd  0x8941(%rip),%xmm4        # 152f8 <typeinfo name for Minisat::Solver+0x18>
         : 264  int q = (int)(seed / 2147483647);
    0.40 :   c9b7:   movsd  0x8941(%rip),%xmm3        # 15300 <typeinfo name for Minisat::Solver+0x20>
         : 263  seed *= 1389796;
    0.24 :   c9bf:   mulsd  %xmm4,%xmm0
         : 264  int q = (int)(seed / 2147483647);
    0.24 :   c9c3:   movapd %xmm0,%xmm1
    0.39 :   c9c7:   divsd  %xmm3,%xmm1
    2.84 :   c9cb:   cvttsd2si %xmm1,%eax
         : 265  seed -= (double)q * 2147483647;
    1.33 :   c9cf:   pxor   %xmm1,%xmm1
    0.00 :   c9d3:   cvtsi2sd %eax,%xmm1
    1.90 :   c9d7:   mulsd  %xmm3,%xmm1
    1.10 :   c9db:   subsd  %xmm1,%xmm0
         : 266  return seed / 2147483647; }
    0.00 :   c9df:   movapd %xmm0,%xmm1
         : 265  seed -= (double)q * 2147483647;
    1.49 :   c9e3:   movsd  %xmm0,0x48(%rdi)
         : 266  return seed / 2147483647; }
    0.00 :   c9e8:   divsd  %xmm3,%xmm1
         : 268  Minisat::Solver::pickBranchLit():
    5.13 :   c9ec:   comisd %xmm1,%xmm2
    0.08 :   c9f0:   jbe    ca00 <Minisat::Solver::pickBranchLit()+0x70>
         : 232  Minisat::vec<int>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   c9f2:   mov    0x200(%rdi),%eax
         : 70   Minisat::Solver::pickBranchLit():
    0.00 :   c9f8:   test   %eax,%eax
    0.00 :   c9fa:   jne    cbce <Minisat::Solver::pickBranchLit()+0x23e>
         : 227  Var next = var_Undef;
    1.66 :   ca00:   mov    $0xffffffff,%r15d
    0.00 :   ca06:   cs nopw 0x0(%rax,%rax,1)
         : 236  next = order_heap[irand(random_seed,order_heap.size())];
         : 237  if (value(next) == l_Undef && decision[next])
         : 238  rnd_decisions++; }
         :
         : 240  // Activity based decision:
         : 241  while (next == var_Undef || value(next) != l_Undef || !decision[next])
    0.00 :   ca10:   cmp    $0xffffffff,%r15d
    0.32 :   ca14:   je     ca37 <Minisat::Solver::pickBranchLit()+0xa7>
         : 244  Minisat::Solver::value(int) const:
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
         : 326  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   ca16:   mov    0x170(%r9),%rdx
         : 328  Minisat::vec<Minisat::lbool>::operator[](int) const:
         :
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
    0.39 :   ca1d:   movslq %r15d,%rax
         : 93   Minisat::Solver::pickBranchLit():
    0.00 :   ca20:   testb  $0x2,(%rdx,%rax,1)
    1.65 :   ca24:   je     ca37 <Minisat::Solver::pickBranchLit()+0xa7>
    0.00 :   ca26:   mov    0x190(%r9),%rdx
    2.29 :   ca2d:   cmpb   $0x0,(%rdx,%rax,1)
    0.86 :   ca31:   jne    cb64 <Minisat::Solver::pickBranchLit()+0x1d4>
         : 239  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   ca37:   movslq 0x200(%r9),%rax
         : 65   Minisat::Solver::pickBranchLit():
         : 237  if (order_heap.empty()){
    3.22 :   ca3e:   test   %eax,%eax
    0.16 :   ca40:   je     cb50 <Minisat::Solver::pickBranchLit()+0x1c0>
         : 240  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.16 :   ca46:   mov    0x1f8(%r9),%rsi
    0.08 :   ca4d:   mov    0x208(%r9),%r11
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::removeMin():
         : 112  }
         :
         :
         : 115  int  removeMin()
         : 116  {
         : 117  int x            = heap[0];
    0.16 :   ca54:   mov    (%rsi),%r15d
         : 113  heap[0]          = heap.last();
    1.10 :   ca57:   movslq -0x4(%rsi,%rax,4),%rax
    0.16 :   ca5c:   mov    %eax,(%rsi)
         : 114  indices[heap[0]] = 0;
    0.31 :   ca5e:   movl   $0x0,(%r11,%rax,4)
         : 116  Minisat::vec<int>::operator[](int):
    0.63 :   ca66:   movslq %r15d,%rax
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::removeMin():
         : 115  indices[x]       = -1;
    0.00 :   ca69:   movl   $0xffffffff,(%r11,%rax,4)
         : 117  Minisat::vec<int>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.08 :   ca71:   mov    0x200(%r9),%ebp
    0.00 :   ca78:   test   %ebp,%ebp
    0.16 :   ca7a:   jle    cc4b <Minisat::Solver::pickBranchLit()+0x2bb>
    0.00 :   ca80:   sub    $0x1,%ebp
    0.16 :   ca83:   mov    %ebp,0x200(%r9)
         : 82   Minisat::Heap<Minisat::Solver::VarOrderLt>::removeMin():
         : 117  heap.pop();
         : 118  if (heap.size() > 1) percolateDown(0);
    0.00 :   ca8a:   cmp    $0x1,%ebp
    0.00 :   ca8d:   jle    ca10 <Minisat::Solver::pickBranchLit()+0x80>
         : 121  Minisat::vec<double>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   ca8f:   mov    0x1f0(%r9),%rax
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.16 :   ca96:   movslq (%rsi),%r14
         : 64   Minisat::Heap<Minisat::Solver::VarOrderLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.55 :   ca99:   mov    $0x1,%ecx
         : 41   Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165  bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.00 :   ca9e:   xor    %edx,%edx
         : 167  Minisat::vec<double>::operator[](int) const:
    0.00 :   caa0:   mov    (%rax),%rbx
         : 87   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.16 :   caa3:   mov    %r14d,0xc(%rsp)
         : 64   Minisat::Solver::VarOrderLt::operator()(int, int) const:
    0.22 :   caa8:   movsd  (%rbx,%r14,8),%xmm2
    2.05 :   caae:   jmp    caf9 <Minisat::Solver::pickBranchLit()+0x169>
         : 167  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   cab0:   movslq %eax,%rbp
    0.00 :   cab3:   lea    (%rsi,%rbp,4),%rbp
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.63 :   cab7:   movslq 0x0(%rbp),%r13
         : 66   Minisat::Solver::VarOrderLt::operator()(int, int) const:
    0.79 :   cabb:   movsd  (%rbx,%r13,8),%xmm1
         : 166  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    3.05 :   cac1:   comisd %xmm0,%xmm1
    7.89 :   cac5:   jbe    cb13 <Minisat::Solver::pickBranchLit()+0x183>
    2.45 :   cac7:   movapd %xmm1,%xmm0
         : 67   Minisat::vec<int>::operator[](int):
    8.51 :   cacb:   movslq %edx,%rcx
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   cace:   mov    %r13,%rdi
    0.00 :   cad1:   mov    %r13d,%r8d
         : 65   if (!lt(heap[child], x)) break;
    0.24 :   cad4:   comisd %xmm2,%xmm0
    1.64 :   cad8:   mov    %rbp,%r10
         : 68   Minisat::vec<int>::operator[](int):
    0.00 :   cadb:   lea    (%rsi,%rcx,4),%rcx
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    1.34 :   cadf:   jbe    cb22 <Minisat::Solver::pickBranchLit()+0x192>
         : 66   heap[i]          = heap[child];
    4.64 :   cae1:   mov    %r8d,(%rcx)
         : 68   Minisat::Heap<Minisat::Solver::VarOrderLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.39 :   cae4:   lea    0x1(%rax,%rax,1),%ecx
         : 41   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 67   indices[heap[i]] = i;
    0.63 :   cae8:   mov    %edx,(%r11,%rdi,4)
         : 69   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.63 :   caec:   mov    0x200(%r9),%ebp
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 63   while (left(i) < heap.size()){
    0.32 :   caf3:   cmp    %ecx,%ebp
    0.55 :   caf5:   jle    cb38 <Minisat::Solver::pickBranchLit()+0x1a8>
         : 68   i                = child;
    0.00 :   caf7:   mov    %eax,%edx
         : 70   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.62 :   caf9:   movslq %ecx,%rdi
         : 89   Minisat::Heap<Minisat::Solver::VarOrderLt>::right(int):
         : 40   static inline int right (int i) { return (i+1)*2; }
    0.40 :   cafc:   lea    0x2(%rdx,%rdx,1),%eax
         : 42   Minisat::vec<int>::operator[](int):
    1.50 :   cb00:   lea    (%rsi,%rdi,4),%r10
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.32 :   cb04:   movslq (%r10),%rdi
         : 66   Minisat::Solver::VarOrderLt::operator()(int, int) const:
    2.60 :   cb07:   movsd  (%rbx,%rdi,8),%xmm0
         : 166  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    5.32 :   cb0c:   mov    %rdi,%r8
    0.47 :   cb0f:   cmp    %ebp,%eax
    0.31 :   cb11:   jl     cab0 <Minisat::Solver::pickBranchLit()+0x120>
         : 65   if (!lt(heap[child], x)) break;
    1.18 :   cb13:   comisd %xmm2,%xmm0
   12.14 :   cb17:   mov    %ecx,%eax
         : 68   Minisat::vec<int>::operator[](int):
    0.16 :   cb19:   movslq %edx,%rcx
    0.08 :   cb1c:   lea    (%rsi,%rcx,4),%rcx
         : 89   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   cb20:   ja     cae1 <Minisat::Solver::pickBranchLit()+0x151>
         : 70   heap   [i] = x;
    0.71 :   cb22:   mov    0xc(%rsp),%eax
    1.66 :   cb26:   mov    %eax,(%rcx)
         : 71   indices[x] = i;
    0.08 :   cb28:   mov    %edx,(%r11,%r14,4)
         : 72   }
    0.40 :   cb2c:   jmp    ca10 <Minisat::Solver::pickBranchLit()+0x80>
    0.00 :   cb31:   nopl   0x0(%rax)
         : 68   i                = child;
    0.00 :   cb38:   mov    %eax,%edx
         : 70   heap   [i] = x;
    1.82 :   cb3a:   mov    0xc(%rsp),%eax
    1.89 :   cb3e:   mov    %r10,%rcx
    0.16 :   cb41:   mov    %eax,(%rcx)
         : 71   indices[x] = i;
    0.08 :   cb43:   mov    %edx,(%r11,%r14,4)
    0.32 :   cb47:   jmp    ca10 <Minisat::Solver::pickBranchLit()+0x80>
    0.00 :   cb4c:   nopl   0x0(%rax)
         : 75   Minisat::Solver::pickBranchLit():
         : 244  break;
         : 245  }else
         : 246  next = order_heap.removeMin();
         :
         : 248  return next == var_Undef ? lit_Undef : mkLit(next, rnd_pol ? drand(random_seed) < 0.5 : polarity[next]);
         : 249  }
    0.00 :   cb50:   add    $0x18,%rsp
    0.00 :   cb54:   mov    $0xfffffffe,%eax
    0.00 :   cb59:   pop    %rbx
    0.00 :   cb5a:   pop    %rbp
    0.00 :   cb5b:   pop    %r12
    0.00 :   cb5d:   pop    %r13
    0.00 :   cb5f:   pop    %r14
    0.00 :   cb61:   pop    %r15
    0.00 :   cb63:   ret
         : 243  return next == var_Undef ? lit_Undef : mkLit(next, rnd_pol ? drand(random_seed) < 0.5 : polarity[next]);
    0.00 :   cb64:   cmpb   $0x0,0x5c(%r9)
    0.00 :   cb69:   jne    cb8f <Minisat::Solver::pickBranchLit()+0x1ff>
    0.00 :   cb6b:   mov    0x180(%r9),%rdx
    0.00 :   cb72:   cmpb   $0x0,(%rdx,%rax,1)
    0.47 :   cb76:   setne  %al
    0.32 :   cb79:   movzbl %al,%eax
         : 244  }
    0.16 :   cb7c:   add    $0x18,%rsp
         : 246  Minisat::mkLit(int, bool):
         : 58   bool operator != (Lit p) const { return x != p.x; }
         : 59   bool operator <  (Lit p) const { return x < p.x;  } // '<' makes p, ~p adjacent in the ordering.
         : 60   };
         :
         :
         : 63   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.15 :   cb80:   lea    (%rax,%r15,2),%eax
         : 65   Minisat::Solver::pickBranchLit():
    0.63 :   cb84:   pop    %rbx
    0.00 :   cb85:   pop    %rbp
    0.00 :   cb86:   pop    %r12
    0.00 :   cb88:   pop    %r13
    0.00 :   cb8a:   pop    %r14
    0.00 :   cb8c:   pop    %r15
    0.00 :   cb8e:   ret
         : 251  Minisat::Solver::drand(double&):
         : 263  seed *= 1389796;
    0.00 :   cb8f:   mulsd  0x48(%r9),%xmm4
         : 264  int q = (int)(seed / 2147483647);
    0.00 :   cb95:   movapd %xmm4,%xmm0
    0.00 :   cb99:   divsd  %xmm3,%xmm0
    0.00 :   cb9d:   cvttsd2si %xmm0,%eax
         : 265  seed -= (double)q * 2147483647;
    0.00 :   cba1:   pxor   %xmm0,%xmm0
    0.00 :   cba5:   cvtsi2sd %eax,%xmm0
         : 268  Minisat::Solver::pickBranchLit():
         : 243  return next == var_Undef ? lit_Undef : mkLit(next, rnd_pol ? drand(random_seed) < 0.5 : polarity[next]);
    0.00 :   cba9:   xor    %eax,%eax
         : 245  Minisat::Solver::drand(double&):
    0.00 :   cbab:   mulsd  %xmm3,%xmm0
    0.00 :   cbaf:   subsd  %xmm0,%xmm4
         : 267  Minisat::Solver::pickBranchLit():
    0.00 :   cbb3:   movsd  0x7bdd(%rip),%xmm0        # 14798 <Minisat::lit_Undef+0x40>
         : 244  Minisat::Solver::drand(double&):
    0.00 :   cbbb:   movsd  %xmm4,0x48(%r9)
         : 266  return seed / 2147483647; }
    0.00 :   cbc1:   divsd  %xmm3,%xmm4
         : 268  Minisat::Solver::pickBranchLit():
    0.00 :   cbc5:   comisd %xmm4,%xmm0
    0.00 :   cbc9:   seta   %al
    0.00 :   cbcc:   jmp    cb7c <Minisat::Solver::pickBranchLit()+0x1ec>
         : 246  Minisat::Solver::drand(double&):
         : 263  seed *= 1389796;
    0.00 :   cbce:   mulsd  %xmm4,%xmm0
         : 264  int q = (int)(seed / 2147483647);
    0.00 :   cbd2:   movapd %xmm0,%xmm1
    0.00 :   cbd6:   divsd  %xmm3,%xmm1
    0.00 :   cbda:   cvttsd2si %xmm1,%edx
         : 265  seed -= (double)q * 2147483647;
    0.00 :   cbde:   pxor   %xmm1,%xmm1
    0.00 :   cbe2:   cvtsi2sd %edx,%xmm1
    0.00 :   cbe6:   mulsd  %xmm3,%xmm1
    0.00 :   cbea:   subsd  %xmm1,%xmm0
         : 270  Minisat::Solver::irand(double&, int):
         : 270  return (int)(drand(seed) * size); }
    0.00 :   cbee:   pxor   %xmm1,%xmm1
    0.00 :   cbf2:   cvtsi2sd %eax,%xmm1
         : 273  Minisat::Solver::drand(double&):
         : 265  seed -= (double)q * 2147483647;
    0.00 :   cbf6:   movsd  %xmm0,0x48(%rdi)
         : 266  return seed / 2147483647; }
    0.00 :   cbfb:   divsd  %xmm3,%xmm0
         : 268  Minisat::Solver::irand(double&, int):
         : 270  return (int)(drand(seed) * size); }
    0.00 :   cbff:   mulsd  %xmm1,%xmm0
    0.00 :   cc03:   cvttsd2si %xmm0,%edx
         : 273  Minisat::Heap<Minisat::Solver::VarOrderLt>::operator[](int) const:
         : 81   int  operator[](int index) const { assert(index < heap.size()); return heap[index]; }
    0.00 :   cc07:   cmp    %edx,%eax
    0.00 :   cc09:   jle    cc6a <Minisat::Solver::pickBranchLit()+0x2da>
    0.00 :   cc0b:   mov    0x1f8(%rdi),%rax
         : 85   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   cc12:   movslq %edx,%rdx
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::operator[](int) const:
    0.00 :   cc15:   movslq (%rax,%rdx,4),%rax
         : 82   Minisat::Solver::value(int) const:
         : 321  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   cc19:   mov    0x170(%rdi),%rdx
         : 323  Minisat::Heap<Minisat::Solver::VarOrderLt>::operator[](int) const:
    0.00 :   cc20:   mov    %rax,%r15
         : 82   Minisat::Solver::pickBranchLit():
         : 232  if (value(next) == l_Undef && decision[next])
    0.00 :   cc23:   testb  $0x2,(%rdx,%rax,1)
    0.00 :   cc27:   je     ca10 <Minisat::Solver::pickBranchLit()+0x80>
    0.00 :   cc2d:   mov    0x190(%rdi),%rdx
    0.00 :   cc34:   cmpb   $0x0,(%rdx,%rax,1)
    0.00 :   cc38:   je     ca10 <Minisat::Solver::pickBranchLit()+0x80>
         : 233  rnd_decisions++; }
    0.00 :   cc3e:   addq   $0x1,0xb0(%rdi)
    0.00 :   cc46:   jmp    ca10 <Minisat::Solver::pickBranchLit()+0x80>
         : 236  Minisat::vec<int>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.00 :   cc4b:   lea    0x753e(%rip),%rcx        # 14190 <typeinfo name for Minisat::BoolOption+0x880>
    0.00 :   cc52:   mov    $0x4c,%edx
    0.00 :   cc57:   lea    0x7874(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   cc5e:   lea    0x787a(%rip),%rdi        # 144df <typeinfo name for Minisat::BoolOption+0xbcf>
    0.00 :   cc65:   call   23b0 <__assert_fail@plt>
         : 82   Minisat::Heap<Minisat::Solver::VarOrderLt>::operator[](int) const:
    0.00 :   cc6a:   lea    0x7ccf(%rip),%rcx        # 14940 <Minisat::lit_Undef+0x1e8>
    0.00 :   cc71:   mov    $0x51,%edx
    0.00 :   cc76:   lea    0x7816(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   cc7d:   lea    0x84af(%rip),%rdi        # 15133 <Minisat::lit_Undef+0x9db>
    0.00 :   cc84:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (661 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000000fd70 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)>:
         : 6     Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         :
         : 878   //=================================================================================================
         : 879   // Garbage Collection methods:
         :
         : 881   void Solver::relocAll(ClauseAllocator& to)
         : 882   {
    0.00 :    fd70:   endbr64
    0.00 :    fd74:   push   %r15
    0.00 :    fd76:   mov    %rsi,%r11
    0.00 :    fd79:   mov    %rdi,%r15
    0.00 :    fd7c:   push   %r14
    0.00 :    fd7e:   push   %r13
    0.00 :    fd80:   push   %r12
    0.00 :    fd82:   push   %rbp
    0.00 :    fd83:   push   %rbx
    0.00 :    fd84:   sub    $0x48,%rsp
         : 893   Minisat::vec<Minisat::Lit>::size() const:
         :
         : 64    // Pointer to first element:
         : 65    operator T*       (void)           { return data; }
         :
         : 67    // Size operations:
         : 68    int      size     (void) const     { return sz; }
    0.00 :    fd88:   mov    0x160(%rdi),%ecx
         : 70    Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   sz = size; }
         :
         :
         : 125   template<class T>
         : 126   void vec<T>::clear(bool dealloc) {
         : 127   if (data != NULL){
    0.00 :    fd8e:   mov    0x158(%rdi),%rdx
         : 129   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         :
         :
         : 293   template<class Idx, class Vec, class Deleted>
         : 294   void OccLists<Idx,Vec,Deleted>::cleanAll()
         : 295   {
         : 296   for (int i = 0; i < dirties.size(); i++)
    0.00 :    fd95:   test   %ecx,%ecx
    0.00 :    fd97:   jle    fdcc <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x5c>
    0.00 :    fd99:   lea    0x138(%rdi),%rbp
    0.00 :    fda0:   mov    0x148(%rdi),%rdi
    0.00 :    fda7:   xor    %ebx,%ebx
    0.00 :    fda9:   mov    %rsi,%r12
    0.00 :    fdac:   nopl   0x0(%rax)
         : 304   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :    fdb0:   lea    (%rdx,%rbx,4),%rsi
         : 89    Minisat::vec<char>::operator[](int):
    0.00 :    fdb4:   movslq (%rsi),%rax
         : 88    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 293   // Dirties may contain duplicates so check here if a variable is already cleaned:
         : 294   if (dirty[toInt(dirties[i])])
    0.00 :    fdb7:   cmpb   $0x0,(%rdi,%rax,1)
    1.05 :    fdbb:   jne    10633 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x8c3>
         : 291   for (int i = 0; i < dirties.size(); i++)
    0.00 :    fdc1:   add    $0x1,%rbx
    0.00 :    fdc5:   cmp    %ebx,%ecx
    0.00 :    fdc7:   jg     fdb0 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x40>
    0.00 :    fdc9:   mov    %r12,%r11
         : 296   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   if (data != NULL){
    0.00 :    fdcc:   test   %rdx,%rdx
    0.00 :    fdcf:   je     fddc <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x6c>
         : 124   for (int i = 0; i < sz; i++) data[i].~T();
         : 125   sz = 0;
    0.00 :    fdd1:   movl   $0x0,0x160(%r15)
         : 127   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         : 882   // All watchers:
         : 883   //
         : 884   // for (int i = 0; i < watches.size(); i++)
         : 885   watches.cleanAll();
         : 886   for (int v = 0; v < nVars(); v++)
    0.00 :    fddc:   movq   $0x0,0x30(%rsp)
    0.00 :    fde5:   mov    0x1c8(%r15),%esi
    0.00 :    fdec:   test   %esi,%esi
    0.00 :    fdee:   jle    10018 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2a8>
    0.00 :    fdf4:   mov    %r11,%r14
    0.00 :    fdf7:   mov    %r15,%r11
    0.00 :    fdfa:   nopw   0x0(%rax,%rax,1)
    0.00 :    fe00:   mov    0x30(%rsp),%rbx
    0.30 :    fe05:   mov    %rbx,%rax
    0.00 :    fe08:   add    $0x1,%rbx
    0.00 :    fe0c:   shl    $0x5,%rax
    0.00 :    fe10:   mov    %rbx,0x30(%rsp)
    0.30 :    fe15:   mov    %rax,0x28(%rsp)
    0.00 :    fe1a:   add    $0x20,%rax
    0.00 :    fe1e:   mov    %rax,0x38(%rsp)
         : 902   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.15 :    fe23:   mov    0x28(%rsp),%r10
    3.48 :    fe28:   add    0x138(%r11),%r10
         : 90    Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         : 887   for (int s = 0; s < 2; s++){
         : 888   Lit p = mkLit(v, s);
         : 889   // printf(" >>> RELOCING: %s%d\n", sign(p)?"-":"", var(p)+1);
         : 890   vec<Watcher>& ws = watches[p];
         : 891   for (int j = 0; j < ws.size(); j++)
    0.00 :    fe2f:   xor    %ebp,%ebp
    0.00 :    fe31:   mov    0x8(%r10),%ecx
    0.60 :    fe35:   test   %ecx,%ecx
    0.00 :    fe37:   jg     fe55 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xe5>
    0.00 :    fe39:   jmp    ffeb <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x27b>
    0.00 :    fe3e:   xchg   %ax,%ax
         : 898   Minisat::Clause::relocation() const:
         : 172   CRef         relocation  ()      const   { return data[0].rel; }
    0.00 :    fe40:   mov    0x4(%rbx),%eax
         : 174   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    6.06 :    fe43:   mov    %eax,0x0(%r13)
         : 240   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :    fe47:   add    $0x1,%rbp
    0.30 :    fe4b:   cmp    %ebp,0x8(%r10)
    0.76 :    fe4f:   jle    ffeb <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x27b>
         : 890   Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
    0.00 :    fe55:   mov    (%r10),%rax
    0.43 :    fe58:   lea    (%rax,%rbp,8),%r13
         : 89    Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 236   Clause& c = operator[](cr);
    0.61 :    fe5c:   mov    0x0(%r13),%eax
         : 238   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64    Ref      alloc     (int size);
         : 65    void     free      (int size)    { wasted_ += size; }
         :
         : 67    // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    8.34 :    fe60:   cmp    0x230(%r11),%eax
    0.30 :    fe67:   jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :    fe6d:   mov    0x228(%r11),%rdx
    0.30 :    fe74:   lea    (%rdx,%rax,4),%rbx
         : 73    Minisat::Clause::reloced() const:
         : 171   bool         reloced     ()      const   { return header.reloced; }
    0.30 :    fe78:   movzbl (%rbx),%r12d
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
   12.83 :    fe7c:   test   $0x10,%r12b
    0.30 :    fe80:   jne    fe40 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xd0>
         : 241   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :    fe82:   movzbl 0x14(%r14),%eax
         : 215   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    5.30 :    fe87:   shr    $0x2,%r12b
         : 167   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :    fe8b:   mov    (%rbx),%edx
         : 164   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 115   typename RegionAllocator<T>::Ref
         : 116   RegionAllocator<T>::alloc(int size)
         : 117   {
         : 118   // printf("ALLOC called (this = %p, size = %d)\n", this, size); fflush(stdout);
         : 119   assert(size > 0);
         : 120   capacity(sz + size);
    0.00 :    fe8d:   mov    %r14,%rdi
         : 122   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :    fe90:   and    $0x1,%r12d
    0.00 :    fe94:   mov    %r11,0x18(%rsp)
         : 168   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.15 :    fe99:   or     %r12d,%eax
         : 215   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.76 :    fe9c:   shr    $0x5,%edx
    0.00 :    fe9f:   mov    %r10,0x10(%rsp)
         : 165   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :    fea4:   movzbl %al,%eax
         : 215   Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197   return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.30 :    fea7:   lea    0x1(%rdx,%rax,1),%edx
    1.82 :    feab:   mov    %eax,0x8(%rsp)
         : 200   Minisat::RegionAllocator<unsigned int>::alloc(int):
    0.00 :    feaf:   mov    %edx,%esi
    0.00 :    feb1:   add    0x8(%r14),%esi
    1.06 :    feb5:   mov    %edx,(%rsp)
    0.30 :    feb8:   call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         :
         : 118   uint32_t prev_sz = sz;
    0.00 :    febd:   mov    0x8(%r14),%r15d
    0.00 :    fec1:   mov    (%rsp),%edx
    4.06 :    fec4:   xor    %r8d,%r8d
    0.00 :    fec7:   add    %r15d,%edx
    0.00 :    feca:   setb   %r8b
         : 118   sz += size;
    0.61 :    fece:   mov    %edx,0x8(%r14)
         :
         : 122   // Handle overflow:
         : 123   if (sz < prev_sz)
    0.30 :    fed2:   test   %r8d,%r8d
    1.97 :    fed5:   jne    29ca <Minisat::Solver::relocAll(Minisat::ClauseAllocator&) [clone .cold]>
    0.00 :    fedb:   mov    0x8(%rsp),%eax
    0.00 :    fedf:   mov    0x10(%rsp),%r10
    0.00 :    fee4:   mov    0x18(%rsp),%r11
         : 129   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.30 :    fee9:   cmp    %edx,%r15d
    0.00 :    feec:   jae    107f4 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa84>
    0.00 :    fef2:   mov    (%r14),%rdi
    0.00 :    fef5:   mov    %r15d,%edx
         : 71    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :    fef8:   movzbl %r12b,%r12d
    0.15 :    fefc:   shl    $0x3,%eax
    0.76 :    feff:   shl    $0x2,%r12d
         : 141   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :    ff03:   lea    (%rdi,%rdx,4),%r9
         : 67    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :    ff07:   mov    (%rbx),%edx
         : 164   Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.91 :    ff09:   or     %r12d,%eax
         : 139   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.15 :    ff0c:   mov    %rdi,(%rsp)
         : 67    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
    0.00 :    ff10:   mov    %edx,%ecx
    0.00 :    ff12:   and    $0xffffffe0,%ecx
    0.00 :    ff15:   or     %ecx,%eax
         : 143   for (int i = 0; i < ps.size(); i++)
    0.61 :    ff17:   shr    $0x5,%edx
         : 137   header.mark      = 0;
    0.15 :    ff1a:   mov    %eax,(%r9)
         : 143   for (int i = 0; i < ps.size(); i++)
    0.46 :    ff1d:   mov    %edx,%r12d
    0.61 :    ff20:   je     ff5d <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x1ed>
         : 144   data[i].lit = ps[i];
    0.30 :    ff22:   mov    %edx,%edx
    0.00 :    ff24:   lea    0x4(%r9),%rdi
    0.00 :    ff28:   lea    0x4(%rbx),%rsi
    0.00 :    ff2c:   mov    %r11,0x20(%rsp)
    0.45 :    ff31:   shl    $0x2,%rdx
    0.00 :    ff35:   mov    %r10,0x18(%rsp)
    0.43 :    ff3a:   mov    %r8d,0x10(%rsp)
    0.30 :    ff3f:   mov    %r9,0x8(%rsp)
    0.00 :    ff44:   call   2510 <memmove@plt>
    0.30 :    ff49:   mov    0x8(%rsp),%r9
    0.30 :    ff4e:   mov    0x10(%rsp),%r8d
    0.30 :    ff53:   mov    0x18(%rsp),%r10
    0.30 :    ff58:   mov    0x20(%rsp),%r11
         : 146   if (header.has_extra){
    0.30 :    ff5d:   movzbl (%r9),%eax
    2.74 :    ff61:   test   $0x8,%al
    0.00 :    ff63:   je     ff79 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x209>
         : 147   if (header.learnt)
    0.00 :    ff65:   test   $0x4,%al
    0.91 :    ff67:   je     105f8 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x888>
         : 148   data[header.size].act = 0;
    0.00 :    ff6d:   movslq %r12d,%r12
    0.00 :    ff70:   movl   $0x0,0x4(%r9,%r12,4)
         : 151   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.91 :    ff79:   movzbl (%rbx),%eax
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 240   cr = to.alloc(c, c.learnt());
    0.91 :    ff7c:   mov    %r15d,0x0(%r13)
         : 242   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :    ff80:   mov    %r15d,0x4(%rbx)
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 245   to[cr].mark(c.mark());
    0.15 :    ff84:   mov    0x0(%r13),%edx
         : 247   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    2.42 :    ff88:   or     $0x10,%eax
    0.00 :    ff8b:   mov    %al,(%rbx)
         : 176   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.30 :    ff8d:   cmp    0x8(%r14),%edx
    0.76 :    ff91:   jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :    ff97:   mov    (%rsp),%rdi
         : 67    Minisat::Clause::mark() const:
         : 167   uint32_t     mark        ()      const   { return header.mark; }
    0.00 :    ff9b:   and    $0x3,%eax
         : 169   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :    ff9e:   lea    (%rdi,%rdx,4),%rsi
         : 64    Minisat::Clause::mark() const:
    0.15 :    ffa2:   mov    %eax,%edx
         : 168   Minisat::Clause::mark(unsigned int):
         : 168   void         mark        (uint32_t m)    { header.mark = m; }
    0.15 :    ffa4:   movzbl (%rsi),%eax
    1.98 :    ffa7:   and    $0xfffffffc,%eax
    0.15 :    ffaa:   or     %edx,%eax
    0.15 :    ffac:   mov    %al,(%rsi)
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    1.07 :    ffae:   test   $0x4,%al
    0.61 :    ffb0:   je     105b0 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x840>
         : 249   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :    ffb6:   testb  $0x8,(%rbx)
    0.61 :    ffb9:   je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :    ffbf:   mov    (%rbx),%edx
    6.81 :    ffc1:   shr    $0x5,%edx
         : 186   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :    ffc4:   movss  0x4(%rbx,%rdx,4),%xmm0
         : 248   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    3.33 :    ffca:   test   $0x8,%al
    0.00 :    ffcc:   je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :    ffd2:   mov    (%rsi),%eax
         : 185   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :    ffd4:   add    $0x1,%rbp
         : 888   Minisat::Clause::activity():
    0.00 :    ffd8:   shr    $0x5,%eax
         : 182   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :    ffdb:   movss  %xmm0,0x4(%rsi,%rax,4)
         : 248   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    2.58 :    ffe1:   cmp    %ebp,0x8(%r10)
    0.00 :    ffe5:   jg     fe55 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xe5>
         : 883   for (int s = 0; s < 2; s++){
    0.15 :    ffeb:   addq   $0x10,0x28(%rsp)
    4.37 :    fff1:   mov    0x28(%rsp),%rax
    0.60 :    fff6:   cmp    %rax,0x38(%rsp)
    0.00 :    fffb:   jne    fe23 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xb3>
         : 882   for (int v = 0; v < nVars(); v++)
    0.00 :   10001:  mov    0x30(%rsp),%eax
    1.52 :   10005:  cmp    %eax,0x1c8(%r11)
    0.00 :   1000c:  jg     fe00 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x90>
    0.00 :   10012:  mov    %r11,%r15
    0.00 :   10015:  mov    %r14,%r11
         : 888   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10018:  mov    0x1a8(%r15),%esi
         : 65    Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         : 893   ca.reloc(ws[j].cref, to);
         : 894   }
         :
         : 896   // All reasons:
         : 897   //
         : 898   for (int i = 0; i < trail.size(); i++){
    0.00 :   1001f:  xor    %ebx,%ebx
    0.00 :   10021:  mov    %r11,%r13
    0.00 :   10024:  test   %esi,%esi
    0.00 :   10026:  jg     10047 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2d7>
    0.00 :   10028:  jmp    10221 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4b1>
    0.00 :   1002d:  nopl   (%rax)
         : 905   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    0.00 :   10030:  mov    %eax,(%r12)
         : 240   Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   10034:  mov    0x1a8(%r15),%esi
         : 64    Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   1003b:  add    $0x1,%rbx
    0.00 :   1003f:  cmp    %ebx,%esi
    0.00 :   10041:  jle    1021e <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4ae>
         : 896   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10047:  mov    0x1a0(%r15),%rax
         : 64    Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   1004e:  mov    0x1c0(%r15),%rdx
         : 88    Minisat::var(Minisat::Lit):
    0.00 :   10055:  mov    (%rax,%rbx,4),%eax
    0.00 :   10058:  sar    %eax
         : 64    Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
    0.00 :   1005a:  cltq
    0.00 :   1005c:  lea    (%rdx,%rax,8),%r12
         : 88    Minisat::Solver::reason(int) const:
         :
         :
         : 279   //=================================================================================================
         : 280   // Implementation of inline methods:
         :
         : 282   inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    0.00 :   10060:  mov    (%r12),%eax
         : 284   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         : 896   Var v = var(trail[i]);
         :
         : 898   if (reason(v) != CRef_Undef && (ca[reason(v)].reloced() || locked(ca[reason(v)])))
    0.15 :   10064:  cmp    $0xffffffff,%eax
    0.00 :   10067:  je     1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 901   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   10069:  mov    0x230(%r15),%r8d
    0.00 :   10070:  cmp    %r8d,%eax
    0.00 :   10073:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   10079:  mov    0x228(%r15),%rdi
    0.00 :   10080:  lea    (%rdi,%rax,4),%rbp
         : 65    Minisat::Clause::reloced() const:
         : 171   bool         reloced     ()      const   { return header.reloced; }
    0.00 :   10084:  movzbl 0x0(%rbp),%ecx
         : 173   Minisat::Clause::operator[](int) const:
         : 178   Lit          operator [] (int i) const   { return data[i].lit; }
    0.30 :   10088:  mov    0x4(%rbp),%eax
         : 180   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   1008b:  test   $0x10,%cl
    0.00 :   1008e:  jne    10030 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2c0>
         : 898   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10090:  mov    %eax,%r9d
         : 64    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   10093:  mov    0x170(%r15),%r10
         : 101   Minisat::sign(Minisat::Lit):
         : 61    inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   1009a:  and    $0x1,%eax
         : 63    Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   1009d:  sar    %r9d
         : 64    Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   100a0:  movslq %r9d,%r9
         : 87    Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316   inline bool     Solver::addClause       (const vec<Lit>& ps)    { ps.copyTo(add_tmp); return addClause_(add_tmp); }
         : 317   inline bool     Solver::addEmptyClause  ()                      { add_tmp.clear(); return addClause_(add_tmp); }
         : 318   inline bool     Solver::addClause       (Lit p)                 { add_tmp.clear(); add_tmp.push(p); return addClause_(add_tmp); }
         : 319   inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
         : 320   inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
         : 321   inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    0.00 :   100a3:  cmp    %al,(%r10,%r9,1)
    0.00 :   100a7:  jne    1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 324   Minisat::Solver::reason(int) const:
         : 277   inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    0.00 :   100a9:  mov    (%rdx,%r9,8),%eax
         : 279   Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316   inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    0.00 :   100ad:  cmp    $0xffffffff,%eax
    0.00 :   100b0:  je     1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 319   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67    const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   100b2:  cmp    %eax,%r8d
    0.00 :   100b5:  jbe    10832 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xac2>
    0.00 :   100bb:  lea    (%rdi,%rax,4),%rax
         : 71    Minisat::Solver::locked(Minisat::Clause const&) const:
    0.00 :   100bf:  cmp    %rax,%rbp
    0.00 :   100c2:  jne    1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 318   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   100c8:  shr    $0x2,%cl
         : 167   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   100cb:  mov    0x0(%rbp),%eax
         : 164   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 115   capacity(sz + size);
    0.00 :   100ce:  mov    %r13,%rdi
         : 117   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   100d1:  and    $0x1,%ecx
         : 167   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   100d4:  mov    %ecx,%r14d
    0.00 :   100d7:  or     0x14(%r13),%r14b
         : 216   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   100db:  shr    $0x5,%eax
         : 164   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   100de:  mov    %cl,0x8(%rsp)
    0.00 :   100e2:  movzbl %r14b,%r14d
         : 216   Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197   return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   100e6:  lea    0x1(%rax,%r14,1),%eax
         : 199   Minisat::RegionAllocator<unsigned int>::alloc(int):
    0.00 :   100eb:  mov    %eax,%esi
    0.00 :   100ed:  add    0x8(%r13),%esi
    0.00 :   100f1:  mov    %eax,(%rsp)
    0.00 :   100f4:  call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         : 117   uint32_t prev_sz = sz;
    0.00 :   100f9:  mov    0x8(%r13),%r8d
    0.00 :   100fd:  mov    (%rsp),%eax
    0.00 :   10100:  xor    %r9d,%r9d
         : 121   if (sz < prev_sz)
    0.00 :   10103:  movzbl 0x8(%rsp),%ecx
    0.00 :   10108:  add    %r8d,%eax
    0.00 :   1010b:  setb   %r9b
         : 118   sz += size;
    0.00 :   1010f:  mov    %eax,0x8(%r13)
         : 121   if (sz < prev_sz)
    0.00 :   10113:  test   %r9d,%r9d
    0.00 :   10116:  jne    10851 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xae1>
         : 124   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   1011c:  cmp    %eax,%r8d
    0.00 :   1011f:  jae    107f4 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa84>
    0.00 :   10125:  mov    0x0(%r13),%r11
         : 70    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   10129:  mov    0x0(%rbp),%edx
         : 164   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   1012c:  mov    %r8d,%eax
         : 67    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :   1012f:  shl    $0x2,%ecx
         : 139   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   10132:  lea    (%r11,%rax,4),%r10
         : 67    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
    0.00 :   10136:  lea    0x0(,%r14,8),%eax
    0.00 :   1013e:  or     %ecx,%eax
    0.00 :   10140:  mov    %edx,%ecx
    0.00 :   10142:  and    $0xffffffe0,%ecx
    0.00 :   10145:  or     %ecx,%eax
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   10147:  shr    $0x5,%edx
         : 137   header.mark      = 0;
    0.00 :   1014a:  mov    %eax,(%r10)
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   1014d:  mov    %edx,%r14d
    0.00 :   10150:  je     1018b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x41b>
         : 144   data[i].lit = ps[i];
    0.00 :   10152:  mov    %edx,%edx
    0.00 :   10154:  lea    0x4(%r10),%rdi
    0.00 :   10158:  lea    0x4(%rbp),%rsi
    0.00 :   1015c:  mov    %r9d,0x18(%rsp)
    0.00 :   10161:  shl    $0x2,%rdx
    0.00 :   10165:  mov    %r8d,0x10(%rsp)
    0.00 :   1016a:  mov    %r11,0x8(%rsp)
    0.00 :   1016f:  mov    %r10,(%rsp)
    0.00 :   10173:  call   2510 <memmove@plt>
    0.00 :   10178:  mov    (%rsp),%r10
    0.00 :   1017c:  mov    0x8(%rsp),%r11
    0.00 :   10181:  mov    0x10(%rsp),%r8d
    0.00 :   10186:  mov    0x18(%rsp),%r9d
         : 146   if (header.has_extra){
    0.00 :   1018b:  movzbl (%r10),%eax
    0.00 :   1018f:  test   $0x8,%al
    0.00 :   10191:  je     101a7 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x437>
         : 147   if (header.learnt)
    0.00 :   10193:  test   $0x4,%al
    0.00 :   10195:  je     1072e <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x9be>
         : 148   data[header.size].act = 0;
    0.00 :   1019b:  movslq %r14d,%r14
    0.00 :   1019e:  movl   $0x0,0x4(%r10,%r14,4)
         : 151   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   101a7:  movzbl 0x0(%rbp),%eax
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 240   cr = to.alloc(c, c.learnt());
    0.00 :   101ab:  mov    %r8d,(%r12)
         : 242   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   101af:  mov    %r8d,0x4(%rbp)
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 245   to[cr].mark(c.mark());
    0.00 :   101b3:  mov    (%r12),%edx
         : 247   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   101b7:  or     $0x10,%eax
    0.00 :   101ba:  mov    %al,0x0(%rbp)
         : 176   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   101bd:  cmp    0x8(%r13),%edx
    0.00 :   101c1:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   101c7:  lea    (%r11,%rdx,4),%rdi
         : 67    Minisat::Clause::mark() const:
         : 167   uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   101cb:  and    $0x3,%eax
    0.00 :   101ce:  mov    %eax,%edx
         : 170   Minisat::Clause::mark(unsigned int):
         : 168   void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   101d0:  movzbl (%rdi),%eax
    0.00 :   101d3:  and    $0xfffffffc,%eax
    0.00 :   101d6:  or     %edx,%eax
    0.00 :   101d8:  mov    %al,(%rdi)
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   101da:  test   $0x4,%al
    0.00 :   101dc:  je     10661 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x8f1>
         : 249   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   101e2:  testb  $0x8,0x0(%rbp)
    0.00 :   101e6:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   101ec:  mov    0x0(%rbp),%edx
    0.00 :   101ef:  shr    $0x5,%edx
         : 186   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   101f2:  movss  0x4(%rbp,%rdx,4),%xmm0
         : 248   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   101f8:  test   $0x8,%al
    0.00 :   101fa:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   10200:  mov    (%rdi),%eax
         : 185   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10202:  mov    0x1a8(%r15),%esi
         : 65    Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
         : 893   for (int i = 0; i < trail.size(); i++){
    0.00 :   10209:  add    $0x1,%rbx
         : 895   Minisat::Clause::activity():
    0.00 :   1020d:  shr    $0x5,%eax
         : 182   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   10210:  movss  %xmm0,0x4(%rdi,%rax,4)
         : 248   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   10216:  cmp    %ebx,%esi
    0.00 :   10218:  jg     10047 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2d7>
    0.00 :   1021e:  mov    %r13,%r11
         : 902   ca.reloc(vardata[v].reason, to);
         : 903   }
         :
         : 905   // All learnt:
         : 906   //
         : 907   for (int i = 0; i < learnts.size(); i++)
    0.00 :   10221:  mov    0x110(%r15),%edx
    0.00 :   10228:  xor    %ebp,%ebp
    0.00 :   1022a:  mov    %r11,%r14
    0.00 :   1022d:  test   %edx,%edx
    0.00 :   1022f:  jg     1025a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4ea>
    0.00 :   10231:  jmp    103e4 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x674>
    0.00 :   10236:  cs nopw 0x0(%rax,%rax,1)
         : 915   Minisat::Clause::relocation() const:
         : 172   CRef         relocation  ()      const   { return data[0].rel; }
    0.00 :   10240:  mov    0x4(%r12),%eax
         : 174   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    0.30 :   10245:  mov    %eax,0x0(%r13)
         : 240   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   10249:  add    $0x1,%rbp
    0.30 :   1024d:  cmp    %ebp,0x110(%r15)
    0.00 :   10254:  jle    103e1 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x671>
         : 905   Minisat::vec<unsigned int>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   1025a:  mov    0x108(%r15),%rax
    0.00 :   10261:  lea    (%rax,%rbp,4),%r13
         : 90    Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 236   Clause& c = operator[](cr);
    0.00 :   10265:  mov    0x0(%r13),%eax
         : 238   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.15 :   10269:  cmp    0x230(%r15),%eax
    0.00 :   10270:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   10276:  mov    0x228(%r15),%rdx
    0.00 :   1027d:  lea    (%rdx,%rax,4),%r12
         : 65    Minisat::Clause::reloced() const:
         : 171   bool         reloced     ()      const   { return header.reloced; }
    0.00 :   10281:  movzbl (%r12),%ebx
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    1.52 :   10286:  test   $0x10,%bl
    0.00 :   10289:  jne    10240 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4d0>
         : 241   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   1028b:  movzbl 0x14(%r14),%eax
         : 215   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   10290:  shr    $0x2,%bl
         : 167   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   10293:  mov    (%r12),%edx
         : 164   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 115   capacity(sz + size);
    0.00 :   10297:  mov    %r14,%rdi
         : 117   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   1029a:  and    $0x1,%ebx
         : 167   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   1029d:  or     %ebx,%eax
         : 215   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   1029f:  shr    $0x5,%edx
         : 164   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   102a2:  movzbl %al,%eax
         : 215   Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197   return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   102a5:  lea    0x1(%rdx,%rax,1),%edx
    0.00 :   102a9:  mov    %eax,0x8(%rsp)
         : 200   Minisat::RegionAllocator<unsigned int>::alloc(int):
    0.00 :   102ad:  mov    %edx,%esi
    0.00 :   102af:  add    0x8(%r14),%esi
    0.00 :   102b3:  mov    %edx,(%rsp)
    0.00 :   102b6:  call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         : 117   uint32_t prev_sz = sz;
    0.00 :   102bb:  mov    0x8(%r14),%r8d
    0.00 :   102bf:  mov    (%rsp),%edx
    0.00 :   102c2:  xor    %r9d,%r9d
    0.00 :   102c5:  add    %r8d,%edx
    0.00 :   102c8:  setb   %r9b
         : 118   sz += size;
    0.00 :   102cc:  mov    %edx,0x8(%r14)
         : 121   if (sz < prev_sz)
    0.00 :   102d0:  test   %r9d,%r9d
    0.00 :   102d3:  jne    29ca <Minisat::Solver::relocAll(Minisat::ClauseAllocator&) [clone .cold]>
    0.00 :   102d9:  mov    0x8(%rsp),%eax
         : 125   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   102dd:  cmp    %edx,%r8d
    0.00 :   102e0:  jae    107f4 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa84>
    0.00 :   102e6:  mov    (%r14),%r11
    0.00 :   102e9:  mov    %r8d,%edx
         : 71    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :   102ec:  movzbl %bl,%ecx
    0.00 :   102ef:  shl    $0x3,%eax
    0.00 :   102f2:  shl    $0x2,%ecx
         : 141   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   102f5:  lea    (%r11,%rdx,4),%r10
         : 67    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   102f9:  mov    (%r12),%edx
         : 164   Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :   102fd:  or     %ecx,%eax
    0.00 :   102ff:  mov    %edx,%ecx
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   10301:  mov    %edx,%ebx
         : 137   header.mark      = 0;
    0.00 :   10303:  and    $0xffffffe0,%ecx
    0.00 :   10306:  or     %ecx,%eax
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   10308:  shr    $0x5,%ebx
         : 137   header.mark      = 0;
    0.00 :   1030b:  mov    %eax,(%r10)
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   1030e:  je     1034a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x5da>
         : 144   data[i].lit = ps[i];
    0.00 :   10310:  mov    %ebx,%edx
    0.00 :   10312:  lea    0x4(%r10),%rdi
    0.00 :   10316:  lea    0x4(%r12),%rsi
    0.00 :   1031b:  mov    %r9d,0x18(%rsp)
    0.00 :   10320:  shl    $0x2,%rdx
    0.00 :   10324:  mov    %r8d,0x10(%rsp)
    0.00 :   10329:  mov    %r11,0x8(%rsp)
    0.00 :   1032e:  mov    %r10,(%rsp)
    0.00 :   10332:  call   2510 <memmove@plt>
    0.00 :   10337:  mov    (%rsp),%r10
    0.00 :   1033b:  mov    0x8(%rsp),%r11
    0.00 :   10340:  mov    0x10(%rsp),%r8d
    0.00 :   10345:  mov    0x18(%rsp),%r9d
         : 146   if (header.has_extra){
    0.00 :   1034a:  movzbl (%r10),%eax
    0.00 :   1034e:  test   $0x8,%al
    0.00 :   10350:  je     10366 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x5f6>
         : 147   if (header.learnt)
    0.00 :   10352:  test   $0x4,%al
    0.00 :   10354:  je     10767 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x9f7>
         : 148   data[header.size].act = 0;
    0.00 :   1035a:  movslq %ebx,%rdx
    0.00 :   1035d:  movl   $0x0,0x4(%r10,%rdx,4)
         : 151   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   10366:  movzbl (%r12),%eax
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 240   cr = to.alloc(c, c.learnt());
    0.00 :   1036b:  mov    %r8d,0x0(%r13)
         : 242   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   1036f:  mov    %r8d,0x4(%r12)
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 245   to[cr].mark(c.mark());
    0.00 :   10374:  mov    0x0(%r13),%edx
         : 247   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   10378:  or     $0x10,%eax
    0.00 :   1037b:  mov    %al,(%r12)
         : 176   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   1037f:  cmp    0x8(%r14),%edx
    0.00 :   10383:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   10389:  lea    (%r11,%rdx,4),%rsi
         : 67    Minisat::Clause::mark() const:
         : 167   uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   1038d:  and    $0x3,%eax
    0.00 :   10390:  mov    %eax,%edx
         : 170   Minisat::Clause::mark(unsigned int):
         : 168   void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   10392:  movzbl (%rsi),%eax
    0.00 :   10395:  and    $0xfffffffc,%eax
    0.00 :   10398:  or     %edx,%eax
    0.00 :   1039a:  mov    %al,(%rsi)
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   1039c:  test   $0x4,%al
    0.00 :   1039e:  je     106aa <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x93a>
         : 249   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   103a4:  testb  $0x8,(%r12)
    0.00 :   103a9:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   103af:  mov    (%r12),%edx
    0.00 :   103b3:  shr    $0x5,%edx
         : 186   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   103b6:  movss  0x4(%r12,%rdx,4),%xmm0
         : 248   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   103bd:  test   $0x8,%al
    0.00 :   103bf:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   103c5:  mov    (%rsi),%eax
         : 185   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   103c7:  add    $0x1,%rbp
         : 903   Minisat::Clause::activity():
    0.00 :   103cb:  shr    $0x5,%eax
         : 182   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   103ce:  movss  %xmm0,0x4(%rsi,%rax,4)
         : 248   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   103d4:  cmp    %ebp,0x110(%r15)
    0.00 :   103db:  jg     1025a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4ea>
    0.00 :   103e1:  mov    %r14,%r11
         : 907   ca.reloc(learnts[i], to);
         :
         : 909   // All original:
         : 910   //
         : 911   for (int i = 0; i < clauses.size(); i++)
    0.00 :   103e4:  mov    0x100(%r15),%eax
    0.00 :   103eb:  xor    %ebp,%ebp
    0.00 :   103ed:  mov    %r11,%r14
    0.00 :   103f0:  test   %eax,%eax
    0.00 :   103f2:  jg     1041a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x6aa>
    0.00 :   103f4:  jmp    105a1 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x831>
    0.00 :   103f9:  nopl   0x0(%rax)
         : 919   Minisat::Clause::relocation() const:
         : 172   CRef         relocation  ()      const   { return data[0].rel; }
    0.00 :   10400:  mov    0x4(%r12),%eax
         : 174   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    0.00 :   10405:  mov    %eax,0x0(%r13)
         : 240   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   10409:  add    $0x1,%rbp
    0.00 :   1040d:  cmp    %ebp,0x100(%r15)
    0.00 :   10414:  jle    105a1 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x831>
         : 910   Minisat::vec<unsigned int>::operator[](int):
    0.00 :   1041a:  mov    0xf8(%r15),%rax
    0.00 :   10421:  lea    (%rax,%rbp,4),%r13
         : 89    Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 236   Clause& c = operator[](cr);
    0.00 :   10425:  mov    0x0(%r13),%eax
         : 238   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.30 :   10429:  cmp    0x230(%r15),%eax
    0.00 :   10430:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   10436:  mov    0x228(%r15),%rdx
    0.15 :   1043d:  lea    (%rdx,%rax,4),%r12
         : 65    Minisat::Clause::reloced() const:
         : 171   bool         reloced     ()      const   { return header.reloced; }
    0.00 :   10441:  movzbl (%r12),%ebx
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 238   if (c.reloced()) { cr = c.relocation(); return; }
    1.36 :   10446:  test   $0x10,%bl
    0.30 :   10449:  jne    10400 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x690>
         : 241   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   1044b:  movzbl 0x14(%r14),%eax
         : 215   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   10450:  shr    $0x2,%bl
         : 167   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   10453:  mov    (%r12),%edx
         : 164   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 115   capacity(sz + size);
    0.00 :   10457:  mov    %r14,%rdi
         : 117   Minisat::Clause::learnt() const:
         : 165   bool         learnt      ()      const   { return header.learnt; }
    0.00 :   1045a:  and    $0x1,%ebx
         : 167   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   1045d:  or     %ebx,%eax
         : 215   Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   1045f:  shr    $0x5,%edx
         : 164   unsigned int Minisat::ClauseAllocator::alloc<Minisat::Clause>(Minisat::Clause const&, bool):
         : 213   bool use_extra = learnt | extra_clause_field;
    0.00 :   10462:  movzbl %al,%eax
         : 215   Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197   return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   10465:  lea    0x1(%rdx,%rax,1),%edx
    0.00 :   10469:  mov    %eax,0x8(%rsp)
         : 200   Minisat::RegionAllocator<unsigned int>::alloc(int):
    0.00 :   1046d:  mov    %edx,%esi
    0.00 :   1046f:  add    0x8(%r14),%esi
    0.00 :   10473:  mov    %edx,(%rsp)
    0.00 :   10476:  call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         : 117   uint32_t prev_sz = sz;
    0.00 :   1047b:  mov    0x8(%r14),%r8d
    0.00 :   1047f:  mov    (%rsp),%edx
    0.00 :   10482:  xor    %r9d,%r9d
    0.00 :   10485:  add    %r8d,%edx
    0.00 :   10488:  setb   %r9b
         : 118   sz += size;
    0.00 :   1048c:  mov    %edx,0x8(%r14)
         : 121   if (sz < prev_sz)
    0.00 :   10490:  test   %r9d,%r9d
    0.00 :   10493:  jne    29ca <Minisat::Solver::relocAll(Minisat::ClauseAllocator&) [clone .cold]>
    0.00 :   10499:  mov    0x8(%rsp),%eax
         : 125   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   1049d:  cmp    %edx,%r8d
    0.00 :   104a0:  jae    107f4 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa84>
    0.00 :   104a6:  mov    (%r14),%r11
    0.00 :   104a9:  mov    %r8d,%edx
         : 71    Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :   104ac:  movzbl %bl,%ecx
    0.00 :   104af:  shl    $0x3,%eax
    0.00 :   104b2:  shl    $0x2,%ecx
         : 141   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   104b5:  lea    (%r11,%rdx,4),%r10
         : 67    Minisat::Clause::size() const:
         : 162   int          size        ()      const   { return header.size; }
    0.00 :   104b9:  mov    (%r12),%edx
         : 164   Minisat::Clause::Clause<Minisat::Clause>(Minisat::Clause const&, bool, bool):
         : 137   header.mark      = 0;
    0.00 :   104bd:  or     %ecx,%eax
    0.00 :   104bf:  mov    %edx,%ecx
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   104c1:  mov    %edx,%ebx
         : 137   header.mark      = 0;
    0.00 :   104c3:  and    $0xffffffe0,%ecx
    0.00 :   104c6:  or     %ecx,%eax
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   104c8:  shr    $0x5,%ebx
         : 137   header.mark      = 0;
    0.00 :   104cb:  mov    %eax,(%r10)
         : 143   for (int i = 0; i < ps.size(); i++)
    0.00 :   104ce:  je     1050a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x79a>
         : 144   data[i].lit = ps[i];
    0.00 :   104d0:  mov    %ebx,%edx
    0.00 :   104d2:  lea    0x4(%r10),%rdi
    0.00 :   104d6:  lea    0x4(%r12),%rsi
    0.00 :   104db:  mov    %r8d,0x18(%rsp)
    0.00 :   104e0:  shl    $0x2,%rdx
    0.00 :   104e4:  mov    %r11,0x10(%rsp)
    0.00 :   104e9:  mov    %r9d,0x8(%rsp)
    0.00 :   104ee:  mov    %r10,(%rsp)
    0.00 :   104f2:  call   2510 <memmove@plt>
    0.00 :   104f7:  mov    (%rsp),%r10
    0.00 :   104fb:  mov    0x8(%rsp),%r9d
    0.00 :   10500:  mov    0x10(%rsp),%r11
    0.00 :   10505:  mov    0x18(%rsp),%r8d
         : 146   if (header.has_extra){
    0.00 :   1050a:  movzbl (%r10),%eax
    0.00 :   1050e:  test   $0x8,%al
    0.00 :   10510:  je     10526 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x7b6>
         : 147   if (header.learnt)
    0.00 :   10512:  test   $0x4,%al
    0.00 :   10514:  je     1079e <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa2e>
         : 148   data[header.size].act = 0;
    0.00 :   1051a:  movslq %ebx,%rdx
    0.00 :   1051d:  movl   $0x0,0x4(%r10,%rdx,4)
         : 151   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   10526:  movzbl (%r12),%eax
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 240   cr = to.alloc(c, c.learnt());
    0.00 :   1052b:  mov    %r8d,0x0(%r13)
         : 242   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   1052f:  mov    %r8d,0x4(%r12)
         : 175   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 245   to[cr].mark(c.mark());
    0.00 :   10534:  mov    0x0(%r13),%edx
         : 247   Minisat::Clause::relocate(unsigned int):
         : 173   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
    0.00 :   10538:  or     $0x10,%eax
    0.00 :   1053b:  mov    %al,(%r12)
         : 176   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   1053f:  cmp    0x8(%r14),%edx
    0.00 :   10543:  jae    107d5 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa65>
    0.00 :   10549:  lea    (%r11,%rdx,4),%rsi
         : 67    Minisat::Clause::mark() const:
         : 167   uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   1054d:  and    $0x3,%eax
    0.00 :   10550:  mov    %eax,%edx
         : 170   Minisat::Clause::mark(unsigned int):
         : 168   void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   10552:  movzbl (%rsi),%eax
    0.00 :   10555:  and    $0xfffffffc,%eax
    0.00 :   10558:  or     %edx,%eax
    0.00 :   1055a:  mov    %al,(%rsi)
         : 173   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   1055c:  test   $0x4,%al
    0.00 :   1055e:  je     106ec <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x97c>
         : 249   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   10564:  testb  $0x8,(%r12)
    0.00 :   10569:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   1056f:  mov    (%r12),%edx
    0.00 :   10573:  shr    $0x5,%edx
         : 186   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   10576:  movss  0x4(%r12,%rdx,4),%xmm0
         : 248   Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   1057d:  test   $0x8,%al
    0.00 :   1057f:  je     10813 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xaa3>
    0.00 :   10585:  mov    (%rsi),%eax
         : 185   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   10587:  add    $0x1,%rbp
         : 908   Minisat::Clause::activity():
    0.00 :   1058b:  shr    $0x5,%eax
         : 182   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 246   if (to[cr].learnt())         to[cr].activity() = c.activity();
    0.00 :   1058e:  movss  %xmm0,0x4(%rsi,%rax,4)
         : 248   Minisat::Solver::relocAll(Minisat::ClauseAllocator&):
    0.00 :   10594:  cmp    %ebp,0x100(%r15)
    0.00 :   1059b:  jg     1041a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x6aa>
         : 909   ca.reloc(clauses[i], to);
         : 910   }
    0.00 :   105a1:  add    $0x48,%rsp
    0.00 :   105a5:  pop    %rbx
    0.00 :   105a6:  pop    %rbp
    0.00 :   105a7:  pop    %r12
    0.00 :   105a9:  pop    %r13
    0.00 :   105ab:  pop    %r14
    0.00 :   105ad:  pop    %r15
    0.00 :   105af:  ret
         : 919   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 247   else if (to[cr].has_extra()) to[cr].calcAbstraction();
    0.00 :   105b0:  test   $0x8,%al
    0.60 :   105b2:  je     fe47 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xd7>
         : 250   Minisat::Clause::calcAbstraction():
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   105b8:  mov    (%rsi),%r9d
    0.00 :   105bb:  shr    $0x5,%r9d
    0.00 :   105bf:  je     105e7 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x877>
    0.00 :   105c1:  lea    -0x1(%r9),%edx
    0.00 :   105c5:  lea    0x4(%rsi),%rax
    0.00 :   105c9:  lea    0x8(%rsi,%rdx,4),%rdi
    0.00 :   105ce:  xchg   %ax,%ax
         : 165   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   105d0:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   105d2:  mov    $0x1,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   105d7:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   105db:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   105dd:  shl    %cl,%edx
    0.00 :   105df:  or     %edx,%r8d
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   105e2:  cmp    %rax,%rdi
    0.00 :   105e5:  jne    105d0 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x860>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   105e7:  movslq %r9d,%r9
    0.00 :   105ea:  mov    %r8d,0x4(%rsi,%r9,4)
    0.00 :   105ef:  jmp    fe47 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xd7>
    0.00 :   105f4:  nopl   0x0(%rax)
         : 156   uint32_t abstraction = 0;
    0.00 :   105f8:  xor    %edx,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   105fa:  test   %r12d,%r12d
    0.00 :   105fd:  je     10626 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x8b6>
    0.00 :   105ff:  lea    -0x1(%r12),%edx
    0.00 :   10604:  lea    0x4(%r9),%rax
    0.00 :   10608:  lea    0x8(%r9,%rdx,4),%rsi
         : 156   uint32_t abstraction = 0;
    0.00 :   1060d:  xor    %edx,%edx
    0.00 :   1060f:  nop
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10610:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10612:  mov    $0x1,%edi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10617:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   1061b:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   1061d:  shl    %cl,%edi
    0.00 :   1061f:  or     %edi,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10621:  cmp    %rax,%rsi
    0.00 :   10624:  jne    10610 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x8a0>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   10626:  movslq %r12d,%r12
    0.00 :   10629:  mov    %edx,0x4(%r9,%r12,4)
    0.00 :   1062e:  jmp    ff79 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x209>
         : 163   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 294   clean(dirties[i]);
    0.00 :   10633:  mov    %rbp,%rdi
         : 291   for (int i = 0; i < dirties.size(); i++)
    0.00 :   10636:  add    $0x1,%rbx
         : 294   clean(dirties[i]);
    0.00 :   1063a:  call   12410 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)>
         : 296   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    1.06 :   1063f:  mov    0x160(%r15),%ecx
         : 65    Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   if (data != NULL){
    0.00 :   10646:  mov    0x158(%r15),%rdx
         : 124   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::cleanAll():
         : 291   for (int i = 0; i < dirties.size(); i++)
    0.00 :   1064d:  cmp    %ebx,%ecx
    0.00 :   1064f:  jle    fdc9 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x59>
    0.00 :   10655:  mov    0x148(%r15),%rdi
    0.00 :   1065c:  jmp    fdb0 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x40>
         : 296   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10661:  mov    0x1a8(%r15),%esi
         : 65    Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 247   else if (to[cr].has_extra()) to[cr].calcAbstraction();
    0.00 :   10668:  test   $0x8,%al
    0.00 :   1066a:  je     1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 250   Minisat::Clause::calcAbstraction():
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10670:  mov    (%rdi),%r10d
    0.00 :   10673:  shr    $0x5,%r10d
    0.00 :   10677:  je     1069d <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x92d>
    0.00 :   10679:  lea    -0x1(%r10),%edx
    0.00 :   1067d:  lea    0x4(%rdi),%rax
    0.00 :   10681:  lea    0x8(%rdi,%rdx,4),%r8
         : 164   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10686:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10688:  mov    $0x1,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   1068d:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10691:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10693:  shl    %cl,%edx
    0.00 :   10695:  or     %edx,%r9d
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10698:  cmp    %rax,%r8
    0.00 :   1069b:  jne    10686 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x916>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   1069d:  movslq %r10d,%r10
    0.00 :   106a0:  mov    %r9d,0x4(%rdi,%r10,4)
    0.00 :   106a5:  jmp    1003b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x2cb>
         : 163   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 247   else if (to[cr].has_extra()) to[cr].calcAbstraction();
    0.00 :   106aa:  test   $0x8,%al
    0.00 :   106ac:  je     10249 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4d9>
         : 250   Minisat::Clause::calcAbstraction():
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   106b2:  mov    (%rsi),%r8d
    0.00 :   106b5:  shr    $0x5,%r8d
    0.00 :   106b9:  je     106df <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x96f>
    0.00 :   106bb:  lea    -0x1(%r8),%edx
    0.00 :   106bf:  lea    0x4(%rsi),%rax
    0.00 :   106c3:  lea    0x8(%rsi,%rdx,4),%rdi
         : 164   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   106c8:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   106ca:  mov    $0x1,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   106cf:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   106d3:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   106d5:  shl    %cl,%edx
    0.00 :   106d7:  or     %edx,%r9d
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   106da:  cmp    %rax,%rdi
    0.00 :   106dd:  jne    106c8 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x958>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   106df:  movslq %r8d,%r8
    0.00 :   106e2:  mov    %r9d,0x4(%rsi,%r8,4)
    0.00 :   106e7:  jmp    10249 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x4d9>
         : 163   Minisat::ClauseAllocator::reloc(unsigned int&, Minisat::ClauseAllocator&):
         : 247   else if (to[cr].has_extra()) to[cr].calcAbstraction();
    0.00 :   106ec:  test   $0x8,%al
    0.00 :   106ee:  je     10409 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x699>
         : 250   Minisat::Clause::calcAbstraction():
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   106f4:  mov    (%rsi),%r8d
    0.00 :   106f7:  shr    $0x5,%r8d
    0.00 :   106fb:  je     10721 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x9b1>
    0.00 :   106fd:  lea    -0x1(%r8),%edx
    0.00 :   10701:  lea    0x4(%rsi),%rax
    0.00 :   10705:  lea    0x8(%rsi,%rdx,4),%rdi
         : 164   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   1070a:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   1070c:  mov    $0x1,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10711:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10715:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10717:  shl    %cl,%edx
    0.00 :   10719:  or     %edx,%r9d
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   1071c:  cmp    %rax,%rdi
    0.00 :   1071f:  jne    1070a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x99a>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   10721:  movslq %r8d,%r8
    0.00 :   10724:  mov    %r9d,0x4(%rsi,%r8,4)
    0.00 :   10729:  jmp    10409 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x699>
         : 156   uint32_t abstraction = 0;
    0.00 :   1072e:  xor    %edx,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10730:  test   %r14d,%r14d
    0.00 :   10733:  je     1075a <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x9ea>
    0.00 :   10735:  lea    -0x1(%r14),%edx
    0.00 :   10739:  lea    0x4(%r10),%rax
    0.00 :   1073d:  lea    0x8(%r10,%rdx,4),%rsi
         : 156   uint32_t abstraction = 0;
    0.00 :   10742:  xor    %edx,%edx
         : 158   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10744:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10746:  mov    $0x1,%edi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   1074b:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   1074f:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10751:  shl    %cl,%edi
    0.00 :   10753:  or     %edi,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10755:  cmp    %rax,%rsi
    0.00 :   10758:  jne    10744 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x9d4>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   1075a:  movslq %r14d,%r14
    0.00 :   1075d:  mov    %edx,0x4(%r10,%r14,4)
    0.00 :   10762:  jmp    101a7 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x437>
         : 156   uint32_t abstraction = 0;
    0.00 :   10767:  xor    %esi,%esi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10769:  test   %ebx,%ebx
    0.00 :   1076b:  je     10791 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa21>
    0.00 :   1076d:  lea    -0x1(%rbx),%edx
    0.00 :   10770:  lea    0x4(%r10),%rax
         : 156   uint32_t abstraction = 0;
    0.00 :   10774:  xor    %esi,%esi
    0.00 :   10776:  lea    0x8(%r10,%rdx,4),%rdx
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   1077b:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   1077d:  mov    $0x1,%edi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   10782:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10786:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   10788:  shl    %cl,%edi
    0.00 :   1078a:  or     %edi,%esi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   1078c:  cmp    %rax,%rdx
    0.00 :   1078f:  jne    1077b <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa0b>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   10791:  movslq %ebx,%rdx
    0.00 :   10794:  mov    %esi,0x4(%r10,%rdx,4)
    0.00 :   10799:  jmp    10366 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x5f6>
         : 156   uint32_t abstraction = 0;
    0.00 :   1079e:  xor    %esi,%esi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   107a0:  test   %ebx,%ebx
    0.00 :   107a2:  je     107c8 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa58>
    0.00 :   107a4:  lea    -0x1(%rbx),%edx
    0.00 :   107a7:  lea    0x4(%r10),%rax
         : 156   uint32_t abstraction = 0;
    0.00 :   107ab:  xor    %esi,%esi
    0.00 :   107ad:  lea    0x8(%r10,%rdx,4),%rdx
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   107b2:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   107b4:  mov    $0x1,%edi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   107b9:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   107bd:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   107bf:  shl    %cl,%edi
    0.00 :   107c1:  or     %edi,%esi
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   107c3:  cmp    %rdx,%rax
    0.00 :   107c6:  jne    107b2 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0xa42>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   107c8:  movslq %ebx,%rdx
    0.00 :   107cb:  mov    %esi,0x4(%r10,%rdx,4)
    0.00 :   107d0:  jmp    10526 <Minisat::Solver::relocAll(Minisat::ClauseAllocator&)+0x7b6>
         : 163   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   107d5:  lea    0x325c(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   107dc:  mov    $0x3f,%edx
    0.00 :   107e1:  lea    0x3232(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   107e8:  lea    0x3c29(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   107ef:  call   23b0 <__assert_fail@plt>
         : 68    Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   107f4:  lea    0x32d5(%rip),%rcx        # 13ad0 <typeinfo name for Minisat::BoolOption+0x1c0>
    0.00 :   107fb:  mov    $0x42,%edx
    0.00 :   10800:  lea    0x3213(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   10807:  lea    0x3c0a(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   1080e:  call   23b0 <__assert_fail@plt>
         : 72    Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   10813:  lea    0x3346(%rip),%rcx        # 13b60 <typeinfo name for Minisat::BoolOption+0x250>
    0.00 :   1081a:  mov    $0xb5,%edx
    0.00 :   1081f:  lea    0x3c03(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   10826:  lea    0x3d1a(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   1082d:  call   23b0 <__assert_fail@plt>
         : 187   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67    const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   10832:  lea    0x4377(%rip),%rcx        # 14bb0 <Minisat::lit_Undef+0x458>
    0.00 :   10839:  mov    $0x43,%edx
    0.00 :   1083e:  lea    0x31d5(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   10845:  lea    0x3bcc(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   1084c:  call   23b0 <__assert_fail@plt>
         : 73    Minisat::RegionAllocator<unsigned int>::alloc(int):
    0.00 :   10851:  jmp    29ca <Minisat::Solver::relocAll(Minisat::ClauseAllocator&) [clone .cold]>
 Percent |	Source code & Disassembly of minisat for cycles:u (522 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000010b80 <Minisat::Solver::search(int)>:
         : 6     Minisat::Solver::search(int):
         : 615   |    'l_True' if a partial assigment that is consistent with respect to the clauseset is found. If
         : 616   |    all variables are decision variables, this means that the clause set is satisfiable. 'l_False'
         : 617   |    if the clause set is unsatisfiable. 'l_Undef' if the bound on number of conflicts is reached.
         : 618   |________________________________________________________________________________________________@*/
         : 619   lbool Solver::search(int nof_conflicts)
         : 620   {
    0.00 :   10b80:  endbr64
    0.00 :   10b84:  push   %rbp
    0.00 :   10b85:  mov    %rsp,%rbp
    0.00 :   10b88:  push   %r15
    0.00 :   10b8a:  push   %r14
    0.00 :   10b8c:  push   %r13
    0.00 :   10b8e:  push   %r12
    0.00 :   10b90:  push   %rbx
    0.00 :   10b91:  sub    $0x68,%rsp
    0.00 :   10b95:  mov    %rdi,-0x68(%rbp)
    0.00 :   10b99:  mov    %esi,-0x84(%rbp)
    0.00 :   10b9f:  mov    %fs:0x28,%rax
    0.00 :   10ba8:  mov    %rax,-0x38(%rbp)
    0.00 :   10bac:  xor    %eax,%eax
         : 616   assert(ok);
    0.00 :   10bae:  cmpb   $0x0,0xf0(%rdi)
    0.00 :   10bb5:  je     11695 <Minisat::Solver::search(int)+0xb15>
         : 620   int         backtrack_level;
         : 621   int         conflictC = 0;
         : 622   vec<Lit>    learnt_clause;
         : 623   starts++;
    0.00 :   10bbb:  addq   $0x1,0xa0(%rdi)
         : 618   int         conflictC = 0;
    0.00 :   10bc3:  xor    %r12d,%r12d
         : 620   Minisat::vec<Minisat::Lit>::vec():
         : 54    //static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         : 55    static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         :
         : 57    public:
         : 58    // Constructors:
         : 59    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   10bc6:  movq   $0x0,-0x50(%rbp)
    0.00 :   10bce:  movq   $0x0,-0x48(%rbp)
         : 62    Minisat::Solver::search(int):
         :
         : 624   for (;;){
         : 625   CRef confl = propagate();
    0.00 :   10bd6:  mov    -0x68(%rbp),%rbx
    0.19 :   10bda:  mov    %rbx,%rdi
    0.00 :   10bdd:  call   f450 <Minisat::Solver::propagate()>
         : 629   Minisat::vec<int>::size() const:
         :
         : 64    // Pointer to first element:
         : 65    operator T*       (void)           { return data; }
         :
         : 67    // Size operations:
         : 68    int      size     (void) const     { return sz; }
    5.17 :   10be2:  mov    0x1b8(%rbx),%r15d
         : 70    Minisat::Solver::search(int):
    0.38 :   10be9:  mov    %eax,%esi
         : 624   if (confl != CRef_Undef){
    0.00 :   10beb:  cmp    $0xffffffff,%eax
    0.00 :   10bee:  je     11000 <Minisat::Solver::search(int)+0x480>
         : 626   // CONFLICT
         : 627   conflicts++; conflictC++;
    0.00 :   10bf4:  addq   $0x1,0xc0(%rbx)
         : 629   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   sz = size; }
         :
         :
         : 125   template<class T>
         : 126   void vec<T>::clear(bool dealloc) {
         : 127   if (data != NULL){
    0.58 :   10bfc:  mov    -0x50(%rbp),%rdi
         : 129   Minisat::Solver::search(int):
    1.52 :   10c00:  add    $0x1,%r12d
         : 627   if (decisionLevel() == 0) return l_False;
    0.00 :   10c04:  test   %r15d,%r15d
    0.00 :   10c07:  je     11480 <Minisat::Solver::search(int)+0x900>
         : 630   Minisat::vec<Minisat::Lit>::clear(bool):
    0.19 :   10c0d:  test   %rdi,%rdi
    0.38 :   10c10:  je     10c19 <Minisat::Solver::search(int)+0x99>
         : 124   for (int i = 0; i < sz; i++) data[i].~T();
         : 125   sz = 0;
    0.00 :   10c12:  movl   $0x0,-0x48(%rbp)
         : 127   Minisat::Solver::search(int):
         :
         : 631   learnt_clause.clear();
         : 632   analyze(confl, learnt_clause, backtrack_level);
    0.19 :   10c19:  mov    -0x68(%rbp),%rbx
    0.00 :   10c1d:  lea    -0x54(%rbp),%rcx
    0.00 :   10c21:  lea    -0x50(%rbp),%rdx
    0.19 :   10c25:  mov    %rbx,%rdi
    0.00 :   10c28:  call   d390 <Minisat::Solver::analyze(unsigned int, Minisat::vec<Minisat::Lit>&, int&)>
         : 631   cancelUntil(backtrack_level);
    0.77 :   10c2d:  mov    -0x54(%rbp),%esi
         : 633   Minisat::Solver::cancelUntil(int):
         : 208   if (decisionLevel() > level){
    0.57 :   10c30:  cmp    0x1b8(%rbx),%esi
    0.00 :   10c36:  jge    10c40 <Minisat::Solver::search(int)+0xc0>
    0.00 :   10c38:  mov    %rbx,%rdi
    0.00 :   10c3b:  call   e9d0 <Minisat::Solver::cancelUntil(int) [clone .part.0]>
         : 213   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.39 :   10c40:  mov    -0x48(%rbp),%r15d
         : 65    Minisat::Solver::search(int):
         :
         : 634   if (learnt_clause.size() == 1){
    0.00 :   10c44:  cmp    $0x1,%r15d
    0.19 :   10c48:  je     11170 <Minisat::Solver::search(int)+0x5f0>
         : 637   unsigned int Minisat::ClauseAllocator::alloc<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool):
         : 215   {
         : 216   assert(sizeof(Lit)      == sizeof(uint32_t));
         : 217   assert(sizeof(float)    == sizeof(uint32_t));
         : 218   bool use_extra = learnt | extra_clause_field;
         :
         : 220   CRef cid = RegionAllocator<uint32_t>::alloc(clauseWord32Size(ps.size(), use_extra));
    0.00 :   10c4e:  mov    -0x68(%rbp),%rax
         : 222   Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197   return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   10c52:  lea    0x2(%r15),%r13d
         : 199   unsigned int Minisat::ClauseAllocator::alloc<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool):
         : 215   CRef cid = RegionAllocator<uint32_t>::alloc(clauseWord32Size(ps.size(), use_extra));
    0.00 :   10c56:  lea    0x228(%rax),%rdi
         : 217   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 114   template<class T>
         : 115   typename RegionAllocator<T>::Ref
         : 116   RegionAllocator<T>::alloc(int size)
         : 117   {
         : 118   // printf("ALLOC called (this = %p, size = %d)\n", this, size); fflush(stdout);
         : 119   assert(size > 0);
    0.00 :   10c5d:  test   %r13d,%r13d
    0.36 :   10c60:  jle    11676 <Minisat::Solver::search(int)+0xaf6>
         : 115   capacity(sz + size);
    0.00 :   10c66:  mov    0x230(%rax),%esi
    1.54 :   10c6c:  mov    %rax,%rbx
    0.00 :   10c6f:  add    %r13d,%esi
    0.00 :   10c72:  call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         :
         : 118   uint32_t prev_sz = sz;
    0.19 :   10c77:  mov    %rbx,%rax
    0.00 :   10c7a:  mov    0x230(%rbx),%ebx
    2.69 :   10c80:  xor    %r8d,%r8d
    0.00 :   10c83:  add    %ebx,%r13d
    0.00 :   10c86:  setb   %r8b
         : 118   sz += size;
    0.57 :   10c8a:  mov    %r13d,0x230(%rax)
         :
         : 122   // Handle overflow:
         : 123   if (sz < prev_sz)
    0.00 :   10c91:  test   %r8d,%r8d
    0.77 :   10c94:  jne    29fc <Minisat::Solver::search(int) [clone .cold]>
         : 126   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   10c9a:  cmp    %r13d,%ebx
    0.00 :   10c9d:  jae    11652 <Minisat::Solver::search(int)+0xad2>
    0.19 :   10ca3:  mov    -0x68(%rbp),%rax
    0.19 :   10ca7:  mov    %ebx,%r13d
    0.00 :   10caa:  shl    $0x2,%r13
    0.00 :   10cae:  mov    0x228(%rax),%rsi
         : 73    Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
         : 137   header.mark      = 0;
    0.77 :   10cb5:  mov    %r15d,%eax
    0.00 :   10cb8:  shl    $0x5,%eax
         : 140   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   10cbb:  add    %r13,%rsi
         : 67    Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
    0.00 :   10cbe:  or     $0xc,%eax
    0.00 :   10cc1:  mov    %eax,(%rsi)
         : 143   for (int i = 0; i < ps.size(); i++)
    4.03 :   10cc3:  test   %r15d,%r15d
    0.00 :   10cc6:  jle    10ceb <Minisat::Solver::search(int)+0x16b>
         : 146   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   10cc8:  mov    -0x50(%rbp),%rdi
    0.00 :   10ccc:  lea    -0x1(%r15),%ecx
    0.00 :   10cd0:  xor    %eax,%eax
    0.00 :   10cd2:  nopw   0x0(%rax,%rax,1)
         : 92    Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
         : 144   data[i].lit = ps[i];
    0.00 :   10cd8:  mov    (%rdi,%rax,4),%edx
    1.15 :   10cdb:  mov    %edx,0x4(%rsi,%rax,4)
         : 147   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    5.37 :   10cdf:  mov    %rax,%rdx
         : 65    Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
         : 143   for (int i = 0; i < ps.size(); i++)
    0.76 :   10ce2:  add    $0x1,%rax
    0.00 :   10ce6:  cmp    %rdx,%rcx
    0.58 :   10ce9:  jne    10cd8 <Minisat::Solver::search(int)+0x158>
         : 146   if (header.has_extra){
    0.00 :   10ceb:  movzbl (%rsi),%eax
    2.49 :   10cee:  test   $0x8,%al
    0.00 :   10cf0:  je     10d0d <Minisat::Solver::search(int)+0x18d>
    0.00 :   10cf2:  and    $0x7ffffff,%r15d
         : 147   if (header.learnt)
    0.00 :   10cf9:  test   $0x4,%al
    0.58 :   10cfb:  je     113b0 <Minisat::Solver::search(int)+0x830>
         : 148   data[header.size].act = 0;
    0.00 :   10d01:  movslq %r15d,%r15
    0.00 :   10d04:  movl   $0x0,0x4(%rsi,%r15,4)
         : 151   Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.96 :   10d0d:  mov    -0x68(%rbp),%rcx
    0.39 :   10d11:  movslq 0x110(%rcx),%rax
    1.53 :   10d18:  cmp    0x114(%rcx),%eax
    0.58 :   10d1e:  je     11390 <Minisat::Solver::search(int)+0x810>
    0.19 :   10d24:  mov    -0x68(%rbp),%r14
    0.00 :   10d28:  lea    0x1(%rax),%ecx
         : 81    Minisat::Solver::search(int):
         : 638   uncheckedEnqueue(learnt_clause[0]);
         : 639   }else{
         : 640   CRef cr = ca.alloc(learnt_clause, true);
         : 641   learnts.push(cr);
         : 642   attachClause(cr);
    0.00 :   10d2b:  mov    %ebx,%esi
         : 644   Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   10d2d:  mov    0x108(%r14),%rdx
    1.15 :   10d34:  mov    %ecx,0x110(%r14)
    0.00 :   10d3b:  mov    %r14,%rdi
    0.00 :   10d3e:  mov    %ebx,(%rdx,%rax,4)
         : 78    Minisat::Solver::search(int):
   13.98 :   10d41:  call   f2e0 <Minisat::Solver::attachClause(unsigned int)>
         : 639   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   10d46:  mov    0x230(%r14),%esi
    0.00 :   10d4d:  cmp    %ebx,%esi
    0.00 :   10d4f:  jbe    115d6 <Minisat::Solver::search(int)+0xa56>
    0.00 :   10d55:  mov    -0x68(%rbp),%rax
    0.00 :   10d59:  mov    0x228(%rax),%rcx
    0.38 :   10d60:  add    %rcx,%r13
         : 70    Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.58 :   10d63:  testb  $0x8,0x0(%r13)
    0.00 :   10d68:  je     115f5 <Minisat::Solver::search(int)+0xa75>
    0.00 :   10d6e:  mov    %rax,%rdx
    0.00 :   10d71:  mov    0x0(%r13),%eax
         : 186   Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 298   if (order_heap.inHeap(v))
         : 299   order_heap.decrease(v); }
         :
         : 301   inline void Solver::claDecayActivity() { cla_inc *= (1 / clause_decay); }
         : 302   inline void Solver::claBumpActivity (Clause& c) {
         : 303   if ( (c.activity() += cla_inc) > 1e20 ) {
    0.00 :   10d75:  pxor   %xmm0,%xmm0
    0.00 :   10d79:  movsd  0x118(%rdx),%xmm2
         : 306   Minisat::Clause::activity():
    0.19 :   10d81:  shr    $0x5,%eax
         : 182   Minisat::Solver::claBumpActivity(Minisat::Clause&):
    0.39 :   10d84:  cvtss2sd 0x4(%r13,%rax,4),%xmm0
    1.15 :   10d8b:  addsd  %xmm2,%xmm0
    0.19 :   10d8f:  cvtsd2ss %xmm0,%xmm0
    0.77 :   10d93:  movss  %xmm0,0x4(%r13,%rax,4)
    0.77 :   10d9a:  cvtss2sd %xmm0,%xmm0
    0.00 :   10d9e:  comisd 0x4562(%rip),%xmm0        # 15308 <typeinfo name for Minisat::Solver+0x28>
    2.23 :   10da6:  jbe    10e25 <Minisat::Solver::search(int)+0x2a5>
         : 305   Minisat::vec<unsigned int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10da8:  mov    0x110(%rdx),%eax
         : 65    Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 300   // Rescale:
         : 301   for (int i = 0; i < learnts.size(); i++)
    0.00 :   10dae:  test   %eax,%eax
    0.00 :   10db0:  jle    115c9 <Minisat::Solver::search(int)+0xa49>
    0.00 :   10db6:  mov    0x108(%rdx),%rdx
    0.00 :   10dbd:  sub    $0x1,%eax
    0.00 :   10dc0:  lea    0x4(%rdx,%rax,4),%rdi
    0.00 :   10dc5:  nopl   (%rax)
         : 301   ca[learnts[i]].activity() *= 1e-20;
    0.00 :   10dc8:  mov    (%rdx),%eax
         : 303   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   10dca:  cmp    %eax,%esi
    0.00 :   10dcc:  jbe    115d6 <Minisat::Solver::search(int)+0xa56>
    0.00 :   10dd2:  lea    (%rcx,%rax,4),%r8
         : 66    Minisat::Clause::activity():
    0.00 :   10dd6:  testb  $0x8,(%r8)
    0.00 :   10dda:  je     115f5 <Minisat::Solver::search(int)+0xa75>
    0.00 :   10de0:  mov    (%r8),%eax
         : 184   Minisat::Solver::claBumpActivity(Minisat::Clause&):
    0.00 :   10de3:  mov    0x4526(%rip),%r10        # 15310 <typeinfo name for Minisat::Solver+0x30>
    0.00 :   10dea:  pxor   %xmm0,%xmm0
         : 300   for (int i = 0; i < learnts.size(); i++)
    0.00 :   10dee:  add    $0x4,%rdx
         : 302   Minisat::Clause::activity():
    0.00 :   10df2:  shr    $0x5,%eax
         : 182   Minisat::Solver::claBumpActivity(Minisat::Clause&):
         : 301   ca[learnts[i]].activity() *= 1e-20;
    0.00 :   10df5:  movq   %r10,%xmm1
    0.00 :   10dfa:  cvtss2sd 0x4(%r8,%rax,4),%xmm0
    0.00 :   10e01:  mulsd  %xmm1,%xmm0
    0.00 :   10e05:  cvtsd2ss %xmm0,%xmm0
    0.00 :   10e09:  movss  %xmm0,0x4(%r8,%rax,4)
         : 300   for (int i = 0; i < learnts.size(); i++)
    0.00 :   10e10:  cmp    %rdx,%rdi
    0.00 :   10e13:  jne    10dc8 <Minisat::Solver::search(int)+0x248>
         : 302   cla_inc *= 1e-20; } }
    0.00 :   10e15:  mulsd  %xmm1,%xmm2
    0.00 :   10e19:  mov    -0x68(%rbp),%rax
    0.00 :   10e1d:  movsd  %xmm2,0x118(%rax)
         : 306   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.77 :   10e25:  mov    -0x50(%rbp),%rax
         : 89    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.19 :   10e29:  mov    -0x68(%rbp),%rdi
    0.00 :   10e2d:  mov    (%rax),%edx
    0.00 :   10e2f:  mov    0x170(%rdi),%rcx
         : 90    Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10e36:  mov    %edx,%eax
         : 64    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   10e38:  mov    %edx,%esi
         : 101   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10e3a:  sar    %eax
         : 64    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   10e3c:  and    $0x1,%esi
         : 101   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.77 :   10e3f:  cltq
    0.00 :   10e41:  add    %rax,%rcx
         : 88    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431   assert(value(p) == l_Undef);
    0.00 :   10e44:  testb  $0x2,(%rcx)
    0.00 :   10e47:  je     11614 <Minisat::Solver::search(int)+0xa94>
         : 432   assigns[var(p)] = lbool(!sign(p));
    0.00 :   10e4d:  mov    %sil,(%rcx)
         : 434   Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   10e50:  mov    0x1c0(%rdi),%rcx
         : 89    Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10e57:  mov    0x1b8(%rdi),%r15d
         : 65    Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   10e5e:  lea    (%rcx,%rax,8),%rax
         : 89    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 433   vardata[var(p)] = mkVarData(from, decisionLevel());
    0.00 :   10e62:  mov    %ebx,(%rax)
         : 435   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75    void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.00 :   10e64:  mov    %rdi,%rbx
         : 77    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
    0.00 :   10e67:  mov    %r15d,0x4(%rax)
         : 434   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
    0.00 :   10e6b:  movslq 0x1a8(%rdi),%rax
    0.00 :   10e72:  cmp    0x1ac(%rdi),%eax
    0.00 :   10e78:  jge    111ca <Minisat::Solver::search(int)+0x64a>
    0.00 :   10e7e:  mov    0x1a0(%rbx),%rcx
    0.00 :   10e85:  lea    0x1(%rax),%edi
         : 80    Minisat::Solver::varDecayActivity():
         : 283   inline void Solver::varDecayActivity() { var_inc *= (1 / var_decay); }
    0.00 :   10e88:  movsd  0x4518(%rip),%xmm0        # 153a8 <typeinfo name for Minisat::Solver+0xc8>
         : 285   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
    0.19 :   10e90:  mov    %edi,0x1a8(%rbx)
    0.38 :   10e96:  mov    %edx,(%rcx,%rax,4)
         : 77    Minisat::Solver::varDecayActivity():
    0.00 :   10e99:  mov    -0x68(%rbp),%rax
    0.19 :   10e9d:  divsd  0x30(%rax),%xmm0
    5.38 :   10ea2:  mulsd  0x130(%rax),%xmm0
         : 286   Minisat::Solver::search(int):
         : 646   }
         :
         : 648   varDecayActivity();
         : 649   claDecayActivity();
         :
         : 651   if (--learntsize_adjust_cnt == 0){
    1.34 :   10eaa:  mov    0x290(%rax),%ecx
    0.00 :   10eb0:  mov    %rax,%rdi
    0.00 :   10eb3:  lea    -0x1(%rcx),%r13d
    0.00 :   10eb7:  mov    %ecx,-0x70(%rbp)
    0.00 :   10eba:  mov    %r13d,0x290(%rax)
         : 657   Minisat::Solver::varDecayActivity():
    0.00 :   10ec1:  movsd  %xmm0,0x130(%rax)
         : 284   Minisat::Solver::claDecayActivity():
         : 296   inline void Solver::claDecayActivity() { cla_inc *= (1 / clause_decay); }
    0.19 :   10ec9:  movsd  0x44d7(%rip),%xmm0        # 153a8 <typeinfo name for Minisat::Solver+0xc8>
    0.00 :   10ed1:  divsd  0x38(%rax),%xmm0
    0.00 :   10ed6:  mulsd  0x118(%rax),%xmm0
    1.33 :   10ede:  movsd  %xmm0,0x118(%rax)
         : 301   Minisat::Solver::search(int):
    0.57 :   10ee6:  test   %r13d,%r13d
    0.19 :   10ee9:  jne    10bd6 <Minisat::Solver::search(int)+0x56>
         : 647   learntsize_adjust_confl *= learntsize_adjust_inc;
    0.00 :   10eef:  movsd  0x288(%rax),%xmm0
    0.00 :   10ef7:  mulsd  0x90(%rax),%xmm0
         : 651   learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
         : 652   max_learnts             *= learntsize_inc;
         :
         : 654   if (verbosity >= 1)
    0.00 :   10eff:  mov    0x28(%rdi),%ecx
         : 647   learntsize_adjust_confl *= learntsize_adjust_inc;
    0.00 :   10f02:  movsd  %xmm0,0x288(%rax)
         : 648   learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
    0.00 :   10f0a:  cvttsd2si %xmm0,%eax
         : 649   max_learnts             *= learntsize_inc;
    0.00 :   10f0e:  movsd  0x280(%rdi),%xmm0
    0.00 :   10f16:  mulsd  0x80(%rdi),%xmm0
         : 648   learntsize_adjust_cnt    = (int)learntsize_adjust_confl;
    0.00 :   10f1e:  mov    %eax,0x290(%rdi)
         : 649   max_learnts             *= learntsize_inc;
    0.00 :   10f24:  movsd  %xmm0,0x280(%rdi)
         : 651   if (verbosity >= 1)
    0.00 :   10f2c:  test   %ecx,%ecx
    0.00 :   10f2e:  jle    10bd6 <Minisat::Solver::search(int)+0x56>
         : 654   Minisat::Solver::progressEstimate() const:
         :
         :
         : 713   double Solver::progressEstimate() const
         : 714   {
         : 715   double  progress = 0;
         : 716   double  F = 1.0 / nVars();
    0.00 :   10f34:  pxor   %xmm5,%xmm5
    0.00 :   10f38:  movsd  0x4468(%rip),%xmm6        # 153a8 <typeinfo name for Minisat::Solver+0xc8>
         : 719   Minisat::Solver::search(int):
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   10f40:  cvttsd2si %xmm0,%eax
         : 654   Minisat::Solver::progressEstimate() const:
         : 711   double  F = 1.0 / nVars();
    0.00 :   10f44:  cvtsi2sdl 0x1c8(%rdi),%xmm5
         : 713   Minisat::Solver::search(int):
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   10f4c:  mov    %eax,-0x88(%rbp)
         : 654   Minisat::Solver::progressEstimate() const:
         : 711   double  F = 1.0 / nVars();
    0.00 :   10f52:  divsd  %xmm5,%xmm6
    0.00 :   10f56:  movsd  %xmm5,-0x90(%rbp)
    0.00 :   10f5e:  movsd  %xmm6,-0x78(%rbp)
         :
         : 714   for (int i = 0; i <= decisionLevel(); i++){
    0.00 :   10f63:  test   %r15d,%r15d
    0.00 :   10f66:  js     113f1 <Minisat::Solver::search(int)+0x871>
    0.00 :   10f6c:  movslq %r15d,%rax
    0.00 :   10f6f:  xor    %r14d,%r14d
         : 710   double  progress = 0;
    0.00 :   10f72:  pxor   %xmm2,%xmm2
    0.00 :   10f76:  mov    %rax,-0x80(%rbp)
    0.00 :   10f7a:  jmp    10fd7 <Minisat::Solver::search(int)+0x457>
    0.00 :   10f7c:  nopl   0x0(%rax)
         : 715   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
         : 418   inline _GLIBCXX_CONSTEXPR
         : 419   typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
         : 420   pow(_Tp __x, _Up __y)
         : 421   {
         : 422   typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
         : 423   return pow(__type(__x), __type(__y));
    0.00 :   10f80:  pxor   %xmm1,%xmm1
         : 425   Minisat::Solver::progressEstimate() const:
         : 715   int beg = i == 0 ? 0 : trail_lim[i - 1];
         : 716   int end = i == decisionLevel() ? trail.size() : trail_lim[i];
    0.00 :   10f84:  mov    0x1b0(%rax),%rcx
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10f8b:  cvtsi2sd %r14d,%xmm1
         : 419   Minisat::Solver::progressEstimate() const:
    0.00 :   10f90:  mov    (%rcx,%r14,4),%ebx
         : 716   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10f94:  movsd  -0x78(%rbp),%xmm0
         : 419   Minisat::Solver::progressEstimate() const:
         : 716   progress += pow(F, i) * (end - beg);
    0.00 :   10f99:  sub    %r13d,%ebx
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10f9c:  call   2580 <pow@plt>
         : 419   Minisat::Solver::progressEstimate() const:
    0.00 :   10fa1:  movsd  -0x70(%rbp),%xmm2
         : 717   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10fa6:  movapd %xmm0,%xmm1
         : 419   Minisat::Solver::progressEstimate() const:
    0.00 :   10faa:  pxor   %xmm0,%xmm0
    0.00 :   10fae:  cvtsi2sd %ebx,%xmm0
    0.00 :   10fb2:  mulsd  %xmm1,%xmm0
    0.00 :   10fb6:  addsd  %xmm0,%xmm2
         : 713   for (int i = 0; i <= decisionLevel(); i++){
    0.00 :   10fba:  cmp    %r14,-0x80(%rbp)
    0.00 :   10fbe:  je     112f0 <Minisat::Solver::search(int)+0x770>
         : 714   int beg = i == 0 ? 0 : trail_lim[i - 1];
    0.00 :   10fc4:  mov    -0x68(%rbp),%rax
    0.00 :   10fc8:  mov    0x1b0(%rax),%rdx
    0.00 :   10fcf:  mov    (%rdx,%r14,4),%r13d
    0.00 :   10fd3:  add    $0x1,%r14
         : 719   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   10fd7:  mov    -0x68(%rbp),%rax
    0.00 :   10fdb:  movsd  %xmm2,-0x70(%rbp)
         : 66    Minisat::Solver::progressEstimate() const:
         : 715   int end = i == decisionLevel() ? trail.size() : trail_lim[i];
    0.00 :   10fe0:  cmp    %r14d,%r15d
    0.00 :   10fe3:  jne    10f80 <Minisat::Solver::search(int)+0x400>
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10fe5:  pxor   %xmm1,%xmm1
         : 419   Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   10fe9:  mov    0x1a8(%rax),%ebx
         : 64    __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   10fef:  cvtsi2sd %r15d,%xmm1
    0.00 :   10ff4:  jmp    10f94 <Minisat::Solver::search(int)+0x414>
    0.00 :   10ff6:  cs nopw 0x0(%rax,%rax,1)
         : 421   Minisat::Solver::search(int):
         : 660   if (nof_conflicts >= 0 && conflictC >= nof_conflicts || !withinBudget()){
    0.00 :   11000:  cmp    -0x84(%rbp),%r12d
    0.00 :   11007:  jae    11038 <Minisat::Solver::search(int)+0x4b8>
         : 663   Minisat::Solver::withinBudget() const:
         : 346   inline void     Solver::interrupt(){ asynch_interrupt = true; }
         : 347   inline void     Solver::clearInterrupt(){ asynch_interrupt = false; }
         : 348   inline void     Solver::budgetOff(){ conflict_budget = propagation_budget = -1; }
         : 349   inline bool     Solver::withinBudget() const {
         : 350   return !asynch_interrupt &&
         : 351   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.00 :   11009:  mov    -0x68(%rbp),%rcx
    0.96 :   1100d:  cmpb   $0x0,0x2a8(%rcx)
    3.26 :   11014:  jne    11038 <Minisat::Solver::search(int)+0x4b8>
    0.77 :   11016:  mov    0x298(%rcx),%rax
         : 345   return !asynch_interrupt &&
    0.00 :   1101d:  test   %rax,%rax
    0.00 :   11020:  js     111f0 <Minisat::Solver::search(int)+0x670>
         : 346   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.00 :   11026:  cmp    %rax,0xc0(%rcx)
    0.00 :   1102d:  jb     111f0 <Minisat::Solver::search(int)+0x670>
    0.00 :   11033:  nopl   0x0(%rax,%rax,1)
         : 350   Minisat::Solver::progressEstimate() const:
         : 711   double  F = 1.0 / nVars();
    0.00 :   11038:  mov    -0x68(%rbp),%rax
    0.00 :   1103c:  pxor   %xmm3,%xmm3
    0.00 :   11040:  movsd  0x4360(%rip),%xmm0        # 153a8 <typeinfo name for Minisat::Solver+0xc8>
    0.00 :   11048:  cvtsi2sdl 0x1c8(%rax),%xmm3
    0.00 :   11050:  divsd  %xmm3,%xmm0
    0.00 :   11054:  movsd  %xmm3,-0x80(%rbp)
    0.00 :   11059:  movsd  %xmm0,-0x78(%rbp)
         : 713   for (int i = 0; i <= decisionLevel(); i++){
    0.00 :   1105e:  test   %r15d,%r15d
    0.00 :   11061:  js     11577 <Minisat::Solver::search(int)+0x9f7>
    0.00 :   11067:  movslq %r15d,%r14
    0.00 :   1106a:  xor    %ebx,%ebx
         : 710   double  progress = 0;
    0.00 :   1106c:  pxor   %xmm2,%xmm2
         : 714   int beg = i == 0 ? 0 : trail_lim[i - 1];
    0.00 :   11070:  xor    %r13d,%r13d
    0.00 :   11073:  jmp    110cc <Minisat::Solver::search(int)+0x54c>
    0.00 :   11075:  nopl   (%rax)
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   11078:  pxor   %xmm1,%xmm1
         : 419   Minisat::Solver::progressEstimate() const:
         : 715   int end = i == decisionLevel() ? trail.size() : trail_lim[i];
    0.00 :   1107c:  mov    0x1b0(%rax),%rax
         : 717   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   11083:  movsd  -0x78(%rbp),%xmm0
    0.00 :   11088:  cvtsi2sd %ebx,%xmm1
         : 420   Minisat::Solver::progressEstimate() const:
    0.00 :   1108c:  mov    (%rax,%rbx,4),%r12d
         : 716   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   11090:  call   2580 <pow@plt>
         : 419   Minisat::Solver::progressEstimate() const:
         : 716   progress += pow(F, i) * (end - beg);
    0.00 :   11095:  mov    %r12d,%eax
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   11098:  movapd %xmm0,%xmm1
         : 419   Minisat::Solver::progressEstimate() const:
    0.00 :   1109c:  sub    %r13d,%eax
    0.00 :   1109f:  pxor   %xmm0,%xmm0
    0.00 :   110a3:  cvtsi2sd %eax,%xmm0
    0.00 :   110a7:  mulsd  %xmm1,%xmm0
    0.00 :   110ab:  movsd  -0x70(%rbp),%xmm2
    0.00 :   110b0:  addsd  %xmm0,%xmm2
         : 713   for (int i = 0; i <= decisionLevel(); i++){
    0.00 :   110b4:  cmp    %rbx,%r14
    0.00 :   110b7:  je     11110 <Minisat::Solver::search(int)+0x590>
         : 714   int beg = i == 0 ? 0 : trail_lim[i - 1];
    0.00 :   110b9:  mov    -0x68(%rbp),%rax
    0.00 :   110bd:  mov    0x1b0(%rax),%rax
    0.00 :   110c4:  mov    (%rax,%rbx,4),%r13d
    0.00 :   110c8:  add    $0x1,%rbx
         : 719   Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   110cc:  mov    -0x68(%rbp),%rax
    0.00 :   110d0:  movsd  %xmm2,-0x70(%rbp)
         : 65    Minisat::Solver::progressEstimate() const:
         : 715   int end = i == decisionLevel() ? trail.size() : trail_lim[i];
    0.00 :   110d5:  cmp    %ebx,%r15d
    0.00 :   110d8:  jne    11078 <Minisat::Solver::search(int)+0x4f8>
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   110da:  pxor   %xmm1,%xmm1
    0.00 :   110de:  movsd  -0x78(%rbp),%xmm0
         : 420   Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   110e3:  mov    0x1a8(%rax),%r12d
         : 64    __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   110ea:  cvtsi2sd %r15d,%xmm1
         : 419   Minisat::Solver::progressEstimate() const:
         : 716   progress += pow(F, i) * (end - beg);
    0.00 :   110ef:  sub    %r13d,%r12d
         : 718   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   110f2:  call   2580 <pow@plt>
    0.00 :   110f7:  movapd %xmm0,%xmm1
         : 420   Minisat::Solver::progressEstimate() const:
    0.00 :   110fb:  pxor   %xmm0,%xmm0
    0.00 :   110ff:  cvtsi2sd %r12d,%xmm0
    0.00 :   11104:  jmp    110a7 <Minisat::Solver::search(int)+0x527>
    0.00 :   11106:  cs nopw 0x0(%rax,%rax,1)
         : 720   Minisat::Solver::search(int):
         : 662   progress_estimate = progressEstimate();
    0.00 :   11110:  mov    -0x68(%rbp),%rax
         : 664   Minisat::Solver::progressEstimate() const:
         : 719   }
         :
         : 721   return progress / nVars();
    0.00 :   11114:  divsd  -0x80(%rbp),%xmm2
         : 723   Minisat::Solver::search(int):
         : 662   progress_estimate = progressEstimate();
    0.00 :   11119:  movsd  %xmm2,0x218(%rax)
         : 664   Minisat::Solver::cancelUntil(int):
         : 208   if (decisionLevel() > level){
    0.00 :   11121:  test   %r15d,%r15d
    0.00 :   11124:  jle    11130 <Minisat::Solver::search(int)+0x5b0>
    0.00 :   11126:  xor    %esi,%esi
    0.00 :   11128:  mov    %rax,%rdi
    0.00 :   1112b:  call   e9d0 <Minisat::Solver::cancelUntil(int) [clone .part.0]>
         : 214   Minisat::lbool::lbool(unsigned char):
         : 92    explicit lbool(uint8_t v) : value(v) { }
    0.00 :   11130:  mov    -0x50(%rbp),%rdi
         : 94    Minisat::Solver::search(int):
    0.00 :   11134:  mov    $0x2,%r12d
         : 93    Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   if (data != NULL){
    0.00 :   1113a:  test   %rdi,%rdi
    0.00 :   1113d:  je     11144 <Minisat::Solver::search(int)+0x5c4>
         : 125   if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   1113f:  call   2440 <free@plt>
         : 127   Minisat::Solver::search(int):
         : 705   }
    0.00 :   11144:  mov    -0x38(%rbp),%rax
    0.00 :   11148:  sub    %fs:0x28,%rax
    0.00 :   11151:  jne    11671 <Minisat::Solver::search(int)+0xaf1>
    0.00 :   11157:  lea    -0x28(%rbp),%rsp
    0.00 :   1115b:  mov    %r12d,%eax
    0.00 :   1115e:  pop    %rbx
    0.00 :   1115f:  pop    %r12
    0.00 :   11161:  pop    %r13
    0.00 :   11163:  pop    %r14
    0.00 :   11165:  pop    %r15
    0.00 :   11167:  pop    %rbp
    0.00 :   11168:  ret
    0.00 :   11169:  nopl   0x0(%rax)
         : 719   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   11170:  mov    -0x50(%rbp),%rax
         : 89    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   11174:  mov    -0x68(%rbp),%rbx
    0.00 :   11178:  mov    (%rax),%edx
    0.00 :   1117a:  mov    0x170(%rbx),%rcx
         : 90    Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   11181:  mov    %edx,%eax
         : 64    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   11183:  mov    %edx,%esi
         : 101   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   11185:  sar    %eax
         : 64    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   11187:  and    $0x1,%esi
         : 101   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   1118a:  cltq
    0.00 :   1118c:  add    %rax,%rcx
         : 88    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431   assert(value(p) == l_Undef);
    0.00 :   1118f:  testb  $0x2,(%rcx)
    0.00 :   11192:  je     11614 <Minisat::Solver::search(int)+0xa94>
         : 432   assigns[var(p)] = lbool(!sign(p));
    0.00 :   11198:  mov    %sil,(%rcx)
         : 434   Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   1119b:  mov    0x1c0(%rbx),%rcx
         : 89    Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   111a2:  mov    0x1b8(%rbx),%r15d
         : 65    Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   111a9:  lea    (%rcx,%rax,8),%rax
         : 89    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 433   vardata[var(p)] = mkVarData(from, decisionLevel());
    0.00 :   111ad:  movl   $0xffffffff,(%rax)
    0.00 :   111b3:  mov    %r15d,0x4(%rax)
         : 436   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75    void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.00 :   111b7:  movslq 0x1a8(%rbx),%rax
    0.00 :   111be:  cmp    0x1ac(%rbx),%eax
    0.00 :   111c4:  jl     10e7e <Minisat::Solver::search(int)+0x2fe>
    0.00 :   111ca:  lea    0x3817(%rip),%rcx        # 149e8 <Minisat::lit_Undef+0x290>
    0.00 :   111d1:  mov    $0x4b,%edx
    0.00 :   111d6:  lea    0x32f5(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   111dd:  lea    0x3f89(%rip),%rdi        # 1516d <Minisat::lit_Undef+0xa15>
    0.00 :   111e4:  call   23b0 <__assert_fail@plt>
    0.00 :   111e9:  nopl   0x0(%rax)
         : 85    Minisat::Solver::withinBudget() const:
         : 347   (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
    0.00 :   111f0:  mov    -0x68(%rbp),%rcx
    0.00 :   111f4:  mov    0x2a0(%rcx),%rax
         : 346   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.38 :   111fb:  test   %rax,%rax
    0.19 :   111fe:  js     1120d <Minisat::Solver::search(int)+0x68d>
         : 347   (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
    0.00 :   11200:  cmp    %rax,0xb8(%rcx)
    0.00 :   11207:  jae    11038 <Minisat::Solver::search(int)+0x4b8>
         : 350   Minisat::Solver::search(int):
         : 667   if (decisionLevel() == 0 && !simplify())
    0.00 :   1120d:  test   %r15d,%r15d
    0.00 :   11210:  je     1146b <Minisat::Solver::search(int)+0x8eb>
         : 670   if (learnts.size()-nAssigns() >= max_learnts)
    0.00 :   11216:  mov    -0x68(%rbp),%rcx
    0.00 :   1121a:  pxor   %xmm0,%xmm0
    0.00 :   1121e:  mov    0x110(%rcx),%eax
    0.38 :   11224:  sub    0x1a8(%rcx),%eax
    0.00 :   1122a:  cvtsi2sd %eax,%xmm0
    4.99 :   1122e:  comisd 0x280(%rcx),%xmm0
    3.63 :   11236:  jae    1145e <Minisat::Solver::search(int)+0x8de>
         : 678   Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    2.30 :   1123c:  mov    -0x68(%rbp),%rcx
    0.00 :   11240:  movslq 0x1b8(%rcx),%rax
         : 66    Minisat::Solver::newDecisionLevel():
         : 317   inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
    0.00 :   11247:  lea    0x1b0(%rcx),%r13
         : 319   Minisat::Solver::search(int):
         : 675   while (decisionLevel() < assumptions.size()){
    0.00 :   1124e:  cmp    0x1e8(%rcx),%eax
    0.00 :   11254:  jl     1128a <Minisat::Solver::search(int)+0x70a>
    0.00 :   11256:  jmp    114b9 <Minisat::Solver::search(int)+0x939>
    0.00 :   1125b:  nopl   0x0(%rax,%rax,1)
         : 680   Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   11260:  mov    -0x68(%rbp),%rsi
    0.00 :   11264:  add    $0x1,%eax
    0.00 :   11267:  mov    0x1b0(%rsi),%rdx
    0.00 :   1126e:  mov    %eax,0x1b8(%rsi)
    0.00 :   11274:  mov    %ebx,(%rdx,%rcx,4)
         : 80    Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   11277:  movslq 0x1b8(%rsi),%rax
         : 65    Minisat::Solver::search(int):
    0.00 :   1127e:  cmp    %eax,0x1e8(%rsi)
    0.00 :   11284:  jle    114b9 <Minisat::Solver::search(int)+0x939>
         : 677   Lit p = assumptions[decisionLevel()];
    0.00 :   1128a:  mov    -0x68(%rbp),%rdi
         : 679   Minisat::vec<Minisat::Lit>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   1128e:  movslq %eax,%rcx
         : 89    Minisat::Solver::search(int):
    0.00 :   11291:  mov    0x1e0(%rdi),%rdx
         : 678   Minisat::lbool::operator^(bool) const:
    0.00 :   11298:  mov    0x170(%rdi),%rsi
         : 100   Minisat::Solver::search(int):
    0.00 :   1129f:  mov    (%rdx,%rcx,4),%ebx
         : 678   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   112a2:  mov    %ebx,%edx
    0.00 :   112a4:  sar    %edx
         : 65    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   112a6:  movslq %edx,%rdx
         : 88    Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   112a9:  movzbl (%rsi,%rdx,1),%edx
         : 101   Minisat::sign(Minisat::Lit):
         : 61    inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   112ad:  mov    %ebx,%esi
    0.00 :   112af:  and    $0x1,%esi
         : 64    Minisat::Solver::search(int):
         : 678   if (value(p) == l_True){
    0.00 :   112b2:  cmp    %sil,%dl
    0.00 :   112b5:  jne    114a9 <Minisat::Solver::search(int)+0x929>
         : 681   Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   112bb:  mov    0x1a8(%rdi),%ebx
         : 65    Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   112c1:  cmp    %eax,0x1bc(%rdi)
    0.00 :   112c7:  jne    11260 <Minisat::Solver::search(int)+0x6e0>
    0.00 :   112c9:  lea    0x1(%rax),%esi
    0.00 :   112cc:  mov    %r13,%rdi
    0.00 :   112cf:  call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   112d4:  mov    -0x68(%rbp),%rax
    0.00 :   112d8:  movslq 0x1b8(%rax),%rcx
    0.00 :   112df:  mov    %rcx,%rax
    0.00 :   112e2:  jmp    11260 <Minisat::Solver::search(int)+0x6e0>
    0.00 :   112e7:  nopw   0x0(%rax,%rax,1)
         : 85    Minisat::vec<unsigned int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   112f0:  mov    -0x68(%rbp),%rax
         : 65    Minisat::Solver::search(int):
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   112f4:  movsd  0x403c(%rip),%xmm1        # 15338 <typeinfo name for Minisat::Solver+0x58>
         : 654   Minisat::Solver::progressEstimate() const:
         : 719   return progress / nVars();
    0.00 :   112fc:  divsd  -0x90(%rbp),%xmm2
         : 721   Minisat::vec<unsigned int>::size() const:
    0.00 :   11304:  mov    0x110(%rax),%edx
         : 64    Minisat::Solver::search(int):
         : 655   (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
    0.00 :   1130a:  mov    0xd8(%rax),%rax
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   11311:  mulsd  %xmm2,%xmm1
         : 655   (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
    0.00 :   11315:  test   %rax,%rax
    0.00 :   11318:  js     1148b <Minisat::Solver::search(int)+0x90b>
    0.00 :   1131e:  pxor   %xmm0,%xmm0
    0.00 :   11322:  cvtsi2sd %rax,%xmm0
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   11327:  pxor   %xmm2,%xmm2
    0.00 :   1132b:  mov    -0x68(%rbp),%rax
    0.00 :   1132f:  cvtsi2sd %edx,%xmm2
    0.00 :   11333:  mov    0xd0(%rax),%r9d
         : 657   Minisat::vec<unsigned int>::size() const:
    0.00 :   1133a:  mov    0x100(%rax),%r8d
         : 64    Minisat::Solver::search(int):
    0.00 :   11341:  mov    0xc8(%rax),%ecx
    0.00 :   11347:  divsd  %xmm2,%xmm0
         : 654   (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals,
    0.00 :   1134b:  test   %r15d,%r15d
    0.00 :   1134e:  jne    1144c <Minisat::Solver::search(int)+0x8cc>
         : 657   Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   11354:  mov    0x1a8(%rax),%eax
         : 64    Minisat::Solver::search(int):
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   1135a:  sub    %eax,%ecx
         : 112   }
         :
         : 114   __fortify_function int
         : 115   printf (const char *__restrict __fmt, ...)
         : 116   {
         : 117   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   1135c:  mov    -0x88(%rbp),%eax
         : 119   printf():
    0.00 :   11362:  push   %rdx
    0.00 :   11363:  lea    0x3abe(%rip),%rsi        # 14e28 <Minisat::lit_Undef+0x6d0>
    0.00 :   1136a:  mov    $0x1,%edi
    0.00 :   1136f:  push   %rax
    0.00 :   11370:  mov    -0x68(%rbp),%rax
    0.00 :   11374:  mov    0xc0(%rax),%edx
    0.00 :   1137a:  mov    $0x2,%eax
    0.00 :   1137f:  call   2320 <__printf_chk@plt>
    0.00 :   11384:  pop    %rax
    0.00 :   11385:  pop    %rdx
    0.00 :   11386:  jmp    10bd6 <Minisat::Solver::search(int)+0x56>
    0.00 :   1138b:  nopl   0x0(%rax,%rax,1)
         : 124   Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   11390:  lea    0x1(%rax),%esi
         : 76    Minisat::Solver::search(int):
         : 637   learnts.push(cr);
    0.00 :   11393:  lea    0x108(%rcx),%rdi
    0.00 :   1139a:  mov    %rcx,%r14
         : 640   Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   1139d:  call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   113a2:  movslq 0x110(%r14),%rax
    0.00 :   113a9:  jmp    10d24 <Minisat::Solver::search(int)+0x1a4>
    0.00 :   113ae:  xchg   %ax,%ax
         : 78    Minisat::Clause::calcAbstraction():
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   113b0:  test   %r15d,%r15d
    0.00 :   113b3:  je     113e4 <Minisat::Solver::search(int)+0x864>
    0.00 :   113b5:  lea    -0x1(%r15),%edx
    0.00 :   113b9:  lea    0x4(%rsi),%rax
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   113bd:  mov    $0x1,%edi
    0.00 :   113c2:  lea    0x8(%rsi,%rdx,4),%r9
    0.00 :   113c7:  nopw   0x0(%rax,%rax,1)
         : 162   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   113d0:  mov    (%rax),%ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   113d2:  mov    %edi,%edx
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   113d4:  add    $0x4,%rax
         : 159   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   113d8:  sar    %ecx
         : 64    Minisat::Clause::calcAbstraction():
         : 158   abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   113da:  shl    %cl,%edx
    0.00 :   113dc:  or     %edx,%r8d
         : 157   for (int i = 0; i < size(); i++)
    0.00 :   113df:  cmp    %rax,%r9
    0.00 :   113e2:  jne    113d0 <Minisat::Solver::search(int)+0x850>
         : 159   data[header.size].abs = abstraction;  }
    0.00 :   113e4:  movslq %r15d,%r15
    0.00 :   113e7:  mov    %r8d,0x4(%rsi,%r15,4)
    0.00 :   113ec:  jmp    10d0d <Minisat::Solver::search(int)+0x18d>
         : 163   Minisat::vec<unsigned int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   113f1:  mov    -0x68(%rbp),%rax
         : 65    Minisat::Solver::progressEstimate() const:
         : 719   return progress / nVars();
    0.00 :   113f5:  pxor   %xmm1,%xmm1
    0.00 :   113f9:  divsd  -0x90(%rbp),%xmm1
         : 722   Minisat::Solver::search(int):
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   11401:  mulsd  0x3f2f(%rip),%xmm1        # 15338 <typeinfo name for Minisat::Solver+0x58>
         : 654   Minisat::vec<unsigned int>::size() const:
    0.00 :   11409:  mov    0x110(%rax),%edx
         : 64    Minisat::Solver::search(int):
         : 655   (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
    0.00 :   1140f:  mov    0xd8(%rax),%rax
    0.00 :   11416:  test   %rax,%rax
    0.00 :   11419:  js     115ab <Minisat::Solver::search(int)+0xa2b>
    0.00 :   1141f:  pxor   %xmm0,%xmm0
    0.00 :   11423:  cvtsi2sd %rax,%xmm0
         : 652   printf("| %9d | %7d %8d %8d | %8d %8d %6.0f | %6.3f %% |\n",
    0.00 :   11428:  pxor   %xmm2,%xmm2
    0.00 :   1142c:  mov    -0x68(%rbp),%rax
    0.00 :   11430:  cvtsi2sd %edx,%xmm2
    0.00 :   11434:  mov    0xd0(%rax),%r9d
         : 657   Minisat::vec<unsigned int>::size() const:
    0.00 :   1143b:  mov    0x100(%rax),%r8d
         : 64    Minisat::Solver::search(int):
    0.00 :   11442:  mov    0xc8(%rax),%ecx
    0.00 :   11448:  divsd  %xmm2,%xmm0
         : 654   (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]), nClauses(), (int)clauses_literals,
    0.00 :   1144c:  mov    -0x68(%rbp),%rax
    0.00 :   11450:  mov    0x1b0(%rax),%rax
    0.00 :   11457:  mov    (%rax),%eax
    0.00 :   11459:  jmp    1135a <Minisat::Solver::search(int)+0x7da>
    0.00 :   1145e:  mov    %rcx,%rdi
         : 672   reduceDB();
    0.00 :   11461:  call   10960 <Minisat::Solver::reduceDB()>
    0.00 :   11466:  jmp    1123c <Minisat::Solver::search(int)+0x6bc>
         : 667   if (decisionLevel() == 0 && !simplify())
    0.00 :   1146b:  mov    -0x68(%rbp),%rdi
    0.00 :   1146f:  call   f8d0 <Minisat::Solver::simplify()>
    0.00 :   11474:  test   %al,%al
    0.00 :   11476:  jne    11216 <Minisat::Solver::search(int)+0x696>
    0.00 :   1147c:  mov    -0x50(%rbp),%rdi
         : 673   Minisat::Solver::progressEstimate() const:
         : 714   int beg = i == 0 ? 0 : trail_lim[i - 1];
    0.00 :   11480:  mov    $0x1,%r12d
    0.00 :   11486:  jmp    1113a <Minisat::Solver::search(int)+0x5ba>
         : 717   Minisat::Solver::search(int):
         : 655   (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
    0.00 :   1148b:  mov    %rax,%rcx
    0.00 :   1148e:  and    $0x1,%eax
    0.00 :   11491:  pxor   %xmm0,%xmm0
    0.00 :   11495:  shr    %rcx
    0.00 :   11498:  or     %rax,%rcx
    0.00 :   1149b:  cvtsi2sd %rcx,%xmm0
    0.00 :   114a0:  addsd  %xmm0,%xmm0
    0.00 :   114a4:  jmp    11327 <Minisat::Solver::search(int)+0x7a7>
         : 664   Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   114a9:  xor    %esi,%edx
         : 101   Minisat::Solver::search(int):
         : 681   }else if (value(p) == l_False){
    0.00 :   114ab:  cmp    $0x1,%dl
    0.00 :   114ae:  je     11633 <Minisat::Solver::search(int)+0xab3>
         : 690   if (next == lit_Undef){
    0.00 :   114b4:  cmp    $0xfffffffe,%ebx
    0.00 :   114b7:  jne    114e3 <Minisat::Solver::search(int)+0x963>
         : 692   decisions++;
    0.00 :   114b9:  mov    -0x68(%rbp),%rax
    0.00 :   114bd:  addq   $0x1,0xa8(%rax)
         : 693   next = pickBranchLit();
    0.00 :   114c5:  mov    %rax,%rdi
    0.38 :   114c8:  call   c990 <Minisat::Solver::pickBranchLit()>
    0.00 :   114cd:  mov    %eax,%ebx
         : 695   if (next == lit_Undef)
    0.38 :   114cf:  cmp    $0xfffffffe,%eax
    0.19 :   114d2:  je     11646 <Minisat::Solver::search(int)+0xac6>
         : 698   Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   114d8:  mov    -0x68(%rbp),%rax
    0.19 :   114dc:  movslq 0x1b8(%rax),%rax
         : 77    Minisat::vec<Minisat::Lit>::size() const:
         : 63    int      size     (void) const     { return sz; }
    1.73 :   114e3:  mov    -0x68(%rbp),%rcx
    0.00 :   114e7:  mov    0x1a8(%rcx),%r13d
         : 66    Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.77 :   114ee:  cmp    %eax,0x1bc(%rcx)
    0.57 :   114f4:  je     1158d <Minisat::Solver::search(int)+0xa0d>
    0.00 :   114fa:  mov    -0x68(%rbp),%rsi
    0.19 :   114fe:  lea    0x1(%rax),%ecx
    0.00 :   11501:  mov    0x1b0(%rsi),%rdx
    0.00 :   11508:  mov    %ecx,0x1b8(%rsi)
         : 81    Minisat::lbool::operator^(bool) const:
    1.34 :   1150e:  mov    %ebx,%ecx
    0.00 :   11510:  and    $0x1,%ecx
         : 101   Minisat::vec<int>::push(int const&):
    0.00 :   11513:  mov    %r13d,(%rdx,%rax,4)
         : 75    Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    3.27 :   11517:  mov    %ebx,%eax
         : 64    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   11519:  mov    0x170(%rsi),%rdx
         : 88    Minisat::var(Minisat::Lit):
    0.00 :   11520:  sar    %eax
         : 63    Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   11522:  cltq
    0.00 :   11524:  add    %rax,%rdx
         : 88    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431   assert(value(p) == l_Undef);
    0.00 :   11527:  testb  $0x2,(%rdx)
    0.96 :   1152a:  je     11614 <Minisat::Solver::search(int)+0xa94>
         : 432   assigns[var(p)] = lbool(!sign(p));
    0.00 :   11530:  mov    %cl,(%rdx)
         : 434   Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   11532:  mov    0x1c0(%rsi),%rcx
         : 89    Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.19 :   11539:  mov    0x1b8(%rsi),%edx
         : 65    Minisat::vec<Minisat::Solver::VarData>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    1.54 :   1153f:  lea    (%rcx,%rax,8),%rax
         : 89    Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 433   vardata[var(p)] = mkVarData(from, decisionLevel());
    0.00 :   11543:  movl   $0xffffffff,(%rax)
    0.95 :   11549:  mov    %edx,0x4(%rax)
         : 436   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75    void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.19 :   1154c:  movslq 0x1a8(%rsi),%rax
    0.00 :   11553:  cmp    0x1ac(%rsi),%eax
    0.00 :   11559:  jge    111ca <Minisat::Solver::search(int)+0x64a>
    0.00 :   1155f:  mov    0x1a0(%rsi),%rdx
    0.00 :   11566:  lea    0x1(%rax),%ecx
    0.00 :   11569:  mov    %ecx,0x1a8(%rsi)
    0.19 :   1156f:  mov    %ebx,(%rdx,%rax,4)
         : 83    Minisat::Solver::search(int):
    0.19 :   11572:  jmp    10bd6 <Minisat::Solver::search(int)+0x56>
         : 76    Minisat::Solver::progressEstimate() const:
         : 719   return progress / nVars();
    0.00 :   11577:  pxor   %xmm0,%xmm0
    0.00 :   1157b:  divsd  -0x80(%rbp),%xmm0
         : 722   Minisat::Solver::search(int):
         : 662   progress_estimate = progressEstimate();
    0.00 :   11580:  movsd  %xmm0,0x218(%rax)
         : 664   Minisat::Solver::cancelUntil(int):
         : 208   if (decisionLevel() > level){
    0.00 :   11588:  jmp    11130 <Minisat::Solver::search(int)+0x5b0>
         : 210   Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   1158d:  lea    0x1(%rax),%esi
         : 76    Minisat::Solver::newDecisionLevel():
    0.00 :   11590:  lea    0x1b0(%rcx),%rdi
    0.00 :   11597:  mov    %rcx,%r14
         : 319   Minisat::vec<int>::push(int const&):
    0.00 :   1159a:  call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   1159f:  movslq 0x1b8(%r14),%rax
    0.00 :   115a6:  jmp    114fa <Minisat::Solver::search(int)+0x97a>
         : 77    Minisat::Solver::search(int):
         : 655   (int)max_learnts, nLearnts(), (double)learnts_literals/nLearnts(), progressEstimate()*100);
    0.00 :   115ab:  mov    %rax,%rcx
    0.00 :   115ae:  and    $0x1,%eax
    0.00 :   115b1:  pxor   %xmm0,%xmm0
    0.00 :   115b5:  shr    %rcx
    0.00 :   115b8:  or     %rax,%rcx
    0.00 :   115bb:  cvtsi2sd %rcx,%xmm0
    0.00 :   115c0:  addsd  %xmm0,%xmm0
    0.00 :   115c4:  jmp    11428 <Minisat::Solver::search(int)+0x8a8>
    0.00 :   115c9:  movsd  0x3d3f(%rip),%xmm1        # 15310 <typeinfo name for Minisat::Solver+0x30>
    0.00 :   115d1:  jmp    10e15 <Minisat::Solver::search(int)+0x295>
         : 666   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   115d6:  lea    0x245b(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   115dd:  mov    $0x3f,%edx
    0.00 :   115e2:  lea    0x2431(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   115e9:  lea    0x2e28(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   115f0:  call   23b0 <__assert_fail@plt>
         : 68    Minisat::Clause::activity():
         : 181   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   115f5:  lea    0x2564(%rip),%rcx        # 13b60 <typeinfo name for Minisat::BoolOption+0x250>
    0.00 :   115fc:  mov    $0xb5,%edx
    0.00 :   11601:  lea    0x2e21(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   11608:  lea    0x2f38(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   1160f:  call   23b0 <__assert_fail@plt>
         : 187   Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431   assert(value(p) == l_Undef);
    0.00 :   11614:  lea    0x3385(%rip),%rcx        # 149a0 <Minisat::lit_Undef+0x248>
    0.00 :   1161b:  mov    $0x1af,%edx
    0.00 :   11620:  lea    0x3b20(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   11627:  lea    0x3b2b(%rip),%rdi        # 15159 <Minisat::lit_Undef+0xa01>
    0.00 :   1162e:  call   23b0 <__assert_fail@plt>
         : 437   Minisat::operator~(Minisat::Lit):
         : 59    inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   11633:  xor    $0x1,%ebx
         : 61    Minisat::Solver::search(int):
         : 682   analyzeFinal(~p, conflict);
    0.00 :   11636:  lea    0x18(%rdi),%rdx
         : 684   Minisat::operator~(Minisat::Lit):
    0.00 :   1163a:  mov    %ebx,%esi
         : 60    Minisat::Solver::search(int):
    0.00 :   1163c:  call   ce30 <Minisat::Solver::analyzeFinal(Minisat::Lit, Minisat::vec<Minisat::Lit>&)>
    0.00 :   11641:  jmp    1147c <Minisat::Solver::search(int)+0x8fc>
    0.00 :   11646:  mov    -0x50(%rbp),%rdi
    0.00 :   1164a:  xor    %r12d,%r12d
    0.00 :   1164d:  jmp    1113a <Minisat::Solver::search(int)+0x5ba>
         : 687   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   11652:  lea    0x2477(%rip),%rcx        # 13ad0 <typeinfo name for Minisat::BoolOption+0x1c0>
    0.00 :   11659:  mov    $0x42,%edx
    0.00 :   1165e:  lea    0x23b5(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   11665:  lea    0x2dac(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   1166c:  call   23b0 <__assert_fail@plt>
         : 72    Minisat::Solver::search(int):
         : 705   }
    0.00 :   11671:  call   2410 <__stack_chk_fail@plt>
         : 707   Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 114   assert(size > 0);
    0.00 :   11676:  lea    0x230b(%rip),%rcx        # 13988 <typeinfo name for Minisat::BoolOption+0x78>
    0.00 :   1167d:  mov    $0x72,%edx
    0.00 :   11682:  lea    0x2391(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   11689:  lea    0x2399(%rip),%rdi        # 13a29 <typeinfo name for Minisat::BoolOption+0x119>
    0.00 :   11690:  call   23b0 <__assert_fail@plt>
         : 120   Minisat::Solver::search(int):
         : 616   assert(ok);
    0.00 :   11695:  lea    0x375c(%rip),%rcx        # 14df8 <Minisat::lit_Undef+0x6a0>
    0.00 :   1169c:  mov    $0x268,%edx
    0.00 :   116a1:  lea    0x3a9f(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   116a8:  lea    0x3b51(%rip),%rdi        # 15200 <Minisat::lit_Undef+0xaa8>
    0.00 :   116af:  call   23b0 <__assert_fail@plt>
    0.00 :   116b4:  endbr64
    0.00 :   116b8:  jmp    2a1b <Minisat::Solver::search(int) [clone .cold]+0x1f>
 Percent |	Source code & Disassembly of minisat for cycles:u (356 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000012410 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)>:
         : 6     Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
         : 300   dirties.clear();
         : 301   }
         :
         :
         : 304   template<class Idx, class Vec, class Deleted>
         : 305   void OccLists<Idx,Vec,Deleted>::clean(const Idx& idx)
    0.00 :   12410:  endbr64
    0.00 :   12414:  push   %r14
    0.00 :   12416:  mov    %rdi,%r10
    0.00 :   12419:  push   %rbp
    0.28 :   1241a:  push   %rbx
    0.00 :   1241b:  mov    %rsi,%rbx
         : 312   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87    const T& last  (void) const        { return data[sz-1]; }
         : 88    T&       last  (void)              { return data[sz-1]; }
         :
         : 90    // Vector interface:
         : 91    const T& operator [] (int index) const { return data[index]; }
         : 92    T&       operator [] (int index)       { return data[index]; }
    0.00 :   1241e:  movslq (%rsi),%rsi
    0.00 :   12421:  mov    %rsi,%r8
    0.00 :   12424:  shl    $0x4,%r8
    0.00 :   12428:  add    (%rdi),%r8
         : 97    Minisat::vec<Minisat::Solver::Watcher>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.28 :   1242b:  mov    0x8(%r8),%ecx
         : 65    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
         : 304   {
         : 305   Vec& vec = occs[toInt(idx)];
         : 306   int  i, j;
         : 307   for (i = j = 0; i < vec.size(); i++)
    3.94 :   1242f:  test   %ecx,%ecx
    0.28 :   12431:  jle    124a8 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x98>
    0.00 :   12433:  mov    0x30(%rdi),%r9
         : 311   Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   12437:  mov    (%r8),%rsi
    0.56 :   1243a:  lea    0x1(%rcx),%ebp
         : 90    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int) const:
         : 64    Ref      alloc     (int size);
         : 65    void     free      (int size)    { wasted_ += size; }
         :
         : 67    // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
         : 69    const T& operator[](Ref r) const { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   1243d:  mov    $0x1,%eax
         : 71    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
    0.00 :   12442:  xor    %edi,%edi
         : 305   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int) const:
    0.00 :   12444:  mov    0x8(%r9),%r11d
    0.00 :   12448:  nopl   0x0(%rax,%rax,1)
         : 66    Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
    0.00 :   12450:  mov    -0x8(%rsi,%rax,8),%edx
         : 88    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int) const:
   21.35 :   12454:  cmp    %r11d,%edx
    0.00 :   12457:  jae    124c9 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0xb9>
         : 66    Minisat::Clause::mark() const:
         : 167   uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   12459:  mov    (%r9),%r14
    0.28 :   1245c:  movzbl (%r14,%rdx,4),%edx
   23.33 :   12461:  and    $0x3,%edx
         : 171   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
         : 305   if (!deleted(vec[i]))
    0.00 :   12464:  cmp    $0x1,%dl
    3.09 :   12467:  je     12478 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x68>
         : 306   vec[j++] = vec[i];
    0.00 :   12469:  mov    -0x8(%rsi,%rax,8),%r14
         : 308   Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
   13.48 :   1246e:  movslq %edi,%rdx
         : 88    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
    0.28 :   12471:  add    $0x1,%edi
    0.56 :   12474:  mov    %r14,(%rsi,%rdx,8)
         : 304   for (i = j = 0; i < vec.size(); i++)
    1.97 :   12478:  mov    %eax,%edx
   15.97 :   1247a:  add    $0x1,%rax
    3.09 :   1247e:  cmp    %rbp,%rax
    2.80 :   12481:  jne    12450 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x40>
         : 307   vec.shrink(i - j);
    0.00 :   12483:  sub    %edi,%edx
         : 309   Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64    void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    3.38 :   12485:  cmp    %ecx,%edx
    0.28 :   12487:  jg     124aa <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x9a>
         : 67    Minisat::vec<char>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   12489:  movslq (%rbx),%rsi
         : 89    Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
         : 64    void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    1.41 :   1248c:  test   %edx,%edx
    0.00 :   1248e:  jle    12498 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x88>
    0.00 :   12490:  mov    %ecx,%eax
    0.00 :   12492:  sub    %edx,%eax
    0.00 :   12494:  mov    %eax,0x8(%r8)
         : 70    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&):
         : 308   dirty[toInt(idx)] = 0;
    0.27 :   12498:  mov    0x10(%r10),%rax
    0.00 :   1249c:  movb   $0x0,(%rax,%rsi,1)
         : 309   }
    3.09 :   124a0:  pop    %rbx
    0.00 :   124a1:  pop    %rbp
    0.00 :   124a2:  pop    %r14
    0.00 :   124a4:  ret
    0.00 :   124a5:  nopl   (%rax)
         : 315   Minisat::vec<Minisat::Solver::Watcher>::shrink(int):
    0.00 :   124a8:  je     12498 <Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::clean(Minisat::Lit const&)+0x88>
    0.00 :   124aa:  lea    0x2de7(%rip),%rcx        # 15298 <Minisat::lit_Undef+0xb40>
    0.00 :   124b1:  mov    $0x40,%edx
    0.00 :   124b6:  lea    0x2015(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   124bd:  lea    0x224e(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   124c4:  call   23b0 <__assert_fail@plt>
         : 70    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int) const:
    0.00 :   124c9:  lea    0x2160(%rip),%rcx        # 14630 <typeinfo name for Minisat::BoolOption+0xd20>
    0.00 :   124d0:  mov    $0x40,%edx
    0.00 :   124d5:  lea    0x153e(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   124dc:  lea    0x1f35(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   124e3:  call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (140 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000de80 <Minisat::Solver::removeClause(unsigned int)>:
         : 6    Minisat::Solver::removeClause(unsigned int):
         :
         : 189  if (c.learnt()) learnts_literals -= c.size();
         : 190  else            clauses_literals -= c.size(); }
         :
         :
         : 193  void Solver::removeClause(CRef cr) {
    1.44 :   de80:   endbr64
    0.71 :   de84:   push   %r13
    1.43 :   de86:   push   %r12
    1.43 :   de88:   push   %rbp
    2.71 :   de89:   push   %rbx
    0.00 :   de8a:   sub    $0x8,%rsp
         : 200  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   de8e:   cmp    0x230(%rdi),%esi
    0.00 :   de94:   jae    df5e <Minisat::Solver::removeClause(unsigned int)+0xde>
    0.00 :   de9a:   mov    0x228(%rdi),%r13
    0.00 :   dea1:   mov    %esi,%ebp
         : 73   Minisat::Solver::removeClause(unsigned int):
         : 190  Clause& c = ca[cr];
         : 191  detachClause(cr);
    0.00 :   dea3:   xor    %edx,%edx
    0.72 :   dea5:   mov    %rdi,%rbx
         : 194  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.72 :   dea8:   shl    $0x2,%rbp
    0.71 :   deac:   mov    %esi,%r12d
         : 65   Minisat::Solver::removeClause(unsigned int):
    0.00 :   deaf:   call   dbd0 <Minisat::Solver::detachClause(unsigned int, bool)>
         : 191  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    2.87 :   deb4:   add    %rbp,%r13
         : 64   Minisat::lbool::operator^(bool) const:
         : 99   lbool()       : value(0) { }
         : 100  explicit lbool(bool x) : value(!x) { }
         :
         : 102  bool  operator == (lbool b) const { return ((b.value&2) & (value&2)) | (!(b.value&2)&(value == b.value)); }
         : 103  bool  operator != (lbool b) const { return !(*this == b); }
         : 104  lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.72 :   deb7:   mov    0x170(%rbx),%rcx
         : 106  Minisat::Clause::operator[](int) const:
         : 178  void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
         :
         : 180  // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
         : 181  //       subsumption operations to behave correctly.
         : 182  Lit&         operator [] (int i)         { return data[i].lit; }
         : 183  Lit          operator [] (int i) const   { return data[i].lit; }
    0.71 :   debe:   mov    0x4(%r13),%eax
         : 185  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    2.87 :   dec2:   mov    %eax,%edx
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   dec4:   and    $0x1,%eax
         : 63   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   dec7:   sar    %edx
         : 64   Minisat::vec<Minisat::lbool>::operator[](int) const:
         :
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
    0.00 :   dec9:   movslq %edx,%rdx
         : 93   Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316  inline bool     Solver::addClause       (const vec<Lit>& ps)    { ps.copyTo(add_tmp); return addClause_(add_tmp); }
         : 317  inline bool     Solver::addEmptyClause  ()                      { add_tmp.clear(); return addClause_(add_tmp); }
         : 318  inline bool     Solver::addClause       (Lit p)                 { add_tmp.clear(); add_tmp.push(p); return addClause_(add_tmp); }
         : 319  inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
         : 320  inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    1.43 :   decc:   cmp    %al,(%rcx,%rdx,1)
   10.72 :   decf:   jne    df10 <Minisat::Solver::removeClause(unsigned int)+0x90>
         : 324  Minisat::vec<Minisat::Solver::VarData>::operator[](int) const:
    0.00 :   ded1:   mov    0x1c0(%rbx),%rax
    0.00 :   ded8:   lea    (%rax,%rdx,8),%rcx
         : 88   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67   const T& operator[](Ref r) const { assert(r >= 0 && r < sz); return memory[r]; }
         :
         : 69   T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
         : 70   const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   dedc:   mov    0x230(%rbx),%edx
         : 72   Minisat::Solver::reason(int) const:
         : 277  inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    0.00 :   dee2:   mov    (%rcx),%eax
         : 279  Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    2.15 :   dee4:   cmp    $0xffffffff,%eax
    0.00 :   dee7:   je     df16 <Minisat::Solver::removeClause(unsigned int)+0x96>
         : 319  Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
    0.00 :   dee9:   cmp    %eax,%edx
    0.71 :   deeb:   jbe    df7d <Minisat::Solver::removeClause(unsigned int)+0xfd>
    0.00 :   def1:   mov    0x228(%rbx),%rsi
    0.00 :   def8:   lea    (%rsi,%rax,4),%rax
         : 71   Minisat::Solver::locked(Minisat::Clause const&) const:
    0.00 :   defc:   cmp    %rax,%r13
    0.71 :   deff:   jne    df16 <Minisat::Solver::removeClause(unsigned int)+0x96>
         : 318  Minisat::Solver::removeClause(unsigned int):
         : 192  // Don't leave pointers to free'd memory!
         : 193  if (locked(c)) vardata[var(c[0])].reason = CRef_Undef;
    0.00 :   df01:   movl   $0xffffffff,(%rcx)
    0.00 :   df07:   jmp    df16 <Minisat::Solver::removeClause(unsigned int)+0x96>
    0.00 :   df09:   nopl   0x0(%rax)
         : 197  Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
    0.00 :   df10:   mov    0x230(%rbx),%edx
         : 68   Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    2.87 :   df16:   movzbl 0x0(%r13),%eax
    0.00 :   df1b:   and    $0xfffffffc,%eax
    0.00 :   df1e:   or     $0x1,%eax
    0.00 :   df21:   mov    %al,0x0(%r13)
         : 173  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    1.44 :   df25:   cmp    %edx,%r12d
    0.72 :   df28:   jae    df5e <Minisat::Solver::removeClause(unsigned int)+0xde>
    0.00 :   df2a:   add    0x228(%rbx),%rbp
         : 67   Minisat::Clause::has_extra() const:
         : 166  bool         has_extra   ()      const   { return header.has_extra; }
    0.00 :   df31:   movzbl 0x0(%rbp),%eax
         : 168  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    6.44 :   df35:   mov    0x0(%rbp),%edx
         : 164  Minisat::Clause::has_extra() const:
         : 166  bool         has_extra   ()      const   { return header.has_extra; }
   41.47 :   df38:   shr    $0x3,%al
         : 168  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   df3b:   shr    $0x5,%edx
         : 164  Minisat::Clause::has_extra() const:
         : 166  bool         has_extra   ()      const   { return header.has_extra; }
    0.00 :   df3e:   and    $0x1,%eax
         : 168  Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         :
         : 198  const CRef CRef_Undef = RegionAllocator<uint32_t>::Ref_Undef;
         : 199  class ClauseAllocator : public RegionAllocator<uint32_t>
         : 200  {
         : 201  static int clauseWord32Size(int size, bool has_extra){
         : 202  return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   df41:   add    %edx,%eax
         : 204  Minisat::RegionAllocator<unsigned int>::free(int):
         : 60   void     free      (int size)    { wasted_ += size; }
    1.44 :   df43:   mov    0x238(%rbx),%edx
    0.00 :   df49:   lea    0x1(%rax,%rdx,1),%eax
    5.00 :   df4d:   mov    %eax,0x238(%rbx)
         : 64   Minisat::Solver::removeClause(unsigned int):
         : 195  c.mark(1);
         : 196  ca.free(cr);
         : 197  }
    7.14 :   df53:   add    $0x8,%rsp
    0.72 :   df57:   pop    %rbx
    0.00 :   df58:   pop    %rbp
    0.00 :   df59:   pop    %r12
    0.00 :   df5b:   pop    %r13
    0.00 :   df5d:   ret
         : 204  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   df5e:   lea    0x5ad3(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   df65:   mov    $0x3f,%edx
    0.00 :   df6a:   lea    0x5aa9(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   df71:   lea    0x64a0(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   df78:   call   23b0 <__assert_fail@plt>
         : 69   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67   const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   df7d:   lea    0x6c2c(%rip),%rcx        # 14bb0 <Minisat::lit_Undef+0x458>
    0.00 :   df84:   mov    $0x43,%edx
    0.00 :   df89:   lea    0x5a8a(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   df90:   lea    0x6481(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   df97:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (118 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000010960 <Minisat::Solver::reduceDB()>:
         : 6     Minisat::Solver::reduceDB():
         : 526   reduceDB_lt(ClauseAllocator& ca_) : ca(ca_) {}
         : 527   bool operator () (CRef x, CRef y) {
         : 528   return ca[x].size() > 2 && (ca[y].size() == 2 || ca[x].activity() < ca[y].activity()); }
         : 529   };
         : 530   void Solver::reduceDB()
         : 531   {
    0.00 :   10960:  endbr64
    0.00 :   10964:  push   %r14
         : 528   int     i, j;
         : 529   double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
    0.00 :   10966:  pxor   %xmm0,%xmm0
         :
         : 531   sort(learnts, reduceDB_lt(ca));
    0.00 :   1096a:  lea    0x228(%rdi),%rdx
         : 526   {
    0.00 :   10971:  push   %r13
    0.00 :   10973:  push   %r12
    0.00 :   10975:  push   %rbp
    0.00 :   10976:  mov    %rdi,%rbp
    0.00 :   10979:  push   %rbx
         : 532   Minisat::vec<unsigned int>::size() const:
         :
         : 64    // Pointer to first element:
         : 65    operator T*       (void)           { return data; }
         :
         : 67    // Size operations:
         : 68    int      size     (void) const     { return sz; }
    0.00 :   1097a:  mov    0x110(%rdi),%esi
         : 70    Minisat::Solver::reduceDB():
         : 528   double  extra_lim = cla_inc / learnts.size();    // Remove any clause below this activity
    0.00 :   10980:  movsd  0x118(%rdi),%xmm1
         : 530   Minisat::vec<unsigned int>::operator unsigned int*():
         : 60    operator T*       (void)           { return data; }
    0.00 :   10988:  mov    0x108(%rdi),%r12
         : 62    Minisat::Solver::reduceDB():
    0.00 :   1098f:  cvtsi2sd %esi,%xmm0
         : 529   void Minisat::sort<unsigned int, reduceDB_lt>(Minisat::vec<unsigned int>&, reduceDB_lt):
         : 90    //=================================================================================================
         : 91    // For 'vec's:
         :
         :
         : 94    template <class T, class LessThan> void sort(vec<T>& v, LessThan lt) {
         : 95    sort((T*)v, v.size(), lt); }
    0.00 :   10993:  mov    %r12,%rdi
         : 97    Minisat::Solver::reduceDB():
    0.00 :   10996:  divsd  %xmm0,%xmm1
    0.84 :   1099a:  movq   %xmm1,%r14
         : 530   void Minisat::sort<unsigned int, reduceDB_lt>(Minisat::vec<unsigned int>&, reduceDB_lt):
    0.00 :   1099f:  call   124f0 <void Minisat::sort<unsigned int, reduceDB_lt>(unsigned int*, int, reduceDB_lt)>
         : 91    Minisat::vec<unsigned int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   109a4:  mov    0x110(%rbp),%eax
         : 65    Minisat::Solver::reduceDB():
         : 533   // Don't delete binary or locked clauses. From the rest, delete clauses from the first half
         : 534   // and clauses with activity smaller than 'extra_lim':
         : 535   for (i = j = 0; i < learnts.size(); i++){
    0.00 :   109aa:  test   %eax,%eax
    0.00 :   109ac:  jle    10af1 <Minisat::Solver::reduceDB()+0x191>
    0.00 :   109b2:  xor    %ebx,%ebx
    0.00 :   109b4:  xor    %r13d,%r13d
    0.00 :   109b7:  jmp    109e7 <Minisat::Solver::reduceDB()+0x87>
    0.00 :   109b9:  nopl   0x0(%rax)
         : 542   Minisat::vec<unsigned int>::operator[](int):
         : 87    const T& last  (void) const        { return data[sz-1]; }
         : 88    T&       last  (void)              { return data[sz-1]; }
         :
         : 90    // Vector interface:
         : 91    const T& operator [] (int index) const { return data[index]; }
         : 92    T&       operator [] (int index)       { return data[index]; }
    6.76 :   109c0:  movslq %r13d,%rax
         : 94    Minisat::Solver::reduceDB():
         : 538   Clause& c = ca[learnts[i]];
         : 539   if (c.size() > 2 && !locked(c) && (i < learnts.size() / 2 || c.activity() < extra_lim))
         : 540   removeClause(learnts[i]);
         : 541   else
         : 542   learnts[j++] = learnts[i];
    0.00 :   109c3:  add    $0x1,%r13d
    0.00 :   109c7:  mov    %esi,(%r12,%rax,4)
         : 545   Minisat::vec<unsigned int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    1.70 :   109cb:  mov    0x110(%rbp),%eax
    0.00 :   109d1:  lea    0x1(%rbx),%edx
         : 66    Minisat::Solver::reduceDB():
         : 533   for (i = j = 0; i < learnts.size(); i++){
    0.00 :   109d4:  add    $0x1,%rbx
    0.85 :   109d8:  cmp    %ebx,%eax
    0.00 :   109da:  jle    10a90 <Minisat::Solver::reduceDB()+0x130>
         : 537   Minisat::vec<unsigned int>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   109e0:  mov    0x108(%rbp),%r12
         : 89    Minisat::Solver::reduceDB():
         : 534   Clause& c = ca[learnts[i]];
    1.69 :   109e7:  mov    (%r12,%rbx,4),%esi
         : 536   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64    Ref      alloc     (int size);
         : 65    void     free      (int size)    { wasted_ += size; }
         :
         : 67    // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   109eb:  mov    0x230(%rbp),%r8d
    0.00 :   109f2:  cmp    %r8d,%esi
    0.85 :   109f5:  jae    10b18 <Minisat::Solver::reduceDB()+0x1b8>
    0.00 :   109fb:  mov    0x228(%rbp),%rdi
    0.00 :   10a02:  mov    %esi,%edx
    0.84 :   10a04:  lea    (%rdi,%rdx,4),%rcx
         : 75    Minisat::Clause::size() const:
         : 162   for (int i = 0; i < size(); i++)
         : 163   abstraction |= 1 << (var(data[i].lit) & 31);
         : 164   data[header.size].abs = abstraction;  }
         :
         :
         : 167   int          size        ()      const   { return header.size; }
    0.00 :   10a08:  mov    (%rcx),%edx
    4.22 :   10a0a:  mov    %edx,%r10d
    0.00 :   10a0d:  shr    $0x5,%r10d
         : 171   Minisat::Solver::reduceDB():
         : 535   if (c.size() > 2 && !locked(c) && (i < learnts.size() / 2 || c.activity() < extra_lim))
    0.00 :   10a11:  cmp    $0x5f,%edx
    0.85 :   10a14:  jbe    109c0 <Minisat::Solver::reduceDB()+0x60>
         : 538   Minisat::Clause::operator[](int) const:
         : 178   void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
         :
         : 180   // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
         : 181   //       subsumption operations to behave correctly.
         : 182   Lit&         operator [] (int i)         { return data[i].lit; }
         : 183   Lit          operator [] (int i) const   { return data[i].lit; }
    0.00 :   10a16:  mov    0x4(%rcx),%edx
         : 185   Minisat::lbool::operator^(bool) const:
         : 99    lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    1.70 :   10a19:  mov    0x170(%rbp),%r11
         : 101   Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10a20:  mov    %edx,%r9d
         : 64    Minisat::sign(Minisat::Lit):
         : 61    inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   10a23:  and    $0x1,%edx
         : 63    Minisat::var(Minisat::Lit):
         : 62    inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   10a26:  sar    %r9d
         : 64    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.85 :   10a29:  movslq %r9d,%r9
         : 88    Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316   inline bool     Solver::addClause       (const vec<Lit>& ps)    { ps.copyTo(add_tmp); return addClause_(add_tmp); }
         : 317   inline bool     Solver::addEmptyClause  ()                      { add_tmp.clear(); return addClause_(add_tmp); }
         : 318   inline bool     Solver::addClause       (Lit p)                 { add_tmp.clear(); add_tmp.push(p); return addClause_(add_tmp); }
         : 319   inline bool     Solver::addClause       (Lit p, Lit q)          { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); return addClause_(add_tmp); }
         : 320   inline bool     Solver::addClause       (Lit p, Lit q, Lit r)   { add_tmp.clear(); add_tmp.push(p); add_tmp.push(q); add_tmp.push(r); return addClause_(add_tmp); }
         : 321   inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    2.56 :   10a2c:  cmp    %dl,(%r11,%r9,1)
   11.00 :   10a30:  jne    10a58 <Minisat::Solver::reduceDB()+0xf8>
         : 324   Minisat::Solver::reason(int) const:
         : 277   inline CRef Solver::reason(Var x) const { return vardata[x].reason; }
    0.00 :   10a32:  mov    0x1c0(%rbp),%rdx
   11.01 :   10a39:  mov    (%rdx,%r9,8),%edx
         : 280   Minisat::Solver::locked(Minisat::Clause const&) const:
         : 316   inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
    7.65 :   10a3d:  cmp    $0xffffffff,%edx
    0.00 :   10a40:  je     10a58 <Minisat::Solver::reduceDB()+0xf8>
         : 319   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67    const T& operator[](Ref r) const { assert(r >= 0 && r < sz); return memory[r]; }
         :
         : 69    T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
         : 70    const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   10a42:  cmp    %edx,%r8d
    2.54 :   10a45:  jbe    10b56 <Minisat::Solver::reduceDB()+0x1f6>
    0.84 :   10a4b:  lea    (%rdi,%rdx,4),%rdx
         : 74    Minisat::Solver::locked(Minisat::Clause const&) const:
    1.70 :   10a4f:  cmp    %rdx,%rcx
    0.00 :   10a52:  je     109c0 <Minisat::Solver::reduceDB()+0x60>
         : 318   Minisat::Solver::reduceDB():
    0.00 :   10a58:  sar    %eax
   14.42 :   10a5a:  cmp    %ebx,%eax
    2.55 :   10a5c:  jg     10a81 <Minisat::Solver::reduceDB()+0x121>
         : 538   Minisat::Clause::activity():
         : 181   operator const Lit* (void) const         { return (Lit*)data; }
         :
         : 183   float&       activity    ()              { assert(header.has_extra); return data[header.size].act; }
    0.00 :   10a5e:  testb  $0x8,(%rcx)
    6.79 :   10a61:  je     10b37 <Minisat::Solver::reduceDB()+0x1d7>
         : 186   Minisat::Solver::reduceDB():
    1.69 :   10a67:  pxor   %xmm0,%xmm0
    0.00 :   10a6b:  movq   %r14,%xmm2
    0.00 :   10a70:  cvtss2sd 0x4(%rcx,%r10,4),%xmm0
    7.60 :   10a77:  comisd %xmm0,%xmm2
    7.65 :   10a7b:  jbe    109c0 <Minisat::Solver::reduceDB()+0x60>
         : 536   removeClause(learnts[i]);
    0.00 :   10a81:  mov    %rbp,%rdi
    0.00 :   10a84:  call   de80 <Minisat::Solver::removeClause(unsigned int)>
    0.00 :   10a89:  jmp    109cb <Minisat::Solver::reduceDB()+0x6b>
    0.00 :   10a8e:  xchg   %ax,%ax
         : 540   }
         : 541   learnts.shrink(i - j);
    0.00 :   10a90:  sub    %r13d,%edx
         : 543   Minisat::vec<unsigned int>::shrink(int):
         : 64    void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   10a93:  cmp    %eax,%edx
    0.00 :   10a95:  jg     10af3 <Minisat::Solver::reduceDB()+0x193>
    0.00 :   10a97:  test   %edx,%edx
    0.00 :   10a99:  jle    10aa3 <Minisat::Solver::reduceDB()+0x143>
    0.00 :   10a9b:  sub    %edx,%eax
    0.00 :   10a9d:  mov    %eax,0x110(%rbp)
         : 71    Minisat::Solver::checkGarbage(double):
         : 306   if (ca.wasted() > ca.size() * gf)
    0.00 :   10aa3:  mov    0x238(%rbp),%eax
    0.00 :   10aa9:  pxor   %xmm1,%xmm1
    0.00 :   10aad:  pxor   %xmm0,%xmm0
    0.00 :   10ab1:  cvtsi2sd %rax,%xmm1
    0.85 :   10ab6:  mov    0x230(%rbp),%eax
    0.00 :   10abc:  cvtsi2sd %rax,%xmm0
    0.00 :   10ac1:  mulsd  0x60(%rbp),%xmm0
    0.00 :   10ac6:  comisd %xmm0,%xmm1
    0.00 :   10aca:  jbe    10ae8 <Minisat::Solver::reduceDB()+0x188>
         : 307   garbageCollect(); }
    0.00 :   10acc:  mov    0x0(%rbp),%rax
         : 309   Minisat::Solver::reduceDB():
         : 542   checkGarbage();
         : 543   }
    0.00 :   10ad0:  pop    %rbx
         : 545   Minisat::Solver::checkGarbage(double):
    0.00 :   10ad1:  mov    %rbp,%rdi
         : 308   Minisat::Solver::reduceDB():
    0.00 :   10ad4:  pop    %rbp
    0.00 :   10ad5:  pop    %r12
         : 544   Minisat::Solver::checkGarbage(double):
    0.00 :   10ad7:  mov    0x10(%rax),%rax
         : 308   Minisat::Solver::reduceDB():
    0.00 :   10adb:  pop    %r13
    0.00 :   10add:  pop    %r14
         : 544   Minisat::Solver::checkGarbage(double):
    0.00 :   10adf:  jmp    *%rax
    0.00 :   10ae1:  nopl   0x0(%rax)
         : 309   Minisat::Solver::reduceDB():
    0.00 :   10ae8:  pop    %rbx
    0.00 :   10ae9:  pop    %rbp
    0.00 :   10aea:  pop    %r12
    0.00 :   10aec:  pop    %r13
    0.00 :   10aee:  pop    %r14
    0.00 :   10af0:  ret
         : 548   Minisat::vec<unsigned int>::shrink(int):
    0.00 :   10af1:  je     10aa3 <Minisat::Solver::reduceDB()+0x143>
    0.00 :   10af3:  lea    0x3bde(%rip),%rcx        # 146d8 <typeinfo name for Minisat::BoolOption+0xdc8>
    0.00 :   10afa:  mov    $0x40,%edx
    0.00 :   10aff:  lea    0x39cc(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   10b06:  lea    0x3c05(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   10b0d:  call   23b0 <__assert_fail@plt>
    0.00 :   10b12:  nopw   0x0(%rax,%rax,1)
         : 71    Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         : 63    T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   10b18:  lea    0x2f19(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   10b1f:  mov    $0x3f,%edx
    0.00 :   10b24:  lea    0x2eef(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   10b2b:  lea    0x38e6(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   10b32:  call   23b0 <__assert_fail@plt>
         : 69    Minisat::Clause::activity():
    0.00 :   10b37:  lea    0x3022(%rip),%rcx        # 13b60 <typeinfo name for Minisat::BoolOption+0x250>
    0.00 :   10b3e:  mov    $0xb5,%edx
    0.00 :   10b43:  lea    0x38df(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   10b4a:  lea    0x39f6(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   10b51:  call   23b0 <__assert_fail@plt>
         : 186   Minisat::RegionAllocator<unsigned int>::lea(unsigned int) const:
         : 67    const T* lea       (Ref r) const { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   10b56:  lea    0x4053(%rip),%rcx        # 14bb0 <Minisat::lit_Undef+0x458>
    0.00 :   10b5d:  mov    $0x43,%edx
    0.00 :   10b62:  lea    0x2eb1(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   10b69:  lea    0x38a8(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   10b70:  call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (110 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000f2e0 <Minisat::Solver::attachClause(unsigned int)>:
         : 6    Minisat::Solver::attachClause(unsigned int):
         :
         : 163  return true;
         : 164  }
         :
         :
         : 167  void Solver::attachClause(CRef cr) {
    0.00 :   f2e0:   endbr64
    0.00 :   f2e4:   push   %r15
    0.00 :   f2e6:   push   %r14
    0.00 :   f2e8:   push   %r13
    0.00 :   f2ea:   push   %r12
    0.00 :   f2ec:   push   %rbp
    2.77 :   f2ed:   push   %rbx
    0.00 :   f2ee:   sub    $0x8,%rsp
         : 176  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   f2f2:   cmp    0x230(%rdi),%esi
    0.00 :   f2f8:   jae    f42c <Minisat::Solver::attachClause(unsigned int)+0x14c>
    0.00 :   f2fe:   mov    0x228(%rdi),%rdx
    0.00 :   f305:   mov    %esi,%eax
    0.00 :   f307:   mov    %rdi,%rbx
    0.92 :   f30a:   mov    %esi,%ebp
    2.75 :   f30c:   lea    (%rdx,%rax,4),%r12
         : 76   Minisat::Solver::attachClause(unsigned int):
         : 164  const Clause& c = ca[cr];
         : 165  assert(c.size() > 1);
    0.00 :   f310:   cmpl   $0x3f,(%r12)
    0.00 :   f315:   jbe    f40d <Minisat::Solver::attachClause(unsigned int)+0x12d>
         : 168  Minisat::Clause::operator[](int) const:
         : 178  void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
         :
         : 180  // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
         : 181  //       subsumption operations to behave correctly.
         : 182  Lit&         operator [] (int i)         { return data[i].lit; }
         : 183  Lit          operator [] (int i) const   { return data[i].lit; }
    0.00 :   f31b:   mov    0x4(%r12),%r13d
         : 185  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f320:   mov    0x138(%rdi),%rax
         : 94   Minisat::Clause::operator[](int) const:
    0.00 :   f327:   mov    0x8(%r12),%r15d
         : 179  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   f32c:   mov    %r13d,%r14d
    0.00 :   f32f:   xor    $0x1,%r14d
         : 62   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
    2.76 :   f333:   mov    %r15d,%edx
         : 60   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
    0.00 :   f336:   movslq %r14d,%r14
    0.00 :   f339:   shl    $0x4,%r14
    0.00 :   f33d:   add    %rax,%r14
         : 90   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   f340:   movslq 0x8(%r14),%rsi
    9.20 :   f344:   cmp    0xc(%r14),%esi
    0.92 :   f348:   je     f3e8 <Minisat::Solver::attachClause(unsigned int)+0x108>
    0.00 :   f34e:   lea    0x1(%rsi),%ecx
         : 79   Minisat::operator~(Minisat::Lit):
    0.00 :   f351:   xor    $0x1,%edx
         : 60   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
    0.00 :   f354:   mov    %ecx,0x8(%r14)
         : 75   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.92 :   f358:   movslq %edx,%rdx
         : 89   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   f35b:   mov    (%r14),%rcx
         : 76   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f35e:   shl    $0x4,%rdx
         : 89   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   f362:   lea    (%rcx,%rsi,8),%rsi
         : 76   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.92 :   f366:   lea    (%rax,%rdx,1),%r14
         : 89   Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.92 :   f36a:   mov    %ebp,(%rsi)
   49.24 :   f36c:   mov    %r15d,0x4(%rsi)
    0.00 :   f370:   movslq 0x8(%r14),%rsi
    0.00 :   f374:   cmp    0xc(%r14),%esi
    0.00 :   f378:   je     f3d0 <Minisat::Solver::attachClause(unsigned int)+0xf0>
    0.00 :   f37a:   lea    0x1(%rsi),%eax
    0.66 :   f37d:   mov    %eax,0x8(%r14)
    0.74 :   f381:   mov    (%r14),%rax
    0.00 :   f384:   lea    (%rax,%rsi,8),%rsi
         : 84   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   f388:   mov    (%r12),%eax
         : 164  Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
    1.84 :   f38c:   mov    %ebp,(%rsi)
   21.12 :   f38e:   mov    %r13d,0x4(%rsi)
         : 76   Minisat::Clause::size() const:
    0.92 :   f392:   shr    $0x5,%eax
         : 163  Minisat::Solver::attachClause(unsigned int):
         : 167  watches[~c[0]].push(Watcher(cr, c[1]));
         : 168  watches[~c[1]].push(Watcher(cr, c[0]));
         : 169  if (c.learnt()) learnts_literals += c.size();
    0.00 :   f395:   testb  $0x4,(%r12)
    0.00 :   f39a:   jne    f3b8 <Minisat::Solver::attachClause(unsigned int)+0xd8>
         : 168  else            clauses_literals += c.size(); }
    0.00 :   f39c:   add    %rax,0xd0(%rbx)
    0.00 :   f3a3:   add    $0x8,%rsp
    0.00 :   f3a7:   pop    %rbx
    0.00 :   f3a8:   pop    %rbp
    0.00 :   f3a9:   pop    %r12
    0.00 :   f3ab:   pop    %r13
    0.00 :   f3ad:   pop    %r14
    0.00 :   f3af:   pop    %r15
    0.00 :   f3b1:   ret
    0.00 :   f3b2:   nopw   0x0(%rax,%rax,1)
         : 167  if (c.learnt()) learnts_literals += c.size();
    0.00 :   f3b8:   add    %rax,0xd8(%rbx)
         : 168  else            clauses_literals += c.size(); }
    0.00 :   f3bf:   add    $0x8,%rsp
    0.00 :   f3c3:   pop    %rbx
    0.00 :   f3c4:   pop    %rbp
    0.00 :   f3c5:   pop    %r12
    0.92 :   f3c7:   pop    %r13
    1.85 :   f3c9:   pop    %r14
    0.00 :   f3cb:   pop    %r15
    0.00 :   f3cd:   ret
    0.00 :   f3ce:   xchg   %ax,%ax
         : 178  Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
    0.00 :   f3d0:   add    $0x1,%esi
    0.00 :   f3d3:   mov    %r14,%rdi
    0.00 :   f3d6:   call   12380 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)>
    0.00 :   f3db:   movslq 0x8(%r14),%rsi
    0.00 :   f3df:   jmp    f37a <Minisat::Solver::attachClause(unsigned int)+0x9a>
    0.00 :   f3e1:   nopl   0x0(%rax)
    0.63 :   f3e8:   add    $0x1,%esi
    0.00 :   f3eb:   mov    %r14,%rdi
    0.00 :   f3ee:   call   12380 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)>
         : 83   Minisat::Clause::operator[](int) const:
         : 178  Lit          operator [] (int i) const   { return data[i].lit; }
    0.00 :   f3f3:   mov    0x4(%r12),%r13d
         : 180  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   f3f8:   mov    0x138(%rbx),%rax
         : 89   Minisat::Clause::operator[](int) const:
    0.00 :   f3ff:   mov    0x8(%r12),%edx
         : 179  Minisat::vec<Minisat::Solver::Watcher>::push(Minisat::Solver::Watcher const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   f404:   movslq 0x8(%r14),%rsi
    0.00 :   f408:   jmp    f34e <Minisat::Solver::attachClause(unsigned int)+0x6e>
         : 77   Minisat::Solver::attachClause(unsigned int):
         : 164  assert(c.size() > 1);
    0.00 :   f40d:   lea    0x5914(%rip),%rcx        # 14d28 <Minisat::lit_Undef+0x5d0>
    0.00 :   f414:   mov    $0xa4,%edx
    0.00 :   f419:   lea    0x5d27(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   f420:   lea    0x5d70(%rip),%rdi        # 15197 <Minisat::lit_Undef+0xa3f>
    0.00 :   f427:   call   23b0 <__assert_fail@plt>
         : 170  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   f42c:   lea    0x4605(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   f433:   mov    $0x3f,%edx
    0.00 :   f438:   lea    0x45db(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   f43f:   lea    0x4fd2(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   f446:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (69 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a07c0 <__memcpy_avx_unaligned_erms>:
         : 6      __memcpy_avx_unaligned_erms():
         : 7      ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:307
    0.00 :   1a07c0: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:308
    0.00 :   1a07c4: mov    %rdi,%rax
         : 11     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:314
    0.00 :   1a07c7: cmp    $0x20,%rdx
         : 13     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:315
    0.00 :   1a07cb: jb     1a07f0 <__memcpy_avx_unaligned_erms+0x30>
         : 15     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:317
    0.00 :   1a07cd: vmovdqu (%rsi),%ymm0
         : 17     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:318
    0.00 :   1a07d1: cmp    $0x40,%rdx
         : 19     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:319
    0.00 :   1a07d5: ja     1a0880 <__memcpy_avx_unaligned_erms+0xc0>
         : 21     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:322
    0.00 :   1a07db: vmovdqu -0x20(%rsi,%rdx,1),%ymm1
         : 23     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:323
    0.00 :   1a07e1: vmovdqu %ymm0,(%rdi)
         : 25     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:324
    0.00 :   1a07e5: vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
         : 27     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:327
    0.00 :   1a07eb: vzeroupper
    0.00 :   1a07ee: ret
    0.00 :   1a07ef: nop
         : 31     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:357
    0.00 :   1a07f0: cmp    $0x10,%edx
         : 33     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:358
    2.93 :   1a07f3: jae    1a0822 <__memcpy_avx_unaligned_erms+0x62>
         : 35     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:360
    0.00 :   1a07f5: cmp    $0x8,%edx
         : 37     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:361
    0.00 :   1a07f8: jae    1a0840 <__memcpy_avx_unaligned_erms+0x80>
         : 39     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:363
    0.00 :   1a07fa: cmp    $0x4,%edx
         : 41     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:367
    0.00 :   1a07fd: jae    1a0815 <__memcpy_avx_unaligned_erms+0x55>
         : 43     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:368
    0.00 :   1a07ff: cmp    $0x1,%edx
         : 45     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:369
    0.00 :   1a0802: jl     1a0814 <__memcpy_avx_unaligned_erms+0x54>
         : 47     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:370
    0.00 :   1a0804: mov    (%rsi),%cl
         : 49     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:371
    0.00 :   1a0806: je     1a0812 <__memcpy_avx_unaligned_erms+0x52>
         : 51     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:372
    0.00 :   1a0808: movzwl -0x2(%rsi,%rdx,1),%esi
         : 53     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:373
    0.00 :   1a080d: mov    %si,-0x2(%rdi,%rdx,1)
         : 55     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:375
    0.00 :   1a0812: mov    %cl,(%rdi)
         : 57     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:377
    0.00 :   1a0814: ret
         : 59     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:383
    0.00 :   1a0815: mov    -0x4(%rsi,%rdx,1),%ecx
         : 61     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:384
    0.00 :   1a0819: mov    (%rsi),%esi
         : 63     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:385
    0.00 :   1a081b: mov    %ecx,-0x4(%rdi,%rdx,1)
         : 65     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:386
    0.00 :   1a081f: mov    %esi,(%rdi)
         : 67     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:387
    0.00 :   1a0821: ret
         : 69     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:394
    0.00 :   1a0822: vmovdqu (%rsi),%xmm0
         : 71     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:395
   23.40 :   1a0826: vmovdqu -0x10(%rsi,%rdx,1),%xmm1
         : 73     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:396
    0.00 :   1a082c: vmovdqu %xmm0,(%rdi)
         : 75     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:397
    5.83 :   1a0830: vmovdqu %xmm1,-0x10(%rdi,%rdx,1)
         : 77     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:399
    4.39 :   1a0836: ret
    0.00 :   1a0837: nopw   0x0(%rax,%rax,1)
         : 80     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:416
    0.00 :   1a0840: mov    -0x8(%rsi,%rdx,1),%rcx
         : 82     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:417
   13.92 :   1a0845: mov    (%rsi),%rsi
         : 84     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:418
    5.86 :   1a0848: mov    %rsi,(%rdi)
         : 86     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:419
    4.25 :   1a084b: mov    %rcx,-0x8(%rdi,%rdx,1)
         : 88     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:420
    2.91 :   1a0850: ret
         : 90     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:427
    0.00 :   1a0851: vmovdqu -0x20(%rsi,%rdx,1),%ymm2
         : 92     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:428
    1.46 :   1a0857: vmovdqu -0x40(%rsi,%rdx,1),%ymm3
         : 94     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:429
    0.00 :   1a085d: vmovdqu %ymm0,(%rdi)
         : 96     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:430
    1.45 :   1a0861: vmovdqu %ymm1,0x20(%rdi)
         : 98     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:431
    0.00 :   1a0866: vmovdqu %ymm2,-0x20(%rdi,%rdx,1)
         : 100    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:432
    0.00 :   1a086c: vmovdqu %ymm3,-0x40(%rdi,%rdx,1)
         : 102    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:433
    1.46 :   1a0872: vzeroupper
    0.00 :   1a0875: ret
    0.00 :   1a0876: cs nopw 0x0(%rax,%rax,1)
         : 106    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:438
    0.00 :   1a0880: cmp    0x79b71(%rip),%rdx        # 21a3f8 <__x86_rep_movsb_threshold>
         : 108    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:439
    0.00 :   1a0887: ja     1a0a80 <__memcpy_avx_unaligned_erms+0x2c0>
         : 110    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:444
    0.00 :   1a088d: cmp    $0x100,%rdx
         : 112    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:445
    1.46 :   1a0894: ja     1a08f5 <__memcpy_avx_unaligned_erms+0x135>
         : 114    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:447
    0.00 :   1a0896: vmovdqu 0x20(%rsi),%ymm1
         : 116    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:448
    2.93 :   1a089b: cmp    $0x80,%rdx
         : 118    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:449
    0.00 :   1a08a2: jbe    1a0851 <__memcpy_avx_unaligned_erms+0x91>
         : 120    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:451
    0.00 :   1a08a4: vmovdqu 0x40(%rsi),%ymm2
         : 122    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:452
    0.00 :   1a08a9: vmovdqu 0x60(%rsi),%ymm3
         : 124    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:453
    0.00 :   1a08ae: vmovdqu -0x20(%rsi,%rdx,1),%ymm4
         : 126    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:454
    1.43 :   1a08b4: vmovdqu -0x40(%rsi,%rdx,1),%ymm5
         : 128    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:455
    0.00 :   1a08ba: vmovdqu -0x60(%rsi,%rdx,1),%ymm6
         : 130    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:456
    0.00 :   1a08c0: vmovdqu -0x80(%rsi,%rdx,1),%ymm7
         : 132    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:457
    0.00 :   1a08c6: vmovdqu %ymm0,(%rdi)
         : 134    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:458
    0.00 :   1a08ca: vmovdqu %ymm1,0x20(%rdi)
         : 136    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:459
    0.00 :   1a08cf: vmovdqu %ymm2,0x40(%rdi)
         : 138    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:460
    0.00 :   1a08d4: vmovdqu %ymm3,0x60(%rdi)
         : 140    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:461
    0.00 :   1a08d9: vmovdqu %ymm4,-0x20(%rdi,%rdx,1)
         : 142    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:462
    0.00 :   1a08df: vmovdqu %ymm5,-0x40(%rdi,%rdx,1)
         : 144    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:463
    0.00 :   1a08e5: vmovdqu %ymm6,-0x60(%rdi,%rdx,1)
         : 146    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:464
    0.00 :   1a08eb: vmovdqu %ymm7,-0x80(%rdi,%rdx,1)
         : 148    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:465
    0.00 :   1a08f1: vzeroupper
    0.00 :   1a08f4: ret
         : 151    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:469
    0.00 :   1a08f5: mov    %rdi,%rcx
         : 153    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:470
    0.00 :   1a08f8: sub    %rsi,%rcx
         : 155    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:474
    0.00 :   1a08fb: cmp    %rdx,%rcx
         : 157    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:476
    0.00 :   1a08fe: jb     1a09b0 <__memcpy_avx_unaligned_erms+0x1f0>
         : 159    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:480
    0.00 :   1a0904: cmp    0x80c9d(%rip),%rdx        # 2215a8 <__x86_shared_non_temporal_threshold>
         : 161    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:481
    0.00 :   1a090b: ja     1a0aed <__memcpy_avx_unaligned_erms+0x32d>
         : 163    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:492
    0.00 :   1a0911: lea    (%rcx,%rdx,1),%r8
         : 165    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:495
    0.00 :   1a0915: xor    %rcx,%r8
         : 167    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:497
    0.00 :   1a0918: shr    $0x3f,%r8
         : 169    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:499
    0.00 :   1a091c: and    $0xf00,%ecx
         : 171    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:503
    0.00 :   1a0922: add    %r8d,%ecx
         : 173    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:504
    0.00 :   1a0925: je     1a09b5 <__memcpy_avx_unaligned_erms+0x1f5>
         : 175    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:513
    0.00 :   1a092b: vmovdqu -0x20(%rsi,%rdx,1),%ymm5
         : 177    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:514
    0.00 :   1a0931: vmovdqu -0x40(%rsi,%rdx,1),%ymm6
         : 179    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:516
    0.00 :   1a0937: mov    %rdi,%rcx
         : 181    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:518
    0.00 :   1a093a: or     $0x1f,%rdi
         : 183    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:519
    0.00 :   1a093e: vmovdqu -0x60(%rsi,%rdx,1),%ymm7
         : 185    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:520
    0.00 :   1a0944: vmovdqu -0x80(%rsi,%rdx,1),%ymm8
         : 187    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:523
    0.00 :   1a094a: sub    %rcx,%rsi
         : 189    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:525
    0.00 :   1a094d: inc    %rdi
         : 191    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:527
    0.00 :   1a0950: add    %rdi,%rsi
         : 193    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:529
    0.00 :   1a0953: lea    -0x80(%rcx,%rdx,1),%rdx
    0.00 :   1a0958: nopl   0x0(%rax,%rax,1)
         : 196    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:535
    0.00 :   1a0960: vmovdqu (%rsi),%ymm1
         : 198    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:536
    0.00 :   1a0964: vmovdqu 0x20(%rsi),%ymm2
         : 200    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:537
    0.00 :   1a0969: vmovdqu 0x40(%rsi),%ymm3
         : 202    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:538
    1.46 :   1a096e: vmovdqu 0x60(%rsi),%ymm4
         : 204    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:539
    4.36 :   1a0973: sub    $0xffffffffffffff80,%rsi
         : 206    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:540
    1.46 :   1a0977: vmovdqa %ymm1,(%rdi)
         : 208    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:541
    2.93 :   1a097b: vmovdqa %ymm2,0x20(%rdi)
         : 210    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:542
    7.33 :   1a0980: vmovdqa %ymm3,0x40(%rdi)
         : 212    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:543
    1.46 :   1a0985: vmovdqa %ymm4,0x60(%rdi)
         : 214    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:544
    5.84 :   1a098a: sub    $0xffffffffffffff80,%rdi
         : 216    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:545
    0.00 :   1a098e: cmp    %rdi,%rdx
         : 218    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:546
    0.00 :   1a0991: ja     1a0960 <__memcpy_avx_unaligned_erms+0x1a0>
         : 220    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:548
    0.00 :   1a0993: vmovdqu %ymm5,0x60(%rdx)
         : 222    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:549
    0.00 :   1a0998: vmovdqu %ymm6,0x40(%rdx)
         : 224    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:550
    0.00 :   1a099d: vmovdqu %ymm7,0x20(%rdx)
         : 226    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:551
    0.00 :   1a09a2: vmovdqu %ymm8,(%rdx)
         : 228    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:553
    0.00 :   1a09a6: vmovdqu %ymm0,(%rcx)
         : 230    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:557
    0.00 :   1a09aa: vzeroupper
    0.00 :   1a09ad: ret
    0.00 :   1a09ae: xchg   %ax,%ax
         : 234    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:563
    0.00 :   1a09b0: test   %rcx,%rcx
         : 236    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:564
    0.00 :   1a09b3: je     1a09aa <__memcpy_avx_unaligned_erms+0x1ea>
         : 238    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:570
    0.00 :   1a09b5: vmovdqu 0x20(%rsi),%ymm5
         : 240    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:571
    0.00 :   1a09ba: vmovdqu 0x40(%rsi),%ymm6
         : 242    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:573
    0.00 :   1a09bf: lea    -0x81(%rdi,%rdx,1),%rcx
         : 244    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:574
    0.00 :   1a09c7: vmovdqu 0x60(%rsi),%ymm7
         : 246    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:575
    0.00 :   1a09cc: vmovdqu -0x20(%rsi,%rdx,1),%ymm8
         : 248    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:577
    0.00 :   1a09d2: sub    %rdi,%rsi
         : 250    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:579
    0.00 :   1a09d5: and    $0xffffffffffffffe0,%rcx
         : 252    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:581
    0.00 :   1a09d9: add    %rcx,%rsi
    0.00 :   1a09dc: nopl   0x0(%rax)
         : 255    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:587
    0.00 :   1a09e0: vmovdqu 0x60(%rsi),%ymm1
         : 257    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:588
    0.00 :   1a09e5: vmovdqu 0x40(%rsi),%ymm2
         : 259    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:589
    0.00 :   1a09ea: vmovdqu 0x20(%rsi),%ymm3
         : 261    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:590
    0.00 :   1a09ef: vmovdqu (%rsi),%ymm4
         : 263    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:591
    0.00 :   1a09f3: add    $0xffffffffffffff80,%rsi
         : 265    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:592
    0.00 :   1a09f7: vmovdqa %ymm1,0x60(%rcx)
         : 267    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:593
    0.00 :   1a09fc: vmovdqa %ymm2,0x40(%rcx)
         : 269    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:594
    1.46 :   1a0a01: vmovdqa %ymm3,0x20(%rcx)
         : 271    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:595
    0.00 :   1a0a06: vmovdqa %ymm4,(%rcx)
         : 273    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:596
    0.00 :   1a0a0a: add    $0xffffffffffffff80,%rcx
         : 275    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:597
    0.00 :   1a0a0e: cmp    %rcx,%rdi
         : 277    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:598
    0.00 :   1a0a11: jb     1a09e0 <__memcpy_avx_unaligned_erms+0x220>
         : 279    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:600
    0.00 :   1a0a13: vmovdqu %ymm0,(%rdi)
         : 281    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:601
    0.00 :   1a0a17: vmovdqu %ymm5,0x20(%rdi)
         : 283    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:602
    0.00 :   1a0a1c: vmovdqu %ymm6,0x40(%rdi)
         : 285    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:603
    0.00 :   1a0a21: vmovdqu %ymm7,0x60(%rdi)
         : 287    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:605
    0.00 :   1a0a26: vmovdqu %ymm8,-0x20(%rdx,%rdi,1)
         : 289    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:606
    0.00 :   1a0a2c: vzeroupper
    0.00 :   1a0a2f: ret
    0.00 :   1a0a30: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a0a3b: nopl   0x0(%rax,%rax,1)
         : 294    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:615
    0.00 :   1a0a40: vmovdqu 0x20(%rsi),%ymm1
         : 296    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:622
    0.00 :   1a0a45: test   $0xe00,%ecx
         : 298    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:623
    0.00 :   1a0a4b: jne    1a0ab5 <__memcpy_avx_unaligned_erms+0x2f5>
         : 300    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:629
    0.00 :   1a0a4d: mov    %rcx,%r9
         : 302    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:632
    0.00 :   1a0a50: lea    -0x1(%rsi,%rdx,1),%rcx
         : 304    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:634
    0.00 :   1a0a55: or     $0x3f,%rsi
         : 306    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:637
    0.00 :   1a0a59: lea    0x1(%rsi,%r9,1),%rdi
         : 308    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:638
    0.00 :   1a0a5e: sub    %rsi,%rcx
         : 310    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:640
    0.00 :   1a0a61: inc    %rsi
         : 312    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:642
    0.00 :   1a0a64: rep movsb %ds:(%rsi),%es:(%rdi)
         : 314    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:644
    0.00 :   1a0a66: vmovdqu %ymm0,(%r8)
         : 316    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:646
    0.00 :   1a0a6b: vmovdqu %ymm1,0x20(%r8)
         : 318    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:648
    0.00 :   1a0a71: vzeroupper
    0.00 :   1a0a74: ret
    0.00 :   1a0a75: data16 cs nopw 0x0(%rax,%rax,1)
         : 322    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:653
    0.00 :   1a0a80: mov    %rdi,%rcx
         : 324    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:654
    0.00 :   1a0a83: sub    %rsi,%rcx
         : 326    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:658
    0.00 :   1a0a86: cmp    %rdx,%rcx
         : 328    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:660
    0.00 :   1a0a89: jb     1a09b0 <__memcpy_avx_unaligned_erms+0x1f0>
         : 330    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:663
    0.00 :   1a0a8f: mov    %rdi,%r8
         : 332    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:667
    0.00 :   1a0a92: cmp    0x80b07(%rip),%rdx        # 2215a0 <__x86_rep_movsb_stop_threshold>
         : 334    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:668
    0.00 :   1a0a99: jae    1a0ae0 <__memcpy_avx_unaligned_erms+0x320>
         : 336    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:671
    0.00 :   1a0a9b: testl  $0x1,0x80af3(%rip)        # 221598 <__x86_string_control>
         : 338    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:672
    0.00 :   1a0aa5: je     1a0a40 <__memcpy_avx_unaligned_erms+0x280>
         : 340    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:681
    0.00 :   1a0aa7: cmp    $0xffffffc0,%ecx
         : 342    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:682
    0.00 :   1a0aaa: ja     1a092b <__memcpy_avx_unaligned_erms+0x16b>
         : 344    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:687
    0.00 :   1a0ab0: vmovdqu 0x20(%rsi),%ymm1
         : 346    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:696
    0.00 :   1a0ab5: sub    %rdi,%rsi
         : 348    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:698
    0.00 :   1a0ab8: add    $0x3f,%rdi
         : 350    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:700
    0.00 :   1a0abc: lea    (%r8,%rdx,1),%rcx
         : 352    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:702
    0.00 :   1a0ac0: and    $0xffffffffffffffc0,%rdi
         : 354    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:705
    0.00 :   1a0ac4: add    %rdi,%rsi
         : 356    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:706
    0.00 :   1a0ac7: sub    %rdi,%rcx
         : 358    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:708
    0.00 :   1a0aca: rep movsb %ds:(%rsi),%es:(%rdi)
         : 360    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:711
    0.00 :   1a0acc: vmovdqu %ymm0,(%r8)
         : 362    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:713
    0.00 :   1a0ad1: vmovdqu %ymm1,0x20(%r8)
         : 364    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:715
    0.00 :   1a0ad7: vzeroupper
    0.00 :   1a0ada: ret
    0.00 :   1a0adb: nopl   0x0(%rax,%rax,1)
         : 368    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:727
    0.00 :   1a0ae0: cmp    0x79911(%rip),%rdx        # 21a3f8 <__x86_rep_movsb_threshold>
         : 370    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:728
    0.00 :   1a0ae7: jb     1a0911 <__memcpy_avx_unaligned_erms+0x151>
         : 372    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:734
    0.00 :   1a0aed: neg    %rcx
         : 374    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:735
    0.00 :   1a0af0: cmp    %rcx,%rdx
         : 376    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:736
    0.00 :   1a0af3: ja     1a092b <__memcpy_avx_unaligned_erms+0x16b>
         : 378    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:743
    0.00 :   1a0af9: vmovdqu 0x20(%rsi),%ymm1
         : 380    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:749
    0.00 :   1a0afe: vmovdqu %ymm0,(%rdi)
         : 382    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:751
    0.00 :   1a0b02: vmovdqu %ymm1,0x20(%rdi)
         : 384    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:759
    0.00 :   1a0b07: mov    %rdi,%r8
         : 386    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:760
    0.00 :   1a0b0a: and    $0x3f,%r8
         : 388    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:762
    0.00 :   1a0b0e: sub    $0x40,%r8
         : 390    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:764
    0.00 :   1a0b12: sub    %r8,%rsi
         : 392    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:766
    0.00 :   1a0b15: sub    %r8,%rdi
         : 394    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:768
    0.00 :   1a0b18: add    %r8,%rdx
         : 396    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:776
    0.00 :   1a0b1b: not    %ecx
         : 398    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:777
    0.00 :   1a0b1d: test   $0xf00,%ecx
         : 400    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:778
    0.00 :   1a0b23: je     1a0cb0 <__memcpy_avx_unaligned_erms+0x4f0>
         : 402    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:780
    0.00 :   1a0b29: mov    %rdx,%r10
         : 404    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:781
    0.00 :   1a0b2c: shr    $0x4,%r10
         : 406    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:782
    0.00 :   1a0b30: cmp    0x80a71(%rip),%r10        # 2215a8 <__x86_shared_non_temporal_threshold>
         : 408    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:783
    0.00 :   1a0b37: jae    1a0cb0 <__memcpy_avx_unaligned_erms+0x4f0>
         : 410    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:786
    0.00 :   1a0b3d: and    $0x1fff,%edx
         : 412    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:788
    0.00 :   1a0b43: shr    $0x9,%r10
    0.00 :   1a0b47: nopw   0x0(%rax,%rax,1)
         : 415    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:793
    0.00 :   1a0b50: mov    $0x20,%ecx
         : 417    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:795
    0.00 :   1a0b55: prefetcht0 0x80(%rsi)
    0.00 :   1a0b5c: prefetcht0 0xc0(%rsi)
         : 420    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:796
    0.00 :   1a0b63: prefetcht0 0x100(%rsi)
    0.00 :   1a0b6a: prefetcht0 0x140(%rsi)
         : 423    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:797
    0.00 :   1a0b71: prefetcht0 0x1080(%rsi)
    0.00 :   1a0b78: prefetcht0 0x10c0(%rsi)
         : 426    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:798
    0.00 :   1a0b7f: prefetcht0 0x1100(%rsi)
    0.00 :   1a0b86: prefetcht0 0x1140(%rsi)
         : 429    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:800
    0.00 :   1a0b8d: vmovdqu (%rsi),%ymm0
    0.00 :   1a0b91: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0b96: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0b9b: vmovdqu 0x60(%rsi),%ymm3
         : 434    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:801
    0.00 :   1a0ba0: vmovdqu 0x1000(%rsi),%ymm4
    0.00 :   1a0ba8: vmovdqu 0x1020(%rsi),%ymm5
    0.00 :   1a0bb0: vmovdqu 0x1040(%rsi),%ymm6
    0.00 :   1a0bb8: vmovdqu 0x1060(%rsi),%ymm7
         : 439    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:802
    0.00 :   1a0bc0: sub    $0xffffffffffffff80,%rsi
         : 441    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:804
    0.00 :   1a0bc4: vmovntdq %ymm0,(%rdi)
    0.00 :   1a0bc8: vmovntdq %ymm1,0x20(%rdi)
    0.00 :   1a0bcd: vmovntdq %ymm2,0x40(%rdi)
    0.00 :   1a0bd2: vmovntdq %ymm3,0x60(%rdi)
         : 446    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:805
    0.00 :   1a0bd7: vmovntdq %ymm4,0x1000(%rdi)
    0.00 :   1a0bdf: vmovntdq %ymm5,0x1020(%rdi)
    0.00 :   1a0be7: vmovntdq %ymm6,0x1040(%rdi)
    0.00 :   1a0bef: vmovntdq %ymm7,0x1060(%rdi)
         : 451    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:806
    0.00 :   1a0bf7: sub    $0xffffffffffffff80,%rdi
         : 453    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:807
    0.00 :   1a0bfb: dec    %ecx
         : 455    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:808
    0.00 :   1a0bfd: jne    1a0b55 <__memcpy_avx_unaligned_erms+0x395>
         : 457    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:809
    0.00 :   1a0c03: add    $0x1000,%rdi
         : 459    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:810
    0.00 :   1a0c0a: add    $0x1000,%rsi
         : 461    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:811
    0.00 :   1a0c11: dec    %r10
         : 463    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:812
    0.00 :   1a0c14: jne    1a0b50 <__memcpy_avx_unaligned_erms+0x390>
         : 465    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:813
    0.00 :   1a0c1a: sfence
         : 467    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:816
    0.00 :   1a0c1d: cmp    $0x80,%edx
         : 469    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:817
    0.00 :   1a0c23: jbe    1a0c7a <__memcpy_avx_unaligned_erms+0x4ba>
         : 471    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:822
    0.00 :   1a0c25: prefetcht0 0x80(%rsi)
    0.00 :   1a0c2c: prefetcht0 0xc0(%rsi)
         : 474    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:823
    0.00 :   1a0c33: prefetcht0 0x80(%rdi)
    0.00 :   1a0c3a: prefetcht0 0xc0(%rdi)
         : 477    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:824
    0.00 :   1a0c41: vmovdqu (%rsi),%ymm0
         : 479    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:825
    0.00 :   1a0c45: vmovdqu 0x20(%rsi),%ymm1
         : 481    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:826
    0.00 :   1a0c4a: vmovdqu 0x40(%rsi),%ymm2
         : 483    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:827
    0.00 :   1a0c4f: vmovdqu 0x60(%rsi),%ymm3
         : 485    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:828
    0.00 :   1a0c54: sub    $0xffffffffffffff80,%rsi
         : 487    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:829
    0.00 :   1a0c58: add    $0xffffff80,%edx
         : 489    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:830
    0.00 :   1a0c5b: vmovdqa %ymm0,(%rdi)
         : 491    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:831
    0.00 :   1a0c5f: vmovdqa %ymm1,0x20(%rdi)
         : 493    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:832
    0.00 :   1a0c64: vmovdqa %ymm2,0x40(%rdi)
         : 495    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:833
    0.00 :   1a0c69: vmovdqa %ymm3,0x60(%rdi)
         : 497    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:834
    0.00 :   1a0c6e: sub    $0xffffffffffffff80,%rdi
         : 499    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:835
    0.00 :   1a0c72: cmp    $0x80,%edx
         : 501    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:836
    0.00 :   1a0c78: ja     1a0c25 <__memcpy_avx_unaligned_erms+0x465>
         : 503    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:840
    0.00 :   1a0c7a: vmovdqu -0x80(%rsi,%rdx,1),%ymm0
         : 505    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:841
    0.00 :   1a0c80: vmovdqu -0x60(%rsi,%rdx,1),%ymm1
         : 507    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:842
    0.00 :   1a0c86: vmovdqu -0x40(%rsi,%rdx,1),%ymm2
         : 509    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:843
    0.00 :   1a0c8c: vmovdqu -0x20(%rsi,%rdx,1),%ymm3
         : 511    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:845
    0.00 :   1a0c92: vmovdqu %ymm0,-0x80(%rdi,%rdx,1)
         : 513    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:846
    0.00 :   1a0c98: vmovdqu %ymm1,-0x60(%rdi,%rdx,1)
         : 515    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:847
    0.00 :   1a0c9e: vmovdqu %ymm2,-0x40(%rdi,%rdx,1)
         : 517    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:848
    0.00 :   1a0ca4: vmovdqu %ymm3,-0x20(%rdi,%rdx,1)
         : 519    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:849
    0.00 :   1a0caa: vzeroupper
    0.00 :   1a0cad: ret
    0.00 :   1a0cae: xchg   %ax,%ax
         : 523    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:853
    0.00 :   1a0cb0: mov    %rdx,%r10
         : 525    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:855
    0.00 :   1a0cb3: and    $0x3fff,%edx
         : 527    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:857
    0.00 :   1a0cb9: shr    $0xe,%r10
    0.00 :   1a0cbd: nopl   (%rax)
         : 530    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:862
    0.00 :   1a0cc0: mov    $0x20,%ecx
         : 532    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:866
    0.00 :   1a0cc5: prefetcht0 0x80(%rsi)
    0.00 :   1a0ccc: prefetcht0 0xc0(%rsi)
         : 535    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:867
    0.00 :   1a0cd3: prefetcht0 0x1080(%rsi)
    0.00 :   1a0cda: prefetcht0 0x10c0(%rsi)
         : 538    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:868
    0.00 :   1a0ce1: prefetcht0 0x2080(%rsi)
    0.00 :   1a0ce8: prefetcht0 0x20c0(%rsi)
         : 541    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:869
    0.00 :   1a0cef: prefetcht0 0x3080(%rsi)
    0.00 :   1a0cf6: prefetcht0 0x30c0(%rsi)
         : 544    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:871
    0.00 :   1a0cfd: vmovdqu (%rsi),%ymm0
    0.00 :   1a0d01: vmovdqu 0x20(%rsi),%ymm1
    0.00 :   1a0d06: vmovdqu 0x40(%rsi),%ymm2
    0.00 :   1a0d0b: vmovdqu 0x60(%rsi),%ymm3
         : 549    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:872
    0.00 :   1a0d10: vmovdqu 0x1000(%rsi),%ymm4
    0.00 :   1a0d18: vmovdqu 0x1020(%rsi),%ymm5
    0.00 :   1a0d20: vmovdqu 0x1040(%rsi),%ymm6
    0.00 :   1a0d28: vmovdqu 0x1060(%rsi),%ymm7
         : 554    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:873
    0.00 :   1a0d30: vmovdqu 0x2000(%rsi),%ymm8
    0.00 :   1a0d38: vmovdqu 0x2020(%rsi),%ymm9
    0.00 :   1a0d40: vmovdqu 0x2040(%rsi),%ymm10
    0.00 :   1a0d48: vmovdqu 0x2060(%rsi),%ymm11
         : 559    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:874
    0.00 :   1a0d50: vmovdqu 0x3000(%rsi),%ymm12
    0.00 :   1a0d58: vmovdqu 0x3020(%rsi),%ymm13
    0.00 :   1a0d60: vmovdqu 0x3040(%rsi),%ymm14
    0.00 :   1a0d68: vmovdqu 0x3060(%rsi),%ymm15
         : 564    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:875
    0.00 :   1a0d70: sub    $0xffffffffffffff80,%rsi
         : 566    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:877
    0.00 :   1a0d74: vmovntdq %ymm0,(%rdi)
    0.00 :   1a0d78: vmovntdq %ymm1,0x20(%rdi)
    0.00 :   1a0d7d: vmovntdq %ymm2,0x40(%rdi)
    0.00 :   1a0d82: vmovntdq %ymm3,0x60(%rdi)
         : 571    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:878
    0.00 :   1a0d87: vmovntdq %ymm4,0x1000(%rdi)
    0.00 :   1a0d8f: vmovntdq %ymm5,0x1020(%rdi)
    0.00 :   1a0d97: vmovntdq %ymm6,0x1040(%rdi)
    0.00 :   1a0d9f: vmovntdq %ymm7,0x1060(%rdi)
         : 576    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:879
    0.00 :   1a0da7: vmovntdq %ymm8,0x2000(%rdi)
    0.00 :   1a0daf: vmovntdq %ymm9,0x2020(%rdi)
    0.00 :   1a0db7: vmovntdq %ymm10,0x2040(%rdi)
    0.00 :   1a0dbf: vmovntdq %ymm11,0x2060(%rdi)
         : 581    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:880
    0.00 :   1a0dc7: vmovntdq %ymm12,0x3000(%rdi)
    0.00 :   1a0dcf: vmovntdq %ymm13,0x3020(%rdi)
    0.00 :   1a0dd7: vmovntdq %ymm14,0x3040(%rdi)
    0.00 :   1a0ddf: vmovntdq %ymm15,0x3060(%rdi)
         : 586    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:881
    0.00 :   1a0de7: sub    $0xffffffffffffff80,%rdi
         : 588    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:882
    0.00 :   1a0deb: dec    %ecx
         : 590    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:883
    0.00 :   1a0ded: jne    1a0cc5 <__memcpy_avx_unaligned_erms+0x505>
         : 592    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:884
    0.00 :   1a0df3: add    $0x3000,%rdi
         : 594    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:885
    0.00 :   1a0dfa: add    $0x3000,%rsi
         : 596    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:886
    0.00 :   1a0e01: dec    %r10
         : 598    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:887
    0.00 :   1a0e04: jne    1a0cc0 <__memcpy_avx_unaligned_erms+0x500>
         : 600    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:888
    0.00 :   1a0e0a: sfence
         : 602    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:890
    0.00 :   1a0e0d: cmp    $0x80,%edx
         : 604    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:891
    0.00 :   1a0e13: jbe    1a0e6a <__memcpy_avx_unaligned_erms+0x6aa>
         : 606    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:896
    0.00 :   1a0e15: prefetcht0 0x80(%rsi)
    0.00 :   1a0e1c: prefetcht0 0xc0(%rsi)
         : 609    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:897
    0.00 :   1a0e23: prefetcht0 0x80(%rdi)
    0.00 :   1a0e2a: prefetcht0 0xc0(%rdi)
         : 612    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:898
    0.00 :   1a0e31: vmovdqu (%rsi),%ymm0
         : 614    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:899
    0.00 :   1a0e35: vmovdqu 0x20(%rsi),%ymm1
         : 616    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:900
    0.00 :   1a0e3a: vmovdqu 0x40(%rsi),%ymm2
         : 618    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:901
    0.00 :   1a0e3f: vmovdqu 0x60(%rsi),%ymm3
         : 620    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:902
    0.00 :   1a0e44: sub    $0xffffffffffffff80,%rsi
         : 622    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:903
    0.00 :   1a0e48: add    $0xffffff80,%edx
         : 624    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:904
    0.00 :   1a0e4b: vmovdqa %ymm0,(%rdi)
         : 626    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:905
    0.00 :   1a0e4f: vmovdqa %ymm1,0x20(%rdi)
         : 628    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:906
    0.00 :   1a0e54: vmovdqa %ymm2,0x40(%rdi)
         : 630    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:907
    0.00 :   1a0e59: vmovdqa %ymm3,0x60(%rdi)
         : 632    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:908
    0.00 :   1a0e5e: sub    $0xffffffffffffff80,%rdi
         : 634    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:909
    0.00 :   1a0e62: cmp    $0x80,%edx
         : 636    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:910
    0.00 :   1a0e68: ja     1a0e15 <__memcpy_avx_unaligned_erms+0x655>
         : 638    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:914
    0.00 :   1a0e6a: vmovdqu -0x80(%rsi,%rdx,1),%ymm0
         : 640    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:915
    0.00 :   1a0e70: vmovdqu -0x60(%rsi,%rdx,1),%ymm1
         : 642    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:916
    0.00 :   1a0e76: vmovdqu -0x40(%rsi,%rdx,1),%ymm2
         : 644    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:917
    0.00 :   1a0e7c: vmovdqu -0x20(%rsi,%rdx,1),%ymm3
         : 646    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:919
    0.00 :   1a0e82: vmovdqu %ymm0,-0x80(%rdi,%rdx,1)
         : 648    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:920
    0.00 :   1a0e88: vmovdqu %ymm1,-0x60(%rdi,%rdx,1)
         : 650    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:921
    0.00 :   1a0e8e: vmovdqu %ymm2,-0x40(%rdi,%rdx,1)
         : 652    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:922
    0.00 :   1a0e94: vmovdqu %ymm3,-0x20(%rdi,%rdx,1)
         : 654    ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:923
    0.00 :   1a0e9a: vzeroupper
    0.00 :   1a0e9d: ret
 Percent |	Source code & Disassembly of minisat for cycles:u (55 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000dbd0 <Minisat::Solver::detachClause(unsigned int, bool)>:
         : 6    Minisat::Solver::detachClause(unsigned int, bool):
         : 171  watches[~c[1]].push(Watcher(cr, c[0]));
         : 172  if (c.learnt()) learnts_literals += c.size();
         : 173  else            clauses_literals += c.size(); }
         :
         :
         : 176  void Solver::detachClause(CRef cr, bool strict) {
    0.00 :   dbd0:   endbr64
    0.00 :   dbd4:   push   %r15
    1.85 :   dbd6:   push   %r14
    0.00 :   dbd8:   push   %r13
    0.00 :   dbda:   push   %r12
    0.00 :   dbdc:   push   %rbp
    0.00 :   dbdd:   push   %rbx
    1.84 :   dbde:   sub    $0x18,%rsp
         : 185  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   dbe2:   cmp    0x230(%rdi),%esi
    0.00 :   dbe8:   jae    de52 <Minisat::Solver::detachClause(unsigned int, bool)+0x282>
    0.00 :   dbee:   mov    0x228(%rdi),%rcx
    0.00 :   dbf5:   mov    %esi,%eax
    0.00 :   dbf7:   mov    %rdi,%rbp
    1.83 :   dbfa:   mov    %esi,%ebx
    1.85 :   dbfc:   lea    (%rcx,%rax,4),%r13
         : 76   Minisat::Clause::size() const:
         : 162  for (int i = 0; i < size(); i++)
         : 163  abstraction |= 1 << (var(data[i].lit) & 31);
         : 164  data[header.size].abs = abstraction;  }
         :
         :
         : 167  int          size        ()      const   { return header.size; }
    0.00 :   dc00:   mov    0x0(%r13),%eax
    7.37 :   dc04:   mov    %eax,%r12d
    0.00 :   dc07:   shr    $0x5,%r12d
         : 171  Minisat::Solver::detachClause(unsigned int, bool):
         : 173  const Clause& c = ca[cr];
         : 174  assert(c.size() > 1);
    0.00 :   dc0b:   cmp    $0x3f,%eax
    0.00 :   dc0e:   jbe    de33 <Minisat::Solver::detachClause(unsigned int, bool)+0x263>
         : 177  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   dc14:   mov    0x4(%r13),%r14d
    0.00 :   dc18:   xor    $0x1,%r14d
         : 62   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dc1c:   movslq %r14d,%rax
         : 94   Minisat::Solver::detachClause(unsigned int, bool):
         :
         : 176  if (strict){
    0.00 :   dc1f:   test   %dl,%dl
    0.00 :   dc21:   jne    dd00 <Minisat::Solver::detachClause(unsigned int, bool)+0x130>
         : 179  Minisat::vec<char>::operator[](int):
    0.00 :   dc27:   mov    0x148(%rdi),%rdx
    5.00 :   dc2e:   add    %rdx,%rax
         : 89   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
         : 274  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
         :
         : 276  void  cleanAll  ();
         : 277  void  clean     (const Idx& idx);
         : 278  void  smudge    (const Idx& idx){
         : 279  if (dirty[toInt(idx)] == 0){
    1.84 :   dc31:   cmpb   $0x0,(%rax)
   20.19 :   dc34:   je     dcc0 <Minisat::Solver::detachClause(unsigned int, bool)+0xf0>
         : 282  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   dc3a:   mov    0x8(%r13),%ebx
    1.84 :   dc3e:   xor    $0x1,%ebx
         : 62   Minisat::vec<char>::operator[](int):
    0.00 :   dc41:   movslq %ebx,%rax
    0.00 :   dc44:   add    %rax,%rdx
         : 89   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
         : 274  if (dirty[toInt(idx)] == 0){
    0.00 :   dc47:   cmpb   $0x0,(%rdx)
    5.52 :   dc4a:   je     dc90 <Minisat::Solver::detachClause(unsigned int, bool)+0xc0>
         : 277  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   dc4c:   mov    0x0(%r13),%r12d
    5.49 :   dc50:   shr    $0x5,%r12d
         : 165  Minisat::Solver::detachClause(unsigned int, bool):
         : 184  // Lazy detaching: (NOTE! Must clean all watcher lists before garbage collecting this clause)
         : 185  watches.smudge(~c[0]);
         : 186  watches.smudge(~c[1]);
         : 187  }
         :
         : 189  if (c.learnt()) learnts_literals -= c.size();
    0.00 :   dc54:   testb  $0x4,0x0(%r13)
    0.00 :   dc59:   jne    dc78 <Minisat::Solver::detachClause(unsigned int, bool)+0xa8>
         : 185  else            clauses_literals -= c.size(); }
    1.71 :   dc5b:   sub    %r12,0xd0(%rbp)
    0.00 :   dc62:   add    $0x18,%rsp
    0.00 :   dc66:   pop    %rbx
    0.00 :   dc67:   pop    %rbp
    0.00 :   dc68:   pop    %r12
    0.00 :   dc6a:   pop    %r13
    0.00 :   dc6c:   pop    %r14
    0.00 :   dc6e:   pop    %r15
    0.00 :   dc70:   ret
    0.00 :   dc71:   nopl   0x0(%rax)
         : 184  if (c.learnt()) learnts_literals -= c.size();
    1.84 :   dc78:   sub    %r12,0xd8(%rbp)
         : 185  else            clauses_literals -= c.size(); }
    0.00 :   dc7f:   add    $0x18,%rsp
    1.82 :   dc83:   pop    %rbx
    3.69 :   dc84:   pop    %rbp
    1.85 :   dc85:   pop    %r12
    1.83 :   dc87:   pop    %r13
    0.00 :   dc89:   pop    %r14
    0.00 :   dc8b:   pop    %r15
    0.00 :   dc8d:   ret
    0.00 :   dc8e:   xchg   %ax,%ax
         : 195  Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
         : 275  dirty[toInt(idx)] = 1;
    0.00 :   dc90:   movb   $0x1,(%rdx)
         : 277  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
   25.34 :   dc93:   movslq 0x160(%rbp),%rax
    0.00 :   dc9a:   cmp    0x164(%rbp),%eax
    0.00 :   dca0:   je     de18 <Minisat::Solver::detachClause(unsigned int, bool)+0x248>
    0.00 :   dca6:   mov    0x158(%rbp),%rdx
    0.00 :   dcad:   lea    0x1(%rax),%ecx
    0.00 :   dcb0:   mov    %ecx,0x160(%rbp)
    1.84 :   dcb6:   mov    %ebx,(%rdx,%rax,4)
    3.63 :   dcb9:   jmp    dc4c <Minisat::Solver::detachClause(unsigned int, bool)+0x7c>
    0.00 :   dcbb:   nopl   0x0(%rax,%rax,1)
         : 84   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
    0.00 :   dcc0:   movb   $0x1,(%rax)
         : 276  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   dcc3:   movslq 0x160(%rdi),%rax
    0.00 :   dcca:   cmp    0x164(%rdi),%eax
    0.00 :   dcd0:   je     ddf8 <Minisat::Solver::detachClause(unsigned int, bool)+0x228>
    0.00 :   dcd6:   mov    0x158(%rbp),%rdx
    0.00 :   dcdd:   lea    0x1(%rax),%ecx
    0.00 :   dce0:   mov    %ecx,0x160(%rbp)
    1.83 :   dce6:   mov    %r14d,(%rdx,%rax,4)
         : 81   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dcea:   mov    0x148(%rbp),%rdx
         : 89   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   dcf1:   jmp    dc3a <Minisat::Solver::detachClause(unsigned int, bool)+0x6a>
    0.00 :   dcf6:   cs nopw 0x0(%rax,%rax,1)
         : 77   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dd00:   mov    0x138(%rdi),%r15
    0.00 :   dd07:   shl    $0x4,%rax
         : 90   Minisat::Clause::operator[](int) const:
         : 178  Lit          operator [] (int i) const   { return data[i].lit; }
    0.00 :   dd0b:   mov    0x8(%r13),%r14d
         : 180  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
    0.00 :   dd0f:   lea    (%r15,%rax,1),%r8
         : 88   Minisat::vec<Minisat::Solver::Watcher>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   dd13:   mov    0x8(%r8),%r9d
         : 65   Minisat::Solver::detachClause(unsigned int, bool):
         :
         : 40   template<class V, class T>
         : 41   static inline void remove(V& ts, const T& t)
         : 42   {
         : 43   int j = 0;
         : 44   for (; j < ts.size() && ts[j] != t; j++);
    0.00 :   dd17:   test   %r9d,%r9d
         : 46   remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>():
    0.00 :   dd1a:   jle    ddf0 <Minisat::Solver::detachClause(unsigned int, bool)+0x220>
         : 40   Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dd20:   mov    (%r8),%rdi
    0.00 :   dd23:   movslq %r9d,%rsi
    0.00 :   dd26:   xor    %eax,%eax
    0.00 :   dd28:   jmp    dd3d <Minisat::Solver::detachClause(unsigned int, bool)+0x16d>
    0.00 :   dd2a:   nopw   0x0(%rax,%rax,1)
         : 93   remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>():
    0.00 :   dd30:   add    $0x1,%rax
    0.00 :   dd34:   cmp    %rax,%rsi
    0.00 :   dd37:   je     ddf0 <Minisat::Solver::detachClause(unsigned int, bool)+0x220>
    0.00 :   dd3d:   mov    %eax,%edx
    0.00 :   dd3f:   cmp    (%rdi,%rax,8),%ebx
    0.00 :   dd42:   jne    dd30 <Minisat::Solver::detachClause(unsigned int, bool)+0x160>
         : 41   assert(j < ts.size());
         : 42   for (; j < ts.size()-1; j++) ts[j] = ts[j+1];
    0.00 :   dd44:   lea    -0x1(%r9),%eax
    0.00 :   dd48:   mov    %eax,0xc(%rsp)
    0.00 :   dd4c:   cmp    %edx,%eax
    0.00 :   dd4e:   jle    dd7b <Minisat::Solver::detachClause(unsigned int, bool)+0x1ab>
    0.00 :   dd50:   movslq %edx,%rax
    0.00 :   dd53:   sub    $0x2,%r9d
    0.00 :   dd57:   mov    %r8,(%rsp)
    0.00 :   dd5b:   shl    $0x3,%rax
    0.00 :   dd5f:   sub    %edx,%r9d
    0.00 :   dd62:   lea    0x8(%rdi,%rax,1),%rsi
    0.00 :   dd67:   lea    0x8(,%r9,8),%rdx
    0.00 :   dd6f:   add    %rax,%rdi
    0.00 :   dd72:   call   2510 <memmove@plt>
    0.00 :   dd77:   mov    (%rsp),%r8
         : 57   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   dd7b:   xor    $0x1,%r14d
         : 61   Minisat::vec<Minisat::Solver::Watcher>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.00 :   dd7f:   mov    0xc(%rsp),%eax
         : 78   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dd83:   movslq %r14d,%r14
    0.00 :   dd86:   shl    $0x4,%r14
         : 90   Minisat::vec<Minisat::Solver::Watcher>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.00 :   dd8a:   mov    %eax,0x8(%r8)
         : 78   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dd8e:   add    %r15,%r14
         : 89   Minisat::vec<Minisat::Solver::Watcher>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   dd91:   mov    0x8(%r14),%esi
         : 65   Minisat::Solver::detachClause(unsigned int, bool):
         : 39   for (; j < ts.size() && ts[j] != t; j++);
    0.00 :   dd95:   test   %esi,%esi
         : 41   remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>():
    0.00 :   dd97:   jle    ddf0 <Minisat::Solver::detachClause(unsigned int, bool)+0x220>
         : 40   Minisat::vec<Minisat::Solver::Watcher>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dd99:   mov    (%r14),%rdi
    0.00 :   dd9c:   movslq %esi,%rcx
    0.00 :   dd9f:   xor    %eax,%eax
    0.00 :   dda1:   jmp    ddb1 <Minisat::Solver::detachClause(unsigned int, bool)+0x1e1>
    0.00 :   dda3:   nopl   0x0(%rax,%rax,1)
         : 93   remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>():
    0.00 :   dda8:   add    $0x1,%rax
    0.00 :   ddac:   cmp    %rcx,%rax
    0.00 :   ddaf:   je     ddf0 <Minisat::Solver::detachClause(unsigned int, bool)+0x220>
    0.00 :   ddb1:   mov    %eax,%edx
    0.00 :   ddb3:   cmp    (%rdi,%rax,8),%ebx
    0.00 :   ddb6:   jne    dda8 <Minisat::Solver::detachClause(unsigned int, bool)+0x1d8>
         : 41   for (; j < ts.size()-1; j++) ts[j] = ts[j+1];
    0.00 :   ddb8:   lea    -0x1(%rsi),%ebx
    0.00 :   ddbb:   cmp    %ebx,%eax
    0.00 :   ddbd:   jge    dddf <Minisat::Solver::detachClause(unsigned int, bool)+0x20f>
    0.00 :   ddbf:   cltq
    0.00 :   ddc1:   sub    $0x2,%esi
    0.00 :   ddc4:   shl    $0x3,%rax
    0.00 :   ddc8:   sub    %edx,%esi
    0.00 :   ddca:   lea    0x8(,%rsi,8),%rdx
    0.00 :   ddd2:   lea    0x8(%rdi,%rax,1),%rsi
    0.00 :   ddd7:   add    %rax,%rdi
    0.00 :   ddda:   call   2510 <memmove@plt>
         : 53   Minisat::vec<Minisat::Solver::Watcher>::pop():
         : 76   void     pop   (void)              { assert(sz > 0); sz--, data[sz].~T(); }
    0.00 :   dddf:   mov    %ebx,0x8(%r14)
         : 78   Minisat::Solver::detachClause(unsigned int, bool):
    0.00 :   dde3:   jmp    dc54 <Minisat::Solver::detachClause(unsigned int, bool)+0x84>
    0.00 :   dde8:   nopl   0x0(%rax,%rax,1)
         : 78   remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>():
    0.00 :   ddf0:   call   c3b0 <void Minisat::remove<Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::Watcher>(Minisat::vec<Minisat::Solver::Watcher>&, Minisat::Solver::Watcher const&) [clone .part.0]>
    0.00 :   ddf5:   nopl   (%rax)
         : 78   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   ddf8:   lea    0x1(%rax),%esi
         : 76   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
         : 276  dirties.push(idx);
    0.00 :   ddfb:   lea    0x158(%rdi),%rdi
         : 278  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   de02:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   de07:   movslq 0x160(%rbp),%rax
    0.00 :   de0e:   jmp    dcd6 <Minisat::Solver::detachClause(unsigned int, bool)+0x106>
    0.00 :   de13:   nopl   0x0(%rax,%rax,1)
    0.00 :   de18:   lea    0x1(%rax),%esi
         : 79   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::smudge(Minisat::Lit const&):
    0.00 :   de1b:   lea    0x158(%rbp),%rdi
         : 277  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   de22:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   de27:   movslq 0x160(%rbp),%rax
    0.00 :   de2e:   jmp    dca6 <Minisat::Solver::detachClause(unsigned int, bool)+0xd6>
         : 77   Minisat::Solver::detachClause(unsigned int, bool):
         : 173  assert(c.size() > 1);
    0.00 :   de33:   lea    0x6d3e(%rip),%rcx        # 14b78 <Minisat::lit_Undef+0x420>
    0.00 :   de3a:   mov    $0xad,%edx
    0.00 :   de3f:   lea    0x7301(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   de46:   lea    0x734a(%rip),%rdi        # 15197 <Minisat::lit_Undef+0xa3f>
    0.00 :   de4d:   call   23b0 <__assert_fail@plt>
         : 179  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   de52:   lea    0x5bdf(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   de59:   mov    $0x3f,%edx
    0.00 :   de5e:   lea    0x5bb5(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   de65:   lea    0x65ac(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   de6c:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (47 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0f00 <__memset_avx2_unaligned>:
         : 6      __memset_avx2_unaligned():
         : 7      ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:125
   55.33 :   1a0f00: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:126
    2.14 :   1a0f04: vmovd  %esi,%xmm0
    2.12 :   1a0f08: mov    %rdi,%rax
    0.00 :   1a0f0b: vpbroadcastb %xmm0,%ymm0
         : 13     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:132
    4.25 :   1a0f10: cmp    $0x20,%rdx
         : 15     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:133
    0.00 :   1a0f14: jb     1a1060 <__memset_avx2_unaligned_erms+0xe0>
         : 17     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:134
    0.00 :   1a0f1a: cmp    $0x40,%rdx
         : 19     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:135
    8.51 :   1a0f1e: ja     1a0fc9 <__memset_avx2_unaligned_erms+0x49>
         : 21     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:137
    0.00 :   1a0f24: vmovdqu %ymm0,-0x20(%rdi,%rdx,1)
         : 23     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:138
   25.53 :   1a0f2a: vmovdqu %ymm0,(%rdi)
         : 25     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:139
    2.13 :   1a0f2e: vzeroupper
    0.00 :   1a0f31: ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (60 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000c0d0 <_dl_lookup_symbol_x>:
         : 6    _dl_lookup_symbol_x():
         : 7    ./elf/dl-lookup.c:840
    0.00 :   c0d0:   endbr64
    0.00 :   c0d4:   push   %r15
    0.00 :   c0d6:   push   %r14
    0.00 :   c0d8:   push   %r13
    0.00 :   c0da:   push   %r12
    0.00 :   c0dc:   mov    %rdi,%r12
    0.00 :   c0df:   push   %rbp
    0.00 :   c0e0:   mov    %rdx,%rbp
    0.00 :   c0e3:   push   %rbx
    0.00 :   c0e4:   sub    $0x98,%rsp
         : 18   ./elf/dl-lookup.c:850
    0.00 :   c0eb:   mov    0xd0(%rsp),%eax
         : 20   ./elf/dl-lookup.c:840
    0.00 :   c0f2:   mov    %rsi,0x8(%rsp)
    0.00 :   c0f7:   mov    %rcx,0x18(%rsp)
         : 23   ./elf/dl-lookup.c:850
    0.00 :   c0fc:   and    $0x2,%eax
         : 25   ./elf/dl-lookup.c:840
    0.00 :   c0ff:   mov    %r8,(%rsp)
         : 27   ./elf/dl-lookup.c:850
    0.00 :   c103:   mov    %eax,0x28(%rsp)
         : 29   is_nodelete():
         : 30   ./elf/dl-lookup.c:204
    0.00 :   c107:   mov    0xd0(%rsp),%eax
         : 32   _dl_lookup_symbol_x():
         : 33   ./elf/dl-lookup.c:840
    0.00 :   c10e:   mov    %r9d,0x14(%rsp)
         : 35   is_nodelete():
         : 36   ./elf/dl-lookup.c:204
    0.00 :   c113:   and    $0x8,%eax
    0.00 :   c116:   mov    %eax,0x30(%rsp)
    0.00 :   c11a:   mov    0xd0(%rsp),%eax
    0.00 :   c121:   and    $0x4,%eax
    0.00 :   c124:   mov    %eax,0x38(%rsp)
         : 42   dl_new_hash():
         : 43   ./elf/dl-lookup.c:581
    0.00 :   c128:   movzbl (%r12),%edx
   33.24 :   c12d:   test   %dl,%dl
    0.00 :   c12f:   je     c358 <_dl_lookup_symbol_x+0x288>
    0.00 :   c135:   mov    %r12,%rcx
         : 48   ./elf/dl-lookup.c:580
    0.00 :   c138:   mov    $0x1505,%ebx
    0.00 :   c13d:   nopl   (%rax)
         : 51   ./elf/dl-lookup.c:582
    0.00 :   c140:   mov    %rbx,%rax
         : 53   ./elf/dl-lookup.c:581
    0.00 :   c143:   add    $0x1,%rcx
         : 55   ./elf/dl-lookup.c:582
    0.00 :   c147:   shl    $0x5,%rax
    6.21 :   c14b:   add    %rax,%rbx
   26.61 :   c14e:   add    %rdx,%rbx
         : 59   ./elf/dl-lookup.c:581
   14.39 :   c151:   movzbl (%rcx),%edx
   10.20 :   c154:   test   %dl,%dl
    0.00 :   c156:   jne    c140 <_dl_lookup_symbol_x+0x70>
         : 63   ./elf/dl-lookup.c:583
    0.00 :   c158:   mov    %ebx,%ebx
         : 65   _dl_lookup_symbol_x():
         : 66   ./elf/dl-lookup.c:846
    3.40 :   c15a:   addq   $0x1,0x2e976(%rip)        # 3aad8 <_rtld_global+0xa98>
         : 68   ./elf/dl-lookup.c:842
    1.31 :   c162:   mov    $0xffffffff,%eax
         : 70   ./elf/dl-lookup.c:843
    0.00 :   c167:   pxor   %xmm0,%xmm0
         : 72   ./elf/dl-lookup.c:850
    0.00 :   c16b:   cmpq   $0x0,(%rsp)
         : 74   ./elf/dl-lookup.c:842
    0.00 :   c170:   mov    %rax,0x40(%rsp)
         : 76   ./elf/dl-lookup.c:843
    0.00 :   c175:   movaps %xmm0,0x50(%rsp)
         : 78   ./elf/dl-lookup.c:850
    0.00 :   c17a:   je     c18a <_dl_lookup_symbol_x+0xba>
         : 80   ./elf/dl-lookup.c:850 (discriminator 1)
    0.00 :   c17c:   mov    0x28(%rsp),%r13d
    0.00 :   c181:   test   %r13d,%r13d
    0.00 :   c184:   jne    cdec <_dl_lookup_symbol_x+0xd1c>
         : 84   ./elf/dl-lookup.c:853
    0.00 :   c18a:   cmpq   $0x0,0xd8(%rsp)
         : 86   ./elf/dl-lookup.c:855
    0.00 :   c193:   mov    0x18(%rsp),%rax
    0.00 :   c198:   mov    (%rax),%r9
         : 89   ./elf/dl-lookup.c:853
    0.00 :   c19b:   jne    c400 <_dl_lookup_symbol_x+0x330>
         : 91   ./elf/dl-lookup.c:859
    0.00 :   c1a1:   test   %r9,%r9
    0.00 :   c1a4:   je     c362 <_dl_lookup_symbol_x+0x292>
         : 94   ./elf/dl-lookup.c:852
    0.00 :   c1aa:   movq   $0x0,0x20(%rsp)
    0.00 :   c1b3:   mov    %rax,%r13
    0.00 :   c1b6:   mov    0x20(%rsp),%rax
    0.00 :   c1bb:   lea    0x50(%rsp),%r15
    0.00 :   c1c0:   lea    0x40(%rsp),%r14
    0.00 :   c1c5:   jmp    c1df <_dl_lookup_symbol_x+0x10f>
    0.00 :   c1c7:   nopw   0x0(%rax,%rax,1)
         : 102  ./elf/dl-lookup.c:859 (discriminator 2)
    0.00 :   c1d0:   mov    0x8(%r13),%r9
    0.00 :   c1d4:   add    $0x8,%r13
    0.00 :   c1d8:   xor    %eax,%eax
    0.00 :   c1da:   test   %r9,%r9
    0.00 :   c1dd:   je     c219 <_dl_lookup_symbol_x+0x149>
         : 108  ./elf/dl-lookup.c:860
    0.00 :   c1df:   push   0x8(%rsp)
    0.00 :   c1e3:   mov    0x1c(%rsp),%edi
    0.00 :   c1e7:   mov    %r15,%r8
    0.00 :   c1ea:   mov    %r14,%rdx
    0.00 :   c1ed:   mov    0x0(%rbp),%rcx
    0.00 :   c1f1:   push   %rdi
    0.00 :   c1f2:   mov    %r12,%rdi
    0.00 :   c1f5:   push   0xe8(%rsp)
    0.00 :   c1fc:   mov    0xe8(%rsp),%esi
    0.00 :   c203:   push   %rsi
    0.00 :   c204:   mov    %rbx,%rsi
    0.00 :   c207:   push   0x20(%rsp)
    0.00 :   c20b:   push   %rax
    0.00 :   c20c:   call   b3f0 <do_lookup_x>
    0.00 :   c211:   add    $0x30,%rsp
    0.00 :   c215:   test   %eax,%eax
    0.00 :   c217:   je     c1d0 <_dl_lookup_symbol_x+0x100>
         : 126  ./elf/dl-lookup.c:888
    0.00 :   c219:   mov    0x0(%rbp),%rcx
         : 128  ./elf/dl-lookup.c:865
    0.00 :   c21d:   mov    0x50(%rsp),%rdx
         : 130  ./elf/dl-lookup.c:888
    0.00 :   c222:   mov    %rcx,%rax
         : 132  ./elf/dl-lookup.c:865
    0.00 :   c225:   test   %rdx,%rdx
    0.00 :   c228:   je     c366 <_dl_lookup_symbol_x+0x296>
         : 135  ./elf/dl-lookup.c:889
    0.00 :   c22e:   test   %rcx,%rcx
    0.00 :   c231:   je     c23e <_dl_lookup_symbol_x+0x16e>
         : 138  ./elf/dl-lookup.c:889 (discriminator 1)
    0.00 :   c233:   movzbl 0x5(%rcx),%eax
    1.19 :   c237:   and    $0x3,%eax
    0.00 :   c23a:   cmp    $0x3,%al
    1.93 :   c23c:   je     c2a0 <_dl_lookup_symbol_x+0x1d0>
         : 143  ./elf/dl-lookup.c:896
    0.00 :   c23e:   mov    0x58(%rsp),%r15
         : 145  ./elf/dl-lookup.c:889
    0.00 :   c243:   xor    %ebx,%ebx
         : 147  ./elf/dl-lookup.c:929
    0.00 :   c245:   movzbl 0x31c(%r15),%eax
    0.00 :   c24d:   and    $0x3,%eax
    0.00 :   c250:   cmp    $0x2,%al
    0.00 :   c252:   je     c624 <_dl_lookup_symbol_x+0x554>
         : 152  _dl_debug_bindings():
         : 153  ./elf/dl-lookup.c:1008
    0.00 :   c258:   mov    0x50(%rsp),%r10
    0.00 :   c25d:   mov    %r15,%r13
         : 156  _dl_lookup_symbol_x():
         : 157  ./elf/dl-lookup.c:943
    0.00 :   c260:   mov    0x3e4(%r15),%edi
    0.00 :   c267:   test   %edi,%edi
    0.00 :   c269:   je     c440 <_dl_lookup_symbol_x+0x370>
         : 161  ./elf/dl-lookup.c:946
    0.00 :   c26f:   mov    0x2d86b(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c275:   test   $0x804,%eax
    0.00 :   c27a:   jne    c450 <_dl_lookup_symbol_x+0x380>
         : 165  ./elf/dl-lookup.c:884 (discriminator 1)
    0.00 :   c280:   mov    %r10,0x0(%rbp)
         : 167  ./elf/dl-lookup.c:953 (discriminator 1)
    0.00 :   c284:   add    $0x98,%rsp
    1.52 :   c28b:   mov    %r13,%rax
    0.00 :   c28e:   pop    %rbx
    0.00 :   c28f:   pop    %rbp
    0.00 :   c290:   pop    %r12
    0.00 :   c292:   pop    %r13
    0.00 :   c294:   pop    %r14
    0.00 :   c296:   pop    %r15
    0.00 :   c298:   ret
    0.00 :   c299:   nopl   0x0(%rax)
         : 178  ./elf/dl-lookup.c:894
    0.00 :   c2a0:   cmpl   $0x1,0x14(%rsp)
    0.00 :   c2a5:   je     c6ff <_dl_lookup_symbol_x+0x62f>
         : 181  ./elf/dl-lookup.c:906
    0.00 :   c2ab:   mov    0x18(%rsp),%rax
         : 183  ./elf/dl-lookup.c:904
    0.00 :   c2b0:   pxor   %xmm0,%xmm0
    0.00 :   c2b4:   movaps %xmm0,0x70(%rsp)
         : 186  ./elf/dl-lookup.c:906
    0.00 :   c2b9:   mov    (%rax),%r9
    0.00 :   c2bc:   test   %r9,%r9
    0.00 :   c2bf:   je     c6f8 <_dl_lookup_symbol_x+0x628>
         : 190  ./elf/dl-lookup.c:912
    0.00 :   c2c5:   cmpl   $0x4,0x14(%rsp)
    0.00 :   c2ca:   lea    0x70(%rsp),%r8
    0.00 :   c2cf:   mov    0x20(%rsp),%rdx
    0.00 :   c2d4:   mov    %rax,%r15
    0.00 :   c2d7:   sete   0x3c(%rsp)
    0.00 :   c2dc:   mov    %r8,%r13
    0.00 :   c2df:   jmp    c333 <_dl_lookup_symbol_x+0x263>
    0.00 :   c2e1:   nopl   0x0(%rax)
         : 199  ./elf/dl-lookup.c:907 (discriminator 3)
    0.00 :   c2e8:   push   $0x0
    0.00 :   c2ea:   mov    %r13,%r8
    0.00 :   c2ed:   mov    %rbx,%rsi
    0.00 :   c2f0:   mov    %r12,%rdi
    0.00 :   c2f3:   push   %rax
    0.00 :   c2f4:   push   0xe8(%rsp)
    0.00 :   c2fb:   mov    0xe8(%rsp),%eax
    0.00 :   c302:   push   %rax
    0.00 :   c303:   push   0x20(%rsp)
    0.00 :   c307:   push   %rdx
    0.00 :   c308:   mov    %r14,%rdx
    0.00 :   c30b:   call   b3f0 <do_lookup_x>
    0.00 :   c310:   add    $0x30,%rsp
    0.00 :   c314:   test   %eax,%eax
    0.00 :   c316:   jne    c6c7 <_dl_lookup_symbol_x+0x5f7>
         : 215  ./elf/dl-lookup.c:906 (discriminator 2)
    0.00 :   c31c:   mov    0x8(%r15),%r9
    0.00 :   c320:   add    $0x8,%r15
    0.00 :   c324:   test   %r9,%r9
    0.00 :   c327:   je     c6c7 <_dl_lookup_symbol_x+0x5f7>
         : 220  ./elf/dl-lookup.c:919
    0.00 :   c32d:   mov    0x0(%rbp),%rcx
         : 222  ./elf/dl-lookup.c:906
    0.00 :   c331:   xor    %edx,%edx
         : 224  ./elf/dl-lookup.c:907
    0.00 :   c333:   movzbl 0x4(%rcx),%eax
    0.00 :   c337:   and    $0xf,%eax
         : 227  ./elf/dl-lookup.c:912
    0.00 :   c33a:   cmp    $0x1,%al
    0.00 :   c33c:   jne    c34a <_dl_lookup_symbol_x+0x27a>
    0.00 :   c33e:   cmpb   $0x0,0x3c(%rsp)
         : 231  ./elf/dl-lookup.c:907
    0.00 :   c343:   mov    $0x4,%eax
         : 233  ./elf/dl-lookup.c:912
    0.00 :   c348:   jne    c2e8 <_dl_lookup_symbol_x+0x218>
         : 235  ./elf/dl-lookup.c:907
    0.00 :   c34a:   mov    $0x1,%eax
    0.00 :   c34f:   jmp    c2e8 <_dl_lookup_symbol_x+0x218>
    0.00 :   c351:   nopl   0x0(%rax)
         : 239  dl_new_hash():
         : 240  ./elf/dl-lookup.c:581
    0.00 :   c358:   mov    $0x1505,%ebx
    0.00 :   c35d:   jmp    c15a <_dl_lookup_symbol_x+0x8a>
    0.00 :   c362:   mov    0x0(%rbp),%rax
         : 244  _dl_lookup_symbol_x():
         : 245  ./elf/dl-lookup.c:867
    0.00 :   c366:   test   %rax,%rax
    0.00 :   c369:   je     c376 <_dl_lookup_symbol_x+0x2a6>
         : 248  ./elf/dl-lookup.c:867 (discriminator 1)
    0.00 :   c36b:   movzbl 0x4(%rax),%eax
    0.00 :   c36f:   shr    $0x4,%al
    0.00 :   c372:   cmp    $0x2,%al
    0.00 :   c374:   je     c3f5 <_dl_lookup_symbol_x+0x325>
         : 253  ./elf/dl-lookup.c:868
    0.00 :   c376:   testb  $0x1,0x2d764(%rip)        # 39ae1 <_rtld_global_ro+0x1>
    0.00 :   c37d:   jne    c3f5 <_dl_lookup_symbol_x+0x325>
         : 256  ./elf/dl-lookup.c:871
    0.00 :   c37f:   mov    0x8(%rsp),%rax
    0.00 :   c384:   test   %rax,%rax
    0.00 :   c387:   je     c81f <_dl_lookup_symbol_x+0x74f>
         : 260  ./elf/dl-lookup.c:871 (discriminator 1)
    0.00 :   c38d:   mov    0x8(%rax),%rsi
         : 262  ./elf/dl-lookup.c:872 (discriminator 1)
    0.00 :   c391:   cmpq   $0x0,(%rsp)
         : 264  ./elf/dl-lookup.c:878 (discriminator 1)
    0.00 :   c396:   movzbl (%rsi),%eax
         : 266  ./elf/dl-lookup.c:872 (discriminator 1)
    0.00 :   c399:   je     c947 <_dl_lookup_symbol_x+0x877>
         : 268  ./elf/dl-lookup.c:873
    0.00 :   c39f:   mov    (%rsp),%rdi
         : 270  ./elf/dl-lookup.c:874
    0.00 :   c3a3:   lea    0x22b3f(%rip),%rdx        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
         : 272  ./elf/dl-lookup.c:872
    0.00 :   c3aa:   lea    0x21ae7(%rip),%r8        # 2de98 <_sys_errnameidx+0x598>
         : 274  ./elf/dl-lookup.c:873
    0.00 :   c3b1:   mov    (%rdi),%r9
    0.00 :   c3b4:   test   %r9,%r9
         : 277  ./elf/dl-lookup.c:874
    0.00 :   c3b7:   cmove  %rdx,%r9
         : 279  ./elf/dl-lookup.c:877
    0.00 :   c3bb:   test   %al,%al
    0.00 :   c3bd:   je     c84c <_dl_lookup_symbol_x+0x77c>
         : 282  ./elf/dl-lookup.c:877 (discriminator 3)
    0.00 :   c3c3:   lea    0x70(%rsp),%r13
    0.00 :   c3c8:   mov    %r12,%rcx
    0.00 :   c3cb:   lea    0x21ae2(%rip),%rdx        # 2deb4 <_sys_errnameidx+0x5b4>
    0.00 :   c3d2:   xor    %eax,%eax
    0.00 :   c3d4:   mov    %r13,%rdi
    0.00 :   c3d7:   call   4ba0 <_dl_exception_create_format>
         : 289  ./elf/dl-lookup.c:881 (discriminator 3)
    0.00 :   c3dc:   xor    %edi,%edi
    0.00 :   c3de:   lea    0x21ae8(%rip),%rdx        # 2decd <_sys_errnameidx+0x5cd>
    0.00 :   c3e5:   mov    %r13,%rsi
    0.00 :   c3e8:   call   1d1c0 <_dl_signal_cexception>
         : 294  ./elf/dl-lookup.c:882 (discriminator 3)
    0.00 :   c3ed:   mov    %r13,%rdi
    0.00 :   c3f0:   call   5010 <_dl_exception_free>
         : 297  ./elf/dl-lookup.c:885
    0.00 :   c3f5:   xor    %r10d,%r10d
    0.00 :   c3f8:   xor    %r13d,%r13d
    0.00 :   c3fb:   jmp    c280 <_dl_lookup_symbol_x+0x1b0>
         : 301  ./elf/dl-lookup.c:855
    0.00 :   c400:   mov    (%r9),%rax
    0.00 :   c403:   mov    (%rax),%rsi
    0.00 :   c406:   cmp    %rsi,0xd8(%rsp)
    0.00 :   c40e:   je     c905 <_dl_lookup_symbol_x+0x835>
         : 306  ./elf/dl-lookup.c:852
    0.00 :   c414:   mov    0xd8(%rsp),%rcx
    0.00 :   c41c:   xor    %edx,%edx
    0.00 :   c41e:   xchg   %ax,%ax
         : 310  ./elf/dl-lookup.c:856
    0.00 :   c420:   add    $0x1,%rdx
         : 312  ./elf/dl-lookup.c:855
    0.00 :   c424:   cmp    %rcx,(%rax,%rdx,8)
    0.00 :   c428:   jne    c420 <_dl_lookup_symbol_x+0x350>
    0.00 :   c42a:   mov    %rdx,0x20(%rsp)
    0.00 :   c42f:   mov    0x18(%rsp),%r13
    0.00 :   c434:   jmp    c1b6 <_dl_lookup_symbol_x+0xe6>
    0.00 :   c439:   nopl   0x0(%rax)
         : 319  ./elf/dl-lookup.c:944
    0.00 :   c440:   movl   $0x1,0x3e4(%r15)
    0.00 :   c44b:   jmp    c26f <_dl_lookup_symbol_x+0x19f>
         : 322  _dl_debug_bindings():
         : 323  ./elf/dl-lookup.c:964
    0.00 :   c450:   test   $0x4,%al
    0.00 :   c452:   je     c504 <_dl_lookup_symbol_x+0x434>
         : 326  ./elf/dl-lookup.c:969
    0.00 :   c458:   mov    0x8(%r13),%rcx
         : 328  ./elf/dl-lookup.c:966
    0.00 :   c45c:   test   %ebx,%ebx
    0.00 :   c45e:   mov    0x30(%r13),%r8
    0.00 :   c462:   lea    0x21a3a(%rip),%r9        # 2dea3 <_sys_errnameidx+0x5a3>
    0.00 :   c469:   lea    0x21a3d(%rip),%rax        # 2dead <_sys_errnameidx+0x5ad>
    0.00 :   c470:   cmove  %rax,%r9
    0.00 :   c474:   cmpb   $0x0,(%rcx)
    0.00 :   c477:   jne    c491 <_dl_lookup_symbol_x+0x3c1>
         : 336  ./elf/dl-lookup.c:969
    0.00 :   c479:   mov    0x2d640(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c480:   mov    (%rax),%rcx
    0.00 :   c483:   lea    0x21699(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c48a:   test   %rcx,%rcx
    0.00 :   c48d:   cmove  %rax,%rcx
         : 342  ./elf/dl-lookup.c:962
    0.00 :   c491:   mov    0x8(%rsp),%rax
    0.00 :   c496:   mov    0x8(%rax),%rsi
         : 345  ./elf/dl-lookup.c:966
    0.00 :   c49a:   mov    0x30(%rax),%rdx
    0.00 :   c49e:   cmpb   $0x0,(%rsi)
    0.00 :   c4a1:   jne    c4bb <_dl_lookup_symbol_x+0x3eb>
         : 349  ./elf/dl-lookup.c:967
    0.00 :   c4a3:   mov    0x2d616(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c4aa:   mov    (%rax),%rsi
    0.00 :   c4ad:   lea    0x2166f(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c4b4:   test   %rsi,%rsi
    0.00 :   c4b7:   cmove  %rax,%rsi
    0.00 :   c4bb:   mov    %r10,0x18(%rsp)
         : 356  ./elf/dl-lookup.c:966
    0.00 :   c4c0:   sub    $0x8,%rsp
    0.00 :   c4c4:   xor    %eax,%eax
    0.00 :   c4c6:   push   %r12
    0.00 :   c4c8:   lea    0x24619(%rip),%rdi        # 30ae8 <__PRETTY_FUNCTION__.10+0x250>
    0.00 :   c4cf:   call   fbc0 <_dl_debug_printf>
         : 362  ./elf/dl-lookup.c:972
    0.00 :   c4d4:   pop    %rcx
    0.00 :   c4d5:   pop    %rsi
    0.00 :   c4d6:   mov    (%rsp),%rax
    0.00 :   c4da:   mov    0x18(%rsp),%r10
    0.00 :   c4df:   test   %rax,%rax
    0.00 :   c4e2:   je     c8e2 <_dl_lookup_symbol_x+0x812>
         : 369  ./elf/dl-lookup.c:973
    0.00 :   c4e8:   mov    (%rax),%rsi
    0.00 :   c4eb:   lea    0x219ef(%rip),%rdi        # 2dee1 <_sys_errnameidx+0x5e1>
    0.00 :   c4f2:   xor    %eax,%eax
    0.00 :   c4f4:   call   fc70 <_dl_debug_printf_c>
         : 374  ./elf/dl-lookup.c:978
    0.00 :   c4f9:   mov    0x2d5e1(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c4ff:   mov    0x18(%rsp),%r10
    0.00 :   c504:   test   $0x8,%ah
    0.00 :   c507:   je     c280 <_dl_lookup_symbol_x+0x1b0>
         : 379  ./elf/dl-lookup.c:995
    0.00 :   c50d:   mov    0x2d8a4(%rip),%rax        # 39db8 <_rtld_global_ro+0x2d8>
         : 381  ./elf/dl-lookup.c:993
    0.00 :   c514:   pxor   %xmm0,%xmm0
         : 383  ./elf/dl-lookup.c:996
    0.00 :   c518:   mov    0x2db21(%rip),%rdx        # 3a040 <_rtld_global>
         : 385  ./elf/dl-lookup.c:993
    0.00 :   c51f:   movaps %xmm0,0x60(%rsp)
         : 387  ./elf/dl-lookup.c:995
    0.00 :   c524:   test   %rax,%rax
    0.00 :   c527:   je     c735 <_dl_lookup_symbol_x+0x665>
         : 390  ./elf/dl-lookup.c:996
    0.00 :   c52d:   cmp    %rdx,%rax
    0.00 :   c530:   je     c735 <_dl_lookup_symbol_x+0x665>
         : 393  ./elf/dl-lookup.c:1045
    0.00 :   c536:   test   %r10,%r10
    0.00 :   c539:   je     ca05 <_dl_lookup_symbol_x+0x935>
         : 396  ./elf/dl-lookup.c:1050
    0.00 :   c53f:   movzbl 0x4(%r10),%eax
         : 398  ./elf/dl-lookup.c:1049
    0.00 :   c544:   andl   $0x3,0x14(%rsp)
    0.00 :   c549:   and    $0xf,%eax
         : 401  ./elf/dl-lookup.c:1050
    0.00 :   c54c:   cmp    $0x6,%al
    0.00 :   c54e:   je     cac0 <_dl_lookup_symbol_x+0x9f0>
    0.00 :   c554:   xor    %edx,%edx
         : 405  ./elf/dl-lookup.c:1057
    0.00 :   c556:   mov    0x14(%rsp),%esi
    0.00 :   c55a:   mov    %esi,%ecx
    0.00 :   c55c:   or     $0x8,%ecx
    0.00 :   c55f:   cmp    $0xa,%al
    0.00 :   c561:   cmovne %esi,%ecx
    0.00 :   c564:   mov    %ecx,0x14(%rsp)
         : 412  ./elf/dl-lookup.c:1060
    0.00 :   c568:   test   %edx,%edx
    0.00 :   c56a:   je     c869 <_dl_lookup_symbol_x+0x799>
         : 415  ./elf/dl-lookup.c:1070
    0.00 :   c570:   mov    0x8(%rsp),%rsi
         : 417  ./elf/dl-lookup.c:1065
    0.00 :   c575:   mov    0x0(%rbp),%r9
    0.00 :   c579:   mov    0x8(%r10),%rdx
    0.00 :   c57d:   mov    0x358(%r13),%rax
         : 421  ./elf/dl-lookup.c:1070
    0.00 :   c584:   mov    0x358(%rsi),%rcx
         : 423  ./elf/dl-lookup.c:1065
    0.00 :   c58b:   sub    %rcx,%r9
    0.00 :   c58e:   mov    %r10,(%rsp)
    0.00 :   c592:   mov    $0x10,%r8d
    0.00 :   c598:   lea    0x2196b(%rip),%rsi        # 2df0a <_sys_errnameidx+0x60a>
    0.00 :   c59f:   lea    0x2457a(%rip),%rdi        # 30b20 <__PRETTY_FUNCTION__.10+0x288>
    0.00 :   c5a6:   push   %rdx
    0.00 :   c5a7:   mov    $0x10,%edx
    0.00 :   c5ac:   push   $0x10
    0.00 :   c5ae:   push   %rax
    0.00 :   c5af:   xor    %eax,%eax
    0.00 :   c5b1:   push   $0x10
    0.00 :   c5b3:   call   fdc0 <_dl_printf>
         : 436  ./elf/dl-lookup.c:1081
    0.00 :   c5b8:   mov    0x80(%rsp),%rax
         : 438  ./elf/dl-lookup.c:1077
    0.00 :   c5c0:   xor    %r8d,%r8d
    0.00 :   c5c3:   add    $0x20,%rsp
    0.00 :   c5c7:   xor    %edx,%edx
    0.00 :   c5c9:   mov    (%rsp),%r10
    0.00 :   c5cd:   test   %rax,%rax
    0.00 :   c5d0:   je     c5e2 <_dl_lookup_symbol_x+0x512>
    0.00 :   c5d2:   mov    0x8(%rax),%r8
    0.00 :   c5d6:   mov    0x68(%rsp),%rax
    0.00 :   c5db:   mov    0x358(%rax),%rdx
    0.00 :   c5e2:   mov    $0x10,%ecx
    0.00 :   c5e7:   mov    $0x10,%esi
    0.00 :   c5ec:   xor    %eax,%eax
    0.00 :   c5ee:   mov    %r10,(%rsp)
    0.00 :   c5f2:   lea    0x218ef(%rip),%rdi        # 2dee8 <_sys_errnameidx+0x5e8>
    0.00 :   c5f9:   call   fdc0 <_dl_printf>
    0.00 :   c5fe:   mov    (%rsp),%r10
         : 455  ./elf/dl-lookup.c:1083
    0.00 :   c602:   mov    0x14(%rsp),%esi
    0.00 :   c606:   mov    %r12,%rdx
    0.00 :   c609:   lea    0x218eb(%rip),%rdi        # 2defb <_sys_errnameidx+0x5fb>
    0.00 :   c610:   xor    %eax,%eax
    0.00 :   c612:   mov    %r10,(%rsp)
    0.00 :   c616:   call   fdc0 <_dl_printf>
    0.00 :   c61b:   mov    (%rsp),%r10
         : 463  _dl_lookup_symbol_x():
         : 464  ./elf/dl-lookup.c:952
    0.00 :   c61f:   jmp    c280 <_dl_lookup_symbol_x+0x1b0>
         : 466  add_dependency():
         : 467  ./elf/dl-lookup.c:597
    0.00 :   c624:   cmp    %r15,0x8(%rsp)
    0.00 :   c629:   je     c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c62f:   testb  $0x1,0xd0(%rsp)
    0.00 :   c637:   je     c258 <_dl_lookup_symbol_x+0x188>
         : 472  is_nodelete():
         : 473  ./elf/dl-lookup.c:204
    0.00 :   c63d:   cmpb   $0x0,0x31f(%r15)
    0.00 :   c645:   jne    c258 <_dl_lookup_symbol_x+0x188>
    0.00 :   c64b:   mov    0x30(%rsp),%r11d
    0.00 :   c650:   test   %r11d,%r11d
    0.00 :   c653:   je     c663 <_dl_lookup_symbol_x+0x593>
    0.00 :   c655:   cmpb   $0x0,0x320(%r15)
    0.00 :   c65d:   jne    c258 <_dl_lookup_symbol_x+0x188>
         : 481  add_dependency():
         : 482  ./elf/dl-lookup.c:610
    0.00 :   c663:   mov    0x8(%rsp),%rax
    0.00 :   c668:   mov    0x3d8(%rax),%rsi
    0.00 :   c66f:   mov    %rsi,%r9
    0.00 :   c672:   mov    %rsi,0x20(%rsp)
         : 487  ./elf/dl-lookup.c:617
    0.00 :   c677:   mov    0x3d0(%rax),%rax
    0.00 :   c67e:   mov    %rax,%r14
    0.00 :   c681:   mov    %rax,0x20(%rsp)
         : 491  ./elf/dl-lookup.c:618
    0.00 :   c686:   test   %r14,%r14
    0.00 :   c689:   je     c918 <_dl_lookup_symbol_x+0x848>
         : 494  ./elf/dl-lookup.c:620
    0.00 :   c68f:   mov    (%r14),%rax
    0.00 :   c692:   xor    %edx,%edx
    0.00 :   c694:   test   %rax,%rax
    0.00 :   c697:   jne    c6b3 <_dl_lookup_symbol_x+0x5e3>
    0.00 :   c699:   jmp    c918 <_dl_lookup_symbol_x+0x848>
    0.00 :   c69e:   xchg   %ax,%ax
    0.00 :   c6a0:   lea    0x1(%rdx),%eax
    0.00 :   c6a3:   mov    %rax,%rdx
    0.00 :   c6a6:   mov    (%r14,%rax,8),%rax
    0.00 :   c6aa:   test   %rax,%rax
    0.00 :   c6ad:   je     c918 <_dl_lookup_symbol_x+0x848>
         : 506  ./elf/dl-lookup.c:621
    0.00 :   c6b3:   cmp    %rax,%r15
    0.00 :   c6b6:   jne    c6a0 <_dl_lookup_symbol_x+0x5d0>
         : 509  _dl_debug_bindings():
         : 510  ./elf/dl-lookup.c:970
    0.00 :   c6b8:   mov    0x58(%rsp),%r13
         : 512  ./elf/dl-lookup.c:1008
    0.00 :   c6bd:   mov    0x50(%rsp),%r10
    0.00 :   c6c2:   jmp    c260 <_dl_lookup_symbol_x+0x190>
         : 515  _dl_lookup_symbol_x():
         : 516  ./elf/dl-lookup.c:917
    0.00 :   c6c7:   cmpq   $0x0,0x70(%rsp)
    0.00 :   c6cd:   je     c6f8 <_dl_lookup_symbol_x+0x628>
         : 519  ./elf/dl-lookup.c:917 (discriminator 1)
    0.00 :   c6cf:   mov    0x8(%rsp),%r15
    0.00 :   c6d4:   cmp    %r15,0x78(%rsp)
    0.00 :   c6d9:   je     c6f8 <_dl_lookup_symbol_x+0x628>
         : 523  ./elf/dl-lookup.c:919
    0.00 :   c6db:   movq   0x0(%rbp),%xmm0
    0.00 :   c6e0:   movq   %r15,%xmm2
    0.00 :   c6e5:   punpcklqdq %xmm2,%xmm0
    0.00 :   c6e9:   movaps %xmm0,0x50(%rsp)
         : 528  ./elf/dl-lookup.c:889
    0.00 :   c6ee:   mov    $0x1,%ebx
    0.00 :   c6f3:   jmp    c245 <_dl_lookup_symbol_x+0x175>
         : 531  ./elf/dl-lookup.c:896
    0.00 :   c6f8:   mov    0x58(%rsp),%r15
    0.00 :   c6fd:   jmp    c6ee <_dl_lookup_symbol_x+0x61e>
    0.00 :   c6ff:   mov    0x8(%rsp),%rax
    0.00 :   c704:   movq   %rcx,%xmm0
    0.00 :   c709:   mov    %rcx,%r10
    0.00 :   c70c:   movq   %rax,%xmm3
    0.00 :   c711:   punpcklqdq %xmm3,%xmm0
    0.00 :   c715:   cmp    %rax,0x58(%rsp)
    0.00 :   c71a:   je     ca5a <_dl_lookup_symbol_x+0x98a>
         : 541  ./elf/dl-lookup.c:898
    0.00 :   c720:   movaps %xmm0,0x50(%rsp)
    0.00 :   c725:   mov    %rax,%r15
         : 544  _dl_debug_bindings():
         : 545  ./elf/dl-lookup.c:1008
    0.00 :   c728:   mov    %r15,%r13
    0.00 :   c72b:   mov    $0x1,%ebx
    0.00 :   c730:   jmp    c260 <_dl_lookup_symbol_x+0x190>
         : 549  ./elf/dl-lookup.c:997
    0.00 :   c735:   cmp    %rdx,0x8(%rsp)
    0.00 :   c73a:   je     c536 <_dl_lookup_symbol_x+0x466>
         : 552  dl_new_hash():
         : 553  ./elf/dl-lookup.c:581
    0.00 :   c740:   movzbl (%r12),%ecx
    0.00 :   c745:   test   %cl,%cl
    0.00 :   c747:   je     cb8e <_dl_lookup_symbol_x+0xabe>
    0.00 :   c74d:   mov    %r12,%rsi
         : 558  ./elf/dl-lookup.c:580
    0.00 :   c750:   mov    $0x1505,%eax
    0.00 :   c755:   nopl   (%rax)
         : 561  ./elf/dl-lookup.c:582
    0.00 :   c758:   mov    %rax,%rdx
         : 563  ./elf/dl-lookup.c:581
    0.00 :   c75b:   add    $0x1,%rsi
         : 565  ./elf/dl-lookup.c:582
    0.00 :   c75f:   shl    $0x5,%rdx
    0.00 :   c763:   add    %rdx,%rax
    0.00 :   c766:   add    %rcx,%rax
         : 569  ./elf/dl-lookup.c:581
    0.00 :   c769:   movzbl (%rsi),%ecx
    0.00 :   c76c:   test   %cl,%cl
    0.00 :   c76e:   jne    c758 <_dl_lookup_symbol_x+0x688>
         : 573  ./elf/dl-lookup.c:583
    0.00 :   c770:   mov    %eax,%esi
         : 575  _dl_debug_bindings():
         : 576  ./elf/dl-lookup.c:1000
    0.00 :   c772:   mov    $0xffffffff,%eax
         : 578  ./elf/dl-lookup.c:1005
    0.00 :   c777:   lea    0x48(%rsp),%rdx
    0.00 :   c77c:   mov    %r10,0x28(%rsp)
    0.00 :   c781:   mov    0x0(%rbp),%rcx
         : 582  ./elf/dl-lookup.c:1000
    0.00 :   c785:   mov    %rax,0x48(%rsp)
         : 584  ./elf/dl-lookup.c:1005
    0.00 :   c78a:   mov    0x8(%rsp),%rax
         : 586  ./elf/dl-lookup.c:1001
    0.00 :   c78f:   mov    0x2d8fa(%rip),%r15        # 3a090 <_rtld_global+0x50>
         : 588  ./elf/dl-lookup.c:1004
    0.00 :   c796:   movq   $0x0,0x2d8ef(%rip)        # 3a090 <_rtld_global+0x50>
         : 590  ./elf/dl-lookup.c:1005
    0.00 :   c7a1:   push   %rax
    0.00 :   c7a2:   mov    0x1c(%rsp),%edi
    0.00 :   c7a6:   mov    0x3a0(%rax),%r9
    0.00 :   c7ad:   push   %rdi
    0.00 :   c7ae:   mov    %r12,%rdi
    0.00 :   c7b1:   push   $0x0
    0.00 :   c7b3:   push   $0x0
    0.00 :   c7b5:   push   0x20(%rsp)
    0.00 :   c7b9:   push   $0x0
    0.00 :   c7bb:   lea    0x90(%rsp),%r8
    0.00 :   c7c3:   mov    %rdx,0x50(%rsp)
    0.00 :   c7c8:   mov    %rsi,0x48(%rsp)
    0.00 :   c7cd:   call   b3f0 <do_lookup_x>
         : 604  ./elf/dl-lookup.c:1008
    0.00 :   c7d2:   add    $0x30,%rsp
    0.00 :   c7d6:   mov    0x28(%rsp),%r10
    0.00 :   c7db:   mov    0x18(%rsp),%rsi
    0.00 :   c7e0:   cmp    %r10,0x60(%rsp)
    0.00 :   c7e5:   mov    0x20(%rsp),%rdx
    0.00 :   c7ea:   je     ca65 <_dl_lookup_symbol_x+0x995>
         : 611  ./elf/dl-lookup.c:1042
    0.00 :   c7f0:   mov    %r15,0x2d899(%rip)        # 3a090 <_rtld_global+0x50>
         : 613  ./elf/dl-lookup.c:1045
    0.00 :   c7f7:   test   %r10,%r10
    0.00 :   c7fa:   je     ca3e <_dl_lookup_symbol_x+0x96e>
         : 616  ./elf/dl-lookup.c:1050
    0.00 :   c800:   movzbl 0x4(%r10),%eax
         : 618  ./elf/dl-lookup.c:1049
    0.00 :   c805:   andl   $0x3,0x14(%rsp)
    0.00 :   c80a:   and    $0xf,%eax
         : 621  ./elf/dl-lookup.c:1050
    0.00 :   c80d:   cmp    $0x6,%al
    0.00 :   c80f:   je     ce0b <_dl_lookup_symbol_x+0xd3b>
    0.00 :   c815:   mov    $0x1,%edx
    0.00 :   c81a:   jmp    c556 <_dl_lookup_symbol_x+0x486>
         : 626  _dl_lookup_symbol_x():
         : 627  ./elf/dl-lookup.c:872
    0.00 :   c81f:   lea    0x226c3(%rip),%r8        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   c826:   cmpq   $0x0,(%rsp)
         : 630  ./elf/dl-lookup.c:874
    0.00 :   c82b:   mov    %r8,%r9
         : 632  ./elf/dl-lookup.c:872
    0.00 :   c82e:   je     c84c <_dl_lookup_symbol_x+0x77c>
         : 634  ./elf/dl-lookup.c:873
    0.00 :   c830:   mov    (%rsp),%rax
         : 636  ./elf/dl-lookup.c:872
    0.00 :   c834:   lea    0x2165d(%rip),%r8        # 2de98 <_sys_errnameidx+0x598>
         : 638  ./elf/dl-lookup.c:873
    0.00 :   c83b:   mov    (%rax),%r9
         : 640  ./elf/dl-lookup.c:874
    0.00 :   c83e:   lea    0x226a4(%rip),%rax        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
         : 642  ./elf/dl-lookup.c:873
    0.00 :   c845:   test   %r9,%r9
         : 644  ./elf/dl-lookup.c:874
    0.00 :   c848:   cmove  %rax,%r9
         : 646  ./elf/dl-lookup.c:878
    0.00 :   c84c:   mov    0x2d26d(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   c853:   mov    (%rax),%rsi
    0.00 :   c856:   lea    0x212c6(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   c85d:   test   %rsi,%rsi
    0.00 :   c860:   cmove  %rax,%rsi
    0.00 :   c864:   jmp    c3c3 <_dl_lookup_symbol_x+0x2f3>
         : 653  _dl_debug_bindings():
         : 654  ./elf/dl-lookup.c:1061
    0.00 :   c869:   mov    0x2d548(%rip),%rdx        # 39db8 <_rtld_global_ro+0x2d8>
         : 656  ./elf/dl-lookup.c:1062
    0.00 :   c870:   test   %rdx,%rdx
    0.00 :   c873:   sete   %al
         : 659  ./elf/dl-lookup.c:1061
    0.00 :   c876:   cmp    %rdx,0x8(%rsp)
    0.00 :   c87b:   sete   %dl
         : 662  ./elf/dl-lookup.c:1063
    0.00 :   c87e:   or     %dl,%al
    0.00 :   c880:   jne    c88d <_dl_lookup_symbol_x+0x7bd>
    0.00 :   c882:   cmpl   $0x3,0x14(%rsp)
    0.00 :   c887:   jle    c280 <_dl_lookup_symbol_x+0x1b0>
         : 667  ./elf/dl-lookup.c:1070
    0.00 :   c88d:   mov    0x8(%rsp),%rsi
         : 669  ./elf/dl-lookup.c:1065
    0.00 :   c892:   mov    0x0(%rbp),%r9
    0.00 :   c896:   mov    0x8(%r10),%rdx
    0.00 :   c89a:   mov    0x358(%r13),%rax
         : 673  ./elf/dl-lookup.c:1070
    0.00 :   c8a1:   mov    0x358(%rsi),%rcx
         : 675  ./elf/dl-lookup.c:1065
    0.00 :   c8a8:   sub    %rcx,%r9
    0.00 :   c8ab:   mov    %r10,(%rsp)
    0.00 :   c8af:   mov    $0x10,%r8d
    0.00 :   c8b5:   lea    0x21647(%rip),%rsi        # 2df03 <_sys_errnameidx+0x603>
    0.00 :   c8bc:   lea    0x2425d(%rip),%rdi        # 30b20 <__PRETTY_FUNCTION__.10+0x288>
    0.00 :   c8c3:   push   %rdx
    0.00 :   c8c4:   mov    $0x10,%edx
    0.00 :   c8c9:   push   $0x10
    0.00 :   c8cb:   push   %rax
    0.00 :   c8cc:   xor    %eax,%eax
    0.00 :   c8ce:   push   $0x10
    0.00 :   c8d0:   call   fdc0 <_dl_printf>
    0.00 :   c8d5:   add    $0x20,%rsp
    0.00 :   c8d9:   mov    (%rsp),%r10
    0.00 :   c8dd:   jmp    c602 <_dl_lookup_symbol_x+0x532>
         : 691  ./elf/dl-lookup.c:975
    0.00 :   c8e2:   xor    %eax,%eax
    0.00 :   c8e4:   lea    0x225fd(%rip),%rdi        # 2eee8 <__PRETTY_FUNCTION__.2+0x57a>
    0.00 :   c8eb:   mov    %r10,0x18(%rsp)
    0.00 :   c8f0:   call   fc70 <_dl_debug_printf_c>
         : 696  ./elf/dl-lookup.c:978
    0.00 :   c8f5:   mov    0x2d1e5(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   c8fb:   mov    0x18(%rsp),%r10
    0.00 :   c900:   jmp    c504 <_dl_lookup_symbol_x+0x434>
         : 700  _dl_lookup_symbol_x():
         : 701  ./elf/dl-lookup.c:852
    0.00 :   c905:   movq   $0x0,0x20(%rsp)
         : 703  ./elf/dl-lookup.c:859
    0.00 :   c90e:   mov    0x18(%rsp),%r13
    0.00 :   c913:   jmp    c1b6 <_dl_lookup_symbol_x+0xe6>
         : 706  add_dependency():
         : 707  ./elf/dl-lookup.c:628
    0.00 :   c918:   test   %r9,%r9
    0.00 :   c91b:   je     c956 <_dl_lookup_symbol_x+0x886>
         : 710  ./elf/dl-lookup.c:631
    0.00 :   c91d:   mov    (%r9),%r8d
         : 712  ./elf/dl-lookup.c:632
    0.00 :   c920:   test   %r8d,%r8d
    0.00 :   c923:   je     c959 <_dl_lookup_symbol_x+0x889>
    0.00 :   c925:   lea    -0x1(%r8),%edx
    0.00 :   c929:   lea    0x8(%r9),%rax
    0.00 :   c92d:   lea    0x10(%r9,%rdx,8),%rdx
    0.00 :   c932:   jmp    c93d <_dl_lookup_symbol_x+0x86d>
    0.00 :   c934:   add    $0x8,%rax
    0.00 :   c938:   cmp    %rax,%rdx
    0.00 :   c93b:   je     c959 <_dl_lookup_symbol_x+0x889>
         : 722  ./elf/dl-lookup.c:633
    0.00 :   c93d:   cmp    %r15,(%rax)
    0.00 :   c940:   jne    c934 <_dl_lookup_symbol_x+0x864>
    0.00 :   c942:   jmp    c6b8 <_dl_lookup_symbol_x+0x5e8>
         : 726  _dl_lookup_symbol_x():
         : 727  ./elf/dl-lookup.c:872
    0.00 :   c947:   lea    0x2259b(%rip),%r8        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
         : 729  ./elf/dl-lookup.c:874
    0.00 :   c94e:   mov    %r8,%r9
    0.00 :   c951:   jmp    c3bb <_dl_lookup_symbol_x+0x2eb>
         : 732  add_dependency():
         : 733  ./elf/dl-lookup.c:627
    0.00 :   c956:   xor    %r8d,%r8d
         : 735  ./elf/dl-lookup.c:641
    0.00 :   c959:   mov    0x38(%rsp),%r10d
         : 737  ./elf/dl-lookup.c:638
    0.00 :   c95e:   mov    0x480(%r15),%r13
         : 739  ./elf/dl-lookup.c:641
    0.00 :   c965:   test   %r10d,%r10d
    0.00 :   c968:   jne    cb98 <_dl_lookup_symbol_x+0xac8>
    0.00 :   c96e:   mov    %r8d,0x20(%rsp)
         : 743  ./elf/dl-lookup.c:692
    0.00 :   c973:   lea    0x2e0ce(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   c97a:   call   *0x2d100(%rip)        # 39a80 <___rtld_mutex_lock>
    0.00 :   c980:   mov    0x20(%rsp),%r8d
    0.00 :   c985:   mov    %r15,%r10
         : 748  ./elf/dl-lookup.c:699
    0.00 :   c988:   mov    0x8(%rsp),%rax
    0.00 :   c98d:   lea    0x2d6ac(%rip),%rsi        # 3a040 <_rtld_global>
    0.00 :   c994:   mov    0x30(%rax),%rdx
    0.00 :   c998:   lea    (%rdx,%rdx,4),%rax
    0.00 :   c99c:   shl    $0x5,%rax
    0.00 :   c9a0:   mov    (%rsi,%rax,1),%rax
         : 755  ./elf/dl-lookup.c:700
    0.00 :   c9a4:   cmp    %r10,%rax
    0.00 :   c9a7:   je     caeb <_dl_lookup_symbol_x+0xa1b>
    0.00 :   c9ad:   test   %rax,%rax
    0.00 :   c9b0:   jne    c9c1 <_dl_lookup_symbol_x+0x8f1>
    0.00 :   c9b2:   jmp    c9ca <_dl_lookup_symbol_x+0x8fa>
    0.00 :   c9b4:   nopl   0x0(%rax)
    0.00 :   c9b8:   cmp    %r10,%rax
    0.00 :   c9bb:   je     caeb <_dl_lookup_symbol_x+0xa1b>
         : 764  ./elf/dl-lookup.c:701
    0.00 :   c9c1:   mov    0x18(%rax),%rax
         : 766  ./elf/dl-lookup.c:700
    0.00 :   c9c5:   test   %rax,%rax
    0.00 :   c9c8:   jne    c9b8 <_dl_lookup_symbol_x+0x8e8>
         : 769  ./elf/dl-lookup.c:808
    0.00 :   c9ca:   lea    0x2e077(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   c9d1:   call   *0x2d0a1(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 772  ./elf/dl-lookup.c:810
    0.00 :   c9d7:   mov    0x38(%rsp),%edx
    0.00 :   c9db:   test   %edx,%edx
    0.00 :   c9dd:   je     c128 <_dl_lookup_symbol_x+0x58>
         : 776  ./elf/dl-lookup.c:811
    0.00 :   c9e3:   movl   $0x1,%fs:0x1c
         : 778  _dl_lookup_symbol_x():
         : 779  ./elf/dl-lookup.c:937
    0.00 :   c9ef:   mov    0x8(%rsp),%rax
    0.00 :   c9f4:   mov    0x398(%rax),%rax
    0.00 :   c9fb:   mov    %rax,0x18(%rsp)
    0.00 :   ca00:   jmp    c128 <_dl_lookup_symbol_x+0x58>
         : 784  _dl_debug_bindings():
         : 785  ./elf/dl-lookup.c:1062
    0.00 :   ca05:   test   %rax,%rax
    0.00 :   ca08:   sete   %dl
         : 788  ./elf/dl-lookup.c:1061
    0.00 :   ca0b:   cmp    %rax,0x8(%rsp)
    0.00 :   ca10:   sete   %al
         : 791  ./elf/dl-lookup.c:1063
    0.00 :   ca13:   or     %al,%dl
    0.00 :   ca15:   jne    ca22 <_dl_lookup_symbol_x+0x952>
    0.00 :   ca17:   cmpl   $0x3,0x14(%rsp)
    0.00 :   ca1c:   jle    c280 <_dl_lookup_symbol_x+0x1b0>
         : 796  ./elf/dl-lookup.c:1070
    0.00 :   ca22:   mov    0x8(%rsp),%rax
         : 798  ./elf/dl-lookup.c:1065
    0.00 :   ca27:   mov    0x0(%rbp),%r9
    0.00 :   ca2b:   xor    %edx,%edx
         : 801  ./elf/dl-lookup.c:1070
    0.00 :   ca2d:   mov    0x358(%rax),%rcx
         : 803  ./elf/dl-lookup.c:1065
    0.00 :   ca34:   xor    %eax,%eax
    0.00 :   ca36:   sub    %rcx,%r9
    0.00 :   ca39:   jmp    c8ab <_dl_lookup_symbol_x+0x7db>
         : 807  ./elf/dl-lookup.c:1070
    0.00 :   ca3e:   mov    0x8(%rsp),%rax
         : 809  ./elf/dl-lookup.c:1065
    0.00 :   ca43:   mov    0x0(%rbp),%r9
    0.00 :   ca47:   xor    %edx,%edx
         : 812  ./elf/dl-lookup.c:1070
    0.00 :   ca49:   mov    0x358(%rax),%rcx
         : 814  ./elf/dl-lookup.c:1065
    0.00 :   ca50:   xor    %eax,%eax
    0.00 :   ca52:   sub    %rcx,%r9
    0.00 :   ca55:   jmp    c58e <_dl_lookup_symbol_x+0x4be>
         : 818  _dl_lookup_symbol_x():
         : 819  ./elf/dl-lookup.c:865
    0.00 :   ca5a:   mov    %rdx,%r10
    0.00 :   ca5d:   mov    %rax,%r15
    0.00 :   ca60:   jmp    c728 <_dl_lookup_symbol_x+0x658>
         : 823  _dl_debug_bindings():
         : 824  ./elf/dl-lookup.c:1008
    0.00 :   ca65:   cmp    %r13,0x68(%rsp)
    0.00 :   ca6a:   jne    c7f0 <_dl_lookup_symbol_x+0x720>
         : 827  ./elf/dl-lookup.c:1011
    0.00 :   ca70:   mov    0x8(%rsp),%rax
    0.00 :   ca75:   testb  $0x8,0x31e(%rax)
    0.00 :   ca7c:   je     ca87 <_dl_lookup_symbol_x+0x9b7>
    0.00 :   ca7e:   test   %r10,%r10
    0.00 :   ca81:   jne    ceca <_dl_lookup_symbol_x+0xdfa>
         : 833  ./elf/dl-lookup.c:1042
    0.00 :   ca87:   mov    %r15,0x2d602(%rip)        # 3a090 <_rtld_global+0x50>
         : 835  ./elf/dl-lookup.c:1045
    0.00 :   ca8e:   test   %r10,%r10
    0.00 :   ca91:   jne    c53f <_dl_lookup_symbol_x+0x46f>
         : 838  ./elf/dl-lookup.c:1061
    0.00 :   ca97:   mov    0x2d31a(%rip),%rdx        # 39db8 <_rtld_global_ro+0x2d8>
         : 840  ./elf/dl-lookup.c:1062
    0.00 :   ca9e:   test   %rdx,%rdx
    0.00 :   caa1:   sete   %al
         : 843  ./elf/dl-lookup.c:1061
    0.00 :   caa4:   cmp    %rdx,0x8(%rsp)
    0.00 :   caa9:   sete   %dl
         : 846  ./elf/dl-lookup.c:1063
    0.00 :   caac:   or     %dl,%al
    0.00 :   caae:   je     ca17 <_dl_lookup_symbol_x+0x947>
    0.00 :   cab4:   jmp    ca22 <_dl_lookup_symbol_x+0x952>
    0.00 :   cab9:   nopl   0x0(%rax)
         : 851  ./elf/dl-lookup.c:1065
    0.00 :   cac0:   mov    0x0(%rbp),%r9
    0.00 :   cac4:   mov    0x8(%r10),%rdx
    0.00 :   cac8:   movl   $0x4,0x14(%rsp)
         : 855  ./elf/dl-lookup.c:1070
    0.00 :   cad0:   mov    0x8(%rsp),%rsi
         : 857  ./elf/dl-lookup.c:1065
    0.00 :   cad5:   mov    0x358(%r13),%rax
         : 859  ./elf/dl-lookup.c:1070
    0.00 :   cadc:   mov    0x358(%rsi),%rcx
         : 861  ./elf/dl-lookup.c:1065
    0.00 :   cae3:   sub    %rcx,%r9
    0.00 :   cae6:   jmp    c8ab <_dl_lookup_symbol_x+0x7db>
         : 864  add_dependency():
         : 865  ./elf/dl-lookup.c:703
    0.00 :   caeb:   test   %rax,%rax
    0.00 :   caee:   je     c9ca <_dl_lookup_symbol_x+0x8fa>
         : 868  ./elf/dl-lookup.c:709
    0.00 :   caf4:   cmp    0x480(%r10),%r13
    0.00 :   cafb:   jne    c9ca <_dl_lookup_symbol_x+0x8fa>
         : 871  is_nodelete():
         : 872  ./elf/dl-lookup.c:204
    0.00 :   cb01:   cmpb   $0x0,0x31f(%r10)
    0.00 :   cb09:   jne    cb5a <_dl_lookup_symbol_x+0xa8a>
    0.00 :   cb0b:   mov    0x30(%rsp),%r9d
    0.00 :   cb10:   test   %r9d,%r9d
    0.00 :   cb13:   je     cb1f <_dl_lookup_symbol_x+0xa4f>
    0.00 :   cb15:   cmpb   $0x0,0x320(%r10)
    0.00 :   cb1d:   jne    cb5a <_dl_lookup_symbol_x+0xa8a>
         : 880  add_dependency():
         : 881  ./elf/dl-lookup.c:720
    0.00 :   cb1f:   mov    0x8(%rsp),%rax
    0.00 :   cb24:   movzbl 0x31c(%rax),%eax
    0.00 :   cb2b:   mov    %al,0x18(%rsp)
    0.00 :   cb2f:   and    $0x3,%eax
         : 886  is_nodelete():
         : 887  ./elf/dl-lookup.c:204
    0.00 :   cb32:   cmp    $0x2,%al
    0.00 :   cb34:   je     cc6b <_dl_lookup_symbol_x+0xb9b>
    0.00 :   cb3a:   testb  $0x4,0x2cf9f(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   cb41:   jne    cee2 <_dl_lookup_symbol_x+0xe12>
         : 892  mark_nodelete():
         : 893  ./elf/dl-lookup.c:190
    0.00 :   cb47:   cmpl   $0x0,0x30(%rsp)
    0.00 :   cb4c:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
         : 896  ./elf/dl-lookup.c:193
    0.00 :   cb52:   movb   $0x1,0x31f(%r10)
         : 898  add_dependency():
         : 899  ./elf/dl-lookup.c:808
    0.00 :   cb5a:   lea    0x2dee7(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cb61:   call   *0x2cf11(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 902  ./elf/dl-lookup.c:810
    0.00 :   cb67:   mov    0x38(%rsp),%eax
         : 904  _dl_debug_bindings():
         : 905  ./elf/dl-lookup.c:970
    0.00 :   cb6b:   mov    0x58(%rsp),%r13
         : 907  ./elf/dl-lookup.c:1008
    0.00 :   cb70:   mov    0x50(%rsp),%r10
         : 909  add_dependency():
         : 910  ./elf/dl-lookup.c:810
    0.00 :   cb75:   test   %eax,%eax
    0.00 :   cb77:   je     c260 <_dl_lookup_symbol_x+0x190>
         : 913  ./elf/dl-lookup.c:811
    0.00 :   cb7d:   movl   $0x1,%fs:0x1c
    0.00 :   cb89:   jmp    c260 <_dl_lookup_symbol_x+0x190>
         : 916  dl_new_hash():
         : 917  ./elf/dl-lookup.c:581
    0.00 :   cb8e:   mov    $0x1505,%esi
    0.00 :   cb93:   jmp    c772 <_dl_lookup_symbol_x+0x6a2>
         : 920  add_dependency():
         : 921  ./elf/dl-lookup.c:645
    0.00 :   cb98:   xor    %eax,%eax
    0.00 :   cb9a:   xchg   %eax,%fs:0x1c
    0.00 :   cba2:   cmp    $0x2,%eax
    0.00 :   cba5:   jne    cbc8 <_dl_lookup_symbol_x+0xaf8>
    0.00 :   cba7:   xor    %r10d,%r10d
    0.00 :   cbaa:   mov    $0x1,%edx
    0.00 :   cbaf:   mov    $0x81,%esi
    0.00 :   cbb4:   mov    %fs:0x10,%rax
    0.00 :   cbbd:   lea    0x1c(%rax),%rdi
    0.00 :   cbc1:   mov    $0xca,%eax
    0.00 :   cbc6:   syscall
    0.00 :   cbc8:   mov    %r8d,0x3c(%rsp)
         : 934  ./elf/dl-lookup.c:646
    0.00 :   cbcd:   lea    0x2de74(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cbd4:   mov    %r9,0x20(%rsp)
    0.00 :   cbd9:   call   *0x2cea1(%rip)        # 39a80 <___rtld_mutex_lock>
         : 938  ./elf/dl-lookup.c:658
    0.00 :   cbdf:   mov    0x8(%rsp),%rax
         : 940  ./elf/dl-lookup.c:651
    0.00 :   cbe4:   mov    %r15,%rcx
         : 942  ./elf/dl-lookup.c:659
    0.00 :   cbe7:   mov    0x20(%rsp),%r9
         : 944  ./elf/dl-lookup.c:658
    0.00 :   cbec:   mov    0x3d0(%rax),%rdx
         : 946  ./elf/dl-lookup.c:659
    0.00 :   cbf3:   mov    0x3c(%rsp),%r8d
         : 948  ./elf/dl-lookup.c:651
    0.00 :   cbf8:   mov    %rcx,%r10
         : 950  ./elf/dl-lookup.c:659
    0.00 :   cbfb:   test   %rdx,%rdx
    0.00 :   cbfe:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc04:   cmp    %r14,%rdx
    0.00 :   cc07:   je     cd05 <_dl_lookup_symbol_x+0xc35>
         : 955  ./elf/dl-lookup.c:662
    0.00 :   cc0d:   mov    (%rdx),%rax
    0.00 :   cc10:   test   %rax,%rax
    0.00 :   cc13:   je     cd05 <_dl_lookup_symbol_x+0xc35>
    0.00 :   cc19:   xor    %esi,%esi
    0.00 :   cc1b:   jmp    cc30 <_dl_lookup_symbol_x+0xb60>
    0.00 :   cc1d:   lea    0x1(%rsi),%eax
    0.00 :   cc20:   mov    %rax,%rsi
    0.00 :   cc23:   mov    (%rdx,%rax,8),%rax
    0.00 :   cc27:   test   %rax,%rax
    0.00 :   cc2a:   je     cd05 <_dl_lookup_symbol_x+0xc35>
         : 966  ./elf/dl-lookup.c:663
    0.00 :   cc30:   cmp    %rax,%rcx
    0.00 :   cc33:   jne    cc1d <_dl_lookup_symbol_x+0xb4d>
         : 969  ./elf/dl-lookup.c:816
    0.00 :   cc35:   cmp    0x480(%rax),%r13
    0.00 :   cc3c:   jne    d04c <_dl_lookup_symbol_x+0xf7c>
         : 972  ./elf/dl-lookup.c:808
    0.00 :   cc42:   lea    0x2ddff(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   cc49:   call   *0x2ce29(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 975  _dl_debug_bindings():
         : 976  ./elf/dl-lookup.c:970
    0.00 :   cc4f:   mov    0x58(%rsp),%r13
         : 978  ./elf/dl-lookup.c:1008
    0.00 :   cc54:   mov    0x50(%rsp),%r10
    0.00 :   cc59:   jmp    cb7d <_dl_lookup_symbol_x+0xaad>
         : 981  mark_nodelete():
         : 982  ./elf/dl-lookup.c:191
    0.00 :   cc5e:   movb   $0x1,0x320(%r10)
    0.00 :   cc66:   jmp    cb5a <_dl_lookup_symbol_x+0xa8a>
         : 985  add_dependency():
         : 986  ./elf/dl-lookup.c:740
    0.00 :   cc6b:   mov    0x8(%rsp),%rax
    0.00 :   cc70:   mov    0x3e0(%rax),%eax
    0.00 :   cc76:   cmp    %r8d,%eax
    0.00 :   cc79:   jbe    cd55 <_dl_lookup_symbol_x+0xc85>
         : 991  ./elf/dl-lookup.c:788
    0.00 :   cc7f:   mov    0x8(%rsp),%rsi
    0.00 :   cc84:   mov    %r8d,%edx
    0.00 :   cc87:   mov    0x3d8(%rsi),%rax
    0.00 :   cc8e:   mov    %r10,0x8(%rax,%rdx,8)
         : 996  ./elf/dl-lookup.c:790
    0.00 :   cc93:   mov    0x3d8(%rsi),%rax
    0.00 :   cc9a:   lea    0x1(%r8),%edx
    0.00 :   cc9e:   mov    %edx,(%rax)
         : 1000 ./elf/dl-lookup.c:794
    0.00 :   cca0:   testb  $0x40,0x2ce39(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   cca7:   je     cb5a <_dl_lookup_symbol_x+0xa8a>
         : 1003 ./elf/dl-lookup.c:795
    0.00 :   ccad:   mov    0x8(%rsp),%rax
         : 1005 ./elf/dl-lookup.c:799
    0.00 :   ccb2:   mov    0x8(%rax),%rcx
         : 1007 ./elf/dl-lookup.c:795
    0.00 :   ccb6:   mov    0x30(%rax),%r8
    0.00 :   ccba:   cmpb   $0x0,(%rcx)
    0.00 :   ccbd:   jne    ccd2 <_dl_lookup_symbol_x+0xc02>
         : 1011 ./elf/dl-lookup.c:799
    0.00 :   ccbf:   mov    0x2cdfa(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   ccc6:   mov    (%rax),%rcx
    0.00 :   ccc9:   test   %rcx,%rcx
    0.00 :   cccc:   je     d05e <_dl_lookup_symbol_x+0xf8e>
         : 1016 ./elf/dl-lookup.c:797
    0.00 :   ccd2:   mov    0x8(%r10),%rsi
         : 1018 ./elf/dl-lookup.c:795
    0.00 :   ccd6:   mov    0x30(%r10),%rdx
    0.00 :   ccda:   cmpb   $0x0,(%rsi)
    0.00 :   ccdd:   jne    ccf2 <_dl_lookup_symbol_x+0xc22>
         : 1022 ./elf/dl-lookup.c:797
    0.00 :   ccdf:   mov    0x2cdda(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   cce6:   mov    (%rax),%rsi
    0.00 :   cce9:   test   %rsi,%rsi
    0.00 :   ccec:   je     d040 <_dl_lookup_symbol_x+0xf70>
         : 1027 ./elf/dl-lookup.c:795
    0.00 :   ccf2:   lea    0x23daf(%rip),%rdi        # 30aa8 <__PRETTY_FUNCTION__.10+0x210>
    0.00 :   ccf9:   xor    %eax,%eax
    0.00 :   ccfb:   call   fbc0 <_dl_debug_printf>
    0.00 :   cd00:   jmp    cb5a <_dl_lookup_symbol_x+0xa8a>
         : 1032 ./elf/dl-lookup.c:669
    0.00 :   cd05:   mov    0x8(%rsp),%rax
    0.00 :   cd0a:   mov    0x3d8(%rax),%rax
    0.00 :   cd11:   test   %rax,%rax
    0.00 :   cd14:   je     c988 <_dl_lookup_symbol_x+0x8b8>
         : 1037 ./elf/dl-lookup.c:674
    0.00 :   cd1a:   mov    (%rax),%edx
         : 1039 ./elf/dl-lookup.c:671
    0.00 :   cd1c:   cmp    %rax,%r9
    0.00 :   cd1f:   je     d06a <_dl_lookup_symbol_x+0xf9a>
         : 1042 ./elf/dl-lookup.c:675
    0.00 :   cd25:   test   %edx,%edx
    0.00 :   cd27:   je     d09e <_dl_lookup_symbol_x+0xfce>
    0.00 :   cd2d:   lea    -0x1(%rdx),%edi
    0.00 :   cd30:   lea    0x8(%rax),%rsi
    0.00 :   cd34:   lea    0x10(%rax,%rdi,8),%rdi
    0.00 :   cd39:   jmp    cd48 <_dl_lookup_symbol_x+0xc78>
    0.00 :   cd3b:   add    $0x8,%rsi
    0.00 :   cd3f:   cmp    %rsi,%rdi
    0.00 :   cd42:   je     d096 <_dl_lookup_symbol_x+0xfc6>
         : 1052 ./elf/dl-lookup.c:676
    0.00 :   cd48:   mov    (%rsi),%rax
    0.00 :   cd4b:   cmp    %rax,%rcx
    0.00 :   cd4e:   jne    cd3b <_dl_lookup_symbol_x+0xc6b>
    0.00 :   cd50:   jmp    cc35 <_dl_lookup_symbol_x+0xb65>
         : 1057 ./elf/dl-lookup.c:747
    0.00 :   cd55:   movl   $0xa,0x18(%rsp)
    0.00 :   cd5d:   test   %eax,%eax
    0.00 :   cd5f:   je     cd67 <_dl_lookup_symbol_x+0xc97>
    0.00 :   cd61:   add    %eax,%eax
    0.00 :   cd63:   mov    %eax,0x18(%rsp)
         : 1063 ./elf/dl-lookup.c:753
    0.00 :   cd67:   mov    0x18(%rsp),%eax
    0.00 :   cd6b:   mov    %r8d,0x28(%rsp)
    0.00 :   cd70:   mov    %r10,0x20(%rsp)
    0.00 :   cd75:   lea    0x8(,%rax,8),%rdi
         : 1068 malloc():
         : 1069 ./elf/../include/rtld-malloc.h:56
    0.00 :   cd7d:   call   *0x2ccdd(%rip)        # 39a60 <__rtld_malloc>
         : 1071 add_dependency():
         : 1072 ./elf/dl-lookup.c:754
    0.00 :   cd83:   mov    0x20(%rsp),%r10
    0.00 :   cd88:   mov    0x28(%rsp),%r8d
    0.00 :   cd8d:   test   %rax,%rax
         : 1076 malloc():
         : 1077 ./elf/../include/rtld-malloc.h:56
    0.00 :   cd90:   mov    %rax,%r13
         : 1079 add_dependency():
         : 1080 ./elf/dl-lookup.c:754
    0.00 :   cd93:   je     ce75 <_dl_lookup_symbol_x+0xda5>
         : 1082 ./elf/dl-lookup.c:773
    0.00 :   cd99:   mov    %r8d,%r14d
    0.00 :   cd9c:   test   %r8d,%r8d
    0.00 :   cd9f:   jne    ce36 <_dl_lookup_symbol_x+0xd66>
         : 1086 ./elf/dl-lookup.c:777
    0.00 :   cda5:   lea    0x1(%r8),%eax
         : 1088 ./elf/dl-lookup.c:776
    0.00 :   cda9:   mov    %r10,0x8(%r13,%r14,8)
         : 1090 ./elf/dl-lookup.c:777
    0.00 :   cdae:   mov    %eax,0x0(%r13)
         : 1092 ./elf/dl-lookup.c:779
    0.00 :   cdb2:   mov    0x8(%rsp),%rax
         : 1094 ./elf/dl-lookup.c:781
    0.00 :   cdb7:   mov    0x18(%rsp),%esi
         : 1096 ./elf/dl-lookup.c:779
    0.00 :   cdbb:   mov    0x3d8(%rax),%rdi
         : 1098 ./elf/dl-lookup.c:781
    0.00 :   cdc2:   mov    %esi,0x3e0(%rax)
         : 1100 ./elf/dl-lookup.c:780
    0.00 :   cdc8:   mov    %r13,0x3d8(%rax)
         : 1102 ./elf/dl-lookup.c:782
    0.00 :   cdcf:   test   %rdi,%rdi
    0.00 :   cdd2:   je     cca0 <_dl_lookup_symbol_x+0xbd0>
    0.00 :   cdd8:   mov    %r10,0x18(%rsp)
         : 1106 ./elf/dl-lookup.c:783
    0.00 :   cddd:   call   13430 <_dl_scope_free>
    0.00 :   cde2:   mov    0x18(%rsp),%r10
    0.00 :   cde7:   jmp    cca0 <_dl_lookup_symbol_x+0xbd0>
         : 1110 _dl_lookup_symbol_x():
         : 1111 ./elf/dl-lookup.c:850 (discriminator 2)
    0.00 :   cdec:   lea    0x22bdd(%rip),%rcx        # 2f9d0 <__PRETTY_FUNCTION__.3>
    0.00 :   cdf3:   mov    $0x352,%edx
    0.00 :   cdf8:   lea    0x2107e(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   cdff:   lea    0x23bea(%rip),%rdi        # 309f0 <__PRETTY_FUNCTION__.10+0x158>
    0.00 :   ce06:   call   1e460 <__GI___assert_fail>
         : 1117 _dl_debug_bindings():
         : 1118 ./elf/dl-lookup.c:1065
    0.00 :   ce0b:   mov    0x0(%rbp),%r9
    0.00 :   ce0f:   mov    0x8(%r10),%rdx
    0.00 :   ce13:   movl   $0x4,0x14(%rsp)
         : 1122 ./elf/dl-lookup.c:1070
    0.00 :   ce1b:   mov    0x8(%rsp),%rsi
         : 1124 ./elf/dl-lookup.c:1065
    0.00 :   ce20:   mov    0x358(%r13),%rax
         : 1126 ./elf/dl-lookup.c:1070
    0.00 :   ce27:   mov    0x358(%rsi),%rcx
         : 1128 ./elf/dl-lookup.c:1065
    0.00 :   ce2e:   sub    %rcx,%r9
    0.00 :   ce31:   jmp    c58e <_dl_lookup_symbol_x+0x4be>
         : 1131 add_dependency():
         : 1132 ./elf/dl-lookup.c:774
    0.00 :   ce36:   lea    0x8(%rax),%rdi
    0.00 :   ce3a:   mov    0x8(%rsp),%rax
    0.00 :   ce3f:   mov    %r8d,0x30(%rsp)
    0.00 :   ce44:   lea    0x0(,%r14,8),%rdx
    0.00 :   ce4c:   mov    %r10,0x28(%rsp)
    0.00 :   ce51:   mov    0x3d8(%rax),%rax
    0.00 :   ce58:   lea    0x8(%rax),%rsi
    0.00 :   ce5c:   mov    %rax,0x20(%rsp)
    0.00 :   ce61:   call   2afb0 <memcpy>
    0.00 :   ce66:   mov    0x30(%rsp),%r8d
    0.00 :   ce6b:   mov    0x28(%rsp),%r10
    0.00 :   ce70:   jmp    cda5 <_dl_lookup_symbol_x+0xcd5>
         : 1145 ./elf/dl-lookup.c:760
    0.00 :   ce75:   testb  $0x4,0x2cc64(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   ce7c:   je     cb47 <_dl_lookup_symbol_x+0xa77>
         : 1148 is_nodelete():
         : 1149 ./elf/dl-lookup.c:204
    0.00 :   ce82:   cmpb   $0x0,0x31f(%r10)
    0.00 :   ce8a:   jne    cb47 <_dl_lookup_symbol_x+0xa77>
    0.00 :   ce90:   cmpl   $0x0,0x30(%rsp)
    0.00 :   ce95:   je     cea5 <_dl_lookup_symbol_x+0xdd5>
    0.00 :   ce97:   cmpb   $0x0,0x320(%r10)
    0.00 :   ce9f:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
         : 1156 add_dependency():
         : 1157 ./elf/dl-lookup.c:762
    0.00 :   cea5:   mov    0x30(%r10),%rdx
    0.00 :   cea9:   mov    0x8(%r10),%rsi
    0.00 :   cead:   xor    %eax,%eax
    0.00 :   ceaf:   mov    %r10,0x18(%rsp)
    0.00 :   ceb4:   lea    0x23c8d(%rip),%rdi        # 30b48 <__PRETTY_FUNCTION__.10+0x2b0>
    0.00 :   cebb:   call   fbc0 <_dl_debug_printf>
    0.00 :   cec0:   mov    0x18(%rsp),%r10
    0.00 :   cec5:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
         : 1166 _dl_debug_bindings():
         : 1167 ./elf/dl-lookup.c:1012
    0.00 :   ceca:   movzbl 0x4(%r10),%eax
    0.00 :   cecf:   shr    $0x4,%al
    0.00 :   ced2:   cmp    $0xa,%al
    0.00 :   ced4:   je     cf31 <_dl_lookup_symbol_x+0xe61>
         : 1172 ./elf/dl-lookup.c:1042
    0.00 :   ced6:   mov    %r15,0x2d1b3(%rip)        # 3a090 <_rtld_global+0x50>
         : 1174 ./elf/dl-lookup.c:1045
    0.00 :   cedd:   jmp    c53f <_dl_lookup_symbol_x+0x46f>
         : 1176 is_nodelete():
         : 1177 ./elf/dl-lookup.c:204
    0.00 :   cee2:   cmpl   $0x0,0x30(%rsp)
    0.00 :   cee7:   je     cef7 <_dl_lookup_symbol_x+0xe27>
    0.00 :   cee9:   cmpb   $0x0,0x320(%r10)
    0.00 :   cef1:   jne    cc5e <_dl_lookup_symbol_x+0xb8e>
         : 1182 add_dependency():
         : 1183 ./elf/dl-lookup.c:725
    0.00 :   cef7:   mov    0x8(%rsp),%rax
         : 1185 ./elf/dl-lookup.c:726
    0.00 :   cefc:   mov    0x30(%r10),%r11
    0.00 :   cf00:   mov    0x8(%r10),%rsi
         : 1188 ./elf/dl-lookup.c:725
    0.00 :   cf04:   mov    0x8(%rax),%rcx
    0.00 :   cf08:   cmpb   $0x0,(%rcx)
    0.00 :   cf0b:   jne    cff4 <_dl_lookup_symbol_x+0xf24>
         : 1192 ./elf/dl-lookup.c:726
    0.00 :   cf11:   mov    %r11,%rdx
    0.00 :   cf14:   lea    0x23b0d(%rip),%rdi        # 30a28 <__PRETTY_FUNCTION__.10+0x190>
    0.00 :   cf1b:   xor    %eax,%eax
    0.00 :   cf1d:   mov    %r10,0x18(%rsp)
    0.00 :   cf22:   call   fbc0 <_dl_debug_printf>
    0.00 :   cf27:   mov    0x18(%rsp),%r10
    0.00 :   cf2c:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
         : 1200 _dl_debug_bindings():
         : 1201 ./elf/dl-lookup.c:1023
    0.00 :   cf31:   mov    0x8(%rsp),%rax
         : 1203 ./elf/dl-lookup.c:1021
    0.00 :   cf36:   pxor   %xmm0,%xmm0
         : 1205 ./elf/dl-lookup.c:1025
    0.00 :   cf3a:   xor    %r14d,%r14d
         : 1207 ./elf/dl-lookup.c:1021
    0.00 :   cf3d:   movaps %xmm0,0x70(%rsp)
         : 1209 ./elf/dl-lookup.c:1023
    0.00 :   cf42:   mov    0x3a0(%rax),%rbx
         : 1211 ./elf/dl-lookup.c:1025
    0.00 :   cf49:   mov    0x8(%rbx),%eax
    0.00 :   cf4c:   jmp    cf57 <_dl_lookup_symbol_x+0xe87>
         : 1214 ./elf/dl-lookup.c:1026
    0.00 :   cf4e:   mov    (%rbx),%rdi
    0.00 :   cf51:   cmp    %r13,(%rdi,%rcx,8)
    0.00 :   cf55:   je     cf63 <_dl_lookup_symbol_x+0xe93>
         : 1218 ./elf/dl-lookup.c:1025
    0.00 :   cf57:   mov    %r14,%rcx
    0.00 :   cf5a:   add    $0x1,%r14
    0.00 :   cf5e:   cmp    %rcx,%rax
    0.00 :   cf61:   ja     cf4e <_dl_lookup_symbol_x+0xe7e>
         : 1223 ./elf/dl-lookup.c:1031
    0.00 :   cf63:   mov    %r15,0x18(%rsp)
    0.00 :   cf68:   lea    0x70(%rsp),%r8
    0.00 :   cf6d:   mov    %rdx,%r15
    0.00 :   cf70:   mov    %r13,0x28(%rsp)
    0.00 :   cf75:   mov    %rbp,%r13
    0.00 :   cf78:   mov    %rsi,%rbp
    0.00 :   cf7b:   mov    %r10,0x20(%rsp)
    0.00 :   cf80:   jmp    cfd8 <_dl_lookup_symbol_x+0xf08>
         : 1232 ./elf/dl-lookup.c:1030
    0.00 :   cf82:   mov    (%rbx),%rdx
    0.00 :   cf85:   mov    (%rdx,%r14,8),%rdx
    0.00 :   cf89:   cmpq   $0x0,0xc0(%rdx)
    0.00 :   cf91:   je     cfd4 <_dl_lookup_symbol_x+0xf04>
         : 1237 ./elf/dl-lookup.c:1031
    0.00 :   cf93:   push   0x8(%rsp)
    0.00 :   cf97:   mov    0x1c(%rsp),%eax
    0.00 :   cf9b:   mov    %rbp,%rsi
    0.00 :   cf9e:   mov    %r12,%rdi
    0.00 :   cfa1:   mov    0x0(%r13),%rcx
    0.00 :   cfa5:   lea    0x2d0(%rdx),%r9
    0.00 :   cfac:   mov    %r15,%rdx
    0.00 :   cfaf:   push   %rax
    0.00 :   cfb0:   push   $0x0
    0.00 :   cfb2:   push   $0x0
    0.00 :   cfb4:   push   0x20(%rsp)
    0.00 :   cfb8:   push   $0x0
    0.00 :   cfba:   mov    %r8,0x60(%rsp)
    0.00 :   cfbf:   call   b3f0 <do_lookup_x>
    0.00 :   cfc4:   add    $0x30,%rsp
    0.00 :   cfc8:   test   %eax,%eax
    0.00 :   cfca:   jg     d017 <_dl_lookup_symbol_x+0xf47>
    0.00 :   cfcc:   mov    0x8(%rbx),%eax
    0.00 :   cfcf:   mov    0x30(%rsp),%r8
         : 1257 ./elf/dl-lookup.c:1029
    0.00 :   cfd4:   add    $0x1,%r14
    0.00 :   cfd8:   cmp    %rax,%r14
    0.00 :   cfdb:   jb     cf82 <_dl_lookup_symbol_x+0xeb2>
         : 1261 ./elf/dl-lookup.c:1042
    0.00 :   cfdd:   mov    %r13,%rbp
    0.00 :   cfe0:   mov    0x18(%rsp),%r15
    0.00 :   cfe5:   mov    0x20(%rsp),%r10
    0.00 :   cfea:   mov    0x28(%rsp),%r13
    0.00 :   cfef:   jmp    ced6 <_dl_lookup_symbol_x+0xe06>
         : 1267 add_dependency():
         : 1268 ./elf/dl-lookup.c:730
    0.00 :   cff4:   mov    %rdx,%r8
    0.00 :   cff7:   xor    %eax,%eax
    0.00 :   cff9:   mov    %r11,%rdx
    0.00 :   cffc:   mov    %r10,0x18(%rsp)
    0.00 :   d001:   lea    0x23a60(%rip),%rdi        # 30a68 <__PRETTY_FUNCTION__.10+0x1d0>
    0.00 :   d008:   call   fbc0 <_dl_debug_printf>
    0.00 :   d00d:   mov    0x18(%rsp),%r10
         : 1276 mark_nodelete():
         : 1277 ./elf/dl-lookup.c:190
    0.00 :   d012:   jmp    cb47 <_dl_lookup_symbol_x+0xa77>
         : 1279 _dl_debug_bindings():
         : 1280 ./elf/dl-lookup.c:1038
    0.00 :   d017:   mov    0x18(%rsp),%r15
    0.00 :   d01c:   movdqa 0x70(%rsp),%xmm1
    0.00 :   d022:   mov    %r13,%rbp
    0.00 :   d025:   mov    0x20(%rsp),%r10
    0.00 :   d02a:   mov    0x28(%rsp),%r13
         : 1286 ./elf/dl-lookup.c:1042
    0.00 :   d02f:   mov    %r15,0x2d05a(%rip)        # 3a090 <_rtld_global+0x50>
         : 1288 ./elf/dl-lookup.c:1038
    0.00 :   d036:   movaps %xmm1,0x60(%rsp)
         : 1290 ./elf/dl-lookup.c:1045
    0.00 :   d03b:   jmp    c800 <_dl_lookup_symbol_x+0x730>
         : 1292 add_dependency():
         : 1293 ./elf/dl-lookup.c:797
    0.00 :   d040:   lea    0x20adc(%rip),%rsi        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   d047:   jmp    ccf2 <_dl_lookup_symbol_x+0xc22>
         : 1296 ./elf/dl-lookup.c:808
    0.00 :   d04c:   lea    0x2d9f5(%rip),%rdi        # 3aa48 <_rtld_global+0xa08>
    0.00 :   d053:   call   *0x2ca1f(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 1299 ./elf/dl-lookup.c:810
    0.00 :   d059:   jmp    c9e3 <_dl_lookup_symbol_x+0x913>
         : 1301 ./elf/dl-lookup.c:799
    0.00 :   d05e:   lea    0x20abe(%rip),%rcx        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   d065:   jmp    ccd2 <_dl_lookup_symbol_x+0xc02>
         : 1304 ./elf/dl-lookup.c:679
    0.00 :   d06a:   cmp    %edx,%r8d
    0.00 :   d06d:   jae    c988 <_dl_lookup_symbol_x+0x8b8>
         : 1307 ./elf/dl-lookup.c:685
    0.00 :   d073:   mov    %r8d,%eax
         : 1309 ./elf/dl-lookup.c:679
    0.00 :   d076:   xor    %esi,%esi
    0.00 :   d078:   lea    (%r9,%rax,8),%rdi
         : 1312 ./elf/dl-lookup.c:686
    0.00 :   d07c:   mov    0x8(%rdi,%rsi,8),%rax
    0.00 :   d081:   cmp    %rax,%rcx
    0.00 :   d084:   je     cc35 <_dl_lookup_symbol_x+0xb65>
         : 1316 ./elf/dl-lookup.c:685
    0.00 :   d08a:   add    $0x1,%rsi
    0.00 :   d08e:   lea    (%r8,%rsi,1),%eax
    0.00 :   d092:   cmp    %edx,%eax
    0.00 :   d094:   jb     d07c <_dl_lookup_symbol_x+0xfac>
    0.00 :   d096:   mov    %edx,%r8d
    0.00 :   d099:   jmp    c988 <_dl_lookup_symbol_x+0x8b8>
         : 1323 ./elf/dl-lookup.c:675
    0.00 :   d09e:   xor    %r8d,%r8d
    0.00 :   d0a1:   jmp    c988 <_dl_lookup_symbol_x+0x8b8>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (58 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b3f0 <do_lookup_x>:
         : 6    do_lookup_x():
         : 7    ./elf/dl-lookup.c:363
    0.00 :   b3f0:   push   %r15
    0.00 :   b3f2:   mov    %rdi,%r11
    0.00 :   b3f5:   push   %r14
    0.00 :   b3f7:   push   %r13
    0.00 :   b3f9:   push   %r12
    0.00 :   b3fb:   push   %rbp
    0.00 :   b3fc:   push   %rbx
    0.00 :   b3fd:   sub    $0x98,%rsp
         : 16   ./elf/dl-lookup.c:364
    0.00 :   b404:   mov    0x8(%r9),%r12d
         : 18   ./elf/dl-lookup.c:363
    0.00 :   b408:   mov    %r8,0x48(%rsp)
    0.00 :   b40d:   mov    0xd0(%rsp),%rbp
    0.00 :   b415:   mov    %rdx,0x50(%rsp)
    0.00 :   b41a:   mov    0xf0(%rsp),%r8d
    0.00 :   b422:   mov    %rcx,0x40(%rsp)
         : 24   ./elf/dl-lookup.c:411
    0.00 :   b427:   mov    %rsi,%rdi
         : 26   ./elf/dl-lookup.c:381
    0.00 :   b42a:   mov    %r8d,%eax
    0.00 :   b42d:   mov    %r11,0x38(%rsp)
         : 29   ./elf/dl-lookup.c:370
    0.00 :   b432:   mov    (%r9),%r14
         : 31   ./elf/dl-lookup.c:411
    0.00 :   b435:   shr    $0x6,%rdi
         : 33   ./elf/dl-lookup.c:381
    0.00 :   b439:   and    $0x2,%eax
    0.00 :   b43c:   mov    %rsi,0x8(%rsp)
    0.00 :   b441:   mov    0xe8(%rsp),%r11
         : 37   ./elf/dl-lookup.c:411
    0.00 :   b449:   mov    %rdi,0x18(%rsp)
         : 39   _dl_check_protected_symbol():
         : 40   ./elf/../sysdeps/generic/dl-protected.h:44
    0.00 :   b44e:   mov    %r8d,%edi
    0.00 :   b451:   mov    %eax,%r15d
    0.00 :   b454:   and    $0x1,%edi
         : 44   do_lookup_x():
         : 45   ./elf/dl-lookup.c:381
    0.00 :   b457:   mov    %eax,0x5c(%rsp)
         : 47   _dl_check_protected_symbol():
         : 48   ./elf/../sysdeps/generic/dl-protected.h:44
    0.00 :   b45b:   mov    %edi,0x60(%rsp)
    0.00 :   b45f:   lea    0x84(%rsp),%rdi
    0.00 :   b467:   mov    %rdi,0x10(%rsp)
    0.00 :   b46c:   jmp    b518 <do_lookup_x+0x128>
    0.00 :   b471:   nopl   0x0(%rax)
         : 54   do_lookup_x():
         : 55   ./elf/dl-lookup.c:395
    0.00 :   b478:   mov    0x2f4(%rbx),%edx
    0.00 :   b47e:   test   %edx,%edx
    0.00 :   b480:   je     b50b <do_lookup_x+0x11b>
         : 59   ./elf/dl-lookup.c:399
    0.00 :   b486:   movl   $0x0,0x84(%rsp)
         : 61   ./elf/dl-lookup.c:403
    0.00 :   b491:   mov    0x70(%rbx),%rax
         : 63   ./elf/dl-lookup.c:400
    0.00 :   b495:   movq   $0x0,0x88(%rsp)
         : 65   ./elf/dl-lookup.c:403
    0.00 :   b4a1:   mov    0x8(%rax),%r10
    0.00 :   b4a5:   xor    %eax,%eax
    0.00 :   b4a7:   testb  $0x20,0x31e(%rbx)
    0.00 :   b4ae:   je     b4b6 <do_lookup_x+0xc6>
         : 70   ./elf/dl-lookup.c:403 (discriminator 2)
    0.00 :   b4b0:   mov    (%rbx),%rax
    0.00 :   b4b3:   add    %rax,%r10
         : 73   ./elf/dl-lookup.c:404 (discriminator 5)
    0.00 :   b4b6:   mov    0x68(%rbx),%rcx
    0.00 :   b4ba:   add    0x8(%rcx),%rax
    0.00 :   b4be:   mov    %rax,(%rsp)
         : 77   ./elf/dl-lookup.c:407 (discriminator 5)
    0.00 :   b4c2:   mov    0x300(%rbx),%rax
         : 79   ./elf/dl-lookup.c:408 (discriminator 5)
    0.00 :   b4c9:   test   %rax,%rax
    0.00 :   b4cc:   je     b5a0 <do_lookup_x+0x1b0>
         : 82   ./elf/dl-lookup.c:415
    0.00 :   b4d2:   mov    0x8(%rsp),%rdi
         : 84   ./elf/dl-lookup.c:412
    0.00 :   b4d7:   mov    0x18(%rsp),%ecx
    0.00 :   b4db:   and    0x2f8(%rbx),%ecx
         : 87   ./elf/dl-lookup.c:410
    0.00 :   b4e1:   mov    (%rax,%rcx,8),%rax
         : 89   ./elf/dl-lookup.c:415
    9.63 :   b4e5:   mov    0x2fc(%rbx),%ecx
    0.00 :   b4eb:   mov    %rdi,%rsi
    0.00 :   b4ee:   shr    %cl,%rsi
    0.00 :   b4f1:   mov    %rsi,%rcx
         : 94   ./elf/dl-lookup.c:418
    0.00 :   b4f4:   mov    %rax,%rsi
    0.00 :   b4f7:   shr    %cl,%rsi
    1.92 :   b4fa:   mov    %edi,%ecx
    0.00 :   b4fc:   shr    %cl,%rax
    0.00 :   b4ff:   and    %rax,%rsi
    0.00 :   b502:   and    $0x1,%esi
    0.00 :   b505:   jne    b720 <do_lookup_x+0x330>
         : 102  ./elf/dl-lookup.c:570
    1.86 :   b50b:   add    $0x1,%rbp
    0.00 :   b50f:   cmp    %rbp,%r12
    0.00 :   b512:   jbe    b800 <do_lookup_x+0x410>
         : 106  ./elf/dl-lookup.c:374
    0.00 :   b518:   mov    (%r14,%rbp,8),%rax
    0.00 :   b51c:   mov    0x28(%rax),%rbx
         : 109  ./elf/dl-lookup.c:377
    0.00 :   b520:   cmp    %r11,%rbx
    0.00 :   b523:   je     b50b <do_lookup_x+0x11b>
         : 112  ./elf/dl-lookup.c:381
    0.00 :   b525:   test   %r15d,%r15d
    1.88 :   b528:   je     b533 <do_lookup_x+0x143>
         : 115  ./elf/dl-lookup.c:381 (discriminator 1)
    0.00 :   b52a:   testb  $0x3,0x31c(%rbx)
    0.00 :   b531:   je     b50b <do_lookup_x+0x11b>
         : 118  ./elf/dl-lookup.c:385
    0.00 :   b533:   testb  $0x2,0x31e(%rbx)
    3.65 :   b53a:   jne    b50b <do_lookup_x+0x11b>
         : 121  ./elf/dl-lookup.c:389
    1.73 :   b53c:   testb  $0x8,0x2e59d(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   b543:   je     b478 <do_lookup_x+0x88>
         : 124  ./elf/dl-lookup.c:391
    0.00 :   b549:   mov    0x8(%rbx),%rdx
         : 126  ./elf/dl-lookup.c:392
    0.00 :   b54d:   mov    0x30(%rbx),%rcx
         : 128  ./elf/dl-lookup.c:390
    0.00 :   b551:   cmpb   $0x0,(%rdx)
    0.00 :   b554:   je     b580 <do_lookup_x+0x190>
         : 131  ./elf/dl-lookup.c:390 (discriminator 2)
    0.00 :   b556:   mov    0x38(%rsp),%rsi
    0.00 :   b55b:   lea    0x25396(%rip),%rdi        # 308f8 <__PRETTY_FUNCTION__.10+0x60>
    0.00 :   b562:   xor    %eax,%eax
    0.00 :   b564:   mov    %r11,0xe8(%rsp)
    0.00 :   b56c:   call   fbc0 <_dl_debug_printf>
    0.00 :   b571:   mov    0xe8(%rsp),%r11
    0.00 :   b579:   jmp    b478 <do_lookup_x+0x88>
    0.00 :   b57e:   xchg   %ax,%ax
         : 140  ./elf/dl-lookup.c:391
    0.00 :   b580:   mov    0x2e539(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   b587:   mov    (%rax),%rdx
    0.00 :   b58a:   lea    0x22592(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   b591:   test   %rdx,%rdx
    0.00 :   b594:   cmove  %rax,%rdx
    0.00 :   b598:   jmp    b556 <do_lookup_x+0x166>
    0.00 :   b59a:   nopw   0x0(%rax,%rax,1)
         : 148  ./elf/dl-lookup.c:446
    0.00 :   b5a0:   mov    0x50(%rsp),%rax
    0.00 :   b5a5:   mov    $0xffffffff,%edi
         : 151  ./elf/dl-lookup.c:422
    0.00 :   b5aa:   mov    %edx,%esi
         : 153  ./elf/dl-lookup.c:446
    0.00 :   b5ac:   mov    (%rax),%rax
    0.00 :   b5af:   cmp    %rdi,%rax
    0.00 :   b5b2:   je     bbf0 <do_lookup_x+0x800>
         : 157  ./elf/dl-lookup.c:452
    0.00 :   b5b8:   xor    %edx,%edx
    0.00 :   b5ba:   div    %rsi
    0.00 :   b5bd:   lea    0x0(,%rdx,4),%rax
    0.00 :   b5c5:   mov    0x310(%rbx),%rdx
    0.00 :   b5cc:   mov    (%rdx,%rax,1),%eax
         : 163  ./elf/dl-lookup.c:453
    0.00 :   b5cf:   test   %eax,%eax
    0.00 :   b5d1:   je     b50b <do_lookup_x+0x11b>
    0.00 :   b5d7:   lea    0x88(%rsp),%rdi
    0.00 :   b5df:   mov    %r15d,0x68(%rsp)
    0.00 :   b5e4:   mov    0x40(%rsp),%r13
    0.00 :   b5e9:   mov    %r14,0x70(%rsp)
    0.00 :   b5ee:   mov    0xe0(%rsp),%r15d
    0.00 :   b5f6:   mov    %rbp,0xd0(%rsp)
    0.00 :   b5fe:   mov    0xd8(%rsp),%r14
    0.00 :   b606:   mov    %rbx,%rbp
    0.00 :   b609:   mov    %r12,0x78(%rsp)
    0.00 :   b60e:   mov    0x38(%rsp),%r12
    0.00 :   b613:   mov    %rdi,0x20(%rsp)
    0.00 :   b618:   mov    %r10,0x30(%rsp)
    0.00 :   b61d:   mov    %r11,0xe8(%rsp)
    0.00 :   b625:   jmp    b642 <do_lookup_x+0x252>
    0.00 :   b627:   nopw   0x0(%rax,%rax,1)
         : 181  ./elf/dl-lookup.c:454
    0.00 :   b630:   mov    0x308(%rbp),%rax
    0.00 :   b637:   mov    (%rax,%rbx,4),%eax
         : 184  ./elf/dl-lookup.c:453
    0.00 :   b63a:   test   %eax,%eax
    0.00 :   b63c:   je     ba30 <do_lookup_x+0x640>
         : 187  ./elf/dl-lookup.c:456
    0.00 :   b642:   sub    $0x8,%rsp
         : 189  ./elf/dl-lookup.c:457
    0.00 :   b646:   mov    %eax,%ebx
         : 191  ./elf/dl-lookup.c:456
    0.00 :   b648:   mov    %r15d,%ecx
    0.00 :   b64b:   mov    %r13,%rsi
    0.00 :   b64e:   push   0x18(%rsp)
         : 195  ./elf/dl-lookup.c:457
    0.00 :   b652:   lea    (%rbx,%rbx,2),%rdx
         : 197  ./elf/dl-lookup.c:456
    0.00 :   b656:   mov    %r12,%rdi
    0.00 :   b659:   push   0x30(%rsp)
    0.00 :   b65d:   push   %rbp
    0.00 :   b65e:   push   0x20(%rsp)
    0.00 :   b662:   push   %rax
    0.00 :   b663:   mov    0x60(%rsp),%rax
    0.00 :   b668:   mov    0x120(%rsp),%r8d
    0.00 :   b670:   lea    (%rax,%rdx,8),%r9
    0.00 :   b674:   mov    %r14,%rdx
    0.00 :   b677:   call   b240 <check_match>
         : 208  ./elf/dl-lookup.c:460
    0.00 :   b67c:   add    $0x30,%rsp
    0.00 :   b680:   test   %rax,%rax
    0.00 :   b683:   je     b630 <do_lookup_x+0x240>
    0.00 :   b685:   mov    %rbp,%rbx
    0.00 :   b688:   mov    0x68(%rsp),%r15d
    0.00 :   b68d:   mov    0x30(%rsp),%r10
    0.00 :   b692:   mov    %rax,%r8
    0.00 :   b695:   mov    0x70(%rsp),%r14
    0.00 :   b69a:   mov    0xd0(%rsp),%rbp
    0.00 :   b6a2:   mov    0xe8(%rsp),%r11
    0.00 :   b6aa:   mov    0x78(%rsp),%r12
    0.00 :   b6af:   nop
         : 221  ./elf/dl-lookup.c:477
    0.00 :   b6b0:   cmpq   $0x0,0xf8(%rsp)
    0.00 :   b6b9:   je     b818 <do_lookup_x+0x428>
         : 224  dl_symbol_visibility_binds_local_p():
         : 225  ./elf/../sysdeps/generic/ldsodefs.h:137
    0.00 :   b6bf:   movzbl 0x5(%r8),%eax
    0.00 :   b6c4:   mov    %eax,%edx
         : 228  ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   b6c6:   and    $0x3,%eax
    0.00 :   b6c9:   sub    $0x1,%eax
    0.00 :   b6cc:   and    $0x3,%edx
         : 232  do_lookup_x():
         : 233  ./elf/dl-lookup.c:528
    0.00 :   b6cf:   cmp    $0x1,%eax
    0.00 :   b6d2:   jbe    b50b <do_lookup_x+0x11b>
         : 236  _dl_check_protected_symbol():
         : 237  ./elf/../sysdeps/generic/dl-protected.h:29
    0.00 :   b6d8:   cmp    $0x3,%dl
    0.00 :   b6db:   je     b9b0 <do_lookup_x+0x5c0>
         : 240  do_lookup_x():
         : 241  ./elf/dl-lookup.c:535
    0.00 :   b6e1:   movzbl 0x4(%r8),%eax
    0.00 :   b6e6:   shr    $0x4,%al
    0.00 :   b6e9:   cmp    $0x2,%al
    0.00 :   b6eb:   je     b853 <do_lookup_x+0x463>
    0.00 :   b6f1:   cmp    $0xa,%al
    0.00 :   b6f3:   je     b880 <do_lookup_x+0x490>
    0.00 :   b6f9:   cmp    $0x1,%al
    0.00 :   b6fb:   jne    b50b <do_lookup_x+0x11b>
         : 250  ./elf/dl-lookup.c:551
    0.00 :   b701:   mov    0x48(%rsp),%rax
    0.00 :   b706:   mov    %r8,(%rax)
         : 253  ./elf/dl-lookup.c:552
    0.00 :   b709:   mov    %rbx,0x8(%rax)
         : 255  ./elf/dl-lookup.c:553 (discriminator 1)
    0.00 :   b70d:   mov    $0x1,%eax
    0.00 :   b712:   jmp    b802 <do_lookup_x+0x412>
    0.00 :   b717:   nopw   0x0(%rax,%rax,1)
         : 259  ./elf/dl-lookup.c:422
    1.48 :   b720:   mov    %edx,%ecx
    2.10 :   b722:   mov    %rdi,%rax
    0.00 :   b725:   xor    %edx,%edx
    0.00 :   b727:   div    %rcx
         : 264  ./elf/dl-lookup.c:421
    0.00 :   b72a:   mov    0x308(%rbx),%rax
    0.00 :   b731:   mov    (%rax,%rdx,4),%eax
         : 267  ./elf/dl-lookup.c:423
   32.41 :   b734:   test   %eax,%eax
    0.00 :   b736:   je     b50b <do_lookup_x+0x11b>
         : 270  ./elf/dl-lookup.c:425
    0.00 :   b73c:   mov    0x310(%rbx),%rdx
    0.00 :   b743:   mov    %r15d,0x30(%rsp)
    0.00 :   b748:   mov    %r14,0x20(%rsp)
    0.00 :   b74d:   mov    0xe0(%rsp),%r15d
    0.00 :   b755:   mov    %rbp,0xd0(%rsp)
    0.00 :   b75d:   lea    (%rdx,%rax,4),%r13
    0.00 :   b761:   mov    %r10,%rbp
    0.00 :   b764:   mov    0xd8(%rsp),%r14
    0.00 :   b76c:   mov    %r12,0x68(%rsp)
    0.00 :   b771:   mov    %rdi,%r12
    0.00 :   b774:   mov    %r11,0xe8(%rsp)
    0.00 :   b77c:   jmp    b78d <do_lookup_x+0x39d>
    0.00 :   b77e:   xchg   %ax,%ax
         : 284  ./elf/dl-lookup.c:438
    1.94 :   b780:   add    $0x4,%r13
    1.79 :   b784:   and    $0x1,%edx
    0.00 :   b787:   jne    bd70 <do_lookup_x+0x980>
         : 288  ./elf/dl-lookup.c:428
    1.57 :   b78d:   mov    0x0(%r13),%eax
   25.52 :   b791:   mov    %rax,%rdx
    0.00 :   b794:   xor    %r12,%rax
    0.00 :   b797:   shr    %rax
    0.00 :   b79a:   jne    b780 <do_lookup_x+0x390>
         : 294  ./elf/dl-lookup.c:431
    0.00 :   b79c:   sub    $0x8,%rsp
         : 296  ./elf/dl-lookup.c:430
    3.90 :   b7a0:   mov    %r13,%rax
    0.00 :   b7a3:   sub    0x310(%rbx),%rax
         : 299  ./elf/dl-lookup.c:431
    0.00 :   b7aa:   push   0x18(%rsp)
         : 301  ./elf/dl-lookup.c:430
    0.00 :   b7ae:   sar    $0x2,%rax
         : 303  ./elf/dl-lookup.c:432
    0.00 :   b7b2:   mov    %eax,%edx
    0.00 :   b7b4:   lea    (%rdx,%rdx,2),%rdx
         : 306  ./elf/dl-lookup.c:431
    0.00 :   b7b8:   lea    0x98(%rsp),%rcx
    0.00 :   b7c0:   lea    0x0(%rbp,%rdx,8),%r9
    1.97 :   b7c5:   mov    %r14,%rdx
    0.00 :   b7c8:   push   %rcx
    0.00 :   b7c9:   mov    %r15d,%ecx
    0.00 :   b7cc:   push   %rbx
    0.00 :   b7cd:   push   0x20(%rsp)
    1.92 :   b7d1:   push   %rax
    0.00 :   b7d2:   mov    0x120(%rsp),%r8d
    0.00 :   b7da:   mov    0x70(%rsp),%rsi
    0.00 :   b7df:   mov    0x68(%rsp),%rdi
    0.00 :   b7e4:   call   b240 <check_match>
         : 319  ./elf/dl-lookup.c:435
    0.00 :   b7e9:   add    $0x30,%rsp
    0.00 :   b7ed:   test   %rax,%rax
    0.00 :   b7f0:   jne    bfd1 <do_lookup_x+0xbe1>
         : 323  ./elf/dl-lookup.c:438
    0.00 :   b7f6:   mov    0x0(%r13),%edx
    0.00 :   b7fa:   jmp    b780 <do_lookup_x+0x390>
    0.00 :   b7fc:   nopl   0x0(%rax)
         : 327  ./elf/dl-lookup.c:573
    0.00 :   b800:   xor    %eax,%eax
         : 329  ./elf/dl-lookup.c:574
    0.00 :   b802:   add    $0x98,%rsp
    0.00 :   b809:   pop    %rbx
    0.00 :   b80a:   pop    %rbp
    0.00 :   b80b:   pop    %r12
    0.00 :   b80d:   pop    %r13
    0.00 :   b80f:   pop    %r14
    0.00 :   b811:   pop    %r15
    0.00 :   b813:   ret
    0.00 :   b814:   nopl   0x0(%rax)
         : 339  ./elf/dl-lookup.c:480
    0.00 :   b818:   testb  $0x3,0x31c(%rbx)
    0.00 :   b81f:   jne    b82f <do_lookup_x+0x43f>
    0.00 :   b821:   cmpl   $0x4,0xf0(%rsp)
    0.00 :   b829:   je     bd97 <do_lookup_x+0x9a7>
         : 344  dl_symbol_visibility_binds_local_p():
         : 345  ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   b82f:   movzbl 0x5(%r8),%eax
    0.00 :   b834:   and    $0x3,%eax
    0.00 :   b837:   sub    $0x1,%eax
         : 349  do_lookup_x():
         : 350  ./elf/dl-lookup.c:528
    0.00 :   b83a:   cmp    $0x1,%eax
    0.00 :   b83d:   jbe    b50b <do_lookup_x+0x11b>
         : 353  ./elf/dl-lookup.c:535
    0.00 :   b843:   movzbl 0x4(%r8),%eax
    0.00 :   b848:   shr    $0x4,%al
    0.00 :   b84b:   cmp    $0x2,%al
    0.00 :   b84d:   jne    b6f1 <do_lookup_x+0x301>
         : 358  ./elf/dl-lookup.c:539
    0.00 :   b853:   mov    0x2e2db(%rip),%ecx        # 39b34 <_rtld_global_ro+0x54>
    0.00 :   b859:   test   %ecx,%ecx
    0.00 :   b85b:   je     b701 <do_lookup_x+0x311>
         : 362  ./elf/dl-lookup.c:541
    0.00 :   b861:   mov    0x48(%rsp),%rax
    0.00 :   b866:   cmpq   $0x0,(%rax)
    0.00 :   b86a:   jne    b50b <do_lookup_x+0x11b>
         : 366  ./elf/dl-lookup.c:543
    0.00 :   b870:   mov    %r8,(%rax)
         : 368  ./elf/dl-lookup.c:544
    0.00 :   b873:   mov    %rbx,0x8(%rax)
    0.00 :   b877:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   b87c:   nopl   0x0(%rax)
         : 372  do_lookup_unique():
         : 373  ./elf/dl-lookup.c:222
    0.00 :   b880:   mov    0x30(%rbx),%rax
    0.00 :   b884:   movq   %r8,%xmm2
    0.00 :   b889:   movq   %rbx,%xmm3
         : 377  ./elf/dl-lookup.c:224
    0.00 :   b88e:   lea    0x2e7ab(%rip),%r14        # 3a040 <_rtld_global>
    0.00 :   b895:   punpcklqdq %xmm3,%xmm2
    0.00 :   b899:   mov    0x8(%rsp),%r15
    0.00 :   b89e:   mov    %r8,0x8(%rsp)
    0.00 :   b8a3:   lea    (%rax,%rax,4),%rbp
         : 383  ./elf/dl-lookup.c:222
    0.00 :   b8a7:   mov    %rax,0x18(%rsp)
         : 385  ./elf/dl-lookup.c:224
    0.00 :   b8ac:   shl    $0x5,%rbp
    0.00 :   b8b0:   movaps %xmm2,0x20(%rsp)
    0.00 :   b8b5:   lea    0x28(%r14,%rbp,1),%rax
         : 389  ./elf/dl-lookup.c:226
    0.00 :   b8ba:   add    %r14,%rbp
         : 391  ./elf/dl-lookup.c:224
    0.00 :   b8bd:   mov    %rax,0x30(%rsp)
    0.00 :   b8c2:   mov    %rax,%rdi
    0.00 :   b8c5:   call   *0x2e1b5(%rip)        # 39a80 <___rtld_mutex_lock>
         : 395  ./elf/dl-lookup.c:226
    0.00 :   b8cb:   mov    0x50(%rbp),%rax
         : 397  ./elf/dl-lookup.c:227
    0.00 :   b8cf:   mov    0x58(%rbp),%r14
         : 399  ./elf/dl-lookup.c:228
    0.00 :   b8d3:   mov    0x8(%rsp),%rcx
    0.00 :   b8d8:   test   %rax,%rax
         : 402  ./elf/dl-lookup.c:226
    0.00 :   b8db:   mov    %rax,0x10(%rsp)
         : 404  ./elf/dl-lookup.c:228
    0.00 :   b8e0:   je     bcb2 <do_lookup_x+0x8c2>
         : 406  ./elf/dl-lookup.c:230
    0.00 :   b8e6:   mov    %r15,%rax
    0.00 :   b8e9:   xor    %edx,%edx
         : 409  ./elf/dl-lookup.c:231
    0.00 :   b8eb:   lea    -0x2(%r14),%rsi
         : 411  ./elf/dl-lookup.c:230
    0.00 :   b8ef:   mov    0x38(%rsp),%r11
    0.00 :   b8f4:   div    %r14
    0.00 :   b8f7:   mov    %rcx,0x60(%rsp)
    0.00 :   b8fc:   mov    %r11,0x8(%rsp)
    0.00 :   b901:   mov    %rbx,0x50(%rsp)
         : 417  ./elf/dl-lookup.c:231
    0.00 :   b906:   mov    %r15,%rax
         : 419  ./elf/dl-lookup.c:230
    0.00 :   b909:   mov    %rdx,%r12
         : 421  ./elf/dl-lookup.c:231
    0.00 :   b90c:   xor    %edx,%edx
    0.00 :   b90e:   div    %rsi
         : 424  ./elf/dl-lookup.c:230
    1.62 :   b911:   mov    %r12,0x68(%rsp)
    0.00 :   b916:   mov    %r12,%r13
    0.00 :   b919:   mov    %r15,%rax
    0.00 :   b91c:   mov    %r13,%r15
    0.00 :   b91f:   mov    %rax,%r13
         : 430  ./elf/dl-lookup.c:231
    0.00 :   b922:   lea    0x1(%rdx),%r8
    0.00 :   b926:   mov    %r8,%rdx
         : 433  ./elf/dl-lookup.c:230
    0.00 :   b929:   mov    %r8,%rbx
    0.00 :   b92c:   shl    $0x5,%rdx
    0.00 :   b930:   mov    %rdx,%r12
    0.00 :   b933:   mov    %r15,%rbp
    0.00 :   b936:   shl    $0x5,%rbp
    0.00 :   b93a:   add    0x10(%rsp),%rbp
    0.00 :   b93f:   jmp    b960 <do_lookup_x+0x570>
    0.00 :   b941:   nopl   0x0(%rax)
         : 442  ./elf/dl-lookup.c:254
    0.00 :   b948:   test   %rdi,%rdi
    0.00 :   b94b:   je     ba80 <do_lookup_x+0x690>
         : 445  ./elf/dl-lookup.c:257
    0.00 :   b951:   add    %rbx,%r15
         : 447  ./elf/dl-lookup.c:258
    0.00 :   b954:   add    %r12,%rbp
    0.00 :   b957:   cmp    %r15,%r14
    0.00 :   b95a:   jbe    bbe0 <do_lookup_x+0x7f0>
         : 451  ./elf/dl-lookup.c:234
    0.00 :   b960:   mov    0x0(%rbp),%eax
         : 453  ./elf/dl-lookup.c:235
    0.00 :   b963:   mov    0x8(%rbp),%rdi
         : 455  ./elf/dl-lookup.c:234
    0.00 :   b967:   cmp    %rax,%r13
    0.00 :   b96a:   jne    b948 <do_lookup_x+0x558>
         : 458  ./elf/dl-lookup.c:235
    0.00 :   b96c:   mov    0x8(%rsp),%rsi
    0.00 :   b971:   call   27220 <strcmp>
    0.00 :   b976:   test   %eax,%eax
    0.00 :   b978:   jne    b951 <do_lookup_x+0x561>
         : 463  ./elf/dl-lookup.c:237
    0.00 :   b97a:   mov    0x5c(%rsp),%edx
    0.00 :   b97e:   mov    0x50(%rsp),%rbx
    0.00 :   b983:   mov    0x60(%rsp),%rcx
    0.00 :   b988:   test   %edx,%edx
    0.00 :   b98a:   jne    b994 <do_lookup_x+0x5a4>
         : 469  ./elf/dl-lookup.c:247
    0.00 :   b98c:   mov    0x10(%rbp),%rcx
         : 471  ./elf/dl-lookup.c:248
    0.00 :   b990:   mov    0x18(%rbp),%rbx
    0.00 :   b994:   mov    0x48(%rsp),%rax
         : 474  ./elf/dl-lookup.c:250
    0.00 :   b999:   mov    0x30(%rsp),%rdi
    0.00 :   b99e:   mov    %rbx,0x8(%rax)
    0.00 :   b9a2:   mov    %rcx,(%rax)
    0.00 :   b9a5:   call   *0x2e0cd(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 479  ./elf/dl-lookup.c:251
    0.00 :   b9ab:   jmp    b70d <do_lookup_x+0x31d>
         : 481  _dl_check_protected_symbol():
         : 482  ./elf/../sysdeps/generic/dl-protected.h:30
    0.00 :   b9b0:   mov    0xf8(%rsp),%rax
    0.00 :   b9b8:   testb  $0x3,0x31c(%rax)
    0.00 :   b9bf:   jne    b6e1 <do_lookup_x+0x2f1>
         : 486  ./elf/../sysdeps/generic/dl-protected.h:31
    0.00 :   b9c5:   testb  $0x1,0x32c(%rax)
    0.00 :   b9cc:   jne    b6e1 <do_lookup_x+0x2f1>
         : 489  ./elf/../sysdeps/generic/dl-protected.h:33
    0.00 :   b9d2:   testb  $0x1,0x32c(%rbx)
    0.00 :   b9d9:   je     b6e1 <do_lookup_x+0x2f1>
         : 492  ./elf/../sysdeps/generic/dl-protected.h:36
    0.00 :   b9df:   test   %r15d,%r15d
    0.00 :   b9e2:   jne    c095 <do_lookup_x+0xca5>
         : 495  ./elf/../sysdeps/generic/dl-protected.h:42
    0.00 :   b9e8:   mov    0x40(%rsp),%rax
    0.00 :   b9ed:   cmpq   $0x0,0x8(%rax)
    0.00 :   b9f2:   je     b6e1 <do_lookup_x+0x2f1>
         : 499  ./elf/../sysdeps/generic/dl-protected.h:43
    0.00 :   b9f8:   cmpw   $0x0,0x6(%rax)
    0.00 :   b9fd:   jne    b6e1 <do_lookup_x+0x2f1>
         : 502  ./elf/../sysdeps/generic/dl-protected.h:44
    0.00 :   ba03:   mov    0x60(%rsp),%esi
    0.00 :   ba07:   test   %esi,%esi
    0.00 :   ba09:   je     b6e1 <do_lookup_x+0x2f1>
         : 506  ./elf/../sysdeps/generic/dl-protected.h:49
    0.00 :   ba0f:   mov    0x38(%rsp),%r11
    0.00 :   ba14:   mov    0x8(%rbx),%rsi
    0.00 :   ba18:   lea    0x24f39(%rip),%rcx        # 30958 <__PRETTY_FUNCTION__.10+0xc0>
    0.00 :   ba1f:   xor    %edi,%edi
    0.00 :   ba21:   mov    %r11,%rdx
    0.00 :   ba24:   call   2070 <_dl_signal_error@plt>
    0.00 :   ba29:   nopl   0x0(%rax)
         : 514  do_lookup_x():
         : 515  ./elf/../sysdeps/generic/dl-protected.h:49
    0.00 :   ba30:   mov    %rbp,%rbx
    0.00 :   ba33:   mov    0x68(%rsp),%r15d
    0.00 :   ba38:   mov    0x30(%rsp),%r10
    0.00 :   ba3d:   mov    0x70(%rsp),%r14
    0.00 :   ba42:   mov    0xd0(%rsp),%rbp
    0.00 :   ba4a:   mov    0xe8(%rsp),%r11
    0.00 :   ba52:   mov    0x78(%rsp),%r12
         : 523  ./elf/dl-lookup.c:469
    0.00 :   ba57:   cmpl   $0x1,0x84(%rsp)
    0.00 :   ba5f:   jne    b50b <do_lookup_x+0x11b>
         : 526  ./elf/dl-lookup.c:469 (discriminator 1)
    0.00 :   ba65:   mov    0x88(%rsp),%r8
         : 528  ./elf/dl-lookup.c:471 (discriminator 1)
    0.00 :   ba6d:   test   %r8,%r8
    0.00 :   ba70:   jne    b6b0 <do_lookup_x+0x2c0>
         : 531  ./elf/dl-lookup.c:567
    0.00 :   ba76:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   ba7b:   nopl   0x0(%rax,%rax,1)
         : 534  do_lookup_unique():
         : 535  ./elf/dl-lookup.c:262
    0.00 :   ba80:   mov    0x18(%rsp),%rax
    0.00 :   ba85:   lea    (%r14,%r14,2),%rdx
    0.00 :   ba89:   mov    %rbx,%r8
    0.00 :   ba8c:   mov    %r13,%r15
    0.00 :   ba8f:   lea    0x2e5aa(%rip),%rdi        # 3a040 <_rtld_global>
    0.00 :   ba96:   mov    0x60(%rsp),%rcx
    0.00 :   ba9b:   mov    0x50(%rsp),%rbx
    0.00 :   baa0:   lea    (%rax,%rax,4),%rax
    0.00 :   baa4:   mov    0x68(%rsp),%r12
    0.00 :   baa9:   shl    $0x5,%rax
    0.00 :   baad:   mov    0x60(%rdi,%rax,1),%rax
    0.00 :   bab2:   shl    $0x2,%rax
    0.00 :   bab6:   cmp    %rax,%rdx
    0.00 :   bab9:   jbe    be88 <do_lookup_x+0xa98>
         : 550  ./elf/dl-lookup.c:324
    0.00 :   babf:   mov    (%rcx),%eax
    0.00 :   bac1:   add    (%rsp),%rax
    0.00 :   bac5:   movq   %rcx,%xmm5
    0.00 :   baca:   mov    %r8,%rdx
    0.00 :   bacd:   movq   %rax,%xmm0
    0.00 :   bad2:   movq   %rax,%xmm1
         : 557  ./elf/dl-lookup.c:323
    0.00 :   bad7:   mov    0x5c(%rsp),%eax
    0.00 :   badb:   shl    $0x5,%rdx
    0.00 :   badf:   mov    0x10(%rsp),%rcx
    0.00 :   bae4:   movhps 0x40(%rsp),%xmm1
    0.00 :   bae9:   punpcklqdq %xmm5,%xmm0
    0.00 :   baed:   test   %eax,%eax
    0.00 :   baef:   je     bb64 <do_lookup_x+0x774>
    0.00 :   baf1:   mov    %r12,%rax
    0.00 :   baf4:   shl    $0x5,%rax
    0.00 :   baf8:   add    %rcx,%rax
    0.00 :   bafb:   jmp    bb0f <do_lookup_x+0x71f>
    0.00 :   bafd:   nopl   (%rax)
         : 570  enter_unique_sym():
         : 571  ./elf/dl-lookup.c:174
    0.00 :   bb00:   add    %r8,%r12
         : 573  ./elf/dl-lookup.c:175
    0.00 :   bb03:   add    %rdx,%rax
    0.00 :   bb06:   cmp    %r12,%r14
    0.00 :   bb09:   jbe    bbe8 <do_lookup_x+0x7f8>
         : 577  ./elf/dl-lookup.c:172
    0.00 :   bb0f:   cmpq   $0x0,0x8(%rax)
    0.00 :   bb14:   jne    bb00 <do_lookup_x+0x710>
         : 580  ./elf/dl-lookup.c:182
    0.00 :   bb16:   mov    0xf8(%rsp),%rdi
         : 582  ./elf/dl-lookup.c:179
    0.00 :   bb1e:   mov    %r15d,(%rax)
         : 584  ./elf/dl-lookup.c:180
    0.00 :   bb21:   movups %xmm1,0x8(%rax)
         : 586  ./elf/dl-lookup.c:182
    0.00 :   bb25:   mov    %rdi,0x18(%rax)
         : 588  do_lookup_unique():
         : 589  ./elf/dl-lookup.c:342
    0.00 :   bb29:   mov    0x18(%rsp),%rax
    0.00 :   bb2e:   lea    0x2e50b(%rip),%rdi        # 3a040 <_rtld_global>
    0.00 :   bb35:   lea    (%rax,%rax,4),%rax
    0.00 :   bb39:   shl    $0x5,%rax
    0.00 :   bb3d:   addq   $0x1,0x60(%rdi,%rax,1)
         : 595  ./elf/dl-lookup.c:347
    0.00 :   bb43:   mov    0x30(%rsp),%rdi
    0.00 :   bb48:   call   *0x2df2a(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 598  ./elf/dl-lookup.c:349
    0.00 :   bb4e:   mov    0x48(%rsp),%rax
    0.00 :   bb53:   movdqa 0x20(%rsp),%xmm4
    0.00 :   bb59:   movups %xmm4,(%rax)
    0.00 :   bb5c:   jmp    b70d <do_lookup_x+0x31d>
         : 603  enter_unique_sym():
         : 604  ./elf/dl-lookup.c:176
    0.00 :   bb61:   sub    %r14,%r12
    0.00 :   bb64:   mov    %r12,%rax
    0.00 :   bb67:   shl    $0x5,%rax
    0.00 :   bb6b:   add    %rcx,%rax
    0.00 :   bb6e:   jmp    bb7b <do_lookup_x+0x78b>
         : 610  ./elf/dl-lookup.c:174
    0.00 :   bb70:   add    %r8,%r12
         : 612  ./elf/dl-lookup.c:175
    0.00 :   bb73:   add    %rdx,%rax
    0.00 :   bb76:   cmp    %r12,%r14
    0.00 :   bb79:   jbe    bb61 <do_lookup_x+0x771>
         : 616  ./elf/dl-lookup.c:172
    0.00 :   bb7b:   cmpq   $0x0,0x8(%rax)
    0.00 :   bb80:   jne    bb70 <do_lookup_x+0x780>
         : 619  ./elf/dl-lookup.c:179
    0.00 :   bb82:   mov    %r15d,(%rax)
         : 621  ./elf/dl-lookup.c:182
    0.00 :   bb85:   mov    %rbx,0x18(%rax)
         : 623  ./elf/dl-lookup.c:180
    0.00 :   bb89:   movups %xmm0,0x8(%rax)
         : 625  do_lookup_unique():
         : 626  ./elf/dl-lookup.c:331
    0.00 :   bb8d:   movzbl 0x31c(%rbx),%eax
    0.00 :   bb94:   and    $0x3,%eax
    0.00 :   bb97:   cmp    $0x2,%al
    0.00 :   bb99:   jne    bb29 <do_lookup_x+0x739>
         : 631  is_nodelete():
         : 632  ./elf/dl-lookup.c:204
    0.00 :   bb9b:   cmpb   $0x0,0x31f(%rbx)
    0.00 :   bba2:   jne    bb29 <do_lookup_x+0x739>
    0.00 :   bba4:   testb  $0x8,0xe0(%rsp)
    0.00 :   bbac:   je     bffb <do_lookup_x+0xc0b>
    0.00 :   bbb2:   cmpb   $0x0,0x320(%rbx)
    0.00 :   bbb9:   jne    bb29 <do_lookup_x+0x739>
         : 639  do_lookup_unique():
         : 640  ./elf/dl-lookup.c:335
    0.00 :   bbbf:   testb  $0x4,0x2df1a(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   bbc6:   jne    c07a <do_lookup_x+0xc8a>
         : 643  mark_nodelete():
         : 644  ./elf/dl-lookup.c:191
    0.00 :   bbcc:   movb   $0x1,0x320(%rbx)
    0.00 :   bbd3:   jmp    bb29 <do_lookup_x+0x739>
    0.00 :   bbd8:   nopl   0x0(%rax,%rax,1)
         : 648  do_lookup_unique():
         : 649  ./elf/dl-lookup.c:259
    0.00 :   bbe0:   sub    %r14,%r15
    0.00 :   bbe3:   jmp    b933 <do_lookup_x+0x543>
         : 652  enter_unique_sym():
         : 653  ./elf/dl-lookup.c:176
    0.00 :   bbe8:   sub    %r14,%r12
    0.00 :   bbeb:   jmp    baf1 <do_lookup_x+0x701>
         : 656  _dl_elf_hash():
         : 657  ./elf/../sysdeps/generic/dl-hash.h:31
    0.00 :   bbf0:   mov    0x38(%rsp),%rdx
    0.00 :   bbf5:   xor    %eax,%eax
    0.00 :   bbf7:   movzbl (%rdx),%edi
         : 661  ./elf/../sysdeps/generic/dl-hash.h:32
    0.00 :   bbfa:   test   %rdi,%rdi
    0.00 :   bbfd:   je     bca5 <do_lookup_x+0x8b5>
    0.00 :   bc03:   movzbl 0x1(%rdx),%eax
    0.00 :   bc07:   test   %al,%al
    0.00 :   bc09:   je     bfbc <do_lookup_x+0xbcc>
         : 667  ./elf/../sysdeps/generic/dl-hash.h:34
    0.00 :   bc0f:   shl    $0x4,%rdi
    0.00 :   bc13:   add    %rax,%rdi
         : 670  ./elf/../sysdeps/generic/dl-hash.h:35
    0.00 :   bc16:   mov    0x38(%rsp),%rax
    0.00 :   bc1b:   movzbl 0x2(%rax),%eax
    0.00 :   bc1f:   test   %al,%al
    0.00 :   bc21:   je     bfbc <do_lookup_x+0xbcc>
         : 675  ./elf/../sysdeps/generic/dl-hash.h:37
    0.00 :   bc27:   shl    $0x4,%rdi
    0.00 :   bc2b:   add    %rax,%rdi
         : 678  ./elf/../sysdeps/generic/dl-hash.h:38
    0.00 :   bc2e:   mov    0x38(%rsp),%rax
    0.00 :   bc33:   movzbl 0x3(%rax),%eax
    0.00 :   bc37:   test   %al,%al
    0.00 :   bc39:   je     bfbc <do_lookup_x+0xbcc>
         : 683  ./elf/../sysdeps/generic/dl-hash.h:40
    0.00 :   bc3f:   shl    $0x4,%rdi
    0.00 :   bc43:   add    %rax,%rdi
         : 686  ./elf/../sysdeps/generic/dl-hash.h:41
    0.00 :   bc46:   mov    0x38(%rsp),%rax
    0.00 :   bc4b:   movzbl 0x4(%rax),%eax
    0.00 :   bc4f:   test   %al,%al
    0.00 :   bc51:   je     bfbc <do_lookup_x+0xbcc>
         : 691  ./elf/../sysdeps/generic/dl-hash.h:43
    0.00 :   bc57:   shl    $0x4,%rdi
    0.00 :   bc5b:   add    %rdi,%rax
         : 694  ./elf/../sysdeps/generic/dl-hash.h:44
    0.00 :   bc5e:   mov    0x38(%rsp),%rdi
         : 696  ./elf/../sysdeps/generic/dl-hash.h:45
    0.00 :   bc63:   movzbl 0x5(%rdi),%ecx
         : 698  ./elf/../sysdeps/generic/dl-hash.h:44
    0.00 :   bc67:   lea    0x5(%rdi),%rdx
         : 700  ./elf/../sysdeps/generic/dl-hash.h:45
    0.00 :   bc6b:   test   %cl,%cl
    0.00 :   bc6d:   je     bc90 <do_lookup_x+0x8a0>
         : 703  ./elf/../sysdeps/generic/dl-hash.h:48
    0.00 :   bc6f:   shl    $0x4,%rax
    0.00 :   bc73:   add    $0x1,%rdx
    0.00 :   bc77:   add    %rax,%rcx
         : 707  ./elf/../sysdeps/generic/dl-hash.h:62
    0.00 :   bc7a:   mov    %rcx,%rax
    0.00 :   bc7d:   shr    $0x18,%rax
    0.00 :   bc81:   and    $0xf0,%eax
    0.00 :   bc86:   xor    %rcx,%rax
         : 712  ./elf/../sysdeps/generic/dl-hash.h:45
    0.00 :   bc89:   movzbl (%rdx),%ecx
    0.00 :   bc8c:   test   %cl,%cl
    0.00 :   bc8e:   jne    bc6f <do_lookup_x+0x87f>
         : 716  ./elf/../sysdeps/generic/dl-hash.h:67
    0.00 :   bc90:   and    $0xfffffff,%eax
         : 718  do_lookup_x():
         : 719  ./elf/dl-lookup.c:452
    0.00 :   bc95:   xor    %edx,%edx
         : 721  _dl_elf_hash():
         : 722  ./elf/../sysdeps/generic/dl-hash.h:67
    0.00 :   bc97:   mov    %rax,%rdi
         : 724  do_lookup_x():
         : 725  ./elf/dl-lookup.c:452
    0.00 :   bc9a:   div    %rsi
    0.00 :   bc9d:   lea    0x0(,%rdx,4),%rax
         : 728  ./elf/dl-lookup.c:447
    0.00 :   bca5:   mov    0x50(%rsp),%rsi
    0.00 :   bcaa:   mov    %rdi,(%rsi)
    0.00 :   bcad:   jmp    b5c5 <do_lookup_x+0x1d5>
         : 732  do_lookup_unique():
         : 733  ./elf/dl-lookup.c:305
    0.00 :   bcb2:   test   %r14,%r14
    0.00 :   bcb5:   jne    c010 <do_lookup_x+0xc20>
    0.00 :   bcbb:   mov    %rcx,0x8(%rsp)
         : 737  calloc():
         : 738  ./elf/../include/rtld-malloc.h:44
    0.00 :   bcc0:   mov    $0x1f,%esi
    0.00 :   bcc5:   mov    $0x20,%edi
    0.00 :   bcca:   call   *0x2dda0(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   bcd0:   mov    %rax,0x10(%rsp)
         : 743  do_lookup_unique():
         : 744  ./elf/dl-lookup.c:315
    0.00 :   bcd5:   test   %rax,%rax
    0.00 :   bcd8:   je     c0af <do_lookup_x+0xcbf>
         : 747  ./elf/dl-lookup.c:318
    0.00 :   bcde:   mov    %rax,0x50(%rbp)
         : 749  ./elf/dl-lookup.c:313
    0.00 :   bce2:   mov    0x8(%rsp),%rcx
         : 751  enter_unique_sym():
         : 752  ./elf/dl-lookup.c:170
    0.00 :   bce7:   movabs $0x842108421084211,%rdx
         : 754  do_lookup_unique():
         : 755  ./elf/dl-lookup.c:313
    0.00 :   bcf1:   mov    $0x1f,%r14d
         : 757  ./elf/dl-lookup.c:320
    0.00 :   bcf7:   mov    0x2dd6a(%rip),%rax        # 39a68 <__rtld_free>
         : 759  ./elf/dl-lookup.c:319
    0.00 :   bcfe:   movq   $0x1f,0x58(%rbp)
         : 761  ./elf/dl-lookup.c:320
    0.00 :   bd06:   mov    %rax,0x68(%rbp)
         : 763  enter_unique_sym():
         : 764  ./elf/dl-lookup.c:170
    0.00 :   bd0a:   mov    %r15,%rax
    0.00 :   bd0d:   mul    %rdx
    0.00 :   bd10:   mov    %r15,%rax
    0.00 :   bd13:   sub    %rdx,%rax
    0.00 :   bd16:   shr    %rax
    0.00 :   bd19:   lea    (%rdx,%rax,1),%r12
         : 771  ./elf/dl-lookup.c:171
    0.00 :   bd1d:   movabs $0x469ee58469ee5847,%rdx
         : 773  ./elf/dl-lookup.c:170
    0.00 :   bd27:   shr    $0x4,%r12
    0.00 :   bd2b:   mov    %r12,%rax
    0.00 :   bd2e:   shl    $0x5,%rax
    0.00 :   bd32:   sub    %r12,%rax
    0.00 :   bd35:   mov    %r15,%r12
    0.00 :   bd38:   sub    %rax,%r12
         : 780  ./elf/dl-lookup.c:171
    0.00 :   bd3b:   mov    %r15,%rax
    0.00 :   bd3e:   imul   %rdx
    0.00 :   bd41:   mov    %rdx,%rax
    0.00 :   bd44:   mov    %r15,%rdx
    0.00 :   bd47:   sar    $0x3f,%rdx
    0.00 :   bd4b:   sar    $0x3,%rax
    0.00 :   bd4f:   sub    %rdx,%rax
    0.00 :   bd52:   lea    0x0(,%rax,8),%rdx
    0.00 :   bd5a:   sub    %rax,%rdx
    0.00 :   bd5d:   lea    (%rax,%rdx,4),%rax
    0.00 :   bd61:   mov    %r15,%rdx
    0.00 :   bd64:   sub    %rax,%rdx
    0.00 :   bd67:   lea    0x1(%rdx),%r8
    0.00 :   bd6b:   jmp    babf <do_lookup_x+0x6cf>
    0.00 :   bd70:   mov    %rbp,%r10
    0.00 :   bd73:   mov    0x30(%rsp),%r15d
    0.00 :   bd78:   mov    0x20(%rsp),%r14
    0.00 :   bd7d:   mov    0xd0(%rsp),%rbp
    0.00 :   bd85:   mov    0xe8(%rsp),%r11
    0.00 :   bd8d:   mov    0x68(%rsp),%r12
    0.00 :   bd92:   jmp    ba57 <do_lookup_x+0x667>
         : 802  do_lookup_x():
         : 803  ./elf/dl-lookup.c:486
    0.00 :   bd97:   mov    0x78(%rbx),%rdx
    0.00 :   bd9b:   test   %rdx,%rdx
    0.00 :   bd9e:   je     b82f <do_lookup_x+0x43f>
         : 807  ./elf/dl-lookup.c:487
    0.00 :   bda4:   mov    0x80(%rbx),%rax
    0.00 :   bdab:   test   %rax,%rax
    0.00 :   bdae:   je     b82f <do_lookup_x+0x43f>
         : 811  ./elf/dl-lookup.c:488
    0.00 :   bdb4:   mov    0x8(%rax),%rax
    0.00 :   bdb8:   test   %rax,%rax
    0.00 :   bdbb:   je     b82f <do_lookup_x+0x43f>
         : 815  ./elf/dl-lookup.c:491
    0.00 :   bdc1:   mov    0x8(%rdx),%r13
    0.00 :   bdc5:   testb  $0x20,0x31e(%rbx)
    0.00 :   bdcc:   je     bdd1 <do_lookup_x+0x9e1>
         : 819  ./elf/dl-lookup.c:491 (discriminator 2)
    0.00 :   bdce:   add    (%rbx),%r13
         : 821  ./elf/dl-lookup.c:493 (discriminator 5)
    0.00 :   bdd1:   movabs $0xaaaaaaaaaaaaaaab,%rdi
    0.00 :   bddb:   mul    %rdi
    0.00 :   bdde:   mov    %rdx,%rax
    0.00 :   bde1:   shr    $0x4,%rax
         : 826  ./elf/dl-lookup.c:495 (discriminator 5)
    0.00 :   bde5:   test   %eax,%eax
    0.00 :   bde7:   je     b82f <do_lookup_x+0x43f>
    0.00 :   bded:   mov    %eax,%eax
    0.00 :   bdef:   mov    %rbx,0x30(%rsp)
    0.00 :   bdf4:   mov    %r10,%rbx
    0.00 :   bdf7:   lea    (%rax,%rax,2),%rax
    0.00 :   bdfb:   mov    %rbp,0xd0(%rsp)
    0.00 :   be03:   mov    %r13,%rbp
    0.00 :   be06:   lea    0x0(%r13,%rax,8),%rcx
    0.00 :   be0b:   mov    %r8,0x20(%rsp)
    0.00 :   be10:   mov    %r12,%r13
    0.00 :   be13:   mov    %r11,0xe8(%rsp)
    0.00 :   be1b:   mov    %rcx,%r12
    0.00 :   be1e:   jmp    be2d <do_lookup_x+0xa3d>
         : 841  ./elf/dl-lookup.c:495 (discriminator 2)
    0.00 :   be20:   add    $0x18,%rbp
    0.00 :   be24:   cmp    %r12,%rbp
    0.00 :   be27:   je     c040 <do_lookup_x+0xc50>
         : 845  ./elf/dl-lookup.c:496
    0.00 :   be2d:   mov    0x8(%rbp),%rax
    0.00 :   be31:   mov    %eax,%esi
    0.00 :   be33:   cmp    $0x7,%eax
    0.00 :   be36:   je     be20 <do_lookup_x+0xa30>
    0.00 :   be38:   cmp    $0x10,%rsi
    0.00 :   be3c:   je     be20 <do_lookup_x+0xa30>
    0.00 :   be3e:   lea    -0x11(%rsi),%rdi
    0.00 :   be42:   cmp    $0x13,%rdi
    0.00 :   be46:   jbe    be20 <do_lookup_x+0xa30>
    0.00 :   be48:   cmp    $0x5,%rsi
    0.00 :   be4c:   jne    be20 <do_lookup_x+0xa30>
         : 857  ./elf/dl-lookup.c:499
    0.00 :   be4e:   shr    $0x20,%rax
         : 859  ./elf/dl-lookup.c:500
    0.00 :   be52:   mov    0x38(%rsp),%rsi
    0.00 :   be57:   lea    (%rax,%rax,2),%rax
    0.00 :   be5b:   mov    (%rbx,%rax,8),%edi
    0.00 :   be5e:   add    (%rsp),%rdi
    0.00 :   be62:   call   27220 <strcmp>
    0.00 :   be67:   test   %eax,%eax
    0.00 :   be69:   jne    be20 <do_lookup_x+0xa30>
    0.00 :   be6b:   mov    0xd0(%rsp),%rbp
    0.00 :   be73:   mov    0xe8(%rsp),%r11
    0.00 :   be7b:   mov    %r13,%r12
    0.00 :   be7e:   jmp    b50b <do_lookup_x+0x11b>
    0.00 :   be83:   nopl   0x0(%rax,%rax,1)
         : 872  do_lookup_unique():
         : 873  ./elf/dl-lookup.c:269
    0.00 :   be88:   lea    0x1(%r14),%rdi
    0.00 :   be8c:   mov    %rcx,0x38(%rsp)
    0.00 :   be91:   call   d700 <_dl_higher_prime_number>
         : 877  calloc():
         : 878  ./elf/../include/rtld-malloc.h:44
    0.00 :   be96:   mov    $0x20,%edi
         : 880  do_lookup_unique():
         : 881  ./elf/dl-lookup.c:269
    0.00 :   be9b:   mov    %rax,%rbp
         : 883  calloc():
         : 884  ./elf/../include/rtld-malloc.h:44
    0.00 :   be9e:   mov    %rax,%rsi
    0.00 :   bea1:   call   *0x2dbc9(%rip)        # 39a70 <__rtld_calloc>
    0.00 :   bea7:   mov    %rax,%r13
         : 888  do_lookup_unique():
         : 889  ./elf/dl-lookup.c:272
    0.00 :   beaa:   test   %rax,%rax
    0.00 :   bead:   je     c0af <do_lookup_x+0xcbf>
         : 892  enter_unique_sym():
         : 893  ./elf/dl-lookup.c:171
    0.00 :   beb3:   lea    -0x2(%rbp),%rax
    0.00 :   beb7:   mov    0x10(%rsp),%rsi
         : 896  do_lookup_unique():
         : 897  ./elf/dl-lookup.c:279
    0.00 :   bebc:   mov    0x38(%rsp),%rcx
         : 899  enter_unique_sym():
         : 900  ./elf/dl-lookup.c:171
    0.00 :   bec1:   mov    %rax,0x8(%rsp)
    0.00 :   bec6:   mov    %r14,%rax
    0.00 :   bec9:   mov    0x8(%rsp),%r9
    0.00 :   bece:   shl    $0x5,%rax
         : 905  do_lookup_unique():
         : 906  ./elf/dl-lookup.c:279
    0.00 :   bed2:   test   %r14,%r14
    0.00 :   bed5:   mov    %rsi,%rdi
    0.00 :   bed8:   lea    (%rax,%rsi,1),%r11
    0.00 :   bedc:   jne    bee9 <do_lookup_x+0xaf9>
    0.00 :   bede:   jmp    bf55 <do_lookup_x+0xb65>
    0.00 :   bee0:   add    $0x20,%rdi
    0.00 :   bee4:   cmp    %rdi,%r11
    0.00 :   bee7:   je     bf55 <do_lookup_x+0xb65>
         : 915  ./elf/dl-lookup.c:280
    0.00 :   bee9:   mov    0x8(%rdi),%rax
    0.00 :   beed:   test   %rax,%rax
    0.00 :   bef0:   je     bee0 <do_lookup_x+0xaf0>
         : 919  ./elf/dl-lookup.c:281
    0.00 :   bef2:   mov    (%rdi),%r12d
    0.00 :   bef5:   movq   %rax,%xmm0
         : 922  enter_unique_sym():
         : 923  ./elf/dl-lookup.c:170
    0.00 :   befa:   xor    %edx,%edx
         : 925  do_lookup_unique():
         : 926  ./elf/dl-lookup.c:281
    0.00 :   befc:   mov    0x18(%rdi),%r10
    0.00 :   bf00:   movhps 0x10(%rdi),%xmm0
         : 929  enter_unique_sym():
         : 930  ./elf/dl-lookup.c:170
    0.00 :   bf04:   mov    %r12,%rax
         : 932  do_lookup_unique():
         : 933  ./elf/dl-lookup.c:281
    0.00 :   bf07:   mov    %r12,%r8
         : 935  enter_unique_sym():
         : 936  ./elf/dl-lookup.c:170
    0.00 :   bf0a:   div    %rbp
         : 938  ./elf/dl-lookup.c:171
    3.09 :   bf0d:   mov    %r12,%rax
         : 940  ./elf/dl-lookup.c:170
    0.00 :   bf10:   mov    %rdx,%rsi
         : 942  ./elf/dl-lookup.c:171
    0.00 :   bf13:   xor    %edx,%edx
    0.00 :   bf15:   div    %r9
    0.00 :   bf18:   add    $0x1,%rdx
         : 946  ./elf/dl-lookup.c:172
    0.00 :   bf1c:   mov    %rdx,%r12
    0.00 :   bf1f:   shl    $0x5,%r12
    0.00 :   bf23:   mov    %rsi,%rax
    0.00 :   bf26:   shl    $0x5,%rax
    0.00 :   bf2a:   add    %r13,%rax
    0.00 :   bf2d:   jmp    bf3b <do_lookup_x+0xb4b>
    0.00 :   bf2f:   nop
         : 954  ./elf/dl-lookup.c:174
    0.00 :   bf30:   add    %rdx,%rsi
         : 956  ./elf/dl-lookup.c:175
    0.00 :   bf33:   add    %r12,%rax
    0.00 :   bf36:   cmp    %rsi,%rbp
    0.00 :   bf39:   jbe    bf50 <do_lookup_x+0xb60>
         : 960  ./elf/dl-lookup.c:172
    0.00 :   bf3b:   cmpq   $0x0,0x8(%rax)
    0.00 :   bf40:   jne    bf30 <do_lookup_x+0xb40>
         : 963  ./elf/dl-lookup.c:179
    0.00 :   bf42:   mov    %r8d,(%rax)
         : 965  ./elf/dl-lookup.c:182
    0.00 :   bf45:   mov    %r10,0x18(%rax)
         : 967  ./elf/dl-lookup.c:180
    0.00 :   bf49:   movups %xmm0,0x8(%rax)
         : 969  ./elf/dl-lookup.c:183
    0.00 :   bf4d:   jmp    bee0 <do_lookup_x+0xaf0>
    0.00 :   bf4f:   nop
         : 972  ./elf/dl-lookup.c:176
    0.00 :   bf50:   sub    %rbp,%rsi
    0.00 :   bf53:   jmp    bf23 <do_lookup_x+0xb33>
         : 975  do_lookup_unique():
         : 976  ./elf/dl-lookup.c:285
    0.00 :   bf55:   mov    0x18(%rsp),%rax
    0.00 :   bf5a:   mov    0x10(%rsp),%rdi
    0.00 :   bf5f:   mov    %rcx,0x38(%rsp)
         : 980  ./elf/dl-lookup.c:269
    0.00 :   bf64:   mov    %rbp,%r14
         : 982  ./elf/dl-lookup.c:285
    0.00 :   bf67:   lea    (%rax,%rax,4),%r12
    0.00 :   bf6b:   lea    0x2e0ce(%rip),%rax        # 3a040 <_rtld_global>
    0.00 :   bf72:   shl    $0x5,%r12
    0.00 :   bf76:   add    %rax,%r12
    0.00 :   bf79:   call   *0x68(%r12)
         : 988  ./elf/dl-lookup.c:289
    0.00 :   bf7e:   mov    0x2dae3(%rip),%rax        # 39a68 <__rtld_free>
         : 990  enter_unique_sym():
         : 991  ./elf/dl-lookup.c:170
    0.00 :   bf85:   xor    %edx,%edx
         : 993  do_lookup_unique():
         : 994  ./elf/dl-lookup.c:286
    0.00 :   bf87:   mov    %rbp,0x58(%r12)
         : 996  ./elf/dl-lookup.c:288
    0.00 :   bf8c:   mov    %r13,0x50(%r12)
         : 998  ./elf/dl-lookup.c:289
    0.00 :   bf91:   mov    0x38(%rsp),%rcx
    0.00 :   bf96:   mov    %rax,0x68(%r12)
         : 1001 enter_unique_sym():
         : 1002 ./elf/dl-lookup.c:170
    0.00 :   bf9b:   mov    %r15,%rax
    0.00 :   bf9e:   div    %rbp
         : 1005 ./elf/dl-lookup.c:171
    0.00 :   bfa1:   mov    %r13,0x10(%rsp)
    0.00 :   bfa6:   mov    %r15,%rax
         : 1008 ./elf/dl-lookup.c:170
    0.00 :   bfa9:   mov    %rdx,%r12
         : 1010 ./elf/dl-lookup.c:171
    0.00 :   bfac:   xor    %edx,%edx
    0.00 :   bfae:   divq   0x8(%rsp)
    0.00 :   bfb3:   lea    0x1(%rdx),%r8
    0.00 :   bfb7:   jmp    babf <do_lookup_x+0x6cf>
         : 1015 do_lookup_x():
         : 1016 ./elf/dl-lookup.c:452
    0.00 :   bfbc:   mov    %rdi,%rax
    0.00 :   bfbf:   xor    %edx,%edx
    0.00 :   bfc1:   div    %rsi
    0.00 :   bfc4:   lea    0x0(,%rdx,4),%rax
    0.00 :   bfcc:   jmp    bca5 <do_lookup_x+0x8b5>
    0.00 :   bfd1:   mov    %rbp,%r10
    0.00 :   bfd4:   mov    0x30(%rsp),%r15d
    0.00 :   bfd9:   mov    0x20(%rsp),%r14
    0.00 :   bfde:   mov    %rax,%r8
    0.00 :   bfe1:   mov    0xd0(%rsp),%rbp
    0.00 :   bfe9:   mov    0xe8(%rsp),%r11
    0.00 :   bff1:   mov    0x68(%rsp),%r12
    0.00 :   bff6:   jmp    b6b0 <do_lookup_x+0x2c0>
         : 1030 do_lookup_unique():
         : 1031 ./elf/dl-lookup.c:335
    0.00 :   bffb:   testb  $0x4,0x2dade(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   c002:   jne    c062 <do_lookup_x+0xc72>
         : 1034 mark_nodelete():
         : 1035 ./elf/dl-lookup.c:193
    0.00 :   c004:   movb   $0x1,0x31f(%rbx)
    0.00 :   c00b:   jmp    bb29 <do_lookup_x+0x739>
         : 1038 do_lookup_unique():
         : 1039 ./elf/dl-lookup.c:307
    0.00 :   c010:   testb  $0x8,0x2daca(%rip)        # 39ae1 <_rtld_global_ro+0x1>
    0.00 :   c017:   jne    bb43 <do_lookup_x+0x753>
    0.00 :   c01d:   lea    0x2398c(%rip),%rcx        # 2f9b0 <__PRETTY_FUNCTION__.1>
    0.00 :   c024:   mov    $0x133,%edx
    0.00 :   c029:   lea    0x21e4d(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   c030:   lea    0x24959(%rip),%rdi        # 30990 <__PRETTY_FUNCTION__.10+0xf8>
    0.00 :   c037:   call   1e460 <__GI___assert_fail>
    0.00 :   c03c:   nopl   0x0(%rax)
         : 1048 do_lookup_x():
         : 1049 ./elf/dl-lookup.c:307
    0.00 :   c040:   mov    0x30(%rsp),%rbx
    0.00 :   c045:   mov    0x20(%rsp),%r8
    0.00 :   c04a:   mov    %r13,%r12
    0.00 :   c04d:   mov    0xd0(%rsp),%rbp
    0.00 :   c055:   mov    0xe8(%rsp),%r11
    0.00 :   c05d:   jmp    b82f <do_lookup_x+0x43f>
         : 1056 do_lookup_unique():
         : 1057 ./elf/dl-lookup.c:336
    0.00 :   c062:   mov    0x30(%rbx),%rdx
    0.00 :   c066:   mov    0x8(%rbx),%rsi
    0.00 :   c06a:   lea    0x24947(%rip),%rdi        # 309b8 <__PRETTY_FUNCTION__.10+0x120>
    0.00 :   c071:   xor    %eax,%eax
    0.00 :   c073:   call   fbc0 <_dl_debug_printf>
         : 1063 mark_nodelete():
         : 1064 ./elf/dl-lookup.c:190
    0.00 :   c078:   jmp    c004 <do_lookup_x+0xc14>
         : 1066 do_lookup_unique():
         : 1067 ./elf/dl-lookup.c:336
    0.00 :   c07a:   mov    0x30(%rbx),%rdx
    0.00 :   c07e:   mov    0x8(%rbx),%rsi
    0.00 :   c082:   lea    0x2492f(%rip),%rdi        # 309b8 <__PRETTY_FUNCTION__.10+0x120>
    0.00 :   c089:   xor    %eax,%eax
    0.00 :   c08b:   call   fbc0 <_dl_debug_printf>
         : 1073 mark_nodelete():
         : 1074 ./elf/dl-lookup.c:190
    0.00 :   c090:   jmp    bbcc <do_lookup_x+0x7dc>
         : 1076 _dl_check_protected_symbol():
         : 1077 ./elf/../sysdeps/generic/dl-protected.h:40
    0.00 :   c095:   mov    0x38(%rsp),%r11
    0.00 :   c09a:   mov    0x8(%rbx),%rsi
    0.00 :   c09e:   lea    0x2487b(%rip),%rcx        # 30920 <__PRETTY_FUNCTION__.10+0x88>
    0.00 :   c0a5:   xor    %edi,%edi
    0.00 :   c0a7:   mov    %r11,%rdx
    0.00 :   c0aa:   call   2070 <_dl_signal_error@plt>
         : 1084 do_lookup_unique():
         : 1085 ./elf/dl-lookup.c:275
    0.00 :   c0af:   mov    0x30(%rsp),%rdi
    0.00 :   c0b4:   call   *0x2d9be(%rip)        # 39a78 <___rtld_mutex_unlock>
         : 1088 ./elf/dl-lookup.c:276
    0.00 :   c0ba:   lea    0x21dc8(%rip),%rdi        # 2de89 <_sys_errnameidx+0x589>
    0.00 :   c0c1:   xor    %eax,%eax
    0.00 :   c0c3:   call   ff20 <_dl_fatal_printf>
 Percent |	Source code & Disassembly of minisat for cycles:u (40 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>:
         : 6    Minisat::RegionAllocator<unsigned int>::capacity(unsigned int):
         :
         :
         : 88   };
         :
         : 90   template<class T>
         : 91   void RegionAllocator<T>::capacity(uint32_t min_cap)
    0.00 :   b2f0:   endbr64
    0.00 :   b2f4:   push   %rbp
   11.95 :   b2f5:   push   %rbx
    2.52 :   b2f6:   mov    %rdi,%rbx
    2.54 :   b2f9:   sub    $0x8,%rsp
         : 88   {
         : 89   if (cap >= min_cap) return;
   15.15 :   b2fd:   mov    0xc(%rdi),%edi
    2.53 :   b300:   cmp    %esi,%edi
    7.14 :   b302:   jae    b346 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x56>
    0.00 :   b304:   mov    %edi,%eax
    0.00 :   b306:   cs nopw 0x0(%rax,%rax,1)
         : 96   while (cap < min_cap){
         : 97   // NOTE: Multiply by a factor (13/8) without causing overflow, then add 2 and make the
         : 98   // result even by clearing the least significant bit. The resulting sequence of capacities
         : 99   // is carefully chosen to hit a maximum capacity that is close to the '2^32-1' limit when
         : 100  // using 'uint32_t' as indices so that as much as possible of this space can be used.
         : 101  uint32_t delta = ((cap >> 1) + (cap >> 3) + 2) & ~1;
    0.00 :   b310:   mov    %eax,%ecx
    0.00 :   b312:   mov    %eax,%edx
    0.00 :   b314:   shr    %ecx
    0.00 :   b316:   shr    $0x3,%edx
    0.00 :   b319:   lea    0x2(%rcx,%rdx,1),%edx
    2.53 :   b31d:   and    $0xfffffffe,%edx
         : 97   cap += delta;
    2.54 :   b320:   add    %edx,%eax
         :
         : 100  if (cap <= prev_cap)
    0.00 :   b322:   cmp    %eax,%edi
    0.00 :   b324:   jae    b372 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x82>
         : 91   while (cap < min_cap){
    0.00 :   b326:   cmp    %esi,%eax
    0.00 :   b328:   jb     b310 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x20>
    0.00 :   b32a:   mov    %eax,0xc(%rbx)
         : 105  throw OutOfMemoryException();
         : 106  }
         : 107  // printf(" .. (%p) cap = %u\n", this, cap);
         :
         : 109  assert(cap > 0);
         : 110  memory = (T*)xrealloc(memory, sizeof(T)*cap);
    0.00 :   b32d:   mov    %eax,%esi
         : 35   // Simple layer on top of malloc/realloc to catch out-of-memory situtaions and provide some typing:
         :
         : 37   class OutOfMemoryException{};
         : 38   static inline void* xrealloc(void *ptr, size_t size)
         : 39   {
         : 40   void* mem = realloc(ptr, size);
    0.00 :   b32f:   mov    (%rbx),%rdi
    0.00 :   b332:   shl    $0x2,%rsi
         : 106  xrealloc():
    0.00 :   b336:   call   2540 <realloc@plt>
    0.00 :   b33b:   mov    %rax,%rbp
         : 36   if (mem == NULL && errno == ENOMEM){
    0.00 :   b33e:   test   %rax,%rax
    0.00 :   b341:   je     b34d <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x5d>
         : 39   Minisat::RegionAllocator<unsigned int>::capacity(unsigned int):
    0.00 :   b343:   mov    %rbp,(%rbx)
         : 106  }
    0.00 :   b346:   add    $0x8,%rsp
    0.00 :   b34a:   pop    %rbx
   48.02 :   b34b:   pop    %rbp
    5.07 :   b34c:   ret
         : 111  xrealloc():
    0.00 :   b34d:   call   2330 <__errno_location@plt>
    0.00 :   b352:   cmpl   $0xc,(%rax)
    0.00 :   b355:   jne    b343 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x53>
         : 37   throw OutOfMemoryException();
    0.00 :   b357:   mov    $0x1,%edi
    0.00 :   b35c:   call   2360 <__cxa_allocate_exception@plt>
    0.00 :   b361:   xor    %edx,%edx
    0.00 :   b363:   lea    0xd7de(%rip),%rsi        # 18b48 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    0.00 :   b36a:   mov    %rax,%rdi
    0.00 :   b36d:   call   2570 <__cxa_throw@plt>
    0.00 :   b372:   mov    %eax,0xc(%rbx)
    0.00 :   b375:   jmp    b357 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)+0x67>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (54 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000010d60 <_dl_relocate_object>:
         : 6     _dl_relocate_object():
         : 7     ./elf/dl-reloc.c:194
    0.00 :   10d60:  endbr64
    0.00 :   10d64:  push   %rbp
         : 10    ./elf/dl-reloc.c:208
    0.00 :   10d65:  xor    %r8d,%r8d
         : 12    ./elf/dl-reloc.c:194
    0.00 :   10d68:  mov    %rsp,%rbp
    0.00 :   10d6b:  push   %r15
    0.00 :   10d6d:  push   %r14
    0.00 :   10d6f:  mov    %rdi,%r14
    0.00 :   10d72:  push   %r13
    0.00 :   10d74:  push   %r12
    0.00 :   10d76:  push   %rbx
    0.00 :   10d77:  mov    %edx,%ebx
    0.00 :   10d79:  sub    $0xd8,%rsp
         : 22    ./elf/dl-reloc.c:210
    0.00 :   10d80:  and    $0x8000000,%edx
         : 24    ./elf/dl-reloc.c:194
    0.00 :   10d86:  mov    %rsi,-0xb0(%rbp)
    0.00 :   10d8d:  mov    %ecx,-0xd0(%rbp)
         : 27    ./elf/dl-reloc.c:208
    0.00 :   10d93:  mov    %r8b,-0xd9(%rbp)
         : 29    ./elf/dl-reloc.c:210
    0.00 :   10d9a:  jne    10dfe <_dl_relocate_object+0x9e>
    0.00 :   10d9c:  mov    %ecx,%r9d
         : 32    ./elf/dl-reloc.c:213
    0.00 :   10d9f:  mov    0x290d3(%rip),%ecx        # 39e78 <_rtld_global_ro+0x398>
         : 34    ./elf/dl-reloc.c:212
    0.00 :   10da5:  mov    0x290c4(%rip),%rax        # 39e70 <_rtld_global_ro+0x390>
         : 36    ./elf/dl-reloc.c:213
    0.00 :   10dac:  test   %ecx,%ecx
    0.00 :   10dae:  je     10dfe <_dl_relocate_object+0x9e>
    0.00 :   10db0:  xor    %edx,%edx
         : 40    ./elf/dl-reloc.c:218
    0.00 :   10db2:  mov    $0x1,%edi
         : 42    ./elf/dl-reloc.c:220
    0.00 :   10db7:  mov    $0x1,%esi
    0.00 :   10dbc:  jmp    10dda <_dl_relocate_object+0x7a>
    0.00 :   10dbe:  xchg   %ax,%ax
         : 46    ./elf/dl-reloc.c:218
    0.00 :   10dc0:  mov    $0x1,%r9d
         : 48    ./elf/dl-reloc.c:220
    0.00 :   10dc6:  cmpq   $0x0,0x20(%rax)
         : 50    ./elf/dl-reloc.c:222
    0.00 :   10dcb:  mov    0x40(%rax),%rax
         : 52    ./elf/dl-reloc.c:220
    0.00 :   10dcf:  cmovne %esi,%r8d
         : 54    ./elf/dl-reloc.c:213
    0.00 :   10dd3:  add    $0x1,%edx
    0.00 :   10dd6:  cmp    %edx,%ecx
    0.00 :   10dd8:  je     10df0 <_dl_relocate_object+0x90>
         : 58    ./elf/dl-reloc.c:216
    0.00 :   10dda:  cmpq   $0x0,0x28(%rax)
    0.00 :   10ddf:  jne    10dc0 <_dl_relocate_object+0x60>
         : 61    ./elf/dl-reloc.c:218
    0.00 :   10de1:  cmpq   $0x0,0x30(%rax)
    0.00 :   10de6:  cmovne %edi,%r9d
    0.00 :   10dea:  jmp    10dc6 <_dl_relocate_object+0x66>
    0.00 :   10dec:  nopl   0x0(%rax)
    0.00 :   10df0:  mov    %r8b,-0xd9(%rbp)
    0.00 :   10df7:  mov    %r9d,-0xd0(%rbp)
         : 68    ./elf/dl-reloc.c:232
    0.00 :   10dfe:  testb  $0x4,0x31c(%r14)
    0.00 :   10e06:  jne    11105 <_dl_relocate_object+0x3a5>
         : 71    ./elf/dl-reloc.c:238
    0.00 :   10e0c:  mov    0x28cce(%rip),%eax        # 39ae0 <_rtld_global_ro>
    0.00 :   10e12:  mov    -0xd0(%rbp),%r8d
    0.00 :   10e19:  and    $0x20,%eax
    0.00 :   10e1c:  test   %r8d,%r8d
    0.00 :   10e1f:  je     11118 <_dl_relocate_object+0x3b8>
         : 77    ./elf/dl-reloc.c:204
    0.00 :   10e25:  mov    %ebx,%r13d
    0.00 :   10e28:  and    $0x1,%r13d
         : 80    ./elf/dl-reloc.c:242
    0.00 :   10e2c:  test   %eax,%eax
    0.00 :   10e2e:  jne    128a6 <_dl_relocate_object+0x1b46>
         : 83    ./elf/dl-reloc.c:249
    0.00 :   10e34:  mov    0xf0(%r14),%rax
    0.00 :   10e3b:  mov    %rax,-0xf0(%rbp)
    0.00 :   10e42:  test   %rax,%rax
    0.00 :   10e45:  jne    12762 <_dl_relocate_object+0x1a02>
         : 88    elf_machine_runtime_setup():
         : 89    ./elf/../sysdeps/x86_64/dl-machine.h:71
    0.00 :   10e4b:  cmpq   $0x0,0xf8(%r14)
    0.00 :   10e53:  je     10ec0 <_dl_relocate_object+0x160>
    0.00 :   10e55:  test   %r13d,%r13d
    0.00 :   10e58:  je     10ec0 <_dl_relocate_object+0x160>
         : 94    ./elf/../sysdeps/x86_64/dl-machine.h:77
    0.00 :   10e5a:  mov    0x58(%r14),%rax
    0.00 :   10e5e:  mov    0x8(%rax),%rax
    0.00 :   10e62:  testb  $0x20,0x31e(%r14)
    0.00 :   10e6a:  je     10e6f <_dl_relocate_object+0x10f>
    0.00 :   10e6c:  add    (%r14),%rax
         : 100   ./elf/../sysdeps/x86_64/dl-machine.h:81
    0.00 :   10e6f:  mov    0x8(%rax),%rdx
    0.00 :   10e73:  test   %rdx,%rdx
    0.00 :   10e76:  jne    11e2f <_dl_relocate_object+0x10cf>
         : 104   ./elf/../sysdeps/x86_64/dl-machine.h:95
    0.00 :   10e7c:  mov    -0xd0(%rbp),%edi
         : 106   ./elf/../sysdeps/x86_64/dl-machine.h:87
    0.00 :   10e82:  mov    %r14,0x8(%rax)
         : 108   ./elf/../sysdeps/x86_64/dl-machine.h:95
    0.00 :   10e86:  test   %edi,%edi
    0.00 :   10e88:  jne    12c2a <_dl_relocate_object+0x1eca>
         : 111   ./elf/../sysdeps/x86_64/dl-machine.h:115
    0.00 :   10e8e:  cmpq   $0x0,0x28dfa(%rip)        # 39c90 <_rtld_global_ro+0x1b0>
    0.00 :   10e96:  je     11e51 <_dl_relocate_object+0x10f1>
         : 114   ./elf/../sysdeps/x86_64/dl-machine.h:119
    0.00 :   10e9c:  testb  $0x2,0x28d31(%rip)        # 39bd4 <_rtld_global_ro+0xf4>
    0.00 :   10ea3:  lea    0x4db6(%rip),%rdx        # 15c60 <_dl_runtime_resolve_xsave>
    0.00 :   10eaa:  lea    0x4e7f(%rip),%rcx        # 15d30 <_dl_runtime_resolve_xsavec>
    0.00 :   10eb1:  mov    $0x1,%r13d
    0.00 :   10eb7:  cmovne %rcx,%rdx
         : 120   ./elf/../sysdeps/x86_64/dl-machine.h:117
    0.00 :   10ebb:  mov    %rdx,0x10(%rax)
    0.00 :   10ebf:  nop
         : 123   _dl_relocate_object():
         : 124   ./elf/dl-reloc.c:288
    0.00 :   10ec0:  mov    0x78(%r14),%rax
    0.00 :   10ec4:  pxor   %xmm0,%xmm0
    0.00 :   10ec8:  mov    (%r14),%r15
    0.00 :   10ecb:  movaps %xmm0,-0x70(%rbp)
    0.00 :   10ecf:  movaps %xmm0,-0x60(%rbp)
    0.00 :   10ed3:  movaps %xmm0,-0x50(%rbp)
    0.00 :   10ed7:  movaps %xmm0,-0x40(%rbp)
    0.00 :   10edb:  test   %rax,%rax
    0.00 :   10ede:  je     11d70 <_dl_relocate_object+0x1010>
         : 134   ./elf/dl-reloc.c:288 (discriminator 1)
    0.00 :   10ee4:  mov    0x8(%rax),%rdx
    0.00 :   10ee8:  testb  $0x20,0x31e(%r14)
    0.00 :   10ef0:  lea    (%rdx,%r15,1),%rax
    0.00 :   10ef4:  cmovne %rax,%rdx
    0.00 :   10ef8:  mov    0x80(%r14),%rax
    0.00 :   10eff:  mov    0x8(%rax),%rsi
    0.00 :   10f03:  movq   %rdx,%xmm0
    0.00 :   10f08:  mov    0x188(%r14),%rax
    0.00 :   10f0f:  movq   %rsi,%xmm5
    0.00 :   10f14:  lea    (%rsi,%rdx,1),%rdi
    0.00 :   10f18:  punpcklqdq %xmm5,%xmm0
    0.00 :   10f1c:  movaps %xmm0,-0x70(%rbp)
    0.00 :   10f20:  test   %rax,%rax
    0.00 :   10f23:  je     10f2d <_dl_relocate_object+0x1cd>
         : 149   ./elf/dl-reloc.c:288 (discriminator 7)
    0.00 :   10f25:  mov    0x8(%rax),%rax
    0.00 :   10f29:  mov    %rax,-0x60(%rbp)
         : 152   ./elf/dl-reloc.c:288 (discriminator 9)
    0.00 :   10f2d:  cmpq   $0x0,0xe0(%r14)
    0.00 :   10f35:  je     10f92 <_dl_relocate_object+0x232>
         : 155   ./elf/dl-reloc.c:288 (discriminator 10)
    0.00 :   10f37:  mov    0xf8(%r14),%rax
    0.00 :   10f3e:  testb  $0x20,0x31e(%r14)
    0.00 :   10f46:  mov    0x8(%rax),%rcx
    0.00 :   10f4a:  lea    (%rcx,%r15,1),%rax
    0.00 :   10f4e:  cmovne %rax,%rcx
    0.00 :   10f52:  mov    0x50(%r14),%rax
    0.00 :   10f56:  mov    0x8(%rax),%rax
    0.00 :   10f5a:  movq   %rcx,%xmm0
    0.00 :   10f5f:  movq   %rax,%xmm6
    0.00 :   10f64:  lea    (%rax,%rcx,1),%r8
    0.00 :   10f68:  punpcklqdq %xmm6,%xmm0
    0.00 :   10f6c:  cmp    %rdi,%r8
    0.00 :   10f6f:  jne    10f7c <_dl_relocate_object+0x21c>
         : 169   ./elf/dl-reloc.c:288 (discriminator 16)
    0.00 :   10f71:  sub    %rax,%rsi
    0.00 :   10f74:  mov    %rsi,-0x68(%rbp)
    0.00 :   10f78:  lea    (%rsi,%rdx,1),%rdi
         : 173   ./elf/dl-reloc.c:288 (discriminator 18)
    0.00 :   10f7c:  test   %r13d,%r13d
    0.00 :   10f7f:  jne    10f8a <_dl_relocate_object+0x22a>
         : 176   ./elf/dl-reloc.c:288 (discriminator 19)
    0.00 :   10f81:  cmp    %rdi,%rcx
    0.00 :   10f84:  je     11e67 <_dl_relocate_object+0x1107>
         : 179   ./elf/dl-reloc.c:288 (discriminator 22)
    0.00 :   10f8a:  mov    %r13d,-0x38(%rbp)
    0.00 :   10f8e:  movaps %xmm0,-0x50(%rbp)
    0.00 :   10f92:  lea    -0x70(%rbp),%rax
         : 183   ./elf/dl-reloc.c:205 (discriminator 27)
    0.00 :   10f96:  and    $0x2000000,%ebx
         : 185   elf_machine_rela():
         : 186   ./elf/../sysdeps/x86_64/dl-machine.h:474 (discriminator 27)
    0.00 :   10f9c:  mov    %r15,%r10
    0.00 :   10f9f:  mov    %r14,%r11
    0.00 :   10fa2:  mov    %rax,-0xc8(%rbp)
    0.00 :   10fa9:  lea    -0x30(%rbp),%rax
         : 191   _dl_relocate_object():
         : 192   ./elf/dl-reloc.c:205 (discriminator 27)
    0.00 :   10fad:  mov    %ebx,-0xcc(%rbp)
    0.00 :   10fb3:  mov    %rax,-0xe8(%rbp)
         : 195   ./elf/dl-reloc.c:288 (discriminator 27)
    0.00 :   10fba:  mov    -0xc8(%rbp),%rsi
    0.00 :   10fc1:  mov    (%rsi),%r12
         : 198   elf_dynamic_do_Rela():
         : 199   ./elf/do-rel.h:49 (discriminator 27)
    0.00 :   10fc4:  mov    0x8(%rsi),%rcx
         : 201   _dl_relocate_object():
         : 202   ./elf/dl-reloc.c:288 (discriminator 27)
    0.00 :   10fc8:  mov    0x10(%rsi),%rax
         : 204   elf_dynamic_do_Rela():
         : 205   ./elf/do-rel.h:60 (discriminator 27)
    0.00 :   10fcc:  mov    0x18(%rsi),%esi
         : 207   ./elf/do-rel.h:49 (discriminator 27)
    0.00 :   10fcf:  add    %r12,%rcx
    0.00 :   10fd2:  mov    %rcx,-0x98(%rbp)
         : 210   ./elf/do-rel.h:60 (discriminator 27)
    0.00 :   10fd9:  test   %esi,%esi
    0.00 :   10fdb:  je     112d0 <_dl_relocate_object+0x570>
         : 213   ./elf/do-rel.h:53
    0.00 :   10fe1:  xor    %r15d,%r15d
         : 215   ./elf/do-rel.h:52
    0.00 :   10fe4:  xor    %ebx,%ebx
         : 217   ./elf/do-rel.h:63
    0.00 :   10fe6:  cmp    %rcx,%r12
    0.00 :   10fe9:  jae    110a5 <_dl_relocate_object+0x345>
    0.00 :   10fef:  mov    %r11,%rax
    0.00 :   10ff2:  mov    %r10,%r14
    0.00 :   10ff5:  mov    %r15,%r11
    0.00 :   10ff8:  mov    -0x98(%rbp),%r10
    0.00 :   10fff:  mov    %rax,%r15
    0.00 :   11002:  jmp    11036 <_dl_relocate_object+0x2d6>
    0.00 :   11004:  nopl   0x0(%rax)
         : 227   elf_machine_lazy_rel():
         : 228   ./elf/../sysdeps/x86_64/dl-machine.h:545
    0.00 :   11008:  mov    (%r12),%r13
    0.00 :   1100c:  add    %r14,%r13
         : 231   ./elf/../sysdeps/x86_64/dl-machine.h:549
    0.00 :   1100f:  cmp    $0x7,%rax
    0.00 :   11013:  jne    11150 <_dl_relocate_object+0x3f0>
         : 234   ./elf/../sysdeps/x86_64/dl-machine.h:552
    0.00 :   11019:  mov    0x3f8(%r15),%rax
    0.00 :   11020:  test   %rax,%rax
    0.00 :   11023:  jne    112b0 <_dl_relocate_object+0x550>
         : 238   ./elf/../sysdeps/x86_64/dl-machine.h:553
    0.00 :   11029:  add    %r14,0x0(%r13)
         : 240   elf_dynamic_do_Rela():
         : 241   ./elf/do-rel.h:63
    0.00 :   1102d:  add    $0x18,%r12
    0.00 :   11031:  cmp    %r12,%r10
    0.00 :   11034:  jbe    11055 <_dl_relocate_object+0x2f5>
         : 245   ./elf/do-rel.h:65
    0.00 :   11036:  mov    0x8(%r12),%rsi
    2.17 :   1103b:  mov    %esi,%eax
    0.00 :   1103d:  cmp    $0x25,%esi
    0.00 :   11040:  jne    11008 <_dl_relocate_object+0x2a8>
         : 250   ./elf/do-rel.h:67
    0.00 :   11042:  test   %rbx,%rbx
    0.00 :   11045:  mov    %r12,%r11
    0.00 :   11048:  cmove  %r12,%rbx
         : 254   ./elf/do-rel.h:63
    0.00 :   1104c:  add    $0x18,%r12
    0.00 :   11050:  cmp    %r12,%r10
    0.00 :   11053:  ja     11036 <_dl_relocate_object+0x2d6>
         : 258   ./elf/do-rel.h:76
    0.00 :   11055:  mov    %r15,%rax
    0.00 :   11058:  mov    %r14,%r10
    0.00 :   1105b:  mov    %r11,%r15
    0.00 :   1105e:  mov    %rax,%r11
    0.00 :   11061:  test   %rbx,%rbx
    0.00 :   11064:  je     110a5 <_dl_relocate_object+0x345>
         : 265   ./elf/do-rel.h:77
    0.00 :   11066:  cmp    %r15,%rbx
    0.00 :   11069:  ja     110a5 <_dl_relocate_object+0x345>
    0.00 :   1106b:  mov    -0xcc(%rbp),%edi
    0.00 :   11071:  mov    %r14,%r12
    0.00 :   11074:  mov    %rax,%r13
    0.00 :   11077:  test   %edi,%edi
    0.00 :   11079:  jne    11c23 <_dl_relocate_object+0xec3>
    0.00 :   1107f:  nop
         : 274   ./elf/do-rel.h:78
    0.00 :   11080:  cmpl   $0x25,0x8(%rbx)
    0.00 :   11084:  jne    11099 <_dl_relocate_object+0x339>
         : 277   elf_machine_lazy_rel():
         : 278   ./elf/../sysdeps/x86_64/dl-machine.h:545
    0.00 :   11086:  mov    (%rbx),%r14
         : 280   ./elf/../sysdeps/x86_64/dl-machine.h:579
    0.00 :   11089:  mov    0x10(%rbx),%rax
    0.00 :   1108d:  add    0x0(%r13),%rax
         : 283   ./elf/../sysdeps/x86_64/dl-machine.h:581
    0.00 :   11091:  call   *%rax
         : 285   ./elf/../sysdeps/x86_64/dl-machine.h:545
    0.00 :   11093:  add    %r12,%r14
         : 287   ./elf/../sysdeps/x86_64/dl-machine.h:582
    0.00 :   11096:  mov    %rax,(%r14)
         : 289   elf_dynamic_do_Rela():
         : 290   ./elf/do-rel.h:77
    0.00 :   11099:  add    $0x18,%rbx
    0.00 :   1109d:  cmp    %r15,%rbx
    0.00 :   110a0:  jbe    11080 <_dl_relocate_object+0x320>
    0.00 :   110a2:  mov    %r13,%r11
         : 295   _dl_relocate_object():
         : 296   ./elf/dl-reloc.c:288
    0.00 :   110a5:  addq   $0x20,-0xc8(%rbp)
    0.00 :   110ad:  mov    -0xc8(%rbp),%rax
    0.00 :   110b4:  cmp    -0xe8(%rbp),%rax
    0.00 :   110bb:  jne    11c00 <_dl_relocate_object+0xea0>
         : 301   ./elf/dl-reloc.c:291
    0.00 :   110c1:  mov    -0xd0(%rbp),%eax
    0.00 :   110c7:  mov    %r11,%r14
    0.00 :   110ca:  test   %eax,%eax
    0.00 :   110cc:  jne    11cb0 <_dl_relocate_object+0xf50>
    0.00 :   110d2:  cmpb   $0x0,-0xd9(%rbp)
    0.00 :   110d9:  jne    11cb0 <_dl_relocate_object+0xf50>
         : 308   ./elf/dl-reloc.c:315
    0.00 :   110df:  orb    $0x4,0x31c(%r14)
         : 310   ./elf/dl-reloc.c:318
    0.00 :   110e7:  cmpq   $0x0,-0xf0(%rbp)
    0.00 :   110ef:  jne    1292c <_dl_relocate_object+0x1bcc>
         : 313   ./elf/dl-reloc.c:335
    0.00 :   110f5:  mov    0x478(%r14),%rax
    0.00 :   110fc:  test   %rax,%rax
    0.00 :   110ff:  jne    11db0 <_dl_relocate_object+0x1050>
         : 317   ./elf/dl-reloc.c:337
    0.00 :   11105:  lea    -0x28(%rbp),%rsp
    0.00 :   11109:  pop    %rbx
    0.00 :   1110a:  pop    %r12
    0.00 :   1110c:  pop    %r13
    0.00 :   1110e:  pop    %r14
    0.00 :   11110:  pop    %r15
    0.00 :   11112:  pop    %rbp
    0.00 :   11113:  ret
    0.00 :   11114:  nopl   0x0(%rax)
         : 327   ./elf/dl-reloc.c:239
    0.00 :   11118:  cmpq   $0x0,0x100(%r14)
    0.00 :   11120:  je     10e25 <_dl_relocate_object+0xc5>
         : 330   ./elf/dl-reloc.c:242
    0.00 :   11126:  test   %eax,%eax
    0.00 :   11128:  jne    12da0 <_dl_relocate_object+0x2040>
         : 333   ./elf/dl-reloc.c:249
    0.00 :   1112e:  mov    0xf0(%r14),%rax
    0.00 :   11135:  mov    %rax,-0xf0(%rbp)
    0.00 :   1113c:  test   %rax,%rax
    0.00 :   1113f:  jne    12d63 <_dl_relocate_object+0x2003>
         : 338   ./elf/dl-reloc.c:240
    0.00 :   11145:  xor    %r13d,%r13d
    0.00 :   11148:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   1114d:  nopl   (%rax)
         : 342   elf_machine_lazy_rel():
         : 343   ./elf/../sysdeps/x86_64/dl-machine.h:559
    0.00 :   11150:  cmp    $0x24,%rax
    0.00 :   11154:  jne    126c6 <_dl_relocate_object+0x1966>
         : 346   ./elf/../sysdeps/x86_64/dl-machine.h:562
    0.00 :   1115a:  mov    0x70(%r15),%rax
         : 348   ./elf/../sysdeps/x86_64/dl-machine.h:561
    0.00 :   1115e:  shr    $0x20,%rsi
         : 350   ./elf/../sysdeps/x86_64/dl-machine.h:562
    0.00 :   11162:  xor    %edx,%edx
    0.00 :   11164:  mov    0x8(%rax),%rcx
    0.00 :   11168:  testb  $0x20,0x31e(%r15)
    0.00 :   11170:  je     11178 <_dl_relocate_object+0x418>
    0.00 :   11172:  mov    (%r15),%rdx
    0.00 :   11175:  add    %rdx,%rcx
         : 357   ./elf/../sysdeps/x86_64/dl-machine.h:563
    0.00 :   11178:  lea    (%rsi,%rsi,1),%rax
         : 359   ./elf/../sysdeps/x86_64/dl-machine.h:566
    0.00 :   1117c:  mov    0x1d0(%r15),%r8
         : 361   ./elf/../sysdeps/x86_64/dl-machine.h:563
    0.00 :   11183:  add    %rax,%rsi
    0.00 :   11186:  lea    (%rcx,%rsi,8),%rcx
    0.00 :   1118a:  mov    %rcx,-0x88(%rbp)
         : 365   ./elf/../sysdeps/x86_64/dl-machine.h:566
    0.00 :   11191:  test   %r8,%r8
    0.00 :   11194:  je     111b4 <_dl_relocate_object+0x454>
         : 368   ./elf/../sysdeps/x86_64/dl-machine.h:570
    0.00 :   11196:  add    %rdx,%rax
    0.00 :   11199:  add    0x8(%r8),%rax
    0.00 :   1119d:  movzwl (%rax),%eax
    0.00 :   111a0:  and    $0x7fff,%eax
    0.00 :   111a5:  lea    (%rax,%rax,2),%rcx
    0.00 :   111a9:  mov    0x2e8(%r15),%rax
    0.00 :   111b0:  lea    (%rax,%rcx,8),%r8
         : 376   ./elf/../sysdeps/x86_64/dl-machine.h:575
    0.00 :   111b4:  mov    -0x88(%rbp),%rsi
    0.00 :   111bb:  mov    %rsi,-0x78(%rbp)
         : 379   elf_machine_rela():
         : 380   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   111bf:  movzbl 0x4(%rsi),%eax
    0.00 :   111c3:  mov    %eax,%edi
    0.00 :   111c5:  shr    $0x4,%dil
    0.00 :   111c9:  je     11c40 <_dl_relocate_object+0xee0>
         : 385   dl_symbol_visibility_binds_local_p():
         : 386   ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   111cf:  movzbl 0x5(%rsi),%ecx
    0.00 :   111d3:  and    $0x3,%ecx
    0.00 :   111d6:  sub    $0x1,%ecx
         : 390   elf_machine_rela():
         : 391   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   111d9:  cmp    $0x1,%ecx
    0.00 :   111dc:  jbe    12b55 <_dl_relocate_object+0x1df5>
    0.00 :   111e2:  cmp    0x410(%r15),%rsi
    0.00 :   111e9:  je     12bd0 <_dl_relocate_object+0x1e70>
    0.00 :   111ef:  mov    -0x88(%rbp),%rax
    0.00 :   111f6:  movl   $0x1,0x418(%r15)
    0.00 :   11201:  mov    %rax,0x410(%r15)
    0.00 :   11208:  test   %r8,%r8
    0.00 :   1120b:  je     11219 <_dl_relocate_object+0x4b9>
    0.00 :   1120d:  mov    0x8(%r8),%ecx
    0.00 :   11211:  xor    %eax,%eax
    0.00 :   11213:  test   %ecx,%ecx
    0.00 :   11215:  cmove  %rax,%r8
    0.00 :   11219:  mov    0x68(%r15),%rcx
    0.00 :   1121d:  lea    -0x78(%rbp),%rax
    0.00 :   11221:  mov    $0x1,%r9d
    0.00 :   11227:  mov    %r15,%rsi
    0.00 :   1122a:  mov    %r11,-0x98(%rbp)
    0.00 :   11231:  add    0x8(%rcx),%rdx
    0.00 :   11235:  mov    -0x88(%rbp),%rcx
    0.00 :   1123c:  mov    %r10,-0x90(%rbp)
    0.00 :   11243:  mov    (%rcx),%ecx
    0.00 :   11245:  push   $0x0
    0.00 :   11247:  push   $0x9
    0.00 :   11249:  lea    (%rdx,%rcx,1),%rdi
    0.00 :   1124d:  mov    -0xb0(%rbp),%rcx
    0.00 :   11254:  mov    %rax,%rdx
    0.00 :   11257:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   1125c:  mov    -0x78(%rbp),%rdx
    0.00 :   11260:  movq   %rax,%xmm0
    0.00 :   11265:  mov    %rax,%r9
    0.00 :   11268:  movq   %rdx,%xmm7
    0.00 :   1126d:  punpcklqdq %xmm7,%xmm0
    0.00 :   11271:  movups %xmm0,0x420(%r15)
    0.00 :   11279:  pop    %r10
    0.00 :   1127b:  pop    %r11
    0.00 :   1127d:  mov    -0x90(%rbp),%r10
    0.00 :   11284:  mov    -0x98(%rbp),%r11
         : 430   ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   1128b:  test   %rdx,%rdx
    0.00 :   1128e:  jne    12c89 <_dl_relocate_object+0x1f29>
         : 433   ./elf/../sysdeps/x86_64/dl-machine.h:392
    0.00 :   11294:  mov    0x10(%r12),%rax
    0.00 :   11299:  mov    %rax,0x8(%r13)
         : 436   ./elf/../sysdeps/x86_64/dl-machine.h:393
    0.00 :   1129d:  lea    0x6e6c(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   112a4:  mov    %rax,0x0(%r13)
    0.00 :   112a8:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   112ad:  nopl   (%rax)
         : 441   elf_machine_lazy_rel():
         : 442   ./elf/../sysdeps/x86_64/dl-machine.h:557
    0.00 :   112b0:  mov    %r13,%rdx
    0.00 :   112b3:  sub    0x400(%r15),%rdx
    0.00 :   112ba:  lea    (%rax,%rdx,2),%rax
    0.00 :   112be:  mov    %rax,0x0(%r13)
    0.00 :   112c2:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   112c7:  nopw   0x0(%rax,%rax,1)
         : 449   elf_dynamic_do_Rela():
         : 450   ./elf/do-rel.h:86
    0.00 :   112d0:  mov    0x70(%r11),%rdx
    0.00 :   112d4:  testb  $0x20,0x31e(%r11)
         : 453   ./elf/do-rel.h:88
    0.00 :   112dc:  lea    (%rax,%rax,2),%rax
    0.00 :   112e0:  lea    (%r12,%rax,8),%rbx
         : 456   ./elf/do-rel.h:100
    0.00 :   112e4:  lea    0x29805(%rip),%rax        # 3aaf0 <_rtld_global+0xab0>
         : 458   ./elf/do-rel.h:86
    0.00 :   112eb:  mov    0x8(%rdx),%rcx
    0.00 :   112ef:  lea    (%rcx,%r10,1),%rdx
    0.00 :   112f3:  cmove  %rcx,%rdx
    0.00 :   112f7:  mov    %rdx,-0x90(%rbp)
         : 463   ./elf/do-rel.h:100
    0.00 :   112fe:  cmp    %rax,%r11
    0.00 :   11301:  je     11348 <_dl_relocate_object+0x5e8>
         : 466   ./elf/do-rel.h:110
    0.00 :   11303:  test   %r10,%r10
    0.00 :   11306:  je     11d80 <_dl_relocate_object+0x1020>
         : 469   ./elf/do-rel.h:113
    0.00 :   1130c:  cmp    %rbx,%r12
    0.00 :   1130f:  jae    11348 <_dl_relocate_object+0x5e8>
    0.00 :   11311:  nopl   0x0(%rax)
         : 473   ./elf/do-rel.h:114
    0.00 :   11318:  mov    (%r12),%rdx
         : 475   elf_machine_rela_relative():
         : 476   ./elf/../sysdeps/x86_64/dl-machine.h:529
    2.49 :   1131c:  mov    0x8(%r12),%eax
         : 478   elf_dynamic_do_Rela():
         : 479   ./elf/do-rel.h:114
    1.38 :   11321:  add    %r10,%rdx
         : 481   elf_machine_rela_relative():
         : 482   ./elf/../sysdeps/x86_64/dl-machine.h:529
    0.00 :   11324:  cmp    $0x26,%rax
    0.00 :   11328:  je     11334 <_dl_relocate_object+0x5d4>
         : 485   ./elf/../sysdeps/x86_64/dl-machine.h:534
    0.00 :   1132a:  cmp    $0x8,%rax
    0.00 :   1132e:  jne    12dfe <_dl_relocate_object+0x209e>
         : 488   ./elf/../sysdeps/x86_64/dl-machine.h:535
    0.00 :   11334:  mov    0x10(%r12),%rax
         : 490   elf_dynamic_do_Rela():
         : 491   ./elf/do-rel.h:113
    1.31 :   11339:  add    $0x18,%r12
         : 493   elf_machine_rela_relative():
         : 494   ./elf/../sysdeps/x86_64/dl-machine.h:535
    0.00 :   1133d:  add    %r10,%rax
         : 496   ./elf/../sysdeps/x86_64/dl-machine.h:530
    0.00 :   11340:  mov    %rax,(%rdx)
         : 498   elf_dynamic_do_Rela():
         : 499   ./elf/do-rel.h:113
    0.00 :   11343:  cmp    %r12,%rbx
    0.00 :   11346:  ja     11318 <_dl_relocate_object+0x5b8>
         : 502   ./elf/do-rel.h:120
    0.00 :   11348:  mov    0x1d0(%r11),%rax
    0.00 :   1134f:  mov    %rax,-0xa0(%rbp)
    0.00 :   11356:  test   %rax,%rax
    0.00 :   11359:  je     11e78 <_dl_relocate_object+0x1118>
         : 507   ./elf/do-rel.h:124
    0.00 :   1135f:  mov    0x8(%rax),%rax
    0.00 :   11363:  mov    %rax,-0xa0(%rbp)
    0.00 :   1136a:  testb  $0x20,0x31e(%r11)
    0.00 :   11372:  jne    11d98 <_dl_relocate_object+0x1038>
         : 512   ./elf/do-rel.h:126
    0.00 :   11378:  cmp    %rbx,-0x98(%rbp)
    0.00 :   1137f:  jbe    110a5 <_dl_relocate_object+0x345>
         : 515   ./elf/do-rel.h:53
    0.00 :   11385:  movq   $0x0,-0xd8(%rbp)
         : 517   elf_machine_rela():
         : 518   ./elf/../sysdeps/x86_64/dl-machine.h:484
    0.00 :   11390:  mov    %r11,%r15
         : 520   elf_dynamic_do_Rela():
         : 521   ./elf/do-rel.h:52
    0.00 :   11393:  movq   $0x0,-0xc0(%rbp)
         : 523   elf_machine_rela():
         : 524   ./elf/../sysdeps/x86_64/dl-machine.h:484
    0.00 :   1139e:  mov    %r10,-0xa8(%rbp)
    0.00 :   113a5:  nopl   (%rax)
         : 527   elf_dynamic_do_Rela():
         : 528   ./elf/do-rel.h:128
    0.00 :   113a8:  mov    0x8(%rbx),%r14
    0.00 :   113ac:  mov    -0xa0(%rbp),%rax
         : 531   ./elf/do-rel.h:129
    0.00 :   113b3:  mov    -0x90(%rbp),%rcx
         : 533   ./elf/do-rel.h:130
    0.00 :   113ba:  mov    -0xa8(%rbp),%rdi
         : 535   ./elf/do-rel.h:128
    0.00 :   113c1:  mov    %r14,%rdx
         : 537   ./elf/do-rel.h:130
    0.00 :   113c4:  add    (%rbx),%rdi
         : 539   ./elf/do-rel.h:133
    0.00 :   113c7:  mov    %r14d,%r12d
         : 541   ./elf/do-rel.h:128
    0.00 :   113ca:  shr    $0x20,%rdx
         : 543   ./elf/do-rel.h:130
    0.00 :   113ce:  mov    %rdi,-0x88(%rbp)
         : 545   ./elf/do-rel.h:128
    0.00 :   113d5:  movzwl (%rax,%rdx,2),%eax
         : 547   ./elf/do-rel.h:129
   20.70 :   113d9:  lea    (%rdx,%rdx,2),%rdx
    0.00 :   113dd:  lea    (%rcx,%rdx,8),%r13
         : 550   ./elf/do-rel.h:131
    0.00 :   113e1:  and    $0x7fff,%eax
         : 552   ./elf/do-rel.h:129
    0.00 :   113e6:  mov    %r13,-0x80(%rbp)
         : 554   ./elf/do-rel.h:131
    0.00 :   113ea:  lea    (%rax,%rax,2),%rdx
    2.13 :   113ee:  mov    0x2e8(%r15),%rax
    0.00 :   113f5:  lea    (%rax,%rdx,8),%r10
         : 558   ./elf/do-rel.h:133
    0.00 :   113f9:  cmp    $0x25,%r14d
    0.00 :   113fd:  je     11ac0 <_dl_relocate_object+0xd60>
         : 561   ./elf/do-rel.h:142
    0.00 :   11403:  mov    %r13,-0x78(%rbp)
         : 563   elf_machine_rela():
         : 564   ./elf/../sysdeps/x86_64/dl-machine.h:262
    0.00 :   11407:  cmp    $0x8,%r12
    0.00 :   1140b:  je     11ae8 <_dl_relocate_object+0xd88>
         : 567   ./elf/../sysdeps/x86_64/dl-machine.h:283
    0.00 :   11411:  cmp    $0x26,%r12
    2.21 :   11415:  je     11ae8 <_dl_relocate_object+0xd88>
         : 570   ./elf/../sysdeps/x86_64/dl-machine.h:287
    0.00 :   1141b:  test   %r12,%r12
    0.00 :   1141e:  je     11558 <_dl_relocate_object+0x7f8>
         : 573   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11424:  movzbl 0x4(%r13),%eax
   51.68 :   11429:  mov    %eax,%esi
    0.00 :   1142b:  shr    $0x4,%sil
    0.00 :   1142f:  je     119b0 <_dl_relocate_object+0xc50>
         : 578   dl_symbol_visibility_binds_local_p():
         : 579   ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   11435:  movzbl 0x5(%r13),%edx
    0.00 :   1143a:  and    $0x3,%edx
    0.00 :   1143d:  sub    $0x1,%edx
         : 583   elf_machine_rela():
         : 584   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11440:  cmp    $0x1,%edx
    5.98 :   11443:  jbe    119b0 <_dl_relocate_object+0xc50>
    0.00 :   11449:  xor    %r9d,%r9d
    1.73 :   1144c:  cmp    $0x6,%r12
    0.00 :   11450:  sete   %r9b
    0.00 :   11454:  xor    %eax,%eax
    0.00 :   11456:  shl    $0x2,%r9d
    0.00 :   1145a:  cmp    $0x5,%r12
    0.00 :   1145e:  sete   %al
    0.00 :   11461:  add    %eax,%eax
    0.00 :   11463:  or     %eax,%r9d
    0.00 :   11466:  lea    -0x7(%r12),%rax
    0.00 :   1146b:  cmp    0x410(%r15),%r13
    0.00 :   11472:  je     11d28 <_dl_relocate_object+0xfc8>
    0.00 :   11478:  cmp    $0x1d,%rax
    0.00 :   1147c:  ja     11489 <_dl_relocate_object+0x729>
    0.00 :   1147e:  lea    0x1addb(%rip),%rdx        # 2c260 <CSWTCH.111>
    0.00 :   11485:  or     (%rdx,%rax,4),%r9d
    0.00 :   11489:  mov    %r9d,0x418(%r15)
    0.00 :   11490:  xor    %r8d,%r8d
    0.00 :   11493:  mov    %r13,0x410(%r15)
    0.00 :   1149a:  test   %r10,%r10
    0.00 :   1149d:  je     114a9 <_dl_relocate_object+0x749>
    0.00 :   1149f:  mov    0x8(%r10),%esi
    2.52 :   114a3:  test   %esi,%esi
    0.00 :   114a5:  cmovne %r10,%r8
    0.00 :   114a9:  mov    0x68(%r15),%rax
    0.00 :   114ad:  mov    0x0(%r13),%edi
    0.00 :   114b1:  mov    0x8(%rax),%rcx
    0.00 :   114b5:  xor    %eax,%eax
    0.00 :   114b7:  testb  $0x20,0x31e(%r15)
    0.00 :   114bf:  je     114c4 <_dl_relocate_object+0x764>
    0.00 :   114c1:  mov    (%r15),%rax
    0.00 :   114c4:  push   $0x0
    0.00 :   114c6:  add    %rcx,%rdi
    0.00 :   114c9:  mov    -0xb0(%rbp),%rcx
    0.00 :   114d0:  lea    -0x78(%rbp),%rdx
    0.00 :   114d4:  push   $0x9
    0.00 :   114d6:  add    %rax,%rdi
    0.00 :   114d9:  mov    %r15,%rsi
    0.00 :   114dc:  mov    %r10,-0xb8(%rbp)
    0.00 :   114e3:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   114e8:  mov    -0x78(%rbp),%rdx
    0.00 :   114ec:  mov    -0xb8(%rbp),%r10
    0.00 :   114f3:  movq   %rax,%xmm0
    0.00 :   114f8:  mov    %rax,%r11
    0.00 :   114fb:  movq   %rdx,%xmm1
    0.00 :   11500:  punpcklqdq %xmm1,%xmm0
    0.00 :   11504:  movups %xmm0,0x420(%r15)
    0.00 :   1150c:  pop    %rax
    0.00 :   1150d:  pop    %rcx
         : 636   ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   1150e:  xor    %r9d,%r9d
    0.00 :   11511:  test   %rdx,%rdx
    1.77 :   11514:  jne    11b00 <_dl_relocate_object+0xda0>
         : 640   ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   1151a:  cmp    $0x25,%r12
    0.00 :   1151e:  ja     11ab0 <_dl_relocate_object+0xd50>
    0.00 :   11524:  lea    0x1abf5(%rip),%rdi        # 2c120 <primes.0+0x80>
    0.00 :   1152b:  movslq (%rdi,%r12,4),%rax
    0.00 :   1152f:  add    %rdi,%rax
    0.00 :   11532:  notrack jmp *%rax
         : 647   ./elf/../sysdeps/x86_64/dl-machine.h:341
    0.00 :   11535:  mov    -0x78(%rbp),%rax
    0.00 :   11539:  mov    0x10(%rax),%r9
         : 650   ./elf/../sysdeps/x86_64/dl-machine.h:450
    0.00 :   1153d:  mov    -0x88(%rbp),%rax
    0.00 :   11544:  add    0x10(%rbx),%r9
    1.84 :   11548:  mov    %r9,(%rax)
         : 654   elf_dynamic_do_Rela():
         : 655   ./elf/do-rel.h:145
    0.00 :   1154b:  mov    0x8(%rbx),%eax
    0.00 :   1154e:  cmp    $0x7,%rax
    0.00 :   11552:  je     11737 <_dl_relocate_object+0x9d7>
         : 659   ./elf/do-rel.h:126
    0.00 :   11558:  add    $0x18,%rbx
    0.00 :   1155c:  cmp    %rbx,-0x98(%rbp)
    0.00 :   11563:  ja     113a8 <_dl_relocate_object+0x648>
         : 663   ./elf/do-rel.h:158
    0.00 :   11569:  mov    -0xc0(%rbp),%rbx
    0.00 :   11570:  mov    -0xa8(%rbp),%r10
    0.00 :   11577:  mov    %r15,%r11
    0.00 :   1157a:  test   %rbx,%rbx
    0.00 :   1157d:  je     110a5 <_dl_relocate_object+0x345>
         : 669   ./elf/do-rel.h:159
    0.00 :   11583:  mov    -0xd8(%rbp),%r12
    0.00 :   1158a:  cmp    %r12,%rbx
    0.00 :   1158d:  ja     110a5 <_dl_relocate_object+0x345>
         : 673   elf_machine_rela():
         : 674   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11593:  mov    %r10,-0x98(%rbp)
         : 676   ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   1159a:  lea    0x1fadf(%rip),%r14        # 31080 <__PRETTY_FUNCTION__.0+0x270>
         : 678   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   115a1:  xor    %r13d,%r13d
    0.00 :   115a4:  jmp    115bd <_dl_relocate_object+0x85d>
    0.00 :   115a6:  cs nopw 0x0(%rax,%rax,1)
         : 682   elf_dynamic_do_Rela():
         : 683   ./elf/do-rel.h:159
    0.00 :   115b0:  add    $0x18,%rbx
    0.00 :   115b4:  cmp    %r12,%rbx
    0.00 :   115b7:  ja     11702 <_dl_relocate_object+0x9a2>
         : 687   ./elf/do-rel.h:160
    0.00 :   115bd:  mov    0x8(%rbx),%rax
    0.00 :   115c1:  cmp    $0x25,%eax
    0.00 :   115c4:  jne    115b0 <_dl_relocate_object+0x850>
         : 691   ./elf/do-rel.h:163
    0.00 :   115c6:  mov    -0xa0(%rbp),%rsi
         : 693   ./elf/do-rel.h:167
    0.00 :   115cd:  mov    -0x98(%rbp),%rdi
         : 695   ./elf/do-rel.h:163
    0.00 :   115d4:  shr    $0x20,%rax
         : 697   ./elf/do-rel.h:167
    0.00 :   115d8:  add    (%rbx),%rdi
    0.00 :   115db:  mov    %rdi,-0x88(%rbp)
         : 700   ./elf/do-rel.h:165
    0.00 :   115e2:  mov    -0x90(%rbp),%rdi
         : 702   ./elf/do-rel.h:163
    0.00 :   115e9:  movzwl (%rsi,%rax,2),%ecx
         : 704   ./elf/do-rel.h:165
    0.00 :   115ed:  lea    (%rax,%rax,2),%rax
         : 706   ./elf/do-rel.h:166
    0.00 :   115f1:  mov    0x2e8(%r15),%rsi
         : 708   ./elf/do-rel.h:165
    0.00 :   115f8:  lea    (%rdi,%rax,8),%r10
    0.00 :   115fc:  mov    %r10,-0x78(%rbp)
         : 711   elf_machine_rela():
         : 712   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11600:  movzbl 0x4(%r10),%eax
    0.00 :   11605:  mov    %eax,%edi
    0.00 :   11607:  shr    $0x4,%dil
    0.00 :   1160b:  je     11b20 <_dl_relocate_object+0xdc0>
         : 717   dl_symbol_visibility_binds_local_p():
         : 718   ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   11611:  movzbl 0x5(%r10),%edx
    0.00 :   11616:  and    $0x3,%edx
    0.00 :   11619:  sub    $0x1,%edx
         : 722   elf_machine_rela():
         : 723   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   1161c:  cmp    $0x1,%edx
    0.00 :   1161f:  jbe    11b20 <_dl_relocate_object+0xdc0>
    0.00 :   11625:  cmp    0x410(%r15),%r10
    0.00 :   1162c:  je     12734 <_dl_relocate_object+0x19d4>
         : 728   elf_dynamic_do_Rela():
         : 729   ./elf/do-rel.h:166
    0.00 :   11632:  and    $0x7fff,%ecx
         : 731   elf_machine_rela():
         : 732   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11638:  mov    %r10,0x410(%r15)
    0.00 :   1163f:  movl   $0x0,0x418(%r15)
         : 735   elf_dynamic_do_Rela():
         : 736   ./elf/do-rel.h:166
    0.00 :   1164a:  lea    (%rcx,%rcx,2),%rax
    0.00 :   1164e:  lea    (%rsi,%rax,8),%r8
         : 739   elf_machine_rela():
         : 740   ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11652:  test   %r8,%r8
    0.00 :   11655:  je     11662 <_dl_relocate_object+0x902>
    0.00 :   11657:  mov    0x8(%r8),%r11d
    0.00 :   1165b:  test   %r11d,%r11d
    0.00 :   1165e:  cmove  %r13,%r8
    0.00 :   11662:  mov    0x68(%r15),%rdx
    0.00 :   11666:  mov    (%r10),%eax
    0.00 :   11669:  mov    0x8(%rdx),%rcx
    0.00 :   1166d:  xor    %edx,%edx
    0.00 :   1166f:  testb  $0x20,0x31e(%r15)
    0.00 :   11677:  je     1167c <_dl_relocate_object+0x91c>
    0.00 :   11679:  mov    (%r15),%rdx
    0.00 :   1167c:  push   $0x0
    0.00 :   1167e:  add    %rcx,%rax
    0.00 :   11681:  lea    -0x78(%rbp),%r11
    0.00 :   11685:  mov    -0xb0(%rbp),%rcx
    0.00 :   1168c:  push   $0x9
    0.00 :   1168e:  lea    (%rax,%rdx,1),%rdi
    0.00 :   11692:  xor    %r9d,%r9d
    0.00 :   11695:  mov    %r11,%rdx
    0.00 :   11698:  mov    %r15,%rsi
    0.00 :   1169b:  mov    %r10,-0xa8(%rbp)
    0.00 :   116a2:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   116a7:  mov    -0x78(%rbp),%rdx
    0.00 :   116ab:  mov    -0xa8(%rbp),%r10
    0.00 :   116b2:  movq   %rax,%xmm0
    0.00 :   116b7:  mov    %rax,%rcx
    0.00 :   116ba:  movq   %rdx,%xmm3
    0.00 :   116bf:  punpcklqdq %xmm3,%xmm0
    0.00 :   116c3:  movups %xmm0,0x420(%r15)
    0.00 :   116cb:  pop    %r8
    0.00 :   116cd:  pop    %r9
         : 773   ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   116cf:  test   %rdx,%rdx
    0.00 :   116d2:  jne    11d60 <_dl_relocate_object+0x1000>
         : 776   ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   116d8:  mov    -0xcc(%rbp),%esi
         : 778   ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   116de:  mov    0x10(%rbx),%rax
    0.00 :   116e2:  add    (%r15),%rax
         : 781   ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   116e5:  test   %esi,%esi
    0.00 :   116e7:  jne    116eb <_dl_relocate_object+0x98b>
         : 784   ./elf/../sysdeps/x86_64/dl-machine.h:509
    0.00 :   116e9:  call   *%rax
         : 786   ./elf/../sysdeps/x86_64/dl-machine.h:510
    0.00 :   116eb:  mov    -0x88(%rbp),%rcx
         : 788   elf_dynamic_do_Rela():
         : 789   ./elf/do-rel.h:159
    0.00 :   116f2:  add    $0x18,%rbx
         : 791   elf_machine_rela():
         : 792   ./elf/../sysdeps/x86_64/dl-machine.h:510
    0.00 :   116f6:  mov    %rax,(%rcx)
         : 794   elf_dynamic_do_Rela():
         : 795   ./elf/do-rel.h:159
    0.00 :   116f9:  cmp    %r12,%rbx
    0.00 :   116fc:  jbe    115bd <_dl_relocate_object+0x85d>
    0.00 :   11702:  mov    %r15,%r11
    0.00 :   11705:  jmp    110a5 <_dl_relocate_object+0x345>
         : 800   elf_machine_rela():
         : 801   ./elf/../sysdeps/x86_64/dl-machine.h:455
    0.00 :   1170a:  mov    -0x78(%rbp),%rax
    0.00 :   1170e:  mov    0x10(%rax),%r9
         : 804   ./elf/../sysdeps/x86_64/dl-machine.h:460
    0.00 :   11712:  mov    -0x88(%rbp),%rax
         : 806   ./elf/../sysdeps/x86_64/dl-machine.h:459
    0.00 :   11719:  add    0x10(%rbx),%r9
         : 808   ./elf/../sysdeps/x86_64/dl-machine.h:460
    0.00 :   1171d:  mov    %r9d,(%rax)
         : 810   ./elf/../sysdeps/x86_64/dl-machine.h:463
    0.00 :   11720:  shr    $0x20,%r9
    0.00 :   11724:  jne    126dc <_dl_relocate_object+0x197c>
         : 813   elf_dynamic_do_Rela():
         : 814   ./elf/do-rel.h:145
    0.00 :   1172a:  mov    0x8(%rbx),%eax
    0.00 :   1172d:  cmp    $0x7,%rax
    0.00 :   11731:  jne    11558 <_dl_relocate_object+0x7f8>
         : 818   ./elf/do-rel.h:146
    0.00 :   11737:  mov    0x2873b(%rip),%edi        # 39e78 <_rtld_global_ro+0x398>
    0.00 :   1173d:  test   %edi,%edi
    0.00 :   1173f:  je     11558 <_dl_relocate_object+0x7f8>
         : 822   ./elf/do-rel.h:149
    0.00 :   11745:  mov    -0x80(%rbp),%rdx
    0.00 :   11749:  movzbl 0x4(%rdx),%eax
    0.00 :   1174d:  shr    $0x4,%al
    0.00 :   11750:  je     11be0 <_dl_relocate_object+0xe80>
         : 827   dl_symbol_visibility_binds_local_p():
         : 828   ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   11756:  movzbl 0x5(%rdx),%eax
    0.00 :   1175a:  and    $0x3,%eax
    0.00 :   1175d:  sub    $0x1,%eax
         : 832   elf_dynamic_do_Rela():
         : 833   ./elf/do-rel.h:149
    0.00 :   11760:  cmp    $0x1,%eax
    0.00 :   11763:  jbe    11be0 <_dl_relocate_object+0xe80>
    0.00 :   11769:  cmp    0x410(%r15),%rdx
    0.00 :   11770:  je     128db <_dl_relocate_object+0x1b7b>
    0.00 :   11776:  movl   $0x1,0x418(%r15)
    0.00 :   11781:  mov    %rdx,0x410(%r15)
    0.00 :   11788:  test   %r10,%r10
    0.00 :   1178b:  je     11799 <_dl_relocate_object+0xa39>
    0.00 :   1178d:  mov    0x8(%r10),%esi
    0.00 :   11791:  xor    %eax,%eax
    0.00 :   11793:  test   %esi,%esi
    0.00 :   11795:  cmove  %rax,%r10
    0.00 :   11799:  mov    0x68(%r15),%rax
    0.00 :   1179d:  mov    (%rdx),%edi
    0.00 :   1179f:  mov    0x8(%rax),%rcx
    0.00 :   117a3:  xor    %eax,%eax
    0.00 :   117a5:  testb  $0x20,0x31e(%r15)
    0.00 :   117ad:  je     117b2 <_dl_relocate_object+0xa52>
    0.00 :   117af:  mov    (%r15),%rax
    0.00 :   117b2:  push   $0x0
    0.00 :   117b4:  add    %rcx,%rdi
    0.00 :   117b7:  mov    -0xb0(%rbp),%rcx
    0.00 :   117be:  lea    -0x80(%rbp),%rdx
    0.00 :   117c2:  push   $0x9
    0.00 :   117c4:  mov    %r10,%r8
    0.00 :   117c7:  add    %rax,%rdi
    0.00 :   117ca:  mov    $0x1,%r9d
    0.00 :   117d0:  mov    %r15,%rsi
    0.00 :   117d3:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   117d8:  mov    -0x80(%rbp),%rdx
    0.00 :   117dc:  movq   %rax,%xmm0
    0.00 :   117e1:  mov    %rax,%r8
    0.00 :   117e4:  movq   %rdx,%xmm4
    0.00 :   117e9:  punpcklqdq %xmm4,%xmm0
    0.00 :   117ed:  movups %xmm0,0x420(%r15)
    0.00 :   117f5:  pop    %rax
    0.00 :   117f6:  pop    %rcx
         : 871   ./elf/do-rel.h:151
    0.00 :   117f7:  test   %rdx,%rdx
    0.00 :   117fa:  je     11558 <_dl_relocate_object+0x7f8>
    0.00 :   11800:  jmp    11be3 <_dl_relocate_object+0xe83>
    0.00 :   11805:  nopl   (%rax)
         : 876   elf_machine_rela():
         : 877   ./elf/../sysdeps/x86_64/dl-machine.h:360
    0.00 :   11808:  test   %r11,%r11
    0.00 :   1180b:  je     1172a <_dl_relocate_object+0x9ca>
         : 880   ./elf/../sysdeps/x86_64/dl-machine.h:361
    0.00 :   11811:  mov    0x460(%r11),%rax
    0.00 :   11818:  mov    -0x88(%rbp),%rsi
    0.00 :   1181f:  mov    %rax,(%rsi)
         : 884   elf_dynamic_do_Rela():
         : 885   ./elf/do-rel.h:145
    0.00 :   11822:  mov    0x8(%rbx),%eax
    0.00 :   11825:  jmp    1154e <_dl_relocate_object+0x7ee>
         : 888   elf_machine_rela():
         : 889   ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   1182a:  mov    -0xcc(%rbp),%r8d
         : 891   ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   11831:  mov    0x10(%rbx),%rax
    0.00 :   11835:  add    (%r15),%rax
         : 894   ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   11838:  test   %r8d,%r8d
    0.00 :   1183b:  jne    1184d <_dl_relocate_object+0xaed>
    0.00 :   1183d:  mov    %r10,-0xb8(%rbp)
         : 898   ./elf/../sysdeps/x86_64/dl-machine.h:509
    0.00 :   11844:  call   *%rax
    0.00 :   11846:  mov    -0xb8(%rbp),%r10
         : 901   ./elf/../sysdeps/x86_64/dl-machine.h:510
    0.00 :   1184d:  mov    -0x88(%rbp),%rcx
    0.00 :   11854:  mov    %rax,(%rcx)
    0.00 :   11857:  jmp    1172a <_dl_relocate_object+0x9ca>
         : 905   ./elf/../sysdeps/x86_64/dl-machine.h:490
    0.00 :   1185c:  mov    -0x78(%rbp),%r12
    0.00 :   11860:  test   %r12,%r12
    0.00 :   11863:  je     1172a <_dl_relocate_object+0x9ca>
         : 909   ./elf/../sysdeps/x86_64/dl-machine.h:495
    0.00 :   11869:  mov    0x10(%r13),%rdx
    0.00 :   1186d:  mov    0x10(%r12),%rax
         : 912   ./elf/../sysdeps/x86_64/dl-machine.h:494
    0.00 :   11872:  mov    %r9,%rsi
    0.00 :   11875:  mov    %r10,-0xb8(%rbp)
    0.00 :   1187c:  mov    -0x88(%rbp),%rdi
         : 916   ./elf/../sysdeps/x86_64/dl-machine.h:495
    0.00 :   11883:  cmp    %rax,%rdx
    0.00 :   11886:  cmova  %rax,%rdx
         : 919   ./elf/../sysdeps/x86_64/dl-machine.h:494
    0.00 :   1188a:  call   2afb0 <memcpy>
         : 921   ./elf/../sysdeps/x86_64/dl-machine.h:496
    0.00 :   1188f:  mov    0x10(%r13),%rax
    0.00 :   11893:  cmp    %rax,0x10(%r12)
    0.00 :   11898:  mov    -0xb8(%rbp),%r10
    0.00 :   1189f:  ja     118b7 <_dl_relocate_object+0xb57>
         : 926   ./elf/../sysdeps/x86_64/dl-machine.h:497
    0.00 :   118a1:  jae    1172a <_dl_relocate_object+0x9ca>
         : 928   ./elf/../sysdeps/x86_64/dl-machine.h:498
    0.00 :   118a7:  mov    0x28276(%rip),%r9d        # 39b24 <_rtld_global_ro+0x44>
    0.00 :   118ae:  test   %r9d,%r9d
    0.00 :   118b1:  je     1172a <_dl_relocate_object+0x9ca>
         : 932   ./elf/../sysdeps/x86_64/dl-machine.h:500
    0.00 :   118b7:  lea    0x1f6f2(%rip),%rdi        # 30fb0 <__PRETTY_FUNCTION__.0+0x1a0>
    0.00 :   118be:  jmp    126e3 <_dl_relocate_object+0x1983>
    0.00 :   118c3:  nopl   0x0(%rax,%rax,1)
         : 936   ./elf/../sysdeps/x86_64/dl-machine.h:422
    0.00 :   118c8:  mov    -0x78(%rbp),%rax
    0.00 :   118cc:  test   %rax,%rax
    0.00 :   118cf:  je     1172a <_dl_relocate_object+0x9ca>
         : 940   ./elf/../sysdeps/x86_64/dl-machine.h:426
    0.00 :   118d5:  mov    0x458(%r11),%rdx
    0.00 :   118dc:  lea    0x1(%rdx),%rcx
    0.00 :   118e0:  cmp    $0x1,%rcx
    0.00 :   118e4:  jbe    12b21 <_dl_relocate_object+0x1dc1>
         : 945   ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   118ea:  mov    0x8(%rax),%rax
         : 947   ./elf/../sysdeps/x86_64/dl-machine.h:440
    0.00 :   118ee:  mov    -0x88(%rbp),%rdi
         : 949   ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   118f5:  sub    %rdx,%rax
    0.00 :   118f8:  add    0x10(%rbx),%rax
         : 952   ./elf/../sysdeps/x86_64/dl-machine.h:440
    0.00 :   118fc:  mov    %rax,(%rdi)
         : 954   elf_dynamic_do_Rela():
         : 955   ./elf/do-rel.h:145
    0.00 :   118ff:  mov    0x8(%rbx),%eax
    0.00 :   11902:  jmp    1154e <_dl_relocate_object+0x7ee>
         : 958   elf_machine_rela():
         : 959   ./elf/../sysdeps/x86_64/dl-machine.h:368
    0.00 :   11907:  mov    -0x78(%rbp),%rdx
    0.00 :   1190b:  test   %rdx,%rdx
    0.00 :   1190e:  je     1172a <_dl_relocate_object+0x9ca>
         : 963   ./elf/../sysdeps/x86_64/dl-machine.h:379
    0.00 :   11914:  mov    -0x88(%rbp),%rsi
         : 965   ./elf/../sysdeps/x86_64/dl-machine.h:370
    0.00 :   1191b:  mov    0x10(%rbx),%rax
    0.00 :   1191f:  add    0x8(%rdx),%rax
         : 968   ./elf/../sysdeps/x86_64/dl-machine.h:379
    0.00 :   11923:  mov    %rax,(%rsi)
         : 970   elf_dynamic_do_Rela():
         : 971   ./elf/do-rel.h:145
    0.00 :   11926:  mov    0x8(%rbx),%eax
    0.00 :   11929:  jmp    1154e <_dl_relocate_object+0x7ee>
         : 974   elf_machine_rela():
         : 975   ./elf/../sysdeps/x86_64/dl-machine.h:480
    0.00 :   1192e:  mov    0x10(%rbx),%rax
    0.00 :   11932:  mov    -0x88(%rbp),%rsi
    0.00 :   11939:  sub    %rsi,%rax
    0.00 :   1193c:  add    %r9,%rax
         : 980   ./elf/../sysdeps/x86_64/dl-machine.h:482
    0.00 :   1193f:  movslq %eax,%rdx
         : 982   ./elf/../sysdeps/x86_64/dl-machine.h:481
    0.00 :   11942:  mov    %eax,(%rsi)
         : 984   ./elf/../sysdeps/x86_64/dl-machine.h:482
    0.00 :   11944:  cmp    %rdx,%rax
    0.00 :   11947:  je     1172a <_dl_relocate_object+0x9ca>
         : 987   ./elf/../sysdeps/x86_64/dl-machine.h:484
    0.00 :   1194d:  lea    0x1f61c(%rip),%rdi        # 30f70 <__PRETTY_FUNCTION__.0+0x160>
    0.00 :   11954:  jmp    126e3 <_dl_relocate_object+0x1983>
         : 990   ./elf/../sysdeps/x86_64/dl-machine.h:390
    0.00 :   11959:  mov    -0x78(%rbp),%rdx
    0.00 :   1195d:  test   %rdx,%rdx
    0.00 :   11960:  je     12655 <_dl_relocate_object+0x18f5>
         : 994   ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   11966:  mov    0x458(%r11),%rcx
    0.00 :   1196d:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   11971:  je     129b7 <_dl_relocate_object+0x1c57>
    0.00 :   11977:  test   %rcx,%rcx
    0.00 :   1197a:  je     12b8f <_dl_relocate_object+0x1e2f>
         : 1000  ./elf/../sysdeps/x86_64/dl-machine.h:413
    0.00 :   11980:  mov    0x10(%rbx),%rax
    0.00 :   11984:  add    0x8(%rdx),%rax
    0.00 :   11988:  sub    %rcx,%rax
         : 1004  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   1198b:  mov    -0x88(%rbp),%rcx
    0.00 :   11992:  mov    %rax,0x8(%rcx)
         : 1007  ./elf/../sysdeps/x86_64/dl-machine.h:414
    0.00 :   11996:  lea    0x6763(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   1199d:  mov    %rax,(%rcx)
         : 1010  elf_dynamic_do_Rela():
         : 1011  ./elf/do-rel.h:145
    0.00 :   119a0:  mov    0x8(%rbx),%eax
    0.00 :   119a3:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   119a8:  nopl   0x0(%rax,%rax,1)
         : 1015  elf_machine_rela():
         : 1016  ./elf/do-rel.h:145
    0.00 :   119b0:  mov    %r13,%rdx
    0.00 :   119b3:  mov    %r15,%r11
         : 1019  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   119b6:  movzwl 0x6(%rdx),%ecx
    0.00 :   119ba:  cmp    $0xfff1,%cx
    0.00 :   119be:  je     11b12 <_dl_relocate_object+0xdb2>
    0.00 :   119c4:  mov    (%r11),%r9
         : 1024  ./elf/../sysdeps/x86_64/dl-machine.h:299
    2.08 :   119c7:  and    $0xf,%eax
         : 1026  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   119ca:  add    0x8(%rdx),%r9
         : 1028  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   119ce:  cmp    $0xa,%al
    0.00 :   119d0:  jne    1151a <_dl_relocate_object+0x7ba>
         : 1031  ./elf/../sysdeps/x86_64/dl-machine.h:301
    0.00 :   119d6:  mov    -0xcc(%rbp),%eax
    0.00 :   119dc:  test   %eax,%eax
    0.00 :   119de:  jne    1151a <_dl_relocate_object+0x7ba>
    0.00 :   119e4:  test   %cx,%cx
    0.00 :   119e7:  je     1151a <_dl_relocate_object+0x7ba>
         : 1037  ./elf/../sysdeps/x86_64/dl-machine.h:304
    0.00 :   119ed:  cmp    %r11,%r15
    0.00 :   119f0:  je     11a7f <_dl_relocate_object+0xd1f>
         : 1040  ./elf/../sysdeps/x86_64/dl-machine.h:305
    0.00 :   119f6:  movzbl 0x31c(%r11),%eax
    0.00 :   119fe:  test   $0x4,%al
    0.00 :   11a00:  jne    11a7f <_dl_relocate_object+0xd1f>
         : 1044  ./elf/../sysdeps/x86_64/dl-machine.h:308
    0.00 :   11a02:  mov    0x68(%r15),%rdx
    0.00 :   11a06:  mov    0x8(%rdx),%rdx
    0.00 :   11a0a:  testb  $0x20,0x31e(%r15)
    0.00 :   11a12:  je     11a17 <_dl_relocate_object+0xcb7>
    0.00 :   11a14:  add    (%r15),%rdx
         : 1050  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11a17:  mov    0x0(%r13),%ecx
         : 1052  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   11a1b:  lea    (%rdx,%rcx,1),%r8
         : 1054  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11a1f:  mov    0x2809a(%rip),%rcx        # 39ac0 <_dl_argv>
         : 1056  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   11a26:  mov    0x8(%r15),%rdx
         : 1058  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11a2a:  mov    (%rcx),%rsi
         : 1060  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   11a2d:  test   $0x3,%al
    0.00 :   11a2f:  je     12e35 <_dl_relocate_object+0x20d5>
         : 1063  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   11a35:  test   %rsi,%rsi
    0.00 :   11a38:  lea    0x1c561(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   11a3f:  mov    0x8(%r11),%rcx
    0.00 :   11a43:  lea    0x1f636(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   11a4a:  cmove  %rax,%rsi
    0.00 :   11a4e:  xor    %eax,%eax
    0.00 :   11a50:  mov    %r9,-0x100(%rbp)
    0.00 :   11a57:  mov    %r10,-0xf8(%rbp)
    0.00 :   11a5e:  mov    %r11,-0xb8(%rbp)
    0.00 :   11a65:  call   fe70 <_dl_error_printf>
    0.00 :   11a6a:  mov    -0x100(%rbp),%r9
    0.00 :   11a71:  mov    -0xf8(%rbp),%r10
    0.00 :   11a78:  mov    -0xb8(%rbp),%r11
    0.00 :   11a7f:  mov    %r11,-0xf8(%rbp)
    0.00 :   11a86:  mov    %r10,-0xb8(%rbp)
         : 1079  ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   11a8d:  call   *%r9
    0.00 :   11a90:  mov    -0xf8(%rbp),%r11
    0.00 :   11a97:  mov    -0xb8(%rbp),%r10
    0.00 :   11a9e:  mov    %rax,%r9
         : 1084  ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   11aa1:  cmp    $0x25,%r12
    0.00 :   11aa5:  jbe    11524 <_dl_relocate_object+0x7c4>
    0.00 :   11aab:  nopl   0x0(%rax,%rax,1)
         : 1088  ./elf/../sysdeps/x86_64/dl-machine.h:513
    0.00 :   11ab0:  xor    %edx,%edx
    0.00 :   11ab2:  mov    %r14d,%esi
    0.00 :   11ab5:  mov    %r15,%rdi
    0.00 :   11ab8:  call   10c90 <_dl_reloc_bad_type>
    0.00 :   11abd:  nopl   (%rax)
         : 1094  elf_dynamic_do_Rela():
         : 1095  ./elf/do-rel.h:135
    0.00 :   11ac0:  mov    -0xc0(%rbp),%rax
    0.00 :   11ac7:  mov    %rbx,-0xd8(%rbp)
    0.00 :   11ace:  test   %rax,%rax
    0.00 :   11ad1:  cmove  %rbx,%rax
    0.00 :   11ad5:  mov    %rax,-0xc0(%rbp)
         : 1101  ./elf/do-rel.h:138
    0.00 :   11adc:  jmp    11558 <_dl_relocate_object+0x7f8>
    0.00 :   11ae1:  nopl   0x0(%rax)
         : 1104  elf_machine_rela():
         : 1105  ./elf/../sysdeps/x86_64/dl-machine.h:284
    0.00 :   11ae8:  mov    0x10(%rbx),%rax
    0.00 :   11aec:  add    (%r15),%rax
    0.00 :   11aef:  mov    %rax,(%rdi)
         : 1109  elf_dynamic_do_Rela():
         : 1110  ./elf/do-rel.h:145
    0.00 :   11af2:  mov    0x8(%rbx),%eax
         : 1112  elf_machine_rela():
         : 1113  ./elf/do-rel.h:145
    0.00 :   11af5:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   11afa:  nopw   0x0(%rax,%rax,1)
         : 1116  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11b00:  movzwl 0x6(%rdx),%ecx
         : 1118  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11b04:  movzbl 0x4(%rdx),%eax
         : 1120  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11b08:  cmp    $0xfff1,%cx
    0.00 :   11b0c:  jne    119c4 <_dl_relocate_object+0xc64>
    0.00 :   11b12:  xor    %r9d,%r9d
    0.00 :   11b15:  jmp    119c7 <_dl_relocate_object+0xc67>
    0.00 :   11b1a:  nopw   0x0(%rax,%rax,1)
    0.00 :   11b20:  mov    %r15,%rcx
    0.00 :   11b23:  mov    %r10,%rdx
    0.00 :   11b26:  movzwl 0x6(%rdx),%esi
    0.00 :   11b2a:  mov    0x8(%rdx),%r9
    0.00 :   11b2e:  and    $0xf,%eax
    0.00 :   11b31:  cmp    $0xfff1,%si
    0.00 :   11b35:  je     126b9 <_dl_relocate_object+0x1959>
    0.00 :   11b3b:  mov    (%rcx),%rdx
         : 1134  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11b3e:  cmp    $0xa,%al
    0.00 :   11b40:  jne    116d8 <_dl_relocate_object+0x978>
         : 1137  ./elf/../sysdeps/x86_64/dl-machine.h:300
    0.00 :   11b46:  test   %si,%si
    0.00 :   11b49:  je     116d8 <_dl_relocate_object+0x978>
         : 1140  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11b4f:  add    %rdx,%r9
         : 1142  ./elf/../sysdeps/x86_64/dl-machine.h:301
    0.00 :   11b52:  mov    -0xcc(%rbp),%edi
    0.00 :   11b58:  test   %edi,%edi
    0.00 :   11b5a:  jne    12d3b <_dl_relocate_object+0x1fdb>
         : 1146  ./elf/../sysdeps/x86_64/dl-machine.h:304
    0.00 :   11b60:  cmp    %rcx,%r15
    0.00 :   11b63:  je     11bcc <_dl_relocate_object+0xe6c>
         : 1149  ./elf/../sysdeps/x86_64/dl-machine.h:305
    0.00 :   11b65:  movzbl 0x31c(%rcx),%eax
    0.00 :   11b6c:  test   $0x4,%al
    0.00 :   11b6e:  jne    11bcc <_dl_relocate_object+0xe6c>
         : 1153  ./elf/../sysdeps/x86_64/dl-machine.h:308
    0.00 :   11b70:  mov    0x68(%r15),%rdx
    0.00 :   11b74:  mov    0x8(%rdx),%rdx
    0.00 :   11b78:  testb  $0x20,0x31e(%r15)
    0.00 :   11b80:  je     11b85 <_dl_relocate_object+0xe25>
    0.00 :   11b82:  add    (%r15),%rdx
         : 1159  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11b85:  mov    (%r10),%esi
         : 1161  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   11b88:  lea    (%rdx,%rsi,1),%r8
         : 1163  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11b8c:  mov    0x27f2d(%rip),%rsi        # 39ac0 <_dl_argv>
         : 1165  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   11b93:  mov    0x8(%r15),%rdx
         : 1167  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   11b97:  mov    (%rsi),%rsi
         : 1169  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   11b9a:  test   $0x3,%al
    0.00 :   11b9c:  je     12e35 <_dl_relocate_object+0x20d5>
         : 1172  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   11ba2:  test   %rsi,%rsi
    0.00 :   11ba5:  lea    0x1c3f4(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   11bac:  mov    0x8(%rcx),%rcx
    0.00 :   11bb0:  mov    %r14,%rdi
    0.00 :   11bb3:  cmove  %rax,%rsi
    0.00 :   11bb7:  xor    %eax,%eax
    0.00 :   11bb9:  mov    %r9,-0xa8(%rbp)
    0.00 :   11bc0:  call   fe70 <_dl_error_printf>
    0.00 :   11bc5:  mov    -0xa8(%rbp),%r9
         : 1182  ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   11bcc:  call   *%r9
         : 1184  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   11bcf:  mov    0x10(%rbx),%rax
    0.00 :   11bd3:  add    (%r15),%rax
         : 1187  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   11bd6:  jmp    116e9 <_dl_relocate_object+0x989>
    0.00 :   11bdb:  nopl   0x0(%rax,%rax,1)
         : 1190  elf_dynamic_do_Rela():
         : 1191  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   11be0:  mov    %r15,%r8
         : 1193  ./elf/do-rel.h:152
    0.00 :   11be3:  mov    -0x88(%rbp),%rcx
    0.00 :   11bea:  xor    %esi,%esi
    0.00 :   11bec:  mov    %r15,%rdi
    0.00 :   11bef:  call   1b900 <_dl_audit_symbind>
    0.00 :   11bf4:  jmp    11558 <_dl_relocate_object+0x7f8>
    0.00 :   11bf9:  nopl   0x0(%rax)
         : 1200  ./elf/do-rel.h:50
    0.00 :   11c00:  mov    (%r11),%r10
    0.00 :   11c03:  jmp    10fba <_dl_relocate_object+0x25a>
         : 1203  elf_machine_lazy_rel():
         : 1204  ./elf/../sysdeps/x86_64/dl-machine.h:582
    0.00 :   11c08:  mov    (%rbx),%rdx
         : 1206  ./elf/../sysdeps/x86_64/dl-machine.h:579
    0.00 :   11c0b:  mov    (%r11),%rax
         : 1208  elf_dynamic_do_Rela():
         : 1209  ./elf/do-rel.h:77
    0.00 :   11c0e:  add    $0x18,%rbx
         : 1211  elf_machine_lazy_rel():
         : 1212  ./elf/../sysdeps/x86_64/dl-machine.h:579
    0.00 :   11c12:  add    -0x8(%rbx),%rax
         : 1214  ./elf/../sysdeps/x86_64/dl-machine.h:582
    0.00 :   11c16:  mov    %rax,(%rdx,%r10,1)
         : 1216  elf_dynamic_do_Rela():
         : 1217  ./elf/do-rel.h:77
    0.00 :   11c1a:  cmp    %rbx,%r15
    0.00 :   11c1d:  jb     110a5 <_dl_relocate_object+0x345>
         : 1220  ./elf/do-rel.h:78
    0.00 :   11c23:  cmpl   $0x25,0x8(%rbx)
    0.00 :   11c27:  je     11c08 <_dl_relocate_object+0xea8>
         : 1223  ./elf/do-rel.h:77
    0.00 :   11c29:  add    $0x18,%rbx
    0.00 :   11c2d:  cmp    %rbx,%r15
    0.00 :   11c30:  jae    11c23 <_dl_relocate_object+0xec3>
    0.00 :   11c32:  jmp    110a5 <_dl_relocate_object+0x345>
    0.00 :   11c37:  nopw   0x0(%rax,%rax,1)
         : 1229  elf_machine_rela():
         : 1230  ./elf/do-rel.h:77
    0.00 :   11c40:  mov    %r15,%r9
    0.00 :   11c43:  mov    %rsi,%rdx
         : 1233  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11c46:  movzwl 0x6(%rdx),%ecx
    0.00 :   11c4a:  cmp    $0xfff1,%cx
    0.00 :   11c4e:  je     12af8 <_dl_relocate_object+0x1d98>
    0.00 :   11c54:  mov    (%r9),%rdi
    0.00 :   11c57:  mov    %rdi,-0x98(%rbp)
    0.00 :   11c5e:  mov    0x8(%rdx),%rdi
         : 1240  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11c62:  and    $0xf,%eax
         : 1242  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11c65:  mov    %rdi,-0x90(%rbp)
         : 1244  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11c6c:  cmp    $0xa,%al
    0.00 :   11c6e:  je     129f2 <_dl_relocate_object+0x1c92>
         : 1247  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   11c74:  mov    0x458(%r9),%rcx
    0.00 :   11c7b:  cmp    $0xffffffffffffffff,%rcx
    0.00 :   11c7f:  je     12976 <_dl_relocate_object+0x1c16>
    0.00 :   11c85:  test   %rcx,%rcx
    0.00 :   11c88:  je     12daf <_dl_relocate_object+0x204f>
         : 1253  ./elf/../sysdeps/x86_64/dl-machine.h:413
    0.00 :   11c8e:  mov    0x10(%r12),%rax
    0.00 :   11c93:  add    0x8(%rdx),%rax
    0.00 :   11c97:  sub    %rcx,%rax
         : 1257  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   11c9a:  mov    %rax,0x8(%r13)
         : 1259  ./elf/../sysdeps/x86_64/dl-machine.h:414
    0.00 :   11c9e:  lea    0x645b(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   11ca5:  mov    %rax,0x0(%r13)
         : 1262  ./elf/../sysdeps/x86_64/dl-machine.h:514
    0.00 :   11ca9:  jmp    1102d <_dl_relocate_object+0x2cd>
    0.00 :   11cae:  xchg   %ax,%ax
         : 1265  _dl_relocate_object():
         : 1266  ./elf/dl-reloc.c:292
    0.00 :   11cb0:  mov    0x50(%r14),%rax
    0.00 :   11cb4:  test   %rax,%rax
    0.00 :   11cb7:  je     110df <_dl_relocate_object+0x37f>
         : 1270  ./elf/dl-reloc.c:298
    0.00 :   11cbd:  mov    0xe0(%r14),%rdx
         : 1272  ./elf/dl-reloc.c:300
    0.00 :   11cc4:  xor    %ecx,%ecx
         : 1274  ./elf/dl-reloc.c:301
    0.00 :   11cc6:  mov    0x8(%rax),%rax
         : 1276  calloc():
         : 1277  ./elf/../include/rtld-malloc.h:44
    0.00 :   11cca:  mov    $0x20,%edi
         : 1279  _dl_relocate_object():
         : 1280  ./elf/dl-reloc.c:300
    0.00 :   11ccf:  cmpq   $0x7,0x8(%rdx)
    0.00 :   11cd4:  sete   %cl
         : 1283  ./elf/dl-reloc.c:301
    0.00 :   11cd7:  xor    %edx,%edx
         : 1285  ./elf/dl-reloc.c:300
    0.00 :   11cd9:  lea    0x10(,%rcx,8),%rcx
         : 1287  ./elf/dl-reloc.c:301
    0.00 :   11ce1:  div    %rcx
    0.00 :   11ce4:  mov    %rax,%rsi
         : 1290  calloc():
         : 1291  ./elf/../include/rtld-malloc.h:44
    0.00 :   11ce7:  call   *0x27d83(%rip)        # 39a70 <__rtld_calloc>
         : 1293  _dl_relocate_object():
         : 1294  ./elf/dl-reloc.c:302
    0.00 :   11ced:  mov    %rax,0x340(%r14)
         : 1296  ./elf/dl-reloc.c:304
    0.00 :   11cf4:  test   %rax,%rax
    0.00 :   11cf7:  jne    110df <_dl_relocate_object+0x37f>
         : 1299  ./elf/dl-reloc.c:308
    0.00 :   11cfd:  mov    0x27dbc(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   11d04:  mov    0x8(%r14),%rdx
    0.00 :   11d08:  mov    (%rax),%rsi
    0.00 :   11d0b:  test   %rsi,%rsi
    0.00 :   11d0e:  je     12e57 <_dl_relocate_object+0x20f7>
         : 1305  ./elf/dl-reloc.c:308 (discriminator 4)
    0.00 :   11d14:  lea    0x1f3f5(%rip),%rdi        # 31110 <__PRETTY_FUNCTION__.0+0x300>
    0.00 :   11d1b:  xor    %eax,%eax
    0.00 :   11d1d:  call   ff20 <_dl_fatal_printf>
    0.00 :   11d22:  nopw   0x0(%rax,%rax,1)
    0.00 :   11d28:  cmp    $0x1d,%rax
    0.00 :   11d2c:  jbe    11e10 <_dl_relocate_object+0x10b0>
         : 1312  elf_machine_rela():
         : 1313  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11d32:  cmp    %r9d,0x418(%r15)
    0.00 :   11d39:  jne    11489 <_dl_relocate_object+0x729>
    0.00 :   11d3f:  mov    0x428(%r15),%rdx
    0.00 :   11d46:  addq   $0x1,0x28d92(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   11d4e:  mov    0x420(%r15),%r11
    0.00 :   11d55:  mov    %rdx,-0x78(%rbp)
    0.00 :   11d59:  jmp    1150e <_dl_relocate_object+0x7ae>
    0.00 :   11d5e:  xchg   %ax,%ax
         : 1322  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11d60:  movzbl 0x4(%rdx),%eax
    0.00 :   11d64:  jmp    11b26 <_dl_relocate_object+0xdc6>
    0.00 :   11d69:  nopl   0x0(%rax)
         : 1326  _dl_relocate_object():
         : 1327  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   11d70:  xor    %edi,%edi
    0.00 :   11d72:  xor    %esi,%esi
    0.00 :   11d74:  xor    %edx,%edx
    0.00 :   11d76:  jmp    10f2d <_dl_relocate_object+0x1cd>
    0.00 :   11d7b:  nopl   0x0(%rax,%rax,1)
         : 1333  elf_dynamic_do_Rela():
         : 1334  ./elf/do-rel.h:110
    0.00 :   11d80:  cmpq   $0x0,0x240(%r11)
    0.00 :   11d88:  jne    11348 <_dl_relocate_object+0x5e8>
    0.00 :   11d8e:  jmp    1130c <_dl_relocate_object+0x5ac>
    0.00 :   11d93:  nopl   0x0(%rax,%rax,1)
         : 1339  ./elf/do-rel.h:124
    0.00 :   11d98:  mov    (%r11),%rsi
    0.00 :   11d9b:  add    %rsi,%rax
    0.00 :   11d9e:  mov    %rax,-0xa0(%rbp)
    0.00 :   11da5:  jmp    11378 <_dl_relocate_object+0x618>
    0.00 :   11daa:  nopw   0x0(%rax,%rax,1)
         : 1345  _dl_protect_relro():
         : 1346  ./elf/dl-reloc.c:343
    0.00 :   11db0:  mov    0x27d41(%rip),%rdx        # 39af8 <_rtld_global_ro+0x18>
    0.00 :   11db7:  mov    0x470(%r14),%rcx
    0.00 :   11dbe:  add    (%r14),%rcx
    0.00 :   11dc1:  neg    %rdx
    0.00 :   11dc4:  mov    %rcx,%rdi
         : 1352  ./elf/dl-reloc.c:346
    0.00 :   11dc7:  add    %rcx,%rax
         : 1354  ./elf/dl-reloc.c:343
    0.00 :   11dca:  and    %rdx,%rdi
         : 1356  ./elf/dl-reloc.c:346
    0.00 :   11dcd:  and    %rdx,%rax
         : 1358  ./elf/dl-reloc.c:350
    0.00 :   11dd0:  cmp    %rax,%rdi
    0.00 :   11dd3:  je     11105 <_dl_relocate_object+0x3a5>
         : 1361  ./elf/dl-reloc.c:351
    0.00 :   11dd9:  sub    %rdi,%rax
    0.00 :   11ddc:  mov    $0x1,%edx
    0.00 :   11de1:  mov    %rax,%rsi
    0.00 :   11de4:  call   26d20 <__GI___mprotect>
    0.00 :   11de9:  test   %eax,%eax
    0.00 :   11deb:  jns    11105 <_dl_relocate_object+0x3a5>
         : 1368  ./elf/dl-reloc.c:355
    0.00 :   11df1:  mov    0x8(%r14),%rsi
    0.00 :   11df5:  mov    0x294a5(%rip),%edi        # 3b2a0 <rtld_errno>
    0.00 :   11dfb:  lea    0x2113e(%rip),%rcx        # 32f40 <errstring.1>
    0.00 :   11e02:  xor    %edx,%edx
    0.00 :   11e04:  call   2070 <_dl_signal_error@plt>
    0.00 :   11e09:  nopl   0x0(%rax)
         : 1375  elf_machine_rela():
         : 1376  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11e10:  lea    0x1a449(%rip),%rdx        # 2c260 <CSWTCH.111>
    0.00 :   11e17:  mov    (%rdx,%rax,4),%esi
    0.00 :   11e1a:  or     %r9d,%esi
    0.00 :   11e1d:  cmp    %esi,0x418(%r15)
    0.00 :   11e24:  jne    1147e <_dl_relocate_object+0x71e>
    0.00 :   11e2a:  jmp    11d3f <_dl_relocate_object+0xfdf>
         : 1383  elf_machine_runtime_setup():
         : 1384  ./elf/../sysdeps/x86_64/dl-machine.h:83
    0.00 :   11e2f:  add    (%r14),%rdx
         : 1386  ./elf/../sysdeps/x86_64/dl-machine.h:84
    0.00 :   11e32:  lea    0x18(%rax),%rcx
         : 1388  ./elf/../sysdeps/x86_64/dl-machine.h:83
    0.00 :   11e36:  movq   %rdx,%xmm0
    0.00 :   11e3b:  movq   %rcx,%xmm6
    0.00 :   11e40:  punpcklqdq %xmm6,%xmm0
    0.00 :   11e44:  movups %xmm0,0x3f8(%r14)
    0.00 :   11e4c:  jmp    10e7c <_dl_relocate_object+0x11c>
         : 1394  ./elf/../sysdeps/x86_64/dl-machine.h:122
    0.00 :   11e51:  lea    0x3d88(%rip),%rsi        # 15be0 <_dl_runtime_resolve_fxsave>
    0.00 :   11e58:  mov    $0x1,%r13d
    0.00 :   11e5e:  mov    %rsi,0x10(%rax)
    0.00 :   11e62:  jmp    10ec0 <_dl_relocate_object+0x160>
         : 1399  _dl_relocate_object():
         : 1400  ./elf/dl-reloc.c:288 (discriminator 21)
    0.00 :   11e67:  add    %rsi,%rax
    0.00 :   11e6a:  mov    %rax,-0x68(%rbp)
    0.00 :   11e6e:  jmp    10f92 <_dl_relocate_object+0x232>
    0.00 :   11e73:  nopl   0x0(%rax,%rax,1)
         : 1405  elf_dynamic_do_Rela():
         : 1406  ./elf/do-rel.h:53
    0.00 :   11e78:  movq   $0x0,-0xb8(%rbp)
         : 1408  ./elf/do-rel.h:175
    0.00 :   11e83:  cmp    %rbx,-0x98(%rbp)
    0.00 :   11e8a:  jbe    110a5 <_dl_relocate_object+0x345>
    0.00 :   11e90:  mov    %r10,-0x88(%rbp)
    0.00 :   11e97:  mov    %r11,%r15
    0.00 :   11e9a:  nopw   0x0(%rax,%rax,1)
         : 1414  ./elf/do-rel.h:177
    0.00 :   11ea0:  mov    0x8(%rbx),%r14
    0.00 :   11ea4:  mov    -0x90(%rbp),%rcx
         : 1417  ./elf/do-rel.h:178
    0.00 :   11eab:  mov    -0x88(%rbp),%r10
    0.00 :   11eb2:  add    (%rbx),%r10
         : 1420  ./elf/do-rel.h:177
    0.00 :   11eb5:  mov    %r14,%rax
         : 1422  ./elf/do-rel.h:180
    0.00 :   11eb8:  mov    %r14d,%r12d
         : 1424  ./elf/do-rel.h:177
    0.00 :   11ebb:  shr    $0x20,%rax
    0.00 :   11ebf:  lea    (%rax,%rax,2),%rax
    0.00 :   11ec3:  lea    (%rcx,%rax,8),%r13
    0.00 :   11ec7:  mov    %r13,-0x80(%rbp)
         : 1429  ./elf/do-rel.h:180
    0.00 :   11ecb:  cmp    $0x25,%r14d
    0.00 :   11ecf:  je     12520 <_dl_relocate_object+0x17c0>
         : 1432  ./elf/do-rel.h:188
    0.00 :   11ed5:  mov    %r13,-0x78(%rbp)
         : 1434  elf_machine_rela():
         : 1435  ./elf/../sysdeps/x86_64/dl-machine.h:262
    0.00 :   11ed9:  cmp    $0x8,%r12
    0.00 :   11edd:  je     12548 <_dl_relocate_object+0x17e8>
         : 1438  ./elf/../sysdeps/x86_64/dl-machine.h:283
    0.00 :   11ee3:  cmp    $0x26,%r12
    0.00 :   11ee7:  je     12548 <_dl_relocate_object+0x17e8>
         : 1441  ./elf/../sysdeps/x86_64/dl-machine.h:287
    0.00 :   11eed:  test   %r12,%r12
    0.00 :   11ef0:  je     12014 <_dl_relocate_object+0x12b4>
         : 1444  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11ef6:  movzbl 0x4(%r13),%eax
    0.00 :   11efb:  mov    %eax,%edi
    0.00 :   11efd:  shr    $0x4,%dil
    0.00 :   11f01:  je     12410 <_dl_relocate_object+0x16b0>
         : 1449  dl_symbol_visibility_binds_local_p():
         : 1450  ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   11f07:  movzbl 0x5(%r13),%edx
    0.00 :   11f0c:  and    $0x3,%edx
    0.00 :   11f0f:  sub    $0x1,%edx
         : 1454  elf_machine_rela():
         : 1455  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   11f12:  cmp    $0x1,%edx
    0.00 :   11f15:  jbe    12410 <_dl_relocate_object+0x16b0>
    0.00 :   11f1b:  xor    %r9d,%r9d
    0.00 :   11f1e:  cmp    $0x6,%r12
    0.00 :   11f22:  lea    -0x7(%r12),%rdx
    0.00 :   11f27:  sete   %r9b
    0.00 :   11f2b:  xor    %eax,%eax
    0.00 :   11f2d:  shl    $0x2,%r9d
    0.00 :   11f31:  cmp    $0x5,%r12
    0.00 :   11f35:  sete   %al
    0.00 :   11f38:  add    %eax,%eax
    0.00 :   11f3a:  or     %eax,%r9d
    0.00 :   11f3d:  cmp    0x410(%r15),%r13
    0.00 :   11f44:  je     12676 <_dl_relocate_object+0x1916>
    0.00 :   11f4a:  cmp    $0x1d,%rdx
    0.00 :   11f4e:  ja     11f5b <_dl_relocate_object+0x11fb>
    0.00 :   11f50:  lea    0x1a309(%rip),%rax        # 2c260 <CSWTCH.111>
    0.00 :   11f57:  or     (%rax,%rdx,4),%r9d
    0.00 :   11f5b:  mov    0x68(%r15),%rax
    0.00 :   11f5f:  mov    0x0(%r13),%edi
    0.00 :   11f63:  mov    %r9d,0x418(%r15)
    0.00 :   11f6a:  mov    %r13,0x410(%r15)
    0.00 :   11f71:  mov    0x8(%rax),%rcx
    0.00 :   11f75:  xor    %eax,%eax
    0.00 :   11f77:  testb  $0x20,0x31e(%r15)
    0.00 :   11f7f:  je     11f84 <_dl_relocate_object+0x1224>
    0.00 :   11f81:  mov    (%r15),%rax
    0.00 :   11f84:  push   $0x0
    0.00 :   11f86:  add    %rcx,%rdi
    0.00 :   11f89:  mov    -0xb0(%rbp),%rcx
    0.00 :   11f90:  lea    -0x78(%rbp),%rdx
    0.00 :   11f94:  push   $0x9
    0.00 :   11f96:  add    %rax,%rdi
    0.00 :   11f99:  xor    %r8d,%r8d
    0.00 :   11f9c:  mov    %r15,%rsi
    0.00 :   11f9f:  mov    %r10,-0xa8(%rbp)
    0.00 :   11fa6:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   11fab:  mov    -0x78(%rbp),%rdx
    0.00 :   11faf:  mov    -0xa8(%rbp),%r10
    0.00 :   11fb6:  movq   %rax,%xmm0
    0.00 :   11fbb:  mov    %rax,%r11
    0.00 :   11fbe:  movq   %rdx,%xmm2
    0.00 :   11fc3:  punpcklqdq %xmm2,%xmm0
    0.00 :   11fc7:  movups %xmm0,0x420(%r15)
    0.00 :   11fcf:  pop    %rax
    0.00 :   11fd0:  pop    %rcx
         : 1502  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   11fd1:  xor    %r9d,%r9d
    0.00 :   11fd4:  test   %rdx,%rdx
    0.00 :   11fd7:  jne    12560 <_dl_relocate_object+0x1800>
         : 1506  ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   11fdd:  cmp    $0x25,%r12
    0.00 :   11fe1:  ja     12510 <_dl_relocate_object+0x17b0>
    0.00 :   11fe7:  lea    0x1a1ca(%rip),%rcx        # 2c1b8 <primes.0+0x118>
    0.00 :   11fee:  movslq (%rcx,%r12,4),%rax
    0.00 :   11ff2:  add    %rcx,%rax
    0.00 :   11ff5:  notrack jmp *%rax
         : 1513  ./elf/../sysdeps/x86_64/dl-machine.h:341
    0.00 :   11ff8:  mov    -0x78(%rbp),%rax
    0.00 :   11ffc:  mov    0x10(%rax),%r9
         : 1516  ./elf/../sysdeps/x86_64/dl-machine.h:450
    0.00 :   12000:  add    0x10(%rbx),%r9
    0.00 :   12004:  mov    %r9,(%r10)
         : 1519  elf_dynamic_do_Rela():
         : 1520  ./elf/do-rel.h:191
    0.00 :   12007:  mov    0x8(%rbx),%eax
    0.00 :   1200a:  cmp    $0x7,%rax
    0.00 :   1200e:  je     12188 <_dl_relocate_object+0x1428>
         : 1524  ./elf/do-rel.h:175
    0.00 :   12014:  add    $0x18,%rbx
    0.00 :   12018:  cmp    %rbx,-0x98(%rbp)
    0.00 :   1201f:  ja     11ea0 <_dl_relocate_object+0x1140>
         : 1528  ./elf/do-rel.h:205
    0.00 :   12025:  mov    -0xa0(%rbp),%rbx
    0.00 :   1202c:  mov    %r15,%r11
    0.00 :   1202f:  test   %rbx,%rbx
    0.00 :   12032:  je     110a5 <_dl_relocate_object+0x345>
         : 1533  ./elf/do-rel.h:206
    0.00 :   12038:  mov    -0xb8(%rbp),%r12
    0.00 :   1203f:  cmp    %r12,%rbx
    0.00 :   12042:  ja     110a5 <_dl_relocate_object+0x345>
         : 1537  elf_machine_rela():
         : 1538  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   12048:  lea    0x1f031(%rip),%r13        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   1204f:  jmp    12065 <_dl_relocate_object+0x1305>
    0.00 :   12051:  nopl   0x0(%rax)
         : 1542  elf_dynamic_do_Rela():
         : 1543  ./elf/do-rel.h:206
    0.00 :   12058:  add    $0x18,%rbx
    0.00 :   1205c:  cmp    %r12,%rbx
    0.00 :   1205f:  ja     11702 <_dl_relocate_object+0x9a2>
         : 1547  ./elf/do-rel.h:207
    0.00 :   12065:  mov    0x8(%rbx),%rax
    0.00 :   12069:  cmp    $0x25,%eax
    0.00 :   1206c:  jne    12058 <_dl_relocate_object+0x12f8>
         : 1551  ./elf/do-rel.h:208
    0.00 :   1206e:  shr    $0x20,%rax
    0.00 :   12072:  mov    -0x90(%rbp),%rsi
         : 1554  ./elf/do-rel.h:209
    0.00 :   12079:  mov    -0x88(%rbp),%r14
         : 1556  ./elf/do-rel.h:208
    0.00 :   12080:  lea    (%rax,%rax,2),%rax
         : 1558  ./elf/do-rel.h:209
    0.00 :   12084:  add    (%rbx),%r14
         : 1560  ./elf/do-rel.h:208
    0.00 :   12087:  lea    (%rsi,%rax,8),%r10
    0.00 :   1208b:  mov    %r10,-0x78(%rbp)
         : 1563  elf_machine_rela():
         : 1564  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   1208f:  movzbl 0x4(%r10),%eax
    0.00 :   12094:  mov    %eax,%edi
    0.00 :   12096:  shr    $0x4,%dil
    0.00 :   1209a:  je     12580 <_dl_relocate_object+0x1820>
         : 1569  dl_symbol_visibility_binds_local_p():
         : 1570  ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   120a0:  movzbl 0x5(%r10),%edx
    0.00 :   120a5:  and    $0x3,%edx
    0.00 :   120a8:  sub    $0x1,%edx
         : 1574  elf_machine_rela():
         : 1575  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   120ab:  cmp    $0x1,%edx
    0.00 :   120ae:  jbe    12580 <_dl_relocate_object+0x1820>
    0.00 :   120b4:  cmp    0x410(%r15),%r10
    0.00 :   120bb:  je     12b60 <_dl_relocate_object+0x1e00>
    0.00 :   120c1:  mov    0x68(%r15),%rax
    0.00 :   120c5:  mov    (%r10),%edi
    0.00 :   120c8:  mov    %r10,0x410(%r15)
    0.00 :   120cf:  movl   $0x0,0x418(%r15)
    0.00 :   120da:  mov    0x8(%rax),%rcx
    0.00 :   120de:  xor    %eax,%eax
    0.00 :   120e0:  testb  $0x20,0x31e(%r15)
    0.00 :   120e8:  je     120ed <_dl_relocate_object+0x138d>
    0.00 :   120ea:  mov    (%r15),%rax
    0.00 :   120ed:  push   $0x0
    0.00 :   120ef:  add    %rcx,%rdi
    0.00 :   120f2:  mov    -0xb0(%rbp),%rcx
    0.00 :   120f9:  lea    -0x78(%rbp),%rdx
    0.00 :   120fd:  push   $0x9
    0.00 :   120ff:  add    %rax,%rdi
    0.00 :   12102:  xor    %r8d,%r8d
    0.00 :   12105:  xor    %r9d,%r9d
    0.00 :   12108:  mov    %r15,%rsi
    0.00 :   1210b:  mov    %r10,-0x98(%rbp)
    0.00 :   12112:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   12117:  mov    -0x78(%rbp),%rdx
    0.00 :   1211b:  mov    -0x98(%rbp),%r10
    0.00 :   12122:  movq   %rax,%xmm0
    0.00 :   12127:  mov    %rax,%rcx
    0.00 :   1212a:  movq   %rdx,%xmm7
    0.00 :   1212f:  punpcklqdq %xmm7,%xmm0
    0.00 :   12133:  movups %xmm0,0x420(%r15)
    0.00 :   1213b:  pop    %rdi
    0.00 :   1213c:  pop    %r8
         : 1609  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   1213e:  test   %rdx,%rdx
    0.00 :   12141:  jne    126d3 <_dl_relocate_object+0x1973>
         : 1612  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12147:  mov    -0xcc(%rbp),%edx
         : 1614  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   1214d:  mov    0x10(%rbx),%rax
    0.00 :   12151:  add    (%r15),%rax
         : 1617  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12154:  test   %edx,%edx
    0.00 :   12156:  jne    1215a <_dl_relocate_object+0x13fa>
         : 1620  ./elf/../sysdeps/x86_64/dl-machine.h:509
    0.00 :   12158:  call   *%rax
         : 1622  ./elf/../sysdeps/x86_64/dl-machine.h:510
    0.00 :   1215a:  mov    %rax,(%r14)
         : 1624  ./elf/../sysdeps/x86_64/dl-machine.h:514
    0.00 :   1215d:  jmp    12058 <_dl_relocate_object+0x12f8>
         : 1626  ./elf/../sysdeps/x86_64/dl-machine.h:455
    0.00 :   12162:  mov    -0x78(%rbp),%rax
    0.00 :   12166:  mov    0x10(%rax),%r9
         : 1629  ./elf/../sysdeps/x86_64/dl-machine.h:459
    0.00 :   1216a:  add    0x10(%rbx),%r9
         : 1631  ./elf/../sysdeps/x86_64/dl-machine.h:460
    0.00 :   1216e:  mov    %r9d,(%r10)
         : 1633  ./elf/../sysdeps/x86_64/dl-machine.h:463
    0.00 :   12171:  shr    $0x20,%r9
    0.00 :   12175:  jne    12b15 <_dl_relocate_object+0x1db5>
         : 1636  elf_dynamic_do_Rela():
         : 1637  ./elf/do-rel.h:191
    0.00 :   1217b:  mov    0x8(%rbx),%eax
    0.00 :   1217e:  cmp    $0x7,%rax
    0.00 :   12182:  jne    12014 <_dl_relocate_object+0x12b4>
         : 1641  ./elf/do-rel.h:192
    0.00 :   12188:  mov    0x27ce9(%rip),%r12d        # 39e78 <_rtld_global_ro+0x398>
    0.00 :   1218f:  test   %r12d,%r12d
    0.00 :   12192:  je     12014 <_dl_relocate_object+0x12b4>
         : 1645  ./elf/do-rel.h:195
    0.00 :   12198:  mov    -0x80(%rbp),%rdx
    0.00 :   1219c:  movzbl 0x4(%rdx),%eax
    0.00 :   121a0:  shr    $0x4,%al
    0.00 :   121a3:  je     12640 <_dl_relocate_object+0x18e0>
         : 1650  dl_symbol_visibility_binds_local_p():
         : 1651  ./elf/../sysdeps/generic/ldsodefs.h:138
    0.00 :   121a9:  movzbl 0x5(%rdx),%eax
    0.00 :   121ad:  and    $0x3,%eax
    0.00 :   121b0:  sub    $0x1,%eax
         : 1655  elf_dynamic_do_Rela():
         : 1656  ./elf/do-rel.h:195
    0.00 :   121b3:  cmp    $0x1,%eax
    0.00 :   121b6:  jbe    12640 <_dl_relocate_object+0x18e0>
    0.00 :   121bc:  cmp    0x410(%r15),%rdx
    0.00 :   121c3:  je     12bfd <_dl_relocate_object+0x1e9d>
    0.00 :   121c9:  mov    0x68(%r15),%rax
    0.00 :   121cd:  mov    (%rdx),%edi
    0.00 :   121cf:  mov    %rdx,0x410(%r15)
    0.00 :   121d6:  movl   $0x1,0x418(%r15)
    0.00 :   121e1:  mov    0x8(%rax),%rcx
    0.00 :   121e5:  xor    %eax,%eax
    0.00 :   121e7:  testb  $0x20,0x31e(%r15)
    0.00 :   121ef:  je     121f4 <_dl_relocate_object+0x1494>
    0.00 :   121f1:  mov    (%r15),%rax
    0.00 :   121f4:  push   $0x0
    0.00 :   121f6:  add    %rcx,%rdi
    0.00 :   121f9:  mov    -0xb0(%rbp),%rcx
    0.00 :   12200:  lea    -0x80(%rbp),%rdx
    0.00 :   12204:  push   $0x9
    0.00 :   12206:  xor    %r8d,%r8d
    0.00 :   12209:  add    %rax,%rdi
    0.00 :   1220c:  mov    $0x1,%r9d
    0.00 :   12212:  mov    %r15,%rsi
    0.00 :   12215:  mov    %r10,-0xa8(%rbp)
    0.00 :   1221c:  call   c0d0 <_dl_lookup_symbol_x>
    0.00 :   12221:  mov    -0x80(%rbp),%rdx
    0.00 :   12225:  movq   %rax,%xmm0
    0.00 :   1222a:  mov    %rax,%r8
    0.00 :   1222d:  movq   %rdx,%xmm5
    0.00 :   12232:  punpcklqdq %xmm5,%xmm0
    0.00 :   12236:  movups %xmm0,0x420(%r15)
    0.00 :   1223e:  pop    %r10
    0.00 :   12240:  pop    %r11
    0.00 :   12242:  mov    -0xa8(%rbp),%r10
         : 1690  ./elf/do-rel.h:198
    0.00 :   12249:  test   %rdx,%rdx
    0.00 :   1224c:  je     12014 <_dl_relocate_object+0x12b4>
    0.00 :   12252:  jmp    12643 <_dl_relocate_object+0x18e3>
    0.00 :   12257:  nopw   0x0(%rax,%rax,1)
         : 1695  elf_machine_rela():
         : 1696  ./elf/../sysdeps/x86_64/dl-machine.h:360
    0.00 :   12260:  test   %r11,%r11
    0.00 :   12263:  je     1217b <_dl_relocate_object+0x141b>
         : 1699  ./elf/../sysdeps/x86_64/dl-machine.h:361
    0.00 :   12269:  mov    0x460(%r11),%rax
    0.00 :   12270:  mov    %rax,(%r10)
         : 1702  elf_dynamic_do_Rela():
         : 1703  ./elf/do-rel.h:191
    0.00 :   12273:  mov    0x8(%rbx),%eax
    0.00 :   12276:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 1706  elf_machine_rela():
         : 1707  ./elf/../sysdeps/x86_64/dl-machine.h:390
    0.00 :   1227b:  mov    -0x78(%rbp),%rcx
    0.00 :   1227f:  test   %rcx,%rcx
    0.00 :   12282:  je     1288c <_dl_relocate_object+0x1b2c>
         : 1711  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12288:  mov    0x458(%r11),%rdx
    0.00 :   1228f:  cmp    $0xffffffffffffffff,%rdx
    0.00 :   12293:  je     12c92 <_dl_relocate_object+0x1f32>
    0.00 :   12299:  test   %rdx,%rdx
    0.00 :   1229c:  je     12cfa <_dl_relocate_object+0x1f9a>
         : 1717  ./elf/../sysdeps/x86_64/dl-machine.h:413
    0.00 :   122a2:  mov    0x10(%rbx),%rax
    0.00 :   122a6:  add    0x8(%rcx),%rax
    0.00 :   122aa:  sub    %rdx,%rax
         : 1721  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   122ad:  mov    %rax,0x8(%r10)
         : 1723  ./elf/../sysdeps/x86_64/dl-machine.h:414
    0.00 :   122b1:  lea    0x5e48(%rip),%rax        # 18100 <_dl_tlsdesc_return>
    0.00 :   122b8:  mov    %rax,(%r10)
         : 1726  elf_dynamic_do_Rela():
         : 1727  ./elf/do-rel.h:191
    0.00 :   122bb:  mov    0x8(%rbx),%eax
    0.00 :   122be:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 1730  elf_machine_rela():
         : 1731  ./elf/../sysdeps/x86_64/dl-machine.h:422
    0.00 :   122c3:  mov    -0x78(%rbp),%rax
    0.00 :   122c7:  test   %rax,%rax
    0.00 :   122ca:  je     1217b <_dl_relocate_object+0x141b>
         : 1735  ./elf/../sysdeps/x86_64/dl-machine.h:426
    0.00 :   122d0:  mov    0x458(%r11),%rdx
    0.00 :   122d7:  lea    0x1(%rdx),%rcx
    0.00 :   122db:  cmp    $0x1,%rcx
    0.00 :   122df:  jbe    12cc6 <_dl_relocate_object+0x1f66>
         : 1740  ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   122e5:  mov    0x8(%rax),%rax
    0.00 :   122e9:  sub    %rdx,%rax
    0.00 :   122ec:  add    0x10(%rbx),%rax
         : 1744  ./elf/../sysdeps/x86_64/dl-machine.h:440
    0.00 :   122f0:  mov    %rax,(%r10)
         : 1746  elf_dynamic_do_Rela():
         : 1747  ./elf/do-rel.h:191
    0.00 :   122f3:  mov    0x8(%rbx),%eax
    0.00 :   122f6:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 1750  elf_machine_rela():
         : 1751  ./elf/../sysdeps/x86_64/dl-machine.h:368
    0.00 :   122fb:  mov    -0x78(%rbp),%rdx
    0.00 :   122ff:  test   %rdx,%rdx
    0.00 :   12302:  je     1217b <_dl_relocate_object+0x141b>
         : 1755  ./elf/../sysdeps/x86_64/dl-machine.h:370
    0.00 :   12308:  mov    0x10(%rbx),%rax
    0.00 :   1230c:  add    0x8(%rdx),%rax
         : 1758  ./elf/../sysdeps/x86_64/dl-machine.h:379
    0.00 :   12310:  mov    %rax,(%r10)
         : 1760  elf_dynamic_do_Rela():
         : 1761  ./elf/do-rel.h:191
    0.00 :   12313:  mov    0x8(%rbx),%eax
    0.00 :   12316:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 1764  elf_machine_rela():
         : 1765  ./elf/../sysdeps/x86_64/dl-machine.h:480
    0.00 :   1231b:  mov    0x10(%rbx),%rax
    0.00 :   1231f:  sub    %r10,%rax
    0.00 :   12322:  add    %r9,%rax
         : 1769  ./elf/../sysdeps/x86_64/dl-machine.h:482
    0.00 :   12325:  movslq %eax,%rdx
         : 1771  ./elf/../sysdeps/x86_64/dl-machine.h:481
    0.00 :   12328:  mov    %eax,(%r10)
         : 1773  ./elf/../sysdeps/x86_64/dl-machine.h:482
    0.00 :   1232b:  cmp    %rdx,%rax
    0.00 :   1232e:  je     1217b <_dl_relocate_object+0x141b>
         : 1776  ./elf/../sysdeps/x86_64/dl-machine.h:484
    0.00 :   12334:  lea    0x1ec35(%rip),%rdi        # 30f70 <__PRETTY_FUNCTION__.0+0x160>
         : 1778  ./elf/../sysdeps/x86_64/dl-machine.h:472
    0.00 :   1233b:  mov    0x68(%r15),%rax
    0.00 :   1233f:  mov    0x8(%rax),%rax
    0.00 :   12343:  testb  $0x20,0x31e(%r15)
    0.00 :   1234b:  je     12350 <_dl_relocate_object+0x15f0>
    0.00 :   1234d:  add    (%r15),%rax
         : 1784  ./elf/../sysdeps/x86_64/dl-machine.h:474
    0.00 :   12350:  mov    0x0(%r13),%edx
    0.00 :   12354:  mov    %r10,-0xa8(%rbp)
    0.00 :   1235b:  add    %rax,%rdx
    0.00 :   1235e:  mov    0x2775b(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   12365:  mov    (%rax),%rsi
    0.00 :   12368:  lea    0x1bc31(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1236f:  test   %rsi,%rsi
    0.00 :   12372:  cmove  %rax,%rsi
    0.00 :   12376:  xor    %eax,%eax
    0.00 :   12378:  call   fe70 <_dl_error_printf>
         : 1795  elf_dynamic_do_Rela():
         : 1796  ./elf/do-rel.h:191
    0.00 :   1237d:  mov    0x8(%rbx),%eax
    0.00 :   12380:  mov    -0xa8(%rbp),%r10
    0.00 :   12387:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 1800  elf_machine_rela():
         : 1801  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   1238c:  mov    -0xcc(%rbp),%r13d
         : 1803  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   12393:  mov    0x10(%rbx),%rax
    0.00 :   12397:  add    (%r15),%rax
         : 1806  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   1239a:  test   %r13d,%r13d
    0.00 :   1239d:  jne    123af <_dl_relocate_object+0x164f>
    0.00 :   1239f:  mov    %r10,-0xa8(%rbp)
         : 1810  ./elf/../sysdeps/x86_64/dl-machine.h:509
    0.00 :   123a6:  call   *%rax
    0.00 :   123a8:  mov    -0xa8(%rbp),%r10
         : 1813  ./elf/../sysdeps/x86_64/dl-machine.h:510
    0.00 :   123af:  mov    %rax,(%r10)
    0.00 :   123b2:  jmp    1217b <_dl_relocate_object+0x141b>
         : 1816  ./elf/../sysdeps/x86_64/dl-machine.h:490
    0.00 :   123b7:  mov    -0x78(%rbp),%r12
    0.00 :   123bb:  test   %r12,%r12
    0.00 :   123be:  je     1217b <_dl_relocate_object+0x141b>
         : 1820  ./elf/../sysdeps/x86_64/dl-machine.h:495
    0.00 :   123c4:  mov    0x10(%r13),%rax
    0.00 :   123c8:  mov    0x10(%r12),%rdx
         : 1823  ./elf/../sysdeps/x86_64/dl-machine.h:494
    0.00 :   123cd:  mov    %r10,%rdi
    0.00 :   123d0:  mov    %r9,%rsi
         : 1826  ./elf/../sysdeps/x86_64/dl-machine.h:495
    0.00 :   123d3:  cmp    %rdx,%rax
    0.00 :   123d6:  cmovbe %rax,%rdx
         : 1829  ./elf/../sysdeps/x86_64/dl-machine.h:494
    0.00 :   123da:  call   2afb0 <memcpy>
    0.00 :   123df:  mov    %rax,%r10
         : 1832  ./elf/../sysdeps/x86_64/dl-machine.h:496
    0.00 :   123e2:  mov    0x10(%r13),%rax
    0.00 :   123e6:  cmp    %rax,0x10(%r12)
    0.00 :   123eb:  ja     12403 <_dl_relocate_object+0x16a3>
         : 1836  ./elf/../sysdeps/x86_64/dl-machine.h:497
    0.00 :   123ed:  jae    1217b <_dl_relocate_object+0x141b>
         : 1838  ./elf/../sysdeps/x86_64/dl-machine.h:498
    0.00 :   123f3:  mov    0x2772a(%rip),%r14d        # 39b24 <_rtld_global_ro+0x44>
    0.00 :   123fa:  test   %r14d,%r14d
    0.00 :   123fd:  je     1217b <_dl_relocate_object+0x141b>
         : 1842  ./elf/../sysdeps/x86_64/dl-machine.h:500
    0.00 :   12403:  lea    0x1eba6(%rip),%rdi        # 30fb0 <__PRETTY_FUNCTION__.0+0x1a0>
    0.00 :   1240a:  jmp    1233b <_dl_relocate_object+0x15db>
    0.00 :   1240f:  nop
    0.00 :   12410:  mov    %r13,%rdx
    0.00 :   12413:  mov    %r15,%r11
         : 1848  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   12416:  movzwl 0x6(%rdx),%ecx
    0.00 :   1241a:  cmp    $0xfff1,%cx
    0.00 :   1241e:  je     12572 <_dl_relocate_object+0x1812>
    0.00 :   12424:  mov    (%r11),%r9
         : 1853  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   12427:  and    $0xf,%eax
         : 1855  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   1242a:  add    0x8(%rdx),%r9
         : 1857  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   1242e:  cmp    $0xa,%al
    0.00 :   12430:  jne    11fdd <_dl_relocate_object+0x127d>
         : 1860  ./elf/../sysdeps/x86_64/dl-machine.h:301
    0.00 :   12436:  mov    -0xcc(%rbp),%eax
    0.00 :   1243c:  test   %eax,%eax
    0.00 :   1243e:  jne    11fdd <_dl_relocate_object+0x127d>
    0.00 :   12444:  test   %cx,%cx
    0.00 :   12447:  je     11fdd <_dl_relocate_object+0x127d>
         : 1866  ./elf/../sysdeps/x86_64/dl-machine.h:304
    0.00 :   1244d:  cmp    %r11,%r15
    0.00 :   12450:  je     124df <_dl_relocate_object+0x177f>
         : 1869  ./elf/../sysdeps/x86_64/dl-machine.h:305
    0.00 :   12456:  movzbl 0x31c(%r11),%eax
    0.00 :   1245e:  test   $0x4,%al
    0.00 :   12460:  jne    124df <_dl_relocate_object+0x177f>
         : 1873  ./elf/../sysdeps/x86_64/dl-machine.h:308
    0.00 :   12462:  mov    0x68(%r15),%rdx
    0.00 :   12466:  mov    0x8(%rdx),%rdx
    0.00 :   1246a:  testb  $0x20,0x31e(%r15)
    0.00 :   12472:  je     12477 <_dl_relocate_object+0x1717>
    0.00 :   12474:  add    (%r15),%rdx
         : 1879  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   12477:  mov    0x0(%r13),%ecx
         : 1881  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   1247b:  lea    (%rdx,%rcx,1),%r8
         : 1883  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   1247f:  mov    0x2763a(%rip),%rcx        # 39ac0 <_dl_argv>
         : 1885  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   12486:  mov    0x8(%r15),%rdx
         : 1887  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   1248a:  mov    (%rcx),%rsi
         : 1889  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   1248d:  test   $0x3,%al
    0.00 :   1248f:  je     12e35 <_dl_relocate_object+0x20d5>
         : 1892  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   12495:  test   %rsi,%rsi
    0.00 :   12498:  lea    0x1bb01(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1249f:  mov    0x8(%r11),%rcx
    0.00 :   124a3:  lea    0x1ebd6(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   124aa:  cmove  %rax,%rsi
    0.00 :   124ae:  xor    %eax,%eax
    0.00 :   124b0:  mov    %r9,-0xd8(%rbp)
    0.00 :   124b7:  mov    %r10,-0xc0(%rbp)
    0.00 :   124be:  mov    %r11,-0xa8(%rbp)
    0.00 :   124c5:  call   fe70 <_dl_error_printf>
    0.00 :   124ca:  mov    -0xd8(%rbp),%r9
    0.00 :   124d1:  mov    -0xc0(%rbp),%r10
    0.00 :   124d8:  mov    -0xa8(%rbp),%r11
    0.00 :   124df:  mov    %r11,-0xc0(%rbp)
    0.00 :   124e6:  mov    %r10,-0xa8(%rbp)
         : 1908  ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   124ed:  call   *%r9
    0.00 :   124f0:  mov    -0xc0(%rbp),%r11
    0.00 :   124f7:  mov    -0xa8(%rbp),%r10
    0.00 :   124fe:  mov    %rax,%r9
         : 1913  ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   12501:  cmp    $0x25,%r12
    0.00 :   12505:  jbe    11fe7 <_dl_relocate_object+0x1287>
    0.00 :   1250b:  nopl   0x0(%rax,%rax,1)
         : 1917  ./elf/../sysdeps/x86_64/dl-machine.h:513
    0.00 :   12510:  xor    %edx,%edx
    0.00 :   12512:  mov    %r14d,%esi
    0.00 :   12515:  mov    %r15,%rdi
    0.00 :   12518:  call   10c90 <_dl_reloc_bad_type>
    0.00 :   1251d:  nopl   (%rax)
         : 1923  elf_dynamic_do_Rela():
         : 1924  ./elf/do-rel.h:182
    0.00 :   12520:  mov    -0xa0(%rbp),%rax
    0.00 :   12527:  mov    %rbx,-0xb8(%rbp)
    0.00 :   1252e:  test   %rax,%rax
    0.00 :   12531:  cmove  %rbx,%rax
    0.00 :   12535:  mov    %rax,-0xa0(%rbp)
         : 1930  ./elf/do-rel.h:185
    0.00 :   1253c:  jmp    12014 <_dl_relocate_object+0x12b4>
    0.00 :   12541:  nopl   0x0(%rax)
         : 1933  elf_machine_rela():
         : 1934  ./elf/../sysdeps/x86_64/dl-machine.h:284
    0.00 :   12548:  mov    0x10(%rbx),%rax
    0.00 :   1254c:  add    (%r15),%rax
    0.00 :   1254f:  mov    %rax,(%r10)
         : 1938  elf_dynamic_do_Rela():
         : 1939  ./elf/do-rel.h:191
    0.00 :   12552:  mov    0x8(%rbx),%eax
         : 1941  elf_machine_rela():
         : 1942  ./elf/do-rel.h:191
    0.00 :   12555:  jmp    1200a <_dl_relocate_object+0x12aa>
    0.00 :   1255a:  nopw   0x0(%rax,%rax,1)
         : 1945  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   12560:  movzwl 0x6(%rdx),%ecx
         : 1947  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   12564:  movzbl 0x4(%rdx),%eax
         : 1949  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   12568:  cmp    $0xfff1,%cx
    0.00 :   1256c:  jne    12424 <_dl_relocate_object+0x16c4>
    0.00 :   12572:  xor    %r9d,%r9d
    0.00 :   12575:  jmp    12427 <_dl_relocate_object+0x16c7>
    0.00 :   1257a:  nopw   0x0(%rax,%rax,1)
    0.00 :   12580:  mov    %r15,%rcx
    0.00 :   12583:  mov    %r10,%rdx
    0.00 :   12586:  movzwl 0x6(%rdx),%esi
    0.00 :   1258a:  mov    0x8(%rdx),%r9
    0.00 :   1258e:  and    $0xf,%eax
    0.00 :   12591:  cmp    $0xfff1,%si
    0.00 :   12595:  je     12b08 <_dl_relocate_object+0x1da8>
    0.00 :   1259b:  mov    (%rcx),%rdx
         : 1963  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   1259e:  cmp    $0xa,%al
    0.00 :   125a0:  jne    12147 <_dl_relocate_object+0x13e7>
         : 1966  ./elf/../sysdeps/x86_64/dl-machine.h:300
    0.00 :   125a6:  test   %si,%si
    0.00 :   125a9:  je     12147 <_dl_relocate_object+0x13e7>
         : 1969  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   125af:  add    %rdx,%r9
         : 1971  ./elf/../sysdeps/x86_64/dl-machine.h:301
    0.00 :   125b2:  mov    -0xcc(%rbp),%esi
    0.00 :   125b8:  test   %esi,%esi
    0.00 :   125ba:  jne    12d47 <_dl_relocate_object+0x1fe7>
         : 1975  ./elf/../sysdeps/x86_64/dl-machine.h:304
    0.00 :   125c0:  cmp    %rcx,%r15
    0.00 :   125c3:  je     1262f <_dl_relocate_object+0x18cf>
         : 1978  ./elf/../sysdeps/x86_64/dl-machine.h:305
    0.00 :   125c5:  movzbl 0x31c(%rcx),%edi
    0.00 :   125cc:  test   $0x4,%dil
    0.00 :   125d0:  jne    1262f <_dl_relocate_object+0x18cf>
         : 1982  ./elf/../sysdeps/x86_64/dl-machine.h:308
    0.00 :   125d2:  mov    0x68(%r15),%rax
    0.00 :   125d6:  mov    0x8(%rax),%rax
    0.00 :   125da:  testb  $0x20,0x31e(%r15)
    0.00 :   125e2:  je     125e7 <_dl_relocate_object+0x1887>
    0.00 :   125e4:  add    (%r15),%rax
         : 1988  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   125e7:  mov    (%r10),%edx
         : 1990  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   125ea:  and    $0x3,%edi
         : 1992  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   125ed:  lea    (%rax,%rdx,1),%r8
         : 1994  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   125f1:  mov    0x274c8(%rip),%rax        # 39ac0 <_dl_argv>
         : 1996  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   125f8:  mov    0x8(%r15),%rdx
         : 1998  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   125fc:  mov    (%rax),%rsi
         : 2000  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   125ff:  je     12e35 <_dl_relocate_object+0x20d5>
         : 2002  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   12605:  test   %rsi,%rsi
    0.00 :   12608:  lea    0x1b991(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   1260f:  mov    0x8(%rcx),%rcx
    0.00 :   12613:  mov    %r13,%rdi
    0.00 :   12616:  cmove  %rax,%rsi
    0.00 :   1261a:  xor    %eax,%eax
    0.00 :   1261c:  mov    %r9,-0x98(%rbp)
    0.00 :   12623:  call   fe70 <_dl_error_printf>
    0.00 :   12628:  mov    -0x98(%rbp),%r9
         : 2012  ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   1262f:  call   *%r9
         : 2014  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   12632:  mov    0x10(%rbx),%rax
    0.00 :   12636:  add    (%r15),%rax
         : 2017  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12639:  jmp    12158 <_dl_relocate_object+0x13f8>
    0.00 :   1263e:  xchg   %ax,%ax
         : 2020  elf_dynamic_do_Rela():
         : 2021  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12640:  mov    %r15,%r8
         : 2023  ./elf/do-rel.h:199
    0.00 :   12643:  mov    %r10,%rcx
    0.00 :   12646:  xor    %esi,%esi
    0.00 :   12648:  mov    %r15,%rdi
    0.00 :   1264b:  call   1b900 <_dl_audit_symbind>
    0.00 :   12650:  jmp    12014 <_dl_relocate_object+0x12b4>
         : 2029  elf_machine_rela():
         : 2030  ./elf/../sysdeps/x86_64/dl-machine.h:392
    0.00 :   12655:  mov    0x10(%rbx),%rax
    0.00 :   12659:  mov    -0x88(%rbp),%rcx
    0.00 :   12660:  mov    %rax,0x8(%rcx)
         : 2034  ./elf/../sysdeps/x86_64/dl-machine.h:393
    0.00 :   12664:  lea    0x5aa5(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   1266b:  mov    %rax,(%rcx)
         : 2037  elf_dynamic_do_Rela():
         : 2038  ./elf/do-rel.h:145
    0.00 :   1266e:  mov    0x8(%rbx),%eax
         : 2040  elf_machine_rela():
         : 2041  ./elf/do-rel.h:145
    0.00 :   12671:  jmp    1154e <_dl_relocate_object+0x7ee>
    0.00 :   12676:  cmp    $0x1d,%rdx
    0.00 :   1267a:  ja     1291a <_dl_relocate_object+0x1bba>
         : 2045  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   12680:  lea    0x19bd9(%rip),%rax        # 2c260 <CSWTCH.111>
    0.00 :   12687:  mov    (%rax,%rdx,4),%edi
    0.00 :   1268a:  or     %r9d,%edi
    0.00 :   1268d:  cmp    0x418(%r15),%edi
    0.00 :   12694:  jne    11f50 <_dl_relocate_object+0x11f0>
    0.00 :   1269a:  mov    0x428(%r15),%rdx
    0.00 :   126a1:  addq   $0x1,0x28437(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   126a9:  mov    0x420(%r15),%r11
    0.00 :   126b0:  mov    %rdx,-0x78(%rbp)
    0.00 :   126b4:  jmp    11fd1 <_dl_relocate_object+0x1271>
         : 2056  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   126b9:  cmp    $0xa,%al
    0.00 :   126bb:  jne    116d8 <_dl_relocate_object+0x978>
    0.00 :   126c1:  jmp    11b52 <_dl_relocate_object+0xdf2>
         : 2060  elf_machine_lazy_rel():
         : 2061  ./elf/../sysdeps/x86_64/dl-machine.h:585
    0.00 :   126c6:  mov    $0x1,%edx
    0.00 :   126cb:  mov    %r15,%rdi
    0.00 :   126ce:  call   10c90 <_dl_reloc_bad_type>
         : 2065  elf_machine_rela():
         : 2066  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   126d3:  movzbl 0x4(%rdx),%eax
    0.00 :   126d7:  jmp    12586 <_dl_relocate_object+0x1826>
         : 2069  ./elf/../sysdeps/x86_64/dl-machine.h:467
    0.00 :   126dc:  lea    0x1e84d(%rip),%rdi        # 30f30 <__PRETTY_FUNCTION__.0+0x120>
         : 2071  ./elf/../sysdeps/x86_64/dl-machine.h:472
    0.00 :   126e3:  mov    0x68(%r15),%rax
    0.00 :   126e7:  mov    0x8(%rax),%rax
    0.00 :   126eb:  testb  $0x20,0x31e(%r15)
    0.00 :   126f3:  je     126f8 <_dl_relocate_object+0x1998>
    0.00 :   126f5:  add    (%r15),%rax
         : 2077  ./elf/../sysdeps/x86_64/dl-machine.h:474
    0.00 :   126f8:  mov    0x0(%r13),%edx
    0.00 :   126fc:  mov    %r10,-0xb8(%rbp)
    0.00 :   12703:  add    %rax,%rdx
    0.00 :   12706:  mov    0x273b3(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   1270d:  mov    (%rax),%rsi
    0.00 :   12710:  lea    0x1b889(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12717:  test   %rsi,%rsi
    0.00 :   1271a:  cmove  %rax,%rsi
    0.00 :   1271e:  xor    %eax,%eax
    0.00 :   12720:  call   fe70 <_dl_error_printf>
         : 2088  elf_dynamic_do_Rela():
         : 2089  ./elf/do-rel.h:145
    0.00 :   12725:  mov    0x8(%rbx),%eax
    0.00 :   12728:  mov    -0xb8(%rbp),%r10
    0.00 :   1272f:  jmp    1154e <_dl_relocate_object+0x7ee>
         : 2093  elf_machine_rela():
         : 2094  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   12734:  mov    0x418(%r15),%eax
    0.00 :   1273b:  test   %eax,%eax
    0.00 :   1273d:  jne    11632 <_dl_relocate_object+0x8d2>
    0.00 :   12743:  mov    0x428(%r15),%rdx
    0.00 :   1274a:  addq   $0x1,0x2838e(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12752:  mov    0x420(%r15),%rcx
    0.00 :   12759:  mov    %rdx,-0x78(%rbp)
    0.00 :   1275d:  jmp    116cf <_dl_relocate_object+0x96f>
         : 2103  _dl_relocate_object():
         : 2104  ./elf/dl-reloc.c:254
    0.00 :   12762:  movzwl 0x2b8(%r14),%edx
    0.00 :   1276a:  mov    0x2a8(%r14),%rcx
    0.00 :   12771:  lea    0x0(,%rdx,8),%rax
    0.00 :   12779:  sub    %rdx,%rax
    0.00 :   1277c:  lea    (%rcx,%rax,8),%rax
    0.00 :   12780:  cmp    %rax,%rcx
    0.00 :   12783:  jae    12d53 <_dl_relocate_object+0x1ff3>
         : 2112  ./elf/dl-reloc.c:255
    0.00 :   12789:  mov    %ebx,-0x88(%rbp)
         : 2114  ./elf/dl-reloc.c:240
    0.00 :   1278f:  mov    %rcx,%r12
         : 2116  ./elf/dl-reloc.c:201
    0.00 :   12792:  xor    %r15d,%r15d
         : 2118  ./elf/dl-reloc.c:255
    0.00 :   12795:  movabs $0x2ffffffff,%r8
    0.00 :   1279f:  jmp    127c4 <_dl_relocate_object+0x1a64>
    0.00 :   127a1:  nopl   0x0(%rax)
         : 2122  ./elf/dl-reloc.c:254 (discriminator 2)
    0.00 :   127a8:  lea    0x0(,%rdx,8),%rax
    0.00 :   127b0:  add    $0x38,%r12
    0.00 :   127b4:  sub    %rdx,%rax
    0.00 :   127b7:  lea    (%rcx,%rax,8),%rax
    0.00 :   127bb:  cmp    %rax,%r12
    0.00 :   127be:  jae    12908 <_dl_relocate_object+0x1ba8>
         : 2129  ./elf/dl-reloc.c:255
    0.00 :   127c4:  mov    (%r12),%rax
    0.00 :   127c8:  and    %r8,%rax
    0.00 :   127cb:  cmp    $0x1,%rax
    0.00 :   127cf:  jne    127a8 <_dl_relocate_object+0x1a48>
         : 2134  ./elf/dl-reloc.c:259
    0.00 :   127d1:  mov    %rsp,%rax
    0.00 :   127d4:  cmp    %rax,%rsp
    0.00 :   127d7:  je     127ee <_dl_relocate_object+0x1a8e>
    0.00 :   127d9:  sub    $0x1000,%rsp
    0.00 :   127e0:  orq    $0x0,0xff8(%rsp)
    0.00 :   127e9:  cmp    %rax,%rsp
    0.00 :   127ec:  jne    127d9 <_dl_relocate_object+0x1a79>
    0.00 :   127ee:  sub    $0x30,%rsp
    0.00 :   127f2:  orq    $0x0,0x28(%rsp)
         : 2144  ./elf/dl-reloc.c:260
    0.00 :   127f8:  mov    0x272f9(%rip),%rdx        # 39af8 <_rtld_global_ro+0x18>
    0.00 :   127ff:  mov    0x10(%r12),%rcx
    0.00 :   12804:  mov    %rdx,%rax
    0.00 :   12807:  neg    %rax
    0.00 :   1280a:  lea    -0x1(%rcx,%rdx,1),%rsi
         : 2150  ./elf/dl-reloc.c:261
    0.00 :   1280f:  mov    %rcx,%rdi
         : 2152  ./elf/dl-reloc.c:260
    0.00 :   12812:  add    0x28(%r12),%rsi
         : 2154  ./elf/dl-reloc.c:261
    0.00 :   12817:  and    %rax,%rdi
         : 2156  ./elf/dl-reloc.c:260
    0.00 :   1281a:  and    %rax,%rsi
         : 2158  ./elf/dl-reloc.c:266
    0.00 :   1281d:  mov    0x4(%r12),%eax
         : 2160  ./elf/dl-reloc.c:259
    0.00 :   12822:  lea    0xf(%rsp),%r9
         : 2162  ./elf/dl-reloc.c:261
    0.00 :   12827:  sub    %rdi,%rsi
         : 2164  ./elf/dl-reloc.c:263
    0.00 :   1282a:  add    (%r14),%rdi
         : 2166  ./elf/dl-reloc.c:259
    0.00 :   1282d:  mov    %r9,%rbx
         : 2168  ./elf/dl-reloc.c:266
    0.00 :   12830:  mov    %eax,%edx
         : 2170  ./elf/dl-reloc.c:259
    0.00 :   12832:  and    $0xfffffffffffffff0,%rbx
         : 2172  ./elf/dl-reloc.c:266
    0.00 :   12836:  shr    $0x2,%edx
         : 2174  ./elf/dl-reloc.c:260
    0.00 :   12839:  mov    %rsi,0x8(%rbx)
         : 2176  ./elf/dl-reloc.c:267
    0.00 :   1283d:  and    $0x1,%edx
         : 2178  ./elf/dl-reloc.c:262
    0.00 :   12840:  mov    %rdi,(%rbx)
         : 2180  ./elf/dl-reloc.c:268
    0.00 :   12843:  test   $0x2,%al
    0.00 :   12845:  je     1284a <_dl_relocate_object+0x1aea>
         : 2183  ./elf/dl-reloc.c:269
    0.00 :   12847:  or     $0x2,%edx
    0.00 :   1284a:  mov    %edx,0x10(%rbx)
         : 2186  ./elf/dl-reloc.c:270
    0.00 :   1284d:  test   $0x1,%al
    0.00 :   1284f:  je     12857 <_dl_relocate_object+0x1af7>
         : 2189  ./elf/dl-reloc.c:271
    0.00 :   12851:  or     $0x4,%edx
    0.00 :   12854:  mov    %edx,0x10(%rbx)
         : 2192  ./elf/dl-reloc.c:273
    0.00 :   12857:  or     $0x2,%edx
    0.00 :   1285a:  call   26d20 <__GI___mprotect>
    0.00 :   1285f:  movabs $0x2ffffffff,%r8
    0.00 :   12869:  test   %eax,%eax
    0.00 :   1286b:  js     12e4e <_dl_relocate_object+0x20ee>
         : 2198  ./elf/dl-reloc.c:280
    0.00 :   12871:  mov    %r15,0x18(%rbx)
         : 2200  ./elf/dl-reloc.c:254
    0.00 :   12875:  mov    0x2a8(%r14),%rcx
    0.00 :   1287c:  mov    %rbx,%r15
    0.00 :   1287f:  movzwl 0x2b8(%r14),%edx
    0.00 :   12887:  jmp    127a8 <_dl_relocate_object+0x1a48>
         : 2205  elf_machine_rela():
         : 2206  ./elf/../sysdeps/x86_64/dl-machine.h:392
    0.00 :   1288c:  mov    0x10(%rbx),%rax
    0.00 :   12890:  mov    %rax,0x8(%r10)
         : 2209  ./elf/../sysdeps/x86_64/dl-machine.h:393
    0.00 :   12894:  lea    0x5875(%rip),%rax        # 18110 <_dl_tlsdesc_undefweak>
    0.00 :   1289b:  mov    %rax,(%r10)
         : 2212  elf_dynamic_do_Rela():
         : 2213  ./elf/do-rel.h:191
    0.00 :   1289e:  mov    0x8(%rbx),%eax
         : 2215  elf_machine_rela():
         : 2216  ./elf/do-rel.h:191
    0.00 :   128a1:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 2218  _dl_relocate_object():
         : 2219  ./elf/dl-reloc.c:243
    0.00 :   128a6:  test   %r13d,%r13d
    0.00 :   128a9:  lea    0x1b85f(%rip),%rdx        # 2e10f <_sys_errnameidx+0x80f>
    0.00 :   128b0:  lea    0x1c632(%rip),%rax        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   128b7:  cmove  %rax,%rdx
         : 2224  ./elf/dl-reloc.c:244 (discriminator 4)
    0.00 :   128bb:  mov    0x8(%r14),%rsi
         : 2226  ./elf/dl-reloc.c:243 (discriminator 4)
    0.00 :   128bf:  cmpb   $0x0,(%rsi)
    0.00 :   128c2:  je     12959 <_dl_relocate_object+0x1bf9>
         : 2229  ./elf/dl-reloc.c:243 (discriminator 6)
    0.00 :   128c8:  lea    0x1b848(%rip),%rdi        # 2e117 <_sys_errnameidx+0x817>
    0.00 :   128cf:  xor    %eax,%eax
    0.00 :   128d1:  call   fbc0 <_dl_debug_printf>
    0.00 :   128d6:  jmp    10e34 <_dl_relocate_object+0xd4>
         : 2234  elf_dynamic_do_Rela():
         : 2235  ./elf/do-rel.h:149
    0.00 :   128db:  cmpl   $0x1,0x418(%r15)
    0.00 :   128e3:  jne    11776 <_dl_relocate_object+0xa16>
    0.00 :   128e9:  mov    0x428(%r15),%rdx
    0.00 :   128f0:  addq   $0x1,0x281e8(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   128f8:  mov    0x420(%r15),%r8
    0.00 :   128ff:  mov    %rdx,-0x80(%rbp)
    0.00 :   12903:  jmp    117f7 <_dl_relocate_object+0xa97>
    0.00 :   12908:  mov    %r15,-0xf0(%rbp)
    0.00 :   1290f:  mov    -0x88(%rbp),%ebx
    0.00 :   12915:  jmp    10e4b <_dl_relocate_object+0xeb>
         : 2246  elf_machine_rela():
         : 2247  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   1291a:  cmp    %r9d,0x418(%r15)
    0.00 :   12921:  jne    11f5b <_dl_relocate_object+0x11fb>
    0.00 :   12927:  jmp    1269a <_dl_relocate_object+0x193a>
    0.00 :   1292c:  mov    -0xf0(%rbp),%rbx
         : 2252  _dl_relocate_object():
         : 2253  ./elf/dl-reloc.c:320
    0.00 :   12933:  mov    0x10(%rbx),%edx
    0.00 :   12936:  mov    0x8(%rbx),%rsi
    0.00 :   1293a:  mov    (%rbx),%rdi
    0.00 :   1293d:  call   26d20 <__GI___mprotect>
    0.00 :   12942:  test   %eax,%eax
    0.00 :   12944:  js     12e1d <_dl_relocate_object+0x20bd>
         : 2260  ./elf/dl-reloc.c:330
    0.00 :   1294a:  mov    0x18(%rbx),%rbx
         : 2262  ./elf/dl-reloc.c:318
    0.00 :   1294e:  test   %rbx,%rbx
    0.00 :   12951:  je     110f5 <_dl_relocate_object+0x395>
    0.00 :   12957:  jmp    12933 <_dl_relocate_object+0x1bd3>
         : 2266  ./elf/dl-reloc.c:244
    0.00 :   12959:  mov    0x27160(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   12960:  mov    (%rax),%rsi
    0.00 :   12963:  lea    0x1b1b9(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   1296a:  test   %rsi,%rsi
    0.00 :   1296d:  cmove  %rax,%rsi
    0.00 :   12971:  jmp    128c8 <_dl_relocate_object+0x1b68>
         : 2273  elf_machine_rela():
         : 2274  ./elf/../sysdeps/x86_64/dl-machine.h:404
    0.00 :   12976:  mov    0x10(%r12),%rsi
    0.00 :   1297b:  mov    %r9,%rdi
    0.00 :   1297e:  add    0x8(%rdx),%rsi
    0.00 :   12982:  mov    %r11,-0x90(%rbp)
    0.00 :   12989:  mov    %r10,-0x88(%rbp)
    0.00 :   12990:  call   17de0 <_dl_make_tlsdesc_dynamic>
         : 2281  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   12995:  mov    -0x88(%rbp),%r10
    0.00 :   1299c:  mov    -0x90(%rbp),%r11
         : 2284  ./elf/../sysdeps/x86_64/dl-machine.h:404
    0.00 :   129a3:  mov    %rax,0x8(%r13)
         : 2286  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   129a7:  lea    0x5782(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   129ae:  mov    %rax,0x0(%r13)
    0.00 :   129b2:  jmp    1102d <_dl_relocate_object+0x2cd>
         : 2290  ./elf/../sysdeps/x86_64/dl-machine.h:404
    0.00 :   129b7:  mov    0x10(%rbx),%rsi
    0.00 :   129bb:  mov    %r11,%rdi
    0.00 :   129be:  add    0x8(%rdx),%rsi
    0.00 :   129c2:  mov    %r10,-0xb8(%rbp)
    0.00 :   129c9:  call   17de0 <_dl_make_tlsdesc_dynamic>
    0.00 :   129ce:  mov    -0x88(%rbp),%rcx
         : 2297  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   129d5:  mov    -0xb8(%rbp),%r10
         : 2299  ./elf/../sysdeps/x86_64/dl-machine.h:404
    0.00 :   129dc:  mov    %rax,0x8(%rcx)
         : 2301  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   129e0:  lea    0x5749(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   129e7:  mov    %rax,(%rcx)
         : 2304  elf_dynamic_do_Rela():
         : 2305  ./elf/do-rel.h:145
    0.00 :   129ea:  mov    0x8(%rbx),%eax
         : 2307  elf_machine_rela():
         : 2308  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   129ed:  jmp    1154e <_dl_relocate_object+0x7ee>
         : 2310  ./elf/../sysdeps/x86_64/dl-machine.h:301
    0.00 :   129f2:  test   %cx,%cx
    0.00 :   129f5:  je     11c74 <_dl_relocate_object+0xf14>
    0.00 :   129fb:  mov    -0xcc(%rbp),%r8d
    0.00 :   12a02:  test   %r8d,%r8d
    0.00 :   12a05:  jne    11c74 <_dl_relocate_object+0xf14>
         : 2316  ./elf/../sysdeps/x86_64/dl-machine.h:304
    0.00 :   12a0b:  cmp    %r9,%r15
    0.00 :   12a0e:  je     12aa5 <_dl_relocate_object+0x1d45>
         : 2319  ./elf/../sysdeps/x86_64/dl-machine.h:305
    0.00 :   12a14:  movzbl 0x31c(%r9),%eax
    0.00 :   12a1c:  test   $0x4,%al
    0.00 :   12a1e:  jne    12aa5 <_dl_relocate_object+0x1d45>
         : 2323  ./elf/../sysdeps/x86_64/dl-machine.h:308
    0.00 :   12a24:  mov    0x68(%r15),%rdx
    0.00 :   12a28:  mov    0x8(%rdx),%r8
    0.00 :   12a2c:  testb  $0x20,0x31e(%r15)
    0.00 :   12a34:  je     12a39 <_dl_relocate_object+0x1cd9>
    0.00 :   12a36:  add    (%r15),%r8
         : 2329  ./elf/../sysdeps/x86_64/dl-machine.h:313
    0.00 :   12a39:  mov    -0x88(%rbp),%rsi
    0.00 :   12a40:  mov    0x27079(%rip),%rcx        # 39ac0 <_dl_argv>
    0.00 :   12a47:  mov    (%rsi),%edx
    0.00 :   12a49:  mov    (%rcx),%rsi
         : 2334  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   12a4c:  add    %rdx,%r8
    0.00 :   12a4f:  mov    0x8(%r15),%rdx
         : 2337  ./elf/../sysdeps/x86_64/dl-machine.h:309
    0.00 :   12a53:  test   $0x3,%al
    0.00 :   12a55:  je     12e35 <_dl_relocate_object+0x20d5>
         : 2340  ./elf/../sysdeps/x86_64/dl-machine.h:316
    0.00 :   12a5b:  test   %rsi,%rsi
    0.00 :   12a5e:  lea    0x1b53b(%rip),%rax        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12a65:  mov    0x8(%r9),%rcx
    0.00 :   12a69:  lea    0x1e610(%rip),%rdi        # 31080 <__PRETTY_FUNCTION__.0+0x270>
    0.00 :   12a70:  cmove  %rax,%rsi
    0.00 :   12a74:  xor    %eax,%eax
    0.00 :   12a76:  mov    %r11,-0xa8(%rbp)
    0.00 :   12a7d:  mov    %r10,-0xa0(%rbp)
    0.00 :   12a84:  mov    %r9,-0x88(%rbp)
    0.00 :   12a8b:  call   fe70 <_dl_error_printf>
    0.00 :   12a90:  mov    -0xa8(%rbp),%r11
    0.00 :   12a97:  mov    -0xa0(%rbp),%r10
    0.00 :   12a9e:  mov    -0x88(%rbp),%r9
    0.00 :   12aa5:  mov    %r11,-0xa8(%rbp)
         : 2355  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   12aac:  mov    -0x90(%rbp),%rax
    0.00 :   12ab3:  mov    %r10,-0xa0(%rbp)
    0.00 :   12aba:  add    -0x98(%rbp),%rax
    0.00 :   12ac1:  mov    %r9,-0x88(%rbp)
         : 2360  ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   12ac8:  call   *%rax
         : 2362  ./elf/../sysdeps/x86_64/dl-machine.h:390
    0.00 :   12aca:  mov    -0x78(%rbp),%rdx
    0.00 :   12ace:  mov    -0x88(%rbp),%r9
    0.00 :   12ad5:  mov    -0xa0(%rbp),%r10
    0.00 :   12adc:  mov    -0xa8(%rbp),%r11
    0.00 :   12ae3:  test   %rdx,%rdx
    0.00 :   12ae6:  jne    11c74 <_dl_relocate_object+0xf14>
    0.00 :   12aec:  jmp    11294 <_dl_relocate_object+0x534>
    0.00 :   12af1:  nopl   0x0(%rax)
         : 2371  ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   12af8:  movq   $0x0,-0x98(%rbp)
    0.00 :   12b03:  jmp    11c5e <_dl_relocate_object+0xefe>
         : 2374  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   12b08:  cmp    $0xa,%al
    0.00 :   12b0a:  jne    12147 <_dl_relocate_object+0x13e7>
    0.00 :   12b10:  jmp    125b2 <_dl_relocate_object+0x1852>
         : 2378  ./elf/../sysdeps/x86_64/dl-machine.h:467
    0.00 :   12b15:  lea    0x1e414(%rip),%rdi        # 30f30 <__PRETTY_FUNCTION__.0+0x120>
    0.00 :   12b1c:  jmp    1233b <_dl_relocate_object+0x15db>
         : 2381  ./elf/../sysdeps/x86_64/dl-machine.h:426
    0.00 :   12b21:  mov    %r11,%rdi
    0.00 :   12b24:  mov    %r10,-0xf8(%rbp)
    0.00 :   12b2b:  mov    %r11,-0xb8(%rbp)
    0.00 :   12b32:  call   10b30 <_dl_allocate_static_tls>
         : 2386  ./elf/../sysdeps/x86_64/dl-machine.h:432
    0.00 :   12b37:  mov    -0xb8(%rbp),%r11
         : 2388  ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   12b3e:  mov    -0x78(%rbp),%rax
         : 2390  ./elf/../sysdeps/x86_64/dl-machine.h:432
    0.00 :   12b42:  mov    -0xf8(%rbp),%r10
    0.00 :   12b49:  mov    0x458(%r11),%rdx
    0.00 :   12b50:  jmp    118ea <_dl_relocate_object+0xb8a>
    0.00 :   12b55:  mov    %rsi,%rdx
    0.00 :   12b58:  mov    %r15,%r9
    0.00 :   12b5b:  jmp    11c46 <_dl_relocate_object+0xee6>
         : 2397  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   12b60:  mov    0x418(%r15),%r9d
    0.00 :   12b67:  test   %r9d,%r9d
    0.00 :   12b6a:  jne    120c1 <_dl_relocate_object+0x1361>
    0.00 :   12b70:  mov    0x428(%r15),%rdx
    0.00 :   12b77:  addq   $0x1,0x27f61(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12b7f:  mov    0x420(%r15),%rcx
    0.00 :   12b86:  mov    %rdx,-0x78(%rbp)
    0.00 :   12b8a:  jmp    1213e <_dl_relocate_object+0x13de>
         : 2406  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12b8f:  mov    %r11,%rdi
    0.00 :   12b92:  mov    $0x1,%esi
    0.00 :   12b97:  mov    %r10,-0xf8(%rbp)
    0.00 :   12b9e:  mov    %r11,-0xb8(%rbp)
    0.00 :   12ba5:  call   10a10 <_dl_try_allocate_static_tls>
         : 2412  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   12baa:  mov    -0x78(%rbp),%rdx
         : 2414  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12bae:  mov    -0xb8(%rbp),%r11
    0.00 :   12bb5:  test   %eax,%eax
    0.00 :   12bb7:  mov    -0xf8(%rbp),%r10
    0.00 :   12bbe:  jne    129b7 <_dl_relocate_object+0x1c57>
         : 2419  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   12bc4:  mov    0x458(%r11),%rcx
    0.00 :   12bcb:  jmp    11980 <_dl_relocate_object+0xc20>
         : 2422  ./elf/../sysdeps/x86_64/dl-machine.h:294
    0.00 :   12bd0:  cmpl   $0x1,0x418(%r15)
    0.00 :   12bd8:  jne    111ef <_dl_relocate_object+0x48f>
    0.00 :   12bde:  mov    0x428(%r15),%rdx
    0.00 :   12be5:  addq   $0x1,0x27ef3(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12bed:  mov    0x420(%r15),%r9
    0.00 :   12bf4:  mov    %rdx,-0x78(%rbp)
    0.00 :   12bf8:  jmp    1128b <_dl_relocate_object+0x52b>
         : 2430  elf_dynamic_do_Rela():
         : 2431  ./elf/do-rel.h:195
    0.00 :   12bfd:  cmpl   $0x1,0x418(%r15)
    0.00 :   12c05:  jne    121c9 <_dl_relocate_object+0x1469>
    0.00 :   12c0b:  mov    0x428(%r15),%rdx
    0.00 :   12c12:  addq   $0x1,0x27ec6(%rip)        # 3aae0 <_rtld_global+0xaa0>
    0.00 :   12c1a:  mov    0x420(%r15),%r8
    0.00 :   12c21:  mov    %rdx,-0x80(%rbp)
    0.00 :   12c25:  jmp    12249 <_dl_relocate_object+0x14e9>
         : 2439  elf_machine_runtime_setup():
         : 2440  ./elf/../sysdeps/x86_64/dl-machine.h:98
    0.00 :   12c2a:  lea    0x25ff(%rip),%rdx        # 15230 <_dl_runtime_profile_avx512>
         : 2442  ./elf/../sysdeps/x86_64/dl-machine.h:97
    0.00 :   12c31:  testb  $0x1,0x26f62(%rip)        # 39b9a <_rtld_global_ro+0xba>
    0.00 :   12c38:  jne    12c53 <_dl_relocate_object+0x1ef3>
         : 2445  ./elf/../sysdeps/x86_64/dl-machine.h:100
    0.00 :   12c3a:  testb  $0x10,0x26f3e(%rip)        # 39b7f <_rtld_global_ro+0x9f>
    0.00 :   12c41:  lea    0x2e08(%rip),%rdx        # 15a50 <_dl_runtime_profile_sse>
    0.00 :   12c48:  lea    0x29f1(%rip),%rcx        # 15640 <_dl_runtime_profile_avx>
    0.00 :   12c4f:  cmovne %rcx,%rdx
         : 2450  ./elf/../sysdeps/x86_64/dl-machine.h:104
    0.00 :   12c53:  mov    0x27146(%rip),%rdi        # 39da0 <_rtld_global_ro+0x2c0>
         : 2452  ./elf/../sysdeps/x86_64/dl-machine.h:98
    0.00 :   12c5a:  mov    %rdx,0x10(%rax)
         : 2454  ./elf/../sysdeps/x86_64/dl-machine.h:104
    0.00 :   12c5e:  mov    $0x1,%r13d
    0.00 :   12c64:  test   %rdi,%rdi
    0.00 :   12c67:  je     10ec0 <_dl_relocate_object+0x160>
         : 2458  ./elf/../sysdeps/x86_64/dl-machine.h:105
    0.00 :   12c6d:  mov    %r14,%rsi
    0.00 :   12c70:  call   d690 <_dl_name_match_p>
    0.00 :   12c75:  test   %eax,%eax
    0.00 :   12c77:  je     10ec0 <_dl_relocate_object+0x160>
         : 2463  ./elf/../sysdeps/x86_64/dl-machine.h:108
    0.00 :   12c7d:  mov    %r14,0x27e4c(%rip)        # 3aad0 <_rtld_global+0xa90>
    0.00 :   12c84:  jmp    10ec0 <_dl_relocate_object+0x160>
         : 2466  elf_machine_rela():
         : 2467  ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   12c89:  movzbl 0x4(%rdx),%eax
    0.00 :   12c8d:  jmp    11c46 <_dl_relocate_object+0xee6>
         : 2470  ./elf/../sysdeps/x86_64/dl-machine.h:404
    0.00 :   12c92:  mov    0x10(%rbx),%rsi
    0.00 :   12c96:  mov    %r11,%rdi
    0.00 :   12c99:  add    0x8(%rcx),%rsi
    0.00 :   12c9d:  mov    %r10,-0xa8(%rbp)
    0.00 :   12ca4:  call   17de0 <_dl_make_tlsdesc_dynamic>
    0.00 :   12ca9:  mov    -0xa8(%rbp),%r10
    0.00 :   12cb0:  mov    %rax,0x8(%r10)
         : 2478  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   12cb4:  lea    0x5475(%rip),%rax        # 18130 <_dl_tlsdesc_dynamic>
    0.00 :   12cbb:  mov    %rax,(%r10)
         : 2481  elf_dynamic_do_Rela():
         : 2482  ./elf/do-rel.h:191
    0.00 :   12cbe:  mov    0x8(%rbx),%eax
         : 2484  elf_machine_rela():
         : 2485  ./elf/../sysdeps/x86_64/dl-machine.h:406
    0.00 :   12cc1:  jmp    1200a <_dl_relocate_object+0x12aa>
         : 2487  ./elf/../sysdeps/x86_64/dl-machine.h:426
    0.00 :   12cc6:  mov    %r11,%rdi
    0.00 :   12cc9:  mov    %r10,-0xc0(%rbp)
    0.00 :   12cd0:  mov    %r11,-0xa8(%rbp)
    0.00 :   12cd7:  call   10b30 <_dl_allocate_static_tls>
         : 2492  ./elf/../sysdeps/x86_64/dl-machine.h:432
    0.00 :   12cdc:  mov    -0xa8(%rbp),%r11
         : 2494  ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   12ce3:  mov    -0x78(%rbp),%rax
         : 2496  ./elf/../sysdeps/x86_64/dl-machine.h:432
    0.00 :   12ce7:  mov    -0xc0(%rbp),%r10
    0.00 :   12cee:  mov    0x458(%r11),%rdx
    0.00 :   12cf5:  jmp    122e5 <_dl_relocate_object+0x1585>
         : 2500  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12cfa:  mov    %r11,%rdi
    0.00 :   12cfd:  mov    $0x1,%esi
    0.00 :   12d02:  mov    %r10,-0xc0(%rbp)
    0.00 :   12d09:  mov    %r11,-0xa8(%rbp)
    0.00 :   12d10:  call   10a10 <_dl_try_allocate_static_tls>
         : 2506  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   12d15:  mov    -0x78(%rbp),%rcx
         : 2508  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12d19:  mov    -0xa8(%rbp),%r11
    0.00 :   12d20:  test   %eax,%eax
    0.00 :   12d22:  mov    -0xc0(%rbp),%r10
    0.00 :   12d29:  jne    12c92 <_dl_relocate_object+0x1f32>
         : 2513  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   12d2f:  mov    0x458(%r11),%rdx
    0.00 :   12d36:  jmp    122a2 <_dl_relocate_object+0x1542>
         : 2516  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   12d3b:  mov    0x10(%rbx),%rax
    0.00 :   12d3f:  add    (%r15),%rax
         : 2519  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12d42:  jmp    116eb <_dl_relocate_object+0x98b>
         : 2521  ./elf/../sysdeps/x86_64/dl-machine.h:507
    0.00 :   12d47:  mov    0x10(%rbx),%rax
    0.00 :   12d4b:  add    (%r15),%rax
         : 2524  ./elf/../sysdeps/x86_64/dl-machine.h:508
    0.00 :   12d4e:  jmp    1215a <_dl_relocate_object+0x13fa>
         : 2526  _dl_relocate_object():
         : 2527  ./elf/dl-reloc.c:201
    0.00 :   12d53:  movq   $0x0,-0xf0(%rbp)
    0.00 :   12d5e:  jmp    10e4b <_dl_relocate_object+0xeb>
         : 2530  ./elf/dl-reloc.c:254
    0.00 :   12d63:  movzwl 0x2b8(%r14),%edx
    0.00 :   12d6b:  mov    0x2a8(%r14),%rcx
         : 2533  ./elf/dl-reloc.c:240
    0.00 :   12d72:  xor    %r13d,%r13d
         : 2535  ./elf/dl-reloc.c:254
    0.00 :   12d75:  lea    0x0(,%rdx,8),%rax
    0.00 :   12d7d:  sub    %rdx,%rax
    0.00 :   12d80:  lea    (%rcx,%rax,8),%rax
    0.00 :   12d84:  cmp    %rax,%rcx
    0.00 :   12d87:  jb     12789 <_dl_relocate_object+0x1a29>
         : 2541  ./elf/dl-reloc.c:201
    0.00 :   12d8d:  movq   $0x0,-0xf0(%rbp)
    0.00 :   12d98:  jmp    10ec0 <_dl_relocate_object+0x160>
    0.00 :   12d9d:  nopl   (%rax)
         : 2545  ./elf/dl-reloc.c:242
    0.00 :   12da0:  xor    %r13d,%r13d
         : 2547  ./elf/dl-reloc.c:243
    0.00 :   12da3:  lea    0x1c13f(%rip),%rdx        # 2eee9 <__PRETTY_FUNCTION__.2+0x57b>
    0.00 :   12daa:  jmp    128bb <_dl_relocate_object+0x1b5b>
         : 2550  elf_machine_rela():
         : 2551  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12daf:  mov    %r9,%rdi
    0.00 :   12db2:  mov    $0x1,%esi
    0.00 :   12db7:  mov    %r11,-0x98(%rbp)
    0.00 :   12dbe:  mov    %r10,-0x90(%rbp)
    0.00 :   12dc5:  mov    %r9,-0x88(%rbp)
    0.00 :   12dcc:  call   10a10 <_dl_try_allocate_static_tls>
         : 2558  ./elf/../sysdeps/x86_64/dl-machine.h:405
    0.00 :   12dd1:  mov    -0x78(%rbp),%rdx
         : 2560  ./elf/../sysdeps/x86_64/dl-machine.h:402
    0.00 :   12dd5:  mov    -0x88(%rbp),%r9
    0.00 :   12ddc:  test   %eax,%eax
    0.00 :   12dde:  mov    -0x90(%rbp),%r10
    0.00 :   12de5:  mov    -0x98(%rbp),%r11
    0.00 :   12dec:  jne    12976 <_dl_relocate_object+0x1c16>
         : 2566  ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   12df2:  mov    0x458(%r9),%rcx
    0.00 :   12df9:  jmp    11c8e <_dl_relocate_object+0xf2e>
         : 2569  elf_machine_rela_relative():
         : 2570  ./elf/../sysdeps/x86_64/dl-machine.h:534
    0.00 :   12dfe:  lea    0x1ccab(%rip),%rcx        # 2fab0 <__PRETTY_FUNCTION__.2>
    0.00 :   12e05:  mov    $0x216,%edx
    0.00 :   12e0a:  lea    0x1e2a7(%rip),%rsi        # 310b8 <__PRETTY_FUNCTION__.0+0x2a8>
    0.00 :   12e11:  lea    0x1e2c0(%rip),%rdi        # 310d8 <__PRETTY_FUNCTION__.0+0x2c8>
    0.00 :   12e18:  call   1e460 <__GI___assert_fail>
         : 2576  _dl_relocate_object():
         : 2577  ./elf/dl-reloc.c:322
    0.00 :   12e1d:  lea    0x1e0e4(%rip),%rcx        # 30f08 <__PRETTY_FUNCTION__.0+0xf8>
         : 2579  ./elf/dl-reloc.c:277
    0.00 :   12e24:  mov    0x8(%r14),%rsi
    0.00 :   12e28:  mov    0x28472(%rip),%edi        # 3b2a0 <rtld_errno>
    0.00 :   12e2e:  xor    %edx,%edx
    0.00 :   12e30:  call   2070 <_dl_signal_error@plt>
         : 2584  elf_machine_rela():
         : 2585  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   12e35:  test   %rsi,%rsi
    0.00 :   12e38:  je     12e63 <_dl_relocate_object+0x2103>
    0.00 :   12e3a:  mov    %rdx,%rcx
    0.00 :   12e3d:  lea    0x1e1bc(%rip),%rdi        # 31000 <__PRETTY_FUNCTION__.0+0x1f0>
    0.00 :   12e44:  mov    %r8,%rdx
    0.00 :   12e47:  xor    %eax,%eax
    0.00 :   12e49:  call   ff20 <_dl_fatal_printf>
         : 2593  _dl_relocate_object():
         : 2594  ./elf/dl-reloc.c:275
    0.00 :   12e4e:  lea    0x1e083(%rip),%rcx        # 30ed8 <__PRETTY_FUNCTION__.0+0xc8>
    0.00 :   12e55:  jmp    12e24 <_dl_relocate_object+0x20c4>
         : 2597  ./elf/dl-reloc.c:308
    0.00 :   12e57:  lea    0x1b142(%rip),%rsi        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12e5e:  jmp    11d14 <_dl_relocate_object+0xfb4>
         : 2600  elf_machine_rela():
         : 2601  ./elf/../sysdeps/x86_64/dl-machine.h:310
    0.00 :   12e63:  lea    0x1b136(%rip),%rsi        # 2dfa0 <_sys_errnameidx+0x6a0>
    0.00 :   12e6a:  jmp    12e3a <_dl_relocate_object+0x20da>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (31 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0f80 <__memset_avx2_unaligned_erms>:
         : 6      __memset_avx2_unaligned_erms():
         : 7      ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:181
    0.00 :   1a0f80: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:182
    0.00 :   1a0f84: vmovd  %esi,%xmm0
    0.00 :   1a0f88: mov    %rdi,%rax
    0.00 :   1a0f8b: vpbroadcastb %xmm0,%ymm0
         : 13     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:187
    0.00 :   1a0f90: cmp    $0x20,%rdx
         : 15     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:188
    0.00 :   1a0f94: jb     1a1060 <__memset_avx2_unaligned_erms+0xe0>
         : 17     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:189
    0.00 :   1a0f9a: cmp    $0x40,%rdx
         : 19     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:190
    0.00 :   1a0f9e: ja     1a0fc0 <__memset_avx2_unaligned_erms+0x40>
         : 21     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:193
    0.00 :   1a0fa0: vmovdqu %ymm0,(%rax)
         : 23     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:194
    0.00 :   1a0fa4: vmovdqu %ymm0,-0x20(%rax,%rdx,1)
         : 25     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:195
    0.00 :   1a0faa: vzeroupper
    0.00 :   1a0fad: ret
    0.00 :   1a0fae: xchg   %ax,%ax
         : 29     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:204
    0.00 :   1a0fb0: vmovdqu %ymm0,-0x40(%rdi)
         : 31     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:205
    9.63 :   1a0fb5: vmovdqu %ymm0,-0x20(%rdi)
         : 33     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:207
    6.48 :   1a0fba: vzeroupper
    0.00 :   1a0fbd: ret
    0.00 :   1a0fbe: xchg   %ax,%ax
         : 37     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:259
    0.00 :   1a0fc0: cmp    0x79429(%rip),%rdx        # 21a3f0 <__x86_rep_stosb_threshold>
         : 39     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:260
    0.00 :   1a0fc7: ja     1a1040 <__memset_avx2_unaligned_erms+0xc0>
         : 41     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:283
    0.00 :   1a0fc9: vmovdqu %ymm0,(%rax)
         : 43     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:284
   48.43 :   1a0fcd: vmovdqu %ymm0,0x20(%rax)
         : 45     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:289
    0.00 :   1a0fd2: add    %rdx,%rdi
         : 47     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:292
    0.00 :   1a0fd5: cmp    $0x80,%rdx
         : 49     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:293
    0.00 :   1a0fdc: jbe    1a0fb0 <__memset_avx2_unaligned_erms+0x30>
         : 51     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:296
    0.00 :   1a0fde: vmovdqu %ymm0,0x40(%rax)
         : 53     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:297
    0.00 :   1a0fe3: vmovdqu %ymm0,0x60(%rax)
         : 55     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:310
    3.24 :   1a0fe8: add    $0xffffffffffffff80,%rdi
         : 57     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:311
    0.00 :   1a0fec: cmp    $0x100,%rdx
         : 59     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:313
    0.00 :   1a0ff3: jbe    1a1020 <__memset_avx2_unaligned_erms+0xa0>
         : 61     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:316
    0.00 :   1a0ff5: lea    0x80(%rax),%rdx
         : 63     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:319
    0.00 :   1a0ffc: and    $0xffffffffffffffc0,%rdx
         : 65     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:322
    0.00 :   1a1000: vmovdqa %ymm0,(%rdx)
         : 67     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:323
    0.00 :   1a1004: vmovdqa %ymm0,0x20(%rdx)
         : 69     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:324
    0.00 :   1a1009: vmovdqa %ymm0,0x40(%rdx)
         : 71     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:325
    0.00 :   1a100e: vmovdqa %ymm0,0x60(%rdx)
         : 73     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:326
    0.00 :   1a1013: sub    $0xffffffffffffff80,%rdx
         : 75     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:327
    0.00 :   1a1017: cmp    %rdi,%rdx
         : 77     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:328
    0.00 :   1a101a: jb     1a1000 <__memset_avx2_unaligned_erms+0x80>
    0.00 :   1a101c: nopl   0x0(%rax)
         : 80     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:331
    0.00 :   1a1020: vmovdqu %ymm0,(%rdi)
         : 82     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:332
    0.00 :   1a1024: vmovdqu %ymm0,0x20(%rdi)
         : 84     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:333
    0.00 :   1a1029: vmovdqu %ymm0,0x40(%rdi)
         : 86     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:334
    0.00 :   1a102e: vmovdqu %ymm0,0x60(%rdi)
         : 88     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:337
    0.00 :   1a1033: vzeroupper
    0.00 :   1a1036: ret
    0.00 :   1a1037: nopw   0x0(%rax,%rax,1)
         : 92     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:348
    0.00 :   1a1040: movzbl %sil,%eax
         : 94     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:349
    0.00 :   1a1044: mov    %rdx,%rcx
         : 96     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:350
    0.00 :   1a1047: mov    %rdi,%rdx
         : 98     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:351
    0.00 :   1a104a: rep stos %al,%es:(%rdi)
         : 100    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:352
    0.00 :   1a104c: mov    %rdx,%rax
         : 102    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:353
    0.00 :   1a104f: vzeroupper
    0.00 :   1a1052: ret
    0.00 :   1a1053: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1a105e: xchg   %ax,%ax
         : 107    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:365
    0.00 :   1a1060: cmp    $0x10,%edx
         : 109    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:366
    9.72 :   1a1063: jae    1a1082 <__memset_avx2_unaligned_erms+0x102>
         : 111    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:368
    0.00 :   1a1065: vmovq  %xmm0,%rdi
         : 113    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:369
    3.21 :   1a106a: cmp    $0x8,%edx
         : 115    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:370
    0.00 :   1a106d: jae    1a1090 <__memset_avx2_unaligned_erms+0x110>
         : 117    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:371
    0.00 :   1a106f: cmp    $0x4,%edx
         : 119    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:372
    0.00 :   1a1072: jae    1a10a0 <__memset_avx2_unaligned_erms+0x120>
         : 121    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:373
    0.00 :   1a1074: cmp    $0x1,%edx
         : 123    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:374
    0.00 :   1a1077: ja     1a10b0 <__memset_avx2_unaligned_erms+0x130>
         : 125    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:375
    0.00 :   1a1079: jb     1a1033 <__memset_avx2_unaligned_erms+0xb3>
         : 127    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:376
    0.00 :   1a107b: mov    %sil,(%rax)
         : 129    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:377
    0.00 :   1a107e: vzeroupper
    0.00 :   1a1081: ret
         : 132    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:394
    0.00 :   1a1082: vmovdqu %xmm0,(%rax)
         : 134    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:395
   12.81 :   1a1086: vmovdqu %xmm0,-0x10(%rax,%rdx,1)
         : 136    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:396
    6.47 :   1a108c: vzeroupper
    0.00 :   1a108f: ret
         : 139    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:402
    0.00 :   1a1090: mov    %rdi,(%rax)
         : 141    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:403
    0.00 :   1a1093: mov    %rdi,-0x8(%rax,%rdx,1)
         : 143    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:404
    0.00 :   1a1098: vzeroupper
    0.00 :   1a109b: ret
    0.00 :   1a109c: nopl   0x0(%rax)
         : 147    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:409
    0.00 :   1a10a0: mov    %edi,(%rax)
         : 149    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:410
    0.00 :   1a10a2: mov    %edi,-0x4(%rax,%rdx,1)
         : 151    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:411
    0.00 :   1a10a6: vzeroupper
    0.00 :   1a10a9: ret
    0.00 :   1a10aa: nopw   0x0(%rax,%rax,1)
         : 155    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:416
    0.00 :   1a10b0: mov    %di,(%rax)
         : 157    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:417
    0.00 :   1a10b3: mov    %dil,-0x1(%rax,%rdx,1)
         : 159    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:418
    0.00 :   1a10b8: vzeroupper
    0.00 :   1a10bb: ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (31 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      00000000001a0730 <__memcpy_avx_unaligned>:
         : 6      __memmove_avx_unaligned():
         : 7      ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:212
    9.82 :   1a0730: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:213
    6.51 :   1a0734: mov    %rdi,%rax
         : 11     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:219
    6.51 :   1a0737: cmp    $0x20,%rdx
         : 13     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:220
    0.00 :   1a073b: jb     1a07f0 <__memcpy_avx_unaligned_erms+0x30>
         : 15     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:222
    0.00 :   1a0741: vmovdqu (%rsi),%ymm0
         : 17     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:223
   42.45 :   1a0745: cmp    $0x40,%rdx
         : 19     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:224
    0.00 :   1a0749: ja     1a088d <__memcpy_avx_unaligned_erms+0xcd>
         : 21     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:226
    0.00 :   1a074f: vmovdqu -0x20(%rsi,%rdx,1),%ymm1
         : 23     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:227
   21.71 :   1a0755: vmovdqu %ymm0,(%rdi)
         : 25     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:228
    0.00 :   1a0759: vmovdqu %ymm1,-0x20(%rdi,%rdx,1)
         : 27     ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:232
   13.00 :   1a075f: vzeroupper
    0.00 :   1a0762: ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (29 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a39b0 <_int_malloc>:
         : 6     checked_request2size():
         : 7     ./malloc/malloc.c:1343
    0.00 :   a39b0:  test   %rsi,%rsi
    0.00 :   a39b3:  js     a4090 <_int_malloc+0x6e0>
         : 10    _int_malloc():
         : 11    ./malloc/malloc.c:3771
    0.00 :   a39b9:  push   %r15
         : 13    checked_request2size():
         : 14    ./malloc/malloc.c:1362
    0.00 :   a39bb:  lea    0x17(%rsi),%rax
         : 16    _int_malloc():
         : 17    ./malloc/malloc.c:3771
    0.00 :   a39bf:  push   %r14
    0.00 :   a39c1:  push   %r13
    0.00 :   a39c3:  push   %r12
    0.00 :   a39c5:  push   %rbp
    0.00 :   a39c6:  mov    %rsi,%rbp
    0.00 :   a39c9:  push   %rbx
    0.00 :   a39ca:  mov    %rdi,%rbx
    0.00 :   a39cd:  sub    $0x98,%rsp
         : 26    checked_request2size():
         : 27    ./malloc/malloc.c:1362
    0.00 :   a39d4:  cmp    $0x1f,%rax
    0.00 :   a39d8:  ja     a3af8 <_int_malloc+0x148>
         : 30    _int_malloc():
         : 31    ./malloc/malloc.c:3811
    0.00 :   a39de:  test   %rdi,%rdi
    0.00 :   a39e1:  je     a4050 <_int_malloc+0x6a0>
         : 34    ./malloc/malloc.c:3838
    0.00 :   a39e7:  cmpq   $0x1f,0x17db11(%rip)        # 221500 <global_max_fast>
    0.00 :   a39ef:  ja     a3be0 <_int_malloc+0x230>
    0.00 :   a39f5:  mov    $0x80,%edx
    0.00 :   a39fa:  mov    $0x2,%r14d
         : 39    checked_request2size():
         : 40    ./malloc/malloc.c:1362
    0.00 :   a3a00:  mov    $0x20,%r13d
         : 42    _int_malloc():
         : 43    ./malloc/malloc.c:3904
    0.00 :   a3a06:  add    %rbx,%rdx
         : 45    ./malloc/malloc.c:3906
    0.00 :   a3a09:  mov    0x8(%rdx),%rax
         : 47    ./malloc/malloc.c:3904
    6.38 :   a3a0d:  lea    -0x10(%rdx),%rsi
         : 49    ./malloc/malloc.c:3906
    0.00 :   a3a11:  cmp    %rax,%rsi
    0.00 :   a3a14:  je     a3de8 <_int_malloc+0x438>
         : 52    ./malloc/malloc.c:3908
    0.00 :   a3a1a:  mov    0x18(%rax),%rcx
         : 54    ./malloc/malloc.c:3909
    3.89 :   a3a1e:  cmp    %rax,0x10(%rcx)
   15.52 :   a3a22:  jne    a4570 <_int_malloc+0xbc0>
         : 57    ./malloc/malloc.c:3915
    0.00 :   a3a28:  lea    0x177251(%rip),%r9        # 21ac80 <main_arena>
         : 59    ./malloc/malloc.c:3911
    0.00 :   a3a2f:  orq    $0x1,0x8(%rax,%r13,1)
         : 61    ./malloc/malloc.c:3912
    0.00 :   a3a35:  mov    %rcx,0x8(%rdx)
         : 63    ./malloc/malloc.c:3913
    0.00 :   a3a39:  mov    %rsi,0x10(%rcx)
         : 65    ./malloc/malloc.c:3915
    0.00 :   a3a3d:  cmp    %r9,%rbx
    0.00 :   a3a40:  je     a3a47 <_int_malloc+0x97>
         : 68    ./malloc/malloc.c:3916
    0.00 :   a3a42:  orq    $0x4,0x8(%rax)
         : 70    ./malloc/malloc.c:3922
    0.00 :   a3a47:  mov    0x17635a(%rip),%rdi        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a3a4e:  mov    %fs:(%rdi),%r8
    0.00 :   a3a52:  test   %r8,%r8
    3.88 :   a3a55:  je     a40a8 <_int_malloc+0x6f8>
         : 75    ./malloc/malloc.c:3921 (discriminator 1)
    0.00 :   a3a5b:  lea    -0x11(%r13),%rdi
    0.00 :   a3a5f:  shr    $0x4,%rdi
         : 78    ./malloc/malloc.c:3922 (discriminator 1)
    0.00 :   a3a63:  cmp    %rdi,0x17695e(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3a6a:  jbe    a40a8 <_int_malloc+0x6f8>
         : 81    tcache_put():
         : 82    ./malloc/malloc.c:3181
    0.00 :   a3a70:  mov    0x17da61(%rip),%r14        # 2214d8 <tcache_key>
         : 84    _int_malloc():
         : 85    ./malloc/malloc.c:3927
    0.00 :   a3a77:  mov    0x17695a(%rip),%r11        # 21a3d8 <mp_+0x78>
         : 87    tcache_put():
         : 88    ./malloc/malloc.c:3183
    0.00 :   a3a7e:  lea    0x10(%rdi),%r15
         : 90    _int_malloc():
         : 91    ./malloc/malloc.c:3927
    0.00 :   a3a82:  movzwl (%r8,%rdi,2),%r10d
         : 93    tcache_put():
         : 94    ./malloc/malloc.c:3181
    0.00 :   a3a87:  mov    %r14,(%rsp)
         : 96    _int_malloc():
         : 97    ./malloc/malloc.c:3927
    0.00 :   a3a8b:  movzwl %r10w,%r12d
    0.00 :   a3a8f:  cmp    %r11,%r12
    0.00 :   a3a92:  jae    a40a8 <_int_malloc+0x6f8>
         : 101   ./malloc/malloc.c:3928
    0.00 :   a3a98:  cmp    %rcx,%rsi
    0.00 :   a3a9b:  je     a40a8 <_int_malloc+0x6f8>
         : 104   ./malloc/malloc.c:3932
    0.00 :   a3aa1:  mov    0x18(%rcx),%r12
         : 106   ./malloc/malloc.c:3933
    0.00 :   a3aa5:  orq    $0x1,0x8(%rcx,%r13,1)
         : 108   ./malloc/malloc.c:3934
    0.00 :   a3aab:  cmp    %r9,%rbx
    0.00 :   a3aae:  je     a3ab5 <_int_malloc+0x105>
         : 111   ./malloc/malloc.c:3935
    0.00 :   a3ab0:  orq    $0x4,0x8(%rcx)
         : 113   tcache_put():
         : 114   ./malloc/malloc.c:3181
    0.00 :   a3ab5:  mov    (%rsp),%r14
         : 116   _int_malloc():
         : 117   ./malloc/malloc.c:3936
    0.00 :   a3ab9:  mov    %r12,0x8(%rdx)
         : 119   tcache_put():
         : 120   ./malloc/malloc.c:3185
    0.00 :   a3abd:  add    $0x1,%r10d
         : 122   _int_malloc():
         : 123   ./malloc/malloc.c:3937
    0.00 :   a3ac1:  mov    %rsi,0x10(%r12)
         : 125   tcache_put():
         : 126   ./malloc/malloc.c:3181
    0.00 :   a3ac6:  mov    %r14,0x18(%rcx)
         : 128   ./malloc/malloc.c:3183
    0.00 :   a3aca:  lea    0x10(%rcx),%r14
    0.00 :   a3ace:  mov    %r14,0x8(%rsp)
    0.00 :   a3ad3:  shr    $0xc,%r14
    0.00 :   a3ad7:  xor    (%r8,%r15,8),%r14
    0.00 :   a3adb:  mov    %r14,0x10(%rcx)
         : 134   ./malloc/malloc.c:3177
    0.00 :   a3adf:  mov    0x8(%rsp),%r14
         : 136   ./malloc/malloc.c:3186
    0.00 :   a3ae4:  mov    %r12,%rcx
         : 138   ./malloc/malloc.c:3177
    0.00 :   a3ae7:  mov    %r14,(%r8,%r15,8)
         : 140   ./malloc/malloc.c:3185
    0.00 :   a3aeb:  mov    %r10w,(%r8,%rdi,2)
         : 142   ./malloc/malloc.c:3186
    0.00 :   a3af0:  jmp    a3a8b <_int_malloc+0xdb>
    0.00 :   a3af2:  nopw   0x0(%rax,%rax,1)
         : 145   checked_request2size():
         : 146   ./malloc/malloc.c:1362
    0.00 :   a3af8:  and    $0xfffffffffffffff0,%rax
    0.00 :   a3afc:  mov    %rax,%r13
         : 149   _int_malloc():
         : 150   ./malloc/malloc.c:3811
    0.00 :   a3aff:  test   %rdi,%rdi
    3.86 :   a3b02:  je     a4056 <_int_malloc+0x6a6>
         : 153   ./malloc/malloc.c:4397
    0.00 :   a3b08:  mov    %eax,%r14d
    0.00 :   a3b0b:  shr    $0x4,%r14d
         : 156   ./malloc/malloc.c:3838
    0.00 :   a3b0f:  cmp    0x17d9ea(%rip),%rax        # 221500 <global_max_fast>
    0.00 :   a3b16:  jbe    a3d60 <_int_malloc+0x3b0>
         : 159   ./malloc/malloc.c:3901
    0.00 :   a3b1c:  cmp    $0x3ff,%rax
    0.00 :   a3b22:  jbe    a4558 <_int_malloc+0xba8>
         : 162   ./malloc/malloc.c:3963
    0.00 :   a3b28:  mov    $0x2,%edx
    0.00 :   a3b2d:  mov    %rax,%rcx
    0.00 :   a3b30:  mov    %rax,%rdi
    0.00 :   a3b33:  mov    %rax,%rsi
    0.00 :   a3b36:  shr    $0xc,%rsi
    0.00 :   a3b3a:  mov    %rax,%r15
    0.00 :   a3b3d:  shr    $0x12,%rax
    0.00 :   a3b41:  shr    $0xf,%r15
    0.00 :   a3b45:  shr    $0x6,%rcx
    0.00 :   a3b49:  lea    0x6e(%rsi),%r9d
    0.00 :   a3b4d:  mov    %rsi,0x68(%rsp)
    0.00 :   a3b52:  shr    $0x9,%rdi
    0.00 :   a3b56:  cmp    %rdx,%rax
    0.00 :   a3b59:  lea    0x77(%r15),%r10d
    0.00 :   a3b5d:  mov    %r15,0x70(%rsp)
    0.00 :   a3b62:  cmova  %rdx,%rax
    0.00 :   a3b66:  mov    %r15,%rdx
    0.00 :   a3b69:  lea    0x5b(%rdi),%r15d
    0.00 :   a3b6d:  mov    %rcx,0x50(%rsp)
    0.00 :   a3b72:  mov    %rdi,0x60(%rsp)
    0.00 :   a3b77:  lea    0x7c(%rax),%r11d
    0.00 :   a3b7b:  mov    %rsi,%rax
    0.00 :   a3b7e:  mov    %ecx,%esi
    0.00 :   a3b80:  mov    %r10d,0x7c(%rsp)
    0.00 :   a3b85:  add    $0x30,%esi
    0.00 :   a3b88:  mov    %r11d,0x78(%rsp)
    0.00 :   a3b8d:  mov    %r9d,0x80(%rsp)
    0.00 :   a3b95:  mov    %r15d,0x84(%rsp)
    0.00 :   a3b9d:  mov    %esi,0x5c(%rsp)
    0.00 :   a3ba1:  mov    %esi,0x24(%rsp)
    0.00 :   a3ba5:  cmp    $0x30,%rcx
    0.00 :   a3ba9:  jbe    a3bc8 <_int_malloc+0x218>
         : 195   ./malloc/malloc.c:3963 (discriminator 2)
    0.00 :   a3bab:  mov    %r15d,0x24(%rsp)
    0.00 :   a3bb0:  cmp    $0x14,%rdi
    0.00 :   a3bb4:  jbe    a3bc8 <_int_malloc+0x218>
         : 199   ./malloc/malloc.c:3963 (discriminator 5)
    0.00 :   a3bb6:  mov    %r9d,0x24(%rsp)
    0.00 :   a3bbb:  cmp    $0xa,%rax
    0.00 :   a3bbf:  ja     a4318 <_int_malloc+0x968>
    0.00 :   a3bc5:  nopl   (%rax)
         : 204   ./malloc/malloc.c:3964 (discriminator 16)
    0.00 :   a3bc8:  mov    0x8(%rbx),%eax
    3.89 :   a3bcb:  test   %eax,%eax
    0.00 :   a3bcd:  je     a3e43 <_int_malloc+0x493>
         : 208   ./malloc/malloc.c:3965
    0.00 :   a3bd3:  mov    %rbx,%rdi
    0.00 :   a3bd6:  call   a17f0 <malloc_consolidate>
    0.00 :   a3bdb:  jmp    a3e43 <_int_malloc+0x493>
    0.00 :   a3be0:  xor    %eax,%eax
         : 213   ./malloc/malloc.c:3838
    0.00 :   a3be2:  mov    $0x10,%ecx
    0.00 :   a3be7:  mov    $0x2,%r14d
         : 216   checked_request2size():
         : 217   ./malloc/malloc.c:1362
    0.00 :   a3bed:  mov    $0x20,%r13d
         : 219   _int_malloc():
         : 220   ./malloc/malloc.c:3843
    0.00 :   a3bf3:  lea    (%rbx,%rax,8),%rdi
    0.00 :   a3bf7:  mov    0x10(%rdi),%rdx
         : 223   ./malloc/malloc.c:3845
    0.00 :   a3bfb:  test   %rdx,%rdx
    0.00 :   a3bfe:  je     a3d7d <_int_malloc+0x3cd>
         : 226   ./malloc/malloc.c:3847
    0.00 :   a3c04:  test   $0xf,%dl
    0.00 :   a3c07:  jne    a4420 <_int_malloc+0xa70>
         : 229   ./malloc/malloc.c:3841 (discriminator 4)
    0.00 :   a3c0d:  add    %rbx,%rcx
         : 231   ./malloc/malloc.c:3850 (discriminator 4)
    0.00 :   a3c10:  mov    %fs:0x18,%esi
         : 233   ./malloc/malloc.c:3851 (discriminator 4)
    0.00 :   a3c18:  mov    0x10(%rdx),%rax
         : 235   ./malloc/malloc.c:3850 (discriminator 4)
    6.88 :   a3c1c:  test   %esi,%esi
    0.00 :   a3c1e:  jne    a3d44 <_int_malloc+0x394>
         : 238   ./malloc/malloc.c:3851
    0.00 :   a3c24:  lea    0x10(%rdx),%r9
    0.00 :   a3c28:  mov    %r9,%rsi
    0.00 :   a3c2b:  shr    $0xc,%rsi
    0.00 :   a3c2f:  xor    %rsi,%rax
    0.00 :   a3c32:  mov    %rax,0x10(%rdi)
         : 244   ./malloc/malloc.c:3856
    0.00 :   a3c36:  mov    0x8(%rdx),%rax
    0.00 :   a3c3a:  shr    $0x4,%eax
         : 247   ./malloc/malloc.c:3857
    0.00 :   a3c3d:  cmp    %r14d,%eax
    0.00 :   a3c40:  jne    a4440 <_int_malloc+0xa90>
         : 250   ./malloc/malloc.c:3864
    0.00 :   a3c46:  mov    0x17615b(%rip),%r12        # 219da8 <_DYNAMIC+0x1e8>
         : 252   ./malloc/malloc.c:3863
    0.00 :   a3c4d:  lea    -0x11(%r13),%r11
    0.00 :   a3c51:  shr    $0x4,%r11
         : 255   ./malloc/malloc.c:3864
    0.00 :   a3c55:  mov    %fs:(%r12),%rax
    3.09 :   a3c5a:  test   %rax,%rax
    0.00 :   a3c5d:  je     a406c <_int_malloc+0x6bc>
         : 259   ./malloc/malloc.c:3864 (discriminator 1)
    0.00 :   a3c63:  cmp    %r11,0x17675e(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3c6a:  jbe    a406c <_int_malloc+0x6bc>
         : 262   ./malloc/malloc.c:3869
    0.00 :   a3c70:  movzwl (%rax,%r11,2),%eax
         : 264   ./malloc/malloc.c:3870
    0.00 :   a3c75:  cmp    0x17675c(%rip),%rax        # 21a3d8 <mp_+0x78>
         : 266   tcache_put():
         : 267   ./malloc/malloc.c:3183
    0.00 :   a3c7c:  lea    0x10(%r11),%rbx
         : 269   _int_malloc():
         : 270   ./malloc/malloc.c:3870
    0.00 :   a3c80:  jb     a3cdb <_int_malloc+0x32b>
    0.00 :   a3c82:  jmp    a406c <_int_malloc+0x6bc>
    0.00 :   a3c87:  nopw   0x0(%rax,%rax,1)
         : 274   ./malloc/malloc.c:3875
    0.00 :   a3c90:  lea    0x10(%rdx),%r10
    0.00 :   a3c94:  mov    %r10,%rsi
    0.00 :   a3c97:  shr    $0xc,%rsi
    0.00 :   a3c9b:  xor    %rsi,%rax
    0.00 :   a3c9e:  mov    %rax,0x10(%rdi)
         : 280   tcache_put():
         : 281   ./malloc/malloc.c:3181
    0.00 :   a3ca2:  mov    0x17d82f(%rip),%rax        # 2214d8 <tcache_key>
    0.00 :   a3ca9:  mov    %rax,0x18(%rdx)
         : 284   ./malloc/malloc.c:3183
    0.00 :   a3cad:  mov    %fs:(%r12),%r8
         : 286   ./malloc/malloc.c:3185
    0.00 :   a3cb2:  movzwl (%r8,%r11,2),%eax
         : 288   ./malloc/malloc.c:3183
    0.00 :   a3cb7:  xor    (%r8,%rbx,8),%rsi
    0.00 :   a3cbb:  mov    %rsi,0x10(%rdx)
         : 291   ./malloc/malloc.c:3185
    0.00 :   a3cbf:  add    $0x1,%eax
         : 293   ./malloc/malloc.c:3177
    0.00 :   a3cc2:  mov    %r10,(%r8,%rbx,8)
         : 295   ./malloc/malloc.c:3185
    0.00 :   a3cc6:  mov    %ax,(%r8,%r11,2)
         : 297   _int_malloc():
         : 298   ./malloc/malloc.c:3869
    0.00 :   a3ccb:  movzwl %ax,%eax
         : 300   ./malloc/malloc.c:3870
    0.00 :   a3cce:  cmp    0x176703(%rip),%rax        # 21a3d8 <mp_+0x78>
    0.00 :   a3cd5:  jae    a406c <_int_malloc+0x6bc>
         : 303   ./malloc/malloc.c:3870 (discriminator 1)
    0.00 :   a3cdb:  mov    0x10(%rdi),%rdx
    0.00 :   a3cdf:  test   %rdx,%rdx
    0.00 :   a3ce2:  je     a406c <_int_malloc+0x6bc>
         : 307   ./malloc/malloc.c:3872
    0.00 :   a3ce8:  test   $0xf,%dl
    0.00 :   a3ceb:  jne    a4360 <_int_malloc+0x9b0>
         : 310   ./malloc/malloc.c:3874 (discriminator 4)
    0.00 :   a3cf1:  mov    %fs:0x18,%esi
         : 312   ./malloc/malloc.c:3875 (discriminator 4)
    0.00 :   a3cf9:  mov    0x10(%rdx),%rax
         : 314   ./malloc/malloc.c:3874 (discriminator 4)
    0.00 :   a3cfd:  test   %esi,%esi
    0.00 :   a3cff:  je     a3c90 <_int_malloc+0x2e0>
    0.00 :   a3d01:  jmp    a3dc8 <_int_malloc+0x418>
    0.00 :   a3d06:  cs nopw 0x0(%rax,%rax,1)
         : 319   ./malloc/malloc.c:3853 (discriminator 3)
    0.00 :   a3d10:  test   $0xf,%sil
    0.00 :   a3d14:  jne    a4350 <_int_malloc+0x9a0>
    0.00 :   a3d1a:  nopw   0x0(%rax,%rax,1)
         : 323   ./malloc/malloc.c:3853 (discriminator 16)
    0.00 :   a3d20:  mov    %rdx,%rax
    0.00 :   a3d23:  cmpl   $0x0,%fs:0x18
    0.00 :   a3d2c:  je     a3d2f <_int_malloc+0x37f>
    0.00 :   a3d2e:  lock cmpxchg %rsi,(%rcx)
    0.00 :   a3d33:  cmp    %rdx,%rax
    0.00 :   a3d36:  je     a3c36 <_int_malloc+0x286>
         : 330   ./malloc/malloc.c:3853 (discriminator 19)
    0.00 :   a3d3c:  test   %rax,%rax
    0.00 :   a3d3f:  je     a3d7d <_int_malloc+0x3cd>
    0.00 :   a3d41:  mov    %rax,%rdx
         : 334   ./malloc/malloc.c:3853 (discriminator 2)
    0.00 :   a3d44:  lea    0x10(%rdx),%r9
    0.00 :   a3d48:  mov    0x10(%rdx),%rax
    0.00 :   a3d4c:  mov    %r9,%r8
    0.00 :   a3d4f:  shr    $0xc,%r8
    0.00 :   a3d53:  mov    %r8,%rsi
    0.00 :   a3d56:  xor    %rax,%rsi
    0.00 :   a3d59:  cmp    %rax,%r8
    0.00 :   a3d5c:  je     a3d20 <_int_malloc+0x370>
    0.00 :   a3d5e:  jmp    a3d10 <_int_malloc+0x360>
    0.00 :   a3d60:  lea    -0x2(%r14),%eax
    0.00 :   a3d64:  lea    (%rbx,%rax,8),%rdi
    0.00 :   a3d68:  lea    0x10(,%rax,8),%rcx
         : 347   ./malloc/malloc.c:3843
    0.00 :   a3d70:  mov    0x10(%rdi),%rdx
         : 349   ./malloc/malloc.c:3845
    1.99 :   a3d74:  test   %rdx,%rdx
    0.00 :   a3d77:  jne    a3c04 <_int_malloc+0x254>
    0.00 :   a3d7d:  lea    0xc(%r14,%r14,1),%edx
    0.00 :   a3d82:  shl    $0x3,%rdx
    0.00 :   a3d86:  jmp    a3a06 <_int_malloc+0x56>
    0.00 :   a3d8b:  nopl   0x0(%rax,%rax,1)
         : 356   ./malloc/malloc.c:3878 (discriminator 3)
    0.00 :   a3d90:  test   $0xf,%r8b
    0.00 :   a3d94:  jne    a4350 <_int_malloc+0x9a0>
    0.00 :   a3d9a:  nopw   0x0(%rax,%rax,1)
         : 360   ./malloc/malloc.c:3878 (discriminator 16)
    0.00 :   a3da0:  mov    %rdx,%rax
    0.00 :   a3da3:  cmpl   $0x0,%fs:0x18
    0.00 :   a3dac:  je     a3daf <_int_malloc+0x3ff>
    0.00 :   a3dae:  lock cmpxchg %r8,(%rcx)
    0.00 :   a3db3:  cmp    %rdx,%rax
    0.00 :   a3db6:  je     a3ca2 <_int_malloc+0x2f2>
         : 367   ./malloc/malloc.c:3878 (discriminator 19)
    0.00 :   a3dbc:  test   %rax,%rax
    0.00 :   a3dbf:  je     a406c <_int_malloc+0x6bc>
    0.00 :   a3dc5:  mov    %rax,%rdx
         : 371   ./malloc/malloc.c:3878 (discriminator 2)
    0.00 :   a3dc8:  lea    0x10(%rdx),%r10
    0.00 :   a3dcc:  mov    0x10(%rdx),%rax
    0.00 :   a3dd0:  mov    %r10,%rsi
    0.00 :   a3dd3:  shr    $0xc,%rsi
    0.00 :   a3dd7:  mov    %rsi,%r8
    0.00 :   a3dda:  xor    %rax,%r8
    0.00 :   a3ddd:  cmp    %rax,%rsi
    0.00 :   a3de0:  je     a3da0 <_int_malloc+0x3f0>
    0.00 :   a3de2:  jmp    a3d90 <_int_malloc+0x3e0>
    0.00 :   a3de4:  nopl   0x0(%rax)
         : 382   ./malloc/malloc.c:4399
    0.00 :   a3de8:  mov    %r13,%rax
    0.00 :   a3deb:  mov    %r13,%rdi
         : 385   ./malloc/malloc.c:3903
    0.00 :   a3dee:  mov    %r14d,0x24(%rsp)
         : 387   ./malloc/malloc.c:4399
    0.00 :   a3df3:  shr    $0x6,%rax
    0.00 :   a3df7:  shr    $0x9,%rdi
    0.00 :   a3dfb:  movl   $0x6e,0x80(%rsp)
    0.00 :   a3e06:  mov    %rax,0x50(%rsp)
    0.00 :   a3e0b:  add    $0x30,%eax
    0.00 :   a3e0e:  mov    %rdi,0x60(%rsp)
    3.44 :   a3e13:  add    $0x5b,%edi
    0.00 :   a3e16:  mov    %edi,0x84(%rsp)
    0.00 :   a3e1d:  mov    %eax,0x5c(%rsp)
    0.00 :   a3e21:  movl   $0x77,0x7c(%rsp)
    0.00 :   a3e29:  movl   $0x7c,0x78(%rsp)
    0.00 :   a3e31:  movq   $0x0,0x70(%rsp)
    0.00 :   a3e3a:  movq   $0x0,0x68(%rsp)
         : 401   ./malloc/malloc.c:3983
    0.00 :   a3e43:  lea    -0x11(%r13),%rax
         : 403   ./malloc/malloc.c:3984
    0.00 :   a3e47:  mov    0x175f5a(%rip),%r12        # 219da8 <_DYNAMIC+0x1e8>
         : 405   ./malloc/malloc.c:3983
    0.00 :   a3e4e:  shr    $0x4,%rax
    0.00 :   a3e52:  mov    %rax,%r15
         : 408   ./malloc/malloc.c:3982
    0.00 :   a3e55:  xor    %eax,%eax
    0.00 :   a3e57:  mov    %rax,0x8(%rsp)
         : 411   ./malloc/malloc.c:3984
    0.00 :   a3e5c:  cmpq   $0x0,%fs:(%r12)
    0.00 :   a3e62:  je     a3e74 <_int_malloc+0x4c4>
         : 414   ./malloc/malloc.c:3982 (discriminator 1)
    0.00 :   a3e64:  cmp    %r15,0x17655d(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a3e6b:  cmova  %r13,%rax
    0.00 :   a3e6f:  mov    %rax,0x8(%rsp)
         : 418   ./malloc/malloc.c:3994
    0.00 :   a3e74:  lea    0x60(%rbx),%r11
         : 420   ./malloc/malloc.c:3988
    0.00 :   a3e78:  movq   $0x0,(%rsp)
         : 422   ./malloc/malloc.c:4061
    0.00 :   a3e80:  mov    %r14d,0x58(%rsp)
    2.56 :   a3e85:  movq   %r11,%xmm1
    0.00 :   a3e8a:  mov    %rbp,0x28(%rsp)
    0.00 :   a3e8f:  punpcklqdq %xmm1,%xmm1
         : 427   ./malloc/malloc.c:3994
    0.00 :   a3e93:  mov    0x78(%rbx),%rdx
    0.00 :   a3e97:  cmp    %r11,%rdx
    0.00 :   a3e9a:  je     a4228 <_int_malloc+0x878>
         : 431   ./malloc/malloc.c:4158
    0.00 :   a3ea0:  mov    0x176539(%rip),%r8        # 21a3e0 <mp_+0x80>
         : 433   ./malloc/malloc.c:4067
    0.00 :   a3ea7:  mov    0x17652a(%rip),%rax        # 21a3d8 <mp_+0x78>
         : 435   ./malloc/malloc.c:4158
    0.00 :   a3eae:  test   %r8,%r8
    0.00 :   a3eb1:  setne  0x30(%rsp)
         : 438   ./malloc/malloc.c:4067
    0.00 :   a3eb6:  mov    %fs:(%r12),%r14
         : 440   ./malloc/malloc.c:3993
    0.00 :   a3ebb:  xor    %edi,%edi
         : 442   tcache_put():
         : 443   ./malloc/malloc.c:3181
    0.00 :   a3ebd:  xor    %r9d,%r9d
         : 445   _int_malloc():
         : 446   ./malloc/malloc.c:4067
    0.00 :   a3ec0:  mov    %rax,0x10(%rsp)
         : 448   tcache_put():
         : 449   ./malloc/malloc.c:3181
    0.00 :   a3ec5:  mov    0x17d60c(%rip),%rax        # 2214d8 <tcache_key>
    0.00 :   a3ecc:  mov    %rax,0x38(%rsp)
         : 452   _int_malloc():
         : 453   ./malloc/malloc.c:4025
    0.00 :   a3ed1:  lea    0x20(%r13),%rax
    0.00 :   a3ed5:  mov    %rax,0x48(%rsp)
         : 456   tcache_put():
         : 457   ./malloc/malloc.c:3183
    0.00 :   a3eda:  lea    0x10(%r15),%rax
    0.00 :   a3ede:  mov    %rax,0x40(%rsp)
         : 460   _int_malloc():
         : 461   ./malloc/malloc.c:3997
    0.00 :   a3ee3:  mov    0x8(%rdx),%rax
    0.00 :   a3ee7:  movq   %rdx,%xmm0
    0.00 :   a3eec:  punpcklqdq %xmm0,%xmm0
    0.00 :   a3ef0:  and    $0xfffffffffffffff8,%rax
         : 466   ./malloc/malloc.c:3998
    0.00 :   a3ef4:  lea    (%rdx,%rax,1),%r10
         : 468   ./malloc/malloc.c:4000
    0.00 :   a3ef8:  cmp    $0x10,%rax
    0.00 :   a3efc:  jbe    a40d0 <_int_malloc+0x720>
         : 471   ./malloc/malloc.c:4001
    0.00 :   a3f02:  mov    0x888(%rbx),%rsi
    0.00 :   a3f09:  cmp    %rax,%rsi
    0.00 :   a3f0c:  jb     a40d0 <_int_malloc+0x720>
         : 475   ./malloc/malloc.c:4003
    0.00 :   a3f12:  mov    0x8(%r10),%rcx
         : 477   ./malloc/malloc.c:4004
    3.79 :   a3f16:  cmp    $0xf,%rcx
    3.74 :   a3f1a:  jbe    a40e0 <_int_malloc+0x730>
    0.00 :   a3f20:  cmp    %rcx,%rsi
    0.00 :   a3f23:  jb     a40e0 <_int_malloc+0x730>
         : 482   ./malloc/malloc.c:4006
    0.00 :   a3f29:  mov    (%r10),%rsi
    0.00 :   a3f2c:  and    $0xfffffffffffffff8,%rsi
    0.00 :   a3f30:  cmp    %rax,%rsi
    0.00 :   a3f33:  jne    a4370 <_int_malloc+0x9c0>
         : 487   ./malloc/malloc.c:3996
    0.00 :   a3f39:  mov    0x18(%rdx),%rsi
         : 489   ./malloc/malloc.c:4008
    0.00 :   a3f3d:  cmp    %rdx,0x10(%rsi)
    0.00 :   a3f41:  jne    a42d0 <_int_malloc+0x920>
         : 492   ./malloc/malloc.c:4009
    0.00 :   a3f47:  cmp    %r11,0x10(%rdx)
    0.00 :   a3f4b:  jne    a42d0 <_int_malloc+0x920>
         : 495   ./malloc/malloc.c:4011
    0.00 :   a3f51:  test   $0x1,%cl
    0.00 :   a3f54:  jne    a4430 <_int_malloc+0xa80>
         : 498   ./malloc/malloc.c:4022 (discriminator 1)
    0.00 :   a3f5a:  cmp    $0x3ff,%r13
    0.00 :   a3f61:  ja     a3f6c <_int_malloc+0x5bc>
    0.00 :   a3f63:  cmp    %r11,%rsi
    0.00 :   a3f66:  je     a4380 <_int_malloc+0x9d0>
         : 503   ./malloc/malloc.c:4053
    0.00 :   a3f6c:  mov    %rsi,0x78(%rbx)
         : 505   ./malloc/malloc.c:4054
    0.00 :   a3f70:  mov    %r11,0x10(%rsi)
         : 507   ./malloc/malloc.c:4058
    0.00 :   a3f74:  cmp    %r13,%rax
    0.00 :   a3f77:  je     a40f0 <_int_malloc+0x740>
         : 510   ./malloc/malloc.c:4087
    0.00 :   a3f7d:  cmp    $0x3ff,%rax
    0.00 :   a3f83:  ja     a4138 <_int_malloc+0x788>
         : 513   ./malloc/malloc.c:4089
    0.00 :   a3f89:  mov    %eax,%ecx
    0.00 :   a3f8b:  shr    $0x4,%ecx
         : 516   ./malloc/malloc.c:4090
    0.00 :   a3f8e:  lea    0xc(%rcx,%rcx,1),%eax
    0.00 :   a3f92:  cltq
    0.00 :   a3f94:  lea    (%rbx,%rax,8),%rax
         : 520   ./malloc/malloc.c:4091
    0.00 :   a3f98:  mov    (%rax),%r10
         : 522   ./malloc/malloc.c:4090
    0.00 :   a3f9b:  lea    -0x10(%rax),%rbp
         : 524   ./malloc/malloc.c:4147
    0.00 :   a3f9f:  mov    %ecx,%eax
         : 526   ./malloc/malloc.c:4149
    0.00 :   a3fa1:  movq   %r10,%xmm0
    0.00 :   a3fa6:  movq   %rbp,%xmm2
         : 529   ./malloc/malloc.c:4147
    0.00 :   a3fab:  mov    $0x1,%esi
    0.00 :   a3fb0:  sar    $0x5,%eax
         : 532   ./malloc/malloc.c:4149
    0.00 :   a3fb3:  punpcklqdq %xmm2,%xmm0
         : 534   ./malloc/malloc.c:4156
    0.00 :   a3fb7:  addq   $0x1,(%rsp)
         : 536   ./malloc/malloc.c:4147
    0.00 :   a3fbc:  shl    %cl,%esi
    0.00 :   a3fbe:  cltq
    0.00 :   a3fc0:  or     %esi,0x860(%rbx,%rax,4)
         : 540   ./malloc/malloc.c:4156
    3.81 :   a3fc7:  mov    (%rsp),%rax
         : 542   ./malloc/malloc.c:4149
    0.00 :   a3fcb:  movups %xmm0,0x10(%rdx)
         : 544   ./malloc/malloc.c:4150
    0.00 :   a3fcf:  mov    %rdx,0x18(%r10)
         : 546   ./malloc/malloc.c:4151
    0.00 :   a3fd3:  mov    %rdx,0x10(%rbp)
         : 548   ./malloc/malloc.c:4157
    0.00 :   a3fd7:  test   %r9d,%r9d
    0.00 :   a3fda:  je     a4210 <_int_malloc+0x860>
         : 551   ./malloc/malloc.c:4159
    0.00 :   a3fe0:  cmp    %rax,%r8
    0.00 :   a3fe3:  jae    a4020 <_int_malloc+0x670>
    0.00 :   a3fe5:  cmpb   $0x0,0x30(%rsp)
    0.00 :   a3fea:  je     a4020 <_int_malloc+0x670>
         : 556   tcache_get():
         : 557   ./malloc/malloc.c:3193
    0.00 :   a3fec:  lea    0x10(%r15),%rdx
    0.00 :   a3ff0:  mov    (%r14,%rdx,8),%r9
         : 560   ./malloc/malloc.c:3194
    0.00 :   a3ff4:  test   $0xf,%r9b
    0.00 :   a3ff8:  jne    a48c1 <_int_malloc+0xf11>
         : 563   ./malloc/malloc.c:3196
    0.00 :   a3ffe:  mov    %r9,%rax
    0.00 :   a4001:  shr    $0xc,%rax
    0.00 :   a4005:  xor    (%r9),%rax
    0.00 :   a4008:  mov    %rax,(%r14,%rdx,8)
         : 568   ./malloc/malloc.c:3197
    0.00 :   a400c:  subw   $0x1,(%r14,%r15,2)
         : 570   ./malloc/malloc.c:3198
    0.00 :   a4012:  movq   $0x0,0x8(%r9)
         : 572   _int_malloc():
         : 573   ./malloc/malloc.c:4161
    0.00 :   a401a:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a401c:  nopl   0x0(%rax)
         : 576   ./malloc/malloc.c:4166
    0.00 :   a4020:  add    $0x1,%edi
    0.00 :   a4023:  cmp    $0x270f,%edi
    0.00 :   a4029:  jg     a473d <_int_malloc+0xd8d>
         : 580   ./malloc/malloc.c:3994
    0.00 :   a402f:  mov    0x78(%rbx),%rdx
    0.00 :   a4033:  cmp    %rdx,%r11
    0.00 :   a4036:  je     a473d <_int_malloc+0xd8d>
    0.00 :   a403c:  mov    $0x1,%r9d
    0.00 :   a4042:  jmp    a3ee3 <_int_malloc+0x533>
    0.00 :   a4047:  nopw   0x0(%rax,%rax,1)
         : 587   checked_request2size():
         : 588   ./malloc/malloc.c:1362
    0.00 :   a4050:  mov    $0x20,%r13d
         : 590   _int_malloc():
         : 591   ./malloc/malloc.c:3813
    0.00 :   a4056:  xor    %esi,%esi
    0.00 :   a4058:  mov    %r13,%rdi
    0.00 :   a405b:  call   a30d0 <sysmalloc>
    0.00 :   a4060:  mov    %rax,%r9
         : 596   ./malloc/malloc.c:3814
    0.00 :   a4063:  test   %rax,%rax
    0.00 :   a4066:  je     a4330 <_int_malloc+0x980>
         : 599   alloc_perturb():
         : 600   ./malloc/malloc.c:2005
    0.00 :   a406c:  mov    0x17d48a(%rip),%esi        # 2214fc <perturb_byte>
    0.00 :   a4072:  test   %esi,%esi
    0.00 :   a4074:  jne    a40b6 <_int_malloc+0x706>
         : 604   _int_malloc():
         : 605   ./malloc/malloc.c:4413
    0.00 :   a4076:  add    $0x98,%rsp
    3.00 :   a407d:  mov    %r9,%rax
    0.00 :   a4080:  pop    %rbx
    2.99 :   a4081:  pop    %rbp
    0.00 :   a4082:  pop    %r12
    0.00 :   a4084:  pop    %r13
    0.00 :   a4086:  pop    %r14
    0.00 :   a4088:  pop    %r15
    0.00 :   a408a:  ret
    0.00 :   a408b:  nopl   0x0(%rax,%rax,1)
         : 616   ./malloc/malloc.c:3805
    0.00 :   a4090:  mov    0x175d79(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   a4097:  movl   $0xc,%fs:(%rax)
         : 619   ./malloc/malloc.c:4413
    0.00 :   a409e:  xor    %eax,%eax
    0.00 :   a40a0:  ret
    0.00 :   a40a1:  nopl   0x0(%rax)
         : 623   alloc_perturb():
         : 624   ./malloc/malloc.c:2005
    0.00 :   a40a8:  mov    0x17d44e(%rip),%esi        # 2214fc <perturb_byte>
         : 626   _int_malloc():
         : 627   ./malloc/malloc.c:3944
    0.00 :   a40ae:  lea    0x10(%rax),%r9
         : 629   alloc_perturb():
         : 630   ./malloc/malloc.c:2005
    0.00 :   a40b2:  test   %esi,%esi
    0.00 :   a40b4:  je     a4076 <_int_malloc+0x6c6>
         : 633   ./malloc/malloc.c:2006
    0.00 :   a40b6:  mov    %r9,%rdi
    0.00 :   a40b9:  xor    $0xff,%sil
    0.00 :   a40bd:  mov    %rbp,%rdx
    0.00 :   a40c0:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a40c5:  mov    %rax,%r9
    0.00 :   a40c8:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a40ca:  nopw   0x0(%rax,%rax,1)
         : 641   _int_malloc():
         : 642   ./malloc/malloc.c:4002
    0.00 :   a40d0:  lea    0x13aae9(%rip),%rdi        # 1debc0 <__PRETTY_FUNCTION__.1+0xa80>
    0.00 :   a40d7:  call   a0ce0 <malloc_printerr>
    0.00 :   a40dc:  nopl   0x0(%rax)
         : 646   ./malloc/malloc.c:4005
    0.00 :   a40e0:  lea    0x13ab01(%rip),%rdi        # 1debe8 <__PRETTY_FUNCTION__.1+0xaa8>
    0.00 :   a40e7:  call   a0ce0 <malloc_printerr>
    0.00 :   a40ec:  nopl   0x0(%rax)
         : 650   ./malloc/malloc.c:4060
    0.00 :   a40f0:  or     $0x1,%rcx
         : 652   ./malloc/malloc.c:4061
    0.00 :   a40f4:  lea    0x176b85(%rip),%rax        # 21ac80 <main_arena>
         : 654   ./malloc/malloc.c:4060
    0.00 :   a40fb:  mov    %rcx,0x8(%r10)
         : 656   ./malloc/malloc.c:4061
    0.00 :   a40ff:  cmp    %rax,%rbx
    0.00 :   a4102:  je     a4109 <_int_malloc+0x759>
         : 659   ./malloc/malloc.c:4062
    0.00 :   a4104:  orq    $0x4,0x8(%rdx)
         : 661   ./malloc/malloc.c:4066
    0.00 :   a4109:  cmpq   $0x0,0x8(%rsp)
         : 663   ./malloc/malloc.c:4045
    0.00 :   a410f:  lea    0x10(%rdx),%r9
         : 665   ./malloc/malloc.c:4066
    0.00 :   a4113:  je     a4128 <_int_malloc+0x778>
         : 667   ./malloc/malloc.c:4067
    0.00 :   a4115:  movzwl (%r14,%r15,2),%ecx
    0.00 :   a411a:  mov    %rcx,%rax
    0.00 :   a411d:  cmp    0x10(%rsp),%rcx
    0.00 :   a4122:  jb     a42e0 <_int_malloc+0x930>
         : 672   alloc_perturb():
         : 673   ./malloc/malloc.c:2005
    0.00 :   a4128:  mov    0x28(%rsp),%rbp
    0.00 :   a412d:  jmp    a406c <_int_malloc+0x6bc>
    0.00 :   a4132:  nopw   0x0(%rax,%rax,1)
         : 677   _int_malloc():
         : 678   ./malloc/malloc.c:4095
    0.00 :   a4138:  mov    %rax,%rcx
    0.00 :   a413b:  shr    $0x6,%rcx
    0.00 :   a413f:  add    $0x30,%ecx
    0.00 :   a4142:  cmp    $0xc3f,%rax
    0.00 :   a4148:  jbe    a41a0 <_int_malloc+0x7f0>
         : 684   ./malloc/malloc.c:4095 (discriminator 2)
    0.00 :   a414a:  mov    %rax,%rcx
    0.00 :   a414d:  shr    $0x9,%rcx
    0.00 :   a4151:  add    $0x5b,%ecx
    0.00 :   a4154:  cmp    $0x29ff,%rax
    0.00 :   a415a:  jbe    a41a0 <_int_malloc+0x7f0>
         : 690   ./malloc/malloc.c:4095 (discriminator 5)
    0.00 :   a415c:  mov    %rax,%rcx
    0.00 :   a415f:  shr    $0xc,%rcx
    0.00 :   a4163:  add    $0x6e,%ecx
    0.00 :   a4166:  cmp    $0xafff,%rax
    0.00 :   a416c:  jbe    a41a0 <_int_malloc+0x7f0>
         : 696   ./malloc/malloc.c:4095 (discriminator 8)
    0.00 :   a416e:  mov    %rax,%rcx
    0.00 :   a4171:  shr    $0xf,%rcx
    0.00 :   a4175:  add    $0x77,%ecx
    0.00 :   a4178:  cmp    $0x27fff,%rax
    0.00 :   a417e:  jbe    a41a0 <_int_malloc+0x7f0>
         : 702   ./malloc/malloc.c:4095 (discriminator 11)
    0.00 :   a4180:  mov    %rax,%rcx
    0.00 :   a4183:  mov    $0x2,%esi
    0.00 :   a4188:  shr    $0x12,%rcx
    0.00 :   a418c:  cmp    %rsi,%rcx
    0.00 :   a418f:  cmova  %rsi,%rcx
    0.00 :   a4193:  add    $0x7c,%ecx
    0.00 :   a4196:  cs nopw 0x0(%rax,%rax,1)
         : 710   ./malloc/malloc.c:4096 (discriminator 16)
    0.00 :   a41a0:  lea    0xc(%rcx,%rcx,1),%esi
    0.00 :   a41a4:  movslq %esi,%rsi
    0.00 :   a41a7:  lea    (%rbx,%rsi,8),%rbp
         : 714   ./malloc/malloc.c:4097 (discriminator 16)
    0.00 :   a41ab:  mov    0x0(%rbp),%rsi
         : 716   ./malloc/malloc.c:4096 (discriminator 16)
    7.72 :   a41af:  lea    -0x10(%rbp),%r10
         : 718   ./malloc/malloc.c:4100 (discriminator 16)
    0.00 :   a41b3:  cmp    %rsi,%r10
    0.00 :   a41b6:  je     a4340 <_int_malloc+0x990>
         : 721   ./malloc/malloc.c:4105
    0.00 :   a41bc:  mov    0x8(%rbp),%rbp
         : 723   ./malloc/malloc.c:4103
    0.00 :   a41c0:  or     $0x1,%rax
    0.00 :   a41c4:  mov    %rax,0x88(%rsp)
         : 726   ./malloc/malloc.c:4105
    0.00 :   a41cc:  mov    0x8(%rbp),%rax
    0.00 :   a41d0:  test   $0x4,%al
    0.00 :   a41d2:  jne    a4927 <_int_malloc+0xf77>
         : 730   ./malloc/malloc.c:4106
    0.00 :   a41d8:  cmp    0x88(%rsp),%rax
    0.00 :   a41e0:  jbe    a457c <_int_malloc+0xbcc>
         : 733   ./malloc/malloc.c:4113
    0.00 :   a41e6:  mov    0x28(%rsi),%rax
         : 735   ./malloc/malloc.c:4112
    0.00 :   a41ea:  movq   %rsi,%xmm0
    0.00 :   a41ef:  movq   %rax,%xmm3
    0.00 :   a41f4:  punpcklqdq %xmm3,%xmm0
    0.00 :   a41f8:  movups %xmm0,0x20(%rdx)
         : 740   ./malloc/malloc.c:4114
    0.00 :   a41fc:  mov    %rdx,0x20(%rax)
    0.00 :   a4200:  mov    %rdx,0x28(%rsi)
    0.00 :   a4204:  jmp    a3f9f <_int_malloc+0x5ef>
    0.00 :   a4209:  nopl   0x0(%rax)
         : 745   ./malloc/malloc.c:4166
    0.00 :   a4210:  add    $0x1,%edi
    0.00 :   a4213:  cmp    $0x270f,%edi
    0.00 :   a4219:  jg     a4228 <_int_malloc+0x878>
         : 749   ./malloc/malloc.c:3994
    0.00 :   a421b:  mov    0x78(%rbx),%rdx
    0.00 :   a421f:  cmp    %r11,%rdx
    0.00 :   a4222:  jne    a3ee3 <_int_malloc+0x533>
         : 753   ./malloc/malloc.c:4183
    0.00 :   a4228:  cmp    $0x3ff,%r13
    0.00 :   a422f:  jbe    a4253 <_int_malloc+0x8a3>
         : 756   ./malloc/malloc.c:4185
    0.00 :   a4231:  mov    0x24(%rsp),%eax
    0.00 :   a4235:  lea    0xc(%rax,%rax,1),%eax
    0.00 :   a4239:  lea    (%rbx,%rax,8),%rdx
         : 760   ./malloc/malloc.c:4188
    0.00 :   a423d:  mov    (%rdx),%rax
         : 762   ./malloc/malloc.c:4185
    0.00 :   a4240:  lea    -0x10(%rdx),%rcx
         : 764   ./malloc/malloc.c:4188
    0.00 :   a4244:  cmp    %rcx,%rax
    0.00 :   a4247:  je     a4253 <_int_malloc+0x8a3>
         : 767   ./malloc/malloc.c:4189
    0.00 :   a4249:  cmp    %r13,0x8(%rax)
    0.00 :   a424d:  jae    a4781 <_int_malloc+0xdd1>
         : 770   ./malloc/malloc.c:4256
    3.89 :   a4253:  mov    0x24(%rsp),%eax
    0.00 :   a4257:  lea    0x1(%rax),%ecx
         : 773   ./malloc/malloc.c:4257
    0.00 :   a425a:  lea    0xe(%rax,%rax,1),%eax
         : 775   ./malloc/malloc.c:4258
    0.00 :   a425e:  mov    %ecx,%edi
         : 777   ./malloc/malloc.c:4257
    0.00 :   a4260:  lea    -0x10(%rbx,%rax,8),%rdx
         : 779   ./malloc/malloc.c:4258
    0.00 :   a4265:  shr    $0x5,%edi
         : 781   ./malloc/malloc.c:4259
    0.00 :   a4268:  mov    %edi,%eax
    0.00 :   a426a:  mov    0x860(%rbx,%rax,4),%esi
         : 784   ./malloc/malloc.c:4260
    0.00 :   a4271:  mov    $0x1,%eax
    0.00 :   a4276:  shl    %cl,%eax
    0.00 :   a4278:  nopl   0x0(%rax,%rax,1)
         : 788   ./malloc/malloc.c:4265
    0.00 :   a4280:  cmp    %esi,%eax
    0.00 :   a4282:  ja     a4450 <_int_malloc+0xaa0>
    0.00 :   a4288:  test   %eax,%eax
    0.00 :   a428a:  jne    a42a4 <_int_malloc+0x8f4>
    0.00 :   a428c:  jmp    a4450 <_int_malloc+0xaa0>
    0.00 :   a4291:  nopl   0x0(%rax)
         : 795   ./malloc/malloc.c:4281
    0.00 :   a4298:  add    $0x10,%rdx
         : 797   ./malloc/malloc.c:4283
    0.00 :   a429c:  add    %eax,%eax
    0.00 :   a429e:  je     a471e <_int_malloc+0xd6e>
         : 800   ./malloc/malloc.c:4279
    0.00 :   a42a4:  test   %esi,%eax
    0.00 :   a42a6:  je     a4298 <_int_malloc+0x8e8>
         : 803   ./malloc/malloc.c:4287
    0.00 :   a42a8:  mov    0x18(%rdx),%rcx
         : 805   ./malloc/malloc.c:4290
    2.83 :   a42ac:  cmp    %rcx,%rdx
    0.00 :   a42af:  jne    a45fe <_int_malloc+0xc4e>
         : 808   ./malloc/malloc.c:4292
    0.00 :   a42b5:  mov    %eax,%ecx
         : 810   ./malloc/malloc.c:4293
    0.00 :   a42b7:  add    $0x10,%rdx
         : 812   ./malloc/malloc.c:4294
    0.00 :   a42bb:  add    %eax,%eax
         : 814   ./malloc/malloc.c:4292
    0.00 :   a42bd:  not    %ecx
    0.00 :   a42bf:  and    %ecx,%esi
    0.00 :   a42c1:  mov    %edi,%ecx
    0.00 :   a42c3:  mov    %esi,0x860(%rbx,%rcx,4)
         : 819   ./malloc/malloc.c:4265
    0.00 :   a42ca:  jmp    a4280 <_int_malloc+0x8d0>
    0.00 :   a42cc:  nopl   0x0(%rax)
         : 822   ./malloc/malloc.c:4010
    0.00 :   a42d0:  lea    0x13a971(%rip),%rdi        # 1dec48 <__PRETTY_FUNCTION__.1+0xb08>
    0.00 :   a42d7:  call   a0ce0 <malloc_printerr>
    0.00 :   a42dc:  nopl   0x0(%rax)
         : 826   tcache_put():
         : 827   ./malloc/malloc.c:3181
    0.00 :   a42e0:  mov    0x38(%rsp),%rcx
         : 829   ./malloc/malloc.c:3183
    0.00 :   a42e5:  mov    0x40(%rsp),%r10
         : 831   ./malloc/malloc.c:3185
    0.00 :   a42ea:  add    $0x1,%eax
         : 833   ./malloc/malloc.c:3181
    0.00 :   a42ed:  mov    %rcx,0x18(%rdx)
         : 835   ./malloc/malloc.c:3183
    0.00 :   a42f1:  mov    %r9,%rcx
    0.00 :   a42f4:  shr    $0xc,%rcx
    0.00 :   a42f8:  xor    (%r14,%r10,8),%rcx
    0.00 :   a42fc:  mov    %rcx,0x10(%rdx)
         : 840   _int_malloc():
         : 841   ./malloc/malloc.c:4071
    0.00 :   a4300:  mov    %rsi,%rdx
         : 843   tcache_put():
         : 844   ./malloc/malloc.c:3184
    0.00 :   a4303:  mov    %r9,(%r14,%r10,8)
         : 846   ./malloc/malloc.c:3185
    0.00 :   a4307:  mov    %ax,(%r14,%r15,2)
         : 848   _int_malloc():
         : 849   ./malloc/malloc.c:4071
    0.00 :   a430c:  jmp    a4033 <_int_malloc+0x683>
    0.00 :   a4311:  nopl   0x0(%rax)
         : 852   ./malloc/malloc.c:3963 (discriminator 8)
    0.00 :   a4318:  cmp    $0x5,%rdx
    0.00 :   a431c:  cmovb  %r10d,%r11d
    0.00 :   a4320:  mov    %r11d,0x24(%rsp)
    0.00 :   a4325:  jmp    a3bc8 <_int_malloc+0x218>
    0.00 :   a432a:  nopw   0x0(%rax,%rax,1)
         : 858   ./malloc/malloc.c:3806
    0.00 :   a4330:  xor    %r9d,%r9d
    0.00 :   a4333:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a4338:  nopl   0x0(%rax,%rax,1)
         : 862   ./malloc/malloc.c:4144
    0.00 :   a4340:  movups %xmm0,0x20(%rdx)
    0.00 :   a4344:  mov    %r10,%rbp
    0.00 :   a4347:  jmp    a3f9f <_int_malloc+0x5ef>
    0.00 :   a434c:  nopl   0x0(%rax)
         : 867   ./malloc/malloc.c:3853 (discriminator 5)
    0.00 :   a4350:  lea    0x13a7b1(%rip),%rdi        # 1deb08 <__PRETTY_FUNCTION__.1+0x9c8>
    0.00 :   a4357:  call   a0ce0 <malloc_printerr>
    0.00 :   a435c:  nopl   0x0(%rax)
         : 871   ./malloc/malloc.c:3873
    0.00 :   a4360:  lea    0x13a7f9(%rip),%rdi        # 1deb60 <__PRETTY_FUNCTION__.1+0xa20>
    0.00 :   a4367:  call   a0ce0 <malloc_printerr>
    0.00 :   a436c:  nopl   0x0(%rax)
         : 875   ./malloc/malloc.c:4007
    0.00 :   a4370:  lea    0x13a899(%rip),%rdi        # 1dec10 <__PRETTY_FUNCTION__.1+0xad0>
    0.00 :   a4377:  call   a0ce0 <malloc_printerr>
    0.00 :   a437c:  nopl   0x0(%rax)
         : 879   ./malloc/malloc.c:4023
    0.00 :   a4380:  cmp    %rdx,0x68(%rbx)
    0.00 :   a4384:  jne    a3f6c <_int_malloc+0x5bc>
         : 882   ./malloc/malloc.c:4024
    0.00 :   a438a:  cmp    %rax,0x48(%rsp)
    0.00 :   a438f:  jae    a3f6c <_int_malloc+0x5bc>
         : 885   ./malloc/malloc.c:4029
    0.00 :   a4395:  lea    (%rdx,%r13,1),%rsi
         : 887   ./malloc/malloc.c:4028
    0.00 :   a4399:  sub    %r13,%rax
    0.00 :   a439c:  mov    0x28(%rsp),%rbp
         : 890   ./malloc/malloc.c:4031
    0.00 :   a43a1:  movq   %rsi,%xmm0
         : 892   ./malloc/malloc.c:4030
    0.00 :   a43a6:  mov    %rsi,0x78(%rbx)
         : 894   ./malloc/malloc.c:4031
    0.00 :   a43aa:  punpcklqdq %xmm0,%xmm0
    0.00 :   a43ae:  movups %xmm0,0x68(%rbx)
         : 897   ./malloc/malloc.c:4032
    0.00 :   a43b2:  movups %xmm1,0x10(%rsi)
         : 899   ./malloc/malloc.c:4033
    0.00 :   a43b6:  cmp    $0x3ff,%rax
    0.00 :   a43bc:  jbe    a43c6 <_int_malloc+0xa16>
         : 902   ./malloc/malloc.c:4035
    0.00 :   a43be:  pxor   %xmm0,%xmm0
    0.00 :   a43c2:  movups %xmm0,0x20(%rsi)
         : 905   ./malloc/malloc.c:4039
    0.00 :   a43c6:  lea    0x1768b3(%rip),%rcx        # 21ac80 <main_arena>
         : 907   ./malloc/malloc.c:4045
    0.00 :   a43cd:  lea    0x10(%rdx),%r9
         : 909   ./malloc/malloc.c:4039
    0.00 :   a43d1:  cmp    %rcx,%rbx
    0.00 :   a43d4:  setne  %cl
    0.00 :   a43d7:  movzbl %cl,%ecx
    0.00 :   a43da:  shl    $0x2,%rcx
    0.00 :   a43de:  or     %r13,%rcx
    0.00 :   a43e1:  or     $0x1,%rcx
    0.00 :   a43e5:  mov    %rcx,0x8(%rdx)
         : 917   ./malloc/malloc.c:4041
    0.00 :   a43e9:  mov    %rax,%rcx
    0.00 :   a43ec:  or     $0x1,%rcx
    0.00 :   a43f0:  mov    %rcx,0x8(%rsi)
         : 921   ./malloc/malloc.c:4042
    0.00 :   a43f4:  mov    %rax,(%r10)
         : 923   alloc_perturb():
         : 924   ./malloc/malloc.c:2005
    0.00 :   a43f7:  mov    0x17d0ff(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a43fd:  test   %eax,%eax
    0.00 :   a43ff:  je     a4076 <_int_malloc+0x6c6>
         : 928   ./malloc/malloc.c:2006
    0.00 :   a4405:  xor    $0xff,%al
    0.00 :   a4407:  mov    %r9,%rdi
    0.00 :   a440a:  mov    %rbp,%rdx
    0.00 :   a440d:  mov    %eax,%esi
    0.00 :   a440f:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a4414:  mov    %rax,%r9
    0.00 :   a4417:  jmp    a4076 <_int_malloc+0x6c6>
    0.00 :   a441c:  nopl   0x0(%rax)
         : 937   _int_malloc():
         : 938   ./malloc/malloc.c:3848
    0.00 :   a4420:  lea    0x13a6b1(%rip),%rdi        # 1dead8 <__PRETTY_FUNCTION__.1+0x998>
    0.00 :   a4427:  call   a0ce0 <malloc_printerr>
    0.00 :   a442c:  nopl   0x0(%rax)
         : 942   ./malloc/malloc.c:4012
    0.00 :   a4430:  lea    0x13a841(%rip),%rdi        # 1dec78 <__PRETTY_FUNCTION__.1+0xb38>
    0.00 :   a4437:  call   a0ce0 <malloc_printerr>
    0.00 :   a443c:  nopl   0x0(%rax)
         : 946   ./malloc/malloc.c:3858
    0.00 :   a4440:  lea    0x13a6f1(%rip),%rdi        # 1deb38 <__PRETTY_FUNCTION__.1+0x9f8>
    0.00 :   a4447:  call   a0ce0 <malloc_printerr>
    0.00 :   a444c:  nopl   0x0(%rax)
         : 950   ./malloc/malloc.c:4269
    0.00 :   a4450:  lea    0x1(%rdi),%eax
    0.00 :   a4453:  cmp    $0x3,%edi
    0.00 :   a4456:  je     a4495 <_int_malloc+0xae5>
         : 954   ./malloc/malloc.c:4272
    0.00 :   a4458:  mov    %eax,%edx
    0.00 :   a445a:  mov    0x860(%rbx,%rdx,4),%esi
    0.00 :   a4461:  test   %esi,%esi
    0.00 :   a4463:  jne    a46cd <_int_malloc+0xd1d>
         : 959   ./malloc/malloc.c:4269
    0.00 :   a4469:  lea    0x2(%rdi),%eax
    0.00 :   a446c:  cmp    $0x2,%edi
    0.00 :   a446f:  je     a4495 <_int_malloc+0xae5>
         : 963   ./malloc/malloc.c:4272
    0.00 :   a4471:  mov    %eax,%edx
    0.00 :   a4473:  mov    0x860(%rbx,%rdx,4),%esi
    0.00 :   a447a:  test   %esi,%esi
    0.00 :   a447c:  jne    a46cd <_int_malloc+0xd1d>
         : 968   ./malloc/malloc.c:4269
    0.00 :   a4482:  cmp    $0x1,%edi
    0.00 :   a4485:  je     a4495 <_int_malloc+0xae5>
         : 971   ./malloc/malloc.c:4272
    0.00 :   a4487:  mov    0x86c(%rbx),%esi
    3.17 :   a448d:  test   %esi,%esi
    0.00 :   a448f:  jne    a46fe <_int_malloc+0xd4e>
         : 975   ./malloc/malloc.c:4369
    0.00 :   a4495:  mov    0x60(%rbx),%rax
         : 977   ./malloc/malloc.c:4370
    0.00 :   a4499:  mov    0x8(%rax),%rdx
    0.00 :   a449d:  and    $0xfffffffffffffff8,%rdx
         : 980   ./malloc/malloc.c:4372
    0.00 :   a44a1:  cmp    %rdx,0x888(%rbx)
    0.00 :   a44a8:  jb     a46e6 <_int_malloc+0xd36>
         : 983   ./malloc/malloc.c:4375
    0.00 :   a44ae:  lea    0x20(%r13),%rcx
    0.00 :   a44b2:  cmp    %rdx,%rcx
    2.73 :   a44b5:  jbe    a4873 <_int_malloc+0xec3>
    0.00 :   a44bb:  mov    %r11,0x30(%rsp)
    0.00 :   a44c0:  movaps %xmm1,0x10(%rsp)
         : 989   ./malloc/malloc.c:4392 (discriminator 3)
    0.00 :   a44c5:  mov    0x8(%rbx),%eax
    0.00 :   a44c8:  test   %eax,%eax
    0.00 :   a44ca:  je     a48cd <_int_malloc+0xf1d>
         : 993   ./malloc/malloc.c:4394
    0.00 :   a44d0:  mov    %rbx,%rdi
    0.00 :   a44d3:  call   a17f0 <malloc_consolidate>
         : 996   ./malloc/malloc.c:4397
    0.00 :   a44d8:  mov    0x58(%rsp),%eax
         : 998   ./malloc/malloc.c:4396
    0.00 :   a44dc:  movdqa 0x10(%rsp),%xmm1
    0.00 :   a44e2:  cmp    $0x3ff,%r13
    0.00 :   a44e9:  mov    0x30(%rsp),%r11
         : 1002  ./malloc/malloc.c:4397
    0.00 :   a44ee:  mov    %eax,0x24(%rsp)
         : 1004  ./malloc/malloc.c:4396
    0.00 :   a44f2:  jbe    a3e93 <_int_malloc+0x4e3>
         : 1006  ./malloc/malloc.c:4399
    0.00 :   a44f8:  mov    0x5c(%rsp),%eax
    0.00 :   a44fc:  cmpq   $0x30,0x50(%rsp)
    0.00 :   a4502:  mov    %eax,0x24(%rsp)
    0.00 :   a4506:  jbe    a3e93 <_int_malloc+0x4e3>
         : 1011  ./malloc/malloc.c:4399 (discriminator 2)
    0.00 :   a450c:  mov    0x84(%rsp),%eax
    0.00 :   a4513:  cmpq   $0x14,0x60(%rsp)
    0.00 :   a4519:  mov    %eax,0x24(%rsp)
    0.00 :   a451d:  jbe    a3e93 <_int_malloc+0x4e3>
         : 1016  ./malloc/malloc.c:4399 (discriminator 5)
    0.00 :   a4523:  mov    0x80(%rsp),%eax
    0.00 :   a452a:  cmpq   $0xa,0x68(%rsp)
    0.00 :   a4530:  mov    %eax,0x24(%rsp)
    0.00 :   a4534:  jbe    a3e93 <_int_malloc+0x4e3>
         : 1021  ./malloc/malloc.c:4399 (discriminator 8)
    0.00 :   a453a:  mov    0x7c(%rsp),%eax
    0.00 :   a453e:  cmpq   $0x4,0x70(%rsp)
    0.00 :   a4544:  cmova  0x78(%rsp),%eax
    0.00 :   a4549:  mov    %eax,0x24(%rsp)
    0.00 :   a454d:  jmp    a3e93 <_int_malloc+0x4e3>
    0.00 :   a4552:  nopw   0x0(%rax,%rax,1)
         : 1028  ./malloc/malloc.c:3904
    0.00 :   a4558:  lea    -0x2(%r14,%r14,1),%eax
    0.00 :   a455d:  lea    0x70(,%rax,8),%rdx
    0.00 :   a4565:  jmp    a3a06 <_int_malloc+0x56>
    0.00 :   a456a:  nopw   0x0(%rax,%rax,1)
         : 1033  ./malloc/malloc.c:3910
    0.00 :   a4570:  lea    0x13a619(%rip),%rdi        # 1deb90 <__PRETTY_FUNCTION__.1+0xa50>
    0.00 :   a4577:  call   a0ce0 <malloc_printerr>
         : 1036  ./malloc/malloc.c:4118
    0.00 :   a457c:  mov    0x8(%rsi),%r10
    0.00 :   a4580:  test   $0x4,%r10b
    0.00 :   a4584:  jne    a48fc <_int_malloc+0xf4c>
    0.00 :   a458a:  mov    0x88(%rsp),%rax
    0.00 :   a4592:  jmp    a45aa <_int_malloc+0xbfa>
    0.00 :   a4594:  nopl   0x0(%rax)
         : 1043  ./malloc/malloc.c:4121
    0.00 :   a4598:  mov    0x20(%rsi),%rsi
         : 1045  ./malloc/malloc.c:4122
    0.00 :   a459c:  mov    0x8(%rsi),%r10
    0.00 :   a45a0:  test   $0x4,%r10b
    0.00 :   a45a4:  jne    a4854 <_int_malloc+0xea4>
         : 1049  ./malloc/malloc.c:4119
    0.00 :   a45aa:  cmp    %r10,%rax
    0.00 :   a45ad:  jb     a4598 <_int_malloc+0xbe8>
         : 1052  ./malloc/malloc.c:4125
    0.00 :   a45af:  je     a45f8 <_int_malloc+0xc48>
         : 1054  ./malloc/malloc.c:4131
    0.00 :   a45b1:  movq   %rsi,%xmm0
    0.00 :   a45b6:  movhps 0x28(%rsi),%xmm0
    0.00 :   a45ba:  movups %xmm0,0x20(%rdx)
         : 1058  ./malloc/malloc.c:4133
    0.00 :   a45be:  mov    0x28(%rsi),%rax
    0.00 :   a45c2:  cmp    %rsi,0x20(%rax)
    0.00 :   a45c6:  jne    a46f2 <_int_malloc+0xd42>
         : 1062  ./malloc/malloc.c:4135
    0.00 :   a45cc:  mov    %rdx,0x28(%rsi)
         : 1064  ./malloc/malloc.c:4136
    0.00 :   a45d0:  mov    0x28(%rdx),%rax
    0.00 :   a45d4:  mov    %rsi,%r10
    0.00 :   a45d7:  mov    %rdx,0x20(%rax)
         : 1068  ./malloc/malloc.c:4138
    0.00 :   a45db:  mov    0x18(%r10),%rbp
         : 1070  ./malloc/malloc.c:4139
    0.00 :   a45df:  cmp    %r10,0x10(%rbp)
    0.00 :   a45e3:  je     a3f9f <_int_malloc+0x5ef>
         : 1073  ./malloc/malloc.c:4140
    0.00 :   a45e9:  lea    0x13a6f8(%rip),%rdi        # 1dece8 <__PRETTY_FUNCTION__.1+0xba8>
    0.00 :   a45f0:  call   a0ce0 <malloc_printerr>
    0.00 :   a45f5:  nopl   (%rax)
         : 1077  ./malloc/malloc.c:4128
    0.00 :   a45f8:  mov    0x10(%rsi),%r10
    0.00 :   a45fc:  jmp    a45db <_int_malloc+0xc2b>
         : 1080  ./malloc/malloc.c:4299
    0.00 :   a45fe:  mov    0x8(%rcx),%r14
    3.84 :   a4602:  mov    0x28(%rsp),%rbp
    0.00 :   a4607:  and    $0xfffffffffffffff8,%r14
         : 1084  ./malloc/malloc.c:4302
    0.00 :   a460b:  cmp    %r13,%r14
    0.00 :   a460e:  jb     a4966 <_int_malloc+0xfb6>
         : 1087  ./malloc/malloc.c:4304
    0.00 :   a4614:  mov    %r14,%r12
         : 1089  ./malloc/malloc.c:4307
    0.00 :   a4617:  mov    %rcx,%rdi
    0.00 :   a461a:  mov    %r11,0x8(%rsp)
         : 1092  ./malloc/malloc.c:4304
    0.00 :   a461f:  sub    %r13,%r12
         : 1094  ./malloc/malloc.c:4307
    0.00 :   a4622:  mov    %rcx,(%rsp)
    0.00 :   a4626:  call   a1710 <unlink_chunk.constprop.0>
         : 1097  ./malloc/malloc.c:4310
    0.00 :   a462b:  cmp    $0x1f,%r12
    0.00 :   a462f:  mov    (%rsp),%rcx
    0.00 :   a4633:  mov    0x8(%rsp),%r11
    0.00 :   a4638:  jbe    a4705 <_int_malloc+0xd55>
         : 1102  ./malloc/malloc.c:4325
    0.00 :   a463e:  mov    0x70(%rbx),%rax
    3.14 :   a4642:  movq   %r11,%xmm5
         : 1105  ./malloc/malloc.c:4320
    0.00 :   a4647:  lea    (%rcx,%r13,1),%rdx
         : 1107  ./malloc/malloc.c:4325
    0.00 :   a464b:  movq   %rax,%xmm0
    0.00 :   a4650:  punpcklqdq %xmm5,%xmm0
         : 1110  ./malloc/malloc.c:4326
    0.00 :   a4654:  cmp    %r11,0x18(%rax)
    0.00 :   a4658:  jne    a4775 <_int_malloc+0xdc5>
         : 1113  ./malloc/malloc.c:4329
    0.00 :   a465e:  movups %xmm0,0x10(%rdx)
         : 1115  ./malloc/malloc.c:4330
    0.00 :   a4662:  mov    %rdx,0x70(%rbx)
         : 1117  ./malloc/malloc.c:4331
    0.00 :   a4666:  mov    %rdx,0x18(%rax)
         : 1119  ./malloc/malloc.c:4334
    0.00 :   a466a:  cmp    $0x3ff,%r13
    0.00 :   a4671:  ja     a4677 <_int_malloc+0xcc7>
         : 1122  ./malloc/malloc.c:4335
    0.00 :   a4673:  mov    %rdx,0x68(%rbx)
         : 1124  ./malloc/malloc.c:4336
    0.00 :   a4677:  cmp    $0x3ff,%r12
    0.00 :   a467e:  jbe    a4688 <_int_malloc+0xcd8>
         : 1127  ./malloc/malloc.c:4338
    0.00 :   a4680:  pxor   %xmm0,%xmm0
    0.00 :   a4684:  movups %xmm0,0x20(%rdx)
         : 1130  ./malloc/malloc.c:4341
    0.00 :   a4688:  lea    0x1765f1(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a468f:  cmp    %rax,%rbx
    0.00 :   a4692:  setne  %al
    0.00 :   a4695:  movzbl %al,%eax
    0.00 :   a4698:  shl    $0x2,%rax
    0.00 :   a469c:  or     %r13,%rax
    0.00 :   a469f:  or     $0x1,%rax
    0.00 :   a46a3:  mov    %rax,0x8(%rcx)
         : 1139  ./malloc/malloc.c:4343
    0.00 :   a46a7:  mov    %r12,%rax
    0.00 :   a46aa:  or     $0x1,%rax
    0.00 :   a46ae:  mov    %rax,0x8(%rdx)
         : 1143  ./malloc/malloc.c:4344
    0.00 :   a46b2:  mov    %r12,(%rcx,%r14,1)
         : 1145  alloc_perturb():
         : 1146  ./malloc/malloc.c:2005
    0.00 :   a46b6:  mov    0x17ce40(%rip),%eax        # 2214fc <perturb_byte>
         : 1148  _int_malloc():
         : 1149  ./malloc/malloc.c:4347
    0.00 :   a46bc:  lea    0x10(%rcx),%r9
         : 1151  alloc_perturb():
         : 1152  ./malloc/malloc.c:2005
    0.00 :   a46c0:  test   %eax,%eax
    0.00 :   a46c2:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a46c8:  jmp    a4405 <_int_malloc+0xa55>
         : 1156  _int_malloc():
         : 1157  ./malloc/malloc.c:4272
    0.00 :   a46cd:  mov    %eax,%edi
         : 1159  ./malloc/malloc.c:4274
    0.00 :   a46cf:  mov    %edi,%eax
    0.00 :   a46d1:  shl    $0x6,%eax
    0.00 :   a46d4:  add    $0xc,%eax
    0.00 :   a46d7:  lea    -0x10(%rbx,%rax,8),%rdx
         : 1164  ./malloc/malloc.c:4275
    0.00 :   a46dc:  mov    $0x1,%eax
    0.00 :   a46e1:  jmp    a42a4 <_int_malloc+0x8f4>
         : 1167  ./malloc/malloc.c:4373
    0.00 :   a46e6:  lea    0x1350ff(%rip),%rdi        # 1d97ec <null+0xf71>
    0.00 :   a46ed:  call   a0ce0 <malloc_printerr>
         : 1170  ./malloc/malloc.c:4134
    0.00 :   a46f2:  lea    0x13a5af(%rip),%rdi        # 1deca8 <__PRETTY_FUNCTION__.1+0xb68>
    0.00 :   a46f9:  call   a0ce0 <malloc_printerr>
         : 1173  ./malloc/malloc.c:4272
    0.00 :   a46fe:  mov    $0x3,%edi
    0.00 :   a4703:  jmp    a46cf <_int_malloc+0xd1f>
         : 1176  ./malloc/malloc.c:4313
    0.00 :   a4705:  lea    0x176574(%rip),%rax        # 21ac80 <main_arena>
         : 1178  ./malloc/malloc.c:4312
    0.00 :   a470c:  orq    $0x1,0x8(%rcx,%r14,1)
         : 1180  ./malloc/malloc.c:4313
    0.00 :   a4712:  cmp    %rax,%rbx
    0.00 :   a4715:  je     a46b6 <_int_malloc+0xd06>
         : 1183  ./malloc/malloc.c:4314
    0.00 :   a4717:  orq    $0x4,0x8(%rcx)
    0.00 :   a471c:  jmp    a46b6 <_int_malloc+0xd06>
         : 1186  ./malloc/malloc.c:4283 (discriminator 1)
    0.00 :   a471e:  lea    0x13aae3(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a4725:  mov    $0x10bb,%edx
    0.00 :   a472a:  lea    0x134f5b(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4731:  lea    0x1350ab(%rip),%rdi        # 1d97e3 <null+0xf68>
    0.00 :   a4738:  call   a0e70 <__malloc_assert>
         : 1192  tcache_get():
         : 1193  ./malloc/malloc.c:3193
    0.00 :   a473d:  mov    %fs:(%r12),%rax
    0.00 :   a4742:  lea    0x10(%r15),%rcx
    0.00 :   a4746:  mov    (%rax,%rcx,8),%r9
         : 1197  ./malloc/malloc.c:3194
    0.00 :   a474a:  test   $0xf,%r9b
    0.00 :   a474e:  jne    a48c1 <_int_malloc+0xf11>
         : 1200  ./malloc/malloc.c:3196
    0.00 :   a4754:  mov    %r9,%rdx
    0.00 :   a4757:  shr    $0xc,%rdx
    0.00 :   a475b:  xor    (%r9),%rdx
    0.00 :   a475e:  mov    %rdx,(%rax,%rcx,8)
         : 1205  ./malloc/malloc.c:3197
    0.00 :   a4762:  subw   $0x1,(%rax,%r15,2)
         : 1207  ./malloc/malloc.c:3198
    0.00 :   a4768:  movq   $0x0,0x8(%r9)
         : 1209  _int_malloc():
         : 1210  ./malloc/malloc.c:4174
    0.00 :   a4770:  jmp    a4076 <_int_malloc+0x6c6>
         : 1212  ./malloc/malloc.c:4327
    0.00 :   a4775:  lea    0x13a62c(%rip),%rdi        # 1deda8 <__PRETTY_FUNCTION__.1+0xc68>
    0.00 :   a477c:  call   a0ce0 <malloc_printerr>
         : 1215  ./malloc/malloc.c:4192
    0.00 :   a4781:  mov    0x28(%rsp),%rbp
    0.00 :   a4786:  mov    0x28(%rax),%r14
         : 1218  ./malloc/malloc.c:4193
    0.00 :   a478a:  jmp    a4790 <_int_malloc+0xde0>
         : 1220  ./malloc/malloc.c:4195
    0.00 :   a478c:  mov    0x28(%r14),%r14
         : 1222  ./malloc/malloc.c:4193
    0.00 :   a4790:  mov    0x8(%r14),%rcx
    0.00 :   a4794:  mov    %rcx,%r15
    0.00 :   a4797:  and    $0xfffffffffffffff8,%r15
    0.00 :   a479b:  cmp    %r13,%r15
    0.00 :   a479e:  jb     a478c <_int_malloc+0xddc>
         : 1228  ./malloc/malloc.c:4199
    0.00 :   a47a0:  cmp    %r14,0x8(%rdx)
    0.00 :   a47a4:  je     a47b2 <_int_malloc+0xe02>
         : 1231  ./malloc/malloc.c:4201
    0.00 :   a47a6:  mov    0x10(%r14),%rax
         : 1233  ./malloc/malloc.c:4200
    0.00 :   a47aa:  cmp    0x8(%rax),%rcx
    0.00 :   a47ae:  cmove  %rax,%r14
         : 1236  ./malloc/malloc.c:4204
    0.00 :   a47b2:  mov    %r15,%r12
         : 1238  ./malloc/malloc.c:4205
    0.00 :   a47b5:  mov    %r14,%rdi
    0.00 :   a47b8:  mov    %r11,(%rsp)
    0.00 :   a47bc:  call   a1710 <unlink_chunk.constprop.0>
         : 1242  ./malloc/malloc.c:4204
    0.00 :   a47c1:  sub    %r13,%r12
         : 1244  ./malloc/malloc.c:4208
    0.00 :   a47c4:  mov    (%rsp),%r11
    0.00 :   a47c8:  cmp    $0x1f,%r12
    0.00 :   a47cc:  jbe    a4946 <_int_malloc+0xf96>
         : 1248  ./malloc/malloc.c:4221
    0.00 :   a47d2:  mov    0x70(%rbx),%rax
    0.00 :   a47d6:  movq   %r11,%xmm4
         : 1251  ./malloc/malloc.c:4217
    0.00 :   a47db:  lea    (%r14,%r13,1),%rdx
         : 1253  ./malloc/malloc.c:4221
    0.00 :   a47df:  movq   %rax,%xmm0
    0.00 :   a47e4:  punpcklqdq %xmm4,%xmm0
         : 1256  ./malloc/malloc.c:4222
    0.00 :   a47e8:  cmp    %r11,0x18(%rax)
    0.00 :   a47ec:  jne    a491b <_int_malloc+0xf6b>
         : 1259  ./malloc/malloc.c:4225
    0.00 :   a47f2:  movups %xmm0,0x10(%rdx)
         : 1261  ./malloc/malloc.c:4226
    0.00 :   a47f6:  mov    %rdx,0x70(%rbx)
         : 1263  ./malloc/malloc.c:4227
    0.00 :   a47fa:  mov    %rdx,0x18(%rax)
         : 1265  ./malloc/malloc.c:4228
    0.00 :   a47fe:  cmp    $0x3ff,%r12
    0.00 :   a4805:  jbe    a480f <_int_malloc+0xe5f>
         : 1268  ./malloc/malloc.c:4230
    0.00 :   a4807:  pxor   %xmm0,%xmm0
    0.00 :   a480b:  movups %xmm0,0x20(%rdx)
         : 1271  ./malloc/malloc.c:4233
    0.00 :   a480f:  lea    0x17646a(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a4816:  cmp    %rax,%rbx
    0.00 :   a4819:  setne  %al
    0.00 :   a481c:  movzbl %al,%eax
    0.00 :   a481f:  shl    $0x2,%rax
    0.00 :   a4823:  or     %r13,%rax
    0.00 :   a4826:  or     $0x1,%rax
    0.00 :   a482a:  mov    %rax,0x8(%r14)
         : 1280  ./malloc/malloc.c:4235
    0.00 :   a482e:  mov    %r12,%rax
    0.00 :   a4831:  or     $0x1,%rax
    0.00 :   a4835:  mov    %rax,0x8(%rdx)
         : 1284  ./malloc/malloc.c:4236
    0.00 :   a4839:  mov    %r12,(%r14,%r15,1)
         : 1286  alloc_perturb():
         : 1287  ./malloc/malloc.c:2005
    0.00 :   a483d:  mov    0x17ccb9(%rip),%eax        # 2214fc <perturb_byte>
         : 1289  _int_malloc():
         : 1290  ./malloc/malloc.c:4239
    0.00 :   a4843:  lea    0x10(%r14),%r9
         : 1292  alloc_perturb():
         : 1293  ./malloc/malloc.c:2005
    0.00 :   a4847:  test   %eax,%eax
    0.00 :   a4849:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a484f:  jmp    a4405 <_int_malloc+0xa55>
         : 1297  _int_malloc():
         : 1298  ./malloc/malloc.c:4122 (discriminator 1)
    0.00 :   a4854:  lea    0x13a9ad(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a485b:  mov    $0x101a,%edx
    0.00 :   a4860:  lea    0x134e25(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4867:  lea    0x134f5e(%rip),%rdi        # 1d97cc <null+0xf51>
    0.00 :   a486e:  call   a0e70 <__malloc_assert>
         : 1304  ./malloc/malloc.c:4380
    0.00 :   a4873:  lea    0x176406(%rip),%rcx        # 21ac80 <main_arena>
         : 1306  ./malloc/malloc.c:4378
    0.00 :   a487a:  lea    (%rax,%r13,1),%rsi
    0.00 :   a487e:  mov    0x28(%rsp),%rbp
         : 1309  ./malloc/malloc.c:4380
    0.00 :   a4883:  cmp    %rcx,%rbx
         : 1311  ./malloc/malloc.c:4379
    0.00 :   a4886:  mov    %rsi,0x60(%rbx)
         : 1313  ./malloc/malloc.c:4385
    0.00 :   a488a:  lea    0x10(%rax),%r9
         : 1315  ./malloc/malloc.c:4380
    0.00 :   a488e:  setne  %cl
         : 1317  ./malloc/malloc.c:4377
    0.00 :   a4891:  sub    %r13,%rdx
         : 1319  ./malloc/malloc.c:4380
    0.00 :   a4894:  movzbl %cl,%ecx
         : 1321  ./malloc/malloc.c:4382
    0.00 :   a4897:  or     $0x1,%rdx
         : 1323  ./malloc/malloc.c:4380
    0.00 :   a489b:  shl    $0x2,%rcx
    0.00 :   a489f:  or     %r13,%rcx
    0.00 :   a48a2:  or     $0x1,%rcx
    0.00 :   a48a6:  mov    %rcx,0x8(%rax)
         : 1328  alloc_perturb():
         : 1329  ./malloc/malloc.c:2005
    0.00 :   a48aa:  mov    0x17cc4c(%rip),%eax        # 2214fc <perturb_byte>
         : 1331  _int_malloc():
         : 1332  ./malloc/malloc.c:4382
    0.00 :   a48b0:  mov    %rdx,0x8(%rsi)
         : 1334  alloc_perturb():
         : 1335  ./malloc/malloc.c:2005
    0.00 :   a48b4:  test   %eax,%eax
    0.00 :   a48b6:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a48bc:  jmp    a4405 <_int_malloc+0xa55>
         : 1339  tcache_get():
         : 1340  ./malloc/malloc.c:3195
    0.00 :   a48c1:  lea    0x13a458(%rip),%rdi        # 1ded20 <__PRETTY_FUNCTION__.1+0xbe0>
    0.00 :   a48c8:  call   a0ce0 <malloc_printerr>
         : 1343  _int_malloc():
         : 1344  ./malloc/malloc.c:4407
    0.00 :   a48cd:  mov    %rbx,%rsi
    0.00 :   a48d0:  mov    %r13,%rdi
    0.00 :   a48d3:  mov    0x28(%rsp),%rbp
    0.00 :   a48d8:  call   a30d0 <sysmalloc>
    0.00 :   a48dd:  mov    %rax,%r9
         : 1350  ./malloc/malloc.c:4408
    0.00 :   a48e0:  test   %rax,%rax
    0.00 :   a48e3:  je     a4330 <_int_malloc+0x980>
         : 1353  alloc_perturb():
         : 1354  ./malloc/malloc.c:2005
    0.00 :   a48e9:  mov    0x17cc0d(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a48ef:  test   %eax,%eax
    0.00 :   a48f1:  je     a4076 <_int_malloc+0x6c6>
    0.00 :   a48f7:  jmp    a4405 <_int_malloc+0xa55>
         : 1359  _int_malloc():
         : 1360  ./malloc/malloc.c:4118 (discriminator 1)
    0.00 :   a48fc:  lea    0x13a905(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a4903:  mov    $0x1016,%edx
    0.00 :   a4908:  lea    0x134d7d(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a490f:  lea    0x134eb6(%rip),%rdi        # 1d97cc <null+0xf51>
    0.00 :   a4916:  call   a0e70 <__malloc_assert>
         : 1366  ./malloc/malloc.c:4223
    0.00 :   a491b:  lea    0x13a42e(%rip),%rdi        # 1ded50 <__PRETTY_FUNCTION__.1+0xc10>
    0.00 :   a4922:  call   a0ce0 <malloc_printerr>
         : 1369  ./malloc/malloc.c:4105 (discriminator 1)
    0.00 :   a4927:  lea    0x13a8da(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a492e:  mov    $0x1009,%edx
    0.00 :   a4933:  lea    0x134d52(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a493a:  lea    0x134e70(%rip),%rdi        # 1d97b1 <null+0xf36>
    0.00 :   a4941:  call   a0e70 <__malloc_assert>
         : 1375  ./malloc/malloc.c:4211
    0.00 :   a4946:  lea    0x176333(%rip),%rax        # 21ac80 <main_arena>
         : 1377  ./malloc/malloc.c:4210
    0.00 :   a494d:  orq    $0x1,0x8(%r14,%r15,1)
         : 1379  ./malloc/malloc.c:4211
    0.00 :   a4953:  cmp    %rax,%rbx
    0.00 :   a4956:  je     a483d <_int_malloc+0xe8d>
         : 1382  ./malloc/malloc.c:4212
    0.00 :   a495c:  orq    $0x4,0x8(%r14)
    0.00 :   a4961:  jmp    a483d <_int_malloc+0xe8d>
         : 1385  ./malloc/malloc.c:4302 (discriminator 1)
    0.00 :   a4966:  lea    0x13a89b(%rip),%rcx        # 1df208 <__PRETTY_FUNCTION__.7>
    0.00 :   a496d:  mov    $0x10ce,%edx
    0.00 :   a4972:  lea    0x134d13(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4979:  lea    0x13a3f8(%rip),%rdi        # 1ded78 <__PRETTY_FUNCTION__.1+0xc38>
    0.00 :   a4980:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of minisat for cycles:u (20 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007b70 <Minisat::SimpSolver::cleanUpClauses()>:
         : 6    Minisat::SimpSolver::cleanUpClauses():
         : 666  return ok;
         : 667  }
         :
         :
         : 670  void SimpSolver::cleanUpClauses()
         : 671  {
    0.00 :   7b70:   endbr64
    0.00 :   7b74:   push   %r12
    0.00 :   7b76:   push   %rbp
    0.00 :   7b77:   push   %rbx
         : 676  Minisat::vec<int>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   7b78:   mov    0x320(%rdi),%ecx
         : 70   Minisat::SimpSolver::cleanUpClauses():
    0.00 :   7b7e:   mov    %rdi,%rbx
         : 667  Minisat::vec<int>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   7b81:   mov    0x318(%rdi),%rdx
         : 129  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::cleanAll():
         :
         :
         : 293  template<class Idx, class Vec, class Deleted>
         : 294  void OccLists<Idx,Vec,Deleted>::cleanAll()
         : 295  {
         : 296  for (int i = 0; i < dirties.size(); i++)
    0.00 :   7b88:   test   %ecx,%ecx
    0.00 :   7b8a:   jle    7bb5 <Minisat::SimpSolver::cleanUpClauses()+0x45>
    0.00 :   7b8c:   lea    0x2f8(%rdi),%r12
    0.00 :   7b93:   xor    %ebp,%ebp
    0.00 :   7b95:   mov    0x308(%rbx),%rdi
         : 302  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7b9c:   lea    (%rdx,%rbp,4),%rsi
         : 89   Minisat::vec<char>::operator[](int):
    0.00 :   7ba0:   movslq (%rsi),%rax
         : 88   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::cleanAll():
         : 293  // Dirties may contain duplicates so check here if a variable is already cleaned:
         : 294  if (dirty[toInt(dirties[i])])
    0.00 :   7ba3:   cmpb   $0x0,(%rdi,%rax,1)
    0.00 :   7ba7:   jne    7c78 <Minisat::SimpSolver::cleanUpClauses()+0x108>
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   7bad:   add    $0x1,%rbp
    0.00 :   7bb1:   cmp    %ebp,%ecx
    0.00 :   7bb3:   jg     7b9c <Minisat::SimpSolver::cleanUpClauses()+0x2c>
         : 295  Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   7bb5:   test   %rdx,%rdx
    0.00 :   7bb8:   je     7bc4 <Minisat::SimpSolver::cleanUpClauses()+0x54>
         : 124  for (int i = 0; i < sz; i++) data[i].~T();
         : 125  sz = 0;
    0.00 :   7bba:   movl   $0x0,0x320(%rbx)
         : 127  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7bc4:   mov    0x100(%rbx),%esi
         : 65   Minisat::SimpSolver::cleanUpClauses():
         : 669  occurs.cleanAll();
         : 670  int i,j;
         : 671  for (i = j = 0; i < clauses.size(); i++)
    0.00 :   7bca:   test   %esi,%esi
    0.00 :   7bcc:   jle    7ca5 <Minisat::SimpSolver::cleanUpClauses()+0x135>
         : 674  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7bd2:   mov    0xf8(%rbx),%r9
    0.00 :   7bd9:   xor    %eax,%eax
    0.00 :   7bdb:   xor    %edi,%edi
    0.00 :   7bdd:   nopl   (%rax)
         : 92   Minisat::SimpSolver::cleanUpClauses():
         : 670  if (ca[clauses[i]].mark() == 0)
    0.00 :   7be0:   mov    (%r9,%rax,4),%ecx
         : 672  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   7be4:   cmp    0x230(%rbx),%ecx
    0.00 :   7bea:   jae    7c28 <Minisat::SimpSolver::cleanUpClauses()+0xb8>
         : 71   Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   7bec:   mov    0x228(%rbx),%r8
         : 169  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7bf3:   mov    %ecx,%edx
         : 64   Minisat::SimpSolver::cleanUpClauses():
    0.00 :   7bf5:   testb  $0x3,(%r8,%rdx,4)
   69.78 :   7bfa:   jne    7c50 <Minisat::SimpSolver::cleanUpClauses()+0xe0>
         : 671  clauses[j++] = clauses[i];
    0.00 :   7bfc:   mov    %ecx,(%r9,%rdi,4)
         : 673  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7c00:   mov    0x100(%rbx),%esi
    0.00 :   7c06:   lea    0x1(%rax),%edx
         : 66   Minisat::SimpSolver::cleanUpClauses():
         : 669  for (i = j = 0; i < clauses.size(); i++)
    0.00 :   7c09:   add    $0x1,%rax
         : 671  clauses[j++] = clauses[i];
    5.05 :   7c0d:   lea    0x1(%rdi),%r8d
         : 669  for (i = j = 0; i < clauses.size(); i++)
    0.00 :   7c11:   cmp    %eax,%esi
    0.00 :   7c13:   jle    7ca0 <Minisat::SimpSolver::cleanUpClauses()+0x130>
         : 670  if (ca[clauses[i]].mark() == 0)
    0.00 :   7c19:   mov    (%r9,%rax,4),%ecx
         : 671  clauses[j++] = clauses[i];
   10.04 :   7c1d:   movslq %r8d,%rdi
         : 673  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
   10.08 :   7c20:   cmp    0x230(%rbx),%ecx
    0.00 :   7c26:   jb     7bec <Minisat::SimpSolver::cleanUpClauses()+0x7c>
    0.00 :   7c28:   lea    0xbe09(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   7c2f:   mov    $0x3f,%edx
    0.00 :   7c34:   lea    0xbddf(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   7c3b:   lea    0xc7d6(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   7c42:   call   23b0 <__assert_fail@plt>
    0.00 :   7c47:   nopw   0x0(%rax,%rax,1)
         : 71   Minisat::SimpSolver::cleanUpClauses():
         : 669  for (i = j = 0; i < clauses.size(); i++)
    0.00 :   7c50:   lea    0x1(%rax),%edx
    0.00 :   7c53:   add    $0x1,%rax
    0.00 :   7c57:   cmp    %eax,%esi
    0.00 :   7c59:   jg     7be0 <Minisat::SimpSolver::cleanUpClauses()+0x70>
         : 672  clauses.shrink(i - j);
    0.00 :   7c5b:   sub    %edi,%edx
         : 674  Minisat::vec<unsigned int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   7c5d:   cmp    %esi,%edx
    0.00 :   7c5f:   jg     7ca7 <Minisat::SimpSolver::cleanUpClauses()+0x137>
    0.00 :   7c61:   test   %edx,%edx
    0.00 :   7c63:   jle    7c6d <Minisat::SimpSolver::cleanUpClauses()+0xfd>
    0.00 :   7c65:   sub    %edx,%esi
    0.00 :   7c67:   mov    %esi,0x100(%rbx)
         : 71   Minisat::SimpSolver::cleanUpClauses():
         : 673  }
    0.00 :   7c6d:   pop    %rbx
    0.00 :   7c6e:   pop    %rbp
    0.00 :   7c6f:   pop    %r12
    0.00 :   7c71:   ret
    0.00 :   7c72:   nopw   0x0(%rax,%rax,1)
         : 679  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::cleanAll():
         : 294  clean(dirties[i]);
    0.00 :   7c78:   mov    %r12,%rdi
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   7c7b:   add    $0x1,%rbp
         : 294  clean(dirties[i]);
    0.00 :   7c7f:   call   b5e0 <Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::clean(int const&)>
         : 296  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7c84:   mov    0x320(%rbx),%ecx
         : 65   Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   7c8a:   mov    0x318(%rbx),%rdx
         : 124  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::cleanAll():
         : 291  for (int i = 0; i < dirties.size(); i++)
    0.00 :   7c91:   cmp    %ebp,%ecx
    0.00 :   7c93:   jg     7b95 <Minisat::SimpSolver::cleanUpClauses()+0x25>
    0.00 :   7c99:   jmp    7bb5 <Minisat::SimpSolver::cleanUpClauses()+0x45>
    0.00 :   7c9e:   xchg   %ax,%ax
         : 296  Minisat::SimpSolver::cleanUpClauses():
         : 671  clauses[j++] = clauses[i];
    0.00 :   7ca0:   mov    %r8d,%edi
    5.06 :   7ca3:   jmp    7c5b <Minisat::SimpSolver::cleanUpClauses()+0xeb>
         : 674  Minisat::vec<unsigned int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   7ca5:   je     7c6d <Minisat::SimpSolver::cleanUpClauses()+0xfd>
    0.00 :   7ca7:   lea    0xca2a(%rip),%rcx        # 146d8 <typeinfo name for Minisat::BoolOption+0xdc8>
    0.00 :   7cae:   mov    $0x40,%edx
    0.00 :   7cb3:   lea    0xc818(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   7cba:   lea    0xca51(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   7cc1:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (23 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000009310 <Minisat::SimpSolver::eliminateVar(int)>:
         : 6    Minisat::SimpSolver::eliminateVar(int):
         : 471  }
         :
         :
         :
         : 475  bool SimpSolver::eliminateVar(Var v)
         : 476  {
    0.00 :   9310:   endbr64
    0.00 :   9314:   push   %r15
    0.00 :   9316:   mov    %rdi,%r15
    0.00 :   9319:   push   %r14
    0.00 :   931b:   push   %r13
    0.00 :   931d:   push   %r12
    0.00 :   931f:   push   %rbp
    0.00 :   9320:   push   %rbx
    0.00 :   9321:   sub    $0x98,%rsp
    0.00 :   9328:   mov    %esi,0x5c(%rsp)
    0.00 :   932c:   mov    %fs:0x28,%rax
    0.00 :   9335:   mov    %rax,0x88(%rsp)
    0.00 :   933d:   xor    %eax,%eax
         : 490  Minisat::vec<char>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   933f:   movslq %esi,%rax
    0.00 :   9342:   mov    %rax,%rdi
    0.00 :   9345:   mov    %rax,0x30(%rsp)
         : 96   Minisat::SimpSolver::eliminateVar(int):
         : 472  assert(!frozen[v]);
    0.00 :   934a:   mov    0x380(%r15),%rax
    0.00 :   9351:   cmpb   $0x0,(%rax,%rdi,1)
    0.00 :   9355:   jne    992f <Minisat::SimpSolver::eliminateVar(int)+0x61f>
         : 476  Minisat::SimpSolver::isEliminated(int) const:
         :
         : 170  //=================================================================================================
         : 171  // Implementation of inline methods:
         :
         :
         : 174  inline bool SimpSolver::isEliminated (Var v) const { return eliminated[v]; }
    0.00 :   935b:   mov    0x390(%r15),%rax
         : 176  Minisat::SimpSolver::eliminateVar(int):
         : 473  assert(!isEliminated(v));
    0.00 :   9362:   cmpb   $0x0,(%rax,%rdi,1)
    0.00 :   9366:   jne    9910 <Minisat::SimpSolver::eliminateVar(int)+0x600>
         : 476  Minisat::Solver::value(int) const:
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
         : 326  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   936c:   mov    0x170(%r15),%rax
         : 328  Minisat::SimpSolver::eliminateVar(int):
         : 474  assert(value(v) == l_Undef);
    0.00 :   9373:   testb  $0x2,(%rax,%rdi,1)
    0.00 :   9377:   je     98f1 <Minisat::SimpSolver::eliminateVar(int)+0x5e1>
         : 477  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  OccLists(const Deleted& d) : deleted(d) {}
         :
         : 271  void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
         : 272  // Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 273  Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 274  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   937d:   mov    0x308(%r15),%rax
    0.00 :   9384:   mov    %esi,%ebx
    0.00 :   9386:   cmpb   $0x0,(%rax,%rdi,1)
    0.00 :   938a:   jne    96a7 <Minisat::SimpSolver::eliminateVar(int)+0x397>
         : 279  Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   9390:   movq   $0x0,0x60(%rsp)
         : 56   Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9399:   mov    0x30(%rsp),%rax
         : 89   Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   939e:   movq   $0x0,0x68(%rsp)
    0.00 :   93a7:   movq   $0x0,0x70(%rsp)
         : 57   Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   93b0:   shl    $0x4,%rax
    0.00 :   93b4:   mov    %rax,0x48(%rsp)
    0.00 :   93b9:   add    0x2f8(%r15),%rax
         : 91   Minisat::SimpSolver::eliminateVar(int):
         :
         : 481  // Split the occurrences into positive and negative:
         : 482  //
         : 483  const vec<CRef>& cls = occurs.lookup(v);
         : 484  vec<CRef>        pos, neg;
         : 485  for (int i = 0; i < cls.size(); i++)
    0.00 :   93c0:   mov    0x8(%rax),%ebp
         : 487  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
    4.43 :   93c3:   mov    %rax,0x28(%rsp)
         : 88   Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   93c8:   movq   $0x0,0x78(%rsp)
         : 56   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   93d1:   test   %ebp,%ebp
    0.00 :   93d3:   jle    96bd <Minisat::SimpSolver::eliminateVar(int)+0x3ad>
         : 481  (find(ca[cls[i]], mkLit(v)) ? pos : neg).push(cls[i]);
    0.00 :   93d9:   lea    0x70(%rsp),%rax
         : 483  Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   93de:   lea    (%rbx,%rbx,1),%ebp
    0.00 :   93e1:   xor    %r13d,%r13d
         : 61   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   93e4:   mov    %rax,0x8(%rsp)
         : 482  Minisat::vec<unsigned int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   93e9:   mov    0x28(%rsp),%rax
    0.00 :   93ee:   mov    (%rax),%rax
    0.00 :   93f1:   lea    (%rax,%r13,4),%r14
         : 90   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   93f5:   mov    (%r14),%ecx
         : 482  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
   13.35 :   93f8:   cmp    0x230(%r15),%ecx
    0.00 :   93ff:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   9405:   mov    0x228(%r15),%rdx
    0.00 :   940c:   mov    %ecx,%eax
    0.00 :   940e:   lea    (%rdx,%rax,4),%rsi
         : 74   Minisat::SimpSolver::eliminateVar(int):
         :
         : 51   template<class V, class T>
         : 52   static inline bool find(V& ts, const T& t)
         : 53   {
         : 54   int j = 0;
         : 55   for (; j < ts.size() && ts[j] != t; j++);
    0.00 :   9412:   mov    (%rsi),%edx
         : 57   find<Minisat::Clause, Minisat::Lit>():
    4.59 :   9414:   shr    $0x5,%edx
    0.00 :   9417:   je     967a <Minisat::SimpSolver::eliminateVar(int)+0x36a>
    0.00 :   941d:   sub    $0x1,%edx
    0.00 :   9420:   lea    0x4(%rsi),%rax
    0.00 :   9424:   lea    0x8(%rsi,%rdx,4),%rdx
    0.00 :   9429:   jmp    943d <Minisat::SimpSolver::eliminateVar(int)+0x12d>
    0.00 :   942b:   nopl   0x0(%rax,%rax,1)
    0.00 :   9430:   add    $0x4,%rax
    0.00 :   9434:   cmp    %rax,%rdx
    0.00 :   9437:   je     967a <Minisat::SimpSolver::eliminateVar(int)+0x36a>
    0.00 :   943d:   cmp    %ebp,(%rax)
    4.24 :   943f:   jne    9430 <Minisat::SimpSolver::eliminateVar(int)+0x120>
         : 62   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9441:   lea    0x60(%rsp),%r12
         : 482  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9446:   movslq 0x8(%r12),%rax
    0.00 :   944b:   cmp    0xc(%r12),%eax
    0.00 :   9450:   je     968f <Minisat::SimpSolver::eliminateVar(int)+0x37f>
    0.00 :   9456:   mov    (%r12),%rdx
    0.00 :   945a:   lea    0x1(%rax),%esi
         : 80   Minisat::SimpSolver::eliminateVar(int):
         : 480  for (int i = 0; i < cls.size(); i++)
    0.00 :   945d:   add    $0x1,%r13
         : 482  Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   9461:   mov    %esi,0x8(%r12)
    0.00 :   9466:   mov    %ecx,(%rdx,%rax,4)
         : 76   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   9469:   mov    0x28(%rsp),%rax
    0.00 :   946e:   mov    0x8(%rax),%eax
    0.00 :   9471:   mov    %eax,0x40(%rsp)
         : 67   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9475:   cmp    %r13d,%eax
    0.00 :   9478:   jg     93e9 <Minisat::SimpSolver::eliminateVar(int)+0xd9>
         : 482  Minisat::vec<unsigned int>::size() const:
    0.00 :   947e:   movslq 0x68(%rsp),%rax
    4.68 :   9483:   mov    %eax,0x44(%rsp)
         : 65   Minisat::SimpSolver::eliminateVar(int):
         : 489  // clause must exceed the limit on the maximal clause size (if it is set):
         : 490  //
         : 491  int cnt         = 0;
         : 492  int clause_size = 0;
         :
         : 494  for (int i = 0; i < pos.size(); i++)
    0.00 :   9487:   test   %eax,%eax
    0.00 :   9489:   jle    96c5 <Minisat::SimpSolver::eliminateVar(int)+0x3b5>
         : 497  Minisat::vec<unsigned int>::size() const:
    0.00 :   948f:   mov    0x78(%rsp),%edi
         : 64   Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9493:   mov    0x70(%rsp),%rdx
    0.00 :   9498:   mov    %rax,0x50(%rsp)
    0.00 :   949d:   mov    0x60(%rsp),%rsi
         : 91   Minisat::SimpSolver::eliminateVar(int):
         : 486  int cnt         = 0;
    0.00 :   94a2:   movl   $0x0,0x8(%rsp)
    0.00 :   94aa:   lea    -0x1(%rdi),%eax
         : 489  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   94ad:   mov    %edi,0x58(%rsp)
    0.00 :   94b1:   lea    0x4(%rdx,%rax,4),%rax
         : 66   Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   94b6:   mov    %rdx,0x38(%rsp)
    0.00 :   94bb:   mov    %rsi,0x10(%rsp)
    0.00 :   94c0:   mov    %rax,0x20(%rsp)
    0.00 :   94c5:   movq   $0x0,0x18(%rsp)
         : 92   Minisat::SimpSolver::eliminateVar(int):
         : 490  for (int j = 0; j < neg.size(); j++)
    0.00 :   94ce:   mov    0x58(%rsp),%r11d
    0.00 :   94d3:   test   %r11d,%r11d
    0.00 :   94d6:   jle    95bb <Minisat::SimpSolver::eliminateVar(int)+0x2ab>
         : 494  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   94dc:   mov    0x230(%r15),%r14d
    0.00 :   94e3:   mov    0x38(%rsp),%r13
    0.00 :   94e8:   nopl   0x0(%rax,%rax,1)
         : 66   Minisat::SimpSolver::eliminateVar(int):
         : 491  if (merge(ca[pos[i]], ca[neg[j]], v, clause_size) &&
    0.00 :   94f0:   mov    0x0(%r13),%eax
         : 493  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    4.62 :   94f4:   cmp    %r14d,%eax
    0.00 :   94f7:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   94fd:   mov    0x228(%r15),%rdx
         : 66   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9504:   mov    0x18(%rsp),%rdi
         : 492  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   9509:   lea    (%rdx,%rax,4),%r11
         : 64   Minisat::SimpSolver::eliminateVar(int):
    4.45 :   950d:   mov    0x10(%rsp),%rax
    0.00 :   9512:   mov    (%rax,%rdi,4),%eax
         : 493  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    4.07 :   9515:   cmp    %r14d,%eax
    0.00 :   9518:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   951e:   lea    (%rdx,%rax,4),%rdx
         : 66   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   9522:   mov    (%r11),%ecx
         : 164  Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
         : 250  merges++;
    0.00 :   9525:   addl   $0x1,0x2c4(%r15)
         : 252  Minisat::Clause::size() const:
    0.00 :   952d:   mov    (%rdx),%eax
    3.84 :   952f:   shr    $0x5,%ecx
    0.00 :   9532:   shr    $0x5,%eax
    0.00 :   9535:   mov    %ecx,%ebp
         : 166  Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
         : 253  const Clause& ps  =  ps_smallest ? _qs : _ps;
    0.00 :   9537:   cmp    %ecx,%eax
    4.04 :   9539:   jb     9548 <Minisat::SimpSolver::eliminateVar(int)+0x238>
    0.00 :   953b:   mov    %eax,%ebp
    0.00 :   953d:   mov    %ecx,%eax
    0.00 :   953f:   mov    %rdx,%rcx
    0.00 :   9542:   mov    %r11,%rdx
    0.00 :   9545:   mov    %rcx,%r11
         : 258  size = ps.size()-1;
    0.00 :   9548:   lea    -0x1(%rbp),%r12d
         : 260  for (int i = 0; i < qs.size(); i++){
    0.00 :   954c:   test   %eax,%eax
    0.00 :   954e:   je     95ed <Minisat::SimpSolver::eliminateVar(int)+0x2dd>
    0.00 :   9554:   sub    $0x1,%eax
    0.00 :   9557:   lea    0x4(%rdx),%rdi
    0.00 :   955b:   lea    0x8(%rdx,%rax,4),%r10
    0.00 :   9560:   mov    %r12d,%eax
    0.00 :   9563:   lea    0x8(%r11,%rax,4),%r8
    0.00 :   9568:   jmp    9579 <Minisat::SimpSolver::eliminateVar(int)+0x269>
    0.00 :   956a:   nopw   0x0(%rax,%rax,1)
    0.00 :   9570:   add    $0x4,%rdi
    0.00 :   9574:   cmp    %r10,%rdi
    0.00 :   9577:   je     95ed <Minisat::SimpSolver::eliminateVar(int)+0x2dd>
         : 261  if (var(__qs[i]) != v){
    0.00 :   9579:   mov    (%rdi),%r9d
         : 263  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    3.98 :   957c:   mov    %r9d,%esi
    0.00 :   957f:   sar    %esi
         : 65   Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
    0.00 :   9581:   cmp    %esi,%ebx
    0.00 :   9583:   je     9570 <Minisat::SimpSolver::eliminateVar(int)+0x260>
         : 262  for (int j = 0; j < ps.size(); j++)
    0.00 :   9585:   test   %ebp,%ebp
    0.00 :   9587:   je     95e0 <Minisat::SimpSolver::eliminateVar(int)+0x2d0>
    0.00 :   9589:   lea    0x4(%r11),%rax
    0.00 :   958d:   jmp    9599 <Minisat::SimpSolver::eliminateVar(int)+0x289>
    0.00 :   958f:   nop
    0.00 :   9590:   add    $0x4,%rax
    0.00 :   9594:   cmp    %rax,%r8
    0.00 :   9597:   je     95e0 <Minisat::SimpSolver::eliminateVar(int)+0x2d0>
         : 263  if (var(__ps[j]) == var(__qs[i]))
    0.00 :   9599:   mov    (%rax),%edx
         : 265  Minisat::var(Minisat::Lit):
   26.49 :   959b:   mov    %edx,%ecx
    0.00 :   959d:   sar    %ecx
         : 64   Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
    0.00 :   959f:   cmp    %ecx,%esi
    0.00 :   95a1:   jne    9590 <Minisat::SimpSolver::eliminateVar(int)+0x280>
         : 265  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   95a3:   xor    $0x1,%r9d
         : 61   Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
         : 264  if (__ps[j] == ~__qs[i])
    0.00 :   95a7:   cmp    %r9d,%edx
    0.00 :   95aa:   jne    9570 <Minisat::SimpSolver::eliminateVar(int)+0x260>
         : 267  Minisat::SimpSolver::eliminateVar(int):
         : 490  for (int j = 0; j < neg.size(); j++)
    0.00 :   95ac:   add    $0x4,%r13
    0.00 :   95b0:   cmp    %r13,0x20(%rsp)
    0.00 :   95b5:   jne    94f0 <Minisat::SimpSolver::eliminateVar(int)+0x1e0>
         : 489  for (int i = 0; i < pos.size(); i++)
    0.00 :   95bb:   addq   $0x1,0x18(%rsp)
    0.00 :   95c1:   mov    0x18(%rsp),%rax
    0.00 :   95c6:   cmp    %rax,0x50(%rsp)
    0.00 :   95cb:   jne    94ce <Minisat::SimpSolver::eliminateVar(int)+0x1be>
    0.00 :   95d1:   jmp    96c5 <Minisat::SimpSolver::eliminateVar(int)+0x3b5>
    0.00 :   95d6:   cs nopw 0x0(%rax,%rax,1)
         : 496  Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, int&):
         : 260  for (int i = 0; i < qs.size(); i++){
    0.00 :   95e0:   add    $0x4,%rdi
         : 268  size++;
    0.00 :   95e4:   add    $0x1,%r12d
         : 260  for (int i = 0; i < qs.size(); i++){
    0.00 :   95e8:   cmp    %r10,%rdi
    0.00 :   95eb:   jne    9579 <Minisat::SimpSolver::eliminateVar(int)+0x269>
         : 263  Minisat::SimpSolver::eliminateVar(int):
         : 491  if (merge(ca[pos[i]], ca[neg[j]], v, clause_size) &&
    0.00 :   95ed:   addl   $0x1,0x8(%rsp)
    0.00 :   95f2:   mov    0x8(%rsp),%edi
         : 492  (++cnt > cls.size() + grow || (clause_lim != -1 && clause_size > clause_lim)))
    0.00 :   95f6:   mov    0x40(%rsp),%eax
    0.00 :   95fa:   add    0x2ac(%r15),%eax
         : 491  if (merge(ca[pos[i]], ca[neg[j]], v, clause_size) &&
    0.00 :   9601:   cmp    %edi,%eax
    0.00 :   9603:   jl     9616 <Minisat::SimpSolver::eliminateVar(int)+0x306>
         : 492  (++cnt > cls.size() + grow || (clause_lim != -1 && clause_size > clause_lim)))
    0.00 :   9605:   mov    0x2b0(%r15),%eax
    0.00 :   960c:   cmp    %r12d,%eax
    0.00 :   960f:   jge    95ac <Minisat::SimpSolver::eliminateVar(int)+0x29c>
    0.00 :   9611:   cmp    $0xffffffff,%eax
    0.00 :   9614:   je     95ac <Minisat::SimpSolver::eliminateVar(int)+0x29c>
         : 498  Minisat::vec<unsigned int>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   9616:   cmpq   $0x0,0x38(%rsp)
    0.00 :   961c:   mov    $0x1,%eax
    0.00 :   9621:   je     963e <Minisat::SimpSolver::eliminateVar(int)+0x32e>
         : 125  for (int i = 0; i < sz; i++) data[i].~T();
         : 126  sz = 0;
         : 127  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   9623:   mov    0x38(%rsp),%rdi
    0.00 :   9628:   mov    %al,0x8(%rsp)
    0.00 :   962c:   call   2440 <free@plt>
    0.00 :   9631:   movzbl 0x8(%rsp),%eax
         : 122  if (data != NULL){
    0.00 :   9636:   cmpq   $0x0,0x10(%rsp)
    0.00 :   963c:   je     9651 <Minisat::SimpSolver::eliminateVar(int)+0x341>
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   963e:   mov    0x10(%rsp),%rdi
    0.00 :   9643:   mov    %al,0x8(%rsp)
    0.00 :   9647:   call   2440 <free@plt>
    0.00 :   964c:   movzbl 0x8(%rsp),%eax
         : 130  Minisat::SimpSolver::eliminateVar(int):
         : 528  // Free watchers lists for this variable, if possible:
         : 529  if (watches[ mkLit(v)].size() == 0) watches[ mkLit(v)].clear(true);
         : 530  if (watches[~mkLit(v)].size() == 0) watches[~mkLit(v)].clear(true);
         :
         : 532  return backwardSubsumptionCheck();
         : 533  }
    0.00 :   9651:   mov    0x88(%rsp),%rdx
    0.00 :   9659:   sub    %fs:0x28,%rdx
    0.00 :   9662:   jne    994e <Minisat::SimpSolver::eliminateVar(int)+0x63e>
    0.00 :   9668:   add    $0x98,%rsp
    0.00 :   966f:   pop    %rbx
    0.00 :   9670:   pop    %rbp
    0.00 :   9671:   pop    %r12
    0.00 :   9673:   pop    %r13
    0.00 :   9675:   pop    %r14
    0.00 :   9677:   pop    %r15
    0.00 :   9679:   ret
         : 481  (find(ca[cls[i]], mkLit(v)) ? pos : neg).push(cls[i]);
    0.00 :   967a:   mov    0x8(%rsp),%r12
         : 483  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    4.53 :   967f:   movslq 0x8(%r12),%rax
    4.02 :   9684:   cmp    0xc(%r12),%eax
    0.00 :   9689:   jne    9456 <Minisat::SimpSolver::eliminateVar(int)+0x146>
    0.00 :   968f:   lea    0x1(%rax),%esi
    0.00 :   9692:   mov    %r12,%rdi
    0.00 :   9695:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    8.67 :   969a:   mov    (%r14),%ecx
    0.00 :   969d:   movslq 0x8(%r12),%rax
    0.00 :   96a2:   jmp    9456 <Minisat::SimpSolver::eliminateVar(int)+0x146>
         : 84   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   96a7:   lea    0x5c(%rsp),%rsi
         : 271  Minisat::SimpSolver::eliminateVar(int):
         : 478  const vec<CRef>& cls = occurs.lookup(v);
    0.00 :   96ac:   lea    0x2f8(%r15),%rdi
         : 480  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
    0.00 :   96b3:   call   b5e0 <Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::clean(int const&)>
    0.00 :   96b8:   jmp    9390 <Minisat::SimpSolver::eliminateVar(int)+0x80>
         : 271  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   96bd:   movl   $0x0,0x44(%rsp)
         : 65   Minisat::SimpSolver::eliminateVar(int):
         : 496  eliminated[v] = true;
    0.00 :   96c5:   mov    0x390(%r15),%rax
    0.00 :   96cc:   mov    0x30(%rsp),%rdi
    0.00 :   96d1:   movb   $0x1,(%rax,%rdi,1)
         : 500  Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   96d5:   mov    0x190(%r15),%rax
    0.00 :   96dc:   add    %rdi,%rax
         : 90   Minisat::Solver::setDecisionVar(int, bool):
         : 334  inline int      Solver::nFreeVars     ()      const   { return (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]); }
         : 335  inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
         : 336  inline void     Solver::setDecisionVar(Var v, bool b)
         : 337  {
         : 338  if      ( b && !decision[v]) dec_vars++;
         : 339  else if (!b &&  decision[v]) dec_vars--;
    0.00 :   96df:   cmpb   $0x0,(%rax)
    0.00 :   96e2:   jne    9958 <Minisat::SimpSolver::eliminateVar(int)+0x648>
         :
         : 337  decision[v] = b;
    0.00 :   96e8:   movb   $0x0,(%rax)
         : 339  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   96eb:   mov    0x210(%r15),%eax
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80   public:
         : 81   Heap(const Comp& c) : lt(c) { }
         :
         : 83   int  size      ()          const { return heap.size(); }
         : 84   bool empty     ()          const { return heap.size() == 0; }
         : 85   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   96f2:   cmp    %eax,%ebx
    0.00 :   96f4:   jge    9a1b <Minisat::SimpSolver::eliminateVar(int)+0x70b>
    0.00 :   96fa:   mov    0x208(%r15),%rdx
    0.00 :   9701:   mov    0x30(%rsp),%rdi
    0.00 :   9706:   mov    (%rdx,%rdi,4),%r10d
    0.00 :   970a:   test   %r10d,%r10d
    0.00 :   970d:   js     9a1b <Minisat::SimpSolver::eliminateVar(int)+0x70b>
         : 93   Minisat::vec<unsigned int>::size() const:
    0.00 :   9713:   mov    0x78(%rsp),%eax
         : 64   Minisat::SimpSolver::eliminateVar(int):
         : 500  if (pos.size() > neg.size()){
    0.00 :   9717:   mov    0x44(%rsp),%edi
         : 498  eliminated_vars++;
    0.00 :   971b:   addl   $0x1,0x2cc(%r15)
         : 500  Minisat::vec<unsigned int>::size() const:
    0.00 :   9723:   mov    %eax,0x8(%rsp)
         : 64   Minisat::SimpSolver::eliminateVar(int):
         : 500  if (pos.size() > neg.size()){
    0.00 :   9727:   cmp    %eax,%edi
    0.00 :   9729:   jg     9965 <Minisat::SimpSolver::eliminateVar(int)+0x655>
         : 505  for (int i = 0; i < pos.size(); i++)
    0.00 :   972f:   lea    0x2d8(%r15),%rbp
    0.00 :   9736:   test   %edi,%edi
    0.00 :   9738:   jle    9782 <Minisat::SimpSolver::eliminateVar(int)+0x472>
    0.00 :   973a:   mov    0x60(%rsp),%r12
    0.00 :   973f:   mov    %edi,%eax
         : 506  mkElimClause(elimclauses, v, ca[pos[i]]);
    0.00 :   9741:   lea    0x2d8(%r15),%r13
    0.00 :   9748:   sub    $0x1,%eax
    0.00 :   974b:   lea    0x4(%r12,%rax,4),%r14
    0.00 :   9750:   mov    (%r12),%eax
         : 511  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   9754:   cmp    0x230(%r15),%eax
    0.00 :   975b:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   9761:   mov    0x228(%r15),%rdx
         : 66   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9768:   mov    %ebx,%esi
    0.00 :   976a:   mov    %r13,%rdi
    0.00 :   976d:   mov    %r13,%rbp
         : 509  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   9770:   lea    (%rdx,%rax,4),%rdx
         : 64   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9774:   call   6950 <mkElimClause(Minisat::vec<unsigned int>&, int, Minisat::Clause&)>
         : 505  for (int i = 0; i < pos.size(); i++)
    0.00 :   9779:   add    $0x4,%r12
    0.00 :   977d:   cmp    %r14,%r12
    0.00 :   9780:   jne    9750 <Minisat::SimpSolver::eliminateVar(int)+0x440>
         : 509  Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   9782:   lea    (%rbx,%rbx,1),%r12d
         : 60   Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9786:   movslq 0x2e0(%r15),%rax
         : 76   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   978d:   mov    %r12d,%r13d
    0.00 :   9790:   xor    $0x1,%r13d
         : 62   Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   9794:   cmp    0x2e4(%r15),%eax
    0.00 :   979b:   je     9a83 <Minisat::SimpSolver::eliminateVar(int)+0x773>
    0.00 :   97a1:   mov    0x2d8(%r15),%rdx
    0.00 :   97a8:   lea    0x1(%rax),%ecx
    0.00 :   97ab:   mov    %ecx,0x2e0(%r15)
    0.00 :   97b2:   mov    %r13d,(%rdx,%rax,4)
    0.00 :   97b6:   movslq 0x2e0(%r15),%rax
    0.00 :   97bd:   cmp    0x2e4(%r15),%eax
    0.00 :   97c4:   je     99fd <Minisat::SimpSolver::eliminateVar(int)+0x6ed>
    0.00 :   97ca:   lea    0x1(%rax),%ecx
         : 84   Minisat::SimpSolver::eliminateVar(int):
         : 510  for (int i = 0; i < cls.size(); i++)
    0.00 :   97cd:   xor    %ebp,%ebp
         : 512  Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   97cf:   mov    %ecx,0x2e0(%r15)
    0.00 :   97d6:   movl   $0x1,(%rdx,%rax,4)
         : 76   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   97dd:   mov    0x28(%rsp),%rax
    0.00 :   97e2:   mov    0x8(%rax),%edi
    0.00 :   97e5:   test   %edi,%edi
    0.00 :   97e7:   jle    9806 <Minisat::SimpSolver::eliminateVar(int)+0x4f6>
         : 511  removeClause(cls[i]);
    0.00 :   97e9:   mov    0x28(%rsp),%r14
    0.00 :   97ee:   mov    %r15,%rdi
    0.00 :   97f1:   mov    (%r14),%rax
    0.00 :   97f4:   mov    (%rax,%rbp,4),%esi
    0.00 :   97f7:   call   60f0 <Minisat::SimpSolver::removeClause(unsigned int)>
         : 510  for (int i = 0; i < cls.size(); i++)
    0.00 :   97fc:   add    $0x1,%rbp
    0.00 :   9800:   cmp    %ebp,0x8(%r14)
    0.00 :   9804:   jg     97e9 <Minisat::SimpSolver::eliminateVar(int)+0x4d9>
         : 515  for (int i = 0; i < pos.size(); i++)
    0.00 :   9806:   movslq 0x44(%rsp),%rax
         : 514  vec<Lit>& resolvent = add_tmp;
    0.00 :   980b:   lea    0x270(%r15),%r14
         : 515  for (int i = 0; i < pos.size(); i++)
    0.00 :   9812:   test   %eax,%eax
    0.00 :   9814:   jle    9aaf <Minisat::SimpSolver::eliminateVar(int)+0x79f>
    0.00 :   981a:   shl    $0x2,%rax
    0.00 :   981e:   xor    %ebp,%ebp
    0.00 :   9820:   mov    %rax,0x28(%rsp)
    0.00 :   9825:   mov    0x8(%rsp),%eax
    0.00 :   9829:   sub    $0x1,%eax
    0.00 :   982c:   shl    $0x2,%rax
    0.00 :   9830:   mov    %rax,0x18(%rsp)
         : 516  for (int j = 0; j < neg.size(); j++)
    0.00 :   9835:   mov    0x8(%rsp),%esi
    0.00 :   9839:   test   %esi,%esi
    0.00 :   983b:   jle    9aa0 <Minisat::SimpSolver::eliminateVar(int)+0x790>
         : 520  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9841:   mov    0x70(%rsp),%rax
    0.00 :   9846:   mov    0x18(%rsp),%rdi
    0.00 :   984b:   mov    %rax,0x38(%rsp)
    0.00 :   9850:   mov    %rax,%r13
    0.00 :   9853:   lea    0x4(%rax,%rdi,1),%rax
    0.00 :   9858:   mov    %rax,0x20(%rsp)
    0.00 :   985d:   jmp    986f <Minisat::SimpSolver::eliminateVar(int)+0x55f>
    0.00 :   985f:   nop
         : 96   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9860:   add    $0x4,%r13
    0.00 :   9864:   cmp    0x20(%rsp),%r13
    0.00 :   9869:   je     9aa0 <Minisat::SimpSolver::eliminateVar(int)+0x790>
         : 517  if (merge(ca[pos[i]], ca[neg[j]], v, resolvent) && !addClause_(resolvent))
    0.00 :   986f:   mov    0x0(%r13),%eax
         : 519  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   9873:   mov    0x230(%r15),%ecx
    0.00 :   987a:   cmp    %ecx,%eax
    0.00 :   987c:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   987e:   mov    0x228(%r15),%rdx
    0.00 :   9885:   lea    (%rdx,%rax,4),%r9
         : 68   Minisat::vec<unsigned int>::operator[](int):
    0.00 :   9889:   mov    0x60(%rsp),%rax
    0.00 :   988e:   mov    %rax,0x10(%rsp)
         : 89   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   9893:   mov    (%rax,%rbp,1),%eax
         : 518  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   9896:   cmp    %ecx,%eax
    0.00 :   9898:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   989a:   lea    (%rdx,%rax,4),%rsi
         : 66   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   989e:   mov    %r14,%r8
    0.00 :   98a1:   mov    %ebx,%ecx
    0.00 :   98a3:   mov    %r9,%rdx
    0.00 :   98a6:   mov    %r15,%rdi
    0.00 :   98a9:   call   5df0 <Minisat::SimpSolver::merge(Minisat::Clause const&, Minisat::Clause const&, int, Minisat::vec<Minisat::Lit>&)>
    0.00 :   98ae:   test   %al,%al
    0.00 :   98b0:   je     9860 <Minisat::SimpSolver::eliminateVar(int)+0x550>
    0.00 :   98b2:   mov    %r14,%rsi
    0.00 :   98b5:   mov    %r15,%rdi
    0.00 :   98b8:   call   6a70 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)>
    0.00 :   98bd:   test   %al,%al
    0.00 :   98bf:   jne    9860 <Minisat::SimpSolver::eliminateVar(int)+0x550>
         : 522  Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   98c1:   cmpq   $0x0,0x38(%rsp)
    0.00 :   98c7:   jne    9623 <Minisat::SimpSolver::eliminateVar(int)+0x313>
    0.00 :   98cd:   jmp    9636 <Minisat::SimpSolver::eliminateVar(int)+0x326>
         : 126  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   98d2:   lea    0xa15f(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   98d9:   mov    $0x3f,%edx
    0.00 :   98de:   lea    0xa135(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   98e5:   lea    0xab2c(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   98ec:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::SimpSolver::eliminateVar(int):
         : 474  assert(value(v) == l_Undef);
    0.00 :   98f1:   lea    0xa810(%rip),%rcx        # 14108 <typeinfo name for Minisat::BoolOption+0x7f8>
    0.00 :   98f8:   mov    $0x1da,%edx
    0.00 :   98fd:   lea    0xa2cc(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   9904:   lea    0xac69(%rip),%rdi        # 14574 <typeinfo name for Minisat::BoolOption+0xc64>
    0.00 :   990b:   call   23b0 <__assert_fail@plt>
         : 473  assert(!isEliminated(v));
    0.00 :   9910:   lea    0xa7f1(%rip),%rcx        # 14108 <typeinfo name for Minisat::BoolOption+0x7f8>
    0.00 :   9917:   mov    $0x1d9,%edx
    0.00 :   991c:   lea    0xa2ad(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   9923:   lea    0xac39(%rip),%rdi        # 14563 <typeinfo name for Minisat::BoolOption+0xc53>
    0.00 :   992a:   call   23b0 <__assert_fail@plt>
         : 472  assert(!frozen[v]);
    0.00 :   992f:   lea    0xa7d2(%rip),%rcx        # 14108 <typeinfo name for Minisat::BoolOption+0x7f8>
    0.00 :   9936:   mov    $0x1d8,%edx
    0.00 :   993b:   lea    0xa28e(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   9942:   lea    0xac0f(%rip),%rdi        # 14558 <typeinfo name for Minisat::BoolOption+0xc48>
    0.00 :   9949:   call   23b0 <__assert_fail@plt>
         : 528  }
    0.00 :   994e:   call   2410 <__stack_chk_fail@plt>
    0.00 :   9953:   nopl   0x0(%rax,%rax,1)
         : 531  Minisat::Solver::setDecisionVar(int, bool):
         : 334  else if (!b &&  decision[v]) dec_vars--;
    0.00 :   9958:   subq   $0x1,0xc8(%r15)
    0.00 :   9960:   jmp    96e8 <Minisat::SimpSolver::eliminateVar(int)+0x3d8>
         : 337  Minisat::SimpSolver::eliminateVar(int):
         : 501  for (int i = 0; i < neg.size(); i++)
    0.00 :   9965:   mov    0x8(%rsp),%r8d
    0.00 :   996a:   lea    0x2d8(%r15),%rbp
    0.00 :   9971:   test   %r8d,%r8d
    0.00 :   9974:   jle    99bc <Minisat::SimpSolver::eliminateVar(int)+0x6ac>
    0.00 :   9976:   mov    0x70(%rsp),%r12
    0.00 :   997b:   sub    $0x1,%eax
         : 502  mkElimClause(elimclauses, v, ca[neg[i]]);
    0.00 :   997e:   lea    0x2d8(%r15),%r13
    0.00 :   9985:   lea    0x4(%r12,%rax,4),%r14
    0.00 :   998a:   mov    (%r12),%eax
         : 506  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   998e:   cmp    0x230(%r15),%eax
    0.00 :   9995:   jae    98d2 <Minisat::SimpSolver::eliminateVar(int)+0x5c2>
    0.00 :   999b:   mov    0x228(%r15),%rdx
         : 66   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   99a2:   mov    %ebx,%esi
    0.00 :   99a4:   mov    %r13,%rdi
    0.00 :   99a7:   mov    %r13,%rbp
         : 505  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   99aa:   lea    (%rdx,%rax,4),%rdx
         : 64   Minisat::SimpSolver::eliminateVar(int):
    0.00 :   99ae:   call   6950 <mkElimClause(Minisat::vec<unsigned int>&, int, Minisat::Clause&)>
         : 501  for (int i = 0; i < neg.size(); i++)
    0.00 :   99b3:   add    $0x4,%r12
    0.00 :   99b7:   cmp    %r14,%r12
    0.00 :   99ba:   jne    998a <Minisat::SimpSolver::eliminateVar(int)+0x67a>
         : 505  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   99bc:   movslq 0x2e0(%r15),%rax
         : 76   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   99c3:   lea    (%rbx,%rbx,1),%r12d
         : 60   Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   99c7:   cmp    0x2e4(%r15),%eax
    0.00 :   99ce:   je     9c80 <Minisat::SimpSolver::eliminateVar(int)+0x970>
    0.00 :   99d4:   mov    0x2d8(%r15),%rdx
    0.00 :   99db:   lea    0x1(%rax),%ecx
    0.00 :   99de:   mov    %ecx,0x2e0(%r15)
    0.00 :   99e5:   mov    %r12d,(%rdx,%rax,4)
    0.00 :   99e9:   movslq 0x2e0(%r15),%rax
    0.00 :   99f0:   cmp    0x2e4(%r15),%eax
    0.00 :   99f7:   jne    97ca <Minisat::SimpSolver::eliminateVar(int)+0x4ba>
    0.00 :   99fd:   lea    0x1(%rax),%esi
    0.00 :   9a00:   mov    %rbp,%rdi
    0.00 :   9a03:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   9a08:   mov    0x2d8(%r15),%rdx
    0.00 :   9a0f:   movslq 0x2e0(%r15),%rax
    0.00 :   9a16:   jmp    97ca <Minisat::SimpSolver::eliminateVar(int)+0x4ba>
         : 89   Minisat::Solver::insertVarOrder(int):
         : 281  if (!order_heap.inHeap(x) && decision[x]) order_heap.insert(x); }
    0.00 :   9a1b:   mov    0x190(%r15),%rdx
    0.00 :   9a22:   mov    0x30(%rsp),%rdi
    0.00 :   9a27:   cmpb   $0x0,(%rdx,%rdi,1)
    0.00 :   9a2b:   je     9713 <Minisat::SimpSolver::eliminateVar(int)+0x403>
         : 286  Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 101  }
         :
         :
         : 104  void insert(int n)
         : 105  {
         : 106  indices.growTo(n+1, -1);
    0.00 :   9a31:   lea    0x1(%rbx),%ebp
         : 108  Minisat::vec<int>::growTo(int, int const&):
         : 106  if (sz >= size) return;
    0.00 :   9a34:   cmp    %ebp,%eax
    0.00 :   9a36:   jl     9c38 <Minisat::SimpSolver::eliminateVar(int)+0x928>
         : 109  Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   9a3c:   mov    0x208(%r15),%r12
    0.00 :   9a43:   mov    0x30(%rsp),%rbp
    0.00 :   9a48:   shl    $0x2,%rbp
    0.00 :   9a4c:   lea    (%r12,%rbp,1),%rcx
         : 91   Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   9a50:   cmp    %eax,%ebx
    0.00 :   9a52:   jge    9b7c <Minisat::SimpSolver::eliminateVar(int)+0x86c>
    0.00 :   9a58:   mov    (%rcx),%r9d
    0.00 :   9a5b:   test   %r9d,%r9d
    0.00 :   9a5e:   js     9b7c <Minisat::SimpSolver::eliminateVar(int)+0x86c>
         : 86   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 102  assert(!inHeap(n));
    0.00 :   9a64:   lea    0xa64d(%rip),%rcx        # 140b8 <typeinfo name for Minisat::BoolOption+0x7a8>
    0.00 :   9a6b:   mov    $0x66,%edx
    0.00 :   9a70:   lea    0xaa1c(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   9a77:   lea    0xaa23(%rip),%rdi        # 144a1 <typeinfo name for Minisat::BoolOption+0xb91>
    0.00 :   9a7e:   call   23b0 <__assert_fail@plt>
         : 108  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9a83:   lea    0x1(%rax),%esi
    0.00 :   9a86:   mov    %rbp,%rdi
    0.00 :   9a89:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   9a8e:   movslq 0x2e0(%r15),%rax
    0.00 :   9a95:   jmp    97a1 <Minisat::SimpSolver::eliminateVar(int)+0x491>
    0.00 :   9a9a:   nopw   0x0(%rax,%rax,1)
         : 81   Minisat::SimpSolver::eliminateVar(int):
         : 515  for (int i = 0; i < pos.size(); i++)
    0.00 :   9aa0:   add    $0x4,%rbp
    0.00 :   9aa4:   cmp    0x28(%rsp),%rbp
    0.00 :   9aa9:   jne    9835 <Minisat::SimpSolver::eliminateVar(int)+0x525>
         : 519  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9aaf:   mov    0x48(%rsp),%rbx
    0.00 :   9ab4:   add    0x2f8(%r15),%rbx
         : 90   Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   9abb:   mov    (%rbx),%rdi
    0.00 :   9abe:   test   %rdi,%rdi
    0.00 :   9ac1:   je     9add <Minisat::SimpSolver::eliminateVar(int)+0x7cd>
         : 124  sz = 0;
    0.00 :   9ac3:   movl   $0x0,0x8(%rbx)
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   9aca:   call   2440 <free@plt>
    0.00 :   9acf:   movq   $0x0,(%rbx)
    0.00 :   9ad6:   movl   $0x0,0xc(%rbx)
         : 129  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9add:   mov    0x138(%r15),%rbx
    0.00 :   9ae4:   movslq %r12d,%rbp
    0.00 :   9ae7:   shl    $0x4,%rbp
    0.00 :   9aeb:   add    %rbx,%rbp
         : 92   Minisat::SimpSolver::eliminateVar(int):
         : 524  if (watches[ mkLit(v)].size() == 0) watches[ mkLit(v)].clear(true);
    0.00 :   9aee:   mov    0x8(%rbp),%ecx
    0.00 :   9af1:   test   %ecx,%ecx
    0.00 :   9af3:   jne    9b19 <Minisat::SimpSolver::eliminateVar(int)+0x809>
         : 528  Minisat::vec<Minisat::Solver::Watcher>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   9af5:   mov    0x0(%rbp),%rdi
    0.00 :   9af9:   test   %rdi,%rdi
    0.00 :   9afc:   je     9b19 <Minisat::SimpSolver::eliminateVar(int)+0x809>
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   9afe:   call   2440 <free@plt>
    0.00 :   9b03:   movq   $0x0,0x0(%rbp)
         : 128  Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9b0b:   mov    0x138(%r15),%rbx
         : 89   Minisat::vec<Minisat::Solver::Watcher>::clear(bool):
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   9b12:   movl   $0x0,0xc(%rbp)
         : 127  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   9b19:   mov    %r12d,%eax
    0.00 :   9b1c:   xor    $0x1,%eax
         : 62   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9b1f:   cltq
    0.00 :   9b21:   shl    $0x4,%rax
    0.00 :   9b25:   add    %rax,%rbx
         : 91   Minisat::SimpSolver::eliminateVar(int):
         : 525  if (watches[~mkLit(v)].size() == 0) watches[~mkLit(v)].clear(true);
    0.00 :   9b28:   mov    0x8(%rbx),%edx
    0.00 :   9b2b:   test   %edx,%edx
    0.00 :   9b2d:   jne    9b4a <Minisat::SimpSolver::eliminateVar(int)+0x83a>
         : 529  Minisat::vec<Minisat::Solver::Watcher>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   9b2f:   mov    (%rbx),%rdi
    0.00 :   9b32:   test   %rdi,%rdi
    0.00 :   9b35:   je     9b4a <Minisat::SimpSolver::eliminateVar(int)+0x83a>
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   9b37:   call   2440 <free@plt>
    0.00 :   9b3c:   movq   $0x0,(%rbx)
    0.00 :   9b43:   movl   $0x0,0xc(%rbx)
         : 129  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 331  assert(decisionLevel() == 0);
    0.00 :   9b4a:   mov    0x1b8(%r15),%eax
    0.00 :   9b51:   test   %eax,%eax
    0.00 :   9b53:   jne    9c16 <Minisat::SimpSolver::eliminateVar(int)+0x906>
    0.00 :   9b59:   xor    %esi,%esi
    0.00 :   9b5b:   mov    %r15,%rdi
    0.00 :   9b5e:   call   8310 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]>
         : 338  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9b63:   mov    0x60(%rsp),%rbx
    0.00 :   9b68:   mov    %rbx,0x10(%rsp)
    0.00 :   9b6d:   mov    0x70(%rsp),%rbx
    0.00 :   9b72:   mov    %rbx,0x38(%rsp)
    0.00 :   9b77:   jmp    98c1 <Minisat::SimpSolver::eliminateVar(int)+0x5b1>
         : 93   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   9b7c:   mov    0x200(%r15),%eax
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         :
         : 105  indices[n] = heap.size();
    0.00 :   9b83:   mov    %eax,(%rcx)
         : 107  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9b85:   cmp    0x204(%r15),%eax
    0.00 :   9b8c:   je     9c9f <Minisat::SimpSolver::eliminateVar(int)+0x98f>
    0.00 :   9b92:   movslq 0x200(%r15),%rax
    0.00 :   9b99:   mov    0x1f8(%r15),%rdx
    0.00 :   9ba0:   lea    0x1(%rax),%esi
    0.00 :   9ba3:   mov    %esi,0x200(%r15)
    0.00 :   9baa:   mov    %ebx,(%rdx,%rax,4)
         : 82   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106  heap.push(n);
         : 107  percolateUp(indices[n]);
    0.00 :   9bad:   movslq (%rcx),%r8
         : 109  Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   9bb0:   lea    -0x1(%r8),%ecx
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.00 :   9bb4:   mov    (%rdx,%r8,4),%edi
         : 48   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106  percolateUp(indices[n]);
    0.00 :   9bb8:   mov    %r8,%rax
         : 108  Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   9bbb:   sar    %ecx
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   9bbd:   test   %r8d,%r8d
    0.00 :   9bc0:   je     9c97 <Minisat::SimpSolver::eliminateVar(int)+0x987>
         : 52   Minisat::vec<double>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   9bc6:   mov    0x1f0(%r15),%rsi
    0.00 :   9bcd:   mov    (%rsi),%r9
    0.00 :   9bd0:   movslq %edi,%rsi
         : 90   Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165  bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.00 :   9bd3:   movsd  (%r9,%rsi,8),%xmm0
    0.00 :   9bd9:   jmp    9bf5 <Minisat::SimpSolver::eliminateVar(int)+0x8e5>
         : 168  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    0.00 :   9bdb:   mov    %r10d,(%r8)
         : 52   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   9bde:   lea    -0x1(%rcx),%r8d
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 51   indices[heap[p]] = i;
    0.00 :   9be2:   mov    %eax,(%r12,%r10,4)
         : 53   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   9be6:   sar    %r8d
         : 43   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   9be9:   mov    %ecx,%eax
    0.00 :   9beb:   test   %ecx,%ecx
    0.00 :   9bed:   je     9c0b <Minisat::SimpSolver::eliminateVar(int)+0x8fb>
         : 53   p                = parent(p);
    0.00 :   9bef:   mov    %r8d,%ecx
    0.00 :   9bf2:   movslq %eax,%r8
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9bf5:   movslq %ecx,%r10
    0.00 :   9bf8:   lea    (%rdx,%r8,4),%r8
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   9bfc:   movslq (%rdx,%r10,4),%r10
    0.00 :   9c00:   comisd (%r9,%r10,8),%xmm0
    0.00 :   9c06:   ja     9bdb <Minisat::SimpSolver::eliminateVar(int)+0x8cb>
         : 53   Minisat::vec<int>::operator[](int):
    0.00 :   9c08:   mov    %r8,%rdx
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 55   heap   [i] = x;
    0.00 :   9c0b:   mov    %edi,(%rdx)
         : 56   indices[x] = i;
    0.00 :   9c0d:   mov    %eax,(%r12,%rsi,4)
         : 58   Minisat::Solver::insertVarOrder(int):
    0.00 :   9c11:   jmp    9713 <Minisat::SimpSolver::eliminateVar(int)+0x403>
         : 57   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   9c16:   lea    0xa36b(%rip),%rcx        # 13f88 <typeinfo name for Minisat::BoolOption+0x678>
    0.00 :   9c1d:   mov    $0x14b,%edx
    0.00 :   9c22:   lea    0x9fa7(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   9c29:   lea    0xa80f(%rip),%rdi        # 1443f <typeinfo name for Minisat::BoolOption+0xb2f>
    0.00 :   9c30:   call   23b0 <__assert_fail@plt>
    0.00 :   9c35:   nopl   (%rax)
         : 337  Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   9c38:   lea    0x208(%r15),%rdi
         : 103  Minisat::vec<int>::growTo(int, int const&):
         : 107  capacity(size);
    0.00 :   9c3f:   mov    %ebp,%esi
    0.00 :   9c41:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   9c46:   movslq 0x210(%r15),%rax
    0.00 :   9c4d:   mov    0x208(%r15),%r12
    0.00 :   9c54:   cmp    %eax,%ebp
    0.00 :   9c56:   jle    9c72 <Minisat::SimpSolver::eliminateVar(int)+0x962>
    0.00 :   9c58:   mov    %ebx,%edx
    0.00 :   9c5a:   lea    (%r12,%rax,4),%rdi
    0.00 :   9c5e:   mov    $0xff,%esi
    0.00 :   9c63:   sub    %eax,%edx
    0.00 :   9c65:   lea    0x4(,%rdx,4),%rdx
    0.00 :   9c6d:   call   2370 <memset@plt>
         : 109  sz = size; }
    0.00 :   9c72:   mov    %ebp,0x210(%r15)
    0.00 :   9c79:   mov    %ebp,%eax
    0.00 :   9c7b:   jmp    9a43 <Minisat::SimpSolver::eliminateVar(int)+0x733>
         : 113  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9c80:   lea    0x1(%rax),%esi
    0.00 :   9c83:   mov    %rbp,%rdi
    0.00 :   9c86:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   9c8b:   movslq 0x2e0(%r15),%rax
    0.00 :   9c92:   jmp    99d4 <Minisat::SimpSolver::eliminateVar(int)+0x6c4>
         : 80   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9c97:   movslq %edi,%rsi
    0.00 :   9c9a:   jmp    9c0b <Minisat::SimpSolver::eliminateVar(int)+0x8fb>
         : 90   Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   9c9f:   lea    0x1(%rax),%esi
         : 76   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 105  heap.push(n);
    0.00 :   9ca2:   lea    0x1f8(%r15),%rdi
         : 107  Minisat::vec<int>::push(int const&):
    0.00 :   9ca9:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 75   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   9cae:   mov    0x208(%r15),%r12
    0.00 :   9cb5:   lea    (%r12,%rbp,1),%rcx
    0.00 :   9cb9:   jmp    9b92 <Minisat::SimpSolver::eliminateVar(int)+0x882>
    0.00 :   9cbe:   endbr64
         : 92   Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   9cc2:   mov    %rax,%rbp
    0.00 :   9cc5:   jmp    27e8 <Minisat::SimpSolver::eliminateVar(int) [clone .cold]>
 Percent |	Source code & Disassembly of minisat for cycles:u (23 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000008310 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]>:
         : 6    Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 326  return result;
         : 327  }
         :
         :
         : 330  // Backward subsumption + backward subsumption resolution
         : 331  bool SimpSolver::backwardSubsumptionCheck(bool verbose)
    0.00 :   8310:   push   %r15
    0.00 :   8312:   push   %r14
    0.00 :   8314:   mov    %rdi,%r14
    0.00 :   8317:   push   %r13
    0.00 :   8319:   push   %r12
    0.00 :   831b:   push   %rbp
    0.00 :   831c:   push   %rbx
    0.00 :   831d:   sub    $0x48,%rsp
    0.00 :   8321:   mov    %sil,0x17(%rsp)
         : 341  Minisat::Queue<unsigned int>::size() const:
         : 42   typedef T Key;
         :
         : 44   Queue() : buf(1), first(0), end(0) {}
         :
         : 46   void clear (bool dealloc = false) { buf.clear(dealloc); buf.growTo(1); first = end = 0; }
         : 47   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   8326:   mov    %fs:0x28,%rax
    0.00 :   832f:   mov    %rax,0x38(%rsp)
    0.00 :   8334:   mov    0x378(%rdi),%eax
         : 51   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 330  {
         : 331  int cnt = 0;
         : 332  int subsumed = 0;
         : 333  int deleted_literals = 0;
    0.00 :   833a:   movl   $0x0,0x10(%rsp)
         : 329  int subsumed = 0;
    0.00 :   8342:   movl   $0x0,0x18(%rsp)
         : 328  int cnt = 0;
    0.00 :   834a:   movl   $0x0,0x1c(%rsp)
    0.00 :   8352:   nopw   0x0(%rax,%rax,1)
         : 331  Minisat::Queue<unsigned int>::size() const:
    0.00 :   8358:   movslq 0x37c(%r14),%rdx
    0.00 :   835f:   mov    %edx,%ebx
    0.00 :   8361:   sub    %eax,%ebx
    0.00 :   8363:   cmp    %eax,%edx
    0.00 :   8365:   jge    836e <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x5e>
    0.00 :   8367:   add    0x370(%r14),%ebx
         : 48   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 333  assert(decisionLevel() == 0);
         :
         : 335  while (subsumption_queue.size() > 0 || bwdsub_assigns < trail.size()){
    0.00 :   836e:   test   %ebx,%ebx
    0.00 :   8370:   jle    86d0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3c0>
         :
         : 337  // Empty subsumption queue and return immediately on user-interrupt:
         : 338  if (asynch_interrupt){
    0.00 :   8376:   cmpb   $0x0,0x2a8(%r14)
    0.00 :   837e:   jne    89c8 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x6b8>
         : 341  Minisat::Queue<unsigned int>::peek() const:
         :
         : 48   const T& operator [] (int index) const  { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
         : 49   T&       operator [] (int index)        { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
         :
         : 51   T    peek  () const { assert(first != end); return buf[first]; }
    3.80 :   8384:   cmp    %edx,%eax
    0.00 :   8386:   je     8b32 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x822>
         : 54   Minisat::vec<unsigned int>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   838c:   mov    0x370(%r14),%esi
         : 70   Minisat::vec<unsigned int>::operator[](int) const:
         :
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
    0.00 :   8393:   mov    0x368(%r14),%rdi
    0.00 :   839a:   movslq %eax,%rcx
         : 94   Minisat::Queue<unsigned int>::pop():
         : 48   void pop   () { assert(first != end); first++; if (first == buf.size()) first = 0; }
    0.00 :   839d:   add    $0x1,%eax
    0.00 :   83a0:   xor    %ebx,%ebx
    0.00 :   83a2:   cmp    %esi,%eax
         : 52   Minisat::Queue<unsigned int>::peek() const:
         : 47   T    peek  () const { assert(first != end); return buf[first]; }
    0.00 :   83a4:   mov    (%rdi,%rcx,4),%r15d
         : 49   Minisat::Queue<unsigned int>::pop():
         : 48   void pop   () { assert(first != end); first++; if (first == buf.size()) first = 0; }
    4.09 :   83a8:   cmove  %ebx,%eax
    0.00 :   83ab:   mov    %eax,0x378(%r14)
         : 51   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   83b2:   cmp    %r15d,0x230(%r14)
    0.00 :   83b9:   jbe    8a97 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x787>
    0.00 :   83bf:   mov    0x228(%r14),%rdi
    0.00 :   83c6:   mov    %r15d,%ecx
    0.00 :   83c9:   lea    (%rdi,%rcx,4),%rbp
         : 74   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 351  subsumption_queue.insert(bwdsub_tmpunit); }
         :
         : 353  CRef    cr = subsumption_queue.peek(); subsumption_queue.pop();
         : 354  Clause& c  = ca[cr];
         :
         : 356  if (c.mark()) continue;
    0.00 :   83cd:   testb  $0x3,0x0(%rbp)
    0.00 :   83d1:   jne    8358 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x48>
         :
         : 354  if (verbose && verbosity >= 2 && cnt++ % 1000 == 0)
    0.00 :   83d3:   cmpb   $0x0,0x17(%rsp)
    0.00 :   83d8:   je     8430 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x120>
    0.00 :   83da:   cmpl   $0x1,0x28(%r14)
    0.00 :   83df:   jle    8430 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x120>
    0.00 :   83e1:   mov    0x1c(%rsp),%ebx
    0.00 :   83e5:   imul   $0x26e978d5,%ebx,%ecx
    0.00 :   83eb:   add    $0x1,%ebx
    0.00 :   83ee:   mov    %ebx,0x1c(%rsp)
    0.00 :   83f2:   ror    $0x3,%ecx
    0.00 :   83f5:   cmp    $0x418937,%ecx
    0.00 :   83fb:   ja     8430 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x120>
         : 366  Minisat::Queue<unsigned int>::size() const:
         : 42   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   83fd:   mov    %edx,%r9d
         : 44   Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]:
         : 112  }
         :
         : 114  __fortify_function int
         : 115  printf (const char *__restrict __fmt, ...)
         : 116  {
         : 117  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   8400:   mov    0x10(%rsp),%r8d
         : 119  printf():
    0.00 :   8405:   mov    0x18(%rsp),%ecx
    0.00 :   8409:   mov    $0x1,%edi
         : 114  Minisat::Queue<unsigned int>::size() const:
    0.00 :   840e:   sub    %eax,%r9d
    0.00 :   8411:   add    %r9d,%esi
    0.00 :   8414:   cmp    %edx,%eax
    0.00 :   8416:   cmovg  %esi,%r9d
         : 46   printf():
    0.00 :   841a:   lea    0xbb27(%rip),%rsi        # 13f48 <typeinfo name for Minisat::BoolOption+0x638>
    0.00 :   8421:   xor    %eax,%eax
    0.00 :   8423:   mov    %r9d,%edx
    0.00 :   8426:   call   2320 <__printf_chk@plt>
    0.00 :   842b:   nopl   0x0(%rax,%rax,1)
         : 117  Minisat::Clause::size() const:
         : 162  for (int i = 0; i < size(); i++)
         : 163  abstraction |= 1 << (var(data[i].lit) & 31);
         : 164  data[header.size].abs = abstraction;  }
         :
         :
         : 167  int          size        ()      const   { return header.size; }
    0.00 :   8430:   mov    0x4(%rbp),%eax
    0.00 :   8433:   mov    0x0(%rbp),%edx
         : 170  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   8436:   mov    %eax,%ebx
         : 64   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   8438:   mov    %edx,%ecx
         : 164  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    4.11 :   843a:   sar    %ebx
         : 64   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   843c:   shr    $0x5,%ecx
         : 164  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   843f:   mov    %ebx,(%rsp)
         : 64   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   8442:   movslq %ebx,%r13
         : 87   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 356  printf("subsumption left: %10d (%10d subsumed, %10d deleted literals)\r", subsumption_queue.size(), subsumed, deleted_literals);
         :
         : 358  assert(c.size() > 1 || value(c[0]) == l_True);    // Unit-clauses should have been propagated before this point.
    0.00 :   8445:   cmp    $0x3f,%edx
    0.00 :   8448:   jbe    8930 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x620>
         : 361  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   844e:   mov    0x2f8(%r14),%r10
    0.00 :   8455:   mov    %r13,%r12
    0.00 :   8458:   lea    -0x2(%rcx),%eax
    0.00 :   845b:   mov    %ebx,%r9d
    0.00 :   845e:   shl    $0x4,%r12
         : 93   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         :
         : 360  // Find best variable to scan:
         : 361  Var best = var(c[0]);
    0.00 :   8462:   mov    %ebx,0x20(%rsp)
         : 360  for (int i = 1; i < c.size(); i++)
    0.00 :   8466:   lea    0x8(%rbp),%rdx
         : 362  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   846a:   xor    %ebx,%ebx
    0.00 :   846c:   mov    0x8(%r10,%r12,1),%r8d
    3.92 :   8471:   lea    0xc(%rbp,%rax,4),%r11
    0.00 :   8476:   jmp    8493 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x183>
    0.00 :   8478:   nopl   0x0(%rax,%rax,1)
         : 69   Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   8480:   movslq %r9d,%rcx
         : 89   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   8483:   add    $0x4,%rdx
         : 361  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
    0.00 :   8487:   mov    %rcx,%rsi
    0.00 :   848a:   shl    $0x4,%rsi
         : 89   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   848e:   cmp    %rdx,%r11
    0.00 :   8491:   je     84bf <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x1af>
         : 362  Minisat::var(Minisat::Lit):
    0.00 :   8493:   mov    (%rdx),%eax
    0.00 :   8495:   sar    %eax
         : 64   Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
    0.00 :   8497:   movslq %eax,%rcx
    0.00 :   849a:   mov    %rcx,%rsi
    0.00 :   849d:   shl    $0x4,%rsi
         : 90   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   84a1:   mov    0x8(%r10,%rsi,1),%edi
         : 65   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 361  if (occurs[var(c[i])].size() < occurs[best].size())
    4.83 :   84a6:   cmp    %r8d,%edi
    0.00 :   84a9:   jge    8480 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x170>
         : 360  for (int i = 1; i < c.size(); i++)
    0.00 :   84ab:   add    $0x4,%rdx
         : 361  if (occurs[var(c[i])].size() < occurs[best].size())
    0.00 :   84af:   mov    %edi,%r8d
         : 363  Minisat::var(Minisat::Lit):
    0.00 :   84b2:   mov    %eax,%r9d
         : 63   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   84b5:   mov    $0x1,%ebx
         : 360  for (int i = 1; i < c.size(); i++)
    0.00 :   84ba:   cmp    %rdx,%r11
    0.00 :   84bd:   jne    8493 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x183>
    0.00 :   84bf:   test   %bl,%bl
    0.00 :   84c1:   je     84d2 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x1c2>
    0.00 :   84c3:   mov    %r9d,0x20(%rsp)
    0.00 :   84c8:   mov    %rsi,%r12
    0.00 :   84cb:   mov    %rcx,%r13
    0.00 :   84ce:   mov    %r9d,(%rsp)
         : 369  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  OccLists(const Deleted& d) : deleted(d) {}
         :
         : 271  void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
         : 272  // Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 273  Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 274  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   84d2:   mov    0x308(%r14),%rax
    0.00 :   84d9:   cmpb   $0x0,(%rax,%r13,1)
    0.00 :   84de:   jne    8968 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x658>
         : 278  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   84e4:   add    0x2f8(%r14),%r12
         : 89   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         :
         : 369  // Search all candidates:
         : 370  vec<CRef>& _cs = occurs.lookup(best);
         : 371  CRef*       cs = (CRef*)_cs;
         :
         : 373  for (int j = 0; j < _cs.size(); j++)
    0.00 :   84eb:   mov    0x8(%r12),%ecx
         : 375  Minisat::vec<unsigned int>::operator unsigned int*():
         : 60   operator T*       (void)           { return data; }
    0.00 :   84f0:   mov    (%r12),%r13
         : 62   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   84f4:   test   %ecx,%ecx
    0.00 :   84f6:   jle    869b <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x38b>
    0.00 :   84fc:   xor    %ebx,%ebx
    0.00 :   84fe:   xchg   %ax,%ax
         : 372  Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   8500:   movzbl 0x0(%rbp),%edx
         : 169  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 369  if (c.mark())
    4.54 :   8504:   test   $0x3,%dl
    0.00 :   8507:   jne    869b <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x38b>
         : 371  break;
         : 372  else if (!ca[cs[j]].mark() &&  cs[j] != cr && (subsumption_lim == -1 || ca[cs[j]].size() < subsumption_lim)){
    0.00 :   850d:   movslq %ebx,%rax
    0.00 :   8510:   mov    0x0(%r13,%rax,4),%esi
         : 375  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    8.87 :   8515:   cmp    0x230(%r14),%esi
    0.00 :   851c:   jae    8a97 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x787>
    0.00 :   8522:   mov    0x228(%r14),%rcx
    0.00 :   8529:   mov    %esi,%eax
    0.00 :   852b:   lea    (%rcx,%rax,4),%rax
         : 68   Minisat::Clause::mark() const:
    3.65 :   852f:   movzbl (%rax),%ecx
         : 168  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    8.80 :   8532:   test   $0x3,%cl
    0.00 :   8535:   jne    86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
    0.00 :   853b:   cmp    %r15d,%esi
    0.00 :   853e:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
    0.00 :   8544:   mov    0x2b4(%r14),%r8d
    0.00 :   854b:   cmp    $0xffffffff,%r8d
    0.00 :   854f:   je     855f <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x24f>
         : 378  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   8551:   mov    (%rax),%edi
    0.00 :   8553:   shr    $0x5,%edi
         : 165  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   8556:   cmp    %edi,%r8d
   14.05 :   8559:   jle    86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 373  Minisat::Clause::subsumes(Minisat::Clause const&) const:
         : 371  |________________________________________________________________________________________________@*/
         : 372  inline Lit Clause::subsumes(const Clause& other) const
         : 373  {
         : 374  //if (other.size() < size() || (extra.abst & ~other.extra.abst) != 0)
         : 375  //if (other.size() < size() || (!learnt() && !other.learnt() && (extra.abst & ~other.extra.abst) != 0))
         : 376  assert(!header.learnt);   assert(!other.header.learnt);
    0.00 :   855f:   test   $0x4,%dl
    0.00 :   8562:   jne    8ad5 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x7c5>
    0.00 :   8568:   test   $0x4,%cl
    0.00 :   856b:   jne    8ab6 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x7a6>
         : 372  assert(header.has_extra); assert(other.header.has_extra);
    0.00 :   8571:   and    $0x8,%edx
    0.00 :   8574:   je     8b13 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x803>
    0.00 :   857a:   and    $0x8,%ecx
    0.00 :   857d:   je     8af4 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x7e4>
         : 373  if (other.header.size < header.size || (data[header.size].abs & ~other.data[other.header.size].abs) != 0)
    0.00 :   8583:   mov    (%rax),%r11d
    0.00 :   8586:   mov    0x0(%rbp),%r10d
    0.00 :   858a:   shr    $0x5,%r11d
    0.00 :   858e:   shr    $0x5,%r10d
    0.00 :   8592:   cmp    %r10d,%r11d
    0.00 :   8595:   jb     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
    0.00 :   859b:   movslq %r11d,%rdx
    4.17 :   859e:   movslq %r10d,%rcx
    0.00 :   85a1:   mov    0x4(%rax,%rdx,4),%edx
   21.89 :   85a5:   not    %edx
    0.00 :   85a7:   and    0x4(%rbp,%rcx,4),%edx
    0.00 :   85ab:   mov    %edx,0x4(%rsp)
    9.00 :   85af:   jne    86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         :
         : 381  Lit        ret = lit_Undef;
         : 382  const Lit* c   = (const Lit*)(*this);
         : 383  const Lit* d   = (const Lit*)other;
         :
         : 385  for (unsigned i = 0; i < header.size; i++) {
    0.00 :   85b5:   test   %r10d,%r10d
    0.00 :   85b8:   je     86bb <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3ab>
    0.00 :   85be:   lea    0x4(%rbp),%rdi
    0.00 :   85c2:   lea    -0x1(%r11),%edx
         : 376  Lit        ret = lit_Undef;
    0.00 :   85c6:   mov    $0xfffffffe,%r8d
    0.00 :   85cc:   mov    %rdi,0x8(%rsp)
    0.00 :   85d1:   lea    0x8(%rax,%rdx,4),%rdx
         : 382  // search for c[i] or ~c[i]
         : 383  for (unsigned j = 0; j < other.header.size; j++)
    0.00 :   85d6:   test   %r11d,%r11d
    0.00 :   85d9:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 386  Minisat::Lit::operator==(Minisat::Lit) const:
         : 52   bool operator == (Lit p) const { return x == p.x; }
    0.00 :   85df:   mov    0x8(%rsp),%rdi
    0.00 :   85e4:   mov    (%rdi),%edi
    0.00 :   85e6:   cmp    $0xfffffffe,%r8d
    0.00 :   85ea:   je     88e0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x5d0>
    0.00 :   85f0:   add    $0x4,%rax
    0.00 :   85f4:   mov    %rax,%rcx
    0.00 :   85f7:   jmp    860d <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x2fd>
    0.00 :   85f9:   nopl   0x0(%rax)
         : 61   Minisat::Clause::subsumes(Minisat::Clause const&) const:
         : 382  for (unsigned j = 0; j < other.header.size; j++)
    0.00 :   8600:   add    $0x4,%rcx
    0.00 :   8604:   cmp    %rcx,%rdx
    0.00 :   8607:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 383  if (c[i] == d[j])
    0.00 :   860d:   cmp    (%rcx),%edi
    0.00 :   860f:   jne    8600 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x2f0>
         : 380  for (unsigned i = 0; i < header.size; i++) {
    0.00 :   8611:   mov    0x4(%rsp),%r9d
    0.00 :   8616:   add    $0x1,%r9d
    0.00 :   861a:   cmp    %r9d,%r10d
    0.00 :   861d:   je     8650 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x340>
    0.00 :   861f:   mov    %r9d,%ecx
    0.00 :   8622:   lea    0x0(%rbp,%rcx,4),%r11
         : 387  Minisat::Lit::operator==(Minisat::Lit) const:
         : 52   bool operator == (Lit p) const { return x == p.x; }
    0.00 :   8627:   mov    0x4(%r11),%edi
    0.00 :   862b:   mov    %rax,%rcx
    0.00 :   862e:   jmp    8639 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x329>
         : 56   Minisat::Clause::subsumes(Minisat::Clause const&) const:
         : 382  for (unsigned j = 0; j < other.header.size; j++)
    0.00 :   8630:   add    $0x4,%rcx
    0.00 :   8634:   cmp    %rcx,%rdx
    0.00 :   8637:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 383  if (c[i] == d[j])
    0.00 :   8639:   cmp    %edi,(%rcx)
    0.00 :   863b:   jne    8630 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x320>
         : 380  for (unsigned i = 0; i < header.size; i++) {
    0.00 :   863d:   add    $0x1,%r9d
    0.00 :   8641:   add    $0x4,%r11
    0.00 :   8645:   cmp    %r9d,%r10d
    0.00 :   8648:   ja     8627 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x317>
    0.00 :   864a:   nopw   0x0(%rax,%rax,1)
         : 386  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 376  Lit l = c.subsumes(ca[cs[j]]);
         :
         : 378  if (l == lit_Undef)
         : 379  subsumed++, removeClause(cs[j]);
         : 380  else if (l != lit_Error){
    0.00 :   8650:   cmp    $0xffffffff,%r8d
    0.00 :   8654:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 383  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   8656:   mov    %r8d,%edx
         : 61   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 379  deleted_literals++;
         :
         : 381  if (!strengthenClause(cs[j], ~l))
    0.00 :   8659:   mov    %r14,%rdi
         : 377  deleted_literals++;
    0.00 :   865c:   addl   $0x1,0x10(%rsp)
         : 379  Minisat::operator~(Minisat::Lit):
    0.00 :   8661:   xor    $0x1,%edx
    0.00 :   8664:   mov    %r8d,0x4(%rsp)
         : 61   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 379  if (!strengthenClause(cs[j], ~l))
    0.00 :   8669:   call   6f60 <Minisat::SimpSolver::strengthenClause(unsigned int, Minisat::Lit)>
    0.00 :   866e:   test   %al,%al
    0.00 :   8670:   je     8a43 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x733>
         : 383  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   8676:   mov    0x4(%rsp),%r8d
         : 64   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 368  for (int j = 0; j < _cs.size(); j++)
    0.00 :   867b:   xor    %eax,%eax
         : 370  Minisat::var(Minisat::Lit):
    0.00 :   867d:   sar    %r8d
         : 63   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   8680:   cmp    (%rsp),%r8d
    0.00 :   8684:   setne  %al
    0.00 :   8687:   add    %eax,%ebx
    0.00 :   8689:   nopl   0x0(%rax)
    0.00 :   8690:   cmp    %ebx,0x8(%r12)
    4.27 :   8695:   jg     8500 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x1f0>
         : 374  Minisat::Queue<unsigned int>::size() const:
    0.00 :   869b:   mov    0x378(%r14),%eax
         : 43   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   86a2:   jmp    8358 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x48>
    0.00 :   86a7:   nopw   0x0(%rax,%rax,1)
    0.00 :   86b0:   add    $0x1,%ebx
    0.00 :   86b3:   jmp    8690 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x380>
         : 374  if (l == lit_Undef)
    0.00 :   86b5:   cmp    $0xfffffffe,%r8d
    0.00 :   86b9:   jne    8650 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x340>
         : 375  subsumed++, removeClause(cs[j]);
    0.00 :   86bb:   mov    %r14,%rdi
    0.00 :   86be:   addl   $0x1,0x18(%rsp)
         : 368  for (int j = 0; j < _cs.size(); j++)
    0.00 :   86c3:   add    $0x1,%ebx
         : 375  subsumed++, removeClause(cs[j]);
    0.00 :   86c6:   call   60f0 <Minisat::SimpSolver::removeClause(unsigned int)>
    0.00 :   86cb:   jmp    8690 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x380>
    0.00 :   86cd:   nopl   (%rax)
         : 333  while (subsumption_queue.size() > 0 || bwdsub_assigns < trail.size()){
    0.00 :   86d0:   movslq 0x3a0(%r14),%rcx
    0.00 :   86d7:   cmp    0x1a8(%r14),%ecx
    0.00 :   86de:   jge    8a90 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x780>
         : 336  if (asynch_interrupt){
    0.00 :   86e4:   cmpb   $0x0,0x2a8(%r14)
    0.00 :   86ec:   jne    89c8 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x6b8>
         : 342  if (subsumption_queue.size() == 0 && bwdsub_assigns < trail.size()){
    0.00 :   86f2:   test   %ebx,%ebx
    0.00 :   86f4:   jne    8384 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x74>
         : 343  Lit l = trail[bwdsub_assigns++];
    0.00 :   86fa:   lea    0x1(%rcx),%eax
         : 344  ca[bwdsub_tmpunit][0] = l;
    0.00 :   86fd:   mov    0x3a8(%r14),%r10d
         : 343  Lit l = trail[bwdsub_assigns++];
    0.00 :   8704:   mov    %eax,0x3a0(%r14)
    0.00 :   870b:   mov    0x1a0(%r14),%rax
    0.00 :   8712:   mov    (%rax,%rcx,4),%ecx
         : 347  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   8715:   cmp    0x230(%r14),%r10d
    0.00 :   871c:   jae    8a97 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x787>
    0.00 :   8722:   mov    0x228(%r14),%rsi
    0.00 :   8729:   mov    %r10d,%eax
    0.00 :   872c:   lea    (%rsi,%rax,4),%r11
         : 68   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 344  ca[bwdsub_tmpunit][0] = l;
    0.00 :   8730:   mov    %ecx,0x4(%r11)
         : 346  Minisat::Clause::calcAbstraction():
         : 155  assert(header.has_extra);
    0.00 :   8734:   testb  $0x8,(%r11)
    0.00 :   8738:   je     8b90 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x880>
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   873e:   mov    (%r11),%r9d
    0.00 :   8741:   shr    $0x5,%r9d
    0.00 :   8745:   je     8a6e <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x75e>
    0.00 :   874b:   lea    -0x1(%r9),%ecx
    0.00 :   874f:   lea    0x4(%r11),%rax
         : 156  uint32_t abstraction = 0;
    0.00 :   8753:   xor    %esi,%esi
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   8755:   mov    $0x1,%edi
    0.00 :   875a:   lea    0x8(%r11,%rcx,4),%r8
    0.00 :   875f:   nop
         : 162  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   8760:   mov    (%rax),%ecx
         : 64   Minisat::Clause::calcAbstraction():
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   8762:   mov    %edi,%r15d
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   8765:   add    $0x4,%rax
         : 159  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   8769:   sar    %ecx
         : 64   Minisat::Clause::calcAbstraction():
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   876b:   shl    %cl,%r15d
    0.00 :   876e:   or     %r15d,%esi
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   8771:   cmp    %rax,%r8
    0.00 :   8774:   jne    8760 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x450>
         : 160  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   8776:   mov    0x368(%r14),%rdi
         : 89   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 50   void insert(T elem) {   // INVARIANT: buf[end] is always unused
         : 51   buf[end++] = elem;
    0.00 :   877d:   lea    0x1(%rdx),%eax
         : 53   Minisat::Clause::calcAbstraction():
         : 159  data[header.size].abs = abstraction;  }
    0.00 :   8780:   movslq %r9d,%r9
    0.00 :   8783:   mov    %esi,0x4(%r11,%r9,4)
         : 162  Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   8788:   mov    %eax,0x37c(%r14)
         : 51   if (end == buf.size()) end = 0;
    0.00 :   878f:   xor    %eax,%eax
         : 50   buf[end++] = elem;
    0.00 :   8791:   mov    %r10d,(%rdi,%rdx,4)
         : 51   if (end == buf.size()) end = 0;
    0.00 :   8795:   mov    0x37c(%r14),%edx
         : 53   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   879c:   mov    0x370(%r14),%esi
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   87a3:   cmp    %esi,%edx
    0.00 :   87a5:   cmove  %eax,%edx
         : 52   if (first == end){  // Resize:
    0.00 :   87a8:   mov    0x378(%r14),%eax
    0.00 :   87af:   mov    %edx,0x37c(%r14)
    0.00 :   87b6:   cmp    %eax,%edx
    0.00 :   87b8:   jne    839a <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x8a>
         : 57   Minisat::vec<unsigned int>::vec(int):
         : 55   explicit vec(int size)      : data(NULL) , sz(0)   , cap(0)    { growTo(size); }
    0.00 :   87be:   movq   $0x0,0x20(%rsp)
         : 57   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 53   vec<T>  tmp((buf.size()*3 + 1) >> 1);
    0.00 :   87c7:   lea    0x1(%rsi,%rsi,2),%ebp
         : 55   Minisat::vec<unsigned int>::vec(int):
    0.00 :   87cb:   movq   $0x0,0x28(%rsp)
         : 56   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   87d4:   sar    %ebp
         : 54   Minisat::vec<unsigned int>::growTo(int):
         : 114  sz = size; }
         :
         :
         : 117  template<class T>
         : 118  void vec<T>::growTo(int size) {
         : 119  if (sz >= size) return;
    0.00 :   87d6:   test   %ebp,%ebp
    0.00 :   87d8:   jle    897e <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x66e>
         : 115  capacity(size);
    0.00 :   87de:   lea    0x20(%rsp),%rdi
    0.00 :   87e3:   mov    %ebp,%esi
    0.00 :   87e5:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   87ea:   movslq 0x28(%rsp),%rax
    0.00 :   87ef:   mov    0x20(%rsp),%r12
    0.00 :   87f4:   cmp    %eax,%ebp
    0.00 :   87f6:   jle    8812 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x502>
    0.00 :   87f8:   mov    %ebp,%edx
    0.00 :   87fa:   lea    (%r12,%rax,4),%rdi
    0.00 :   87fe:   xor    %esi,%esi
    0.00 :   8800:   sub    %eax,%edx
    0.00 :   8802:   sub    $0x1,%edx
    0.00 :   8805:   lea    0x4(,%rdx,4),%rdx
    0.00 :   880d:   call   2370 <memset@plt>
         : 128  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 56   //**/printf("queue alloc: %d elems (%.1f MB)\n", tmp.size(), tmp.size() * sizeof(T) / 1000000.0);
         : 57   int     i = 0;
         : 58   for (int j = first; j < buf.size(); j++) tmp[i++] = buf[j];
    0.00 :   8812:   mov    0x378(%r14),%eax
         : 60   Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   8819:   mov    0x2c(%rsp),%r13d
         : 93   Minisat::vec<unsigned int>::growTo(int):
         : 117  sz = size; }
    0.00 :   881e:   mov    %ebp,0x28(%rsp)
         : 119  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   8822:   mov    0x370(%r14),%esi
         : 65   Minisat::vec<unsigned int>::clear(bool):
         :
         :
         : 124  template<class T>
         : 125  void vec<T>::clear(bool dealloc) {
         : 126  if (data != NULL){
    0.00 :   8829:   mov    0x368(%r14),%rdi
         : 128  Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   8830:   cmp    %esi,%eax
    0.00 :   8832:   jge    898e <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x67e>
    0.00 :   8838:   movslq %eax,%rdx
    0.00 :   883b:   mov    %rdx,%rcx
    0.00 :   883e:   neg    %rcx
    0.00 :   8841:   lea    (%r12,%rcx,4),%rsi
    0.00 :   8845:   mov    $0x1,%ecx
    0.00 :   884a:   sub    %eax,%ecx
    0.00 :   884c:   nopl   0x0(%rax)
    0.00 :   8850:   mov    (%rdi,%rdx,4),%eax
    0.00 :   8853:   lea    (%rcx,%rdx,1),%ebx
    0.00 :   8856:   mov    %eax,(%rsi,%rdx,4)
         : 68   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   8859:   mov    0x370(%r14),%eax
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   8860:   add    $0x1,%rdx
    0.00 :   8864:   cmp    %edx,%eax
    0.00 :   8866:   jg     8850 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x540>
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   8868:   mov    0x37c(%r14),%edx
    0.00 :   886f:   test   %edx,%edx
    0.00 :   8871:   jle    8b75 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x865>
    0.00 :   8877:   movslq %ebx,%rbx
         : 62   Minisat::vec<unsigned int>::growTo(int):
    0.00 :   887a:   xor    %eax,%eax
    0.00 :   887c:   lea    (%r12,%rbx,4),%rcx
         : 59   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   8880:   mov    (%rdi,%rax,4),%edx
    0.00 :   8883:   mov    %edx,(%rcx,%rax,4)
    0.00 :   8886:   add    $0x1,%rax
    0.00 :   888a:   cmp    %eax,0x37c(%r14)
    0.00 :   8891:   jg     8880 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x570>
         : 62   Minisat::vec<unsigned int>::size() const:
    0.00 :   8893:   mov    0x370(%r14),%eax
         : 64   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 58   first = 0;
    0.00 :   889a:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   88a5:   mov    %eax,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 125  for (int i = 0; i < sz; i++) data[i].~T();
         : 126  sz = 0;
         : 127  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   88ac:   call   2440 <free@plt>
         : 129  Minisat::Queue<unsigned int>::peek() const:
         : 47   T    peek  () const { assert(first != end); return buf[first]; }
    0.00 :   88b1:   mov    0x378(%r14),%eax
    0.00 :   88b8:   mov    0x37c(%r14),%edx
         : 50   Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   88bf:   mov    %r12,0x368(%r14)
    0.00 :   88c6:   mov    %ebp,0x370(%r14)
    0.00 :   88cd:   mov    %r13d,0x374(%r14)
         : 95   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   88d4:   jmp    8384 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x74>
    0.00 :   88d9:   nopl   0x0(%rax)
    0.00 :   88e0:   lea    0x4(%rax),%rcx
    0.00 :   88e4:   jmp    890a <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x5fa>
    0.00 :   88e6:   cs nopw 0x0(%rax,%rax,1)
         : 127  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   88f0:   xor    $0x1,%r9d
         : 61   Minisat::Clause::subsumes(Minisat::Clause const&) const:
         : 385  goto ok;
         : 386  else if (ret == lit_Undef && c[i] == ~d[j]){
    0.00 :   88f4:   cmp    %r9d,%edi
    0.00 :   88f7:   je     8a66 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x756>
         : 382  for (unsigned j = 0; j < other.header.size; j++)
    0.00 :   88fd:   add    $0x4,%rcx
    0.00 :   8901:   cmp    %rdx,%rcx
    0.00 :   8904:   je     86b0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a0>
         : 383  if (c[i] == d[j])
    0.00 :   890a:   mov    (%rcx),%r9d
    0.00 :   890d:   cmp    %edi,%r9d
    0.00 :   8910:   jne    88f0 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x5e0>
         : 380  for (unsigned i = 0; i < header.size; i++) {
    0.00 :   8912:   addl   $0x1,0x4(%rsp)
    0.00 :   8917:   mov    0x4(%rsp),%edi
    0.00 :   891b:   cmp    %edi,%r10d
    0.00 :   891e:   je     86b5 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x3a5>
    0.00 :   8924:   addq   $0x4,0x8(%rsp)
    0.00 :   892a:   jmp    85d6 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x2c6>
    0.00 :   892f:   nop
         : 388  Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   8930:   mov    0x170(%r14),%rdx
         : 101  Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   8937:   and    $0x1,%eax
         : 63   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 356  assert(c.size() > 1 || value(c[0]) == l_True);    // Unit-clauses should have been propagated before this point.
    0.00 :   893a:   cmp    %al,(%rdx,%r13,1)
    0.00 :   893e:   jne    8b56 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x846>
         : 359  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   8944:   mov    0x308(%r14),%rax
         : 271  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   894b:   mov    %r13,%r12
         : 89   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 359  Var best = var(c[0]);
    0.00 :   894e:   mov    %ebx,0x20(%rsp)
         : 361  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
    0.00 :   8952:   shl    $0x4,%r12
         : 88   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
    0.00 :   8956:   cmpb   $0x0,(%rax,%r13,1)
    0.00 :   895b:   je     84e4 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x1d4>
    0.00 :   8961:   nopl   0x0(%rax)
    0.00 :   8968:   lea    0x20(%rsp),%rsi
         : 273  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 365  vec<CRef>& _cs = occurs.lookup(best);
    0.00 :   896d:   lea    0x2f8(%r14),%rdi
         : 367  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
    0.00 :   8974:   call   b5e0 <Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::clean(int const&)>
    0.00 :   8979:   jmp    84e4 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x1d4>
         : 271  Minisat::vec<unsigned int>::growTo(int):
    0.00 :   897e:   xor    %r13d,%r13d
    0.00 :   8981:   xor    %ebp,%ebp
    0.00 :   8983:   xor    %r12d,%r12d
         : 272  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 56   for (int j = first; j < buf.size(); j++) tmp[i++] = buf[j];
    0.00 :   8986:   cmp    %esi,%eax
    0.00 :   8988:   jl     8838 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x528>
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   898e:   mov    0x37c(%r14),%r8d
    0.00 :   8995:   test   %r8d,%r8d
    0.00 :   8998:   jg     8877 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x567>
         : 58   first = 0;
    0.00 :   899e:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   89a9:   mov    %esi,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   89b0:   test   %rdi,%rdi
    0.00 :   89b3:   jne    88ac <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x59c>
    0.00 :   89b9:   mov    %esi,%edx
    0.00 :   89bb:   xor    %eax,%eax
    0.00 :   89bd:   jmp    88bf <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x5af>
    0.00 :   89c2:   nopw   0x0(%rax,%rax,1)
    0.00 :   89c8:   cmpq   $0x0,0x368(%r14)
    0.00 :   89d0:   je     8a75 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x765>
         : 124  sz = 0;
    0.00 :   89d6:   movl   $0x0,0x370(%r14)
         : 126  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 337  subsumption_queue.clear();
    0.00 :   89e1:   lea    0x368(%r14),%rdi
         : 339  Minisat::vec<unsigned int>::growTo(int):
         : 115  capacity(size);
    0.00 :   89e8:   mov    $0x1,%esi
    0.00 :   89ed:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   89f2:   movslq 0x370(%r14),%rax
    0.00 :   89f9:   test   %eax,%eax
    0.00 :   89fb:   jg     8a1a <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x70a>
    0.00 :   89fd:   mov    0x368(%r14),%rcx
    0.00 :   8a04:   mov    $0x1,%edx
    0.00 :   8a09:   xor    %esi,%esi
    0.00 :   8a0b:   sub    %eax,%edx
    0.00 :   8a0d:   shl    $0x2,%rdx
    0.00 :   8a11:   lea    (%rcx,%rax,4),%rdi
    0.00 :   8a15:   call   2370 <memset@plt>
         : 117  sz = size; }
    0.00 :   8a1a:   movl   $0x1,0x370(%r14)
         : 119  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 338  bwdsub_assigns = trail.size();
    0.00 :   8a25:   mov    0x1a8(%r14),%eax
         : 340  Minisat::Queue<unsigned int>::clear(bool):
         : 41   void clear (bool dealloc = false) { buf.clear(dealloc); buf.growTo(1); first = end = 0; }
    0.00 :   8a2c:   movq   $0x0,0x378(%r14)
         : 43   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
    0.00 :   8a37:   mov    %eax,0x3a0(%r14)
         : 389  j--;
         : 390  }
         : 391  }
         : 392  }
         :
         : 394  return true;
    0.00 :   8a3e:   mov    $0x1,%eax
         : 390  }
    0.00 :   8a43:   mov    0x38(%rsp),%rdx
    0.00 :   8a48:   sub    %fs:0x28,%rdx
    0.00 :   8a51:   jne    8b51 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x841>
    0.00 :   8a57:   add    $0x48,%rsp
    0.00 :   8a5b:   pop    %rbx
    0.00 :   8a5c:   pop    %rbp
    0.00 :   8a5d:   pop    %r12
    0.00 :   8a5f:   pop    %r13
    0.00 :   8a61:   pop    %r14
    0.00 :   8a63:   pop    %r15
    0.00 :   8a65:   ret
         : 402  Minisat::Clause::subsumes(Minisat::Clause const&) const:
    0.00 :   8a66:   mov    %edi,%r8d
    0.00 :   8a69:   jmp    8912 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x602>
         : 392  Minisat::Clause::calcAbstraction():
         : 156  uint32_t abstraction = 0;
    0.00 :   8a6e:   xor    %esi,%esi
    0.00 :   8a70:   jmp    8776 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x466>
         : 159  Minisat::vec<unsigned int>::growTo(int):
         : 114  if (sz >= size) return;
    0.00 :   8a75:   mov    0x370(%r14),%r9d
    0.00 :   8a7c:   test   %r9d,%r9d
    0.00 :   8a7f:   jg     8a25 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x715>
    0.00 :   8a81:   jmp    89e1 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x6d1>
    0.00 :   8a86:   cs nopw 0x0(%rax,%rax,1)
         : 120  Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 389  return true;
    0.00 :   8a90:   mov    $0x1,%eax
    0.00 :   8a95:   jmp    8a43 <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x733>
         : 392  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   8a97:   lea    0xaf9a(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   8a9e:   mov    $0x3f,%edx
    0.00 :   8aa3:   lea    0xaf70(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   8aaa:   lea    0xb967(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   8ab1:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::Clause::subsumes(Minisat::Clause const&) const:
         : 371  assert(!header.learnt);   assert(!other.header.learnt);
    0.00 :   8ab6:   lea    0xb533(%rip),%rcx        # 13ff0 <typeinfo name for Minisat::BoolOption+0x6e0>
    0.00 :   8abd:   mov    $0x173,%edx
    0.00 :   8ac2:   lea    0xb960(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   8ac9:   lea    0xba5c(%rip),%rdi        # 1452c <typeinfo name for Minisat::BoolOption+0xc1c>
    0.00 :   8ad0:   call   23b0 <__assert_fail@plt>
    0.00 :   8ad5:   lea    0xb514(%rip),%rcx        # 13ff0 <typeinfo name for Minisat::BoolOption+0x6e0>
    0.00 :   8adc:   mov    $0x173,%edx
    0.00 :   8ae1:   lea    0xb941(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   8ae8:   lea    0xba2e(%rip),%rdi        # 1451d <typeinfo name for Minisat::BoolOption+0xc0d>
    0.00 :   8aef:   call   23b0 <__assert_fail@plt>
         : 372  assert(header.has_extra); assert(other.header.has_extra);
    0.00 :   8af4:   lea    0xb4f5(%rip),%rcx        # 13ff0 <typeinfo name for Minisat::BoolOption+0x6e0>
    0.00 :   8afb:   mov    $0x174,%edx
    0.00 :   8b00:   lea    0xb922(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   8b07:   lea    0xba33(%rip),%rdi        # 14541 <typeinfo name for Minisat::BoolOption+0xc31>
    0.00 :   8b0e:   call   23b0 <__assert_fail@plt>
    0.00 :   8b13:   lea    0xb4d6(%rip),%rcx        # 13ff0 <typeinfo name for Minisat::BoolOption+0x6e0>
    0.00 :   8b1a:   mov    $0x174,%edx
    0.00 :   8b1f:   lea    0xb903(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   8b26:   lea    0xba1a(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   8b2d:   call   23b0 <__assert_fail@plt>
         : 383  Minisat::Queue<unsigned int>::peek() const:
         : 47   T    peek  () const { assert(first != end); return buf[first]; }
    0.00 :   8b32:   lea    0xb3cf(%rip),%rcx        # 13f08 <typeinfo name for Minisat::BoolOption+0x5f8>
    0.00 :   8b39:   mov    $0x2f,%edx
    0.00 :   8b3e:   lea    0xb9bc(%rip),%rsi        # 14501 <typeinfo name for Minisat::BoolOption+0xbf1>
    0.00 :   8b45:   lea    0xb9c4(%rip),%rdi        # 14510 <typeinfo name for Minisat::BoolOption+0xc00>
    0.00 :   8b4c:   call   23b0 <__assert_fail@plt>
         : 53   Minisat::SimpSolver::backwardSubsumptionCheck(bool):
         : 390  }
    0.00 :   8b51:   call   2410 <__stack_chk_fail@plt>
         : 356  assert(c.size() > 1 || value(c[0]) == l_True);    // Unit-clauses should have been propagated before this point.
    0.00 :   8b56:   lea    0xb42b(%rip),%rcx        # 13f88 <typeinfo name for Minisat::BoolOption+0x678>
    0.00 :   8b5d:   mov    $0x164,%edx
    0.00 :   8b62:   lea    0xb067(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   8b69:   lea    0xb458(%rip),%rdi        # 13fc8 <typeinfo name for Minisat::BoolOption+0x6b8>
    0.00 :   8b70:   call   23b0 <__assert_fail@plt>
         : 362  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 58   first = 0;
    0.00 :   8b75:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   8b80:   mov    %eax,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   8b87:   jmp    88ac <Minisat::SimpSolver::backwardSubsumptionCheck(bool) [clone .part.0]+0x59c>
    0.00 :   8b8c:   nopl   0x0(%rax)
         : 124  Minisat::Clause::calcAbstraction():
         : 155  assert(header.has_extra);
    0.00 :   8b90:   lea    0xb1d9(%rip),%rcx        # 13d70 <typeinfo name for Minisat::BoolOption+0x460>
    0.00 :   8b97:   mov    $0x9b,%edx
    0.00 :   8b9c:   lea    0xb886(%rip),%rsi        # 14429 <typeinfo name for Minisat::BoolOption+0xb19>
    0.00 :   8ba3:   lea    0xb99d(%rip),%rdi        # 14547 <typeinfo name for Minisat::BoolOption+0xc37>
    0.00 :   8baa:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (25 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000006a70 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)>:
         : 6    Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 136  }
         :
         :
         :
         : 140  bool SimpSolver::addClause_(vec<Lit>& ps)
         : 141  {
    0.00 :   6a70:   endbr64
    0.00 :   6a74:   push   %r15
    0.00 :   6a76:   push   %r14
    0.00 :   6a78:   mov    %rdi,%r14
    0.00 :   6a7b:   push   %r13
    0.00 :   6a7d:   push   %r12
    0.00 :   6a7f:   push   %rbp
    0.00 :   6a80:   mov    %rsi,%rbp
    0.00 :   6a83:   push   %rbx
    0.00 :   6a84:   sub    $0x58,%rsp
         : 152  Minisat::vec<Minisat::Lit>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   6a88:   mov    %fs:0x28,%rax
    0.00 :   6a91:   mov    %rax,0x48(%rsp)
    0.00 :   6a96:   mov    0x8(%rsi),%eax
         : 72   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 138  #ifndef NDEBUG
         : 139  for (int i = 0; i < ps.size(); i++)
    0.00 :   6a99:   test   %eax,%eax
    0.00 :   6a9b:   jle    6ac9 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x59>
    0.00 :   6a9d:   mov    (%rsi),%rdx
    0.00 :   6aa0:   sub    $0x1,%eax
         : 144  Minisat::vec<char>::operator[](int) const:
         :
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6aa3:   mov    0x390(%rdi),%rcx
    0.00 :   6aaa:   lea    0x4(%rdx,%rax,4),%rdi
    0.00 :   6aaf:   nop
         : 95   Minisat::var(Minisat::Lit):
         :
         : 63   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
         : 64   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
         : 65   inline  Lit  operator ^(Lit p, bool b)      { Lit q; q.x = p.x ^ (unsigned int)b; return q; }
         : 66   inline  bool sign      (Lit p)              { return p.x & 1; }
         : 67   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   6ab0:   mov    (%rdx),%eax
    0.00 :   6ab2:   sar    %eax
         : 70   Minisat::vec<char>::operator[](int) const:
    0.00 :   6ab4:   cltq
         : 87   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 139  assert(!isEliminated(var(ps[i])));
    0.00 :   6ab6:   cmpb   $0x0,(%rcx,%rax,1)
    0.00 :   6aba:   jne    6ed3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x463>
         : 138  for (int i = 0; i < ps.size(); i++)
    0.00 :   6ac0:   add    $0x4,%rdx
    0.00 :   6ac4:   cmp    %rdi,%rdx
    0.00 :   6ac7:   jne    6ab0 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x40>
         : 144  #endif
         :
         : 146  int nclauses = clauses.size();
         :
         : 148  if (use_rcheck && implied(ps))
    0.00 :   6ac9:   cmpb   $0x0,0x2c1(%r14)
         : 150  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6ad1:   mov    0x100(%r14),%ebx
         : 65   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   6ad8:   jne    6b20 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0xb0>
         : 147  return true;
         :
         : 149  if (!Solver::addClause_(ps))
    0.00 :   6ada:   mov    %rbp,%rsi
    0.00 :   6add:   mov    %r14,%rdi
    0.00 :   6ae0:   call   f9e0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)>
    0.00 :   6ae5:   test   %al,%al
    0.00 :   6ae7:   je     6af8 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x88>
         : 150  return false;
         :
         : 152  if (use_simplification && clauses.size() == nclauses + 1){
    0.00 :   6ae9:   cmpb   $0x0,0x2d4(%r14)
    0.00 :   6af1:   jne    6b38 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0xc8>
         : 145  return true;
    3.76 :   6af3:   mov    $0x1,%eax
         : 172  elim_heap.increase(var(c[i]));
         : 173  }
         : 174  }
         :
         : 176  return true;
         : 177  }
    0.00 :   6af8:   mov    0x48(%rsp),%rdx
    0.00 :   6afd:   sub    %fs:0x28,%rdx
    3.79 :   6b06:   jne    6f56 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x4e6>
    3.64 :   6b0c:   add    $0x58,%rsp
    0.00 :   6b10:   pop    %rbx
    0.00 :   6b11:   pop    %rbp
    4.21 :   6b12:   pop    %r12
    0.00 :   6b14:   pop    %r13
    0.00 :   6b16:   pop    %r14
    0.00 :   6b18:   pop    %r15
    0.00 :   6b1a:   ret
    0.00 :   6b1b:   nopl   0x0(%rax,%rax,1)
         : 144  if (use_rcheck && implied(ps))
    0.00 :   6b20:   mov    %rbp,%rsi
    0.00 :   6b23:   mov    %r14,%rdi
    0.00 :   6b26:   call   5f90 <Minisat::SimpSolver::implied(Minisat::vec<Minisat::Lit> const&)>
    0.00 :   6b2b:   test   %al,%al
    0.00 :   6b2d:   je     6ada <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x6a>
    0.00 :   6b2f:   jmp    6af3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x83>
    0.00 :   6b31:   nopl   0x0(%rax)
         : 150  if (use_simplification && clauses.size() == nclauses + 1){
    0.00 :   6b38:   add    $0x1,%ebx
    0.00 :   6b3b:   cmp    0x100(%r14),%ebx
    0.00 :   6b42:   jne    6af3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x83>
         : 151  CRef          cr = clauses.last();
    0.00 :   6b44:   mov    0xf8(%r14),%rax
         : 153  Minisat::vec<unsigned int>::last():
         : 83   T&       last  (void)              { return data[sz-1]; }
    0.00 :   6b4b:   movslq %ebx,%rbx
         : 85   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   6b4e:   mov    -0x4(%rax,%rbx,4),%r15d
         : 152  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    4.38 :   6b53:   cmp    0x230(%r14),%r15d
    0.00 :   6b5a:   jae    6f37 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x4c7>
    0.00 :   6b60:   mov    0x228(%r14),%rdx
    0.00 :   6b67:   mov    %r15d,%eax
         : 73   Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6b6a:   mov    0x368(%r14),%rdi
         : 89   Minisat::Queue<unsigned int>::insert(unsigned int):
         :
         : 52   T    peek  () const { assert(first != end); return buf[first]; }
         : 53   void pop   () { assert(first != end); first++; if (first == buf.size()) first = 0; }
         : 54   void insert(T elem) {   // INVARIANT: buf[end] is always unused
         : 55   buf[end++] = elem;
         : 56   if (end == buf.size()) end = 0;
    0.00 :   6b71:   xor    %ecx,%ecx
         : 58   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   6b73:   lea    (%rdx,%rax,4),%r13
         : 64   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 50   buf[end++] = elem;
    0.00 :   6b77:   movslq 0x37c(%r14),%rax
    0.00 :   6b7e:   lea    0x1(%rax),%edx
    0.00 :   6b81:   mov    %edx,0x37c(%r14)
    0.00 :   6b88:   mov    %r15d,(%rdi,%rax,4)
         : 51   if (end == buf.size()) end = 0;
    0.00 :   6b8c:   mov    0x37c(%r14),%edx
         : 53   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6b93:   mov    0x370(%r14),%eax
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   6b9a:   cmp    %eax,%edx
    0.00 :   6b9c:   cmove  %ecx,%edx
    0.00 :   6b9f:   mov    %edx,0x37c(%r14)
         : 52   if (first == end){  // Resize:
    0.00 :   6ba6:   cmp    %edx,0x378(%r14)
    0.00 :   6bad:   je     6d9c <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32c>
         : 55   Minisat::Clause::size() const:
         : 162  for (int i = 0; i < size(); i++)
         : 163  abstraction |= 1 << (var(data[i].lit) & 31);
         : 164  data[header.size].abs = abstraction;  }
         :
         :
         : 167  int          size        ()      const   { return header.size; }
    0.00 :   6bb3:   mov    0x0(%r13),%eax
         : 169  Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 161  for (int i = 0; i < c.size(); i++){
    0.00 :   6bb7:   shr    $0x5,%eax
    0.00 :   6bba:   je     6af3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x83>
    0.00 :   6bc0:   mov    %r15d,0x28(%rsp)
    0.00 :   6bc5:   xor    %r11d,%r11d
    0.00 :   6bc8:   mov    %r11,%rbx
         : 164  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   6bcb:   mov    0x4(%r13,%rbx,4),%ebp
    0.00 :   6bd0:   sar    %ebp
         : 65   Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6bd2:   movslq %ebp,%rbp
    0.00 :   6bd5:   shl    $0x4,%rbp
    3.95 :   6bd9:   add    0x2f8(%r14),%rbp
         : 91   Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    4.03 :   6be0:   movslq 0x8(%rbp),%rax
    3.97 :   6be4:   cmp    0xc(%rbp),%eax
    0.00 :   6be7:   je     6d88 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x318>
    0.00 :   6bed:   mov    0x0(%rbp),%rdx
    0.00 :   6bf1:   mov    0x28(%rsp),%esi
    4.30 :   6bf5:   lea    0x1(%rax),%ecx
    0.00 :   6bf8:   mov    %ecx,0x8(%rbp)
    0.00 :   6bfb:   mov    %esi,(%rdx,%rax,4)
         : 83   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    3.65 :   6bfe:   mov    0x330(%r14),%rax
    0.00 :   6c05:   movslq 0x4(%r13,%rbx,4),%rdx
         : 90   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 163  n_occ[toInt(c[i])]++;
    0.00 :   6c0a:   addl   $0x1,(%rax,%rdx,4)
         : 165  Minisat::var(Minisat::Lit):
    0.00 :   6c0e:   mov    0x4(%r13,%rbx,4),%eax
         : 63   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 164  touched[var(c[i])] = 1;
    0.00 :   6c13:   mov    0x2e8(%r14),%rdx
         : 166  Minisat::var(Minisat::Lit):
    0.00 :   6c1a:   sar    %eax
         : 63   Minisat::vec<char>::operator[](int):
    0.00 :   6c1c:   cltq
         : 88   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   6c1e:   movb   $0x1,(%rdx,%rax,1)
         : 165  Minisat::var(Minisat::Lit):
    4.11 :   6c22:   mov    0x4(%r13,%rbx,4),%eax
         : 63   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 165  n_touched++;
    0.00 :   6c27:   addl   $0x1,0x3a4(%r14)
         : 167  Minisat::var(Minisat::Lit):
    0.00 :   6c2f:   sar    %eax
         : 63   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   public:
         : 81   Heap(const Comp& c) : lt(c) { }
         :
         : 83   int  size      ()          const { return heap.size(); }
         : 84   bool empty     ()          const { return heap.size() == 0; }
         : 85   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   6c31:   cmp    %eax,0x360(%r14)
    0.00 :   6c38:   jle    6d70 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x300>
         : 88   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6c3e:   mov    0x358(%r14),%r10
    0.00 :   6c45:   cltq
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
    0.00 :   6c47:   mov    (%r10,%rax,4),%edx
    0.00 :   6c4b:   test   %edx,%edx
    0.00 :   6c4d:   js     6d70 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x300>
         : 83   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6c53:   mov    0x348(%r14),%r9
    0.00 :   6c5a:   movslq %edx,%r12
         : 90   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6c5d:   mov    0x350(%r14),%ebp
         : 65   Minisat::Heap<Minisat::SimpSolver::ElimLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   6c64:   lea    0x1(%rdx,%rdx,1),%edi
         : 41   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6c68:   lea    (%r9,%r12,4),%r11
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.00 :   6c6c:   mov    (%r11),%esi
    7.66 :   6c6f:   mov    %esi,0x2c(%rsp)
         : 63   while (left(i) < heap.size()){
    0.00 :   6c73:   cmp    %ebp,%edi
    0.00 :   6c75:   jge    6d61 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2f1>
         : 66   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6c7b:   mov    0x340(%r14),%rax
    3.96 :   6c82:   mov    %r13,0x18(%rsp)
    0.00 :   6c87:   mov    %rbx,0x20(%rsp)
    4.34 :   6c8c:   mov    (%rax),%r8
         : 91   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6c8f:   lea    (%rsi,%rsi,1),%eax
         : 60   Minisat::vec<int>::operator[](int) const:
    0.00 :   6c92:   movslq %eax,%rcx
         : 87   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6c95:   xor    $0x1,%eax
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   6c98:   cltq
    0.00 :   6c9a:   lea    (%r8,%rcx,4),%rsi
    0.00 :   6c9e:   lea    (%r8,%rax,4),%rax
    0.00 :   6ca2:   mov    %rsi,0x8(%rsp)
    0.00 :   6ca7:   mov    %rax,0x10(%rsp)
    0.00 :   6cac:   jmp    6d21 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2b1>
         : 92   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6cae:   movslq %ecx,%r11
    0.00 :   6cb1:   lea    (%r9,%r11,4),%rbp
         : 90   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   6cb5:   mov    0x0(%rbp),%r13d
         : 66   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6cb9:   lea    0x0(%r13,%r13,1),%r11d
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6cbe:   mov    %r11d,%ebx
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6cc1:   movslq %r11d,%r11
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   6cc4:   xor    $0x1,%ebx
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
         : 109  const vec<int>& n_occ;
         : 110  explicit ElimLt(const vec<int>& no) : n_occ(no) {}
         :
         : 112  // TODO: are 64-bit operations here noticably bad on 32-bit platforms? Could use a saturating
         : 113  // 32-bit implementation instead then, but this will have to do for now.
         : 114  uint64_t cost  (Var x)        const { return (uint64_t)n_occ[toInt(mkLit(x))] * (uint64_t)n_occ[toInt(~mkLit(x))]; }
    0.00 :   6cc7:   movslq (%r8,%r11,4),%r11
         : 116  Minisat::vec<int>::operator[](int) const:
    0.00 :   6ccb:   movslq %ebx,%rbx
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6cce:   movslq (%r8,%rbx,4),%rbx
    0.00 :   6cd2:   imul   %r11,%rbx
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   6cd6:   cmp    %rsi,%rbx
    0.00 :   6cd9:   jae    6d53 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2e3>
    0.00 :   6cdb:   mov    %rbx,%rsi
    0.00 :   6cde:   movslq %r13d,%rax
    0.00 :   6ce1:   mov    %rbp,%r15
         : 69   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6ce4:   mov    0x8(%rsp),%rbx
         : 110  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6ce9:   lea    (%r9,%r12,4),%r11
         : 89   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6ced:   movslq (%rbx),%rdi
    0.00 :   6cf0:   mov    0x10(%rsp),%rbx
    0.00 :   6cf5:   movslq (%rbx),%rbx
    3.87 :   6cf8:   imul   %rbx,%rdi
         : 113  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 65   if (!lt(heap[child], x)) break;
    0.00 :   6cfc:   cmp    %rsi,%rdi
    0.00 :   6cff:   jbe    6d57 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2e7>
         : 66   heap[i]          = heap[child];
    0.00 :   6d01:   mov    %eax,(%r11)
         : 68   Minisat::Heap<Minisat::SimpSolver::ElimLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    3.93 :   6d04:   lea    0x1(%rcx,%rcx,1),%edi
         : 41   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 67   indices[heap[i]] = i;
    0.00 :   6d08:   mov    %edx,(%r10,%rax,4)
         : 69   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    4.00 :   6d0c:   mov    0x350(%r14),%ebp
         : 65   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 63   while (left(i) < heap.size()){
    0.00 :   6d13:   cmp    %edi,%ebp
    0.00 :   6d15:   jle    6ebf <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x44f>
    0.00 :   6d1b:   movslq %ecx,%r12
    0.00 :   6d1e:   mov    %r12,%rdx
         : 68   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6d21:   movslq %edi,%rax
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::right(int):
         : 40   static inline int right (int i) { return (i+1)*2; }
    0.00 :   6d24:   lea    0x2(%rdx,%rdx,1),%ecx
         : 42   Minisat::vec<int>::operator[](int):
    0.00 :   6d28:   lea    (%r9,%rax,4),%r15
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   6d2c:   movslq (%r15),%rax
         : 66   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6d2f:   lea    (%rax,%rax,1),%r11d
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6d33:   mov    %r11d,%esi
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6d36:   movslq %r11d,%r11
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   6d39:   xor    $0x1,%esi
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6d3c:   movslq (%r8,%r11,4),%r11
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   6d40:   movslq %esi,%rsi
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6d43:   movslq (%r8,%rsi,4),%rsi
    0.00 :   6d47:   imul   %r11,%rsi
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   6d4b:   cmp    %ebp,%ecx
    0.00 :   6d4d:   jl     6cae <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x23e>
    0.00 :   6d53:   mov    %edi,%ecx
    0.00 :   6d55:   jmp    6ce4 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x274>
    0.00 :   6d57:   mov    0x18(%rsp),%r13
    0.00 :   6d5c:   mov    0x20(%rsp),%rbx
         : 70   heap   [i] = x;
    0.00 :   6d61:   movslq 0x2c(%rsp),%rax
    3.88 :   6d66:   mov    %eax,(%r11)
         : 71   indices[x] = i;
    4.51 :   6d69:   mov    %edx,(%r10,%rax,4)
    8.22 :   6d6d:   nopl   (%rax)
         : 74   Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   6d70:   mov    0x0(%r13),%eax
         : 164  Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 161  for (int i = 0; i < c.size(); i++){
    0.00 :   6d74:   add    $0x1,%rbx
         : 163  Minisat::Clause::size() const:
    0.00 :   6d78:   shr    $0x5,%eax
         : 163  Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   6d7b:   cmp    %ebx,%eax
    0.00 :   6d7d:   jg     6bcb <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x15b>
    0.00 :   6d83:   jmp    6af3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x83>
         : 164  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   6d88:   lea    0x1(%rax),%esi
    3.95 :   6d8b:   mov    %rbp,%rdi
    0.00 :   6d8e:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   6d93:   movslq 0x8(%rbp),%rax
    0.00 :   6d97:   jmp    6bed <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x17d>
         : 80   Minisat::vec<unsigned int>::vec(int):
         : 55   explicit vec(int size)      : data(NULL) , sz(0)   , cap(0)    { growTo(size); }
    0.00 :   6d9c:   movq   $0x0,0x30(%rsp)
         : 57   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 53   vec<T>  tmp((buf.size()*3 + 1) >> 1);
    0.00 :   6da5:   lea    0x1(%rax,%rax,2),%ebx
         : 55   Minisat::vec<unsigned int>::vec(int):
    0.00 :   6da9:   movq   $0x0,0x38(%rsp)
         : 56   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   6db2:   sar    %ebx
         : 54   Minisat::vec<unsigned int>::growTo(int):
         : 114  sz = size; }
         :
         :
         : 117  template<class T>
         : 118  void vec<T>::growTo(int size) {
         : 119  if (sz >= size) return;
    0.00 :   6db4:   test   %ebx,%ebx
    0.00 :   6db6:   jle    6eb3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x443>
         : 115  capacity(size);
    0.00 :   6dbc:   lea    0x30(%rsp),%rdi
    0.00 :   6dc1:   mov    %ebx,%esi
    0.00 :   6dc3:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   6dc8:   movslq 0x38(%rsp),%rax
    0.00 :   6dcd:   mov    0x30(%rsp),%rbp
    0.00 :   6dd2:   cmp    %eax,%ebx
    0.00 :   6dd4:   jle    6df1 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x381>
    0.00 :   6dd6:   mov    %ebx,%edx
    0.00 :   6dd8:   lea    0x0(%rbp,%rax,4),%rdi
    0.00 :   6ddd:   xor    %esi,%esi
    0.00 :   6ddf:   sub    %eax,%edx
    0.00 :   6de1:   sub    $0x1,%edx
    0.00 :   6de4:   lea    0x4(,%rdx,4),%rdx
    0.00 :   6dec:   call   2370 <memset@plt>
         : 128  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 56   //**/printf("queue alloc: %d elems (%.1f MB)\n", tmp.size(), tmp.size() * sizeof(T) / 1000000.0);
         : 57   int     i = 0;
         : 58   for (int j = first; j < buf.size(); j++) tmp[i++] = buf[j];
    0.00 :   6df1:   mov    0x378(%r14),%edx
         : 60   Minisat::vec<unsigned int>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   6df8:   mov    0x368(%r14),%rdi
         : 129  Minisat::vec<unsigned int>::growTo(int):
         : 117  sz = size; }
    0.00 :   6dff:   mov    %ebx,0x38(%rsp)
         : 119  Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   6e03:   mov    0x3c(%rsp),%r12d
         : 93   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6e08:   mov    0x370(%r14),%eax
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   6e0f:   cmp    %eax,%edx
    0.00 :   6e11:   jge    6ef2 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x482>
    0.00 :   6e17:   movslq %edx,%rax
    0.00 :   6e1a:   mov    $0x1,%esi
    0.00 :   6e1f:   mov    %rax,%rcx
    0.00 :   6e22:   sub    %edx,%esi
    0.00 :   6e24:   neg    %rcx
    0.00 :   6e27:   lea    0x0(%rbp,%rcx,4),%r8
    0.00 :   6e2c:   nopl   0x0(%rax)
    0.00 :   6e30:   mov    (%rdi,%rax,4),%edx
    3.99 :   6e33:   lea    (%rsi,%rax,1),%ecx
    0.00 :   6e36:   mov    %edx,(%r8,%rax,4)
         : 68   Minisat::vec<unsigned int>::size() const:
    0.00 :   6e3a:   mov    0x370(%r14),%edx
         : 64   Minisat::Queue<unsigned int>::insert(unsigned int):
    3.92 :   6e41:   add    $0x1,%rax
    0.00 :   6e45:   cmp    %eax,%edx
    0.00 :   6e47:   jg     6e30 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x3c0>
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   6e49:   mov    0x37c(%r14),%eax
    0.00 :   6e50:   test   %eax,%eax
    0.00 :   6e52:   jle    6f19 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x4a9>
    0.00 :   6e58:   movslq %ecx,%rcx
         : 55   int     i = 0;
    0.00 :   6e5b:   xor    %eax,%eax
    0.00 :   6e5d:   lea    0x0(%rbp,%rcx,4),%rcx
    0.00 :   6e62:   nopw   0x0(%rax,%rax,1)
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   6e68:   mov    (%rdi,%rax,4),%edx
    0.00 :   6e6b:   mov    %edx,(%rcx,%rax,4)
    0.00 :   6e6e:   add    $0x1,%rax
    0.00 :   6e72:   cmp    %eax,0x37c(%r14)
    0.00 :   6e79:   jg     6e68 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x3f8>
         : 63   Minisat::vec<unsigned int>::size() const:
    0.00 :   6e7b:   mov    0x370(%r14),%eax
         : 64   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 58   first = 0;
    0.00 :   6e82:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   6e8d:   mov    %eax,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 125  for (int i = 0; i < sz; i++) data[i].~T();
         : 126  sz = 0;
         : 127  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   6e94:   call   2440 <free@plt>
         : 129  Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   6e99:   mov    %rbp,0x368(%r14)
    0.00 :   6ea0:   mov    %ebx,0x370(%r14)
    0.00 :   6ea7:   mov    %r12d,0x374(%r14)
         : 95   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   6eae:   jmp    6bb3 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x143>
         : 123  Minisat::vec<unsigned int>::growTo(int):
    0.00 :   6eb3:   xor    %r12d,%r12d
    0.00 :   6eb6:   xor    %ebx,%ebx
    0.00 :   6eb8:   xor    %ebp,%ebp
    0.00 :   6eba:   jmp    6e0f <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x39f>
         : 125  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   6ebf:   mov    0x18(%rsp),%r13
    0.00 :   6ec4:   mov    0x20(%rsp),%rbx
    0.00 :   6ec9:   mov    %r15,%r11
    0.00 :   6ecc:   mov    %ecx,%edx
    0.00 :   6ece:   jmp    6d61 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2f1>
         : 126  Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 139  assert(!isEliminated(var(ps[i])));
    0.00 :   6ed3:   lea    0xce06(%rip),%rcx        # 13ce0 <typeinfo name for Minisat::BoolOption+0x3d0>
    0.00 :   6eda:   mov    $0x8b,%edx
    0.00 :   6edf:   lea    0xccea(%rip),%rsi        # 13bd0 <typeinfo name for Minisat::BoolOption+0x2c0>
    0.00 :   6ee6:   lea    0xd5cb(%rip),%rdi        # 144b8 <typeinfo name for Minisat::BoolOption+0xba8>
    0.00 :   6eed:   call   23b0 <__assert_fail@plt>
         : 145  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   6ef2:   mov    0x37c(%r14),%edx
    0.00 :   6ef9:   test   %edx,%edx
    0.00 :   6efb:   jg     6f30 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x4c0>
         : 58   first = 0;
    0.00 :   6efd:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   6f08:   mov    %eax,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   6f0f:   test   %rdi,%rdi
    0.00 :   6f12:   je     6e99 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x429>
    0.00 :   6f14:   jmp    6e94 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x424>
         : 126  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 58   first = 0;
    0.00 :   6f19:   movl   $0x0,0x378(%r14)
         : 59   end   = buf.size();
    0.00 :   6f24:   mov    %edx,0x37c(%r14)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   6f2b:   jmp    6e94 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x424>
         : 123  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 55   int     i = 0;
    0.00 :   6f30:   xor    %ecx,%ecx
    0.00 :   6f32:   jmp    6e58 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)+0x3e8>
         : 58   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   6f37:   lea    0xcafa(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   6f3e:   mov    $0x3f,%edx
    0.00 :   6f43:   lea    0xcad0(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   6f4a:   lea    0xd4c7(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   6f51:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 172  }
    0.00 :   6f56:   call   2410 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (17 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a26a0 <_int_free>:
         : 6     _int_free():
         : 7     ./malloc/malloc.c:4421
    0.00 :   a26a0:  push   %r15
    0.00 :   a26a2:  push   %r14
    0.00 :   a26a4:  push   %r13
    4.54 :   a26a6:  mov    %edx,%r13d
    0.00 :   a26a9:  push   %r12
    0.00 :   a26ab:  push   %rbp
    0.00 :   a26ac:  push   %rbx
    0.00 :   a26ad:  sub    $0x38,%rsp
         : 16    ./malloc/malloc.c:4431
    0.00 :   a26b1:  mov    0x8(%rsi),%rdx
         : 18    ./malloc/malloc.c:4421
   13.33 :   a26b5:  mov    %fs:0x28,%rax
    0.00 :   a26be:  mov    %rax,0x28(%rsp)
    0.00 :   a26c3:  xor    %eax,%eax
         : 22    ./malloc/malloc.c:4431
    0.00 :   a26c5:  mov    %rdx,%rbx
    0.00 :   a26c8:  and    $0xfffffffffffffff8,%rbx
         : 25    ./malloc/malloc.c:4437
    0.00 :   a26cc:  mov    %rbx,%rcx
    0.00 :   a26cf:  neg    %rcx
    0.00 :   a26d2:  cmp    %rcx,%rsi
    0.00 :   a26d5:  ja     a2a38 <_int_free+0x398>
    0.00 :   a26db:  mov    %rsi,%rbp
         : 31    ./malloc/malloc.c:4438
    0.00 :   a26de:  test   $0xf,%sil
    0.00 :   a26e2:  jne    a2a38 <_int_free+0x398>
         : 34    ./malloc/malloc.c:4442
    0.00 :   a26e8:  cmp    $0x1f,%rbx
    0.00 :   a26ec:  jbe    a2a48 <_int_free+0x3a8>
         : 37    ./malloc/malloc.c:4442 (discriminator 1)
    0.00 :   a26f2:  and    $0x8,%edx
    4.55 :   a26f5:  jne    a2a48 <_int_free+0x3a8>
         : 40    ./malloc/malloc.c:4450
    0.00 :   a26fb:  mov    0x1776a6(%rip),%rax        # 219da8 <_DYNAMIC+0x1e8>
    6.68 :   a2702:  mov    %rdi,%r12
    0.00 :   a2705:  mov    %fs:(%rax),%rsi
    0.00 :   a2709:  test   %rsi,%rsi
    0.00 :   a270c:  je     a274b <_int_free+0xab>
         : 46    ./malloc/malloc.c:4449 (discriminator 1)
    0.00 :   a270e:  lea    -0x11(%rbx),%rcx
    0.00 :   a2712:  shr    $0x4,%rcx
         : 49    ./malloc/malloc.c:4450 (discriminator 1)
    0.00 :   a2716:  cmp    %rcx,0x177cab(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a271d:  jbe    a274b <_int_free+0xab>
         : 52    ./malloc/malloc.c:4479
    0.00 :   a271f:  mov    0x177cb2(%rip),%rdi        # 21a3d8 <mp_+0x78>
         : 54    ./malloc/malloc.c:4459
    0.00 :   a2726:  mov    0x17edab(%rip),%r11        # 2214d8 <tcache_key>
         : 56    ./malloc/malloc.c:4453
    0.00 :   a272d:  lea    0x10(%rbp),%r8
         : 58    ./malloc/malloc.c:4459
    0.00 :   a2731:  cmp    %r11,0x18(%rbp)
    0.00 :   a2735:  je     a2de0 <_int_free+0x740>
         : 61    ./malloc/malloc.c:4479
    0.00 :   a273b:  movzwl (%rsi,%rcx,2),%edx
    5.42 :   a273f:  mov    %rdx,%rax
    0.00 :   a2742:  cmp    %rdi,%rdx
    0.00 :   a2745:  jb     a2a00 <_int_free+0x360>
         : 66    ./malloc/malloc.c:4493
    0.00 :   a274b:  cmp    0x17edae(%rip),%rbx        # 221500 <global_max_fast>
    0.00 :   a2752:  ja     a2810 <_int_free+0x170>
         : 69    ./malloc/malloc.c:4504
    0.00 :   a2758:  lea    0x0(%rbp,%rbx,1),%r14
    0.00 :   a275d:  mov    0x8(%r14),%rax
    0.00 :   a2761:  cmp    $0x10,%rax
    0.00 :   a2765:  jbe    a2a58 <_int_free+0x3b8>
         : 74    ./malloc/malloc.c:4506
    0.00 :   a276b:  and    $0xfffffffffffffff8,%rax
    0.00 :   a276f:  cmp    0x888(%r12),%rax
    0.00 :   a2777:  jae    a2a58 <_int_free+0x3b8>
         : 78    free_perturb():
         : 79    ./malloc/malloc.c:2012
    0.00 :   a277d:  mov    0x17ed79(%rip),%eax        # 2214fc <perturb_byte>
    0.00 :   a2783:  test   %eax,%eax
    0.00 :   a2785:  jne    a2ce0 <_int_free+0x640>
         : 83    _int_free():
         : 84    ./malloc/malloc.c:4527
    0.00 :   a278b:  movl   $0x1,0x8(%r12)
         : 86    ./malloc/malloc.c:4528
    0.00 :   a2794:  shr    $0x4,%ebx
         : 88    ./malloc/malloc.c:4532
    0.00 :   a2797:  lea    -0x2(%rbx),%eax
    0.00 :   a279a:  add    $0x2,%rax
    0.00 :   a279e:  mov    (%r12,%rax,8),%rdx
         : 92    ./malloc/malloc.c:4534
    5.27 :   a27a2:  mov    %fs:0x18,%ecx
    0.00 :   a27aa:  test   %ecx,%ecx
    0.00 :   a27ac:  jne    a2978 <_int_free+0x2d8>
         : 96    ./malloc/malloc.c:4538
    0.00 :   a27b2:  cmp    %rdx,%rbp
    0.00 :   a27b5:  je     a29be <_int_free+0x31e>
         : 99    ./malloc/malloc.c:4540
    0.00 :   a27bb:  lea    0x10(%rbp),%rcx
    0.00 :   a27bf:  shr    $0xc,%rcx
    0.00 :   a27c3:  xor    %rdx,%rcx
    0.00 :   a27c6:  mov    %rcx,0x10(%rbp)
         : 104   ./malloc/malloc.c:4541
    0.00 :   a27ca:  mov    %rbp,(%r12,%rax,8)
         : 106   ./malloc/malloc.c:4560
    0.00 :   a27ce:  test   %rdx,%rdx
    0.00 :   a27d1:  je     a27e8 <_int_free+0x148>
    0.00 :   a27d3:  and    $0x1,%r13d
    6.67 :   a27d7:  je     a27e8 <_int_free+0x148>
         : 111   ./malloc/malloc.c:4561
    0.00 :   a27d9:  mov    0x8(%rdx),%rax
    0.00 :   a27dd:  shr    $0x4,%eax
    0.00 :   a27e0:  cmp    %eax,%ebx
    0.00 :   a27e2:  jne    a2efe <_int_free+0x85e>
         : 116   ./malloc/malloc.c:4702
    0.00 :   a27e8:  mov    0x28(%rsp),%rax
   11.36 :   a27ed:  sub    %fs:0x28,%rax
    0.00 :   a27f6:  jne    a2fc8 <_int_free+0x928>
    4.42 :   a27fc:  add    $0x38,%rsp
    0.00 :   a2800:  pop    %rbx
    0.00 :   a2801:  pop    %rbp
    0.00 :   a2802:  pop    %r12
    0.00 :   a2804:  pop    %r13
    4.53 :   a2806:  pop    %r14
    0.00 :   a2808:  pop    %r15
    0.00 :   a280a:  ret
    0.00 :   a280b:  nopl   0x0(%rax,%rax,1)
         : 129   ./malloc/malloc.c:4569
    0.00 :   a2810:  testb  $0x2,0x8(%rbp)
    0.00 :   a2814:  jne    a29d0 <_int_free+0x330>
         : 132   ./malloc/malloc.c:4572 (discriminator 4)
    0.00 :   a281a:  mov    %fs:0x18,%eax
         : 134   ./malloc/malloc.c:4575 (discriminator 4)
    0.00 :   a2822:  test   %eax,%eax
    0.00 :   a2824:  je     a2830 <_int_free+0x190>
    0.00 :   a2826:  and    $0x1,%r13d
    0.00 :   a282a:  je     a2ca0 <_int_free+0x600>
    0.00 :   a2830:  movl   $0x1,0x14(%rsp)
         : 140   ./malloc/malloc.c:4582
    0.00 :   a2838:  mov    0x60(%r12),%rax
         : 142   ./malloc/malloc.c:4578
    0.00 :   a283d:  lea    0x0(%rbp,%rbx,1),%r14
         : 144   ./malloc/malloc.c:4582
    0.00 :   a2842:  cmp    %rbp,%rax
    0.00 :   a2845:  je     a2e40 <_int_free+0x7a0>
         : 147   ./malloc/malloc.c:4585
    0.00 :   a284b:  testb  $0x2,0x4(%r12)
    6.67 :   a2851:  je     a2e50 <_int_free+0x7b0>
         : 150   ./malloc/malloc.c:4590
    0.00 :   a2857:  mov    0x8(%r14),%rax
    0.00 :   a285b:  test   $0x1,%al
    0.00 :   a285d:  je     a2e70 <_int_free+0x7d0>
         : 154   ./malloc/malloc.c:4593
    0.00 :   a2863:  mov    %rax,%r15
    0.00 :   a2866:  and    $0xfffffffffffffff8,%r15
         : 157   ./malloc/malloc.c:4594
    0.00 :   a286a:  cmp    $0x10,%rax
    0.00 :   a286e:  jbe    a2cd0 <_int_free+0x630>
         : 160   ./malloc/malloc.c:4595
    0.00 :   a2874:  cmp    %r15,0x888(%r12)
    0.00 :   a287c:  jbe    a2cd0 <_int_free+0x630>
         : 163   free_perturb():
         : 164   ./malloc/malloc.c:2012
    0.00 :   a2882:  mov    0x17ec74(%rip),%esi        # 2214fc <perturb_byte>
    0.00 :   a2888:  test   %esi,%esi
    0.00 :   a288a:  jne    a2e80 <_int_free+0x7e0>
         : 168   _int_free():
         : 169   ./malloc/malloc.c:4601
    0.00 :   a2890:  testb  $0x1,0x8(%rbp)
    0.00 :   a2894:  jne    a28b9 <_int_free+0x219>
         : 172   ./malloc/malloc.c:4602
    0.00 :   a2896:  mov    0x0(%rbp),%rax
         : 174   ./malloc/malloc.c:4604
    0.00 :   a289a:  sub    %rax,%rbp
         : 176   ./malloc/malloc.c:4603
    0.00 :   a289d:  add    %rax,%rbx
         : 178   ./malloc/malloc.c:4605
    0.00 :   a28a0:  mov    0x8(%rbp),%rdx
    0.00 :   a28a4:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a28a8:  cmp    %rax,%rdx
    0.00 :   a28ab:  jne    a2f16 <_int_free+0x876>
         : 183   ./malloc/malloc.c:4607
    0.00 :   a28b1:  mov    %rbp,%rdi
    0.00 :   a28b4:  call   a1710 <unlink_chunk.constprop.0>
         : 186   ./malloc/malloc.c:4610
    0.00 :   a28b9:  cmp    %r14,0x60(%r12)
    0.00 :   a28be:  je     a2c80 <_int_free+0x5e0>
         : 189   ./malloc/malloc.c:4615
    0.00 :   a28c4:  testb  $0x1,0x8(%r14,%r15,1)
    6.67 :   a28ca:  je     a2d20 <_int_free+0x680>
         : 192   ./malloc/malloc.c:4619
    0.00 :   a28d0:  andq   $0xfffffffffffffffe,0x8(%r14)
         : 194   ./malloc/malloc.c:4628
    0.00 :   a28d5:  mov    0x70(%r12),%rax
         : 196   ./malloc/malloc.c:4627
    0.00 :   a28da:  lea    0x60(%r12),%rdx
         : 198   ./malloc/malloc.c:4628
    0.00 :   a28df:  movq   %rdx,%xmm1
    0.00 :   a28e4:  movq   %rax,%xmm0
    0.00 :   a28e9:  punpcklqdq %xmm1,%xmm0
         : 202   ./malloc/malloc.c:4629
    0.00 :   a28ed:  cmp    %rdx,0x18(%rax)
    0.00 :   a28f1:  jne    a2f0a <_int_free+0x86a>
         : 205   ./malloc/malloc.c:4631
    0.00 :   a28f7:  movups %xmm0,0x10(%rbp)
         : 207   ./malloc/malloc.c:4633
    0.00 :   a28fb:  cmp    $0x3ff,%rbx
    0.00 :   a2902:  ja     a2aa0 <_int_free+0x400>
         : 210   ./malloc/malloc.c:4638
    0.00 :   a2908:  mov    %rbp,0x70(%r12)
         : 212   ./malloc/malloc.c:4639
    0.00 :   a290d:  mov    %rbp,0x18(%rax)
         : 214   ./malloc/malloc.c:4641
    0.00 :   a2911:  mov    %rbx,%rax
    0.00 :   a2914:  or     $0x1,%rax
    0.00 :   a2918:  mov    %rax,0x8(%rbp)
         : 218   ./malloc/malloc.c:4642
    0.00 :   a291c:  mov    %rbx,0x0(%rbp,%rbx,1)
         : 220   ./malloc/malloc.c:4672
    0.00 :   a2921:  cmp    $0xffff,%rbx
    0.00 :   a2928:  ja     a2ae0 <_int_free+0x440>
         : 223   ./malloc/malloc.c:4692
    0.00 :   a292e:  mov    0x14(%rsp),%eax
    0.00 :   a2932:  test   %eax,%eax
    0.00 :   a2934:  jne    a27e8 <_int_free+0x148>
         : 227   ./malloc/malloc.c:4693
    0.00 :   a293a:  mov    %eax,%r13d
    0.00 :   a293d:  xchg   %r13d,(%r12)
    0.00 :   a2941:  cmp    $0x1,%r13d
    0.00 :   a2945:  jle    a27e8 <_int_free+0x148>
         : 232   ./malloc/malloc.c:4693 (discriminator 15)
    0.00 :   a294b:  mov    0x28(%rsp),%rax
    0.00 :   a2950:  sub    %fs:0x28,%rax
    0.00 :   a2959:  jne    a2fc8 <_int_free+0x928>
         : 236   ./malloc/malloc.c:4702 (discriminator 15)
    0.00 :   a295f:  add    $0x38,%rsp
         : 238   ./malloc/malloc.c:4693 (discriminator 15)
    0.00 :   a2963:  mov    %r12,%rdi
         : 240   ./malloc/malloc.c:4702 (discriminator 15)
    0.00 :   a2966:  pop    %rbx
    0.00 :   a2967:  pop    %rbp
    0.00 :   a2968:  pop    %r12
    0.00 :   a296a:  pop    %r13
    0.00 :   a296c:  pop    %r14
    0.00 :   a296e:  pop    %r15
         : 247   ./malloc/malloc.c:4693 (discriminator 15)
    0.00 :   a2970:  jmp    91300 <__lll_lock_wake_private>
    0.00 :   a2975:  nopl   (%rax)
         : 250   ./malloc/malloc.c:4529
    0.00 :   a2978:  mov    %ebx,%eax
         : 252   ./malloc/malloc.c:4551
    0.00 :   a297a:  lea    0x10(%rbp),%rsi
         : 254   ./malloc/malloc.c:4529
    0.00 :   a297e:  lea    (%r12,%rax,8),%rcx
         : 256   ./malloc/malloc.c:4551
    0.00 :   a2982:  shr    $0xc,%rsi
    0.00 :   a2986:  jmp    a29b9 <_int_free+0x319>
    0.00 :   a2988:  nopl   0x0(%rax,%rax,1)
    0.00 :   a2990:  mov    %rdx,%rax
    0.00 :   a2993:  xor    %rsi,%rax
    0.00 :   a2996:  mov    %rax,0x10(%rbp)
         : 263   ./malloc/malloc.c:4553
    0.00 :   a299a:  mov    %rdx,%rax
    0.00 :   a299d:  cmpl   $0x0,%fs:0x18
    0.00 :   a29a6:  je     a29a9 <_int_free+0x309>
    0.00 :   a29a8:  lock cmpxchg %rbp,(%rcx)
         : 268   ./malloc/malloc.c:4554
    0.00 :   a29ad:  cmp    %rax,%rdx
    0.00 :   a29b0:  je     a27ce <_int_free+0x12e>
    0.00 :   a29b6:  mov    %rax,%rdx
         : 272   ./malloc/malloc.c:4548
    0.00 :   a29b9:  cmp    %rbp,%rdx
    0.00 :   a29bc:  jne    a2990 <_int_free+0x2f0>
         : 275   ./malloc/malloc.c:4539
    0.00 :   a29be:  lea    0x13bd83(%rip),%rdi        # 1de748 <__PRETTY_FUNCTION__.1+0x608>
    0.00 :   a29c5:  call   a0ce0 <malloc_printerr>
    0.00 :   a29ca:  nopw   0x0(%rax,%rax,1)
         : 279   ./malloc/malloc.c:4700
    0.00 :   a29d0:  mov    0x28(%rsp),%rax
    0.00 :   a29d5:  sub    %fs:0x28,%rax
    0.00 :   a29de:  jne    a2fc8 <_int_free+0x928>
         : 283   ./malloc/malloc.c:4702
    0.00 :   a29e4:  add    $0x38,%rsp
         : 285   ./malloc/malloc.c:4700
    0.00 :   a29e8:  mov    %rbp,%rdi
         : 287   ./malloc/malloc.c:4702
    0.00 :   a29eb:  pop    %rbx
    0.00 :   a29ec:  pop    %rbp
    0.00 :   a29ed:  pop    %r12
    0.00 :   a29ef:  pop    %r13
    0.00 :   a29f1:  pop    %r14
    0.00 :   a29f3:  pop    %r15
         : 294   ./malloc/malloc.c:4700
    0.00 :   a29f5:  jmp    a0f60 <munmap_chunk>
    0.00 :   a29fa:  nopw   0x0(%rax,%rax,1)
         : 297   tcache_put():
         : 298   ./malloc/malloc.c:3181
    0.00 :   a2a00:  mov    0x17ead1(%rip),%rdx        # 2214d8 <tcache_key>
         : 300   ./malloc/malloc.c:3185
    0.00 :   a2a07:  add    $0x1,%eax
         : 302   ./malloc/malloc.c:3181
    0.00 :   a2a0a:  mov    %rdx,0x18(%rbp)
         : 304   ./malloc/malloc.c:3183
    0.00 :   a2a0e:  mov    %r8,%rdx
    0.00 :   a2a11:  shr    $0xc,%rdx
    0.00 :   a2a15:  xor    0x80(%rsi,%rcx,8),%rdx
    6.62 :   a2a1d:  mov    %rdx,0x10(%rbp)
         : 309   ./malloc/malloc.c:3184
    0.00 :   a2a21:  mov    %r8,0x80(%rsi,%rcx,8)
         : 311   ./malloc/malloc.c:3185
    0.00 :   a2a29:  mov    %ax,(%rsi,%rcx,2)
         : 313   _int_free():
         : 314   ./malloc/malloc.c:4482
    0.00 :   a2a2d:  jmp    a27e8 <_int_free+0x148>
    0.00 :   a2a32:  nopw   0x0(%rax,%rax,1)
         : 317   ./malloc/malloc.c:4439
    0.00 :   a2a38:  lea    0x136d05(%rip),%rdi        # 1d9744 <null+0xec9>
    0.00 :   a2a3f:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a44:  nopl   0x0(%rax)
         : 321   ./malloc/malloc.c:4443
    0.00 :   a2a48:  lea    0x136d0d(%rip),%rdi        # 1d975c <null+0xee1>
    0.00 :   a2a4f:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a54:  nopl   0x0(%rax)
         : 325   ./malloc/malloc.c:4513
    0.00 :   a2a58:  test   %r13d,%r13d
    0.00 :   a2a5b:  jne    a2a91 <_int_free+0x3f1>
         : 328   ./malloc/malloc.c:4515
    0.00 :   a2a5d:  mov    $0x1,%edx
    0.00 :   a2a62:  mov    %r13d,%eax
    0.00 :   a2a65:  lock cmpxchg %edx,(%r12)
    0.00 :   a2a6b:  jne    a2acf <_int_free+0x42f>
         : 333   ./malloc/malloc.c:4516 (discriminator 6)
    0.00 :   a2a6d:  mov    0x8(%r14),%rax
         : 335   ./malloc/malloc.c:4517 (discriminator 6)
    0.00 :   a2a71:  mov    $0x1,%r14d
    0.00 :   a2a77:  cmp    $0x10,%rax
    0.00 :   a2a7b:  ja     a2ab0 <_int_free+0x410>
         : 339   ./malloc/malloc.c:4518
    0.00 :   a2a7d:  xor    %eax,%eax
    0.00 :   a2a7f:  xchg   %eax,(%r12)
    0.00 :   a2a83:  cmp    $0x1,%eax
    0.00 :   a2a86:  jg     a2ac5 <_int_free+0x425>
         : 344   ./malloc/malloc.c:4521
    0.00 :   a2a88:  test   %r14d,%r14d
    0.00 :   a2a8b:  je     a277d <_int_free+0xdd>
         : 347   ./malloc/malloc.c:4522
    0.00 :   a2a91:  lea    0x13bc88(%rip),%rdi        # 1de720 <__PRETTY_FUNCTION__.1+0x5e0>
    0.00 :   a2a98:  call   a0ce0 <malloc_printerr>
    0.00 :   a2a9d:  nopl   (%rax)
         : 351   ./malloc/malloc.c:4635
    0.00 :   a2aa0:  pxor   %xmm0,%xmm0
    0.00 :   a2aa4:  movups %xmm0,0x20(%rbp)
    0.00 :   a2aa8:  jmp    a2908 <_int_free+0x268>
    0.00 :   a2aad:  nopl   (%rax)
         : 356   ./malloc/malloc.c:4517 (discriminator 2)
    0.00 :   a2ab0:  xor    %r14d,%r14d
    0.00 :   a2ab3:  and    $0xfffffffffffffff8,%rax
    0.00 :   a2ab7:  cmp    0x888(%r12),%rax
    0.00 :   a2abf:  setae  %r14b
    0.00 :   a2ac3:  jmp    a2a7d <_int_free+0x3dd>
         : 362   ./malloc/malloc.c:4518 (discriminator 15)
    0.00 :   a2ac5:  mov    %r12,%rdi
    0.00 :   a2ac8:  call   91300 <__lll_lock_wake_private>
    0.00 :   a2acd:  jmp    a2a88 <_int_free+0x3e8>
         : 366   ./malloc/malloc.c:4515 (discriminator 3)
    0.00 :   a2acf:  mov    %r12,%rdi
    0.00 :   a2ad2:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2ad7:  jmp    a2a6d <_int_free+0x3cd>
    0.00 :   a2ad9:  nopl   0x0(%rax)
         : 371   ./malloc/malloc.c:4673 (discriminator 3)
    0.00 :   a2ae0:  mov    0x8(%r12),%eax
    0.00 :   a2ae5:  test   %eax,%eax
    0.00 :   a2ae7:  jne    a2e98 <_int_free+0x7f8>
         : 375   ./malloc/malloc.c:4676
    0.00 :   a2aed:  lea    0x17818c(%rip),%rax        # 21ac80 <main_arena>
    0.00 :   a2af4:  cmp    %rax,%r12
         : 378   ./malloc/malloc.c:4678
    0.00 :   a2af7:  mov    0x60(%r12),%rax
         : 380   ./malloc/malloc.c:4676
    0.00 :   a2afc:  je     a2ea8 <_int_free+0x808>
         : 382   heap_max_size():
         : 383   ./malloc/arena.c:61
    0.00 :   a2b02:  mov    0x177887(%rip),%rcx        # 21a390 <mp_+0x30>
    0.00 :   a2b09:  test   %rcx,%rcx
    0.00 :   a2b0c:  je     a2ece <_int_free+0x82e>
    0.00 :   a2b12:  lea    0x0(,%rcx,4),%r13
         : 388   heap_for_ptr():
         : 389   ./malloc/arena.c:156
    0.00 :   a2b1a:  mov    %r13,%rbx
    0.00 :   a2b1d:  neg    %rbx
    0.00 :   a2b20:  and    %rax,%rbx
         : 393   _int_free():
         : 394   ./malloc/malloc.c:4687
    0.00 :   a2b23:  mov    (%rbx),%r15
    0.00 :   a2b26:  cmp    %r15,%r12
    0.00 :   a2b29:  jne    a30ab <_int_free+0xa0b>
         : 398   ./malloc/malloc.c:4688
    0.00 :   a2b2f:  mov    0x177832(%rip),%rdi        # 21a368 <mp_+0x8>
         : 400   heap_trim():
         : 401   ./malloc/arena.c:645
    0.00 :   a2b36:  mov    %rax,%r10
         : 403   _int_free():
         : 404   ./malloc/malloc.c:4688
    0.00 :   a2b39:  mov    %rdi,0x18(%rsp)
         : 406   heap_trim():
         : 407   ./malloc/arena.c:651
    0.00 :   a2b3e:  lea    0x30(%rbx),%rdx
    0.00 :   a2b42:  cmp    %rdx,%rax
    0.00 :   a2b45:  jne    a2f22 <_int_free+0x882>
         : 411   ./malloc/arena.c:667
    0.00 :   a2b4b:  mov    0x18(%rsp),%rax
    0.00 :   a2b50:  add    $0x20,%rax
    0.00 :   a2b54:  mov    %rax,(%rsp)
    0.00 :   a2b58:  jmp    a2ba1 <_int_free+0x501>
    0.00 :   a2b5a:  nopw   0x0(%rax,%rax,1)
         : 417   ./malloc/arena.c:680
    0.00 :   a2b60:  mov    0x20(%rbx),%rax
    0.00 :   a2b64:  lea    (%r10,%r14,1),%rsi
    0.00 :   a2b68:  sub    $0x1,%rax
    0.00 :   a2b6c:  test   %rax,%rsi
    0.00 :   a2b6f:  jne    a300b <_int_free+0x96b>
         : 423   ./malloc/arena.c:682
    0.00 :   a2b75:  mov    0x10(%rbx),%rax
    0.00 :   a2b79:  add    %rbx,%rax
    0.00 :   a2b7c:  cmp    %rax,%rsi
    0.00 :   a2b7f:  jne    a2fec <_int_free+0x94c>
         : 428   ./malloc/arena.c:684
    0.00 :   a2b85:  mov    %r14,%rdx
         : 430   ./malloc/arena.c:651
    0.00 :   a2b88:  lea    0x30(%rbx),%rax
         : 432   ./malloc/arena.c:683
    0.00 :   a2b8c:  mov    %r10,0x60(%r15)
         : 434   ./malloc/arena.c:684
    0.00 :   a2b90:  or     $0x1,%rdx
    0.00 :   a2b94:  mov    %rdx,0x8(%r10)
         : 437   ./malloc/arena.c:651
    0.00 :   a2b98:  cmp    %rax,%r10
    0.00 :   a2b9b:  jne    a2d37 <_int_free+0x697>
         : 440   ./malloc/arena.c:653
    0.00 :   a2ba1:  mov    %rbx,%rdi
    0.00 :   a2ba4:  mov    0x8(%rbx),%rbx
         : 443   ./malloc/arena.c:654
    0.00 :   a2ba8:  mov    0x10(%rbx),%rax
    0.00 :   a2bac:  lea    -0x10(%rax),%rbp
         : 446   ./malloc/arena.c:655
    0.00 :   a2bb0:  lea    (%rbx,%rbp,1),%rdx
         : 448   ./malloc/arena.c:657
    0.00 :   a2bb4:  and    $0xf,%edx
         : 450   ./malloc/arena.c:658
    0.00 :   a2bb7:  sub    %rdx,%rbp
    0.00 :   a2bba:  add    %rbx,%rbp
         : 453   ./malloc/arena.c:659
    0.00 :   a2bbd:  cmpq   $0x1,0x8(%rbp)
    0.00 :   a2bc2:  jne    a302a <_int_free+0x98a>
         : 456   ./malloc/arena.c:660
    0.00 :   a2bc8:  sub    0x0(%rbp),%rbp
         : 458   ./malloc/arena.c:661
    0.00 :   a2bcc:  mov    0x8(%rbp),%r8
    0.00 :   a2bd0:  mov    %r8,%rsi
    0.00 :   a2bd3:  and    $0xfffffffffffffff8,%rsi
    0.00 :   a2bd7:  add    %rdx,%rsi
    0.00 :   a2bda:  lea    0x10(%rsi),%r14
         : 464   ./malloc/arena.c:662
    0.00 :   a2bde:  add    $0xf,%rsi
    0.00 :   a2be2:  cmp    $0x3e,%rsi
    0.00 :   a2be6:  ja     a2fa9 <_int_free+0x909>
         : 468   ./malloc/arena.c:663
    0.00 :   a2bec:  and    $0x1,%r8d
    0.00 :   a2bf0:  jne    a2bf6 <_int_free+0x556>
         : 471   ./malloc/arena.c:664
    0.00 :   a2bf2:  add    0x0(%rbp),%r14
         : 473   ./malloc/arena.c:665
    0.00 :   a2bf6:  test   %r14,%r14
    0.00 :   a2bf9:  jle    a2fcd <_int_free+0x92d>
    0.00 :   a2bff:  cmp    %r13,%r14
    0.00 :   a2c02:  jae    a2fcd <_int_free+0x92d>
         : 478   ./malloc/arena.c:666
    0.00 :   a2c08:  mov    %r13,%rsi
    0.00 :   a2c0b:  sub    %rax,%rsi
    0.00 :   a2c0e:  lea    (%rsi,%r14,1),%rax
         : 482   ./malloc/arena.c:667
    0.00 :   a2c12:  mov    (%rsp),%rsi
    0.00 :   a2c16:  add    0x20(%rdi),%rsi
         : 485   ./malloc/arena.c:666
    0.00 :   a2c1a:  cmp    %rsi,%rax
    0.00 :   a2c1d:  jb     a2d30 <_int_free+0x690>
         : 488   ./malloc/arena.c:669
    0.00 :   a2c23:  mov    0x10(%rdi),%rax
    0.00 :   a2c27:  sub    %rax,0x888(%r15)
         : 491   ./malloc/arena.c:670
    0.00 :   a2c2e:  nop
         : 493   ./malloc/arena.c:671
    0.00 :   a2c2f:  lea    (%rdi,%r13,1),%rax
    0.00 :   a2c33:  cmp    %rax,0x17e8a6(%rip)        # 2214e0 <aligned_heap_area>
    0.00 :   a2c3a:  je     a2c70 <_int_free+0x5d0>
         : 497   ./malloc/arena.c:673
    0.00 :   a2c3c:  mov    %r13,%rsi
    0.00 :   a2c3f:  call   11ea70 <__munmap>
         : 500   ./malloc/arena.c:675
    0.00 :   a2c44:  mov    %rbp,%r10
    0.00 :   a2c47:  testb  $0x1,0x8(%rbp)
    0.00 :   a2c4b:  jne    a2b60 <_int_free+0x4c0>
         : 504   ./malloc/arena.c:677
    0.00 :   a2c51:  sub    0x0(%rbp),%r10
         : 506   ./malloc/arena.c:678
    0.00 :   a2c55:  mov    %r10,%rdi
    0.00 :   a2c58:  mov    %r10,0x8(%rsp)
    0.00 :   a2c5d:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a2c62:  mov    0x8(%rsp),%r10
    0.00 :   a2c67:  jmp    a2b60 <_int_free+0x4c0>
    0.00 :   a2c6c:  nopl   0x0(%rax)
         : 513   ./malloc/arena.c:672
    0.00 :   a2c70:  movq   $0x0,0x17e865(%rip)        # 2214e0 <aligned_heap_area>
    0.00 :   a2c7b:  jmp    a2c3c <_int_free+0x59c>
    0.00 :   a2c7d:  nopl   (%rax)
         : 517   _int_free():
         : 518   ./malloc/malloc.c:4653
    0.00 :   a2c80:  add    %r15,%rbx
         : 520   ./malloc/malloc.c:4654
    0.00 :   a2c83:  mov    %rbx,%rax
    0.00 :   a2c86:  or     $0x1,%rax
    0.00 :   a2c8a:  mov    %rax,0x8(%rbp)
         : 524   ./malloc/malloc.c:4655
    0.00 :   a2c8e:  mov    %rbp,0x60(%r12)
    0.00 :   a2c93:  jmp    a2921 <_int_free+0x281>
    0.00 :   a2c98:  nopl   0x0(%rax,%rax,1)
         : 528   ./malloc/malloc.c:4576
    0.00 :   a2ca0:  xor    %eax,%eax
    0.00 :   a2ca2:  mov    $0x1,%edx
    0.00 :   a2ca7:  lock cmpxchg %edx,(%r12)
    0.00 :   a2cad:  movl   $0x0,0x14(%rsp)
    0.00 :   a2cb5:  je     a2838 <_int_free+0x198>
         : 534   ./malloc/malloc.c:4576 (discriminator 3)
    0.00 :   a2cbb:  mov    %r12,%rdi
    0.00 :   a2cbe:  call   91230 <__lll_lock_wait_private>
    0.00 :   a2cc3:  jmp    a2838 <_int_free+0x198>
    0.00 :   a2cc8:  nopl   0x0(%rax,%rax,1)
         : 539   ./malloc/malloc.c:4596
    0.00 :   a2cd0:  lea    0x13bb01(%rip),%rdi        # 1de7d8 <__PRETTY_FUNCTION__.1+0x698>
    0.00 :   a2cd7:  call   a0ce0 <malloc_printerr>
    0.00 :   a2cdc:  nopl   0x0(%rax)
         : 543   free_perturb():
         : 544   ./malloc/malloc.c:2013
    0.00 :   a2ce0:  lea    0x18(%rbp),%rdi
         : 546   _int_free():
         : 547   ./malloc/malloc.c:4525
    0.00 :   a2ce4:  lea    0x10(%rbp),%rcx
         : 549   free_perturb():
         : 550   ./malloc/malloc.c:2013
    0.00 :   a2ce8:  movzbl %al,%eax
    0.00 :   a2ceb:  movabs $0x101010101010101,%rsi
    0.00 :   a2cf5:  and    $0xfffffffffffffff8,%rdi
    0.00 :   a2cf9:  imul   %rsi,%rax
         : 555   _int_free():
         : 556   ./malloc/malloc.c:4525
    0.00 :   a2cfd:  lea    -0x10(%rbx),%rdx
         : 558   free_perturb():
         : 559   ./malloc/malloc.c:2013
    0.00 :   a2d01:  sub    %rdi,%rcx
    0.00 :   a2d04:  mov    %edx,%esi
    0.00 :   a2d06:  add    %edx,%ecx
    0.00 :   a2d08:  shr    $0x3,%ecx
    0.00 :   a2d0b:  mov    %rax,0x10(%rbp)
    0.00 :   a2d0f:  mov    %rax,0x8(%rbp,%rsi,1)
    0.00 :   a2d14:  rep stos %rax,%es:(%rdi)
    0.00 :   a2d17:  jmp    a278b <_int_free+0xeb>
    0.00 :   a2d1c:  nopl   0x0(%rax)
         : 569   _int_free():
         : 570   ./malloc/malloc.c:4616
    0.00 :   a2d20:  mov    %r14,%rdi
         : 572   ./malloc/malloc.c:4617
    0.00 :   a2d23:  add    %r15,%rbx
         : 574   ./malloc/malloc.c:4616
    0.00 :   a2d26:  call   a1710 <unlink_chunk.constprop.0>
         : 576   ./malloc/malloc.c:4617
    0.00 :   a2d2b:  jmp    a28d5 <_int_free+0x235>
         : 578   heap_trim():
         : 579   ./malloc/arena.c:691
    0.00 :   a2d30:  mov    0x8(%r10),%rdx
    0.00 :   a2d34:  mov    %rdi,%rbx
    0.00 :   a2d37:  and    $0xfffffffffffffff8,%rdx
         : 583   ./malloc/arena.c:692
    0.00 :   a2d3b:  cmp    %rdx,0x17761e(%rip)        # 21a360 <mp_>
         : 585   ./malloc/arena.c:691
    0.00 :   a2d42:  mov    %rdx,%rbp
         : 587   ./malloc/arena.c:692
    0.00 :   a2d45:  ja     a292e <_int_free+0x28e>
         : 589   ./malloc/arena.c:697
    0.00 :   a2d4b:  mov    %rdx,%rax
    0.00 :   a2d4e:  sub    $0x21,%rax
    0.00 :   a2d52:  js     a292e <_int_free+0x28e>
    0.00 :   a2d58:  mov    0x18(%rsp),%rdi
    0.00 :   a2d5d:  cmp    %rdi,%rax
    0.00 :   a2d60:  jbe    a292e <_int_free+0x28e>
         : 596   ./malloc/arena.c:701
    0.00 :   a2d66:  mov    0x20(%rbx),%r14
    0.00 :   a2d6a:  sub    %rdi,%rax
    0.00 :   a2d6d:  neg    %r14
         : 600   ./malloc/arena.c:702
    0.00 :   a2d70:  and    %rax,%r14
    0.00 :   a2d73:  je     a292e <_int_free+0x28e>
         : 603   shrink_heap():
         : 604   ./malloc/arena.c:616
    0.00 :   a2d79:  mov    0x10(%rbx),%r13
    0.00 :   a2d7d:  sub    %r14,%r13
         : 607   ./malloc/arena.c:617
    0.00 :   a2d80:  cmp    $0x2f,%r13
    0.00 :   a2d84:  jle    a292e <_int_free+0x28e>
         : 610   check_may_shrink_heap():
         : 611   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:38
    0.00 :   a2d8a:  mov    0x1775b0(%rip),%eax        # 21a340 <may_shrink_heap.12>
    0.00 :   a2d90:  test   %eax,%eax
    0.00 :   a2d92:  js     a2f2b <_int_free+0x88b>
         : 615   shrink_heap():
         : 616   ./malloc/arena.c:622
    0.00 :   a2d98:  jne    a2f74 <_int_free+0x8d4>
         : 618   ./malloc/arena.c:631
    0.00 :   a2d9e:  lea    (%rbx,%r13,1),%rdi
    0.00 :   a2da2:  mov    $0x4,%edx
    0.00 :   a2da7:  mov    %r14,%rsi
    0.00 :   a2daa:  mov    %r10,(%rsp)
    0.00 :   a2dae:  call   11eb70 <__madvise>
    0.00 :   a2db3:  mov    (%rsp),%r10
         : 625   ./malloc/arena.c:634
    0.00 :   a2db7:  mov    %r13,0x10(%rbx)
         : 627   ./malloc/arena.c:635
    0.00 :   a2dbb:  nop
         : 629   heap_trim():
         : 630   ./malloc/arena.c:712
    0.00 :   a2dbc:  mov    %rbp,%rdx
         : 632   ./malloc/arena.c:709
    0.00 :   a2dbf:  sub    %r14,0x888(%r15)
         : 634   ./malloc/arena.c:712
    0.00 :   a2dc6:  sub    %r14,%rdx
    0.00 :   a2dc9:  or     $0x1,%rdx
    0.00 :   a2dcd:  mov    %rdx,0x8(%r10)
         : 638   ./malloc/arena.c:714
    0.00 :   a2dd1:  jmp    a292e <_int_free+0x28e>
    0.00 :   a2dd6:  cs nopw 0x0(%rax,%rax,1)
         : 641   _int_free():
         : 642   ./malloc/malloc.c:4463
    0.00 :   a2de0:  nop
         : 644   ./malloc/malloc.c:4464
    0.00 :   a2de1:  mov    %fs:(%rax),%rsi
         : 646   ./malloc/malloc.c:4468
    0.00 :   a2de5:  mov    0x1775ec(%rip),%rdi        # 21a3d8 <mp_+0x78>
         : 648   ./malloc/malloc.c:4464
    0.00 :   a2dec:  mov    0x80(%rsi,%rcx,8),%rax
         : 650   ./malloc/malloc.c:4465
    0.00 :   a2df4:  test   %rax,%rax
    0.00 :   a2df7:  jne    a2e26 <_int_free+0x786>
    0.00 :   a2df9:  jmp    a273b <_int_free+0x9b>
    0.00 :   a2dfe:  xchg   %ax,%ax
         : 655   ./malloc/malloc.c:4472
    0.00 :   a2e00:  cmp    %r8,%rax
    0.00 :   a2e03:  je     a309f <_int_free+0x9ff>
         : 658   ./malloc/malloc.c:4466
    0.00 :   a2e09:  mov    (%rax),%r10
    0.00 :   a2e0c:  shr    $0xc,%rax
    0.00 :   a2e10:  add    $0x1,%rdx
    0.00 :   a2e14:  mov    %rax,%r9
    0.00 :   a2e17:  mov    %r10,%rax
    0.00 :   a2e1a:  xor    %r9,%rax
         : 665   ./malloc/malloc.c:4465
    0.00 :   a2e1d:  cmp    %r9,%r10
    0.00 :   a2e20:  je     a273b <_int_free+0x9b>
         : 668   ./malloc/malloc.c:4468
    0.00 :   a2e26:  cmp    %rdx,%rdi
    0.00 :   a2e29:  je     a3093 <_int_free+0x9f3>
         : 671   ./malloc/malloc.c:4470
    0.00 :   a2e2f:  test   $0xf,%al
    0.00 :   a2e31:  je     a2e00 <_int_free+0x760>
         : 674   ./malloc/malloc.c:4471
    0.00 :   a2e33:  lea    0x13b886(%rip),%rdi        # 1de6c0 <__PRETTY_FUNCTION__.1+0x580>
    0.00 :   a2e3a:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e3f:  nop
         : 678   ./malloc/malloc.c:4583
    0.00 :   a2e40:  lea    0x13b929(%rip),%rdi        # 1de770 <__PRETTY_FUNCTION__.1+0x630>
    0.00 :   a2e47:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e4c:  nopl   0x0(%rax)
         : 682   ./malloc/malloc.c:4587 (discriminator 1)
    0.00 :   a2e50:  mov    0x8(%rax),%rdx
   13.26 :   a2e54:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a2e58:  add    %rdx,%rax
         : 686   ./malloc/malloc.c:4585 (discriminator 1)
    0.00 :   a2e5b:  cmp    %rax,%r14
    0.00 :   a2e5e:  jb     a2857 <_int_free+0x1b7>
         : 689   ./malloc/malloc.c:4588
    0.00 :   a2e64:  lea    0x13b925(%rip),%rdi        # 1de790 <__PRETTY_FUNCTION__.1+0x650>
    0.00 :   a2e6b:  call   a0ce0 <malloc_printerr>
         : 692   ./malloc/malloc.c:4591
    0.00 :   a2e70:  lea    0x13b939(%rip),%rdi        # 1de7b0 <__PRETTY_FUNCTION__.1+0x670>
    0.00 :   a2e77:  call   a0ce0 <malloc_printerr>
    0.00 :   a2e7c:  nopl   0x0(%rax)
         : 696   ./malloc/malloc.c:4598
    0.00 :   a2e80:  lea    -0x10(%rbx),%rdx
    0.00 :   a2e84:  lea    0x10(%rbp),%rdi
         : 699   free_perturb():
         : 700   ./malloc/malloc.c:2013
    0.00 :   a2e88:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   a2e8d:  jmp    a2890 <_int_free+0x1f0>
    0.00 :   a2e92:  nopw   0x0(%rax,%rax,1)
         : 704   _int_free():
         : 705   ./malloc/malloc.c:4674
    0.00 :   a2e98:  mov    %r12,%rdi
    0.00 :   a2e9b:  call   a17f0 <malloc_consolidate>
    0.00 :   a2ea0:  jmp    a2aed <_int_free+0x44d>
    0.00 :   a2ea5:  nopl   (%rax)
         : 710   ./malloc/malloc.c:4678
    0.00 :   a2ea8:  mov    0x8(%rax),%rax
    0.00 :   a2eac:  and    $0xfffffffffffffff8,%rax
    0.00 :   a2eb0:  cmp    0x1774a9(%rip),%rax        # 21a360 <mp_>
    0.00 :   a2eb7:  jb     a292e <_int_free+0x28e>
         : 715   ./malloc/malloc.c:4680
    0.00 :   a2ebd:  mov    0x1774a4(%rip),%rdi        # 21a368 <mp_+0x8>
    0.00 :   a2ec4:  call   a25f0 <systrim.constprop.0>
    0.00 :   a2ec9:  jmp    a292e <_int_free+0x28e>
         : 719   heap_for_ptr():
         : 720   ./malloc/arena.c:156
    0.00 :   a2ece:  mov    %rax,%rbx
    0.00 :   a2ed1:  and    $0xfffffffffc000000,%rbx
         : 723   _int_free():
         : 724   ./malloc/malloc.c:4687
    0.00 :   a2ed8:  mov    (%rbx),%r15
    0.00 :   a2edb:  cmp    %r15,%r12
    0.00 :   a2ede:  jne    a30ab <_int_free+0xa0b>
         : 728   ./malloc/malloc.c:4688
    0.00 :   a2ee4:  mov    0x17747d(%rip),%rcx        # 21a368 <mp_+0x8>
         : 730   heap_trim():
         : 731   ./malloc/arena.c:645
    0.00 :   a2eeb:  mov    %rax,%r10
         : 733   heap_max_size():
         : 734   ./malloc/arena.c:61
    0.00 :   a2eee:  mov    $0x4000000,%r13d
         : 736   _int_free():
         : 737   ./malloc/malloc.c:4688
    0.00 :   a2ef4:  mov    %rcx,0x18(%rsp)
         : 739   heap_max_size():
         : 740   ./malloc/arena.c:61
    0.00 :   a2ef9:  jmp    a2b3e <_int_free+0x49e>
         : 742   _int_free():
         : 743   ./malloc/malloc.c:4562
    0.00 :   a2efe:  lea    0x13686c(%rip),%rdi        # 1d9771 <null+0xef6>
    0.00 :   a2f05:  call   a0ce0 <malloc_printerr>
         : 746   ./malloc/malloc.c:4630
    0.00 :   a2f0a:  lea    0x13b927(%rip),%rdi        # 1de838 <__PRETTY_FUNCTION__.1+0x6f8>
    0.00 :   a2f11:  call   a0ce0 <malloc_printerr>
         : 749   ./malloc/malloc.c:4606
    0.00 :   a2f16:  lea    0x13b8e3(%rip),%rdi        # 1de800 <__PRETTY_FUNCTION__.1+0x6c0>
    0.00 :   a2f1d:  call   a0ce0 <malloc_printerr>
         : 752   heap_trim():
         : 753   ./malloc/arena.c:691
    0.00 :   a2f22:  mov    0x8(%rax),%rdx
    0.00 :   a2f26:  jmp    a2d37 <_int_free+0x697>
         : 756   check_may_shrink_heap():
         : 757   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:41
    0.00 :   a2f2b:  mov    0x176f4e(%rip),%rax        # 219e80 <__libc_enable_secure@GLIBC_PRIVATE>
    0.00 :   a2f32:  mov    (%rax),%ecx
         : 760   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:43
    0.00 :   a2f34:  test   %ecx,%ecx
         : 762   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:41
    0.00 :   a2f36:  mov    %ecx,0x177404(%rip)        # 21a340 <may_shrink_heap.12>
         : 764   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:43
    0.00 :   a2f3c:  mov    %ecx,0x18(%rsp)
    0.00 :   a2f40:  jne    a2f74 <_int_free+0x8d4>
         : 767   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:45
    0.00 :   a2f42:  lea    0x13ba1f(%rip),%rdi        # 1de968 <__PRETTY_FUNCTION__.1+0x828>
    0.00 :   a2f49:  xor    %eax,%eax
    0.00 :   a2f4b:  mov    $0x80000,%esi
    0.00 :   a2f50:  mov    %r10,(%rsp)
    0.00 :   a2f54:  call   1199d0 <__open64_nocancel>
         : 773   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:47
    0.00 :   a2f59:  mov    (%rsp),%r10
    0.00 :   a2f5d:  test   %eax,%eax
         : 776   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:45
    0.00 :   a2f5f:  mov    %eax,%edi
         : 778   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:47
    0.00 :   a2f61:  jns    a3049 <_int_free+0x9a9>
         : 780   shrink_heap():
         : 781   ./malloc/arena.c:622
    0.00 :   a2f67:  cmpl   $0x0,0x1773d2(%rip)        # 21a340 <may_shrink_heap.12>
    0.00 :   a2f6e:  je     a2d9e <_int_free+0x6fe>
         : 784   ./malloc/arena.c:624
    0.00 :   a2f74:  xor    %r9d,%r9d
    0.00 :   a2f77:  or     $0xffffffff,%r8d
    0.00 :   a2f7b:  xor    %edx,%edx
    0.00 :   a2f7d:  mov    $0x32,%ecx
    0.00 :   a2f82:  lea    (%rbx,%r13,1),%rdi
    0.00 :   a2f86:  mov    %r14,%rsi
    0.00 :   a2f89:  mov    %r10,(%rsp)
    0.00 :   a2f8d:  call   11ea10 <__mmap>
    0.00 :   a2f92:  mov    (%rsp),%r10
    0.00 :   a2f96:  add    $0x1,%rax
    0.00 :   a2f9a:  je     a292e <_int_free+0x28e>
         : 796   ./malloc/arena.c:628
    0.00 :   a2fa0:  mov    %r13,0x18(%rbx)
    0.00 :   a2fa4:  jmp    a2db7 <_int_free+0x717>
         : 799   heap_trim():
         : 800   ./malloc/arena.c:662
    0.00 :   a2fa9:  lea    0x13c218(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2fb0:  mov    $0x296,%edx
    0.00 :   a2fb5:  lea    0x1366ee(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fbc:  lea    0x13b8cd(%rip),%rdi        # 1de890 <__PRETTY_FUNCTION__.1+0x750>
    0.00 :   a2fc3:  call   a0e70 <__malloc_assert>
         : 806   _int_free():
         : 807   ./malloc/malloc.c:4702
    0.00 :   a2fc8:  call   136550 <__stack_chk_fail>
         : 809   heap_trim():
         : 810   ./malloc/arena.c:665
    0.00 :   a2fcd:  lea    0x13c1f4(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2fd4:  mov    $0x299,%edx
    0.00 :   a2fd9:  lea    0x1366ca(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fe0:  lea    0x13b8d9(%rip),%rdi        # 1de8c0 <__PRETTY_FUNCTION__.1+0x780>
    0.00 :   a2fe7:  call   a0e70 <__malloc_assert>
         : 816   ./malloc/arena.c:682
    0.00 :   a2fec:  lea    0x13c1d5(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a2ff3:  mov    $0x2aa,%edx
    0.00 :   a2ff8:  lea    0x1366ab(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a2fff:  lea    0x13b92a(%rip),%rdi        # 1de930 <__PRETTY_FUNCTION__.1+0x7f0>
    0.00 :   a3006:  call   a0e70 <__malloc_assert>
         : 822   ./malloc/arena.c:680
    0.00 :   a300b:  lea    0x13c1b6(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a3012:  mov    $0x2a8,%edx
    0.00 :   a3017:  lea    0x13668c(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a301e:  lea    0x13b8c3(%rip),%rdi        # 1de8e8 <__PRETTY_FUNCTION__.1+0x7a8>
    0.00 :   a3025:  call   a0e70 <__malloc_assert>
         : 828   ./malloc/arena.c:659
    0.00 :   a302a:  lea    0x13c197(%rip),%rcx        # 1df1c8 <__PRETTY_FUNCTION__.11>
    0.00 :   a3031:  mov    $0x293,%edx
    0.00 :   a3036:  lea    0x13666d(%rip),%rsi        # 1d96aa <null+0xe2f>
    0.00 :   a303d:  lea    0x13b81c(%rip),%rdi        # 1de860 <__PRETTY_FUNCTION__.1+0x720>
    0.00 :   a3044:  call   a0e70 <__malloc_assert>
         : 834   check_may_shrink_heap():
         : 835   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:50
    0.00 :   a3049:  lea    0x27(%rsp),%rsi
    0.00 :   a304e:  mov    $0x1,%edx
    0.00 :   a3053:  mov    %r10,0x8(%rsp)
    0.00 :   a3058:  mov    %eax,(%rsp)
    0.00 :   a305b:  call   119b20 <__read_nocancel>
         : 841   ./malloc/../sysdeps/unix/sysv/linux/malloc-sysdep.h:51
    0.00 :   a3060:  mov    (%rsp),%edi
    0.00 :   a3063:  mov    0x8(%rsp),%r10
    0.00 :   a3068:  test   %rax,%rax
    0.00 :   a306b:  mov    0x18(%rsp),%ecx
    0.00 :   a306f:  jle    a307b <_int_free+0x9db>
    0.00 :   a3071:  xor    %ecx,%ecx
    0.00 :   a3073:  cmpb   $0x32,0x27(%rsp)
    0.00 :   a3078:  sete   %cl
    0.00 :   a307b:  mov    %r10,(%rsp)
    0.00 :   a307f:  mov    %ecx,0x1772bb(%rip)        # 21a340 <may_shrink_heap.12>
         : 852   __close_nocancel_nostatus():
         : 853   ./malloc/../sysdeps/unix/sysv/linux/not-cancel.h:59
    0.00 :   a3085:  call   119860 <__close_nocancel>
    0.00 :   a308a:  mov    (%rsp),%r10
    0.00 :   a308e:  jmp    a2f67 <_int_free+0x8c7>
         : 857   _int_free():
         : 858   ./malloc/malloc.c:4469
    0.00 :   a3093:  lea    0x13b5f6(%rip),%rdi        # 1de690 <__PRETTY_FUNCTION__.1+0x550>
    0.00 :   a309a:  call   a0ce0 <malloc_printerr>
         : 861   ./malloc/malloc.c:4473
    0.00 :   a309f:  lea    0x13b64a(%rip),%rdi        # 1de6f0 <__PRETTY_FUNCTION__.1+0x5b0>
    0.00 :   a30a6:  call   a0ce0 <malloc_printerr>
         : 864   ./malloc/malloc.c:4687 (discriminator 1)
    0.00 :   a30ab:  lea    0x13c126(%rip),%rcx        # 1df1d8 <__PRETTY_FUNCTION__.10>
    0.00 :   a30b2:  mov    $0x124f,%edx
    0.00 :   a30b7:  lea    0x1365ce(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a30be:  lea    0x1366c9(%rip),%rdi        # 1d978e <null+0xf13>
    0.00 :   a30c5:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of libm.so.6 for cycles:u (12 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000768b0 <__ieee754_pow_fma>:
         : 6     __ieee754_pow_fma():
         : 7     ./math/../sysdeps/ieee754/dbl-64/e_pow.c:283
    0.00 :   768b0:  endbr64
         : 9     top12():
         : 10    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   768b4:  vmovq  %xmm0,%rsi
    0.00 :   768b9:  vmovq  %xmm1,%r9
         : 13    asuint64():
         : 14    ./math/../sysdeps/ieee754/dbl-64/math_config.h:67
    0.00 :   768be:  vmovq  %xmm0,%rax
         : 16    top12():
         : 17    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   768c3:  shr    $0x34,%rsi
         : 19    asuint64():
         : 20    ./math/../sysdeps/ieee754/dbl-64/math_config.h:67
    0.00 :   768c7:  vmovq  %xmm1,%r8
         : 22    top12():
         : 23    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   768cc:  shr    $0x34,%r9
         : 25    __ieee754_pow_fma():
         : 26    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:292
    0.00 :   768d0:  lea    -0x1(%rsi),%edx
         : 28    top12():
         : 29    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   768d3:  mov    %esi,%ecx
         : 31    __ieee754_pow_fma():
         : 32    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:292
    0.00 :   768d5:  cmp    $0x7fd,%edx
    0.00 :   768db:  ja     76ad8 <__ieee754_pow_fma+0x228>
         : 35    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:292 (discriminator 1)
    0.00 :   768e1:  mov    %r9d,%edx
         : 37    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:284 (discriminator 1)
    0.00 :   768e4:  xor    %edi,%edi
         : 39    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:292 (discriminator 1)
    0.00 :   768e6:  and    $0x7ff,%edx
    0.00 :   768ec:  sub    $0x3be,%edx
    0.00 :   768f2:  cmp    $0x7f,%edx
    0.00 :   768f5:  ja     76ad8 <__ieee754_pow_fma+0x228>
         : 44    log_inline():
         : 45    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:62
    0.00 :   768fb:  movabs $0xc0196aab00000000,%rcx
         : 47    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:67
    0.00 :   76905:  vxorps %xmm2,%xmm2,%xmm2
         : 49    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:77
    0.00 :   76909:  vmovsd 0x2009f(%rip),%xmm3        # 969b0 <Zero+0x370>
         : 51    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:88
    0.00 :   76911:  vmovsd 0x3b207(%rip),%xmm5        # b1b20 <__pow_log_data>
         : 53    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:62
    0.00 :   76919:  add    %rax,%rcx
         : 55    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:90
    0.00 :   7691c:  vmovsd 0x3b204(%rip),%xmm4        # b1b28 <__pow_log_data+0x8>
         : 57    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   76924:  vmovsd 0x3b214(%rip),%xmm10        # b1b40 <__pow_log_data+0x20>
         : 59    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:63
    0.00 :   7692c:  mov    %rcx,%rdx
         : 61    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:64
    0.00 :   7692f:  mov    %rcx,%rsi
         : 63    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   76932:  vmovsd 0x3b216(%rip),%xmm11        # b1b50 <__pow_log_data+0x30>
    0.00 :   7693a:  vmovsd 0x3b216(%rip),%xmm12        # b1b58 <__pow_log_data+0x38>
         : 66    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:64
    0.00 :   76942:  sar    $0x34,%rsi
         : 68    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:63
    0.00 :   76946:  shr    $0x2d,%rdx
         : 70    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:67
    0.00 :   7694a:  vcvtsi2sd %esi,%xmm2,%xmm2
         : 72    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:70
    0.00 :   7694e:  and    $0x7f,%edx
         : 74    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:65
    0.00 :   76951:  movabs $0xfff0000000000000,%rsi
    0.00 :   7695b:  and    %rsi,%rcx
         : 77    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:70
    0.00 :   7695e:  add    $0x2,%rdx
         : 79    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:65
    0.00 :   76962:  sub    %rcx,%rax
         : 81    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:70
    0.00 :   76965:  shl    $0x5,%rdx
    0.00 :   76969:  lea    0x3b1b0(%rip),%rcx        # b1b20 <__pow_log_data>
    0.00 :   76970:  add    %rcx,%rdx
         : 85    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:77
    0.00 :   76973:  vmovq  %rax,%xmm0
         : 87    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:88
    0.00 :   76978:  vfmadd213sd 0x18(%rdx),%xmm2,%xmm5
         : 89    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:77
    0.00 :   7697e:  vfmadd132sd 0x8(%rdx),%xmm3,%xmm0
         : 91    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:95
    0.00 :   76984:  vmulsd 0x3b1a4(%rip),%xmm0,%xmm9        # b1b30 <__pow_log_data+0x10>
         : 93    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:90
    0.00 :   7698c:  vfmadd213sd 0x20(%rdx),%xmm2,%xmm4
         : 95    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   76992:  vfmadd213sd 0x3b19d(%rip),%xmm0,%xmm10        # b1b38 <__pow_log_data+0x18>
    0.00 :   7699b:  vfmadd213sd 0x3b1a4(%rip),%xmm0,%xmm11        # b1b48 <__pow_log_data+0x28>
         : 98    ./math/../sysdeps/ieee754/dbl-64/e_pow.c:89
    0.00 :   769a4:  vaddsd %xmm5,%xmm0,%xmm6
         : 100   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:96
    0.00 :   769a8:  vmulsd %xmm9,%xmm0,%xmm2
         : 102   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:91
    0.00 :   769ad:  vsubsd %xmm6,%xmm5,%xmm5
         : 104   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:97
    0.00 :   769b1:  vmulsd %xmm2,%xmm0,%xmm7
         : 106   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:101
    0.00 :   769b5:  vfmsub132sd %xmm0,%xmm2,%xmm9
         : 108   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:91
    0.00 :   769ba:  vaddsd %xmm0,%xmm5,%xmm8
         : 110   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   769be:  vfmadd132sd 0x3b199(%rip),%xmm12,%xmm0        # b1b60 <__pow_log_data+0x40>
         : 112   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:100
    0.00 :   769c7:  vaddsd %xmm2,%xmm6,%xmm5
         : 114   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:102
    0.00 :   769cb:  vsubsd %xmm5,%xmm6,%xmm6
         : 116   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   769cf:  vfmadd132sd %xmm2,%xmm11,%xmm0
         : 118   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:102
    0.00 :   769d4:  vaddsd %xmm2,%xmm6,%xmm6
         : 120   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:112
    0.00 :   769d8:  vfmadd132sd %xmm0,%xmm10,%xmm2
         : 122   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:113
    0.00 :   769dd:  vaddsd %xmm8,%xmm4,%xmm0
    0.00 :   769e2:  vaddsd %xmm9,%xmm0,%xmm0
    0.00 :   769e7:  vaddsd %xmm6,%xmm0,%xmm0
    0.00 :   769eb:  vfmadd231sd %xmm2,%xmm7,%xmm0
         : 127   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:114
    8.42 :   769f0:  vaddsd %xmm0,%xmm5,%xmm4
         : 129   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:115
    0.00 :   769f4:  vsubsd %xmm4,%xmm5,%xmm2
    0.00 :   769f8:  vaddsd %xmm0,%xmm2,%xmm2
         : 132   __ieee754_pow_fma():
         : 133   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:369
    0.00 :   769fc:  vmulsd %xmm4,%xmm1,%xmm0
         : 135   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:370
    0.00 :   76a00:  vfmsub132sd %xmm1,%xmm0,%xmm4
         : 137   top12():
         : 138   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   76a05:  vmovq  %xmm0,%rdx
         : 140   asuint64():
         : 141   ./math/../sysdeps/ieee754/dbl-64/math_config.h:67
    0.00 :   76a0a:  vmovq  %xmm0,%rcx
         : 143   top12():
         : 144   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:45
    0.00 :   76a0f:  shr    $0x34,%rdx
         : 146   exp_inline():
         : 147   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:193
    0.00 :   76a13:  and    $0x7ff,%edx
         : 149   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:194
    0.00 :   76a19:  lea    -0x3c9(%rdx),%eax
         : 151   __ieee754_pow_fma():
         : 152   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:370
    0.00 :   76a1f:  vfmadd132sd %xmm2,%xmm4,%xmm1
         : 154   exp_inline():
         : 155   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:194
    0.00 :   76a24:  cmp    $0x3e,%eax
    0.00 :   76a27:  ja     76b60 <__ieee754_pow_fma+0x2b0>
         : 158   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:225
    0.00 :   76a2d:  vmovsd 0x38f33(%rip),%xmm4        # af968 <__exp_data+0x8>
    0.00 :   76a35:  vmovsd %xmm0,%xmm0,%xmm2
    0.00 :   76a39:  vfmadd132sd 0x38f1e(%rip),%xmm4,%xmm2        # af960 <__exp_data>
    0.00 :   76a42:  lea    0x38f17(%rip),%r8        # af960 <__exp_data>
         : 163   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:243
    0.00 :   76a49:  vmovsd 0x38f3f(%rip),%xmm7        # af990 <__exp_data+0x30>
         : 165   asuint64():
         : 166   ./math/../sysdeps/ieee754/dbl-64/math_config.h:67
    0.00 :   76a51:  vmovq  %xmm2,%rsi
         : 168   exp_inline():
         : 169   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:227
    0.00 :   76a56:  vsubsd %xmm4,%xmm2,%xmm2
         : 171   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:229
    0.00 :   76a5a:  vfmadd231sd 0x38f0d(%rip),%xmm2,%xmm0        # af970 <__exp_data+0x10>
         : 173   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:233
    0.00 :   76a63:  mov    %rsi,%rcx
         : 175   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:234
    0.00 :   76a66:  lea    (%rsi,%rdi,1),%rax
         : 177   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:229
    0.00 :   76a6a:  vfmadd132sd 0x38f05(%rip),%xmm0,%xmm2        # af978 <__exp_data+0x18>
         : 179   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:233
    0.00 :   76a73:  and    $0x7f,%ecx
         : 181   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:234
    0.00 :   76a76:  shl    $0x2d,%rax
         : 183   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:233
    0.00 :   76a7a:  add    %rcx,%rcx
         : 185   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:237
    0.00 :   76a7d:  add    0x78(%r8,%rcx,8),%rax
         : 187   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:231
   32.74 :   76a82:  vaddsd %xmm2,%xmm1,%xmm1
         : 189   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:243
    0.00 :   76a86:  vmovsd 0x38efa(%rip),%xmm2        # af988 <__exp_data+0x28>
    0.00 :   76a8e:  vfmadd213sd 0x38ee9(%rip),%xmm1,%xmm2        # af980 <__exp_data+0x20>
    0.00 :   76a97:  vaddsd 0x70(%r8,%rcx,8),%xmm1,%xmm4
         : 193   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:240
    0.00 :   76a9e:  vmulsd %xmm1,%xmm1,%xmm0
         : 195   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:243
    0.00 :   76aa2:  vfmadd132sd 0x38eed(%rip),%xmm7,%xmm1        # af998 <__exp_data+0x38>
    8.40 :   76aab:  vfmadd132sd %xmm0,%xmm4,%xmm2
    0.00 :   76ab0:  vmulsd %xmm0,%xmm0,%xmm0
    0.00 :   76ab4:  vfmadd132sd %xmm0,%xmm2,%xmm1
         : 200   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:244
    0.00 :   76ab9:  test   %edx,%edx
    0.00 :   76abb:  je     76b88 <__ieee754_pow_fma+0x2d8>
         : 203   asdouble():
         : 204   ./math/../sysdeps/ieee754/dbl-64/math_config.h:79
    0.00 :   76ac1:  vmovq  %rax,%xmm0
         : 206   exp_inline():
         : 207   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:249
    0.00 :   76ac6:  vfmadd132sd %xmm0,%xmm0,%xmm1
    8.41 :   76acb:  vmovsd %xmm1,%xmm1,%xmm2
         : 210   __ieee754_pow_fma():
         : 211   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:380
    0.00 :   76acf:  vmovsd %xmm2,%xmm2,%xmm0
    0.00 :   76ad3:  ret
    0.00 :   76ad4:  nopl   0x0(%rax)
         : 215   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:299
    0.00 :   76ad8:  movabs $0xffdffffffffffffe,%rdx
         : 217   zeroinfnan():
         : 218   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:273
    0.00 :   76ae2:  lea    (%r8,%r8,1),%rdi
    0.00 :   76ae6:  lea    -0x1(%rdi),%r10
         : 221   __ieee754_pow_fma():
         : 222   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:299
    0.00 :   76aea:  cmp    %rdx,%r10
    0.00 :   76aed:  ja     76d60 <__ieee754_pow_fma+0x4b0>
         : 225   zeroinfnan():
         : 226   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:273
    0.00 :   76af3:  lea    (%rax,%rax,1),%rdi
    0.00 :   76af7:  lea    -0x1(%rdi),%r10
         : 229   __ieee754_pow_fma():
         : 230   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:314
    0.00 :   76afb:  cmp    %rdx,%r10
    0.00 :   76afe:  ja     76dd8 <__ieee754_pow_fma+0x528>
         : 233   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:284
    0.00 :   76b04:  xor    %edi,%edi
         : 235   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:329
    0.00 :   76b06:  test   %rax,%rax
    0.00 :   76b09:  js     76be0 <__ieee754_pow_fma+0x330>
         : 238   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:340
    0.00 :   76b0f:  mov    %r9d,%edx
    0.00 :   76b12:  and    $0x7ff,%edx
    0.00 :   76b18:  lea    -0x3be(%rdx),%esi
    0.00 :   76b1e:  cmp    $0x7f,%esi
    0.00 :   76b21:  jbe    76c40 <__ieee754_pow_fma+0x390>
         : 244   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:343
    0.00 :   76b27:  movabs $0x3ff0000000000000,%rcx
    0.00 :   76b31:  cmp    %rcx,%rax
    0.00 :   76b34:  je     76d08 <__ieee754_pow_fma+0x458>
         : 248   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:345
    0.00 :   76b3a:  cmp    $0x3bd,%edx
    0.00 :   76b40:  ja     76d18 <__ieee754_pow_fma+0x468>
         : 251   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:349
    0.00 :   76b46:  cmp    %rcx,%rax
    0.00 :   76b49:  jbe    76e30 <__ieee754_pow_fma+0x580>
         : 254   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:349 (discriminator 1)
    0.00 :   76b4f:  vaddsd 0x13779(%rip),%xmm1,%xmm2        # 8a2d0 <one>
    0.00 :   76b57:  jmp    76acf <__ieee754_pow_fma+0x21f>
    0.00 :   76b5c:  nopl   0x0(%rax)
         : 258   exp_inline():
         : 259   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:197
    0.00 :   76b60:  test   %eax,%eax
    0.00 :   76b62:  js     76d40 <__ieee754_pow_fma+0x490>
         : 262   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:204
    0.00 :   76b68:  cmp    $0x408,%edx
    0.00 :   76b6e:  jbe    76c70 <__ieee754_pow_fma+0x3c0>
         : 265   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:207
    0.00 :   76b74:  test   %rcx,%rcx
    0.00 :   76b77:  js     76d32 <__ieee754_pow_fma+0x482>
         : 268   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:210
    0.00 :   76b7d:  jmp    70a10 <__math_oflow>
    0.00 :   76b82:  nopw   0x0(%rax,%rax,1)
         : 271   specialcase():
         : 272   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:145
    0.00 :   76b88:  test   $0x80000000,%esi
    0.00 :   76b8e:  je     76e08 <__ieee754_pow_fma+0x558>
         : 275   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:154
    0.00 :   76b94:  movabs $0x3fe0000000000000,%rdx
         : 277   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:158
    0.00 :   76b9e:  vmovsd 0x1372a(%rip),%xmm4        # 8a2d0 <one>
         : 279   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:154
    0.00 :   76ba6:  add    %rdx,%rax
         : 281   asdouble():
         : 282   ./math/../sysdeps/ieee754/dbl-64/math_config.h:79
    0.00 :   76ba9:  vmovq  %rax,%xmm2
         : 284   specialcase():
         : 285   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:157
    0.00 :   76bae:  vmulsd %xmm2,%xmm1,%xmm1
    0.00 :   76bb2:  vaddsd %xmm1,%xmm2,%xmm0
         : 288   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:158
    0.00 :   76bb6:  vandpd 0x13702(%rip),%xmm0,%xmm5        # 8a2c0 <othermask>
    0.00 :   76bbe:  vcomisd %xmm5,%xmm4
    0.00 :   76bc2:  ja     76c80 <__ieee754_pow_fma+0x3d0>
    0.00 :   76bc8:  vmovsd 0x1c480(%rip),%xmm1        # 93050 <asncs+0x5050>
         : 293   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:177
    0.00 :   76bd0:  vmulsd %xmm1,%xmm0,%xmm0
         : 295   check_uflow():
         : 296   ./math/../sysdeps/ieee754/dbl-64/math_config.h:128
    0.00 :   76bd4:  jmp    70a80 <__math_check_uflow>
    0.00 :   76bd9:  nopl   0x0(%rax)
         : 299   checkint():
         : 300   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:257
    0.00 :   76be0:  mov    %r9d,%edx
    0.00 :   76be3:  and    $0x7ff,%edx
         : 303   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:258
    0.00 :   76be9:  cmp    $0x3fe,%edx
    0.00 :   76bef:  jle    76ce0 <__ieee754_pow_fma+0x430>
         : 306   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:260
    0.00 :   76bf5:  cmp    $0x433,%edx
    0.00 :   76bfb:  jg     76c27 <__ieee754_pow_fma+0x377>
         : 309   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:262
    0.00 :   76bfd:  mov    $0x433,%ecx
    0.00 :   76c02:  sub    %edx,%ecx
    0.00 :   76c04:  mov    $0xffffffffffffffff,%rdx
    0.00 :   76c0b:  shl    %cl,%rdx
    0.00 :   76c0e:  not    %rdx
    0.00 :   76c11:  test   %r8,%rdx
    0.00 :   76c14:  jne    76ce0 <__ieee754_pow_fma+0x430>
         : 317   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:264
    0.00 :   76c1a:  shr    %cl,%r8
    0.00 :   76c1d:  and    $0x1,%r8d
    0.00 :   76c21:  mov    %r8d,%edi
    0.00 :   76c24:  shl    $0x12,%edi
         : 322   __ieee754_pow_fma():
         : 323   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:338
    0.00 :   76c27:  mov    %esi,%ecx
         : 325   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:337
    0.00 :   76c29:  btr    $0x3f,%rax
         : 327   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:338
    0.00 :   76c2e:  and    $0x7ff,%ecx
    0.00 :   76c34:  jmp    76b0f <__ieee754_pow_fma+0x25f>
    0.00 :   76c39:  nopl   0x0(%rax)
         : 331   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:356
    0.00 :   76c40:  test   %ecx,%ecx
    0.00 :   76c42:  jne    768fb <__ieee754_pow_fma+0x4b>
         : 334   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:359
    0.00 :   76c48:  vmulsd 0x136a0(%rip),%xmm0,%xmm3        # 8a2f0 <signmask+0x10>
         : 336   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:361
    0.00 :   76c50:  movabs $0xfcc0000000000000,%rax
         : 338   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:359
    0.00 :   76c5a:  vmovq  %xmm3,%rdx
         : 340   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:360
    0.00 :   76c5f:  btr    $0x3f,%rdx
         : 342   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:361
    0.00 :   76c64:  add    %rdx,%rax
    0.00 :   76c67:  jmp    768fb <__ieee754_pow_fma+0x4b>
    0.00 :   76c6c:  nopl   0x0(%rax)
         : 346   exp_inline():
         : 347   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:213
    0.00 :   76c70:  xor    %edx,%edx
    0.00 :   76c72:  jmp    76a2d <__ieee754_pow_fma+0x17d>
    0.00 :   76c77:  nopw   0x0(%rax,%rax,1)
         : 351   specialcase():
         : 352   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:165
    0.00 :   76c80:  vxorpd %xmm5,%xmm5,%xmm5
         : 354   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:167
    0.00 :   76c84:  vsubsd %xmm0,%xmm2,%xmm2
         : 356   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:164
    0.00 :   76c88:  vcmpltsd %xmm5,%xmm0,%xmm6
         : 358   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:167
    0.00 :   76c8d:  vaddsd %xmm1,%xmm2,%xmm2
         : 360   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:164
    0.00 :   76c91:  vblendvpd %xmm6,%xmm3,%xmm4,%xmm4
         : 362   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:168
    0.00 :   76c97:  vaddsd %xmm4,%xmm0,%xmm3
         : 364   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:169
    0.00 :   76c9b:  vsubsd %xmm3,%xmm4,%xmm1
    0.00 :   76c9f:  vaddsd %xmm0,%xmm1,%xmm0
    0.00 :   76ca3:  vaddsd %xmm2,%xmm0,%xmm0
         : 368   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:170
    0.00 :   76ca7:  vaddsd %xmm3,%xmm0,%xmm0
    0.00 :   76cab:  vsubsd %xmm4,%xmm0,%xmm0
         : 371   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:172
    0.00 :   76caf:  vucomisd %xmm5,%xmm0
    0.00 :   76cb3:  jp     76cc9 <__ieee754_pow_fma+0x419>
    0.00 :   76cb5:  jne    76cc9 <__ieee754_pow_fma+0x419>
         : 375   asdouble():
         : 376   ./math/../sysdeps/ieee754/dbl-64/math_config.h:79
    0.00 :   76cb7:  movabs $0x8000000000000000,%rdx
    0.00 :   76cc1:  and    %rdx,%rax
    0.00 :   76cc4:  vmovq  %rax,%xmm0
         : 380   specialcase():
         : 381   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:175
    0.00 :   76cc9:  vmovsd 0x1c37f(%rip),%xmm1        # 93050 <asncs+0x5050>
    0.00 :   76cd1:  vmovsd %xmm1,%xmm1,%xmm2
    0.00 :   76cd5:  vmulsd %xmm1,%xmm2,%xmm2
    0.00 :   76cd9:  jmp    76bd0 <__ieee754_pow_fma+0x320>
    0.00 :   76cde:  xchg   %ax,%ax
         : 387   __ieee754_pow_fma():
         : 388   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:334
    0.00 :   76ce0:  jmp    70a50 <__math_invalid>
         : 390   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:304
    0.00 :   76ce5:  movabs $0xfff0000000000000,%rdx
         : 392   issignaling_inline():
         : 393   ./math/../sysdeps/ieee754/dbl-64/math_config.h:88
    0.00 :   76cef:  btc    $0x33,%r8
    0.00 :   76cf4:  lea    (%r8,%r8,1),%rax
         : 396   __ieee754_pow_fma():
         : 397   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:304
    0.00 :   76cf8:  cmp    %rdx,%rax
    0.00 :   76cfb:  ja     76e64 <__ieee754_pow_fma+0x5b4>
    0.00 :   76d01:  nopl   0x0(%rax)
         : 401   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:302
    0.00 :   76d08:  vmovsd 0x135c0(%rip),%xmm2        # 8a2d0 <one>
    0.00 :   76d10:  jmp    76acf <__ieee754_pow_fma+0x21f>
    0.00 :   76d15:  nopl   (%rax)
         : 405   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:353
    0.00 :   76d18:  cmp    %rcx,%rax
    0.00 :   76d1b:  setbe  %dl
    0.00 :   76d1e:  cmp    $0x7ff,%r9d
    0.00 :   76d25:  setbe  %al
    0.00 :   76d28:  xor    %edi,%edi
         : 411   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:354
    0.00 :   76d2a:  cmp    %al,%dl
    0.00 :   76d2c:  jne    76b7d <__ieee754_pow_fma+0x2cd>
         : 414   exp_inline():
         : 415   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:208
    0.00 :   76d32:  jmp    709f0 <__math_uflow>
    0.00 :   76d37:  nopw   0x0(%rax,%rax,1)
         : 418   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:201
    0.00 :   76d40:  vaddsd 0x13588(%rip),%xmm0,%xmm2        # 8a2d0 <one>
         : 420   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:202
    0.00 :   76d48:  test   %edi,%edi
    0.00 :   76d4a:  je     76acf <__ieee754_pow_fma+0x21f>
    0.00 :   76d50:  vxorpd 0x13588(%rip),%xmm2,%xmm2        # 8a2e0 <signmask>
    0.00 :   76d58:  jmp    76acf <__ieee754_pow_fma+0x21f>
    0.00 :   76d5d:  nopl   (%rax)
         : 426   __ieee754_pow_fma():
         : 427   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:301
    0.00 :   76d60:  test   %rdi,%rdi
    8.43 :   76d63:  je     76e41 <__ieee754_pow_fma+0x591>
         : 430   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:303
    0.00 :   76d69:  movabs $0x3ff0000000000000,%rdx
    0.00 :   76d73:  cmp    %rdx,%rax
    0.00 :   76d76:  je     76ce5 <__ieee754_pow_fma+0x435>
         : 434   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:306
    0.00 :   76d7c:  movabs $0xffe0000000000000,%rdx
         : 436   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:305
    0.00 :   76d86:  add    %rax,%rax
         : 438   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:306
    0.00 :   76d89:  cmp    %rdx,%rdi
    0.00 :   76d8c:  jne    76e64 <__ieee754_pow_fma+0x5b4>
    0.00 :   76d92:  cmp    %rdx,%rax
    0.00 :   76d95:  ja     76e64 <__ieee754_pow_fma+0x5b4>
         : 443   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:308
    0.00 :   76d9b:  movabs $0x7fe0000000000000,%rdx
    0.00 :   76da5:  cmp    %rdx,%rax
    0.00 :   76da8:  je     76d08 <__ieee754_pow_fma+0x458>
         : 447   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:310
    0.00 :   76dae:  sub    $0x1,%rdx
    0.00 :   76db2:  not    %r8
         : 450   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:311
    0.00 :   76db5:  vxorpd %xmm2,%xmm2,%xmm2
         : 452   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:310
    0.00 :   76db9:  cmp    %rdx,%rax
    0.00 :   76dbc:  seta   %al
    0.00 :   76dbf:  shr    $0x3f,%r8
    0.00 :   76dc3:  cmp    %r8b,%al
    0.00 :   76dc6:  jne    76acf <__ieee754_pow_fma+0x21f>
         : 458   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:312
    0.00 :   76dcc:  vmulsd %xmm1,%xmm1,%xmm2
    0.00 :   76dd0:  jmp    76acf <__ieee754_pow_fma+0x21f>
    0.00 :   76dd5:  nopl   (%rax)
         : 462   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:316
    0.00 :   76dd8:  vmulsd %xmm0,%xmm0,%xmm2
         : 464   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:284
    0.00 :   76ddc:  xor    %r10d,%r10d
         : 466   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:317
    0.00 :   76ddf:  test   %rax,%rax
    0.00 :   76de2:  js     76e6d <__ieee754_pow_fma+0x5bd>
         : 469   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:322
    0.00 :   76de8:  test   %rdi,%rdi
    0.00 :   76deb:  jne    76ebf <__ieee754_pow_fma+0x60f>
         : 472   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:322 (discriminator 1)
    0.00 :   76df1:  test   %r8,%r8
    0.00 :   76df4:  jns    76acf <__ieee754_pow_fma+0x21f>
         : 475   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:323
    0.00 :   76dfa:  mov    %r10d,%edi
    0.00 :   76dfd:  jmp    70a20 <__math_divzero>
    0.00 :   76e02:  nopw   0x0(%rax,%rax,1)
         : 479   asdouble():
         : 480   ./math/../sysdeps/ieee754/dbl-64/math_config.h:79
    0.00 :   76e08:  movabs $0xc0f0000000000000,%rdx
    0.00 :   76e12:  add    %rdx,%rax
    0.00 :   76e15:  vmovq  %rax,%xmm0
         : 484   specialcase():
         : 485   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:150
    0.00 :   76e1a:  vfmadd132sd %xmm1,%xmm0,%xmm0
    0.00 :   76e1f:  vmulsd 0x1f809(%rip),%xmm0,%xmm0        # 96630 <cij+0x3550>
         : 488   check_oflow():
         : 489   ./math/../sysdeps/ieee754/dbl-64/math_config.h:121
    0.00 :   76e27:  jmp    70aa0 <__math_check_oflow>
    0.00 :   76e2c:  nopl   0x0(%rax)
         : 492   __ieee754_pow_fma():
         : 493   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:349 (discriminator 2)
    0.00 :   76e30:  vmovsd 0x13498(%rip),%xmm0        # 8a2d0 <one>
    0.00 :   76e38:  vsubsd %xmm1,%xmm0,%xmm2
    0.00 :   76e3c:  jmp    76acf <__ieee754_pow_fma+0x21f>
         : 497   issignaling_inline():
         : 498   ./math/../sysdeps/ieee754/dbl-64/math_config.h:88
    0.00 :   76e41:  btc    $0x33,%rax
         : 500   __ieee754_pow_fma():
         : 501   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:302
    0.00 :   76e46:  vmovsd 0x13482(%rip),%xmm2        # 8a2d0 <one>
   33.59 :   76e4e:  movabs $0xfff0000000000000,%rdx
         : 504   issignaling_inline():
         : 505   ./math/../sysdeps/ieee754/dbl-64/math_config.h:88
    0.00 :   76e58:  add    %rax,%rax
         : 507   __ieee754_pow_fma():
         : 508   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:302
    0.00 :   76e5b:  cmp    %rdx,%rax
    0.00 :   76e5e:  jbe    76acf <__ieee754_pow_fma+0x21f>
         : 511   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:302 (discriminator 1)
    0.00 :   76e64:  vaddsd %xmm1,%xmm0,%xmm2
    0.00 :   76e68:  jmp    76acf <__ieee754_pow_fma+0x21f>
         : 514   checkint():
         : 515   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:257
    0.00 :   76e6d:  and    $0x7ff,%r9d
         : 517   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:260
    0.00 :   76e74:  lea    -0x3ff(%r9),%eax
    0.00 :   76e7b:  cmp    $0x34,%eax
    0.00 :   76e7e:  ja     76de8 <__ieee754_pow_fma+0x538>
         : 521   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:262
    0.00 :   76e84:  mov    $0x433,%ecx
    0.00 :   76e89:  mov    $0xffffffffffffffff,%rax
    0.00 :   76e90:  sub    %r9d,%ecx
    0.00 :   76e93:  shl    %cl,%rax
    0.00 :   76e96:  not    %rax
    0.00 :   76e99:  test   %r8,%rax
    0.00 :   76e9c:  jne    76de8 <__ieee754_pow_fma+0x538>
         : 529   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:264
    0.00 :   76ea2:  bt     %rcx,%r8
    0.00 :   76ea6:  jae    76de8 <__ieee754_pow_fma+0x538>
         : 532   __ieee754_pow_fma():
         : 533   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:319
    0.00 :   76eac:  vxorpd 0x1342c(%rip),%xmm2,%xmm2        # 8a2e0 <signmask>
         : 535   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:320
    0.00 :   76eb4:  mov    $0x1,%r10d
    0.00 :   76eba:  jmp    76de8 <__ieee754_pow_fma+0x538>
         : 538   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:326
    0.00 :   76ebf:  test   %r8,%r8
    0.00 :   76ec2:  jns    76acf <__ieee754_pow_fma+0x21f>
         : 541   ./math/../sysdeps/ieee754/dbl-64/e_pow.c:326 (discriminator 3)
    0.00 :   76ec8:  vmovsd 0x13400(%rip),%xmm0        # 8a2d0 <one>
    0.00 :   76ed0:  vdivsd %xmm2,%xmm0,%xmm0
    0.00 :   76ed4:  vmovsd %xmm0,%xmm0,%xmm2
    0.00 :   76ed8:  jmp    76acf <__ieee754_pow_fma+0x21f>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (12 samples, percent: local period)
-------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a5740 <__libc_realloc>:
         : 6     __GI___libc_realloc():
         : 7     ./malloc/malloc.c:3400
    0.00 :   a5740:  endbr64
    0.00 :   a5744:  push   %r15
    0.00 :   a5746:  push   %r14
    0.00 :   a5748:  push   %r13
    0.00 :   a574a:  push   %r12
    0.00 :   a574c:  mov    %rsi,%r12
    0.00 :   a574f:  push   %rbp
    7.92 :   a5750:  mov    %rdi,%rbp
    0.00 :   a5753:  push   %rbx
    0.00 :   a5754:  sub    $0x28,%rsp
         : 18    ./malloc/malloc.c:3406
    0.00 :   a5758:  cmpb   $0x0,0x17bd89(%rip)        # 2214e8 <__malloc_initialized>
   19.66 :   a575f:  je     a58e8 <__libc_realloc+0x1a8>
         : 21    ./malloc/malloc.c:3410
    0.00 :   a5765:  test   %r12,%r12
    0.00 :   a5768:  jne    a5790 <__libc_realloc+0x50>
    0.00 :   a576a:  test   %rbp,%rbp
    0.00 :   a576d:  jne    a5978 <__libc_realloc+0x238>
         : 26    ./malloc/malloc.c:3515
    0.00 :   a5773:  add    $0x28,%rsp
         : 28    ./malloc/malloc.c:3418
    0.00 :   a5777:  mov    %r12,%rdi
         : 30    ./malloc/malloc.c:3515
    0.00 :   a577a:  pop    %rbx
    0.00 :   a577b:  pop    %rbp
    0.00 :   a577c:  pop    %r12
    0.00 :   a577e:  pop    %r13
    0.00 :   a5780:  pop    %r14
    0.00 :   a5782:  pop    %r15
         : 37    ./malloc/malloc.c:3418
    0.00 :   a5784:  jmp    a50a0 <__libc_malloc>
    0.00 :   a5789:  nopl   0x0(%rax)
         : 40    ./malloc/malloc.c:3417
    0.00 :   a5790:  test   %rbp,%rbp
    7.54 :   a5793:  je     a5773 <__libc_realloc+0x33>
         : 43    ./malloc/malloc.c:3428
    0.00 :   a5795:  mov    -0x8(%rbp),%rax
         : 45    ./malloc/malloc.c:3426
    7.85 :   a5799:  lea    -0x10(%rbp),%r13
         : 47    ./malloc/malloc.c:3431
    0.00 :   a579d:  xor    %ebx,%ebx
         : 49    ./malloc/malloc.c:3428
    0.00 :   a579f:  mov    %rax,%r15
    0.00 :   a57a2:  and    $0xfffffffffffffff8,%r15
         : 52    ./malloc/malloc.c:3430
    0.00 :   a57a6:  test   $0x2,%al
    0.00 :   a57a8:  jne    a57ed <__libc_realloc+0xad>
         : 55    ./malloc/malloc.c:3434
    0.00 :   a57aa:  mov    0x1745f7(%rip),%rdx        # 219da8 <_DYNAMIC+0x1e8>
    0.00 :   a57b1:  cmpq   $0x0,%fs:(%rdx)
   19.57 :   a57b6:  je     a5b58 <__libc_realloc+0x418>
         : 59    arena_for_chunk():
         : 60    ./malloc/arena.c:162 (discriminator 3)
    0.00 :   a57bc:  lea    0x1754bd(%rip),%rbx        # 21ac80 <main_arena>
    0.00 :   a57c3:  test   $0x4,%al
    0.00 :   a57c5:  je     a57ed <__libc_realloc+0xad>
         : 64    heap_max_size():
         : 65    ./malloc/arena.c:61
    0.00 :   a57c7:  mov    0x174bc2(%rip),%rcx        # 21a390 <mp_+0x30>
         : 67    heap_for_ptr():
         : 68    ./malloc/arena.c:156
    0.00 :   a57ce:  lea    0x0(,%rcx,4),%rdx
    0.00 :   a57d6:  neg    %rdx
    0.00 :   a57d9:  test   %rcx,%rcx
    0.00 :   a57dc:  mov    $0xfffffffffc000000,%rcx
    0.00 :   a57e3:  cmove  %rcx,%rdx
         : 74    arena_for_chunk():
         : 75    ./malloc/arena.c:162
    0.00 :   a57e7:  and    %r13,%rdx
    0.00 :   a57ea:  mov    (%rdx),%rbx
         : 78    __GI___libc_realloc():
         : 79    ./malloc/malloc.c:3442
    0.00 :   a57ed:  mov    %r15,%rdx
    0.00 :   a57f0:  neg    %rdx
    0.00 :   a57f3:  cmp    %r13,%rdx
    8.66 :   a57f6:  jb     a5aa0 <__libc_realloc+0x360>
         : 84    ./malloc/malloc.c:3443
    0.00 :   a57fc:  test   $0xf,%r13b
    0.00 :   a5800:  jne    a5aa0 <__libc_realloc+0x360>
         : 87    checked_request2size():
         : 88    ./malloc/malloc.c:1343
    0.00 :   a5806:  test   %r12,%r12
    7.13 :   a5809:  js     a5ab0 <__libc_realloc+0x370>
         : 91    ./malloc/malloc.c:1362
    0.00 :   a580f:  lea    0x17(%r12),%rdx
    0.00 :   a5814:  mov    %rdx,%r14
    0.00 :   a5817:  and    $0xfffffffffffffff0,%r14
    0.00 :   a581b:  cmp    $0x1f,%rdx
    0.00 :   a581f:  mov    $0x20,%edx
    0.00 :   a5824:  cmovbe %rdx,%r14
         : 98    __GI___libc_realloc():
         : 99    ./malloc/malloc.c:3452
    0.00 :   a5828:  test   $0x2,%al
    0.00 :   a582a:  jne    a5998 <__libc_realloc+0x258>
         : 102   ./malloc/malloc.c:3483 (discriminator 4)
    0.00 :   a5830:  mov    %fs:0x18,%eax
    0.00 :   a5838:  test   %eax,%eax
    0.00 :   a583a:  je     a58f8 <__libc_realloc+0x1b8>
         : 106   ./malloc/malloc.c:3492
    0.00 :   a5840:  xor    %eax,%eax
    0.00 :   a5842:  mov    $0x1,%edx
    0.00 :   a5847:  lock cmpxchg %edx,(%rbx)
    0.00 :   a584b:  jne    a5be8 <__libc_realloc+0x4a8>
         : 111   ./malloc/malloc.c:3494 (discriminator 6)
    0.00 :   a5851:  mov    %r14,%rcx
    0.00 :   a5854:  mov    %r15,%rdx
    0.00 :   a5857:  mov    %r13,%rsi
    0.00 :   a585a:  mov    %rbx,%rdi
    0.00 :   a585d:  call   a4ab0 <_int_realloc>
    0.00 :   a5862:  mov    %rax,%r8
         : 118   ./malloc/malloc.c:3496 (discriminator 6)
    0.00 :   a5865:  xor    %eax,%eax
    0.00 :   a5867:  xchg   %eax,(%rbx)
    0.00 :   a5869:  cmp    $0x1,%eax
    0.00 :   a586c:  jg     a5bf8 <__libc_realloc+0x4b8>
         : 123   ./malloc/malloc.c:3497
    0.00 :   a5872:  test   %r8,%r8
    0.00 :   a5875:  je     a5b90 <__libc_realloc+0x450>
         : 126   ./malloc/malloc.c:3497 (discriminator 1)
    0.00 :   a587b:  mov    -0x8(%r8),%rax
    0.00 :   a587f:  test   $0x2,%al
    0.00 :   a5881:  jne    a5983 <__libc_realloc+0x243>
         : 130   arena_for_chunk():
         : 131   ./malloc/arena.c:162 (discriminator 2)
    0.00 :   a5887:  lea    0x1753f2(%rip),%rdx        # 21ac80 <main_arena>
    0.00 :   a588e:  test   $0x4,%al
    0.00 :   a5890:  je     a58bc <__libc_realloc+0x17c>
         : 135   heap_max_size():
         : 136   ./malloc/arena.c:61
    0.00 :   a5892:  mov    0x174af7(%rip),%rdx        # 21a390 <mp_+0x30>
         : 138   heap_for_ptr():
         : 139   ./malloc/arena.c:156
    0.00 :   a5899:  lea    0x0(,%rdx,4),%rax
    0.00 :   a58a1:  neg    %rax
    0.00 :   a58a4:  test   %rdx,%rdx
    0.00 :   a58a7:  mov    $0xfffffffffc000000,%rdx
    0.00 :   a58ae:  cmove  %rdx,%rax
         : 145   __GI___libc_realloc():
         : 146   ./malloc/malloc.c:3497
    0.00 :   a58b2:  lea    -0x10(%r8),%rdx
         : 148   arena_for_chunk():
         : 149   ./malloc/arena.c:162
    0.00 :   a58b6:  and    %rdx,%rax
    0.00 :   a58b9:  mov    (%rax),%rdx
         : 152   __GI___libc_realloc():
         : 153   ./malloc/malloc.c:3497
    0.00 :   a58bc:  cmp    %rdx,%rbx
    0.00 :   a58bf:  je     a5983 <__libc_realloc+0x243>
         : 156   ./malloc/malloc.c:3497 (discriminator 3)
    0.00 :   a58c5:  lea    0x1398dc(%rip),%rcx        # 1df1a8 <__PRETTY_FUNCTION__.14>
    0.00 :   a58cc:  mov    $0xda9,%edx
    0.00 :   a58d1:  lea    0x133db4(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a58d8:  lea    0x1396a1(%rip),%rdi        # 1def80 <__PRETTY_FUNCTION__.1+0xe40>
    0.00 :   a58df:  call   a0e70 <__malloc_assert>
    0.00 :   a58e4:  nopl   0x0(%rax)
         : 163   ptmalloc_init():
         : 164   ./malloc/arena.c:315
    0.00 :   a58e8:  call   a19b0 <ptmalloc_init.part.0>
    0.00 :   a58ed:  jmp    a5765 <__libc_realloc+0x25>
    0.00 :   a58f2:  nopw   0x0(%rax,%rax,1)
         : 168   __GI___libc_realloc():
         : 169   ./malloc/malloc.c:3485
    0.00 :   a58f8:  mov    %r14,%rcx
    0.00 :   a58fb:  mov    %r15,%rdx
    0.00 :   a58fe:  mov    %r13,%rsi
    0.00 :   a5901:  mov    %rbx,%rdi
    0.00 :   a5904:  call   a4ab0 <_int_realloc>
    0.00 :   a5909:  mov    %rax,%r8
         : 176   ./malloc/malloc.c:3486
    0.00 :   a590c:  test   %rax,%rax
    0.00 :   a590f:  je     a5983 <__libc_realloc+0x243>
         : 179   ./malloc/malloc.c:3486 (discriminator 1)
    0.00 :   a5911:  mov    -0x8(%rax),%rax
    0.00 :   a5915:  test   $0x2,%al
    0.00 :   a5917:  jne    a5983 <__libc_realloc+0x243>
         : 183   arena_for_chunk():
         : 184   ./malloc/arena.c:162 (discriminator 2)
    0.00 :   a5919:  lea    0x175360(%rip),%rdx        # 21ac80 <main_arena>
    0.00 :   a5920:  test   $0x4,%al
    0.00 :   a5922:  je     a594e <__libc_realloc+0x20e>
         : 188   heap_max_size():
         : 189   ./malloc/arena.c:61
    0.00 :   a5924:  mov    0x174a65(%rip),%rdx        # 21a390 <mp_+0x30>
         : 191   heap_for_ptr():
         : 192   ./malloc/arena.c:156
    0.00 :   a592b:  lea    0x0(,%rdx,4),%rax
    0.00 :   a5933:  neg    %rax
    0.00 :   a5936:  test   %rdx,%rdx
    0.00 :   a5939:  mov    $0xfffffffffc000000,%rdx
    0.00 :   a5940:  cmove  %rdx,%rax
         : 198   __GI___libc_realloc():
         : 199   ./malloc/malloc.c:3486
    0.00 :   a5944:  lea    -0x10(%r8),%rdx
         : 201   arena_for_chunk():
         : 202   ./malloc/arena.c:162
    0.00 :   a5948:  and    %rdx,%rax
    0.00 :   a594b:  mov    (%rax),%rdx
         : 205   __GI___libc_realloc():
         : 206   ./malloc/malloc.c:3486
    0.00 :   a594e:  cmp    %rdx,%rbx
    0.00 :   a5951:  je     a5983 <__libc_realloc+0x243>
         : 209   ./malloc/malloc.c:3486 (discriminator 3)
    0.00 :   a5953:  lea    0x13984e(%rip),%rcx        # 1df1a8 <__PRETTY_FUNCTION__.14>
    0.00 :   a595a:  mov    $0xd9e,%edx
    0.00 :   a595f:  lea    0x133d26(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a5966:  lea    0x139613(%rip),%rdi        # 1def80 <__PRETTY_FUNCTION__.1+0xe40>
    0.00 :   a596d:  call   a0e70 <__malloc_assert>
    0.00 :   a5972:  nopw   0x0(%rax,%rax,1)
         : 216   ./malloc/malloc.c:3412
    0.00 :   a5978:  mov    %rbp,%rdi
    0.00 :   a597b:  call   a53e0 <__libc_free>
    0.00 :   a5980:  xor    %r8d,%r8d
         : 220   ./malloc/malloc.c:3515
    0.00 :   a5983:  add    $0x28,%rsp
    0.00 :   a5987:  mov    %r8,%rax
    0.00 :   a598a:  pop    %rbx
    0.00 :   a598b:  pop    %rbp
    0.00 :   a598c:  pop    %r12
    0.00 :   a598e:  pop    %r13
    7.08 :   a5990:  pop    %r14
   14.60 :   a5992:  pop    %r15
    0.00 :   a5994:  ret
    0.00 :   a5995:  nopl   (%rax)
         : 231   mremap_chunk():
         : 232   ./malloc/malloc.c:3077
    0.00 :   a5998:  mov    -0x10(%rbp),%r9
         : 234   ./malloc/malloc.c:3083
    0.00 :   a599c:  mov    %r13,%rdi
         : 236   ./malloc/malloc.c:3078
    0.00 :   a599f:  and    $0xfffffffffffffff8,%rax
         : 238   ./malloc/malloc.c:3087
    0.00 :   a59a3:  mov    %rbp,%rsi
         : 240   ./malloc/malloc.c:3076
    0.00 :   a59a6:  mov    0x17451b(%rip),%rdx        # 219ec8 <_rtld_global_ro@GLIBC_PRIVATE>
         : 242   ./malloc/malloc.c:3083
    0.00 :   a59ad:  sub    %r9,%rdi
         : 244   ./malloc/malloc.c:3085
    0.00 :   a59b0:  lea    (%rax,%r9,1),%rbx
         : 246   ./malloc/malloc.c:3076
    0.00 :   a59b4:  mov    0x18(%rdx),%rdx
         : 248   ./malloc/malloc.c:3086
    0.00 :   a59b8:  mov    %rdi,%rax
    0.00 :   a59bb:  or     %rbx,%rax
    0.00 :   a59be:  lea    -0x1(%rdx),%r10
         : 252   ./malloc/malloc.c:3087
    0.00 :   a59c2:  and    %r10,%rsi
         : 254   ./malloc/malloc.c:3086
    0.00 :   a59c5:  and    %r10,%rax
         : 256   ./malloc/malloc.c:3087
    0.00 :   a59c8:  lea    -0x1(%rsi),%rcx
    0.00 :   a59cc:  and    %rsi,%rcx
    0.00 :   a59cf:  or     %rcx,%rax
    0.00 :   a59d2:  jne    a5b80 <__libc_realloc+0x440>
         : 261   ./malloc/malloc.c:3091
    0.00 :   a59d8:  mov    %rdx,%r11
    0.00 :   a59db:  lea    0x7(%rdx,%r9,1),%r8
    0.00 :   a59e0:  mov    %r10,0x10(%rsp)
    0.00 :   a59e5:  neg    %r11
    0.00 :   a59e8:  add    %r14,%r8
    0.00 :   a59eb:  mov    %r9,(%rsp)
    0.00 :   a59ef:  and    %r11,%r8
    0.00 :   a59f2:  mov    %r11,0x8(%rsp)
         : 270   ./malloc/malloc.c:3094
    0.00 :   a59f7:  cmp    %r8,%rbx
    0.00 :   a59fa:  je     a5a91 <__libc_realloc+0x351>
         : 273   ./malloc/malloc.c:3097
    0.00 :   a5a00:  mov    $0x1,%ecx
    0.00 :   a5a05:  mov    %r8,%rdx
    0.00 :   a5a08:  mov    %rbx,%rsi
    0.00 :   a5a0b:  xor    %eax,%eax
    0.00 :   a5a0d:  mov    %r8,0x18(%rsp)
    0.00 :   a5a12:  call   126940 <mremap>
    0.00 :   a5a17:  mov    %rax,%rcx
         : 281   ./malloc/malloc.c:3100
    0.00 :   a5a1a:  cmp    $0xffffffffffffffff,%rax
    0.00 :   a5a1e:  je     a5ac6 <__libc_realloc+0x386>
         : 284   madvise_thp():
         : 285   ./malloc/malloc.c:2028
    0.00 :   a5a24:  mov    0x17495d(%rip),%rax        # 21a388 <mp_+0x28>
    0.00 :   a5a2b:  mov    0x18(%rsp),%r8
    0.00 :   a5a30:  mov    (%rsp),%r9
    0.00 :   a5a34:  sub    $0x1,%rax
    0.00 :   a5a38:  cmp    %r8,%rax
    0.00 :   a5a3b:  jb     a5b10 <__libc_realloc+0x3d0>
         : 292   mremap_chunk():
         : 293   ./malloc/malloc.c:3105
    0.00 :   a5a41:  lea    (%rcx,%r9,1),%rax
         : 295   ./malloc/malloc.c:3107
    0.00 :   a5a45:  lea    0x10(%rax),%rbp
    0.00 :   a5a49:  test   $0xf,%al
    0.00 :   a5a4b:  jne    a5c3b <__libc_realloc+0x4fb>
         : 299   ./malloc/malloc.c:3109
    0.00 :   a5a51:  cmp    (%rax),%r9
    0.00 :   a5a54:  jne    a5c1c <__libc_realloc+0x4dc>
         : 302   ./malloc/malloc.c:3110
    0.00 :   a5a5a:  mov    %r8,%rdx
         : 304   ./malloc/malloc.c:3113
    0.00 :   a5a5d:  sub    %rbx,%r8
         : 306   ./malloc/malloc.c:3110
    0.00 :   a5a60:  sub    %r9,%rdx
    0.00 :   a5a63:  or     $0x2,%rdx
    0.00 :   a5a67:  mov    %rdx,0x8(%rax)
         : 310   ./malloc/malloc.c:3113
    0.00 :   a5a6b:  mov    %r8,%rax
    0.00 :   a5a6e:  lock xadd %rax,0x174939(%rip)        # 21a3b0 <mp_+0x50>
    0.00 :   a5a77:  add    %rax,%r8
         : 314   ./malloc/malloc.c:3115
    0.00 :   a5a7a:  mov    0x174937(%rip),%rax        # 21a3b8 <mp_+0x58>
    0.00 :   a5a81:  cmp    %rax,%r8
    0.00 :   a5a84:  jbe    a5a91 <__libc_realloc+0x351>
    0.00 :   a5a86:  lock cmpxchg %r8,0x174929(%rip)        # 21a3b8 <mp_+0x58>
    0.00 :   a5a8f:  jne    a5a7a <__libc_realloc+0x33a>
         : 320   __GI___libc_realloc():
         : 321   ./malloc/malloc.c:3466
    0.00 :   a5a91:  mov    %rbp,%r8
    0.00 :   a5a94:  jmp    a5983 <__libc_realloc+0x243>
    0.00 :   a5a99:  nopl   0x0(%rax)
         : 325   ./malloc/malloc.c:3444
    0.00 :   a5aa0:  lea    0x133dcc(%rip),%rdi        # 1d9873 <null+0xff8>
    0.00 :   a5aa7:  call   a0ce0 <malloc_printerr>
    0.00 :   a5aac:  nopl   0x0(%rax)
         : 329   ./malloc/malloc.c:3448
    0.00 :   a5ab0:  mov    0x174359(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
         : 331   ./malloc/malloc.c:3449
    0.00 :   a5ab7:  xor    %r8d,%r8d
         : 333   ./malloc/malloc.c:3448
    0.00 :   a5aba:  movl   $0xc,%fs:(%rax)
         : 335   ./malloc/malloc.c:3449
    0.00 :   a5ac1:  jmp    a5983 <__libc_realloc+0x243>
         : 337   ./malloc/malloc.c:3470
    0.00 :   a5ac6:  lea    -0x8(%r15),%rax
    0.00 :   a5aca:  mov    %rbp,%r8
    0.00 :   a5acd:  cmp    %rax,%r14
    0.00 :   a5ad0:  jbe    a5983 <__libc_realloc+0x243>
         : 342   ./malloc/malloc.c:3474
    0.00 :   a5ad6:  mov    %r12,%rdi
    0.00 :   a5ad9:  call   a50a0 <__libc_malloc>
    0.00 :   a5ade:  mov    %rax,%r8
         : 346   ./malloc/malloc.c:3475
    0.00 :   a5ae1:  test   %rax,%rax
    0.00 :   a5ae4:  je     a5983 <__libc_realloc+0x243>
         : 349   ./malloc/malloc.c:3478
    0.00 :   a5aea:  lea    -0x10(%r15),%rdx
    0.00 :   a5aee:  mov    %rbp,%rsi
    0.00 :   a5af1:  mov    %rax,%rdi
    0.00 :   a5af4:  mov    %rax,(%rsp)
    0.00 :   a5af8:  call   28620 <*ABS*+0xa9c10@plt>
         : 355   ./malloc/malloc.c:3479
    0.00 :   a5afd:  mov    %r13,%rdi
    0.00 :   a5b00:  call   a0f60 <munmap_chunk>
         : 358   ./malloc/malloc.c:3480
    0.00 :   a5b05:  mov    (%rsp),%r8
    0.00 :   a5b09:  jmp    a5983 <__libc_realloc+0x243>
    0.00 :   a5b0e:  xchg   %ax,%ax
         : 362   madvise_thp():
         : 363   ./malloc/malloc.c:2033
    0.00 :   a5b10:  mov    0x10(%rsp),%r10
    0.00 :   a5b15:  mov    0x8(%rsp),%r11
    0.00 :   a5b1a:  mov    %r8,%rsi
    0.00 :   a5b1d:  mov    %rcx,%rdi
    0.00 :   a5b20:  and    %rcx,%r10
    0.00 :   a5b23:  jne    a5c0d <__libc_realloc+0x4cd>
         : 370   ./malloc/malloc.c:2040
    0.00 :   a5b29:  mov    $0xe,%edx
    0.00 :   a5b2e:  mov    %rcx,0x10(%rsp)
    0.00 :   a5b33:  mov    %r8,0x8(%rsp)
    0.00 :   a5b38:  mov    %r9,(%rsp)
    0.00 :   a5b3c:  call   11eb70 <__madvise>
    0.00 :   a5b41:  mov    0x10(%rsp),%rcx
    0.00 :   a5b46:  mov    0x8(%rsp),%r8
    0.00 :   a5b4b:  mov    (%rsp),%r9
    0.00 :   a5b4f:  jmp    a5a41 <__libc_realloc+0x301>
    0.00 :   a5b54:  nopl   0x0(%rax)
         : 381   tcache_init():
         : 382   ./malloc/malloc.c:3241
    0.00 :   a5b58:  mov    0x174251(%rip),%rdx        # 219db0 <_DYNAMIC+0x1f0>
    0.00 :   a5b5f:  cmpb   $0x0,%fs:(%rdx)
    0.00 :   a5b63:  jne    a57bc <__libc_realloc+0x7c>
    0.00 :   a5b69:  call   a4990 <tcache_init.part.0>
         : 387   arena_for_chunk():
         : 388   ./malloc/arena.c:162
    0.00 :   a5b6e:  mov    -0x8(%rbp),%rax
    0.00 :   a5b72:  jmp    a57bc <__libc_realloc+0x7c>
    0.00 :   a5b77:  nopw   0x0(%rax,%rax,1)
         : 392   mremap_chunk():
         : 393   ./malloc/malloc.c:3088
    0.00 :   a5b80:  lea    0x1393d9(%rip),%rdi        # 1def60 <__PRETTY_FUNCTION__.1+0xe20>
    0.00 :   a5b87:  call   a0ce0 <malloc_printerr>
    0.00 :   a5b8c:  nopl   0x0(%rax)
         : 397   __GI___libc_realloc():
         : 398   ./malloc/malloc.c:3503
    0.00 :   a5b90:  nop
         : 400   ./malloc/malloc.c:3504
    0.00 :   a5b91:  mov    %r12,%rdi
    0.00 :   a5b94:  call   a50a0 <__libc_malloc>
    0.00 :   a5b99:  mov    %rax,%r8
         : 404   ./malloc/malloc.c:3505
    0.00 :   a5b9c:  test   %rax,%rax
    0.00 :   a5b9f:  je     a5983 <__libc_realloc+0x243>
         : 407   ./malloc/malloc.c:3507
    0.00 :   a5ba5:  mov    -0x8(%rbp),%rdx
         : 409   ./malloc/malloc.c:3508
    0.00 :   a5ba9:  mov    %r8,%rdi
    0.00 :   a5bac:  mov    %rbp,%rsi
    0.00 :   a5baf:  mov    %r8,(%rsp)
         : 413   ./malloc/malloc.c:3507
    0.00 :   a5bb3:  mov    %rdx,%rax
    0.00 :   a5bb6:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a5bba:  shr    %rax
    0.00 :   a5bbd:  xor    $0x1,%rax
    0.00 :   a5bc1:  and    $0x1,%eax
    0.00 :   a5bc4:  lea    -0x10(%rdx,%rax,8),%rdx
         : 420   ./malloc/malloc.c:3508
    0.00 :   a5bc9:  call   28620 <*ABS*+0xa9c10@plt>
         : 422   ./malloc/malloc.c:3510
    0.00 :   a5bce:  xor    %edx,%edx
    0.00 :   a5bd0:  mov    %r13,%rsi
    0.00 :   a5bd3:  mov    %rbx,%rdi
    0.00 :   a5bd6:  call   a26a0 <_int_free>
    0.00 :   a5bdb:  mov    (%rsp),%r8
    0.00 :   a5bdf:  jmp    a5983 <__libc_realloc+0x243>
    0.00 :   a5be4:  nopl   0x0(%rax)
         : 430   ./malloc/malloc.c:3492 (discriminator 3)
    0.00 :   a5be8:  mov    %rbx,%rdi
    0.00 :   a5beb:  call   91230 <__lll_lock_wait_private>
    0.00 :   a5bf0:  jmp    a5851 <__libc_realloc+0x111>
    0.00 :   a5bf5:  nopl   (%rax)
         : 435   ./malloc/malloc.c:3496 (discriminator 15)
    0.00 :   a5bf8:  mov    %rbx,%rdi
    0.00 :   a5bfb:  mov    %r8,(%rsp)
    0.00 :   a5bff:  call   91300 <__lll_lock_wake_private>
    0.00 :   a5c04:  mov    (%rsp),%r8
    0.00 :   a5c08:  jmp    a5872 <__libc_realloc+0x132>
         : 441   madvise_thp():
         : 442   ./malloc/malloc.c:2035
    0.00 :   a5c0d:  mov    %r11,%rdi
         : 444   ./malloc/malloc.c:2036
    0.00 :   a5c10:  lea    (%r8,%r10,1),%rsi
         : 446   ./malloc/malloc.c:2035
    0.00 :   a5c14:  and    %rcx,%rdi
         : 448   ./malloc/malloc.c:2037
    0.00 :   a5c17:  jmp    a5b29 <__libc_realloc+0x3e9>
         : 450   mremap_chunk():
         : 451   ./malloc/malloc.c:3109
    0.00 :   a5c1c:  lea    0x139575(%rip),%rcx        # 1df198 <__PRETTY_FUNCTION__.15>
    0.00 :   a5c23:  mov    $0xc25,%edx
    0.00 :   a5c28:  lea    0x133a5d(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a5c2f:  lea    0x133c73(%rip),%rdi        # 1d98a9 <null+0x102e>
    0.00 :   a5c36:  call   a0e70 <__malloc_assert>
         : 457   ./malloc/malloc.c:3107
    0.00 :   a5c3b:  lea    0x139556(%rip),%rcx        # 1df198 <__PRETTY_FUNCTION__.15>
    0.00 :   a5c42:  mov    $0xc23,%edx
    0.00 :   a5c47:  lea    0x133a3e(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a5c4e:  lea    0x133c39(%rip),%rdi        # 1d988e <null+0x1013>
    0.00 :   a5c55:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of minisat for cycles:u (11 samples, percent: local period)
-----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004310 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)>:
         : 6    int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 83   if (*in == '\n') { ++in; return; }
         : 84   ++in; } }
         :
         :
         : 87   template<class B>
         : 88   static int parseInt(B& in) {
    0.00 :   4310:   push   %r13
    0.00 :   4312:   push   %r12
    0.00 :   4314:   push   %rbp
         : 92   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4315:   lea    0x8(%rdi),%rbp
         : 48   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 83   static int parseInt(B& in) {
    0.00 :   4319:   push   %rbx
    0.00 :   431a:   mov    %rdi,%rbx
    0.00 :   431d:   sub    $0x8,%rsp
         : 87   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4321:   mov    0x10000c(%rdi),%edx
    0.00 :   4327:   nopw   0x0(%rax,%rax,1)
    0.00 :   4330:   movslq 0x100008(%rbx),%rax
    0.00 :   4337:   mov    %eax,%esi
    0.00 :   4339:   mov    %eax,%edi
    0.00 :   433b:   cmp    %eax,%edx
    0.00 :   433d:   jle    4480 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x170>
    0.00 :   4343:   movzbl 0x8(%rbx,%rax,1),%ecx
   36.98 :   4348:   mov    %ecx,%r8d
         : 61   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 70   while ((*in >= 9 && *in <= 13) || *in == 32)
    0.00 :   434b:   sub    $0x9,%ecx
         : 72   skipWhitespace<Minisat::StreamBuffer>():
    0.00 :   434e:   cmp    $0x4,%ecx
    0.00 :   4351:   jbe    4359 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x49>
    0.00 :   4353:   cmp    $0x20,%r8b
    0.00 :   4357:   jne    4390 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x80>
         : 74   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4359:   add    $0x1,%esi
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   435c:   add    $0x1,%rax
         : 46   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4360:   mov    %esi,0x100008(%rbx)
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   4366:   cmp    %eax,%edx
    0.00 :   4368:   jg     4337 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x27>
         : 45   pos  = 0;
    0.00 :   436a:   movl   $0x0,0x100008(%rbx)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4374:   mov    (%rbx),%rdi
    0.00 :   4377:   mov    $0x100000,%edx
    0.00 :   437c:   mov    %rbp,%rsi
    0.00 :   437f:   call   25e0 <gzread@plt>
    0.00 :   4384:   mov    %eax,0x10000c(%rbx)
    0.00 :   438a:   mov    %eax,%edx
    0.00 :   438c:   jmp    4330 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x20>
    0.00 :   438e:   xchg   %ax,%ax
         : 55   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 87   int     val = 0;
         : 88   bool    neg = false;
         : 89   skipWhitespace(in);
         : 90   if      (*in == '-') neg = true, ++in;
    0.00 :   4390:   cmp    $0x2d,%r8b
    0.00 :   4394:   je     44b0 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x1a0>
         : 85   bool    neg = false;
    0.00 :   439a:   xor    %ebp,%ebp
         : 88   else if (*in == '+') ++in;
    8.74 :   439c:   cmp    $0x2b,%r8b
    0.00 :   43a0:   je     443d <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x12d>
         : 91   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   43a6:   movslq %edi,%rax
    0.00 :   43a9:   movzbl 0x8(%rbx,%rax,1),%ecx
         : 54   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 89   if (*in < '0' || *in > '9') fprintf(stderr, "PARSE ERROR! Unexpected char: %c\n", *in), exit(3);
    9.02 :   43ae:   lea    -0x30(%rcx),%eax
    0.00 :   43b1:   cmp    $0x9,%eax
    8.83 :   43b4:   ja     4485 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x175>
    0.00 :   43ba:   xor    %r12d,%r12d
         : 94   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   43bd:   lea    0x8(%rbx),%r13
    0.00 :   43c1:   jmp    43e2 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0xd2>
    0.00 :   43c3:   nopl   0x0(%rax,%rax,1)
         : 50   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   43c8:   mov    0x10000c(%rbx),%edx
    0.00 :   43ce:   cmp    %edx,%edi
    0.00 :   43d0:   jge    4423 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x113>
    0.00 :   43d2:   movslq %edi,%rax
    0.00 :   43d5:   movzbl 0x8(%rbx,%rax,1),%ecx
         : 57   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 90   while (*in >= '0' && *in <= '9')
    0.00 :   43da:   lea    -0x30(%rcx),%eax
    0.00 :   43dd:   cmp    $0x9,%eax
    0.00 :   43e0:   ja     4423 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x113>
         : 91   val = val*10 + (*in - '0'),
    0.00 :   43e2:   lea    (%r12,%r12,4),%ecx
         : 93   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   43e6:   add    $0x1,%edi
    0.00 :   43e9:   mov    %edi,0x100008(%rbx)
         : 55   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 91   val = val*10 + (*in - '0'),
    0.00 :   43ef:   lea    (%rax,%rcx,2),%r12d
         : 93   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   43f3:   cmp    %edx,%edi
    0.00 :   43f5:   jl     43c8 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0xb8>
         : 45   pos  = 0;
    0.00 :   43f7:   movl   $0x0,0x100008(%rbx)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4401:   mov    (%rbx),%rdi
    0.00 :   4404:   mov    $0x100000,%edx
    0.00 :   4409:   mov    %r13,%rsi
    0.00 :   440c:   call   25e0 <gzread@plt>
         : 51   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4411:   mov    0x100008(%rbx),%edi
         : 53   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4417:   mov    %eax,%edx
    0.00 :   4419:   mov    %eax,0x10000c(%rbx)
         : 49   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   441f:   cmp    %edx,%edi
    0.00 :   4421:   jl     43d2 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0xc2>
         : 54   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 93   ++in;
         : 94   return neg ? -val : val; }
    0.00 :   4423:   mov    %r12d,%eax
    9.48 :   4426:   neg    %eax
    0.00 :   4428:   test   %bpl,%bpl
    0.00 :   442b:   cmovne %eax,%r12d
    0.00 :   442f:   add    $0x8,%rsp
    0.00 :   4433:   pop    %rbx
    0.00 :   4434:   pop    %rbp
    0.00 :   4435:   mov    %r12d,%eax
    0.00 :   4438:   pop    %r12
    0.00 :   443a:   pop    %r13
    0.00 :   443c:   ret
         : 106  Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   443d:   add    $0x1,%edi
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   4440:   cmp    %edx,%edi
    0.00 :   4442:   jge    444f <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x13f>
         : 47   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4444:   mov    %edi,0x100008(%rbx)
    0.00 :   444a:   jmp    43a6 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x96>
         : 55   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   444f:   mov    (%rbx),%rdi
    0.00 :   4452:   mov    $0x100000,%edx
    0.00 :   4457:   lea    0x8(%rbx),%rsi
         : 45   pos  = 0;
    0.00 :   445b:   movl   $0x0,0x100008(%rbx)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4465:   call   25e0 <gzread@plt>
    0.00 :   446a:   mov    %eax,%edx
         : 49   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   446c:   mov    0x100008(%rbx),%edi
         : 53   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4472:   mov    %edx,0x10000c(%rbx)
         : 48   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4478:   cmp    %edx,%edi
    0.00 :   447a:   jl     43a6 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x96>
    0.00 :   4480:   mov    $0xffffffff,%ecx
         : 55   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         :
         : 106  # ifdef __va_arg_pack
         : 107  __fortify_function int
         : 108  fprintf (FILE *__restrict __stream, const char *__restrict __fmt, ...)
         : 109  {
         : 110  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   4485:   mov    0x14bb4(%rip),%rdi        # 19040 <stderr@GLIBC_2.2.5>
         : 112  fprintf():
    0.00 :   448c:   lea    0xec55(%rip),%rdx        # 130e8 <_IO_stdin_used+0xe8>
    0.00 :   4493:   mov    $0x1,%esi
    0.00 :   4498:   xor    %eax,%eax
    0.00 :   449a:   call   2550 <__fprintf_chk@plt>
         : 109  int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 89   if (*in < '0' || *in > '9') fprintf(stderr, "PARSE ERROR! Unexpected char: %c\n", *in), exit(3);
    0.00 :   449f:   mov    $0x3,%edi
    0.00 :   44a4:   call   2450 <exit@plt>
    0.00 :   44a9:   nopl   0x0(%rax)
         : 93   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   44b0:   lea    0x1(%rsi),%edi
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
   18.09 :   44b3:   cmp    %edx,%edi
    8.87 :   44b5:   jge    44c7 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x1b7>
         : 47   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   44b7:   mov    %edi,0x100008(%rbx)
         : 54   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 87   if      (*in == '-') neg = true, ++in;
    0.00 :   44bd:   mov    $0x1,%ebp
    0.00 :   44c2:   jmp    43a6 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x96>
         : 90   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   44c7:   mov    (%rbx),%rdi
    0.00 :   44ca:   mov    $0x100000,%edx
    0.00 :   44cf:   lea    0x8(%rbx),%rsi
         : 45   pos  = 0;
    0.00 :   44d3:   movl   $0x0,0x100008(%rbx)
         : 47   int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&):
         : 87   if      (*in == '-') neg = true, ++in;
    0.00 :   44dd:   mov    $0x1,%ebp
         : 89   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   44e2:   call   25e0 <gzread@plt>
    0.00 :   44e7:   mov    %eax,%edx
    0.00 :   44e9:   jmp    446c <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)+0x15c>
 Percent |	Source code & Disassembly of minisat for cycles:u (8 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000005330 <Minisat::vec<Minisat::Lit>::capacity(int)>:
         : 6    Minisat::vec<Minisat::Lit>::capacity(int):
         : 96   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
         : 97   };
         :
         :
         : 100  template<class T>
         : 101  void vec<T>::capacity(int min_cap) {
   49.85 :   5330:   endbr64
         : 97   if (cap >= min_cap) return;
    0.00 :   5334:   mov    0xc(%rdi),%eax
   24.98 :   5337:   cmp    %esi,%eax
    0.00 :   5339:   jge    5390 <Minisat::vec<Minisat::Lit>::capacity(int)+0x60>
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   533b:   mov    %eax,%ecx
    0.00 :   533d:   sub    %eax,%esi
         : 96   void vec<T>::capacity(int min_cap) {
    0.00 :   533f:   push   %rbx
   12.59 :   5340:   mov    %rdi,%rbx
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   5343:   sar    %ecx
    0.00 :   5345:   add    $0x1,%esi
    0.00 :   5348:   add    $0x2,%ecx
    0.00 :   534b:   and    $0xfffffffe,%esi
    0.00 :   534e:   and    $0xfffffffe,%ecx
         : 104  Minisat::vec<Minisat::Lit>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   5351:   mov    %ecx,%edi
    0.00 :   5353:   sub    %esi,%edi
    0.00 :   5355:   sar    $0x1f,%edi
    0.00 :   5358:   mov    %edi,%edx
    0.00 :   535a:   and    %edi,%esi
    0.00 :   535c:   not    %edx
    0.00 :   535e:   and    %ecx,%edx
         : 56   Minisat::vec<Minisat::Lit>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   5360:   mov    $0x7fffffff,%ecx
         : 101  Minisat::vec<Minisat::Lit>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   5365:   add    %esi,%edx
         : 50   Minisat::vec<Minisat::Lit>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   5367:   sub    %eax,%ecx
    0.00 :   5369:   cmp    %edx,%ecx
   12.58 :   536b:   jl     539b <Minisat::vec<Minisat::Lit>::capacity(int)+0x6b>
    0.00 :   536d:   add    %edx,%eax
    0.00 :   536f:   mov    (%rbx),%rdi
    0.00 :   5372:   mov    %eax,0xc(%rbx)
    0.00 :   5375:   cltq
    0.00 :   5377:   lea    0x0(,%rax,4),%rsi
    0.00 :   537f:   call   2540 <realloc@plt>
    0.00 :   5384:   mov    %rax,(%rbx)
    0.00 :   5387:   test   %rax,%rax
    0.00 :   538a:   je     5391 <Minisat::vec<Minisat::Lit>::capacity(int)+0x61>
         : 101  throw OutOfMemoryException();
         : 102  }
    0.00 :   538c:   pop    %rbx
    0.00 :   538d:   ret
    0.00 :   538e:   xchg   %ax,%ax
    0.00 :   5390:   ret
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   5391:   call   2330 <__errno_location@plt>
    0.00 :   5396:   cmpl   $0xc,(%rax)
    0.00 :   5399:   jne    538c <Minisat::vec<Minisat::Lit>::capacity(int)+0x5c>
         : 100  throw OutOfMemoryException();
    0.00 :   539b:   mov    $0x1,%edi
    0.00 :   53a0:   call   2360 <__cxa_allocate_exception@plt>
    0.00 :   53a5:   xor    %edx,%edx
    0.00 :   53a7:   lea    0x1379a(%rip),%rsi        # 18b48 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    0.00 :   53ae:   mov    %rax,%rdi
    0.00 :   53b1:   call   2570 <__cxa_throw@plt>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (10 samples, percent: local period)
------------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000027220 <strcmp>:
         : 6     strcmp():
         : 7     ./string/../sysdeps/x86_64/strcmp.S:108
    0.00 :   27220:  endbr64
         : 9     ./string/../sysdeps/x86_64/strcmp.S:141
    0.00 :   27224:  mov    %esi,%ecx
         : 11    ./string/../sysdeps/x86_64/strcmp.S:142
    0.00 :   27226:  mov    %edi,%eax
         : 13    ./string/../sysdeps/x86_64/strcmp.S:144
    0.00 :   27228:  and    $0x3f,%rcx
         : 15    ./string/../sysdeps/x86_64/strcmp.S:145
    0.00 :   2722c:  and    $0x3f,%rax
         : 17    ./string/../sysdeps/x86_64/strcmp.S:166
    0.00 :   27230:  cmp    $0x30,%ecx
         : 19    ./string/../sysdeps/x86_64/strcmp.S:167
    0.00 :   27233:  ja     27280 <strcmp+0x60>
         : 21    ./string/../sysdeps/x86_64/strcmp.S:168
    0.00 :   27235:  cmp    $0x30,%eax
         : 23    ./string/../sysdeps/x86_64/strcmp.S:169
    5.74 :   27238:  ja     27280 <strcmp+0x60>
         : 25    ./string/../sysdeps/x86_64/strcmp.S:170
    0.00 :   2723a:  movlpd (%rdi),%xmm1
         : 27    ./string/../sysdeps/x86_64/strcmp.S:171
   18.99 :   2723e:  movlpd (%rsi),%xmm2
         : 29    ./string/../sysdeps/x86_64/strcmp.S:172
    0.00 :   27242:  movhpd 0x8(%rdi),%xmm1
         : 31    ./string/../sysdeps/x86_64/strcmp.S:173
    0.00 :   27247:  movhpd 0x8(%rsi),%xmm2
         : 33    ./string/../sysdeps/x86_64/strcmp.S:194
    0.00 :   2724c:  pxor   %xmm0,%xmm0
         : 35    ./string/../sysdeps/x86_64/strcmp.S:195
    0.00 :   27250:  pcmpeqb %xmm1,%xmm0
         : 37    ./string/../sysdeps/x86_64/strcmp.S:196
    0.00 :   27254:  pcmpeqb %xmm2,%xmm1
         : 39    ./string/../sysdeps/x86_64/strcmp.S:197
    0.00 :   27258:  psubb  %xmm0,%xmm1
         : 41    ./string/../sysdeps/x86_64/strcmp.S:198
    0.00 :   2725c:  pmovmskb %xmm1,%edx
         : 43    ./string/../sysdeps/x86_64/strcmp.S:199
    0.00 :   27260:  sub    $0xffff,%edx
         : 45    ./string/../sysdeps/x86_64/strcmp.S:200
   11.90 :   27266:  jne    28640 <strcmp+0x1420>
         : 47    ./string/../sysdeps/x86_64/strcmp.S:205
    0.00 :   2726c:  add    $0x10,%rsi
         : 49    ./string/../sysdeps/x86_64/strcmp.S:206
    0.00 :   27270:  add    $0x10,%rdi
    0.00 :   27274:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2727f:  nop
         : 53    ./string/../sysdeps/x86_64/strcmp.S:215
    0.00 :   27280:  and    $0xfffffffffffffff0,%rsi
         : 55    ./string/../sysdeps/x86_64/strcmp.S:216
    0.00 :   27284:  and    $0xfffffffffffffff0,%rdi
         : 57    ./string/../sysdeps/x86_64/strcmp.S:217
    0.00 :   27288:  mov    $0xffff,%edx
         : 59    ./string/../sysdeps/x86_64/strcmp.S:218
    0.00 :   2728d:  xor    %r8d,%r8d
         : 61    ./string/../sysdeps/x86_64/strcmp.S:219
    0.00 :   27290:  and    $0xf,%ecx
         : 63    ./string/../sysdeps/x86_64/strcmp.S:220
    0.00 :   27293:  and    $0xf,%eax
         : 65    ./string/../sysdeps/x86_64/strcmp.S:221
    0.00 :   27296:  cmp    %eax,%ecx
         : 67    ./string/../sysdeps/x86_64/strcmp.S:222
    0.00 :   27298:  je     272c0 <strcmp+0xa0>
         : 69    ./string/../sysdeps/x86_64/strcmp.S:223
    0.00 :   2729a:  ja     272a3 <strcmp+0x83>
         : 71    ./string/../sysdeps/x86_64/strcmp.S:224
    0.00 :   2729c:  mov    %edx,%r8d
         : 73    ./string/../sysdeps/x86_64/strcmp.S:225
    0.00 :   2729f:  xchg   %eax,%ecx
         : 75    ./string/../sysdeps/x86_64/strcmp.S:226
    0.00 :   272a0:  xchg   %rsi,%rdi
         : 77    ./string/../sysdeps/x86_64/strcmp.S:228
    0.00 :   272a3:  lea    0xf(%rax),%r9
         : 79    ./string/../sysdeps/x86_64/strcmp.S:229
    0.00 :   272a7:  sub    %rcx,%r9
         : 81    ./string/../sysdeps/x86_64/strcmp.S:230
    0.00 :   272aa:  lea    0x6167(%rip),%r10        # 2d418 <unsecure_envvars.6+0x118>
         : 83    ./string/../sysdeps/x86_64/strcmp.S:231
    0.00 :   272b1:  movslq (%r10,%r9,4),%r9
         : 85    ./string/../sysdeps/x86_64/strcmp.S:232
    0.00 :   272b5:  lea    (%r10,%r9,1),%r10
         : 87    ./string/../sysdeps/x86_64/strcmp.S:233
    0.00 :   272b9:  notrack jmp *%r10
    0.00 :   272bd:  nopl   (%rax)
         : 90    ./string/../sysdeps/x86_64/strcmp.S:243
    0.00 :   272c0:  movdqa (%rsi),%xmm1
         : 92    ./string/../sysdeps/x86_64/strcmp.S:244
    0.00 :   272c4:  pxor   %xmm0,%xmm0
         : 94    ./string/../sysdeps/x86_64/strcmp.S:245
    0.00 :   272c8:  pcmpeqb %xmm1,%xmm0
         : 96    ./string/../sysdeps/x86_64/strcmp.S:247
    0.00 :   272cc:  pcmpeqb (%rdi),%xmm1
         : 98    ./string/../sysdeps/x86_64/strcmp.S:253
    0.00 :   272d0:  psubb  %xmm0,%xmm1
         : 100   ./string/../sysdeps/x86_64/strcmp.S:254
    0.00 :   272d4:  pmovmskb %xmm1,%r9d
         : 102   ./string/../sysdeps/x86_64/strcmp.S:255
    0.00 :   272d9:  shr    %cl,%edx
         : 104   ./string/../sysdeps/x86_64/strcmp.S:256
    0.00 :   272db:  shr    %cl,%r9d
         : 106   ./string/../sysdeps/x86_64/strcmp.S:257
    0.00 :   272de:  sub    %r9d,%edx
         : 108   ./string/../sysdeps/x86_64/strcmp.S:262
    0.00 :   272e1:  jne    28625 <strcmp+0x1405>
         : 110   ./string/../sysdeps/x86_64/strcmp.S:264
    0.00 :   272e7:  mov    $0x10,%rcx
         : 112   ./string/../sysdeps/x86_64/strcmp.S:265
    0.00 :   272ee:  mov    $0x10,%r9
         : 114   ./string/../sysdeps/x86_64/strcmp.S:266
    0.00 :   272f5:  pxor   %xmm0,%xmm0
    0.00 :   272f9:  nopl   0x0(%rax)
         : 117   ./string/../sysdeps/x86_64/strcmp.S:274
    0.00 :   27300:  movdqa (%rsi,%rcx,1),%xmm1
         : 119   ./string/../sysdeps/x86_64/strcmp.S:275
   13.87 :   27305:  movdqa (%rdi,%rcx,1),%xmm2
         : 121   ./string/../sysdeps/x86_64/strcmp.S:278
    0.00 :   2730a:  pcmpeqb %xmm1,%xmm0
         : 123   ./string/../sysdeps/x86_64/strcmp.S:279
    0.00 :   2730e:  pcmpeqb %xmm2,%xmm1
         : 125   ./string/../sysdeps/x86_64/strcmp.S:280
    0.00 :   27312:  psubb  %xmm0,%xmm1
         : 127   ./string/../sysdeps/x86_64/strcmp.S:281
    0.00 :   27316:  pmovmskb %xmm1,%edx
         : 129   ./string/../sysdeps/x86_64/strcmp.S:282
    0.00 :   2731a:  sub    $0xffff,%edx
         : 131   ./string/../sysdeps/x86_64/strcmp.S:283
    0.00 :   27320:  jne    28620 <strcmp+0x1400>
         : 133   ./string/../sysdeps/x86_64/strcmp.S:289
    0.00 :   27326:  add    $0x10,%rcx
         : 135   ./string/../sysdeps/x86_64/strcmp.S:290
    0.00 :   2732a:  movdqa (%rsi,%rcx,1),%xmm1
         : 137   ./string/../sysdeps/x86_64/strcmp.S:291
    0.00 :   2732f:  movdqa (%rdi,%rcx,1),%xmm2
         : 139   ./string/../sysdeps/x86_64/strcmp.S:294
    0.00 :   27334:  pcmpeqb %xmm1,%xmm0
         : 141   ./string/../sysdeps/x86_64/strcmp.S:295
    0.00 :   27338:  pcmpeqb %xmm2,%xmm1
         : 143   ./string/../sysdeps/x86_64/strcmp.S:296
    0.00 :   2733c:  psubb  %xmm0,%xmm1
         : 145   ./string/../sysdeps/x86_64/strcmp.S:297
    0.00 :   27340:  pmovmskb %xmm1,%edx
         : 147   ./string/../sysdeps/x86_64/strcmp.S:298
    0.00 :   27344:  sub    $0xffff,%edx
         : 149   ./string/../sysdeps/x86_64/strcmp.S:299
    0.00 :   2734a:  jne    28620 <strcmp+0x1400>
         : 151   ./string/../sysdeps/x86_64/strcmp.S:304
    0.00 :   27350:  add    $0x10,%rcx
         : 153   ./string/../sysdeps/x86_64/strcmp.S:305
    0.00 :   27354:  jmp    27300 <strcmp+0xe0>
    0.00 :   27356:  cs nopw 0x0(%rax,%rax,1)
         : 156   ./string/../sysdeps/x86_64/strcmp.S:314
    0.00 :   27360:  pxor   %xmm0,%xmm0
         : 158   ./string/../sysdeps/x86_64/strcmp.S:315
    0.00 :   27364:  movdqa (%rdi),%xmm2
         : 160   ./string/../sysdeps/x86_64/strcmp.S:316
    0.00 :   27368:  movdqa (%rsi),%xmm1
         : 162   ./string/../sysdeps/x86_64/strcmp.S:317
    0.00 :   2736c:  pcmpeqb %xmm1,%xmm0
         : 164   ./string/../sysdeps/x86_64/strcmp.S:318
    0.00 :   27370:  pslldq $0xf,%xmm2
         : 166   ./string/../sysdeps/x86_64/strcmp.S:320
    0.00 :   27375:  pcmpeqb %xmm1,%xmm2
         : 168   ./string/../sysdeps/x86_64/strcmp.S:321
    0.00 :   27379:  psubb  %xmm0,%xmm2
         : 170   ./string/../sysdeps/x86_64/strcmp.S:322
    0.00 :   2737d:  pmovmskb %xmm2,%r9d
         : 172   ./string/../sysdeps/x86_64/strcmp.S:323
    0.00 :   27382:  shr    %cl,%edx
         : 174   ./string/../sysdeps/x86_64/strcmp.S:324
    0.00 :   27384:  shr    %cl,%r9d
         : 176   ./string/../sysdeps/x86_64/strcmp.S:325
    0.00 :   27387:  sub    %r9d,%edx
         : 178   ./string/../sysdeps/x86_64/strcmp.S:326
    0.00 :   2738a:  jne    28625 <strcmp+0x1405>
         : 180   ./string/../sysdeps/x86_64/strcmp.S:327
    0.00 :   27390:  movdqa (%rdi),%xmm3
         : 182   ./string/../sysdeps/x86_64/strcmp.S:330
    0.00 :   27394:  pxor   %xmm0,%xmm0
         : 184   ./string/../sysdeps/x86_64/strcmp.S:331
    0.00 :   27398:  mov    $0x10,%rcx
         : 186   ./string/../sysdeps/x86_64/strcmp.S:332
    0.00 :   2739f:  mov    $0x1,%r9d
         : 188   ./string/../sysdeps/x86_64/strcmp.S:338
    0.00 :   273a5:  lea    0x1(%rdi),%r10
         : 190   ./string/../sysdeps/x86_64/strcmp.S:339
    0.00 :   273a9:  and    $0xfff,%r10
         : 192   ./string/../sysdeps/x86_64/strcmp.S:340
    0.00 :   273b0:  sub    $0x1000,%r10
    0.00 :   273b7:  nopw   0x0(%rax,%rax,1)
         : 195   ./string/../sysdeps/x86_64/strcmp.S:344
    0.00 :   273c0:  add    $0x10,%r10
         : 197   ./string/../sysdeps/x86_64/strcmp.S:345
    0.00 :   273c4:  jg     27460 <strcmp+0x240>
         : 199   ./string/../sysdeps/x86_64/strcmp.S:348
    0.00 :   273ca:  movdqa (%rsi,%rcx,1),%xmm1
         : 201   ./string/../sysdeps/x86_64/strcmp.S:349
    0.00 :   273cf:  movdqa (%rdi,%rcx,1),%xmm2
         : 203   ./string/../sysdeps/x86_64/strcmp.S:350
    0.00 :   273d4:  movdqa %xmm2,%xmm4
         : 205   ./string/../sysdeps/x86_64/strcmp.S:353
    0.00 :   273d8:  psrldq $0x1,%xmm3
         : 207   ./string/../sysdeps/x86_64/strcmp.S:354
    0.00 :   273dd:  pslldq $0xf,%xmm2
         : 209   ./string/../sysdeps/x86_64/strcmp.S:355
    0.00 :   273e2:  por    %xmm3,%xmm2
         : 211   ./string/../sysdeps/x86_64/strcmp.S:361
    0.00 :   273e6:  pcmpeqb %xmm1,%xmm0
         : 213   ./string/../sysdeps/x86_64/strcmp.S:362
    0.00 :   273ea:  pcmpeqb %xmm2,%xmm1
         : 215   ./string/../sysdeps/x86_64/strcmp.S:363
    0.00 :   273ee:  psubb  %xmm0,%xmm1
         : 217   ./string/../sysdeps/x86_64/strcmp.S:364
    0.00 :   273f2:  pmovmskb %xmm1,%edx
         : 219   ./string/../sysdeps/x86_64/strcmp.S:365
    0.00 :   273f6:  sub    $0xffff,%edx
         : 221   ./string/../sysdeps/x86_64/strcmp.S:366
    0.00 :   273fc:  jne    28620 <strcmp+0x1400>
         : 223   ./string/../sysdeps/x86_64/strcmp.S:372
    0.00 :   27402:  add    $0x10,%rcx
         : 225   ./string/../sysdeps/x86_64/strcmp.S:373
    0.00 :   27406:  movdqa %xmm4,%xmm3
         : 227   ./string/../sysdeps/x86_64/strcmp.S:375
    0.00 :   2740a:  add    $0x10,%r10
         : 229   ./string/../sysdeps/x86_64/strcmp.S:376
    0.00 :   2740e:  jg     27460 <strcmp+0x240>
         : 231   ./string/../sysdeps/x86_64/strcmp.S:378
    0.00 :   27410:  movdqa (%rsi,%rcx,1),%xmm1
         : 233   ./string/../sysdeps/x86_64/strcmp.S:379
    0.00 :   27415:  movdqa (%rdi,%rcx,1),%xmm2
         : 235   ./string/../sysdeps/x86_64/strcmp.S:380
    0.00 :   2741a:  movdqa %xmm2,%xmm4
         : 237   ./string/../sysdeps/x86_64/strcmp.S:383
    0.00 :   2741e:  psrldq $0x1,%xmm3
         : 239   ./string/../sysdeps/x86_64/strcmp.S:384
    0.00 :   27423:  pslldq $0xf,%xmm2
         : 241   ./string/../sysdeps/x86_64/strcmp.S:385
    0.00 :   27428:  por    %xmm3,%xmm2
         : 243   ./string/../sysdeps/x86_64/strcmp.S:391
    0.00 :   2742c:  pcmpeqb %xmm1,%xmm0
         : 245   ./string/../sysdeps/x86_64/strcmp.S:392
    0.00 :   27430:  pcmpeqb %xmm2,%xmm1
         : 247   ./string/../sysdeps/x86_64/strcmp.S:393
    0.00 :   27434:  psubb  %xmm0,%xmm1
         : 249   ./string/../sysdeps/x86_64/strcmp.S:394
    0.00 :   27438:  pmovmskb %xmm1,%edx
         : 251   ./string/../sysdeps/x86_64/strcmp.S:395
    0.00 :   2743c:  sub    $0xffff,%edx
         : 253   ./string/../sysdeps/x86_64/strcmp.S:396
    0.00 :   27442:  jne    28620 <strcmp+0x1400>
         : 255   ./string/../sysdeps/x86_64/strcmp.S:402
    0.00 :   27448:  add    $0x10,%rcx
         : 257   ./string/../sysdeps/x86_64/strcmp.S:403
    0.00 :   2744c:  movdqa %xmm4,%xmm3
         : 259   ./string/../sysdeps/x86_64/strcmp.S:404
    0.00 :   27450:  jmp    273c0 <strcmp+0x1a0>
    0.00 :   27455:  data16 cs nopw 0x0(%rax,%rax,1)
         : 262   ./string/../sysdeps/x86_64/strcmp.S:412
    0.00 :   27460:  pcmpeqb %xmm3,%xmm0
         : 264   ./string/../sysdeps/x86_64/strcmp.S:413
    0.00 :   27464:  pmovmskb %xmm0,%edx
         : 266   ./string/../sysdeps/x86_64/strcmp.S:414
    0.00 :   27468:  test   $0xfffe,%edx
         : 268   ./string/../sysdeps/x86_64/strcmp.S:415
    0.00 :   2746e:  jne    27480 <strcmp+0x260>
         : 270   ./string/../sysdeps/x86_64/strcmp.S:422
    0.00 :   27470:  pxor   %xmm0,%xmm0
         : 272   ./string/../sysdeps/x86_64/strcmp.S:423
    0.00 :   27474:  sub    $0x1000,%r10
         : 274   ./string/../sysdeps/x86_64/strcmp.S:424
    0.00 :   2747b:  jmp    273ca <strcmp+0x1aa>
         : 276   ./string/../sysdeps/x86_64/strcmp.S:432
    0.00 :   27480:  movdqa (%rsi,%rcx,1),%xmm1
         : 278   ./string/../sysdeps/x86_64/strcmp.S:433
    0.00 :   27485:  psrldq $0x1,%xmm0
         : 280   ./string/../sysdeps/x86_64/strcmp.S:434
    0.00 :   2748a:  psrldq $0x1,%xmm3
         : 282   ./string/../sysdeps/x86_64/strcmp.S:435
    0.00 :   2748f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27494:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2749f:  nop
         : 286   ./string/../sysdeps/x86_64/strcmp.S:444
    0.00 :   274a0:  pxor   %xmm0,%xmm0
         : 288   ./string/../sysdeps/x86_64/strcmp.S:445
    0.00 :   274a4:  movdqa (%rdi),%xmm2
         : 290   ./string/../sysdeps/x86_64/strcmp.S:446
    0.00 :   274a8:  movdqa (%rsi),%xmm1
         : 292   ./string/../sysdeps/x86_64/strcmp.S:447
    0.00 :   274ac:  pcmpeqb %xmm1,%xmm0
         : 294   ./string/../sysdeps/x86_64/strcmp.S:448
    0.00 :   274b0:  pslldq $0xe,%xmm2
         : 296   ./string/../sysdeps/x86_64/strcmp.S:450
    0.00 :   274b5:  pcmpeqb %xmm1,%xmm2
         : 298   ./string/../sysdeps/x86_64/strcmp.S:451
    0.00 :   274b9:  psubb  %xmm0,%xmm2
         : 300   ./string/../sysdeps/x86_64/strcmp.S:452
    0.00 :   274bd:  pmovmskb %xmm2,%r9d
         : 302   ./string/../sysdeps/x86_64/strcmp.S:453
    0.00 :   274c2:  shr    %cl,%edx
         : 304   ./string/../sysdeps/x86_64/strcmp.S:454
    0.00 :   274c4:  shr    %cl,%r9d
         : 306   ./string/../sysdeps/x86_64/strcmp.S:455
    0.00 :   274c7:  sub    %r9d,%edx
         : 308   ./string/../sysdeps/x86_64/strcmp.S:456
    0.00 :   274ca:  jne    28625 <strcmp+0x1405>
         : 310   ./string/../sysdeps/x86_64/strcmp.S:457
    0.00 :   274d0:  movdqa (%rdi),%xmm3
         : 312   ./string/../sysdeps/x86_64/strcmp.S:460
    0.00 :   274d4:  pxor   %xmm0,%xmm0
         : 314   ./string/../sysdeps/x86_64/strcmp.S:461
    0.00 :   274d8:  mov    $0x10,%rcx
         : 316   ./string/../sysdeps/x86_64/strcmp.S:462
    0.00 :   274df:  mov    $0x2,%r9d
         : 318   ./string/../sysdeps/x86_64/strcmp.S:468
    0.00 :   274e5:  lea    0x2(%rdi),%r10
         : 320   ./string/../sysdeps/x86_64/strcmp.S:469
    0.00 :   274e9:  and    $0xfff,%r10
         : 322   ./string/../sysdeps/x86_64/strcmp.S:470
    0.00 :   274f0:  sub    $0x1000,%r10
    0.00 :   274f7:  nopw   0x0(%rax,%rax,1)
         : 325   ./string/../sysdeps/x86_64/strcmp.S:474
    0.00 :   27500:  add    $0x10,%r10
         : 327   ./string/../sysdeps/x86_64/strcmp.S:475
    0.00 :   27504:  jg     275a0 <strcmp+0x380>
         : 329   ./string/../sysdeps/x86_64/strcmp.S:478
    0.00 :   2750a:  movdqa (%rsi,%rcx,1),%xmm1
         : 331   ./string/../sysdeps/x86_64/strcmp.S:479
    0.00 :   2750f:  movdqa (%rdi,%rcx,1),%xmm2
         : 333   ./string/../sysdeps/x86_64/strcmp.S:480
    0.00 :   27514:  movdqa %xmm2,%xmm4
         : 335   ./string/../sysdeps/x86_64/strcmp.S:483
    0.00 :   27518:  psrldq $0x2,%xmm3
         : 337   ./string/../sysdeps/x86_64/strcmp.S:484
    0.00 :   2751d:  pslldq $0xe,%xmm2
         : 339   ./string/../sysdeps/x86_64/strcmp.S:485
    0.00 :   27522:  por    %xmm3,%xmm2
         : 341   ./string/../sysdeps/x86_64/strcmp.S:491
    0.00 :   27526:  pcmpeqb %xmm1,%xmm0
         : 343   ./string/../sysdeps/x86_64/strcmp.S:492
    0.00 :   2752a:  pcmpeqb %xmm2,%xmm1
         : 345   ./string/../sysdeps/x86_64/strcmp.S:493
    0.00 :   2752e:  psubb  %xmm0,%xmm1
         : 347   ./string/../sysdeps/x86_64/strcmp.S:494
    0.00 :   27532:  pmovmskb %xmm1,%edx
         : 349   ./string/../sysdeps/x86_64/strcmp.S:495
    0.00 :   27536:  sub    $0xffff,%edx
         : 351   ./string/../sysdeps/x86_64/strcmp.S:496
    0.00 :   2753c:  jne    28620 <strcmp+0x1400>
         : 353   ./string/../sysdeps/x86_64/strcmp.S:503
    0.00 :   27542:  add    $0x10,%rcx
         : 355   ./string/../sysdeps/x86_64/strcmp.S:504
    0.00 :   27546:  movdqa %xmm4,%xmm3
         : 357   ./string/../sysdeps/x86_64/strcmp.S:506
    0.00 :   2754a:  add    $0x10,%r10
         : 359   ./string/../sysdeps/x86_64/strcmp.S:507
    0.00 :   2754e:  jg     275a0 <strcmp+0x380>
         : 361   ./string/../sysdeps/x86_64/strcmp.S:509
    0.00 :   27550:  movdqa (%rsi,%rcx,1),%xmm1
         : 363   ./string/../sysdeps/x86_64/strcmp.S:510
    0.00 :   27555:  movdqa (%rdi,%rcx,1),%xmm2
         : 365   ./string/../sysdeps/x86_64/strcmp.S:511
    0.00 :   2755a:  movdqa %xmm2,%xmm4
         : 367   ./string/../sysdeps/x86_64/strcmp.S:514
    0.00 :   2755e:  psrldq $0x2,%xmm3
         : 369   ./string/../sysdeps/x86_64/strcmp.S:515
    0.00 :   27563:  pslldq $0xe,%xmm2
         : 371   ./string/../sysdeps/x86_64/strcmp.S:516
    0.00 :   27568:  por    %xmm3,%xmm2
         : 373   ./string/../sysdeps/x86_64/strcmp.S:522
    0.00 :   2756c:  pcmpeqb %xmm1,%xmm0
         : 375   ./string/../sysdeps/x86_64/strcmp.S:523
    0.00 :   27570:  pcmpeqb %xmm2,%xmm1
         : 377   ./string/../sysdeps/x86_64/strcmp.S:524
    0.00 :   27574:  psubb  %xmm0,%xmm1
         : 379   ./string/../sysdeps/x86_64/strcmp.S:525
    0.00 :   27578:  pmovmskb %xmm1,%edx
         : 381   ./string/../sysdeps/x86_64/strcmp.S:526
    0.00 :   2757c:  sub    $0xffff,%edx
         : 383   ./string/../sysdeps/x86_64/strcmp.S:527
    0.00 :   27582:  jne    28620 <strcmp+0x1400>
         : 385   ./string/../sysdeps/x86_64/strcmp.S:534
    0.00 :   27588:  add    $0x10,%rcx
         : 387   ./string/../sysdeps/x86_64/strcmp.S:535
    0.00 :   2758c:  movdqa %xmm4,%xmm3
         : 389   ./string/../sysdeps/x86_64/strcmp.S:536
    0.00 :   27590:  jmp    27500 <strcmp+0x2e0>
    0.00 :   27595:  data16 cs nopw 0x0(%rax,%rax,1)
         : 392   ./string/../sysdeps/x86_64/strcmp.S:540
    0.00 :   275a0:  pcmpeqb %xmm3,%xmm0
         : 394   ./string/../sysdeps/x86_64/strcmp.S:541
    0.00 :   275a4:  pmovmskb %xmm0,%edx
         : 396   ./string/../sysdeps/x86_64/strcmp.S:542
    0.00 :   275a8:  test   $0xfffc,%edx
         : 398   ./string/../sysdeps/x86_64/strcmp.S:543
    0.00 :   275ae:  jne    275c0 <strcmp+0x3a0>
         : 400   ./string/../sysdeps/x86_64/strcmp.S:550
    0.00 :   275b0:  pxor   %xmm0,%xmm0
         : 402   ./string/../sysdeps/x86_64/strcmp.S:551
    0.00 :   275b4:  sub    $0x1000,%r10
         : 404   ./string/../sysdeps/x86_64/strcmp.S:552
    0.00 :   275bb:  jmp    2750a <strcmp+0x2ea>
         : 406   ./string/../sysdeps/x86_64/strcmp.S:556
    0.00 :   275c0:  movdqa (%rsi,%rcx,1),%xmm1
         : 408   ./string/../sysdeps/x86_64/strcmp.S:557
    0.00 :   275c5:  psrldq $0x2,%xmm0
         : 410   ./string/../sysdeps/x86_64/strcmp.S:558
    0.00 :   275ca:  psrldq $0x2,%xmm3
         : 412   ./string/../sysdeps/x86_64/strcmp.S:559
    0.00 :   275cf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   275d4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   275df:  nop
         : 416   ./string/../sysdeps/x86_64/strcmp.S:568
    0.00 :   275e0:  pxor   %xmm0,%xmm0
         : 418   ./string/../sysdeps/x86_64/strcmp.S:569
    0.00 :   275e4:  movdqa (%rdi),%xmm2
         : 420   ./string/../sysdeps/x86_64/strcmp.S:570
    0.00 :   275e8:  movdqa (%rsi),%xmm1
         : 422   ./string/../sysdeps/x86_64/strcmp.S:571
    0.00 :   275ec:  pcmpeqb %xmm1,%xmm0
         : 424   ./string/../sysdeps/x86_64/strcmp.S:572
    0.00 :   275f0:  pslldq $0xd,%xmm2
         : 426   ./string/../sysdeps/x86_64/strcmp.S:574
    0.00 :   275f5:  pcmpeqb %xmm1,%xmm2
         : 428   ./string/../sysdeps/x86_64/strcmp.S:575
    0.00 :   275f9:  psubb  %xmm0,%xmm2
         : 430   ./string/../sysdeps/x86_64/strcmp.S:576
    0.00 :   275fd:  pmovmskb %xmm2,%r9d
         : 432   ./string/../sysdeps/x86_64/strcmp.S:577
    0.00 :   27602:  shr    %cl,%edx
         : 434   ./string/../sysdeps/x86_64/strcmp.S:578
    0.00 :   27604:  shr    %cl,%r9d
         : 436   ./string/../sysdeps/x86_64/strcmp.S:579
    0.00 :   27607:  sub    %r9d,%edx
         : 438   ./string/../sysdeps/x86_64/strcmp.S:580
    0.00 :   2760a:  jne    28625 <strcmp+0x1405>
         : 440   ./string/../sysdeps/x86_64/strcmp.S:581
    0.00 :   27610:  movdqa (%rdi),%xmm3
         : 442   ./string/../sysdeps/x86_64/strcmp.S:585
    0.00 :   27614:  pxor   %xmm0,%xmm0
         : 444   ./string/../sysdeps/x86_64/strcmp.S:586
    0.00 :   27618:  mov    $0x10,%rcx
         : 446   ./string/../sysdeps/x86_64/strcmp.S:587
    0.00 :   2761f:  mov    $0x3,%r9d
         : 448   ./string/../sysdeps/x86_64/strcmp.S:593
    0.00 :   27625:  lea    0x3(%rdi),%r10
         : 450   ./string/../sysdeps/x86_64/strcmp.S:594
    0.00 :   27629:  and    $0xfff,%r10
         : 452   ./string/../sysdeps/x86_64/strcmp.S:595
    0.00 :   27630:  sub    $0x1000,%r10
    0.00 :   27637:  nopw   0x0(%rax,%rax,1)
         : 455   ./string/../sysdeps/x86_64/strcmp.S:599
    0.00 :   27640:  add    $0x10,%r10
         : 457   ./string/../sysdeps/x86_64/strcmp.S:600
    0.00 :   27644:  jg     276e0 <strcmp+0x4c0>
         : 459   ./string/../sysdeps/x86_64/strcmp.S:603
    0.00 :   2764a:  movdqa (%rsi,%rcx,1),%xmm1
         : 461   ./string/../sysdeps/x86_64/strcmp.S:604
    0.00 :   2764f:  movdqa (%rdi,%rcx,1),%xmm2
         : 463   ./string/../sysdeps/x86_64/strcmp.S:605
    0.00 :   27654:  movdqa %xmm2,%xmm4
         : 465   ./string/../sysdeps/x86_64/strcmp.S:608
    0.00 :   27658:  psrldq $0x3,%xmm3
         : 467   ./string/../sysdeps/x86_64/strcmp.S:609
    0.00 :   2765d:  pslldq $0xd,%xmm2
         : 469   ./string/../sysdeps/x86_64/strcmp.S:610
    0.00 :   27662:  por    %xmm3,%xmm2
         : 471   ./string/../sysdeps/x86_64/strcmp.S:616
    0.00 :   27666:  pcmpeqb %xmm1,%xmm0
         : 473   ./string/../sysdeps/x86_64/strcmp.S:617
    0.00 :   2766a:  pcmpeqb %xmm2,%xmm1
         : 475   ./string/../sysdeps/x86_64/strcmp.S:618
    0.00 :   2766e:  psubb  %xmm0,%xmm1
         : 477   ./string/../sysdeps/x86_64/strcmp.S:619
    0.00 :   27672:  pmovmskb %xmm1,%edx
         : 479   ./string/../sysdeps/x86_64/strcmp.S:620
    0.00 :   27676:  sub    $0xffff,%edx
         : 481   ./string/../sysdeps/x86_64/strcmp.S:621
    0.00 :   2767c:  jne    28620 <strcmp+0x1400>
         : 483   ./string/../sysdeps/x86_64/strcmp.S:628
    0.00 :   27682:  add    $0x10,%rcx
         : 485   ./string/../sysdeps/x86_64/strcmp.S:629
    0.00 :   27686:  movdqa %xmm4,%xmm3
         : 487   ./string/../sysdeps/x86_64/strcmp.S:631
    0.00 :   2768a:  add    $0x10,%r10
         : 489   ./string/../sysdeps/x86_64/strcmp.S:632
    0.00 :   2768e:  jg     276e0 <strcmp+0x4c0>
         : 491   ./string/../sysdeps/x86_64/strcmp.S:634
    0.00 :   27690:  movdqa (%rsi,%rcx,1),%xmm1
         : 493   ./string/../sysdeps/x86_64/strcmp.S:635
    0.00 :   27695:  movdqa (%rdi,%rcx,1),%xmm2
         : 495   ./string/../sysdeps/x86_64/strcmp.S:636
    0.00 :   2769a:  movdqa %xmm2,%xmm4
         : 497   ./string/../sysdeps/x86_64/strcmp.S:639
    0.00 :   2769e:  psrldq $0x3,%xmm3
         : 499   ./string/../sysdeps/x86_64/strcmp.S:640
    0.00 :   276a3:  pslldq $0xd,%xmm2
         : 501   ./string/../sysdeps/x86_64/strcmp.S:641
    0.00 :   276a8:  por    %xmm3,%xmm2
         : 503   ./string/../sysdeps/x86_64/strcmp.S:647
    0.00 :   276ac:  pcmpeqb %xmm1,%xmm0
         : 505   ./string/../sysdeps/x86_64/strcmp.S:648
    0.00 :   276b0:  pcmpeqb %xmm2,%xmm1
         : 507   ./string/../sysdeps/x86_64/strcmp.S:649
    0.00 :   276b4:  psubb  %xmm0,%xmm1
         : 509   ./string/../sysdeps/x86_64/strcmp.S:650
    0.00 :   276b8:  pmovmskb %xmm1,%edx
         : 511   ./string/../sysdeps/x86_64/strcmp.S:651
    0.00 :   276bc:  sub    $0xffff,%edx
         : 513   ./string/../sysdeps/x86_64/strcmp.S:652
    0.00 :   276c2:  jne    28620 <strcmp+0x1400>
         : 515   ./string/../sysdeps/x86_64/strcmp.S:659
    0.00 :   276c8:  add    $0x10,%rcx
         : 517   ./string/../sysdeps/x86_64/strcmp.S:660
    0.00 :   276cc:  movdqa %xmm4,%xmm3
         : 519   ./string/../sysdeps/x86_64/strcmp.S:661
    0.00 :   276d0:  jmp    27640 <strcmp+0x420>
    0.00 :   276d5:  data16 cs nopw 0x0(%rax,%rax,1)
         : 522   ./string/../sysdeps/x86_64/strcmp.S:665
    0.00 :   276e0:  pcmpeqb %xmm3,%xmm0
         : 524   ./string/../sysdeps/x86_64/strcmp.S:666
    0.00 :   276e4:  pmovmskb %xmm0,%edx
         : 526   ./string/../sysdeps/x86_64/strcmp.S:667
    0.00 :   276e8:  test   $0xfff8,%edx
         : 528   ./string/../sysdeps/x86_64/strcmp.S:668
    0.00 :   276ee:  jne    27700 <strcmp+0x4e0>
         : 530   ./string/../sysdeps/x86_64/strcmp.S:675
    0.00 :   276f0:  pxor   %xmm0,%xmm0
         : 532   ./string/../sysdeps/x86_64/strcmp.S:676
    0.00 :   276f4:  sub    $0x1000,%r10
         : 534   ./string/../sysdeps/x86_64/strcmp.S:677
    0.00 :   276fb:  jmp    2764a <strcmp+0x42a>
         : 536   ./string/../sysdeps/x86_64/strcmp.S:681
    0.00 :   27700:  movdqa (%rsi,%rcx,1),%xmm1
         : 538   ./string/../sysdeps/x86_64/strcmp.S:682
    0.00 :   27705:  psrldq $0x3,%xmm0
         : 540   ./string/../sysdeps/x86_64/strcmp.S:683
    0.00 :   2770a:  psrldq $0x3,%xmm3
         : 542   ./string/../sysdeps/x86_64/strcmp.S:684
    0.00 :   2770f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27714:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2771f:  nop
         : 546   ./string/../sysdeps/x86_64/strcmp.S:693
    0.00 :   27720:  pxor   %xmm0,%xmm0
         : 548   ./string/../sysdeps/x86_64/strcmp.S:694
    0.00 :   27724:  movdqa (%rdi),%xmm2
         : 550   ./string/../sysdeps/x86_64/strcmp.S:695
    0.00 :   27728:  movdqa (%rsi),%xmm1
         : 552   ./string/../sysdeps/x86_64/strcmp.S:696
    0.00 :   2772c:  pcmpeqb %xmm1,%xmm0
         : 554   ./string/../sysdeps/x86_64/strcmp.S:697
    0.00 :   27730:  pslldq $0xc,%xmm2
         : 556   ./string/../sysdeps/x86_64/strcmp.S:699
    0.00 :   27735:  pcmpeqb %xmm1,%xmm2
         : 558   ./string/../sysdeps/x86_64/strcmp.S:700
    0.00 :   27739:  psubb  %xmm0,%xmm2
         : 560   ./string/../sysdeps/x86_64/strcmp.S:701
    0.00 :   2773d:  pmovmskb %xmm2,%r9d
         : 562   ./string/../sysdeps/x86_64/strcmp.S:702
    0.00 :   27742:  shr    %cl,%edx
         : 564   ./string/../sysdeps/x86_64/strcmp.S:703
    0.00 :   27744:  shr    %cl,%r9d
         : 566   ./string/../sysdeps/x86_64/strcmp.S:704
    0.00 :   27747:  sub    %r9d,%edx
         : 568   ./string/../sysdeps/x86_64/strcmp.S:705
    0.00 :   2774a:  jne    28625 <strcmp+0x1405>
         : 570   ./string/../sysdeps/x86_64/strcmp.S:706
    0.00 :   27750:  movdqa (%rdi),%xmm3
         : 572   ./string/../sysdeps/x86_64/strcmp.S:710
    0.00 :   27754:  pxor   %xmm0,%xmm0
         : 574   ./string/../sysdeps/x86_64/strcmp.S:711
    0.00 :   27758:  mov    $0x10,%rcx
         : 576   ./string/../sysdeps/x86_64/strcmp.S:712
    0.00 :   2775f:  mov    $0x4,%r9d
         : 578   ./string/../sysdeps/x86_64/strcmp.S:718
    0.00 :   27765:  lea    0x4(%rdi),%r10
         : 580   ./string/../sysdeps/x86_64/strcmp.S:719
    0.00 :   27769:  and    $0xfff,%r10
         : 582   ./string/../sysdeps/x86_64/strcmp.S:720
    0.00 :   27770:  sub    $0x1000,%r10
    0.00 :   27777:  nopw   0x0(%rax,%rax,1)
         : 585   ./string/../sysdeps/x86_64/strcmp.S:724
    0.00 :   27780:  add    $0x10,%r10
         : 587   ./string/../sysdeps/x86_64/strcmp.S:725
    0.00 :   27784:  jg     27820 <strcmp+0x600>
         : 589   ./string/../sysdeps/x86_64/strcmp.S:728
    0.00 :   2778a:  movdqa (%rsi,%rcx,1),%xmm1
         : 591   ./string/../sysdeps/x86_64/strcmp.S:729
    0.00 :   2778f:  movdqa (%rdi,%rcx,1),%xmm2
         : 593   ./string/../sysdeps/x86_64/strcmp.S:730
    0.00 :   27794:  movdqa %xmm2,%xmm4
         : 595   ./string/../sysdeps/x86_64/strcmp.S:733
    0.00 :   27798:  psrldq $0x4,%xmm3
         : 597   ./string/../sysdeps/x86_64/strcmp.S:734
    0.00 :   2779d:  pslldq $0xc,%xmm2
         : 599   ./string/../sysdeps/x86_64/strcmp.S:735
    0.00 :   277a2:  por    %xmm3,%xmm2
         : 601   ./string/../sysdeps/x86_64/strcmp.S:741
    0.00 :   277a6:  pcmpeqb %xmm1,%xmm0
         : 603   ./string/../sysdeps/x86_64/strcmp.S:742
    0.00 :   277aa:  pcmpeqb %xmm2,%xmm1
         : 605   ./string/../sysdeps/x86_64/strcmp.S:743
    0.00 :   277ae:  psubb  %xmm0,%xmm1
         : 607   ./string/../sysdeps/x86_64/strcmp.S:744
    0.00 :   277b2:  pmovmskb %xmm1,%edx
         : 609   ./string/../sysdeps/x86_64/strcmp.S:745
    0.00 :   277b6:  sub    $0xffff,%edx
         : 611   ./string/../sysdeps/x86_64/strcmp.S:746
    0.00 :   277bc:  jne    28620 <strcmp+0x1400>
         : 613   ./string/../sysdeps/x86_64/strcmp.S:753
    0.00 :   277c2:  add    $0x10,%rcx
         : 615   ./string/../sysdeps/x86_64/strcmp.S:754
    0.00 :   277c6:  movdqa %xmm4,%xmm3
         : 617   ./string/../sysdeps/x86_64/strcmp.S:756
    0.00 :   277ca:  add    $0x10,%r10
         : 619   ./string/../sysdeps/x86_64/strcmp.S:757
    0.00 :   277ce:  jg     27820 <strcmp+0x600>
         : 621   ./string/../sysdeps/x86_64/strcmp.S:759
    0.00 :   277d0:  movdqa (%rsi,%rcx,1),%xmm1
         : 623   ./string/../sysdeps/x86_64/strcmp.S:760
    0.00 :   277d5:  movdqa (%rdi,%rcx,1),%xmm2
         : 625   ./string/../sysdeps/x86_64/strcmp.S:761
    0.00 :   277da:  movdqa %xmm2,%xmm4
         : 627   ./string/../sysdeps/x86_64/strcmp.S:764
    0.00 :   277de:  psrldq $0x4,%xmm3
         : 629   ./string/../sysdeps/x86_64/strcmp.S:765
    0.00 :   277e3:  pslldq $0xc,%xmm2
         : 631   ./string/../sysdeps/x86_64/strcmp.S:766
    0.00 :   277e8:  por    %xmm3,%xmm2
         : 633   ./string/../sysdeps/x86_64/strcmp.S:772
    0.00 :   277ec:  pcmpeqb %xmm1,%xmm0
         : 635   ./string/../sysdeps/x86_64/strcmp.S:773
    0.00 :   277f0:  pcmpeqb %xmm2,%xmm1
         : 637   ./string/../sysdeps/x86_64/strcmp.S:774
    0.00 :   277f4:  psubb  %xmm0,%xmm1
         : 639   ./string/../sysdeps/x86_64/strcmp.S:775
    0.00 :   277f8:  pmovmskb %xmm1,%edx
         : 641   ./string/../sysdeps/x86_64/strcmp.S:776
    0.00 :   277fc:  sub    $0xffff,%edx
         : 643   ./string/../sysdeps/x86_64/strcmp.S:777
    0.00 :   27802:  jne    28620 <strcmp+0x1400>
         : 645   ./string/../sysdeps/x86_64/strcmp.S:784
    0.00 :   27808:  add    $0x10,%rcx
         : 647   ./string/../sysdeps/x86_64/strcmp.S:785
    0.00 :   2780c:  movdqa %xmm4,%xmm3
         : 649   ./string/../sysdeps/x86_64/strcmp.S:786
    0.00 :   27810:  jmp    27780 <strcmp+0x560>
    0.00 :   27815:  data16 cs nopw 0x0(%rax,%rax,1)
         : 652   ./string/../sysdeps/x86_64/strcmp.S:790
    0.00 :   27820:  pcmpeqb %xmm3,%xmm0
         : 654   ./string/../sysdeps/x86_64/strcmp.S:791
    0.00 :   27824:  pmovmskb %xmm0,%edx
         : 656   ./string/../sysdeps/x86_64/strcmp.S:792
    0.00 :   27828:  test   $0xfff0,%edx
         : 658   ./string/../sysdeps/x86_64/strcmp.S:793
    0.00 :   2782e:  jne    27840 <strcmp+0x620>
         : 660   ./string/../sysdeps/x86_64/strcmp.S:800
    0.00 :   27830:  pxor   %xmm0,%xmm0
         : 662   ./string/../sysdeps/x86_64/strcmp.S:801
    0.00 :   27834:  sub    $0x1000,%r10
         : 664   ./string/../sysdeps/x86_64/strcmp.S:802
    0.00 :   2783b:  jmp    2778a <strcmp+0x56a>
         : 666   ./string/../sysdeps/x86_64/strcmp.S:806
    0.00 :   27840:  movdqa (%rsi,%rcx,1),%xmm1
         : 668   ./string/../sysdeps/x86_64/strcmp.S:807
    0.00 :   27845:  psrldq $0x4,%xmm0
         : 670   ./string/../sysdeps/x86_64/strcmp.S:808
    0.00 :   2784a:  psrldq $0x4,%xmm3
         : 672   ./string/../sysdeps/x86_64/strcmp.S:809
    0.00 :   2784f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27854:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2785f:  nop
         : 676   ./string/../sysdeps/x86_64/strcmp.S:818
    0.00 :   27860:  pxor   %xmm0,%xmm0
         : 678   ./string/../sysdeps/x86_64/strcmp.S:819
    0.00 :   27864:  movdqa (%rdi),%xmm2
         : 680   ./string/../sysdeps/x86_64/strcmp.S:820
    0.00 :   27868:  movdqa (%rsi),%xmm1
         : 682   ./string/../sysdeps/x86_64/strcmp.S:821
    0.00 :   2786c:  pcmpeqb %xmm1,%xmm0
         : 684   ./string/../sysdeps/x86_64/strcmp.S:822
    0.00 :   27870:  pslldq $0xb,%xmm2
         : 686   ./string/../sysdeps/x86_64/strcmp.S:824
    0.00 :   27875:  pcmpeqb %xmm1,%xmm2
         : 688   ./string/../sysdeps/x86_64/strcmp.S:825
    0.00 :   27879:  psubb  %xmm0,%xmm2
         : 690   ./string/../sysdeps/x86_64/strcmp.S:826
    0.00 :   2787d:  pmovmskb %xmm2,%r9d
         : 692   ./string/../sysdeps/x86_64/strcmp.S:827
    0.00 :   27882:  shr    %cl,%edx
         : 694   ./string/../sysdeps/x86_64/strcmp.S:828
    0.00 :   27884:  shr    %cl,%r9d
         : 696   ./string/../sysdeps/x86_64/strcmp.S:829
    0.00 :   27887:  sub    %r9d,%edx
         : 698   ./string/../sysdeps/x86_64/strcmp.S:830
    0.00 :   2788a:  jne    28625 <strcmp+0x1405>
         : 700   ./string/../sysdeps/x86_64/strcmp.S:831
    0.00 :   27890:  movdqa (%rdi),%xmm3
         : 702   ./string/../sysdeps/x86_64/strcmp.S:835
    0.00 :   27894:  pxor   %xmm0,%xmm0
         : 704   ./string/../sysdeps/x86_64/strcmp.S:836
    0.00 :   27898:  mov    $0x10,%rcx
         : 706   ./string/../sysdeps/x86_64/strcmp.S:837
    0.00 :   2789f:  mov    $0x5,%r9d
         : 708   ./string/../sysdeps/x86_64/strcmp.S:843
    0.00 :   278a5:  lea    0x5(%rdi),%r10
         : 710   ./string/../sysdeps/x86_64/strcmp.S:844
    0.00 :   278a9:  and    $0xfff,%r10
         : 712   ./string/../sysdeps/x86_64/strcmp.S:845
    0.00 :   278b0:  sub    $0x1000,%r10
    0.00 :   278b7:  nopw   0x0(%rax,%rax,1)
         : 715   ./string/../sysdeps/x86_64/strcmp.S:849
    0.00 :   278c0:  add    $0x10,%r10
         : 717   ./string/../sysdeps/x86_64/strcmp.S:850
    0.00 :   278c4:  jg     27960 <strcmp+0x740>
         : 719   ./string/../sysdeps/x86_64/strcmp.S:853
    0.00 :   278ca:  movdqa (%rsi,%rcx,1),%xmm1
         : 721   ./string/../sysdeps/x86_64/strcmp.S:854
    0.00 :   278cf:  movdqa (%rdi,%rcx,1),%xmm2
         : 723   ./string/../sysdeps/x86_64/strcmp.S:855
    0.00 :   278d4:  movdqa %xmm2,%xmm4
         : 725   ./string/../sysdeps/x86_64/strcmp.S:858
    0.00 :   278d8:  psrldq $0x5,%xmm3
         : 727   ./string/../sysdeps/x86_64/strcmp.S:859
    0.00 :   278dd:  pslldq $0xb,%xmm2
         : 729   ./string/../sysdeps/x86_64/strcmp.S:860
    0.00 :   278e2:  por    %xmm3,%xmm2
         : 731   ./string/../sysdeps/x86_64/strcmp.S:866
    0.00 :   278e6:  pcmpeqb %xmm1,%xmm0
         : 733   ./string/../sysdeps/x86_64/strcmp.S:867
    0.00 :   278ea:  pcmpeqb %xmm2,%xmm1
         : 735   ./string/../sysdeps/x86_64/strcmp.S:868
    0.00 :   278ee:  psubb  %xmm0,%xmm1
         : 737   ./string/../sysdeps/x86_64/strcmp.S:869
    0.00 :   278f2:  pmovmskb %xmm1,%edx
         : 739   ./string/../sysdeps/x86_64/strcmp.S:870
    0.00 :   278f6:  sub    $0xffff,%edx
         : 741   ./string/../sysdeps/x86_64/strcmp.S:871
    0.00 :   278fc:  jne    28620 <strcmp+0x1400>
         : 743   ./string/../sysdeps/x86_64/strcmp.S:878
    0.00 :   27902:  add    $0x10,%rcx
         : 745   ./string/../sysdeps/x86_64/strcmp.S:879
    0.00 :   27906:  movdqa %xmm4,%xmm3
         : 747   ./string/../sysdeps/x86_64/strcmp.S:881
    0.00 :   2790a:  add    $0x10,%r10
         : 749   ./string/../sysdeps/x86_64/strcmp.S:882
    0.00 :   2790e:  jg     27960 <strcmp+0x740>
         : 751   ./string/../sysdeps/x86_64/strcmp.S:884
    0.00 :   27910:  movdqa (%rsi,%rcx,1),%xmm1
         : 753   ./string/../sysdeps/x86_64/strcmp.S:885
    0.00 :   27915:  movdqa (%rdi,%rcx,1),%xmm2
         : 755   ./string/../sysdeps/x86_64/strcmp.S:886
    0.00 :   2791a:  movdqa %xmm2,%xmm4
         : 757   ./string/../sysdeps/x86_64/strcmp.S:889
    0.00 :   2791e:  psrldq $0x5,%xmm3
         : 759   ./string/../sysdeps/x86_64/strcmp.S:890
    0.00 :   27923:  pslldq $0xb,%xmm2
         : 761   ./string/../sysdeps/x86_64/strcmp.S:891
    0.00 :   27928:  por    %xmm3,%xmm2
         : 763   ./string/../sysdeps/x86_64/strcmp.S:897
    0.00 :   2792c:  pcmpeqb %xmm1,%xmm0
         : 765   ./string/../sysdeps/x86_64/strcmp.S:898
    0.00 :   27930:  pcmpeqb %xmm2,%xmm1
         : 767   ./string/../sysdeps/x86_64/strcmp.S:899
    0.00 :   27934:  psubb  %xmm0,%xmm1
         : 769   ./string/../sysdeps/x86_64/strcmp.S:900
    0.00 :   27938:  pmovmskb %xmm1,%edx
         : 771   ./string/../sysdeps/x86_64/strcmp.S:901
    0.00 :   2793c:  sub    $0xffff,%edx
         : 773   ./string/../sysdeps/x86_64/strcmp.S:902
    0.00 :   27942:  jne    28620 <strcmp+0x1400>
         : 775   ./string/../sysdeps/x86_64/strcmp.S:909
    0.00 :   27948:  add    $0x10,%rcx
         : 777   ./string/../sysdeps/x86_64/strcmp.S:910
    0.00 :   2794c:  movdqa %xmm4,%xmm3
         : 779   ./string/../sysdeps/x86_64/strcmp.S:911
    0.00 :   27950:  jmp    278c0 <strcmp+0x6a0>
    0.00 :   27955:  data16 cs nopw 0x0(%rax,%rax,1)
         : 782   ./string/../sysdeps/x86_64/strcmp.S:915
    0.00 :   27960:  pcmpeqb %xmm3,%xmm0
         : 784   ./string/../sysdeps/x86_64/strcmp.S:916
    0.00 :   27964:  pmovmskb %xmm0,%edx
         : 786   ./string/../sysdeps/x86_64/strcmp.S:917
    0.00 :   27968:  test   $0xffe0,%edx
         : 788   ./string/../sysdeps/x86_64/strcmp.S:918
    0.00 :   2796e:  jne    27980 <strcmp+0x760>
         : 790   ./string/../sysdeps/x86_64/strcmp.S:925
    0.00 :   27970:  pxor   %xmm0,%xmm0
         : 792   ./string/../sysdeps/x86_64/strcmp.S:926
    0.00 :   27974:  sub    $0x1000,%r10
         : 794   ./string/../sysdeps/x86_64/strcmp.S:927
    0.00 :   2797b:  jmp    278ca <strcmp+0x6aa>
         : 796   ./string/../sysdeps/x86_64/strcmp.S:931
    0.00 :   27980:  movdqa (%rsi,%rcx,1),%xmm1
         : 798   ./string/../sysdeps/x86_64/strcmp.S:932
    0.00 :   27985:  psrldq $0x5,%xmm0
         : 800   ./string/../sysdeps/x86_64/strcmp.S:933
    0.00 :   2798a:  psrldq $0x5,%xmm3
         : 802   ./string/../sysdeps/x86_64/strcmp.S:934
    0.00 :   2798f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27994:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2799f:  nop
         : 806   ./string/../sysdeps/x86_64/strcmp.S:943
    0.00 :   279a0:  pxor   %xmm0,%xmm0
         : 808   ./string/../sysdeps/x86_64/strcmp.S:944
    0.00 :   279a4:  movdqa (%rdi),%xmm2
         : 810   ./string/../sysdeps/x86_64/strcmp.S:945
    0.00 :   279a8:  movdqa (%rsi),%xmm1
         : 812   ./string/../sysdeps/x86_64/strcmp.S:946
    0.00 :   279ac:  pcmpeqb %xmm1,%xmm0
         : 814   ./string/../sysdeps/x86_64/strcmp.S:947
    0.00 :   279b0:  pslldq $0xa,%xmm2
         : 816   ./string/../sysdeps/x86_64/strcmp.S:949
    0.00 :   279b5:  pcmpeqb %xmm1,%xmm2
         : 818   ./string/../sysdeps/x86_64/strcmp.S:950
    0.00 :   279b9:  psubb  %xmm0,%xmm2
         : 820   ./string/../sysdeps/x86_64/strcmp.S:951
    0.00 :   279bd:  pmovmskb %xmm2,%r9d
         : 822   ./string/../sysdeps/x86_64/strcmp.S:952
    0.00 :   279c2:  shr    %cl,%edx
         : 824   ./string/../sysdeps/x86_64/strcmp.S:953
    0.00 :   279c4:  shr    %cl,%r9d
         : 826   ./string/../sysdeps/x86_64/strcmp.S:954
    0.00 :   279c7:  sub    %r9d,%edx
         : 828   ./string/../sysdeps/x86_64/strcmp.S:955
    0.00 :   279ca:  jne    28625 <strcmp+0x1405>
         : 830   ./string/../sysdeps/x86_64/strcmp.S:956
    0.00 :   279d0:  movdqa (%rdi),%xmm3
         : 832   ./string/../sysdeps/x86_64/strcmp.S:960
    0.00 :   279d4:  pxor   %xmm0,%xmm0
         : 834   ./string/../sysdeps/x86_64/strcmp.S:961
    0.00 :   279d8:  mov    $0x10,%rcx
         : 836   ./string/../sysdeps/x86_64/strcmp.S:962
    0.00 :   279df:  mov    $0x6,%r9d
         : 838   ./string/../sysdeps/x86_64/strcmp.S:968
    0.00 :   279e5:  lea    0x6(%rdi),%r10
         : 840   ./string/../sysdeps/x86_64/strcmp.S:969
    0.00 :   279e9:  and    $0xfff,%r10
         : 842   ./string/../sysdeps/x86_64/strcmp.S:970
    0.00 :   279f0:  sub    $0x1000,%r10
    0.00 :   279f7:  nopw   0x0(%rax,%rax,1)
         : 845   ./string/../sysdeps/x86_64/strcmp.S:974
    0.00 :   27a00:  add    $0x10,%r10
         : 847   ./string/../sysdeps/x86_64/strcmp.S:975
    0.00 :   27a04:  jg     27aa0 <strcmp+0x880>
         : 849   ./string/../sysdeps/x86_64/strcmp.S:978
    0.00 :   27a0a:  movdqa (%rsi,%rcx,1),%xmm1
         : 851   ./string/../sysdeps/x86_64/strcmp.S:979
    0.00 :   27a0f:  movdqa (%rdi,%rcx,1),%xmm2
         : 853   ./string/../sysdeps/x86_64/strcmp.S:980
    0.00 :   27a14:  movdqa %xmm2,%xmm4
         : 855   ./string/../sysdeps/x86_64/strcmp.S:983
    0.00 :   27a18:  psrldq $0x6,%xmm3
         : 857   ./string/../sysdeps/x86_64/strcmp.S:984
    0.00 :   27a1d:  pslldq $0xa,%xmm2
         : 859   ./string/../sysdeps/x86_64/strcmp.S:985
    0.00 :   27a22:  por    %xmm3,%xmm2
         : 861   ./string/../sysdeps/x86_64/strcmp.S:991
    0.00 :   27a26:  pcmpeqb %xmm1,%xmm0
         : 863   ./string/../sysdeps/x86_64/strcmp.S:992
    0.00 :   27a2a:  pcmpeqb %xmm2,%xmm1
         : 865   ./string/../sysdeps/x86_64/strcmp.S:993
    0.00 :   27a2e:  psubb  %xmm0,%xmm1
         : 867   ./string/../sysdeps/x86_64/strcmp.S:994
    0.00 :   27a32:  pmovmskb %xmm1,%edx
         : 869   ./string/../sysdeps/x86_64/strcmp.S:995
    0.00 :   27a36:  sub    $0xffff,%edx
         : 871   ./string/../sysdeps/x86_64/strcmp.S:996
    0.00 :   27a3c:  jne    28620 <strcmp+0x1400>
         : 873   ./string/../sysdeps/x86_64/strcmp.S:1003
    0.00 :   27a42:  add    $0x10,%rcx
         : 875   ./string/../sysdeps/x86_64/strcmp.S:1004
    0.00 :   27a46:  movdqa %xmm4,%xmm3
         : 877   ./string/../sysdeps/x86_64/strcmp.S:1006
    0.00 :   27a4a:  add    $0x10,%r10
         : 879   ./string/../sysdeps/x86_64/strcmp.S:1007
    0.00 :   27a4e:  jg     27aa0 <strcmp+0x880>
         : 881   ./string/../sysdeps/x86_64/strcmp.S:1009
    0.00 :   27a50:  movdqa (%rsi,%rcx,1),%xmm1
         : 883   ./string/../sysdeps/x86_64/strcmp.S:1010
    0.00 :   27a55:  movdqa (%rdi,%rcx,1),%xmm2
         : 885   ./string/../sysdeps/x86_64/strcmp.S:1011
    0.00 :   27a5a:  movdqa %xmm2,%xmm4
         : 887   ./string/../sysdeps/x86_64/strcmp.S:1014
    0.00 :   27a5e:  psrldq $0x6,%xmm3
         : 889   ./string/../sysdeps/x86_64/strcmp.S:1015
    0.00 :   27a63:  pslldq $0xa,%xmm2
         : 891   ./string/../sysdeps/x86_64/strcmp.S:1016
    0.00 :   27a68:  por    %xmm3,%xmm2
         : 893   ./string/../sysdeps/x86_64/strcmp.S:1022
    0.00 :   27a6c:  pcmpeqb %xmm1,%xmm0
         : 895   ./string/../sysdeps/x86_64/strcmp.S:1023
    0.00 :   27a70:  pcmpeqb %xmm2,%xmm1
         : 897   ./string/../sysdeps/x86_64/strcmp.S:1024
    0.00 :   27a74:  psubb  %xmm0,%xmm1
         : 899   ./string/../sysdeps/x86_64/strcmp.S:1025
    0.00 :   27a78:  pmovmskb %xmm1,%edx
         : 901   ./string/../sysdeps/x86_64/strcmp.S:1026
    0.00 :   27a7c:  sub    $0xffff,%edx
         : 903   ./string/../sysdeps/x86_64/strcmp.S:1027
    0.00 :   27a82:  jne    28620 <strcmp+0x1400>
         : 905   ./string/../sysdeps/x86_64/strcmp.S:1034
    0.00 :   27a88:  add    $0x10,%rcx
         : 907   ./string/../sysdeps/x86_64/strcmp.S:1035
    0.00 :   27a8c:  movdqa %xmm4,%xmm3
         : 909   ./string/../sysdeps/x86_64/strcmp.S:1036
    0.00 :   27a90:  jmp    27a00 <strcmp+0x7e0>
    0.00 :   27a95:  data16 cs nopw 0x0(%rax,%rax,1)
         : 912   ./string/../sysdeps/x86_64/strcmp.S:1040
    0.00 :   27aa0:  pcmpeqb %xmm3,%xmm0
         : 914   ./string/../sysdeps/x86_64/strcmp.S:1041
    0.00 :   27aa4:  pmovmskb %xmm0,%edx
         : 916   ./string/../sysdeps/x86_64/strcmp.S:1042
    0.00 :   27aa8:  test   $0xffc0,%edx
         : 918   ./string/../sysdeps/x86_64/strcmp.S:1043
    0.00 :   27aae:  jne    27ac0 <strcmp+0x8a0>
         : 920   ./string/../sysdeps/x86_64/strcmp.S:1050
    0.00 :   27ab0:  pxor   %xmm0,%xmm0
         : 922   ./string/../sysdeps/x86_64/strcmp.S:1051
    0.00 :   27ab4:  sub    $0x1000,%r10
         : 924   ./string/../sysdeps/x86_64/strcmp.S:1052
    0.00 :   27abb:  jmp    27a0a <strcmp+0x7ea>
         : 926   ./string/../sysdeps/x86_64/strcmp.S:1056
    0.00 :   27ac0:  movdqa (%rsi,%rcx,1),%xmm1
         : 928   ./string/../sysdeps/x86_64/strcmp.S:1057
    0.00 :   27ac5:  psrldq $0x6,%xmm0
         : 930   ./string/../sysdeps/x86_64/strcmp.S:1058
    0.00 :   27aca:  psrldq $0x6,%xmm3
         : 932   ./string/../sysdeps/x86_64/strcmp.S:1059
    0.00 :   27acf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27ad4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27adf:  nop
         : 936   ./string/../sysdeps/x86_64/strcmp.S:1068
    0.00 :   27ae0:  pxor   %xmm0,%xmm0
         : 938   ./string/../sysdeps/x86_64/strcmp.S:1069
    0.00 :   27ae4:  movdqa (%rdi),%xmm2
         : 940   ./string/../sysdeps/x86_64/strcmp.S:1070
    0.00 :   27ae8:  movdqa (%rsi),%xmm1
         : 942   ./string/../sysdeps/x86_64/strcmp.S:1071
    0.00 :   27aec:  pcmpeqb %xmm1,%xmm0
         : 944   ./string/../sysdeps/x86_64/strcmp.S:1072
    0.00 :   27af0:  pslldq $0x9,%xmm2
         : 946   ./string/../sysdeps/x86_64/strcmp.S:1074
    0.00 :   27af5:  pcmpeqb %xmm1,%xmm2
         : 948   ./string/../sysdeps/x86_64/strcmp.S:1075
    0.00 :   27af9:  psubb  %xmm0,%xmm2
         : 950   ./string/../sysdeps/x86_64/strcmp.S:1076
    0.00 :   27afd:  pmovmskb %xmm2,%r9d
         : 952   ./string/../sysdeps/x86_64/strcmp.S:1077
    0.00 :   27b02:  shr    %cl,%edx
         : 954   ./string/../sysdeps/x86_64/strcmp.S:1078
    0.00 :   27b04:  shr    %cl,%r9d
         : 956   ./string/../sysdeps/x86_64/strcmp.S:1079
    0.00 :   27b07:  sub    %r9d,%edx
         : 958   ./string/../sysdeps/x86_64/strcmp.S:1080
    0.00 :   27b0a:  jne    28625 <strcmp+0x1405>
         : 960   ./string/../sysdeps/x86_64/strcmp.S:1081
    0.00 :   27b10:  movdqa (%rdi),%xmm3
         : 962   ./string/../sysdeps/x86_64/strcmp.S:1085
    0.00 :   27b14:  pxor   %xmm0,%xmm0
         : 964   ./string/../sysdeps/x86_64/strcmp.S:1086
    0.00 :   27b18:  mov    $0x10,%rcx
         : 966   ./string/../sysdeps/x86_64/strcmp.S:1087
    0.00 :   27b1f:  mov    $0x7,%r9d
         : 968   ./string/../sysdeps/x86_64/strcmp.S:1093
    0.00 :   27b25:  lea    0x7(%rdi),%r10
         : 970   ./string/../sysdeps/x86_64/strcmp.S:1094
    0.00 :   27b29:  and    $0xfff,%r10
         : 972   ./string/../sysdeps/x86_64/strcmp.S:1095
    0.00 :   27b30:  sub    $0x1000,%r10
    0.00 :   27b37:  nopw   0x0(%rax,%rax,1)
         : 975   ./string/../sysdeps/x86_64/strcmp.S:1099
    0.00 :   27b40:  add    $0x10,%r10
         : 977   ./string/../sysdeps/x86_64/strcmp.S:1100
    0.00 :   27b44:  jg     27be0 <strcmp+0x9c0>
         : 979   ./string/../sysdeps/x86_64/strcmp.S:1103
    0.00 :   27b4a:  movdqa (%rsi,%rcx,1),%xmm1
         : 981   ./string/../sysdeps/x86_64/strcmp.S:1104
    0.00 :   27b4f:  movdqa (%rdi,%rcx,1),%xmm2
         : 983   ./string/../sysdeps/x86_64/strcmp.S:1105
    0.00 :   27b54:  movdqa %xmm2,%xmm4
         : 985   ./string/../sysdeps/x86_64/strcmp.S:1108
    0.00 :   27b58:  psrldq $0x7,%xmm3
         : 987   ./string/../sysdeps/x86_64/strcmp.S:1109
    0.00 :   27b5d:  pslldq $0x9,%xmm2
         : 989   ./string/../sysdeps/x86_64/strcmp.S:1110
    0.00 :   27b62:  por    %xmm3,%xmm2
         : 991   ./string/../sysdeps/x86_64/strcmp.S:1116
    0.00 :   27b66:  pcmpeqb %xmm1,%xmm0
         : 993   ./string/../sysdeps/x86_64/strcmp.S:1117
    0.00 :   27b6a:  pcmpeqb %xmm2,%xmm1
         : 995   ./string/../sysdeps/x86_64/strcmp.S:1118
    0.00 :   27b6e:  psubb  %xmm0,%xmm1
         : 997   ./string/../sysdeps/x86_64/strcmp.S:1119
    0.00 :   27b72:  pmovmskb %xmm1,%edx
         : 999   ./string/../sysdeps/x86_64/strcmp.S:1120
    0.00 :   27b76:  sub    $0xffff,%edx
         : 1001  ./string/../sysdeps/x86_64/strcmp.S:1121
    0.00 :   27b7c:  jne    28620 <strcmp+0x1400>
         : 1003  ./string/../sysdeps/x86_64/strcmp.S:1128
    0.00 :   27b82:  add    $0x10,%rcx
         : 1005  ./string/../sysdeps/x86_64/strcmp.S:1129
    0.00 :   27b86:  movdqa %xmm4,%xmm3
         : 1007  ./string/../sysdeps/x86_64/strcmp.S:1131
    0.00 :   27b8a:  add    $0x10,%r10
         : 1009  ./string/../sysdeps/x86_64/strcmp.S:1132
    0.00 :   27b8e:  jg     27be0 <strcmp+0x9c0>
         : 1011  ./string/../sysdeps/x86_64/strcmp.S:1134
    0.00 :   27b90:  movdqa (%rsi,%rcx,1),%xmm1
         : 1013  ./string/../sysdeps/x86_64/strcmp.S:1135
    0.00 :   27b95:  movdqa (%rdi,%rcx,1),%xmm2
         : 1015  ./string/../sysdeps/x86_64/strcmp.S:1136
    0.00 :   27b9a:  movdqa %xmm2,%xmm4
         : 1017  ./string/../sysdeps/x86_64/strcmp.S:1139
    0.00 :   27b9e:  psrldq $0x7,%xmm3
         : 1019  ./string/../sysdeps/x86_64/strcmp.S:1140
    0.00 :   27ba3:  pslldq $0x9,%xmm2
         : 1021  ./string/../sysdeps/x86_64/strcmp.S:1141
    0.00 :   27ba8:  por    %xmm3,%xmm2
         : 1023  ./string/../sysdeps/x86_64/strcmp.S:1147
    0.00 :   27bac:  pcmpeqb %xmm1,%xmm0
         : 1025  ./string/../sysdeps/x86_64/strcmp.S:1148
    0.00 :   27bb0:  pcmpeqb %xmm2,%xmm1
         : 1027  ./string/../sysdeps/x86_64/strcmp.S:1149
    0.00 :   27bb4:  psubb  %xmm0,%xmm1
         : 1029  ./string/../sysdeps/x86_64/strcmp.S:1150
    0.00 :   27bb8:  pmovmskb %xmm1,%edx
         : 1031  ./string/../sysdeps/x86_64/strcmp.S:1151
    0.00 :   27bbc:  sub    $0xffff,%edx
         : 1033  ./string/../sysdeps/x86_64/strcmp.S:1152
    0.00 :   27bc2:  jne    28620 <strcmp+0x1400>
         : 1035  ./string/../sysdeps/x86_64/strcmp.S:1159
    0.00 :   27bc8:  add    $0x10,%rcx
         : 1037  ./string/../sysdeps/x86_64/strcmp.S:1160
    0.00 :   27bcc:  movdqa %xmm4,%xmm3
         : 1039  ./string/../sysdeps/x86_64/strcmp.S:1161
    0.00 :   27bd0:  jmp    27b40 <strcmp+0x920>
    0.00 :   27bd5:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1042  ./string/../sysdeps/x86_64/strcmp.S:1165
    0.00 :   27be0:  pcmpeqb %xmm3,%xmm0
         : 1044  ./string/../sysdeps/x86_64/strcmp.S:1166
    0.00 :   27be4:  pmovmskb %xmm0,%edx
         : 1046  ./string/../sysdeps/x86_64/strcmp.S:1167
    0.00 :   27be8:  test   $0xff80,%edx
         : 1048  ./string/../sysdeps/x86_64/strcmp.S:1168
    0.00 :   27bee:  jne    27c00 <strcmp+0x9e0>
         : 1050  ./string/../sysdeps/x86_64/strcmp.S:1175
    0.00 :   27bf0:  pxor   %xmm0,%xmm0
         : 1052  ./string/../sysdeps/x86_64/strcmp.S:1176
    0.00 :   27bf4:  sub    $0x1000,%r10
         : 1054  ./string/../sysdeps/x86_64/strcmp.S:1177
    0.00 :   27bfb:  jmp    27b4a <strcmp+0x92a>
         : 1056  ./string/../sysdeps/x86_64/strcmp.S:1181
    0.00 :   27c00:  movdqa (%rsi,%rcx,1),%xmm1
         : 1058  ./string/../sysdeps/x86_64/strcmp.S:1182
    0.00 :   27c05:  psrldq $0x7,%xmm0
         : 1060  ./string/../sysdeps/x86_64/strcmp.S:1183
    0.00 :   27c0a:  psrldq $0x7,%xmm3
         : 1062  ./string/../sysdeps/x86_64/strcmp.S:1184
    0.00 :   27c0f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27c14:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27c1f:  nop
         : 1066  ./string/../sysdeps/x86_64/strcmp.S:1193
    0.00 :   27c20:  pxor   %xmm0,%xmm0
         : 1068  ./string/../sysdeps/x86_64/strcmp.S:1194
    0.00 :   27c24:  movdqa (%rdi),%xmm2
         : 1070  ./string/../sysdeps/x86_64/strcmp.S:1195
    0.00 :   27c28:  movdqa (%rsi),%xmm1
         : 1072  ./string/../sysdeps/x86_64/strcmp.S:1196
    0.00 :   27c2c:  pcmpeqb %xmm1,%xmm0
         : 1074  ./string/../sysdeps/x86_64/strcmp.S:1197
    0.00 :   27c30:  pslldq $0x8,%xmm2
         : 1076  ./string/../sysdeps/x86_64/strcmp.S:1199
    0.00 :   27c35:  pcmpeqb %xmm1,%xmm2
         : 1078  ./string/../sysdeps/x86_64/strcmp.S:1200
    0.00 :   27c39:  psubb  %xmm0,%xmm2
         : 1080  ./string/../sysdeps/x86_64/strcmp.S:1201
    0.00 :   27c3d:  pmovmskb %xmm2,%r9d
         : 1082  ./string/../sysdeps/x86_64/strcmp.S:1202
    0.00 :   27c42:  shr    %cl,%edx
         : 1084  ./string/../sysdeps/x86_64/strcmp.S:1203
    0.00 :   27c44:  shr    %cl,%r9d
         : 1086  ./string/../sysdeps/x86_64/strcmp.S:1204
    0.00 :   27c47:  sub    %r9d,%edx
         : 1088  ./string/../sysdeps/x86_64/strcmp.S:1205
    0.00 :   27c4a:  jne    28625 <strcmp+0x1405>
         : 1090  ./string/../sysdeps/x86_64/strcmp.S:1206
    0.00 :   27c50:  movdqa (%rdi),%xmm3
         : 1092  ./string/../sysdeps/x86_64/strcmp.S:1210
    0.00 :   27c54:  pxor   %xmm0,%xmm0
         : 1094  ./string/../sysdeps/x86_64/strcmp.S:1211
    0.00 :   27c58:  mov    $0x10,%rcx
         : 1096  ./string/../sysdeps/x86_64/strcmp.S:1212
    0.00 :   27c5f:  mov    $0x8,%r9d
         : 1098  ./string/../sysdeps/x86_64/strcmp.S:1218
    0.00 :   27c65:  lea    0x8(%rdi),%r10
         : 1100  ./string/../sysdeps/x86_64/strcmp.S:1219
    0.00 :   27c69:  and    $0xfff,%r10
         : 1102  ./string/../sysdeps/x86_64/strcmp.S:1220
    0.00 :   27c70:  sub    $0x1000,%r10
    0.00 :   27c77:  nopw   0x0(%rax,%rax,1)
         : 1105  ./string/../sysdeps/x86_64/strcmp.S:1224
    0.00 :   27c80:  add    $0x10,%r10
         : 1107  ./string/../sysdeps/x86_64/strcmp.S:1225
    0.00 :   27c84:  jg     27d20 <strcmp+0xb00>
         : 1109  ./string/../sysdeps/x86_64/strcmp.S:1228
    0.00 :   27c8a:  movdqa (%rsi,%rcx,1),%xmm1
         : 1111  ./string/../sysdeps/x86_64/strcmp.S:1229
    0.00 :   27c8f:  movdqa (%rdi,%rcx,1),%xmm2
         : 1113  ./string/../sysdeps/x86_64/strcmp.S:1230
    0.00 :   27c94:  movdqa %xmm2,%xmm4
         : 1115  ./string/../sysdeps/x86_64/strcmp.S:1233
    0.00 :   27c98:  psrldq $0x8,%xmm3
         : 1117  ./string/../sysdeps/x86_64/strcmp.S:1234
    0.00 :   27c9d:  pslldq $0x8,%xmm2
         : 1119  ./string/../sysdeps/x86_64/strcmp.S:1235
    0.00 :   27ca2:  por    %xmm3,%xmm2
         : 1121  ./string/../sysdeps/x86_64/strcmp.S:1241
    0.00 :   27ca6:  pcmpeqb %xmm1,%xmm0
         : 1123  ./string/../sysdeps/x86_64/strcmp.S:1242
    0.00 :   27caa:  pcmpeqb %xmm2,%xmm1
         : 1125  ./string/../sysdeps/x86_64/strcmp.S:1243
    0.00 :   27cae:  psubb  %xmm0,%xmm1
         : 1127  ./string/../sysdeps/x86_64/strcmp.S:1244
    0.00 :   27cb2:  pmovmskb %xmm1,%edx
         : 1129  ./string/../sysdeps/x86_64/strcmp.S:1245
    0.00 :   27cb6:  sub    $0xffff,%edx
         : 1131  ./string/../sysdeps/x86_64/strcmp.S:1246
    0.00 :   27cbc:  jne    28620 <strcmp+0x1400>
         : 1133  ./string/../sysdeps/x86_64/strcmp.S:1253
    0.00 :   27cc2:  add    $0x10,%rcx
         : 1135  ./string/../sysdeps/x86_64/strcmp.S:1254
    0.00 :   27cc6:  movdqa %xmm4,%xmm3
         : 1137  ./string/../sysdeps/x86_64/strcmp.S:1256
    0.00 :   27cca:  add    $0x10,%r10
         : 1139  ./string/../sysdeps/x86_64/strcmp.S:1257
    0.00 :   27cce:  jg     27d20 <strcmp+0xb00>
         : 1141  ./string/../sysdeps/x86_64/strcmp.S:1259
    0.00 :   27cd0:  movdqa (%rsi,%rcx,1),%xmm1
         : 1143  ./string/../sysdeps/x86_64/strcmp.S:1260
    0.00 :   27cd5:  movdqa (%rdi,%rcx,1),%xmm2
         : 1145  ./string/../sysdeps/x86_64/strcmp.S:1261
    0.00 :   27cda:  movdqa %xmm2,%xmm4
         : 1147  ./string/../sysdeps/x86_64/strcmp.S:1264
    0.00 :   27cde:  psrldq $0x8,%xmm3
         : 1149  ./string/../sysdeps/x86_64/strcmp.S:1265
    0.00 :   27ce3:  pslldq $0x8,%xmm2
         : 1151  ./string/../sysdeps/x86_64/strcmp.S:1266
    0.00 :   27ce8:  por    %xmm3,%xmm2
         : 1153  ./string/../sysdeps/x86_64/strcmp.S:1272
    0.00 :   27cec:  pcmpeqb %xmm1,%xmm0
         : 1155  ./string/../sysdeps/x86_64/strcmp.S:1273
    0.00 :   27cf0:  pcmpeqb %xmm2,%xmm1
         : 1157  ./string/../sysdeps/x86_64/strcmp.S:1274
    0.00 :   27cf4:  psubb  %xmm0,%xmm1
         : 1159  ./string/../sysdeps/x86_64/strcmp.S:1275
    0.00 :   27cf8:  pmovmskb %xmm1,%edx
         : 1161  ./string/../sysdeps/x86_64/strcmp.S:1276
    0.00 :   27cfc:  sub    $0xffff,%edx
         : 1163  ./string/../sysdeps/x86_64/strcmp.S:1277
    0.00 :   27d02:  jne    28620 <strcmp+0x1400>
         : 1165  ./string/../sysdeps/x86_64/strcmp.S:1284
    0.00 :   27d08:  add    $0x10,%rcx
         : 1167  ./string/../sysdeps/x86_64/strcmp.S:1285
    0.00 :   27d0c:  movdqa %xmm4,%xmm3
         : 1169  ./string/../sysdeps/x86_64/strcmp.S:1286
    0.00 :   27d10:  jmp    27c80 <strcmp+0xa60>
    0.00 :   27d15:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1172  ./string/../sysdeps/x86_64/strcmp.S:1290
    0.00 :   27d20:  pcmpeqb %xmm3,%xmm0
         : 1174  ./string/../sysdeps/x86_64/strcmp.S:1291
    0.00 :   27d24:  pmovmskb %xmm0,%edx
         : 1176  ./string/../sysdeps/x86_64/strcmp.S:1292
    0.00 :   27d28:  test   $0xff00,%edx
         : 1178  ./string/../sysdeps/x86_64/strcmp.S:1293
    0.00 :   27d2e:  jne    27d40 <strcmp+0xb20>
         : 1180  ./string/../sysdeps/x86_64/strcmp.S:1300
    0.00 :   27d30:  pxor   %xmm0,%xmm0
         : 1182  ./string/../sysdeps/x86_64/strcmp.S:1301
    0.00 :   27d34:  sub    $0x1000,%r10
         : 1184  ./string/../sysdeps/x86_64/strcmp.S:1302
    0.00 :   27d3b:  jmp    27c8a <strcmp+0xa6a>
         : 1186  ./string/../sysdeps/x86_64/strcmp.S:1306
    0.00 :   27d40:  movdqa (%rsi,%rcx,1),%xmm1
         : 1188  ./string/../sysdeps/x86_64/strcmp.S:1307
    0.00 :   27d45:  psrldq $0x8,%xmm0
         : 1190  ./string/../sysdeps/x86_64/strcmp.S:1308
    0.00 :   27d4a:  psrldq $0x8,%xmm3
         : 1192  ./string/../sysdeps/x86_64/strcmp.S:1309
    0.00 :   27d4f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27d54:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27d5f:  nop
         : 1196  ./string/../sysdeps/x86_64/strcmp.S:1318
    0.00 :   27d60:  pxor   %xmm0,%xmm0
         : 1198  ./string/../sysdeps/x86_64/strcmp.S:1319
    0.00 :   27d64:  movdqa (%rdi),%xmm2
         : 1200  ./string/../sysdeps/x86_64/strcmp.S:1320
    0.00 :   27d68:  movdqa (%rsi),%xmm1
         : 1202  ./string/../sysdeps/x86_64/strcmp.S:1321
    0.00 :   27d6c:  pcmpeqb %xmm1,%xmm0
         : 1204  ./string/../sysdeps/x86_64/strcmp.S:1322
    0.00 :   27d70:  pslldq $0x7,%xmm2
         : 1206  ./string/../sysdeps/x86_64/strcmp.S:1324
    0.00 :   27d75:  pcmpeqb %xmm1,%xmm2
         : 1208  ./string/../sysdeps/x86_64/strcmp.S:1325
    0.00 :   27d79:  psubb  %xmm0,%xmm2
         : 1210  ./string/../sysdeps/x86_64/strcmp.S:1326
    0.00 :   27d7d:  pmovmskb %xmm2,%r9d
         : 1212  ./string/../sysdeps/x86_64/strcmp.S:1327
    0.00 :   27d82:  shr    %cl,%edx
         : 1214  ./string/../sysdeps/x86_64/strcmp.S:1328
    0.00 :   27d84:  shr    %cl,%r9d
         : 1216  ./string/../sysdeps/x86_64/strcmp.S:1329
    0.00 :   27d87:  sub    %r9d,%edx
         : 1218  ./string/../sysdeps/x86_64/strcmp.S:1330
    0.00 :   27d8a:  jne    28625 <strcmp+0x1405>
         : 1220  ./string/../sysdeps/x86_64/strcmp.S:1331
    0.00 :   27d90:  movdqa (%rdi),%xmm3
         : 1222  ./string/../sysdeps/x86_64/strcmp.S:1335
    0.00 :   27d94:  pxor   %xmm0,%xmm0
         : 1224  ./string/../sysdeps/x86_64/strcmp.S:1336
    0.00 :   27d98:  mov    $0x10,%rcx
         : 1226  ./string/../sysdeps/x86_64/strcmp.S:1337
    0.00 :   27d9f:  mov    $0x9,%r9d
         : 1228  ./string/../sysdeps/x86_64/strcmp.S:1343
    0.00 :   27da5:  lea    0x9(%rdi),%r10
         : 1230  ./string/../sysdeps/x86_64/strcmp.S:1344
    0.00 :   27da9:  and    $0xfff,%r10
         : 1232  ./string/../sysdeps/x86_64/strcmp.S:1345
    0.00 :   27db0:  sub    $0x1000,%r10
    0.00 :   27db7:  nopw   0x0(%rax,%rax,1)
         : 1235  ./string/../sysdeps/x86_64/strcmp.S:1349
    0.00 :   27dc0:  add    $0x10,%r10
         : 1237  ./string/../sysdeps/x86_64/strcmp.S:1350
    0.00 :   27dc4:  jg     27e60 <strcmp+0xc40>
         : 1239  ./string/../sysdeps/x86_64/strcmp.S:1353
    0.00 :   27dca:  movdqa (%rsi,%rcx,1),%xmm1
         : 1241  ./string/../sysdeps/x86_64/strcmp.S:1354
    0.00 :   27dcf:  movdqa (%rdi,%rcx,1),%xmm2
         : 1243  ./string/../sysdeps/x86_64/strcmp.S:1355
    0.00 :   27dd4:  movdqa %xmm2,%xmm4
         : 1245  ./string/../sysdeps/x86_64/strcmp.S:1358
    0.00 :   27dd8:  psrldq $0x9,%xmm3
         : 1247  ./string/../sysdeps/x86_64/strcmp.S:1359
    0.00 :   27ddd:  pslldq $0x7,%xmm2
         : 1249  ./string/../sysdeps/x86_64/strcmp.S:1360
    0.00 :   27de2:  por    %xmm3,%xmm2
         : 1251  ./string/../sysdeps/x86_64/strcmp.S:1366
    0.00 :   27de6:  pcmpeqb %xmm1,%xmm0
         : 1253  ./string/../sysdeps/x86_64/strcmp.S:1367
    0.00 :   27dea:  pcmpeqb %xmm2,%xmm1
         : 1255  ./string/../sysdeps/x86_64/strcmp.S:1368
    0.00 :   27dee:  psubb  %xmm0,%xmm1
         : 1257  ./string/../sysdeps/x86_64/strcmp.S:1369
    0.00 :   27df2:  pmovmskb %xmm1,%edx
         : 1259  ./string/../sysdeps/x86_64/strcmp.S:1370
    0.00 :   27df6:  sub    $0xffff,%edx
         : 1261  ./string/../sysdeps/x86_64/strcmp.S:1371
    0.00 :   27dfc:  jne    28620 <strcmp+0x1400>
         : 1263  ./string/../sysdeps/x86_64/strcmp.S:1378
    0.00 :   27e02:  add    $0x10,%rcx
         : 1265  ./string/../sysdeps/x86_64/strcmp.S:1379
    0.00 :   27e06:  movdqa %xmm4,%xmm3
         : 1267  ./string/../sysdeps/x86_64/strcmp.S:1381
    0.00 :   27e0a:  add    $0x10,%r10
         : 1269  ./string/../sysdeps/x86_64/strcmp.S:1382
    0.00 :   27e0e:  jg     27e60 <strcmp+0xc40>
         : 1271  ./string/../sysdeps/x86_64/strcmp.S:1384
    0.00 :   27e10:  movdqa (%rsi,%rcx,1),%xmm1
         : 1273  ./string/../sysdeps/x86_64/strcmp.S:1385
    0.00 :   27e15:  movdqa (%rdi,%rcx,1),%xmm2
         : 1275  ./string/../sysdeps/x86_64/strcmp.S:1386
    0.00 :   27e1a:  movdqa %xmm2,%xmm4
         : 1277  ./string/../sysdeps/x86_64/strcmp.S:1389
    0.00 :   27e1e:  psrldq $0x9,%xmm3
         : 1279  ./string/../sysdeps/x86_64/strcmp.S:1390
    0.00 :   27e23:  pslldq $0x7,%xmm2
         : 1281  ./string/../sysdeps/x86_64/strcmp.S:1391
    0.00 :   27e28:  por    %xmm3,%xmm2
         : 1283  ./string/../sysdeps/x86_64/strcmp.S:1397
    0.00 :   27e2c:  pcmpeqb %xmm1,%xmm0
         : 1285  ./string/../sysdeps/x86_64/strcmp.S:1398
    0.00 :   27e30:  pcmpeqb %xmm2,%xmm1
         : 1287  ./string/../sysdeps/x86_64/strcmp.S:1399
    0.00 :   27e34:  psubb  %xmm0,%xmm1
         : 1289  ./string/../sysdeps/x86_64/strcmp.S:1400
    0.00 :   27e38:  pmovmskb %xmm1,%edx
         : 1291  ./string/../sysdeps/x86_64/strcmp.S:1401
    0.00 :   27e3c:  sub    $0xffff,%edx
         : 1293  ./string/../sysdeps/x86_64/strcmp.S:1402
    0.00 :   27e42:  jne    28620 <strcmp+0x1400>
         : 1295  ./string/../sysdeps/x86_64/strcmp.S:1409
    0.00 :   27e48:  add    $0x10,%rcx
         : 1297  ./string/../sysdeps/x86_64/strcmp.S:1410
    0.00 :   27e4c:  movdqa %xmm4,%xmm3
         : 1299  ./string/../sysdeps/x86_64/strcmp.S:1411
    0.00 :   27e50:  jmp    27dc0 <strcmp+0xba0>
    0.00 :   27e55:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1302  ./string/../sysdeps/x86_64/strcmp.S:1415
    0.00 :   27e60:  pcmpeqb %xmm3,%xmm0
         : 1304  ./string/../sysdeps/x86_64/strcmp.S:1416
    0.00 :   27e64:  pmovmskb %xmm0,%edx
         : 1306  ./string/../sysdeps/x86_64/strcmp.S:1417
    0.00 :   27e68:  test   $0xfe00,%edx
         : 1308  ./string/../sysdeps/x86_64/strcmp.S:1418
    0.00 :   27e6e:  jne    27e80 <strcmp+0xc60>
         : 1310  ./string/../sysdeps/x86_64/strcmp.S:1425
    0.00 :   27e70:  pxor   %xmm0,%xmm0
         : 1312  ./string/../sysdeps/x86_64/strcmp.S:1426
    0.00 :   27e74:  sub    $0x1000,%r10
         : 1314  ./string/../sysdeps/x86_64/strcmp.S:1427
    0.00 :   27e7b:  jmp    27dca <strcmp+0xbaa>
         : 1316  ./string/../sysdeps/x86_64/strcmp.S:1431
    0.00 :   27e80:  movdqa (%rsi,%rcx,1),%xmm1
         : 1318  ./string/../sysdeps/x86_64/strcmp.S:1432
    0.00 :   27e85:  psrldq $0x9,%xmm0
         : 1320  ./string/../sysdeps/x86_64/strcmp.S:1433
    0.00 :   27e8a:  psrldq $0x9,%xmm3
         : 1322  ./string/../sysdeps/x86_64/strcmp.S:1434
    0.00 :   27e8f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27e94:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27e9f:  nop
         : 1326  ./string/../sysdeps/x86_64/strcmp.S:1443
    0.00 :   27ea0:  pxor   %xmm0,%xmm0
         : 1328  ./string/../sysdeps/x86_64/strcmp.S:1444
    0.00 :   27ea4:  movdqa (%rdi),%xmm2
         : 1330  ./string/../sysdeps/x86_64/strcmp.S:1445
    0.00 :   27ea8:  movdqa (%rsi),%xmm1
         : 1332  ./string/../sysdeps/x86_64/strcmp.S:1446
    0.00 :   27eac:  pcmpeqb %xmm1,%xmm0
         : 1334  ./string/../sysdeps/x86_64/strcmp.S:1447
    0.00 :   27eb0:  pslldq $0x6,%xmm2
         : 1336  ./string/../sysdeps/x86_64/strcmp.S:1449
    0.00 :   27eb5:  pcmpeqb %xmm1,%xmm2
         : 1338  ./string/../sysdeps/x86_64/strcmp.S:1450
    0.00 :   27eb9:  psubb  %xmm0,%xmm2
         : 1340  ./string/../sysdeps/x86_64/strcmp.S:1451
    0.00 :   27ebd:  pmovmskb %xmm2,%r9d
         : 1342  ./string/../sysdeps/x86_64/strcmp.S:1452
    0.00 :   27ec2:  shr    %cl,%edx
         : 1344  ./string/../sysdeps/x86_64/strcmp.S:1453
    0.00 :   27ec4:  shr    %cl,%r9d
         : 1346  ./string/../sysdeps/x86_64/strcmp.S:1454
    0.00 :   27ec7:  sub    %r9d,%edx
         : 1348  ./string/../sysdeps/x86_64/strcmp.S:1455
    0.00 :   27eca:  jne    28625 <strcmp+0x1405>
         : 1350  ./string/../sysdeps/x86_64/strcmp.S:1456
    0.00 :   27ed0:  movdqa (%rdi),%xmm3
         : 1352  ./string/../sysdeps/x86_64/strcmp.S:1460
    0.00 :   27ed4:  pxor   %xmm0,%xmm0
         : 1354  ./string/../sysdeps/x86_64/strcmp.S:1461
    0.00 :   27ed8:  mov    $0x10,%rcx
         : 1356  ./string/../sysdeps/x86_64/strcmp.S:1462
    0.00 :   27edf:  mov    $0xa,%r9d
         : 1358  ./string/../sysdeps/x86_64/strcmp.S:1468
    0.00 :   27ee5:  lea    0xa(%rdi),%r10
         : 1360  ./string/../sysdeps/x86_64/strcmp.S:1469
    0.00 :   27ee9:  and    $0xfff,%r10
         : 1362  ./string/../sysdeps/x86_64/strcmp.S:1470
    0.00 :   27ef0:  sub    $0x1000,%r10
    0.00 :   27ef7:  nopw   0x0(%rax,%rax,1)
         : 1365  ./string/../sysdeps/x86_64/strcmp.S:1474
    0.00 :   27f00:  add    $0x10,%r10
         : 1367  ./string/../sysdeps/x86_64/strcmp.S:1475
    0.00 :   27f04:  jg     27fa0 <strcmp+0xd80>
         : 1369  ./string/../sysdeps/x86_64/strcmp.S:1478
    0.00 :   27f0a:  movdqa (%rsi,%rcx,1),%xmm1
         : 1371  ./string/../sysdeps/x86_64/strcmp.S:1479
    0.00 :   27f0f:  movdqa (%rdi,%rcx,1),%xmm2
         : 1373  ./string/../sysdeps/x86_64/strcmp.S:1480
    0.00 :   27f14:  movdqa %xmm2,%xmm4
         : 1375  ./string/../sysdeps/x86_64/strcmp.S:1483
    0.00 :   27f18:  psrldq $0xa,%xmm3
         : 1377  ./string/../sysdeps/x86_64/strcmp.S:1484
    0.00 :   27f1d:  pslldq $0x6,%xmm2
         : 1379  ./string/../sysdeps/x86_64/strcmp.S:1485
    0.00 :   27f22:  por    %xmm3,%xmm2
         : 1381  ./string/../sysdeps/x86_64/strcmp.S:1491
    0.00 :   27f26:  pcmpeqb %xmm1,%xmm0
         : 1383  ./string/../sysdeps/x86_64/strcmp.S:1492
    0.00 :   27f2a:  pcmpeqb %xmm2,%xmm1
         : 1385  ./string/../sysdeps/x86_64/strcmp.S:1493
    0.00 :   27f2e:  psubb  %xmm0,%xmm1
         : 1387  ./string/../sysdeps/x86_64/strcmp.S:1494
    0.00 :   27f32:  pmovmskb %xmm1,%edx
         : 1389  ./string/../sysdeps/x86_64/strcmp.S:1495
    0.00 :   27f36:  sub    $0xffff,%edx
         : 1391  ./string/../sysdeps/x86_64/strcmp.S:1496
    0.00 :   27f3c:  jne    28620 <strcmp+0x1400>
         : 1393  ./string/../sysdeps/x86_64/strcmp.S:1503
    0.00 :   27f42:  add    $0x10,%rcx
         : 1395  ./string/../sysdeps/x86_64/strcmp.S:1504
    0.00 :   27f46:  movdqa %xmm4,%xmm3
         : 1397  ./string/../sysdeps/x86_64/strcmp.S:1506
    0.00 :   27f4a:  add    $0x10,%r10
         : 1399  ./string/../sysdeps/x86_64/strcmp.S:1507
    0.00 :   27f4e:  jg     27fa0 <strcmp+0xd80>
         : 1401  ./string/../sysdeps/x86_64/strcmp.S:1509
    0.00 :   27f50:  movdqa (%rsi,%rcx,1),%xmm1
         : 1403  ./string/../sysdeps/x86_64/strcmp.S:1510
    0.00 :   27f55:  movdqa (%rdi,%rcx,1),%xmm2
         : 1405  ./string/../sysdeps/x86_64/strcmp.S:1511
    0.00 :   27f5a:  movdqa %xmm2,%xmm4
         : 1407  ./string/../sysdeps/x86_64/strcmp.S:1514
    0.00 :   27f5e:  psrldq $0xa,%xmm3
         : 1409  ./string/../sysdeps/x86_64/strcmp.S:1515
    0.00 :   27f63:  pslldq $0x6,%xmm2
         : 1411  ./string/../sysdeps/x86_64/strcmp.S:1516
    0.00 :   27f68:  por    %xmm3,%xmm2
         : 1413  ./string/../sysdeps/x86_64/strcmp.S:1522
    0.00 :   27f6c:  pcmpeqb %xmm1,%xmm0
         : 1415  ./string/../sysdeps/x86_64/strcmp.S:1523
    0.00 :   27f70:  pcmpeqb %xmm2,%xmm1
         : 1417  ./string/../sysdeps/x86_64/strcmp.S:1524
    0.00 :   27f74:  psubb  %xmm0,%xmm1
         : 1419  ./string/../sysdeps/x86_64/strcmp.S:1525
    0.00 :   27f78:  pmovmskb %xmm1,%edx
         : 1421  ./string/../sysdeps/x86_64/strcmp.S:1526
    0.00 :   27f7c:  sub    $0xffff,%edx
         : 1423  ./string/../sysdeps/x86_64/strcmp.S:1527
    0.00 :   27f82:  jne    28620 <strcmp+0x1400>
         : 1425  ./string/../sysdeps/x86_64/strcmp.S:1534
    0.00 :   27f88:  add    $0x10,%rcx
         : 1427  ./string/../sysdeps/x86_64/strcmp.S:1535
    0.00 :   27f8c:  movdqa %xmm4,%xmm3
         : 1429  ./string/../sysdeps/x86_64/strcmp.S:1536
    0.00 :   27f90:  jmp    27f00 <strcmp+0xce0>
    0.00 :   27f95:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1432  ./string/../sysdeps/x86_64/strcmp.S:1540
    0.00 :   27fa0:  pcmpeqb %xmm3,%xmm0
         : 1434  ./string/../sysdeps/x86_64/strcmp.S:1541
    0.00 :   27fa4:  pmovmskb %xmm0,%edx
         : 1436  ./string/../sysdeps/x86_64/strcmp.S:1542
    0.00 :   27fa8:  test   $0xfc00,%edx
         : 1438  ./string/../sysdeps/x86_64/strcmp.S:1543
    0.00 :   27fae:  jne    27fc0 <strcmp+0xda0>
         : 1440  ./string/../sysdeps/x86_64/strcmp.S:1550
    0.00 :   27fb0:  pxor   %xmm0,%xmm0
         : 1442  ./string/../sysdeps/x86_64/strcmp.S:1551
    0.00 :   27fb4:  sub    $0x1000,%r10
         : 1444  ./string/../sysdeps/x86_64/strcmp.S:1552
    0.00 :   27fbb:  jmp    27f0a <strcmp+0xcea>
         : 1446  ./string/../sysdeps/x86_64/strcmp.S:1556
    0.00 :   27fc0:  movdqa (%rsi,%rcx,1),%xmm1
         : 1448  ./string/../sysdeps/x86_64/strcmp.S:1557
    0.00 :   27fc5:  psrldq $0xa,%xmm0
         : 1450  ./string/../sysdeps/x86_64/strcmp.S:1558
    0.00 :   27fca:  psrldq $0xa,%xmm3
         : 1452  ./string/../sysdeps/x86_64/strcmp.S:1559
    0.00 :   27fcf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   27fd4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   27fdf:  nop
         : 1456  ./string/../sysdeps/x86_64/strcmp.S:1568
    0.00 :   27fe0:  pxor   %xmm0,%xmm0
         : 1458  ./string/../sysdeps/x86_64/strcmp.S:1569
    0.00 :   27fe4:  movdqa (%rdi),%xmm2
         : 1460  ./string/../sysdeps/x86_64/strcmp.S:1570
    0.00 :   27fe8:  movdqa (%rsi),%xmm1
         : 1462  ./string/../sysdeps/x86_64/strcmp.S:1571
    0.00 :   27fec:  pcmpeqb %xmm1,%xmm0
         : 1464  ./string/../sysdeps/x86_64/strcmp.S:1572
    0.00 :   27ff0:  pslldq $0x5,%xmm2
         : 1466  ./string/../sysdeps/x86_64/strcmp.S:1574
    0.00 :   27ff5:  pcmpeqb %xmm1,%xmm2
         : 1468  ./string/../sysdeps/x86_64/strcmp.S:1575
    0.00 :   27ff9:  psubb  %xmm0,%xmm2
         : 1470  ./string/../sysdeps/x86_64/strcmp.S:1576
    0.00 :   27ffd:  pmovmskb %xmm2,%r9d
         : 1472  ./string/../sysdeps/x86_64/strcmp.S:1577
    0.00 :   28002:  shr    %cl,%edx
         : 1474  ./string/../sysdeps/x86_64/strcmp.S:1578
    0.00 :   28004:  shr    %cl,%r9d
         : 1476  ./string/../sysdeps/x86_64/strcmp.S:1579
    0.00 :   28007:  sub    %r9d,%edx
         : 1478  ./string/../sysdeps/x86_64/strcmp.S:1580
    0.00 :   2800a:  jne    28625 <strcmp+0x1405>
         : 1480  ./string/../sysdeps/x86_64/strcmp.S:1581
    0.00 :   28010:  movdqa (%rdi),%xmm3
         : 1482  ./string/../sysdeps/x86_64/strcmp.S:1585
    0.00 :   28014:  pxor   %xmm0,%xmm0
         : 1484  ./string/../sysdeps/x86_64/strcmp.S:1586
    0.00 :   28018:  mov    $0x10,%rcx
         : 1486  ./string/../sysdeps/x86_64/strcmp.S:1587
    0.00 :   2801f:  mov    $0xb,%r9d
         : 1488  ./string/../sysdeps/x86_64/strcmp.S:1593
    0.00 :   28025:  lea    0xb(%rdi),%r10
         : 1490  ./string/../sysdeps/x86_64/strcmp.S:1594
    0.00 :   28029:  and    $0xfff,%r10
         : 1492  ./string/../sysdeps/x86_64/strcmp.S:1595
    0.00 :   28030:  sub    $0x1000,%r10
    0.00 :   28037:  nopw   0x0(%rax,%rax,1)
         : 1495  ./string/../sysdeps/x86_64/strcmp.S:1599
    0.00 :   28040:  add    $0x10,%r10
         : 1497  ./string/../sysdeps/x86_64/strcmp.S:1600
    0.00 :   28044:  jg     280e0 <strcmp+0xec0>
         : 1499  ./string/../sysdeps/x86_64/strcmp.S:1603
    0.00 :   2804a:  movdqa (%rsi,%rcx,1),%xmm1
         : 1501  ./string/../sysdeps/x86_64/strcmp.S:1604
    0.00 :   2804f:  movdqa (%rdi,%rcx,1),%xmm2
         : 1503  ./string/../sysdeps/x86_64/strcmp.S:1605
    0.00 :   28054:  movdqa %xmm2,%xmm4
         : 1505  ./string/../sysdeps/x86_64/strcmp.S:1608
    0.00 :   28058:  psrldq $0xb,%xmm3
         : 1507  ./string/../sysdeps/x86_64/strcmp.S:1609
    0.00 :   2805d:  pslldq $0x5,%xmm2
         : 1509  ./string/../sysdeps/x86_64/strcmp.S:1610
    0.00 :   28062:  por    %xmm3,%xmm2
         : 1511  ./string/../sysdeps/x86_64/strcmp.S:1616
    0.00 :   28066:  pcmpeqb %xmm1,%xmm0
         : 1513  ./string/../sysdeps/x86_64/strcmp.S:1617
    0.00 :   2806a:  pcmpeqb %xmm2,%xmm1
         : 1515  ./string/../sysdeps/x86_64/strcmp.S:1618
    0.00 :   2806e:  psubb  %xmm0,%xmm1
         : 1517  ./string/../sysdeps/x86_64/strcmp.S:1619
    0.00 :   28072:  pmovmskb %xmm1,%edx
         : 1519  ./string/../sysdeps/x86_64/strcmp.S:1620
    0.00 :   28076:  sub    $0xffff,%edx
         : 1521  ./string/../sysdeps/x86_64/strcmp.S:1621
    0.00 :   2807c:  jne    28620 <strcmp+0x1400>
         : 1523  ./string/../sysdeps/x86_64/strcmp.S:1628
    0.00 :   28082:  add    $0x10,%rcx
         : 1525  ./string/../sysdeps/x86_64/strcmp.S:1629
    0.00 :   28086:  movdqa %xmm4,%xmm3
         : 1527  ./string/../sysdeps/x86_64/strcmp.S:1631
    0.00 :   2808a:  add    $0x10,%r10
         : 1529  ./string/../sysdeps/x86_64/strcmp.S:1632
    0.00 :   2808e:  jg     280e0 <strcmp+0xec0>
         : 1531  ./string/../sysdeps/x86_64/strcmp.S:1634
    0.00 :   28090:  movdqa (%rsi,%rcx,1),%xmm1
         : 1533  ./string/../sysdeps/x86_64/strcmp.S:1635
    0.00 :   28095:  movdqa (%rdi,%rcx,1),%xmm2
         : 1535  ./string/../sysdeps/x86_64/strcmp.S:1636
    0.00 :   2809a:  movdqa %xmm2,%xmm4
         : 1537  ./string/../sysdeps/x86_64/strcmp.S:1639
    0.00 :   2809e:  psrldq $0xb,%xmm3
         : 1539  ./string/../sysdeps/x86_64/strcmp.S:1640
    0.00 :   280a3:  pslldq $0x5,%xmm2
         : 1541  ./string/../sysdeps/x86_64/strcmp.S:1641
    0.00 :   280a8:  por    %xmm3,%xmm2
         : 1543  ./string/../sysdeps/x86_64/strcmp.S:1647
    0.00 :   280ac:  pcmpeqb %xmm1,%xmm0
         : 1545  ./string/../sysdeps/x86_64/strcmp.S:1648
    0.00 :   280b0:  pcmpeqb %xmm2,%xmm1
         : 1547  ./string/../sysdeps/x86_64/strcmp.S:1649
    0.00 :   280b4:  psubb  %xmm0,%xmm1
         : 1549  ./string/../sysdeps/x86_64/strcmp.S:1650
    0.00 :   280b8:  pmovmskb %xmm1,%edx
         : 1551  ./string/../sysdeps/x86_64/strcmp.S:1651
    0.00 :   280bc:  sub    $0xffff,%edx
         : 1553  ./string/../sysdeps/x86_64/strcmp.S:1652
    0.00 :   280c2:  jne    28620 <strcmp+0x1400>
         : 1555  ./string/../sysdeps/x86_64/strcmp.S:1659
    0.00 :   280c8:  add    $0x10,%rcx
         : 1557  ./string/../sysdeps/x86_64/strcmp.S:1660
    0.00 :   280cc:  movdqa %xmm4,%xmm3
         : 1559  ./string/../sysdeps/x86_64/strcmp.S:1661
    0.00 :   280d0:  jmp    28040 <strcmp+0xe20>
    0.00 :   280d5:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1562  ./string/../sysdeps/x86_64/strcmp.S:1665
    0.00 :   280e0:  pcmpeqb %xmm3,%xmm0
         : 1564  ./string/../sysdeps/x86_64/strcmp.S:1666
    0.00 :   280e4:  pmovmskb %xmm0,%edx
         : 1566  ./string/../sysdeps/x86_64/strcmp.S:1667
    0.00 :   280e8:  test   $0xf800,%edx
         : 1568  ./string/../sysdeps/x86_64/strcmp.S:1668
    0.00 :   280ee:  jne    28100 <strcmp+0xee0>
         : 1570  ./string/../sysdeps/x86_64/strcmp.S:1675
    0.00 :   280f0:  pxor   %xmm0,%xmm0
         : 1572  ./string/../sysdeps/x86_64/strcmp.S:1676
    0.00 :   280f4:  sub    $0x1000,%r10
         : 1574  ./string/../sysdeps/x86_64/strcmp.S:1677
    0.00 :   280fb:  jmp    2804a <strcmp+0xe2a>
         : 1576  ./string/../sysdeps/x86_64/strcmp.S:1681
    0.00 :   28100:  movdqa (%rsi,%rcx,1),%xmm1
         : 1578  ./string/../sysdeps/x86_64/strcmp.S:1682
    0.00 :   28105:  psrldq $0xb,%xmm0
         : 1580  ./string/../sysdeps/x86_64/strcmp.S:1683
    0.00 :   2810a:  psrldq $0xb,%xmm3
         : 1582  ./string/../sysdeps/x86_64/strcmp.S:1684
    0.00 :   2810f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28114:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2811f:  nop
         : 1586  ./string/../sysdeps/x86_64/strcmp.S:1693
    0.00 :   28120:  pxor   %xmm0,%xmm0
         : 1588  ./string/../sysdeps/x86_64/strcmp.S:1694
    0.00 :   28124:  movdqa (%rdi),%xmm2
         : 1590  ./string/../sysdeps/x86_64/strcmp.S:1695
    0.00 :   28128:  movdqa (%rsi),%xmm1
         : 1592  ./string/../sysdeps/x86_64/strcmp.S:1696
    0.00 :   2812c:  pcmpeqb %xmm1,%xmm0
         : 1594  ./string/../sysdeps/x86_64/strcmp.S:1697
    0.00 :   28130:  pslldq $0x4,%xmm2
         : 1596  ./string/../sysdeps/x86_64/strcmp.S:1699
    0.00 :   28135:  pcmpeqb %xmm1,%xmm2
         : 1598  ./string/../sysdeps/x86_64/strcmp.S:1700
    0.00 :   28139:  psubb  %xmm0,%xmm2
         : 1600  ./string/../sysdeps/x86_64/strcmp.S:1701
    0.00 :   2813d:  pmovmskb %xmm2,%r9d
         : 1602  ./string/../sysdeps/x86_64/strcmp.S:1702
    0.00 :   28142:  shr    %cl,%edx
         : 1604  ./string/../sysdeps/x86_64/strcmp.S:1703
    0.00 :   28144:  shr    %cl,%r9d
         : 1606  ./string/../sysdeps/x86_64/strcmp.S:1704
    0.00 :   28147:  sub    %r9d,%edx
         : 1608  ./string/../sysdeps/x86_64/strcmp.S:1705
    0.00 :   2814a:  jne    28625 <strcmp+0x1405>
         : 1610  ./string/../sysdeps/x86_64/strcmp.S:1706
    0.00 :   28150:  movdqa (%rdi),%xmm3
         : 1612  ./string/../sysdeps/x86_64/strcmp.S:1710
    0.00 :   28154:  pxor   %xmm0,%xmm0
         : 1614  ./string/../sysdeps/x86_64/strcmp.S:1711
    0.00 :   28158:  mov    $0x10,%rcx
         : 1616  ./string/../sysdeps/x86_64/strcmp.S:1712
    0.00 :   2815f:  mov    $0xc,%r9d
         : 1618  ./string/../sysdeps/x86_64/strcmp.S:1718
    0.00 :   28165:  lea    0xc(%rdi),%r10
         : 1620  ./string/../sysdeps/x86_64/strcmp.S:1719
    0.00 :   28169:  and    $0xfff,%r10
         : 1622  ./string/../sysdeps/x86_64/strcmp.S:1720
    0.00 :   28170:  sub    $0x1000,%r10
    0.00 :   28177:  nopw   0x0(%rax,%rax,1)
         : 1625  ./string/../sysdeps/x86_64/strcmp.S:1724
    0.00 :   28180:  add    $0x10,%r10
         : 1627  ./string/../sysdeps/x86_64/strcmp.S:1725
    0.00 :   28184:  jg     28220 <strcmp+0x1000>
         : 1629  ./string/../sysdeps/x86_64/strcmp.S:1728
    0.00 :   2818a:  movdqa (%rsi,%rcx,1),%xmm1
         : 1631  ./string/../sysdeps/x86_64/strcmp.S:1729
    0.00 :   2818f:  movdqa (%rdi,%rcx,1),%xmm2
         : 1633  ./string/../sysdeps/x86_64/strcmp.S:1730
    0.00 :   28194:  movdqa %xmm2,%xmm4
         : 1635  ./string/../sysdeps/x86_64/strcmp.S:1733
    0.00 :   28198:  psrldq $0xc,%xmm3
         : 1637  ./string/../sysdeps/x86_64/strcmp.S:1734
    0.00 :   2819d:  pslldq $0x4,%xmm2
         : 1639  ./string/../sysdeps/x86_64/strcmp.S:1735
    0.00 :   281a2:  por    %xmm3,%xmm2
         : 1641  ./string/../sysdeps/x86_64/strcmp.S:1741
    0.00 :   281a6:  pcmpeqb %xmm1,%xmm0
         : 1643  ./string/../sysdeps/x86_64/strcmp.S:1742
    0.00 :   281aa:  pcmpeqb %xmm2,%xmm1
         : 1645  ./string/../sysdeps/x86_64/strcmp.S:1743
    0.00 :   281ae:  psubb  %xmm0,%xmm1
         : 1647  ./string/../sysdeps/x86_64/strcmp.S:1744
    0.00 :   281b2:  pmovmskb %xmm1,%edx
         : 1649  ./string/../sysdeps/x86_64/strcmp.S:1745
    0.00 :   281b6:  sub    $0xffff,%edx
         : 1651  ./string/../sysdeps/x86_64/strcmp.S:1746
    0.00 :   281bc:  jne    28620 <strcmp+0x1400>
         : 1653  ./string/../sysdeps/x86_64/strcmp.S:1753
    0.00 :   281c2:  add    $0x10,%rcx
         : 1655  ./string/../sysdeps/x86_64/strcmp.S:1754
    0.00 :   281c6:  movdqa %xmm4,%xmm3
         : 1657  ./string/../sysdeps/x86_64/strcmp.S:1756
    0.00 :   281ca:  add    $0x10,%r10
         : 1659  ./string/../sysdeps/x86_64/strcmp.S:1757
    0.00 :   281ce:  jg     28220 <strcmp+0x1000>
         : 1661  ./string/../sysdeps/x86_64/strcmp.S:1759
    0.00 :   281d0:  movdqa (%rsi,%rcx,1),%xmm1
         : 1663  ./string/../sysdeps/x86_64/strcmp.S:1760
    0.00 :   281d5:  movdqa (%rdi,%rcx,1),%xmm2
         : 1665  ./string/../sysdeps/x86_64/strcmp.S:1761
    0.00 :   281da:  movdqa %xmm2,%xmm4
         : 1667  ./string/../sysdeps/x86_64/strcmp.S:1764
    0.00 :   281de:  psrldq $0xc,%xmm3
         : 1669  ./string/../sysdeps/x86_64/strcmp.S:1765
    0.00 :   281e3:  pslldq $0x4,%xmm2
         : 1671  ./string/../sysdeps/x86_64/strcmp.S:1766
    0.00 :   281e8:  por    %xmm3,%xmm2
         : 1673  ./string/../sysdeps/x86_64/strcmp.S:1772
    0.00 :   281ec:  pcmpeqb %xmm1,%xmm0
         : 1675  ./string/../sysdeps/x86_64/strcmp.S:1773
    0.00 :   281f0:  pcmpeqb %xmm2,%xmm1
         : 1677  ./string/../sysdeps/x86_64/strcmp.S:1774
    0.00 :   281f4:  psubb  %xmm0,%xmm1
         : 1679  ./string/../sysdeps/x86_64/strcmp.S:1775
    0.00 :   281f8:  pmovmskb %xmm1,%edx
         : 1681  ./string/../sysdeps/x86_64/strcmp.S:1776
    0.00 :   281fc:  sub    $0xffff,%edx
         : 1683  ./string/../sysdeps/x86_64/strcmp.S:1777
    0.00 :   28202:  jne    28620 <strcmp+0x1400>
         : 1685  ./string/../sysdeps/x86_64/strcmp.S:1784
    0.00 :   28208:  add    $0x10,%rcx
         : 1687  ./string/../sysdeps/x86_64/strcmp.S:1785
    0.00 :   2820c:  movdqa %xmm4,%xmm3
         : 1689  ./string/../sysdeps/x86_64/strcmp.S:1786
    0.00 :   28210:  jmp    28180 <strcmp+0xf60>
    0.00 :   28215:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1692  ./string/../sysdeps/x86_64/strcmp.S:1790
    0.00 :   28220:  pcmpeqb %xmm3,%xmm0
         : 1694  ./string/../sysdeps/x86_64/strcmp.S:1791
    0.00 :   28224:  pmovmskb %xmm0,%edx
         : 1696  ./string/../sysdeps/x86_64/strcmp.S:1792
    0.00 :   28228:  test   $0xf000,%edx
         : 1698  ./string/../sysdeps/x86_64/strcmp.S:1793
    0.00 :   2822e:  jne    28240 <strcmp+0x1020>
         : 1700  ./string/../sysdeps/x86_64/strcmp.S:1800
    0.00 :   28230:  pxor   %xmm0,%xmm0
         : 1702  ./string/../sysdeps/x86_64/strcmp.S:1801
    0.00 :   28234:  sub    $0x1000,%r10
         : 1704  ./string/../sysdeps/x86_64/strcmp.S:1802
    0.00 :   2823b:  jmp    2818a <strcmp+0xf6a>
         : 1706  ./string/../sysdeps/x86_64/strcmp.S:1806
    0.00 :   28240:  movdqa (%rsi,%rcx,1),%xmm1
         : 1708  ./string/../sysdeps/x86_64/strcmp.S:1807
    0.00 :   28245:  psrldq $0xc,%xmm0
         : 1710  ./string/../sysdeps/x86_64/strcmp.S:1808
    0.00 :   2824a:  psrldq $0xc,%xmm3
         : 1712  ./string/../sysdeps/x86_64/strcmp.S:1809
    0.00 :   2824f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28254:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2825f:  nop
         : 1716  ./string/../sysdeps/x86_64/strcmp.S:1818
    0.00 :   28260:  pxor   %xmm0,%xmm0
         : 1718  ./string/../sysdeps/x86_64/strcmp.S:1819
    0.00 :   28264:  movdqa (%rdi),%xmm2
         : 1720  ./string/../sysdeps/x86_64/strcmp.S:1820
    0.00 :   28268:  movdqa (%rsi),%xmm1
         : 1722  ./string/../sysdeps/x86_64/strcmp.S:1821
    0.00 :   2826c:  pcmpeqb %xmm1,%xmm0
         : 1724  ./string/../sysdeps/x86_64/strcmp.S:1822
    0.00 :   28270:  pslldq $0x3,%xmm2
         : 1726  ./string/../sysdeps/x86_64/strcmp.S:1824
    0.00 :   28275:  pcmpeqb %xmm1,%xmm2
         : 1728  ./string/../sysdeps/x86_64/strcmp.S:1825
    0.00 :   28279:  psubb  %xmm0,%xmm2
         : 1730  ./string/../sysdeps/x86_64/strcmp.S:1826
    0.00 :   2827d:  pmovmskb %xmm2,%r9d
         : 1732  ./string/../sysdeps/x86_64/strcmp.S:1827
    0.00 :   28282:  shr    %cl,%edx
         : 1734  ./string/../sysdeps/x86_64/strcmp.S:1828
    0.00 :   28284:  shr    %cl,%r9d
         : 1736  ./string/../sysdeps/x86_64/strcmp.S:1829
    0.00 :   28287:  sub    %r9d,%edx
         : 1738  ./string/../sysdeps/x86_64/strcmp.S:1830
    0.00 :   2828a:  jne    28625 <strcmp+0x1405>
         : 1740  ./string/../sysdeps/x86_64/strcmp.S:1831
    0.00 :   28290:  movdqa (%rdi),%xmm3
         : 1742  ./string/../sysdeps/x86_64/strcmp.S:1835
    0.00 :   28294:  pxor   %xmm0,%xmm0
         : 1744  ./string/../sysdeps/x86_64/strcmp.S:1836
    0.00 :   28298:  mov    $0x10,%rcx
         : 1746  ./string/../sysdeps/x86_64/strcmp.S:1837
    0.00 :   2829f:  mov    $0xd,%r9d
         : 1748  ./string/../sysdeps/x86_64/strcmp.S:1843
    0.00 :   282a5:  lea    0xd(%rdi),%r10
         : 1750  ./string/../sysdeps/x86_64/strcmp.S:1844
    0.00 :   282a9:  and    $0xfff,%r10
         : 1752  ./string/../sysdeps/x86_64/strcmp.S:1845
    0.00 :   282b0:  sub    $0x1000,%r10
    0.00 :   282b7:  nopw   0x0(%rax,%rax,1)
         : 1755  ./string/../sysdeps/x86_64/strcmp.S:1849
    0.00 :   282c0:  add    $0x10,%r10
         : 1757  ./string/../sysdeps/x86_64/strcmp.S:1850
    0.00 :   282c4:  jg     28360 <strcmp+0x1140>
         : 1759  ./string/../sysdeps/x86_64/strcmp.S:1853
    0.00 :   282ca:  movdqa (%rsi,%rcx,1),%xmm1
         : 1761  ./string/../sysdeps/x86_64/strcmp.S:1854
    0.00 :   282cf:  movdqa (%rdi,%rcx,1),%xmm2
         : 1763  ./string/../sysdeps/x86_64/strcmp.S:1855
    0.00 :   282d4:  movdqa %xmm2,%xmm4
         : 1765  ./string/../sysdeps/x86_64/strcmp.S:1858
    0.00 :   282d8:  psrldq $0xd,%xmm3
         : 1767  ./string/../sysdeps/x86_64/strcmp.S:1859
    0.00 :   282dd:  pslldq $0x3,%xmm2
         : 1769  ./string/../sysdeps/x86_64/strcmp.S:1860
    0.00 :   282e2:  por    %xmm3,%xmm2
         : 1771  ./string/../sysdeps/x86_64/strcmp.S:1866
    0.00 :   282e6:  pcmpeqb %xmm1,%xmm0
         : 1773  ./string/../sysdeps/x86_64/strcmp.S:1867
    0.00 :   282ea:  pcmpeqb %xmm2,%xmm1
         : 1775  ./string/../sysdeps/x86_64/strcmp.S:1868
    0.00 :   282ee:  psubb  %xmm0,%xmm1
         : 1777  ./string/../sysdeps/x86_64/strcmp.S:1869
    0.00 :   282f2:  pmovmskb %xmm1,%edx
         : 1779  ./string/../sysdeps/x86_64/strcmp.S:1870
    0.00 :   282f6:  sub    $0xffff,%edx
         : 1781  ./string/../sysdeps/x86_64/strcmp.S:1871
    0.00 :   282fc:  jne    28620 <strcmp+0x1400>
         : 1783  ./string/../sysdeps/x86_64/strcmp.S:1878
    0.00 :   28302:  add    $0x10,%rcx
         : 1785  ./string/../sysdeps/x86_64/strcmp.S:1879
    0.00 :   28306:  movdqa %xmm4,%xmm3
         : 1787  ./string/../sysdeps/x86_64/strcmp.S:1881
    0.00 :   2830a:  add    $0x10,%r10
         : 1789  ./string/../sysdeps/x86_64/strcmp.S:1882
    0.00 :   2830e:  jg     28360 <strcmp+0x1140>
         : 1791  ./string/../sysdeps/x86_64/strcmp.S:1884
    0.00 :   28310:  movdqa (%rsi,%rcx,1),%xmm1
         : 1793  ./string/../sysdeps/x86_64/strcmp.S:1885
    0.00 :   28315:  movdqa (%rdi,%rcx,1),%xmm2
         : 1795  ./string/../sysdeps/x86_64/strcmp.S:1886
    0.00 :   2831a:  movdqa %xmm2,%xmm4
         : 1797  ./string/../sysdeps/x86_64/strcmp.S:1889
    0.00 :   2831e:  psrldq $0xd,%xmm3
         : 1799  ./string/../sysdeps/x86_64/strcmp.S:1890
    0.00 :   28323:  pslldq $0x3,%xmm2
         : 1801  ./string/../sysdeps/x86_64/strcmp.S:1891
    0.00 :   28328:  por    %xmm3,%xmm2
         : 1803  ./string/../sysdeps/x86_64/strcmp.S:1897
    0.00 :   2832c:  pcmpeqb %xmm1,%xmm0
         : 1805  ./string/../sysdeps/x86_64/strcmp.S:1898
    0.00 :   28330:  pcmpeqb %xmm2,%xmm1
         : 1807  ./string/../sysdeps/x86_64/strcmp.S:1899
    0.00 :   28334:  psubb  %xmm0,%xmm1
         : 1809  ./string/../sysdeps/x86_64/strcmp.S:1900
    0.00 :   28338:  pmovmskb %xmm1,%edx
         : 1811  ./string/../sysdeps/x86_64/strcmp.S:1901
    0.00 :   2833c:  sub    $0xffff,%edx
         : 1813  ./string/../sysdeps/x86_64/strcmp.S:1902
    0.00 :   28342:  jne    28620 <strcmp+0x1400>
         : 1815  ./string/../sysdeps/x86_64/strcmp.S:1909
    0.00 :   28348:  add    $0x10,%rcx
         : 1817  ./string/../sysdeps/x86_64/strcmp.S:1910
    0.00 :   2834c:  movdqa %xmm4,%xmm3
         : 1819  ./string/../sysdeps/x86_64/strcmp.S:1911
    0.00 :   28350:  jmp    282c0 <strcmp+0x10a0>
    0.00 :   28355:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1822  ./string/../sysdeps/x86_64/strcmp.S:1915
    0.00 :   28360:  pcmpeqb %xmm3,%xmm0
         : 1824  ./string/../sysdeps/x86_64/strcmp.S:1916
    0.00 :   28364:  pmovmskb %xmm0,%edx
         : 1826  ./string/../sysdeps/x86_64/strcmp.S:1917
    0.00 :   28368:  test   $0xe000,%edx
         : 1828  ./string/../sysdeps/x86_64/strcmp.S:1918
    0.00 :   2836e:  jne    28380 <strcmp+0x1160>
         : 1830  ./string/../sysdeps/x86_64/strcmp.S:1925
    0.00 :   28370:  pxor   %xmm0,%xmm0
         : 1832  ./string/../sysdeps/x86_64/strcmp.S:1926
    0.00 :   28374:  sub    $0x1000,%r10
         : 1834  ./string/../sysdeps/x86_64/strcmp.S:1927
    0.00 :   2837b:  jmp    282ca <strcmp+0x10aa>
         : 1836  ./string/../sysdeps/x86_64/strcmp.S:1931
    0.00 :   28380:  movdqa (%rsi,%rcx,1),%xmm1
         : 1838  ./string/../sysdeps/x86_64/strcmp.S:1932
    0.00 :   28385:  psrldq $0xd,%xmm0
         : 1840  ./string/../sysdeps/x86_64/strcmp.S:1933
    0.00 :   2838a:  psrldq $0xd,%xmm3
         : 1842  ./string/../sysdeps/x86_64/strcmp.S:1934
    0.00 :   2838f:  jmp    28610 <strcmp+0x13f0>
    0.00 :   28394:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2839f:  nop
         : 1846  ./string/../sysdeps/x86_64/strcmp.S:1943
    0.00 :   283a0:  pxor   %xmm0,%xmm0
         : 1848  ./string/../sysdeps/x86_64/strcmp.S:1944
    0.00 :   283a4:  movdqa (%rdi),%xmm2
         : 1850  ./string/../sysdeps/x86_64/strcmp.S:1945
    0.00 :   283a8:  movdqa (%rsi),%xmm1
         : 1852  ./string/../sysdeps/x86_64/strcmp.S:1946
    0.00 :   283ac:  pcmpeqb %xmm1,%xmm0
         : 1854  ./string/../sysdeps/x86_64/strcmp.S:1947
    0.00 :   283b0:  pslldq $0x2,%xmm2
         : 1856  ./string/../sysdeps/x86_64/strcmp.S:1949
    0.00 :   283b5:  pcmpeqb %xmm1,%xmm2
         : 1858  ./string/../sysdeps/x86_64/strcmp.S:1950
    0.00 :   283b9:  psubb  %xmm0,%xmm2
         : 1860  ./string/../sysdeps/x86_64/strcmp.S:1951
    0.00 :   283bd:  pmovmskb %xmm2,%r9d
         : 1862  ./string/../sysdeps/x86_64/strcmp.S:1952
    0.00 :   283c2:  shr    %cl,%edx
         : 1864  ./string/../sysdeps/x86_64/strcmp.S:1953
    0.00 :   283c4:  shr    %cl,%r9d
         : 1866  ./string/../sysdeps/x86_64/strcmp.S:1954
    0.00 :   283c7:  sub    %r9d,%edx
         : 1868  ./string/../sysdeps/x86_64/strcmp.S:1955
    0.00 :   283ca:  jne    28625 <strcmp+0x1405>
         : 1870  ./string/../sysdeps/x86_64/strcmp.S:1956
    0.00 :   283d0:  movdqa (%rdi),%xmm3
         : 1872  ./string/../sysdeps/x86_64/strcmp.S:1960
    0.00 :   283d4:  pxor   %xmm0,%xmm0
         : 1874  ./string/../sysdeps/x86_64/strcmp.S:1961
    0.00 :   283d8:  mov    $0x10,%rcx
         : 1876  ./string/../sysdeps/x86_64/strcmp.S:1962
    0.00 :   283df:  mov    $0xe,%r9d
         : 1878  ./string/../sysdeps/x86_64/strcmp.S:1968
    0.00 :   283e5:  lea    0xe(%rdi),%r10
         : 1880  ./string/../sysdeps/x86_64/strcmp.S:1969
    0.00 :   283e9:  and    $0xfff,%r10
         : 1882  ./string/../sysdeps/x86_64/strcmp.S:1970
    0.00 :   283f0:  sub    $0x1000,%r10
    0.00 :   283f7:  nopw   0x0(%rax,%rax,1)
         : 1885  ./string/../sysdeps/x86_64/strcmp.S:1974
    0.00 :   28400:  add    $0x10,%r10
         : 1887  ./string/../sysdeps/x86_64/strcmp.S:1975
    0.00 :   28404:  jg     284a0 <strcmp+0x1280>
         : 1889  ./string/../sysdeps/x86_64/strcmp.S:1978
    0.00 :   2840a:  movdqa (%rsi,%rcx,1),%xmm1
         : 1891  ./string/../sysdeps/x86_64/strcmp.S:1979
    0.00 :   2840f:  movdqa (%rdi,%rcx,1),%xmm2
         : 1893  ./string/../sysdeps/x86_64/strcmp.S:1980
    0.00 :   28414:  movdqa %xmm2,%xmm4
         : 1895  ./string/../sysdeps/x86_64/strcmp.S:1983
    0.00 :   28418:  psrldq $0xe,%xmm3
         : 1897  ./string/../sysdeps/x86_64/strcmp.S:1984
    0.00 :   2841d:  pslldq $0x2,%xmm2
         : 1899  ./string/../sysdeps/x86_64/strcmp.S:1985
    0.00 :   28422:  por    %xmm3,%xmm2
         : 1901  ./string/../sysdeps/x86_64/strcmp.S:1991
    0.00 :   28426:  pcmpeqb %xmm1,%xmm0
         : 1903  ./string/../sysdeps/x86_64/strcmp.S:1992
    0.00 :   2842a:  pcmpeqb %xmm2,%xmm1
         : 1905  ./string/../sysdeps/x86_64/strcmp.S:1993
    0.00 :   2842e:  psubb  %xmm0,%xmm1
         : 1907  ./string/../sysdeps/x86_64/strcmp.S:1994
    0.00 :   28432:  pmovmskb %xmm1,%edx
         : 1909  ./string/../sysdeps/x86_64/strcmp.S:1995
    0.00 :   28436:  sub    $0xffff,%edx
         : 1911  ./string/../sysdeps/x86_64/strcmp.S:1996
    0.00 :   2843c:  jne    28620 <strcmp+0x1400>
         : 1913  ./string/../sysdeps/x86_64/strcmp.S:2003
    0.00 :   28442:  add    $0x10,%rcx
         : 1915  ./string/../sysdeps/x86_64/strcmp.S:2004
    0.00 :   28446:  movdqa %xmm4,%xmm3
         : 1917  ./string/../sysdeps/x86_64/strcmp.S:2006
    0.00 :   2844a:  add    $0x10,%r10
         : 1919  ./string/../sysdeps/x86_64/strcmp.S:2007
    0.00 :   2844e:  jg     284a0 <strcmp+0x1280>
         : 1921  ./string/../sysdeps/x86_64/strcmp.S:2009
    0.00 :   28450:  movdqa (%rsi,%rcx,1),%xmm1
         : 1923  ./string/../sysdeps/x86_64/strcmp.S:2010
    0.00 :   28455:  movdqa (%rdi,%rcx,1),%xmm2
         : 1925  ./string/../sysdeps/x86_64/strcmp.S:2011
    0.00 :   2845a:  movdqa %xmm2,%xmm4
         : 1927  ./string/../sysdeps/x86_64/strcmp.S:2014
    0.00 :   2845e:  psrldq $0xe,%xmm3
         : 1929  ./string/../sysdeps/x86_64/strcmp.S:2015
    0.00 :   28463:  pslldq $0x2,%xmm2
         : 1931  ./string/../sysdeps/x86_64/strcmp.S:2016
    0.00 :   28468:  por    %xmm3,%xmm2
         : 1933  ./string/../sysdeps/x86_64/strcmp.S:2022
    0.00 :   2846c:  pcmpeqb %xmm1,%xmm0
         : 1935  ./string/../sysdeps/x86_64/strcmp.S:2023
    0.00 :   28470:  pcmpeqb %xmm2,%xmm1
         : 1937  ./string/../sysdeps/x86_64/strcmp.S:2024
    0.00 :   28474:  psubb  %xmm0,%xmm1
         : 1939  ./string/../sysdeps/x86_64/strcmp.S:2025
    0.00 :   28478:  pmovmskb %xmm1,%edx
         : 1941  ./string/../sysdeps/x86_64/strcmp.S:2026
    0.00 :   2847c:  sub    $0xffff,%edx
         : 1943  ./string/../sysdeps/x86_64/strcmp.S:2027
    0.00 :   28482:  jne    28620 <strcmp+0x1400>
         : 1945  ./string/../sysdeps/x86_64/strcmp.S:2034
    0.00 :   28488:  add    $0x10,%rcx
         : 1947  ./string/../sysdeps/x86_64/strcmp.S:2035
    0.00 :   2848c:  movdqa %xmm4,%xmm3
         : 1949  ./string/../sysdeps/x86_64/strcmp.S:2036
    0.00 :   28490:  jmp    28400 <strcmp+0x11e0>
    0.00 :   28495:  data16 cs nopw 0x0(%rax,%rax,1)
         : 1952  ./string/../sysdeps/x86_64/strcmp.S:2040
    0.00 :   284a0:  pcmpeqb %xmm3,%xmm0
         : 1954  ./string/../sysdeps/x86_64/strcmp.S:2041
    0.00 :   284a4:  pmovmskb %xmm0,%edx
         : 1956  ./string/../sysdeps/x86_64/strcmp.S:2042
    0.00 :   284a8:  test   $0xc000,%edx
         : 1958  ./string/../sysdeps/x86_64/strcmp.S:2043
    0.00 :   284ae:  jne    284c0 <strcmp+0x12a0>
         : 1960  ./string/../sysdeps/x86_64/strcmp.S:2050
    0.00 :   284b0:  pxor   %xmm0,%xmm0
         : 1962  ./string/../sysdeps/x86_64/strcmp.S:2051
    0.00 :   284b4:  sub    $0x1000,%r10
         : 1964  ./string/../sysdeps/x86_64/strcmp.S:2052
    0.00 :   284bb:  jmp    2840a <strcmp+0x11ea>
         : 1966  ./string/../sysdeps/x86_64/strcmp.S:2056
    0.00 :   284c0:  movdqa (%rsi,%rcx,1),%xmm1
         : 1968  ./string/../sysdeps/x86_64/strcmp.S:2057
    0.00 :   284c5:  psrldq $0xe,%xmm0
         : 1970  ./string/../sysdeps/x86_64/strcmp.S:2058
    0.00 :   284ca:  psrldq $0xe,%xmm3
         : 1972  ./string/../sysdeps/x86_64/strcmp.S:2059
    0.00 :   284cf:  jmp    28610 <strcmp+0x13f0>
    0.00 :   284d4:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   284df:  nop
         : 1976  ./string/../sysdeps/x86_64/strcmp.S:2068
    0.00 :   284e0:  pxor   %xmm0,%xmm0
         : 1978  ./string/../sysdeps/x86_64/strcmp.S:2069
    0.00 :   284e4:  movdqa (%rdi),%xmm2
         : 1980  ./string/../sysdeps/x86_64/strcmp.S:2070
    0.00 :   284e8:  movdqa (%rsi),%xmm1
         : 1982  ./string/../sysdeps/x86_64/strcmp.S:2071
    0.00 :   284ec:  pcmpeqb %xmm1,%xmm0
         : 1984  ./string/../sysdeps/x86_64/strcmp.S:2072
    0.00 :   284f0:  pslldq $0x1,%xmm2
         : 1986  ./string/../sysdeps/x86_64/strcmp.S:2074
    0.00 :   284f5:  pcmpeqb %xmm1,%xmm2
         : 1988  ./string/../sysdeps/x86_64/strcmp.S:2075
    0.00 :   284f9:  psubb  %xmm0,%xmm2
         : 1990  ./string/../sysdeps/x86_64/strcmp.S:2076
    0.00 :   284fd:  pmovmskb %xmm2,%r9d
         : 1992  ./string/../sysdeps/x86_64/strcmp.S:2077
    0.00 :   28502:  shr    %cl,%edx
         : 1994  ./string/../sysdeps/x86_64/strcmp.S:2078
    0.00 :   28504:  shr    %cl,%r9d
         : 1996  ./string/../sysdeps/x86_64/strcmp.S:2079
    5.02 :   28507:  sub    %r9d,%edx
         : 1998  ./string/../sysdeps/x86_64/strcmp.S:2080
    0.00 :   2850a:  jne    28625 <strcmp+0x1405>
         : 2000  ./string/../sysdeps/x86_64/strcmp.S:2082
    0.00 :   28510:  movdqa (%rdi),%xmm3
         : 2002  ./string/../sysdeps/x86_64/strcmp.S:2086
    0.00 :   28514:  pxor   %xmm0,%xmm0
         : 2004  ./string/../sysdeps/x86_64/strcmp.S:2087
    0.00 :   28518:  mov    $0x10,%rcx
         : 2006  ./string/../sysdeps/x86_64/strcmp.S:2088
    0.00 :   2851f:  mov    $0xf,%r9d
         : 2008  ./string/../sysdeps/x86_64/strcmp.S:2094
    0.00 :   28525:  lea    0xf(%rdi),%r10
         : 2010  ./string/../sysdeps/x86_64/strcmp.S:2095
    0.00 :   28529:  and    $0xfff,%r10
         : 2012  ./string/../sysdeps/x86_64/strcmp.S:2097
    0.00 :   28530:  sub    $0x1000,%r10
    0.00 :   28537:  nopw   0x0(%rax,%rax,1)
         : 2015  ./string/../sysdeps/x86_64/strcmp.S:2101
    0.00 :   28540:  add    $0x10,%r10
         : 2017  ./string/../sysdeps/x86_64/strcmp.S:2102
    0.00 :   28544:  jg     285e0 <strcmp+0x13c0>
         : 2019  ./string/../sysdeps/x86_64/strcmp.S:2105
    0.00 :   2854a:  movdqa (%rsi,%rcx,1),%xmm1
         : 2021  ./string/../sysdeps/x86_64/strcmp.S:2106
    0.00 :   2854f:  movdqa (%rdi,%rcx,1),%xmm2
         : 2023  ./string/../sysdeps/x86_64/strcmp.S:2107
    0.00 :   28554:  movdqa %xmm2,%xmm4
         : 2025  ./string/../sysdeps/x86_64/strcmp.S:2110
    0.00 :   28558:  psrldq $0xf,%xmm3
         : 2027  ./string/../sysdeps/x86_64/strcmp.S:2111
    0.00 :   2855d:  pslldq $0x1,%xmm2
         : 2029  ./string/../sysdeps/x86_64/strcmp.S:2112
    0.00 :   28562:  por    %xmm3,%xmm2
         : 2031  ./string/../sysdeps/x86_64/strcmp.S:2118
    0.00 :   28566:  pcmpeqb %xmm1,%xmm0
         : 2033  ./string/../sysdeps/x86_64/strcmp.S:2119
    0.00 :   2856a:  pcmpeqb %xmm2,%xmm1
         : 2035  ./string/../sysdeps/x86_64/strcmp.S:2120
    0.00 :   2856e:  psubb  %xmm0,%xmm1
         : 2037  ./string/../sysdeps/x86_64/strcmp.S:2121
    0.00 :   28572:  pmovmskb %xmm1,%edx
         : 2039  ./string/../sysdeps/x86_64/strcmp.S:2122
    0.00 :   28576:  sub    $0xffff,%edx
         : 2041  ./string/../sysdeps/x86_64/strcmp.S:2123
    0.00 :   2857c:  jne    28620 <strcmp+0x1400>
         : 2043  ./string/../sysdeps/x86_64/strcmp.S:2130
    0.00 :   28582:  add    $0x10,%rcx
         : 2045  ./string/../sysdeps/x86_64/strcmp.S:2131
    0.00 :   28586:  movdqa %xmm4,%xmm3
         : 2047  ./string/../sysdeps/x86_64/strcmp.S:2133
    0.00 :   2858a:  add    $0x10,%r10
         : 2049  ./string/../sysdeps/x86_64/strcmp.S:2134
    0.00 :   2858e:  jg     285e0 <strcmp+0x13c0>
         : 2051  ./string/../sysdeps/x86_64/strcmp.S:2136
    0.00 :   28590:  movdqa (%rsi,%rcx,1),%xmm1
         : 2053  ./string/../sysdeps/x86_64/strcmp.S:2137
    0.00 :   28595:  movdqa (%rdi,%rcx,1),%xmm2
         : 2055  ./string/../sysdeps/x86_64/strcmp.S:2138
    0.00 :   2859a:  movdqa %xmm2,%xmm4
         : 2057  ./string/../sysdeps/x86_64/strcmp.S:2141
    0.00 :   2859e:  psrldq $0xf,%xmm3
         : 2059  ./string/../sysdeps/x86_64/strcmp.S:2142
    0.00 :   285a3:  pslldq $0x1,%xmm2
         : 2061  ./string/../sysdeps/x86_64/strcmp.S:2143
    0.00 :   285a8:  por    %xmm3,%xmm2
         : 2063  ./string/../sysdeps/x86_64/strcmp.S:2149
    0.00 :   285ac:  pcmpeqb %xmm1,%xmm0
         : 2065  ./string/../sysdeps/x86_64/strcmp.S:2150
    0.00 :   285b0:  pcmpeqb %xmm2,%xmm1
         : 2067  ./string/../sysdeps/x86_64/strcmp.S:2151
    0.00 :   285b4:  psubb  %xmm0,%xmm1
         : 2069  ./string/../sysdeps/x86_64/strcmp.S:2152
    0.00 :   285b8:  pmovmskb %xmm1,%edx
         : 2071  ./string/../sysdeps/x86_64/strcmp.S:2153
    0.00 :   285bc:  sub    $0xffff,%edx
         : 2073  ./string/../sysdeps/x86_64/strcmp.S:2154
    0.00 :   285c2:  jne    28620 <strcmp+0x1400>
         : 2075  ./string/../sysdeps/x86_64/strcmp.S:2161
    0.00 :   285c4:  add    $0x10,%rcx
         : 2077  ./string/../sysdeps/x86_64/strcmp.S:2162
    0.00 :   285c8:  movdqa %xmm4,%xmm3
         : 2079  ./string/../sysdeps/x86_64/strcmp.S:2163
    0.00 :   285cc:  jmp    28540 <strcmp+0x1320>
    0.00 :   285d1:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   285dc:  nopl   0x0(%rax)
         : 2083  ./string/../sysdeps/x86_64/strcmp.S:2167
    0.00 :   285e0:  pcmpeqb %xmm3,%xmm0
         : 2085  ./string/../sysdeps/x86_64/strcmp.S:2168
    0.00 :   285e4:  pmovmskb %xmm0,%edx
         : 2087  ./string/../sysdeps/x86_64/strcmp.S:2169
    0.00 :   285e8:  test   $0x8000,%edx
         : 2089  ./string/../sysdeps/x86_64/strcmp.S:2170
    0.00 :   285ee:  jne    28600 <strcmp+0x13e0>
         : 2091  ./string/../sysdeps/x86_64/strcmp.S:2177
    0.00 :   285f0:  pxor   %xmm0,%xmm0
         : 2093  ./string/../sysdeps/x86_64/strcmp.S:2178
    0.00 :   285f4:  sub    $0x1000,%r10
         : 2095  ./string/../sysdeps/x86_64/strcmp.S:2179
    0.00 :   285fb:  jmp    2854a <strcmp+0x132a>
         : 2097  ./string/../sysdeps/x86_64/strcmp.S:2183
    0.00 :   28600:  movdqa (%rsi,%rcx,1),%xmm1
         : 2099  ./string/../sysdeps/x86_64/strcmp.S:2184
    0.00 :   28605:  psrldq $0xf,%xmm3
         : 2101  ./string/../sysdeps/x86_64/strcmp.S:2185
    0.00 :   2860a:  psrldq $0xf,%xmm0
    0.00 :   2860f:  nop
         : 2104  ./string/../sysdeps/x86_64/strcmp.S:2190
    0.00 :   28610:  pcmpeqb %xmm3,%xmm1
         : 2106  ./string/../sysdeps/x86_64/strcmp.S:2191
    0.00 :   28614:  psubb  %xmm0,%xmm1
         : 2108  ./string/../sysdeps/x86_64/strcmp.S:2192
    0.00 :   28618:  pmovmskb %xmm1,%edx
         : 2110  ./string/../sysdeps/x86_64/strcmp.S:2193
    0.00 :   2861c:  not    %edx
    0.00 :   2861e:  xchg   %ax,%ax
         : 2113  ./string/../sysdeps/x86_64/strcmp.S:2197
    0.00 :   28620:  lea    -0x10(%r9,%rcx,1),%rax
         : 2115  ./string/../sysdeps/x86_64/strcmp.S:2199
    0.00 :   28625:  lea    (%rdi,%rax,1),%rdi
         : 2117  ./string/../sysdeps/x86_64/strcmp.S:2200
    0.00 :   28629:  lea    (%rsi,%rcx,1),%rsi
         : 2119  ./string/../sysdeps/x86_64/strcmp.S:2201
    0.00 :   2862d:  test   %r8d,%r8d
         : 2121  ./string/../sysdeps/x86_64/strcmp.S:2202
    0.00 :   28630:  je     28640 <strcmp+0x1420>
         : 2123  ./string/../sysdeps/x86_64/strcmp.S:2203
    0.00 :   28632:  xchg   %rsi,%rdi
    0.00 :   28635:  data16 cs nopw 0x0(%rax,%rax,1)
         : 2126  ./string/../sysdeps/x86_64/strcmp.S:2208
    0.00 :   28640:  bsf    %rdx,%rdx
         : 2128  ./string/../sysdeps/x86_64/strcmp.S:2214
    0.00 :   28644:  movzbl (%rsi,%rdx,1),%ecx
         : 2130  ./string/../sysdeps/x86_64/strcmp.S:2215
   44.48 :   28648:  movzbl (%rdi,%rdx,1),%eax
         : 2132  ./string/../sysdeps/x86_64/strcmp.S:2223
    0.00 :   2864c:  sub    %ecx,%eax
         : 2134  ./string/../sysdeps/x86_64/strcmp.S:2224
    0.00 :   2864e:  ret
         : 2136  ./string/../sysdeps/x86_64/strcmp.S:2227
    0.00 :   2864f:  xor    %eax,%eax
         : 2138  ./string/../sysdeps/x86_64/strcmp.S:2228
    0.00 :   28651:  ret
    0.00 :   28652:  data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   2865d:  nopl   (%rax)
         : 2142  ./string/../sysdeps/x86_64/strcmp.S:2232
    0.00 :   28660:  movzbl (%rsi),%ecx
         : 2144  ./string/../sysdeps/x86_64/strcmp.S:2233
    0.00 :   28663:  movzbl (%rdi),%eax
         : 2146  ./string/../sysdeps/x86_64/strcmp.S:2241
    0.00 :   28666:  sub    %ecx,%eax
         : 2148  ./string/../sysdeps/x86_64/strcmp.S:2242
    0.00 :   28668:  ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (7 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a50a0 <__libc_malloc>:
         : 6     __GI___libc_malloc():
         : 7     ./malloc/malloc.c:3287
    0.00 :   a50a0:  endbr64
    0.00 :   a50a4:  push   %r12
   13.06 :   a50a6:  push   %rbp
    0.00 :   a50a7:  mov    %rdi,%rbp
    0.00 :   a50aa:  push   %rbx
    0.00 :   a50ab:  sub    $0x10,%rsp
         : 14    ./malloc/malloc.c:3294
    0.00 :   a50af:  cmpb   $0x0,0x17c432(%rip)        # 2214e8 <__malloc_initialized>
    0.00 :   a50b6:  je     a52d0 <__libc_malloc+0x230>
         : 17    checked_request2size():
         : 18    ./malloc/malloc.c:1343
    0.00 :   a50bc:  test   %rbp,%rbp
    0.00 :   a50bf:  js     a52de <__libc_malloc+0x23e>
         : 21    ./malloc/malloc.c:1362
    0.00 :   a50c5:  lea    0x17(%rbp),%rax
    0.00 :   a50c9:  xor    %r12d,%r12d
    0.00 :   a50cc:  cmp    $0x1f,%rax
    0.00 :   a50d0:  ja     a51b0 <__libc_malloc+0x110>
         : 26    __GI___libc_malloc():
         : 27    ./malloc/malloc.c:3306
    0.00 :   a50d6:  mov    0x174ccb(%rip),%rbx        # 219da8 <_DYNAMIC+0x1e8>
   17.97 :   a50dd:  mov    %fs:(%rbx),%rdx
   11.25 :   a50e1:  test   %rdx,%rdx
    0.00 :   a50e4:  je     a51c8 <__libc_malloc+0x128>
         : 32    ./malloc/malloc.c:3309
    0.00 :   a50ea:  cmp    %r12,0x1752d7(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a50f1:  ja     a5200 <__libc_malloc+0x160>
         : 35    ./malloc/malloc.c:3319 (discriminator 4)
    0.00 :   a50f7:  mov    %fs:0x18,%eax
    0.00 :   a50ff:  test   %eax,%eax
   17.93 :   a5101:  je     a5250 <__libc_malloc+0x1b0>
         : 39    ./malloc/malloc.c:3327
    0.00 :   a5107:  mov    0x174c92(%rip),%rax        # 219da0 <_DYNAMIC+0x1e0>
    0.00 :   a510e:  mov    %fs:(%rax),%r12
    0.00 :   a5112:  test   %r12,%r12
    0.00 :   a5115:  je     a5310 <__libc_malloc+0x270>
         : 44    ./malloc/malloc.c:3327 (discriminator 1)
    0.00 :   a511b:  xor    %eax,%eax
    0.00 :   a511d:  mov    $0x1,%edx
    0.00 :   a5122:  lock cmpxchg %edx,(%r12)
    0.00 :   a5128:  jne    a53c0 <__libc_malloc+0x320>
         : 49    ./malloc/malloc.c:3329
    0.00 :   a512e:  mov    %rbp,%rsi
    0.00 :   a5131:  mov    %r12,%rdi
    0.00 :   a5134:  call   a39b0 <_int_malloc>
         : 53    ./malloc/malloc.c:3332
    0.00 :   a5139:  test   %rax,%rax
    0.00 :   a513c:  je     a5350 <__libc_malloc+0x2b0>
         : 56    ./malloc/malloc.c:3340
    0.00 :   a5142:  xor    %edx,%edx
    0.00 :   a5144:  xchg   %edx,(%r12)
    0.00 :   a5148:  cmp    $0x1,%edx
    0.00 :   a514b:  jg     a53a0 <__libc_malloc+0x300>
         : 61    ./malloc/malloc.c:3344
    0.00 :   a5151:  test   %rax,%rax
    0.00 :   a5154:  je     a5300 <__libc_malloc+0x260>
         : 64    ./malloc/malloc.c:3344 (discriminator 1)
    0.00 :   a515a:  mov    -0x8(%rax),%rdx
    0.00 :   a515e:  test   $0x2,%dl
    0.00 :   a5161:  jne    a51a2 <__libc_malloc+0x102>
         : 68    arena_for_chunk():
         : 69    ./malloc/arena.c:162 (discriminator 2)
    0.00 :   a5163:  and    $0x4,%edx
    0.00 :   a5166:  lea    0x175b13(%rip),%rcx        # 21ac80 <main_arena>
    0.00 :   a516d:  je     a5199 <__libc_malloc+0xf9>
         : 73    heap_max_size():
         : 74    ./malloc/arena.c:61
    0.00 :   a516f:  mov    0x17521a(%rip),%rcx        # 21a390 <mp_+0x30>
         : 76    heap_for_ptr():
         : 77    ./malloc/arena.c:156
    0.00 :   a5176:  lea    0x0(,%rcx,4),%rdx
    0.00 :   a517e:  neg    %rdx
    0.00 :   a5181:  test   %rcx,%rcx
    0.00 :   a5184:  mov    $0xfffffffffc000000,%rcx
    0.00 :   a518b:  cmove  %rcx,%rdx
         : 83    __GI___libc_malloc():
         : 84    ./malloc/malloc.c:3344
    0.00 :   a518f:  lea    -0x10(%rax),%rcx
         : 86    arena_for_chunk():
         : 87    ./malloc/arena.c:162
    0.00 :   a5193:  and    %rcx,%rdx
    0.00 :   a5196:  mov    (%rdx),%rcx
         : 90    __GI___libc_malloc():
         : 91    ./malloc/malloc.c:3344
    0.00 :   a5199:  cmp    %r12,%rcx
    0.00 :   a519c:  jne    a5378 <__libc_malloc+0x2d8>
         : 94    ./malloc/malloc.c:3347
    0.00 :   a51a2:  add    $0x10,%rsp
    0.00 :   a51a6:  pop    %rbx
    0.00 :   a51a7:  pop    %rbp
    0.00 :   a51a8:  pop    %r12
    0.00 :   a51aa:  ret
    0.00 :   a51ab:  nopl   0x0(%rax,%rax,1)
         : 101   checked_request2size():
         : 102   ./malloc/malloc.c:1362
    0.00 :   a51b0:  and    $0xfffffffffffffff0,%rax
         : 104   __GI___libc_malloc():
         : 105   ./malloc/malloc.c:3304
    0.00 :   a51b4:  lea    -0x11(%rax),%r12
    0.00 :   a51b8:  shr    $0x4,%r12
    0.00 :   a51bc:  jmp    a50d6 <__libc_malloc+0x36>
    0.00 :   a51c1:  nopl   0x0(%rax)
         : 110   tcache_init():
         : 111   ./malloc/malloc.c:3241
    0.00 :   a51c8:  mov    0x174be1(%rip),%rax        # 219db0 <_DYNAMIC+0x1f0>
    0.00 :   a51cf:  cmpb   $0x0,%fs:(%rax)
    0.00 :   a51d3:  jne    a50f7 <__libc_malloc+0x57>
    0.00 :   a51d9:  call   a4990 <tcache_init.part.0>
         : 116   __GI___libc_malloc():
         : 117   ./malloc/malloc.c:3309
    0.00 :   a51de:  cmp    %r12,0x1751e3(%rip)        # 21a3c8 <mp_+0x68>
    0.00 :   a51e5:  jbe    a50f7 <__libc_malloc+0x57>
         : 120   ./malloc/malloc.c:3310
    0.00 :   a51eb:  mov    %fs:(%rbx),%rdx
    0.00 :   a51ef:  test   %rdx,%rdx
    0.00 :   a51f2:  je     a50f7 <__libc_malloc+0x57>
    0.00 :   a51f8:  nopl   0x0(%rax,%rax,1)
         : 125   ./malloc/malloc.c:3311
    0.00 :   a5200:  movzwl (%rdx,%r12,2),%ecx
   14.36 :   a5205:  test   %cx,%cx
    0.00 :   a5208:  je     a50f7 <__libc_malloc+0x57>
         : 129   tcache_get():
         : 130   ./malloc/malloc.c:3193
    0.00 :   a520e:  lea    0x10(%r12),%rdi
    0.00 :   a5213:  mov    (%rdx,%rdi,8),%rax
         : 133   ./malloc/malloc.c:3194
    0.00 :   a5217:  test   $0xf,%al
    0.00 :   a5219:  jne    a53d0 <__libc_malloc+0x330>
         : 136   ./malloc/malloc.c:3196
    0.00 :   a521f:  mov    %rax,%rsi
         : 138   ./malloc/malloc.c:3197
    0.00 :   a5222:  sub    $0x1,%ecx
         : 140   ./malloc/malloc.c:3196
    0.00 :   a5225:  shr    $0xc,%rsi
    0.00 :   a5229:  xor    (%rax),%rsi
   25.44 :   a522c:  mov    %rsi,(%rdx,%rdi,8)
         : 144   ./malloc/malloc.c:3197
    0.00 :   a5230:  mov    %cx,(%rdx,%r12,2)
         : 146   ./malloc/malloc.c:3198
    0.00 :   a5235:  movq   $0x0,0x8(%rax)
         : 148   __GI___libc_malloc():
         : 149   ./malloc/malloc.c:3347
    0.00 :   a523d:  add    $0x10,%rsp
    0.00 :   a5241:  pop    %rbx
    0.00 :   a5242:  pop    %rbp
    0.00 :   a5243:  pop    %r12
    0.00 :   a5245:  ret
    0.00 :   a5246:  cs nopw 0x0(%rax,%rax,1)
         : 156   ./malloc/malloc.c:3321
    0.00 :   a5250:  lea    0x175a29(%rip),%rbx        # 21ac80 <main_arena>
    0.00 :   a5257:  mov    %rbp,%rsi
    0.00 :   a525a:  mov    %rbx,%rdi
    0.00 :   a525d:  call   a39b0 <_int_malloc>
         : 161   ./malloc/malloc.c:3322
    0.00 :   a5262:  test   %rax,%rax
    0.00 :   a5265:  je     a5300 <__libc_malloc+0x260>
         : 164   ./malloc/malloc.c:3322 (discriminator 1)
    0.00 :   a526b:  mov    -0x8(%rax),%rdx
    0.00 :   a526f:  test   $0x2,%dl
    0.00 :   a5272:  jne    a51a2 <__libc_malloc+0x102>
         : 168   arena_for_chunk():
         : 169   ./malloc/arena.c:162 (discriminator 2)
    0.00 :   a5278:  and    $0x4,%edx
    0.00 :   a527b:  je     a51a2 <__libc_malloc+0x102>
         : 172   heap_max_size():
         : 173   ./malloc/arena.c:61
    0.00 :   a5281:  mov    0x175108(%rip),%rcx        # 21a390 <mp_+0x30>
         : 175   heap_for_ptr():
         : 176   ./malloc/arena.c:156
    0.00 :   a5288:  lea    0x0(,%rcx,4),%rdx
    0.00 :   a5290:  neg    %rdx
    0.00 :   a5293:  test   %rcx,%rcx
    0.00 :   a5296:  mov    $0xfffffffffc000000,%rcx
    0.00 :   a529d:  cmove  %rcx,%rdx
         : 182   __GI___libc_malloc():
         : 183   ./malloc/malloc.c:3322
    0.00 :   a52a1:  lea    -0x10(%rax),%rcx
         : 185   arena_for_chunk():
         : 186   ./malloc/arena.c:162
    0.00 :   a52a5:  and    %rcx,%rdx
         : 188   __GI___libc_malloc():
         : 189   ./malloc/malloc.c:3322
    0.00 :   a52a8:  cmp    %rbx,(%rdx)
    0.00 :   a52ab:  je     a51a2 <__libc_malloc+0x102>
         : 192   ./malloc/malloc.c:3322 (discriminator 3)
    0.00 :   a52b1:  lea    0x139f80(%rip),%rcx        # 1df238 <__PRETTY_FUNCTION__.1>
    0.00 :   a52b8:  mov    $0xcfa,%edx
    0.00 :   a52bd:  lea    0x1343c8(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a52c4:  lea    0x139b85(%rip),%rdi        # 1dee50 <__PRETTY_FUNCTION__.1+0xd10>
    0.00 :   a52cb:  call   a0e70 <__malloc_assert>
         : 198   ptmalloc_init():
         : 199   ./malloc/arena.c:315
    0.00 :   a52d0:  call   a19b0 <ptmalloc_init.part.0>
         : 201   checked_request2size():
         : 202   ./malloc/malloc.c:1343
    0.00 :   a52d5:  test   %rbp,%rbp
    0.00 :   a52d8:  jns    a50c5 <__libc_malloc+0x25>
         : 205   __GI___libc_malloc():
         : 206   ./malloc/malloc.c:3301
    0.00 :   a52de:  mov    0x174b2b(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   a52e5:  movl   $0xc,%fs:(%rax)
         : 209   ./malloc/malloc.c:3347
    0.00 :   a52ec:  add    $0x10,%rsp
         : 211   ./malloc/malloc.c:3302
    0.00 :   a52f0:  xor    %eax,%eax
         : 213   ./malloc/malloc.c:3347
    0.00 :   a52f2:  pop    %rbx
    0.00 :   a52f3:  pop    %rbp
    0.00 :   a52f4:  pop    %r12
    0.00 :   a52f6:  ret
    0.00 :   a52f7:  nopw   0x0(%rax,%rax,1)
    0.00 :   a5300:  add    $0x10,%rsp
         : 220   ./malloc/malloc.c:3302
    0.00 :   a5304:  xor    %eax,%eax
         : 222   ./malloc/malloc.c:3347
    0.00 :   a5306:  pop    %rbx
    0.00 :   a5307:  pop    %rbp
    0.00 :   a5308:  pop    %r12
    0.00 :   a530a:  ret
    0.00 :   a530b:  nopl   0x0(%rax,%rax,1)
         : 228   arena_get2():
         : 229   ./malloc/arena.c:930
    0.00 :   a5310:  call   a1090 <get_free_list>
    0.00 :   a5315:  mov    %rax,%r12
         : 232   ./malloc/arena.c:931
    0.00 :   a5318:  test   %rax,%rax
    0.00 :   a531b:  jne    a512e <__libc_malloc+0x8e>
    0.00 :   a5321:  xor    %esi,%esi
    0.00 :   a5323:  mov    %rbp,%rdi
    0.00 :   a5326:  call   a1ee0 <arena_get2.part.0>
         : 238   __GI___libc_malloc():
         : 239   ./malloc/malloc.c:3329
    0.00 :   a532b:  mov    %rbp,%rsi
    0.00 :   a532e:  mov    %rax,%rdi
         : 242   arena_get2():
         : 243   ./malloc/malloc.c:3329
    0.00 :   a5331:  mov    %rax,%r12
         : 245   __GI___libc_malloc():
         : 246   ./malloc/malloc.c:3329
    0.00 :   a5334:  call   a39b0 <_int_malloc>
         : 248   ./malloc/malloc.c:3332
    0.00 :   a5339:  test   %rax,%rax
    0.00 :   a533c:  jne    a536a <__libc_malloc+0x2ca>
    0.00 :   a533e:  test   %r12,%r12
    0.00 :   a5341:  je     a5151 <__libc_malloc+0xb1>
    0.00 :   a5347:  nopw   0x0(%rax,%rax,1)
         : 254   ./malloc/malloc.c:3334
    0.00 :   a5350:  nop
         : 256   ./malloc/malloc.c:3335
    0.00 :   a5351:  mov    %r12,%rdi
    0.00 :   a5354:  mov    %rbp,%rsi
    0.00 :   a5357:  call   a23c0 <arena_get_retry>
         : 260   ./malloc/malloc.c:3336
    0.00 :   a535c:  mov    %rbp,%rsi
    0.00 :   a535f:  mov    %rax,%rdi
         : 263   ./malloc/malloc.c:3335
    0.00 :   a5362:  mov    %rax,%r12
         : 265   ./malloc/malloc.c:3336
    0.00 :   a5365:  call   a39b0 <_int_malloc>
         : 267   ./malloc/malloc.c:3339
    0.00 :   a536a:  test   %r12,%r12
    0.00 :   a536d:  je     a5151 <__libc_malloc+0xb1>
    0.00 :   a5373:  jmp    a5142 <__libc_malloc+0xa2>
         : 271   ./malloc/malloc.c:3344 (discriminator 3)
    0.00 :   a5378:  lea    0x139eb9(%rip),%rcx        # 1df238 <__PRETTY_FUNCTION__.1>
    0.00 :   a537f:  mov    $0xd10,%edx
    0.00 :   a5384:  lea    0x134301(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a538b:  lea    0x139b26(%rip),%rdi        # 1deeb8 <__PRETTY_FUNCTION__.1+0xd78>
    0.00 :   a5392:  call   a0e70 <__malloc_assert>
    0.00 :   a5397:  nopw   0x0(%rax,%rax,1)
         : 278   ./malloc/malloc.c:3340 (discriminator 15)
    0.00 :   a53a0:  mov    %r12,%rdi
    0.00 :   a53a3:  mov    %rax,0x8(%rsp)
    0.00 :   a53a8:  call   91300 <__lll_lock_wake_private>
    0.00 :   a53ad:  mov    0x8(%rsp),%rax
    0.00 :   a53b2:  jmp    a5151 <__libc_malloc+0xb1>
    0.00 :   a53b7:  nopw   0x0(%rax,%rax,1)
         : 285   ./malloc/malloc.c:3327 (discriminator 5)
    0.00 :   a53c0:  mov    %r12,%rdi
    0.00 :   a53c3:  call   91230 <__lll_lock_wait_private>
    0.00 :   a53c8:  jmp    a512e <__libc_malloc+0x8e>
    0.00 :   a53cd:  nopl   (%rax)
         : 290   tcache_get():
         : 291   ./malloc/malloc.c:3195
    0.00 :   a53d0:  lea    0x139949(%rip),%rdi        # 1ded20 <__PRETTY_FUNCTION__.1+0xbe0>
    0.00 :   a53d7:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (6 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000075030 <__vfprintf_internal>:
         : 6     __vfprintf_internal():
         : 7     ./stdio-common/vfprintf-internal.c:1180
    0.00 :   75030:  endbr64
    0.00 :   75034:  push   %r15
    0.00 :   75036:  push   %r14
    0.00 :   75038:  push   %r13
    0.00 :   7503a:  push   %r12
    0.00 :   7503c:  push   %rbp
    0.00 :   7503d:  mov    %rdi,%rbp
    0.00 :   75040:  push   %rbx
    0.00 :   75041:  sub    $0x538,%rsp
    0.00 :   75048:  mov    %rsi,0x8(%rsp)
    0.00 :   7504d:  mov    %rdx,0x20(%rsp)
    0.00 :   75052:  mov    %ecx,0x7c(%rsp)
         : 20    ./stdio-common/vfprintf-internal.c:1210
    0.00 :   75056:  mov    %fs:0x28,%rax
    0.00 :   7505f:  mov    %rax,0x528(%rsp)
    0.00 :   75067:  mov    0x1a4da2(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   7506e:  mov    %fs:(%rax),%eax
    0.00 :   75071:  mov    %eax,0x90(%rsp)
         : 26    ./stdio-common/vfprintf-internal.c:1218
    0.00 :   75078:  mov    0xc0(%rdi),%eax
    0.00 :   7507e:  test   %eax,%eax
    0.00 :   75080:  jne    75500 <__vfprintf_internal+0x4d0>
         : 30    ./stdio-common/vfprintf-internal.c:1218 (discriminator 3)
    0.00 :   75086:  movl   $0xffffffff,0xc0(%rdi)
         : 32    ./stdio-common/vfprintf-internal.c:1222
    0.00 :   75090:  mov    0x0(%rbp),%ebx
    0.00 :   75093:  test   $0x8,%bl
    0.00 :   75096:  jne    77380 <__vfprintf_internal+0x2350>
         : 36    ./stdio-common/vfprintf-internal.c:1222 (discriminator 2)
    0.00 :   7509c:  cmpq   $0x0,0x8(%rsp)
    0.00 :   750a2:  je     77440 <__vfprintf_internal+0x2410>
         : 39    ./stdio-common/vfprintf-internal.c:1233
    0.00 :   750a8:  test   $0x2,%bl
    0.00 :   750ab:  jne    76620 <__vfprintf_internal+0x15f0>
         : 42    ./stdio-common/vfprintf-internal.c:1244
    0.00 :   750b1:  mov    0x20(%rsp),%rax
         : 44    __find_specmb():
         : 45    ./stdio-common/printf-parse.h:111
    0.00 :   750b6:  mov    0x8(%rsp),%rdi
    0.00 :   750bb:  mov    $0x25,%esi
         : 48    __vfprintf_internal():
         : 49    ./stdio-common/vfprintf-internal.c:1244
    0.00 :   750c0:  movdqu (%rax),%xmm1
    0.00 :   750c4:  movups %xmm1,0x118(%rsp)
    0.00 :   750cc:  mov    0x10(%rax),%rax
    0.00 :   750d0:  movaps %xmm1,0x10(%rsp)
    0.00 :   750d5:  mov    %rax,0x128(%rsp)
         : 55    __find_specmb():
         : 56    ./stdio-common/printf-parse.h:111
    0.00 :   750dd:  call   284d0 <*ABS*+0xab010@plt>
         : 58    __vfprintf_internal():
         : 59    ./stdio-common/vfprintf-internal.c:1259
    0.00 :   750e2:  mov    %rbp,0xf8(%rsp)
         : 61    __find_specmb():
         : 62    ./stdio-common/printf-parse.h:111
    0.00 :   750ea:  mov    %rax,0x68(%rsp)
         : 64    __vfprintf_internal():
         : 65    ./stdio-common/vfprintf-internal.c:1259
    0.00 :   750ef:  movb   $0x0,0xa6(%rsp)
    0.00 :   750f7:  and    $0x80,%bh
    0.00 :   750fa:  je     75518 <__vfprintf_internal+0x4e8>
         : 69    outstring_func():
         : 70    ./stdio-common/vfprintf-internal.c:239 (discriminator 12)
    0.00 :   75100:  mov    0xd8(%rbp),%r12
         : 72    IO_validate_vtable():
         : 73    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   75107:  lea    0x1a265a(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
         : 75    __vfprintf_internal():
         : 76    ./stdio-common/vfprintf-internal.c:1263 (discriminator 12)
    0.00 :   7510e:  mov    0x68(%rsp),%rbx
         : 78    IO_validate_vtable():
         : 79    ./stdio-common/../libio/libioP.h:942 (discriminator 12)
    0.00 :   75113:  lea    0x1a18e6(%rip),%rcx        # 216a00 <_IO_helper_jumps>
         : 81    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   7511a:  sub    0x1a36f7(%rip),%rax        # 218818 <tryfunc.0+0x18>
         : 83    __vfprintf_internal():
         : 84    ./stdio-common/vfprintf-internal.c:1263 (discriminator 12)
    0.00 :   75121:  sub    0x8(%rsp),%rbx
         : 86    IO_validate_vtable():
         : 87    ./stdio-common/../libio/libioP.h:940 (discriminator 12)
    0.00 :   75126:  mov    %rax,0x30(%rsp)
    0.00 :   7512b:  mov    %rax,%rdi
         : 90    ./stdio-common/../libio/libioP.h:942 (discriminator 12)
    0.00 :   7512e:  mov    %r12,%rax
    0.00 :   75131:  sub    %rcx,%rax
         : 93    ./stdio-common/../libio/libioP.h:943 (discriminator 12)
    0.00 :   75134:  cmp    %rax,%rdi
    0.00 :   75137:  jbe    769d0 <__vfprintf_internal+0x19a0>
         : 96    outstring_func():
         : 97    ./stdio-common/vfprintf-internal.c:239
    0.00 :   7513d:  mov    0x8(%rsp),%rsi
    0.00 :   75142:  mov    %rbx,%rdx
    0.00 :   75145:  mov    %rbp,%rdi
    0.00 :   75148:  call   *0x38(%r12)
    0.00 :   7514d:  cmp    %rax,%rbx
    0.00 :   75150:  jne    76728 <__vfprintf_internal+0x16f8>
         : 104   done_add_func():
         : 105   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75156:  movslq %ebx,%rdx
    0.00 :   75159:  mov    %rbx,%rax
    0.00 :   7515c:  mov    %ebx,%r12d
    0.00 :   7515f:  shr    $0x3f,%rax
    0.00 :   75163:  cmp    %rdx,%rbx
    0.00 :   75166:  mov    $0x1,%edx
    0.00 :   7516b:  cmovne %edx,%eax
    0.00 :   7516e:  test   %eax,%eax
    0.00 :   75170:  jne    75860 <__vfprintf_internal+0x830>
         : 115   __vfprintf_internal():
         : 116   ./stdio-common/vfprintf-internal.c:1263
    0.00 :   75176:  test   %ebx,%ebx
    0.00 :   75178:  js     7533d <__vfprintf_internal+0x30d>
         : 119   ./stdio-common/vfprintf-internal.c:1267 (discriminator 2)
    0.00 :   7517e:  mov    0x68(%rsp),%r13
    0.00 :   75183:  cmpb   $0x0,0x0(%r13)
    0.00 :   75188:  je     7533d <__vfprintf_internal+0x30d>
         : 123   ./stdio-common/vfprintf-internal.c:1271
    0.00 :   7518e:  mov    0x1a7833(%rip),%rbx        # 21c9c8 <__printf_function_table>
    0.00 :   75195:  mov    %rbx,0x98(%rsp)
    0.00 :   7519d:  test   %rbx,%rbx
    0.00 :   751a0:  jne    77128 <__vfprintf_internal+0x20f8>
         : 128   ./stdio-common/vfprintf-internal.c:1271 (discriminator 2)
    0.00 :   751a6:  cmpq   $0x0,0x1a782a(%rip)        # 21c9d8 <__printf_modifier_table>
    0.00 :   751ae:  jne    752c8 <__vfprintf_internal+0x298>
         : 131   ./stdio-common/vfprintf-internal.c:1271
    0.00 :   751b4:  cmpq   $0x0,0x1a66fc(%rip)        # 21b8b8 <__printf_va_arg_table>
    0.00 :   751bc:  jne    752c8 <__vfprintf_internal+0x298>
         : 134   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   751c2:  mov    0x7c(%rsp),%eax
         : 136   ./stdio-common/vfprintf-internal.c:1214
    0.00 :   751c6:  movl   $0x0,0xa0(%rsp)
         : 138   ./stdio-common/vfprintf-internal.c:1248
    0.00 :   751d1:  movl   $0x0,0x78(%rsp)
         : 140   ./stdio-common/vfprintf-internal.c:1240
    0.00 :   751d9:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 142   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   751e5:  mov    %eax,%ebx
    0.00 :   751e7:  and    $0x1,%ebx
    0.00 :   751ea:  mov    %bl,0xa7(%rsp)
         : 146   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   751f1:  mov    %eax,%ebx
         : 148   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   751f3:  and    $0x2,%eax
         : 150   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   751f6:  and    $0x8,%ebx
         : 152   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   751f9:  mov    %eax,0xa8(%rsp)
         : 154   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   75200:  mov    %ebx,0xac(%rsp)
    0.00 :   75207:  nopw   0x0(%rax,%rax,1)
         : 157   ./stdio-common/vfprintf-internal.c:1313
    0.00 :   75210:  lea    0x1(%r13),%rbx
    0.00 :   75214:  movzbl 0x1(%r13),%r13d
    0.00 :   75219:  lea    0x550(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75220:  lea    -0x20(%r13),%eax
    0.00 :   75224:  cmp    $0x5a,%al
    0.00 :   75226:  ja     75251 <__vfprintf_internal+0x221>
         : 164   ./stdio-common/vfprintf-internal.c:1313 (discriminator 1)
    0.00 :   75228:  movsbl %r13b,%eax
    0.00 :   7522c:  lea    0x15c4ad(%rip),%rdx        # 1d16e0 <jump_table>
    0.00 :   75233:  lea    0x15c426(%rip),%rdi        # 1d1660 <step0_jumps.9>
    0.00 :   7523a:  sub    $0x20,%eax
    0.00 :   7523d:  cltq
    0.00 :   7523f:  movzbl (%rdx,%rax,1),%eax
    0.00 :   75243:  movslq (%rdi,%rax,4),%rsi
    0.00 :   75247:  lea    0x522(%rip),%rax        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7524e:  add    %rax,%rsi
         : 174   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
    0.00 :   75251:  mov    0x1a4d18(%rip),%rax        # 219f70 <_DYNAMIC+0x3b0>
         : 176   ./stdio-common/vfprintf-internal.c:1301 (discriminator 4)
    0.00 :   75258:  xor    %r11d,%r11d
         : 178   ./stdio-common/vfprintf-internal.c:1300 (discriminator 4)
    0.00 :   7525b:  xor    %r10d,%r10d
         : 180   ./stdio-common/vfprintf-internal.c:1299 (discriminator 4)
    0.00 :   7525e:  xor    %r15d,%r15d
         : 182   ./stdio-common/vfprintf-internal.c:1298 (discriminator 4)
    0.00 :   75261:  xor    %edx,%edx
         : 184   ./stdio-common/vfprintf-internal.c:1303 (discriminator 4)
    0.00 :   75263:  mov    $0xffffffff,%r14d
         : 186   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   75269:  lea    0x15c1f0(%rip),%r8        # 1d1460 <step4_jumps.5>
         : 188   read_int():
         : 189   ./stdio-common/printf-parse.h:88 (discriminator 4)
    0.00 :   75270:  mov    $0x7fffffff,%r9d
         : 191   __vfprintf_internal():
         : 192   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
    0.00 :   75276:  mov    %fs:(%rax),%rax
         : 194   ./stdio-common/vfprintf-internal.c:1306 (discriminator 4)
    0.00 :   7527a:  movl   $0x0,0x5c(%rsp)
         : 196   ./stdio-common/vfprintf-internal.c:1302 (discriminator 4)
    0.00 :   75282:  movl   $0x0,0x10(%rsp)
         : 198   ./stdio-common/vfprintf-internal.c:1352 (discriminator 4)
    0.00 :   7528a:  mov    %rax,0x60(%rsp)
         : 200   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   7528f:  lea    0x15c44a(%rip),%rax        # 1d16e0 <jump_table>
         : 202   ./stdio-common/vfprintf-internal.c:1295 (discriminator 4)
    0.00 :   75296:  movl   $0x0,0x50(%rsp)
         : 204   ./stdio-common/vfprintf-internal.c:1294 (discriminator 4)
    0.00 :   7529e:  movl   $0x0,0x40(%rsp)
         : 206   ./stdio-common/vfprintf-internal.c:1293 (discriminator 4)
    0.00 :   752a6:  movl   $0x0,0x28(%rsp)
         : 208   ./stdio-common/vfprintf-internal.c:1292 (discriminator 4)
    0.00 :   752ae:  movl   $0x0,0x58(%rsp)
         : 210   ./stdio-common/vfprintf-internal.c:1291 (discriminator 4)
    0.00 :   752b6:  movl   $0x0,0x4c(%rsp)
         : 212   ./stdio-common/vfprintf-internal.c:1307 (discriminator 4)
    0.00 :   752be:  movb   $0x20,0x38(%rsp)
    0.00 :   752c3:  jmp    *%rsi
    0.00 :   752c5:  nopl   (%rax)
         : 216   ./stdio-common/vfprintf-internal.c:1214
    0.00 :   752c8:  movl   $0x0,0xa0(%rsp)
         : 218   ./stdio-common/vfprintf-internal.c:1240
    0.00 :   752d3:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 220   ./stdio-common/vfprintf-internal.c:1602
    0.00 :   752df:  sub    $0x8,%rsp
    0.00 :   752e3:  mov    %r12d,%r9d
    0.00 :   752e6:  mov    %rbp,%rdi
    0.00 :   752e9:  mov    0x84(%rsp),%ebx
    0.00 :   752f0:  push   %rbx
    0.00 :   752f1:  push   0xa8(%rsp)
    0.00 :   752f8:  push   0x98(%rsp)
    0.00 :   752ff:  mov    0xb0(%rsp),%ebx
    0.00 :   75306:  push   %rbx
    0.00 :   75307:  lea    0x168(%rsp),%rdx
    0.00 :   7530f:  push   %rdx
    0.00 :   75310:  push   0x98(%rsp)
    0.00 :   75317:  push   %rax
    0.00 :   75318:  mov    0x60(%rsp),%rcx
    0.00 :   7531d:  mov    0xe0(%rsp),%edx
    0.00 :   75324:  mov    0x48(%rsp),%rsi
    0.00 :   75329:  lea    0x158(%rsp),%r8
    0.00 :   75331:  call   72b40 <printf_positional>
    0.00 :   75336:  add    $0x40,%rsp
    0.00 :   7533a:  mov    %eax,%r12d
         : 241   ./stdio-common/vfprintf-internal.c:1608
    0.00 :   7533d:  testl  $0x8000,0x0(%rbp)
    0.00 :   75344:  je     75380 <__vfprintf_internal+0x350>
         : 244   ./stdio-common/vfprintf-internal.c:1609 (discriminator 23)
    0.00 :   75346:  cmpb   $0x0,0xa6(%rsp)
    0.00 :   7534e:  jne    75588 <__vfprintf_internal+0x558>
         : 247   ./stdio-common/vfprintf-internal.c:1612
    0.00 :   75354:  mov    0x528(%rsp),%rax
    0.00 :   7535c:  sub    %fs:0x28,%rax
    0.00 :   75365:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   7536b:  add    $0x538,%rsp
    0.00 :   75372:  mov    %r12d,%eax
    0.00 :   75375:  pop    %rbx
    0.00 :   75376:  pop    %rbp
    0.00 :   75377:  pop    %r12
    0.00 :   75379:  pop    %r13
    0.00 :   7537b:  pop    %r14
    0.00 :   7537d:  pop    %r15
    0.00 :   7537f:  ret
         : 260   ./stdio-common/vfprintf-internal.c:1608 (discriminator 1)
    0.00 :   75380:  mov    0x88(%rbp),%rdi
    0.00 :   75387:  mov    0x4(%rdi),%eax
    0.00 :   7538a:  sub    $0x1,%eax
    0.00 :   7538d:  mov    %eax,0x4(%rdi)
    0.00 :   75390:  jne    75346 <__vfprintf_internal+0x316>
         : 266   ./stdio-common/vfprintf-internal.c:1608 (discriminator 3)
    0.00 :   75392:  movq   $0x0,0x8(%rdi)
    0.00 :   7539a:  xchg   %eax,(%rdi)
    0.00 :   7539c:  cmp    $0x1,%eax
    0.00 :   7539f:  jle    75346 <__vfprintf_internal+0x316>
         : 271   ./stdio-common/vfprintf-internal.c:1608 (discriminator 20)
    0.00 :   753a1:  call   91300 <__lll_lock_wake_private>
    0.00 :   753a6:  jmp    75346 <__vfprintf_internal+0x316>
    0.00 :   753a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   753b0:  endbr64
         : 276   ./stdio-common/vfprintf-internal.c:1496
    0.00 :   753b4:  endbr64
         : 278   ./stdio-common/vfprintf-internal.c:1501
    0.00 :   753b8:  movzbl 0x1(%rbx),%r13d
    0.00 :   753bd:  lea    0x1(%rbx),%rdx
    0.00 :   753c1:  lea    0x3a8(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   753c8:  lea    -0x20(%r13),%ecx
    0.00 :   753cc:  cmp    $0x5a,%cl
    0.00 :   753cf:  ja     755a0 <__vfprintf_internal+0x570>
         : 285   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753d5:  movsbl %r13b,%ecx
         : 287   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   753d9:  lea    0x390(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
         : 289   ./stdio-common/vfprintf-internal.c:1500 (discriminator 1)
    0.00 :   753e0:  mov    $0x1,%r10d
         : 291   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753e6:  sub    $0x20,%ecx
    0.00 :   753e9:  movslq %ecx,%rcx
    0.00 :   753ec:  movzbl (%rax,%rcx,1),%ecx
         : 295   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   753f0:  movslq (%r8,%rcx,4),%rsi
    0.00 :   753f4:  add    %rbx,%rsi
         : 298   ./stdio-common/vfprintf-internal.c:1501 (discriminator 1)
    0.00 :   753f7:  mov    %rdx,%rbx
         : 300   ./stdio-common/vfprintf-internal.c:1499 (discriminator 1)
    0.00 :   753fa:  xor    %edx,%edx
    0.00 :   753fc:  jmp    *%rsi
    0.00 :   753fe:  xchg   %ax,%ax
    0.00 :   75400:  endbr64
    0.00 :   75404:  endbr64
         : 306   ./stdio-common/vfprintf-internal.c:1532
    0.00 :   75408:  cmpb   $0x0,0xa7(%rsp)
    0.00 :   75410:  jne    771e5 <__vfprintf_internal+0x21b5>
         : 309   ./stdio-common/vfprintf-internal.c:1535
    0.00 :   75416:  mov    %edx,%ecx
    0.00 :   75418:  and    $0x1,%ecx
    0.00 :   7541b:  mov    0x10(%rsp),%eax
    0.00 :   7541f:  movzbl %cl,%ecx
    0.00 :   75422:  movsbl %r13b,%r13d
    0.00 :   75426:  movl   $0x0,0xdc(%rsp)
    0.00 :   75431:  mov    %r14d,0xd0(%rsp)
    0.00 :   75439:  mov    %eax,0xd4(%rsp)
    0.00 :   75440:  lea    (%r15,%r15,1),%eax
    0.00 :   75444:  or     %ecx,%eax
    0.00 :   75446:  lea    0x0(,%r10,4),%ecx
    0.00 :   7544e:  mov    %r13d,0xd8(%rsp)
    0.00 :   75456:  or     %ecx,%eax
    0.00 :   75458:  movzwl 0x4c(%rsp),%ecx
    0.00 :   7545d:  shl    $0x3,%ecx
    0.00 :   75460:  or     %ecx,%eax
    0.00 :   75462:  movzwl 0x58(%rsp),%ecx
    0.00 :   75467:  shl    $0x4,%ecx
    0.00 :   7546a:  or     %ecx,%eax
    0.00 :   7546c:  movzwl 0x28(%rsp),%ecx
    0.00 :   75471:  shl    $0x5,%ecx
    0.00 :   75474:  or     %ecx,%eax
    0.00 :   75476:  movzwl 0x40(%rsp),%ecx
    0.00 :   7547b:  shl    $0x6,%ecx
    0.00 :   7547e:  or     %ecx,%eax
    0.00 :   75480:  movzwl 0x50(%rsp),%ecx
    0.00 :   75485:  shl    $0x7,%ecx
    0.00 :   75488:  or     %ecx,%eax
    0.00 :   7548a:  movzwl 0x5c(%rsp),%ecx
    0.00 :   7548f:  shl    $0xb,%ecx
    0.00 :   75492:  or     %ecx,%eax
    0.00 :   75494:  mov    %ax,0xdc(%rsp)
    0.00 :   7549c:  movzbl 0x38(%rsp),%eax
    0.00 :   754a1:  mov    %eax,0xe0(%rsp)
         : 344   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   754a8:  test   %edx,%edx
    0.00 :   754aa:  je     755b0 <__vfprintf_internal+0x580>
         : 347   ./stdio-common/vfprintf-internal.c:1555 (discriminator 1)
    0.00 :   754b0:  mov    0xac(%rsp),%esi
    0.00 :   754b7:  test   %esi,%esi
    0.00 :   754b9:  je     768a0 <__vfprintf_internal+0x1870>
         : 351   ./stdio-common/vfprintf-internal.c:1555 (discriminator 3)
    0.00 :   754bf:  mov    0x20(%rsp),%rcx
    0.00 :   754c4:  orb    $0x10,0xdd(%rsp)
    0.00 :   754cc:  mov    0x4(%rcx),%edx
    0.00 :   754cf:  cmp    $0xaf,%edx
    0.00 :   754d5:  ja     76d80 <__vfprintf_internal+0x1d50>
         : 357   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   754db:  mov    %edx,%eax
    0.00 :   754dd:  add    $0x10,%edx
    0.00 :   754e0:  add    0x10(%rcx),%rax
    0.00 :   754e4:  mov    %edx,0x4(%rcx)
    0.00 :   754e7:  movdqa (%rax),%xmm3
    0.00 :   754eb:  movaps %xmm3,0xc0(%rsp)
    0.00 :   754f3:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   754f8:  nopl   0x0(%rax,%rax,1)
         : 366   ./stdio-common/vfprintf-internal.c:1218 (discriminator 5)
   14.70 :   75500:  cmp    $0xffffffff,%eax
    0.00 :   75503:  je     75090 <__vfprintf_internal+0x60>
         : 369   ./stdio-common/vfprintf-internal.c:1218
    0.00 :   75509:  mov    $0xffffffff,%r12d
    0.00 :   7550f:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   75514:  nopl   0x0(%rax)
         : 373   ./stdio-common/vfprintf-internal.c:1259 (discriminator 1)
    0.00 :   75518:  mov    0x1a4a21(%rip),%rax        # 219f40 <_IO_funlockfile@@GLIBC_2.2.5+0x1b7ef0>
    0.00 :   7551f:  lea    0xf0(%rsp),%rdi
    0.00 :   75527:  mov    %rax,0xf0(%rsp)
    0.00 :   7552f:  call   911c0 <__GI___libc_cleanup_push_defer>
         : 378   ./stdio-common/vfprintf-internal.c:1260 (discriminator 1)
    0.00 :   75534:  mov    0x0(%rbp),%eax
    0.00 :   75537:  and    $0x8000,%eax
    0.00 :   7553c:  jne    77590 <__vfprintf_internal+0x2560>
    0.00 :   75542:  mov    %fs:0x10,%rbx
    0.00 :   7554b:  mov    0x88(%rbp),%rdi
    0.00 :   75552:  cmp    %rbx,0x8(%rdi)
    0.00 :   75556:  je     75572 <__vfprintf_internal+0x542>
         : 386   ./stdio-common/vfprintf-internal.c:1260 (discriminator 3)
    0.00 :   75558:  mov    $0x1,%edx
    0.00 :   7555d:  lock cmpxchg %edx,(%rdi)
    0.00 :   75561:  jne    76ee0 <__vfprintf_internal+0x1eb0>
         : 390   ./stdio-common/vfprintf-internal.c:1260 (discriminator 10)
    0.00 :   75567:  mov    0x88(%rbp),%rdi
    0.00 :   7556e:  mov    %rbx,0x8(%rdi)
         : 393   ./stdio-common/vfprintf-internal.c:1260 (discriminator 11)
    0.00 :   75572:  addl   $0x1,0x4(%rdi)
         : 395   ./stdio-common/vfprintf-internal.c:1259 (discriminator 11)
    0.00 :   75576:  movb   $0x1,0xa6(%rsp)
    0.00 :   7557e:  jmp    75100 <__vfprintf_internal+0xd0>
    0.00 :   75583:  nopl   0x0(%rax,%rax,1)
         : 399   ./stdio-common/vfprintf-internal.c:1609 (discriminator 1)
    0.00 :   75588:  lea    0xf0(%rsp),%rdi
    0.00 :   75590:  call   91200 <__GI___libc_cleanup_pop_restore>
         : 402   ./stdio-common/vfprintf-internal.c:1611 (discriminator 1)
    0.00 :   75595:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7559a:  nopw   0x0(%rax,%rax,1)
         : 405   ./stdio-common/vfprintf-internal.c:1501 (discriminator 4)
    0.00 :   755a0:  mov    %rdx,%rbx
         : 407   ./stdio-common/vfprintf-internal.c:1500 (discriminator 4)
    0.00 :   755a3:  mov    $0x1,%r10d
         : 409   ./stdio-common/vfprintf-internal.c:1499 (discriminator 4)
    0.00 :   755a9:  xor    %edx,%edx
    0.00 :   755ab:  jmp    *%rsi
    0.00 :   755ad:  nopl   (%rax)
         : 413   ./stdio-common/vfprintf-internal.c:1555
    0.00 :   755b0:  mov    0x20(%rsp),%rsi
    0.00 :   755b5:  mov    0x4(%rsi),%eax
   18.11 :   755b8:  cmp    $0xaf,%eax
    0.00 :   755bd:  ja     76d00 <__vfprintf_internal+0x1cd0>
    0.00 :   755c3:  mov    %eax,%edx
    0.00 :   755c5:  add    $0x10,%eax
    0.00 :   755c8:  add    0x10(%rsi),%rdx
    0.00 :   755cc:  mov    %eax,0x4(%rsi)
    0.00 :   755cf:  movsd  (%rdx),%xmm0
    0.00 :   755d3:  movsd  %xmm0,0xc0(%rsp)
    0.00 :   755dc:  jmp    768c7 <__vfprintf_internal+0x1897>
    0.00 :   755e1:  nopl   0x0(%rax)
    0.00 :   755e8:  endbr64
         : 427   ./stdio-common/vfprintf-internal.c:1517 (discriminator 3)
    0.00 :   755ec:  mov    0x20(%rsp),%rsi
    0.00 :   755f1:  lea    0x110(%rsp),%rdx
    0.00 :   755f9:  movq   $0x0,0x110(%rsp)
    0.00 :   75605:  mov    (%rsi),%eax
    0.00 :   75607:  cmp    $0x2f,%eax
    0.00 :   7560a:  ja     769e0 <__vfprintf_internal+0x19b0>
         : 434   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75610:  mov    %eax,%ecx
    0.00 :   75612:  add    $0x8,%eax
    0.00 :   75615:  add    0x10(%rsi),%rcx
    0.00 :   75619:  mov    %eax,(%rsi)
    0.00 :   7561b:  mov    (%rcx),%esi
    0.00 :   7561d:  lea    0x130(%rsp),%r15
    0.00 :   75625:  mov    %r15,%rdi
    0.00 :   75628:  call   c61e0 <wcrtomb>
    0.00 :   7562d:  mov    %rax,%r14
    0.00 :   75630:  cmp    $0xffffffffffffffff,%rax
    0.00 :   75634:  je     76728 <__vfprintf_internal+0x16f8>
         : 446   ./stdio-common/vfprintf-internal.c:1517 (discriminator 20)
    0.00 :   7563a:  mov    0x10(%rsp),%r13d
    0.00 :   7563f:  mov    0x28(%rsp),%r10d
    0.00 :   75644:  sub    %eax,%r13d
    0.00 :   75647:  test   %r10d,%r10d
    0.00 :   7564a:  jne    75655 <__vfprintf_internal+0x625>
         : 452   pad_func():
         : 453   ./stdio-common/vfprintf-internal.c:192
    0.00 :   7564c:  test   %r13d,%r13d
    0.00 :   7564f:  jg     76d39 <__vfprintf_internal+0x1d09>
         : 456   outstring_func():
         : 457   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75655:  mov    0xd8(%rbp),%rax
         : 459   IO_validate_vtable():
         : 460   ./stdio-common/../libio/libioP.h:942
    0.00 :   7565c:  lea    0x1a139d(%rip),%rcx        # 216a00 <_IO_helper_jumps>
    0.00 :   75663:  mov    %rax,%rdx
    0.00 :   75666:  sub    %rcx,%rdx
         : 464   ./stdio-common/../libio/libioP.h:943
    0.00 :   75669:  cmp    %rdx,0x30(%rsp)
    0.00 :   7566e:  jbe    77251 <__vfprintf_internal+0x2221>
         : 467   outstring_func():
         : 468   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75674:  mov    %r14,%rdx
    0.00 :   75677:  mov    %r15,%rsi
    0.00 :   7567a:  mov    %rbp,%rdi
    0.00 :   7567d:  call   *0x38(%rax)
    0.00 :   75680:  cmp    %rax,%r14
    0.00 :   75683:  jne    76728 <__vfprintf_internal+0x16f8>
         : 475   done_add_func():
         : 476   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75689:  movslq %r12d,%rax
    0.00 :   7568c:  xor    %edx,%edx
    0.00 :   7568e:  add    %r14,%rax
    0.00 :   75691:  js     7757c <__vfprintf_internal+0x254c>
    0.00 :   75697:  cmp    %r14,%rax
    0.00 :   7569a:  jb     7757c <__vfprintf_internal+0x254c>
    0.00 :   756a0:  movslq %eax,%rcx
    0.00 :   756a3:  mov    %eax,%r12d
    0.00 :   756a6:  cmp    %rcx,%rax
    0.00 :   756a9:  mov    $0x1,%ecx
    0.00 :   756ae:  cmovne %ecx,%edx
    0.00 :   756b1:  test   %edx,%edx
    0.00 :   756b3:  jne    75860 <__vfprintf_internal+0x830>
         : 490   __vfprintf_internal():
         : 491   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   756b9:  test   %eax,%eax
    0.00 :   756bb:  js     7533d <__vfprintf_internal+0x30d>
         : 494   ./stdio-common/vfprintf-internal.c:1517 (discriminator 28)
    0.00 :   756c1:  mov    0x28(%rsp),%r9d
    0.00 :   756c6:  test   %r9d,%r9d
    0.00 :   756c9:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   756cf:  nop
         : 499   pad_func():
         : 500   ./stdio-common/vfprintf-internal.c:192
    0.00 :   756d0:  test   %r13d,%r13d
    0.00 :   756d3:  jle    75f80 <__vfprintf_internal+0xf50>
         : 503   ./stdio-common/vfprintf-internal.c:196
    0.00 :   756d9:  movslq %r13d,%r13
    0.00 :   756dc:  mov    $0x20,%esi
    0.00 :   756e1:  mov    %rbp,%rdi
    0.00 :   756e4:  mov    %r13,%rdx
    0.00 :   756e7:  call   806a0 <_IO_padn>
         : 509   ./stdio-common/vfprintf-internal.c:200
    0.00 :   756ec:  cmp    %rax,%r13
    0.00 :   756ef:  jne    76728 <__vfprintf_internal+0x16f8>
         : 512   done_add_func():
         : 513   ./stdio-common/vfprintf-internal.c:127
    0.00 :   756f5:  add    %r12d,%r13d
    0.00 :   756f8:  mov    %r13d,%r12d
    0.00 :   756fb:  jo     75860 <__vfprintf_internal+0x830>
         : 517   __vfprintf_internal():
         : 518   ./stdio-common/vfprintf-internal.c:1564
    0.00 :   75701:  test   %r12d,%r12d
    0.00 :   75704:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   7570a:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7570f:  nop
    0.00 :   75710:  endbr64
         : 524   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75714:  mov    0x20(%rsp),%rdi
    0.00 :   75719:  mov    (%rdi),%eax
    0.00 :   7571b:  cmp    $0x2f,%eax
    0.00 :   7571e:  ja     76c18 <__vfprintf_internal+0x1be8>
    0.00 :   75724:  mov    %eax,%edx
    0.00 :   75726:  add    $0x8,%eax
    0.00 :   75729:  add    0x10(%rdi),%rdx
    0.00 :   7572d:  mov    %eax,(%rdi)
    0.00 :   7572f:  mov    (%rdx),%r15
    0.00 :   75732:  mov    %r10d,%eax
    0.00 :   75735:  xor    $0x1,%eax
    0.00 :   75738:  test   %r15,%r15
    0.00 :   7573b:  jne    758af <__vfprintf_internal+0x87f>
         : 538   ./stdio-common/vfprintf-internal.c:1517 (discriminator 36)
    0.00 :   75741:  cmp    $0xffffffff,%r14d
    0.00 :   75745:  je     76f38 <__vfprintf_internal+0x1f08>
    0.00 :   7574b:  cmp    $0x5,%r14d
    0.00 :   7574f:  jg     76f38 <__vfprintf_internal+0x1f08>
         : 543   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75755:  xor    %eax,%eax
    0.00 :   75757:  xor    %r14d,%r14d
    0.00 :   7575a:  lea    0x162cee(%rip),%r15        # 1d844f <dir_suffix+0x16e>
    0.00 :   75761:  jmp    758d9 <__vfprintf_internal+0x8a9>
    0.00 :   75766:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   75770:  endbr64
         : 550   ./stdio-common/vfprintf-internal.c:1569
    0.00 :   75774:  test   %r13b,%r13b
    0.00 :   75777:  jne    76a88 <__vfprintf_internal+0x1a58>
         : 553   ./stdio-common/vfprintf-internal.c:1572
    0.00 :   7577d:  mov    0x1a468c(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
         : 555   ./stdio-common/vfprintf-internal.c:1573
    0.00 :   75784:  mov    $0xffffffff,%r12d
         : 557   ./stdio-common/vfprintf-internal.c:1572
    0.00 :   7578a:  movl   $0x16,%fs:(%rax)
         : 559   ./stdio-common/vfprintf-internal.c:1574
    0.00 :   75791:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75796:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   757a0:  endbr64
         : 563   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   757a4:  test   %r10d,%r10d
    0.00 :   757a7:  jne    755e8 <__vfprintf_internal+0x5b8>
         : 566   ./stdio-common/vfprintf-internal.c:1517 (discriminator 2)
    0.00 :   757ad:  mov    0x10(%rsp),%r13d
    0.00 :   757b2:  mov    0x28(%rsp),%r14d
    0.00 :   757b7:  sub    $0x1,%r13d
    0.00 :   757bb:  test   %r14d,%r14d
    0.00 :   757be:  je     76e97 <__vfprintf_internal+0x1e67>
         : 572   ./stdio-common/vfprintf-internal.c:1517 (discriminator 7)
    0.00 :   757c4:  mov    0x20(%rsp),%rdi
    0.00 :   757c9:  mov    (%rdi),%eax
    0.00 :   757cb:  cmp    $0x2f,%eax
    0.00 :   757ce:  ja     76d18 <__vfprintf_internal+0x1ce8>
         : 577   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   757d4:  mov    %eax,%edx
    0.00 :   757d6:  add    $0x8,%eax
    0.00 :   757d9:  add    0x10(%rdi),%rdx
    0.00 :   757dd:  mov    %eax,(%rdi)
    0.00 :   757df:  mov    (%rdx),%edx
    0.00 :   757e1:  mov    0x28(%rbp),%rax
    0.00 :   757e5:  cmp    0x30(%rbp),%rax
    0.00 :   757e9:  jae    773d1 <__vfprintf_internal+0x23a1>
         : 586   ./stdio-common/vfprintf-internal.c:1517 (discriminator 9)
    0.00 :   757ef:  lea    0x1(%rax),%rcx
    0.00 :   757f3:  mov    %rcx,0x28(%rbp)
    0.00 :   757f7:  mov    %dl,(%rax)
         : 590   ./stdio-common/vfprintf-internal.c:1517 (discriminator 12)
    0.00 :   757f9:  cmp    $0x7fffffff,%r12d
    0.00 :   75800:  je     76728 <__vfprintf_internal+0x16f8>
         : 593   ./stdio-common/vfprintf-internal.c:1517 (discriminator 14)
    0.00 :   75806:  mov    0x28(%rsp),%r11d
    0.00 :   7580b:  add    $0x1,%r12d
    0.00 :   7580f:  test   %r11d,%r11d
    0.00 :   75812:  je     75f80 <__vfprintf_internal+0xf50>
         : 598   pad_func():
         : 599   ./stdio-common/vfprintf-internal.c:192
    0.00 :   75818:  test   %r13d,%r13d
    0.00 :   7581b:  jle    75f80 <__vfprintf_internal+0xf50>
         : 602   ./stdio-common/vfprintf-internal.c:196
    0.00 :   75821:  movslq %r13d,%r14
    0.00 :   75824:  mov    $0x20,%esi
    0.00 :   75829:  mov    %rbp,%rdi
    0.00 :   7582c:  mov    %r14,%rdx
    0.00 :   7582f:  call   806a0 <_IO_padn>
         : 608   ./stdio-common/vfprintf-internal.c:200
    0.00 :   75834:  cmp    %rax,%r14
    0.00 :   75837:  jne    76728 <__vfprintf_internal+0x16f8>
         : 611   done_add_func():
         : 612   ./stdio-common/vfprintf-internal.c:127
    0.00 :   7583d:  xor    %eax,%eax
    0.00 :   7583f:  add    %r13d,%r12d
    0.00 :   75842:  js     77572 <__vfprintf_internal+0x2542>
    0.00 :   75848:  cmp    %r13d,%r12d
    0.00 :   7584b:  jb     77572 <__vfprintf_internal+0x2542>
    0.00 :   75851:  test   %eax,%eax
    0.00 :   75853:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   75859:  nopl   0x0(%rax)
         : 621   ./stdio-common/vfprintf-internal.c:129
    0.00 :   75860:  mov    0x1a45a9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
         : 623   ./stdio-common/vfprintf-internal.c:130
    0.00 :   75867:  mov    $0xffffffff,%r12d
         : 625   ./stdio-common/vfprintf-internal.c:129
    0.00 :   7586d:  movl   $0x4b,%fs:(%rax)
         : 627   __vfprintf_internal():
         : 628   ./stdio-common/vfprintf-internal.c:1564
    0.00 :   75874:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75879:  nopl   0x0(%rax)
    0.00 :   75880:  endbr64
         : 632   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75884:  mov    0x4c(%rsp),%r15d
    0.00 :   75889:  test   %r15d,%r15d
    0.00 :   7588c:  je     76bf0 <__vfprintf_internal+0x1bc0>
         : 636   ./stdio-common/vfprintf-internal.c:1516 (discriminator 243)
    0.00 :   75892:  mov    0x90(%rsp),%edi
    0.00 :   75899:  call   7d2c0 <__get_errname>
    0.00 :   7589e:  mov    %rax,%r15
         : 640   ./stdio-common/vfprintf-internal.c:1516 (discriminator 246)
    0.00 :   758a1:  mov    $0x1,%eax
    0.00 :   758a6:  test   %r15,%r15
    0.00 :   758a9:  je     77150 <__vfprintf_internal+0x2120>
         : 644   ./stdio-common/vfprintf-internal.c:1517 (discriminator 37)
    0.00 :   758af:  cmp    $0x53,%r13b
    0.00 :   758b3:  je     76ca0 <__vfprintf_internal+0x1c70>
    0.00 :   758b9:  test   %al,%al
    0.00 :   758bb:  je     76ca0 <__vfprintf_internal+0x1c70>
         : 649   ./stdio-common/vfprintf-internal.c:1517 (discriminator 40)
    0.00 :   758c1:  cmp    $0xffffffff,%r14d
    0.00 :   758c5:  je     76d29 <__vfprintf_internal+0x1cf9>
         : 652   ./stdio-common/vfprintf-internal.c:1517 (discriminator 42)
    0.00 :   758cb:  movslq %r14d,%rsi
    0.00 :   758ce:  mov    %r15,%rdi
    0.00 :   758d1:  call   28390 <*ABS*+0xa8720@plt>
    0.00 :   758d6:  mov    %rax,%r14
         : 657   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   758d9:  mov    0x10(%rsp),%r13d
    0.00 :   758de:  sub    %eax,%r13d
    0.00 :   758e1:  js     76fe0 <__vfprintf_internal+0x1fb0>
         : 661   ./stdio-common/vfprintf-internal.c:1517 (discriminator 47)
    0.00 :   758e7:  mov    0x28(%rsp),%r8d
    0.00 :   758ec:  test   %r8d,%r8d
    0.00 :   758ef:  jne    758fa <__vfprintf_internal+0x8ca>
         : 665   pad_func():
         : 666   ./stdio-common/vfprintf-internal.c:192
    0.00 :   758f1:  test   %r13d,%r13d
    0.00 :   758f4:  jne    76dfd <__vfprintf_internal+0x1dcd>
         : 669   outstring_func():
         : 670   ./stdio-common/vfprintf-internal.c:239
    0.00 :   758fa:  mov    0xd8(%rbp),%rax
         : 672   IO_validate_vtable():
         : 673   ./stdio-common/../libio/libioP.h:942
    0.00 :   75901:  lea    0x1a10f8(%rip),%rcx        # 216a00 <_IO_helper_jumps>
    0.00 :   75908:  mov    %rax,%rdx
    0.00 :   7590b:  sub    %rcx,%rdx
         : 677   ./stdio-common/../libio/libioP.h:943
    0.00 :   7590e:  cmp    %rdx,0x30(%rsp)
    0.00 :   75913:  jbe    7729c <__vfprintf_internal+0x226c>
         : 680   outstring_func():
         : 681   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75919:  mov    %r14,%rdx
    0.00 :   7591c:  mov    %r15,%rsi
    0.00 :   7591f:  mov    %rbp,%rdi
    0.00 :   75922:  call   *0x38(%rax)
    0.00 :   75925:  cmp    %r14,%rax
    0.00 :   75928:  jne    76728 <__vfprintf_internal+0x16f8>
         : 688   done_add_func():
         : 689   ./stdio-common/vfprintf-internal.c:127
    0.00 :   7592e:  movslq %r12d,%rax
    0.00 :   75931:  xor    %edx,%edx
    0.00 :   75933:  add    %r14,%rax
    0.00 :   75936:  js     77537 <__vfprintf_internal+0x2507>
    0.00 :   7593c:  cmp    %r14,%rax
    0.00 :   7593f:  jb     77537 <__vfprintf_internal+0x2507>
    0.00 :   75945:  movslq %eax,%rcx
    0.00 :   75948:  mov    %eax,%r12d
    0.00 :   7594b:  cmp    %rcx,%rax
    0.00 :   7594e:  mov    $0x1,%ecx
    0.00 :   75953:  cmovne %ecx,%edx
    0.00 :   75956:  test   %edx,%edx
    0.00 :   75958:  jne    75860 <__vfprintf_internal+0x830>
         : 703   __vfprintf_internal():
         : 704   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   7595e:  test   %eax,%eax
    0.00 :   75960:  js     7533d <__vfprintf_internal+0x30d>
         : 707   ./stdio-common/vfprintf-internal.c:1517 (discriminator 55)
    0.00 :   75966:  mov    0x28(%rsp),%edi
    0.00 :   7596a:  test   %edi,%edi
    0.00 :   7596c:  je     75f80 <__vfprintf_internal+0xf50>
         : 711   pad_func():
         : 712   ./stdio-common/vfprintf-internal.c:192
    0.00 :   75972:  test   %r13d,%r13d
    0.00 :   75975:  je     75f80 <__vfprintf_internal+0xf50>
    0.00 :   7597b:  jmp    756d9 <__vfprintf_internal+0x6a9>
    0.00 :   75980:  endbr64
         : 717   __vfprintf_internal():
         : 718   ./stdio-common/vfprintf-internal.c:1486
    0.00 :   75984:  movzbl 0x1(%rbx),%r13d
    0.00 :   75989:  lea    0x1(%rbx),%rdx
    0.00 :   7598d:  lea    -0x224(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75994:  lea    -0x20(%r13),%ecx
    0.00 :   75998:  cmp    $0x5a,%cl
    0.00 :   7599b:  ja     76b60 <__vfprintf_internal+0x1b30>
         : 725   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759a1:  movsbl %r13b,%ecx
         : 727   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   759a5:  lea    -0x23c(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
         : 729   ./stdio-common/vfprintf-internal.c:1485 (discriminator 1)
    0.00 :   759ac:  mov    $0x1,%r10d
         : 731   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759b2:  sub    $0x20,%ecx
    0.00 :   759b5:  movslq %ecx,%rcx
    0.00 :   759b8:  movzbl (%rax,%rcx,1),%ecx
         : 735   ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   759bc:  movslq (%r8,%rcx,4),%rsi
    0.00 :   759c0:  add    %rbx,%rsi
         : 738   ./stdio-common/vfprintf-internal.c:1486 (discriminator 1)
    0.00 :   759c3:  mov    %rdx,%rbx
         : 740   ./stdio-common/vfprintf-internal.c:1484 (discriminator 1)
    0.00 :   759c6:  mov    $0x1,%edx
    0.00 :   759cb:  jmp    *%rsi
    0.00 :   759cd:  nopl   (%rax)
    0.00 :   759d0:  endbr64
         : 745   ./stdio-common/vfprintf-internal.c:1479
    0.00 :   759d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   759d9:  lea    0x1(%rbx),%rcx
    0.00 :   759dd:  lea    -0x274(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   759e4:  lea    -0x20(%r13),%edi
    0.00 :   759e8:  cmp    $0x5a,%dil
    0.00 :   759ec:  ja     76ba8 <__vfprintf_internal+0x1b78>
         : 752   ./stdio-common/vfprintf-internal.c:1479 (discriminator 1)
    0.00 :   759f2:  movsbl %r13b,%esi
    0.00 :   759f6:  lea    0x15b9e3(%rip),%rbx        # 1d13e0 <step3b_jumps.4>
         : 755   ./stdio-common/vfprintf-internal.c:1478 (discriminator 1)
    0.00 :   759fd:  mov    $0x1,%r10d
         : 757   ./stdio-common/vfprintf-internal.c:1479 (discriminator 1)
    0.00 :   75a03:  sub    $0x20,%esi
    0.00 :   75a06:  movslq %esi,%rsi
    0.00 :   75a09:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75a0d:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75a11:  lea    -0x2a8(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75a18:  add    %rbx,%rsi
    0.00 :   75a1b:  mov    %rcx,%rbx
    0.00 :   75a1e:  jmp    *%rsi
    0.00 :   75a20:  endbr64
         : 767   ./stdio-common/vfprintf-internal.c:1516 (discriminator 33)
    0.00 :   75a24:  movl   $0x2,0x60(%rsp)
         : 769   ./stdio-common/vfprintf-internal.c:1392 (discriminator 30)
    0.00 :   75a2c:  mov    0x20(%rsp),%rdi
    0.00 :   75a31:  mov    (%rdi),%eax
         : 772   ./stdio-common/vfprintf-internal.c:1516 (discriminator 30)
    0.00 :   75a33:  test   %r10d,%r10d
    0.00 :   75a36:  je     7604c <__vfprintf_internal+0x101c>
         : 775   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75a3c:  cmp    $0x2f,%eax
    0.00 :   75a3f:  ja     76850 <__vfprintf_internal+0x1820>
    0.00 :   75a45:  mov    %eax,%edx
    0.00 :   75a47:  add    $0x8,%eax
    0.00 :   75a4a:  add    0x10(%rdi),%rdx
    0.00 :   75a4e:  mov    %eax,(%rdi)
    0.00 :   75a50:  movl   $0x0,0x40(%rsp)
    0.00 :   75a58:  mov    (%rdx),%r11
    0.00 :   75a5b:  xor    %r10d,%r10d
    0.00 :   75a5e:  movl   $0x0,0x58(%rsp)
         : 786   ./stdio-common/vfprintf-internal.c:1516 (discriminator 252)
    0.00 :   75a66:  cmp    $0xffffffff,%r14d
    0.00 :   75a6a:  je     76090 <__vfprintf_internal+0x1060>
         : 789   ./stdio-common/vfprintf-internal.c:1516 (discriminator 66)
    0.00 :   75a70:  test   %r14d,%r14d
    0.00 :   75a73:  je     76560 <__vfprintf_internal+0x1530>
         : 792   ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75a79:  movslq %r14d,%rax
    0.00 :   75a7c:  movb   $0x20,0x38(%rsp)
    0.00 :   75a81:  mov    %rax,0x70(%rsp)
         : 796   ./stdio-common/vfprintf-internal.c:1516 (discriminator 70)
    0.00 :   75a86:  xor    %ecx,%ecx
    0.00 :   75a88:  mov    0x60(%rsp),%edx
    0.00 :   75a8c:  cmp    $0x58,%r13b
    0.00 :   75a90:  mov    %r11,%rdi
    0.00 :   75a93:  lea    0x528(%rsp),%r14
    0.00 :   75a9b:  sete   %cl
    0.00 :   75a9e:  mov    %r10d,0x94(%rsp)
    0.00 :   75aa6:  lea    0x140(%rsp),%r15
    0.00 :   75aae:  mov    %r14,%rsi
    0.00 :   75ab1:  mov    %r11,0x88(%rsp)
    0.00 :   75ab9:  call   5a230 <_itoa_word>
    0.00 :   75abe:  mov    0x80(%rsp),%rcx
    0.00 :   75ac6:  mov    0x88(%rsp),%r11
    0.00 :   75ace:  mov    0x94(%rsp),%r10d
    0.00 :   75ad6:  mov    %rax,%r9
    0.00 :   75ad9:  test   %rcx,%rcx
    0.00 :   75adc:  je     75b19 <__vfprintf_internal+0xae9>
    0.00 :   75ade:  mov    0x50(%rsp),%eax
    0.00 :   75ae2:  test   %eax,%eax
    0.00 :   75ae4:  je     75b19 <__vfprintf_internal+0xae9>
         : 817   ./stdio-common/vfprintf-internal.c:1516 (discriminator 72)
    0.00 :   75ae6:  mov    %r9,%rsi
    0.00 :   75ae9:  mov    %r14,%rdx
    0.00 :   75aec:  mov    %r15,%rdi
    0.00 :   75aef:  mov    %r11,0x50(%rsp)
    0.00 :   75af4:  mov    0x98(%rsp),%r8
    0.00 :   75afc:  mov    %r10d,0x88(%rsp)
    0.00 :   75b04:  call   72140 <group_number>
    0.00 :   75b09:  mov    0x88(%rsp),%r10d
    0.00 :   75b11:  mov    0x50(%rsp),%r11
    0.00 :   75b16:  mov    %rax,%r9
         : 828   ./stdio-common/vfprintf-internal.c:1516 (discriminator 74)
    0.00 :   75b19:  cmpl   $0xa,0x60(%rsp)
    0.00 :   75b1e:  jne    75b4d <__vfprintf_internal+0xb1d>
    0.00 :   75b20:  mov    0x5c(%rsp),%eax
    0.00 :   75b24:  test   %eax,%eax
    0.00 :   75b26:  je     75b4d <__vfprintf_internal+0xb1d>
         : 834   ./stdio-common/vfprintf-internal.c:1516 (discriminator 75)
    0.00 :   75b28:  mov    %r9,%rdi
    0.00 :   75b2b:  mov    %r14,%rdx
    0.00 :   75b2e:  mov    %r14,%rsi
    0.00 :   75b31:  mov    %r10d,0x5c(%rsp)
    0.00 :   75b36:  mov    %r11,0x50(%rsp)
    0.00 :   75b3b:  call   72340 <_i18n_number_rewrite>
    0.00 :   75b40:  mov    0x5c(%rsp),%r10d
    0.00 :   75b45:  mov    0x50(%rsp),%r11
    0.00 :   75b4a:  mov    %rax,%r9
         : 844   ./stdio-common/vfprintf-internal.c:1516 (discriminator 77)
    0.00 :   75b4d:  mov    %r14,%r15
    0.00 :   75b50:  sub    %r9,%r15
    0.00 :   75b53:  cmp    0x70(%rsp),%r15
    0.00 :   75b58:  jge    765c0 <__vfprintf_internal+0x1590>
         : 849   ./stdio-common/vfprintf-internal.c:1516 (discriminator 84)
    0.00 :   75b5e:  mov    0x70(%rsp),%rdx
    0.00 :   75b63:  mov    $0x0,%eax
    0.00 :   75b68:  mov    0x28(%rsp),%r8d
    0.00 :   75b6d:  sub    %r15,%rdx
    0.00 :   75b70:  cmovs  %rax,%rdx
    0.00 :   75b74:  mov    %edx,%r14d
    0.00 :   75b77:  test   %r8d,%r8d
    0.00 :   75b7a:  jne    76440 <__vfprintf_internal+0x1410>
         : 858   ./stdio-common/vfprintf-internal.c:1516 (discriminator 85)
    0.00 :   75b80:  mov    0x10(%rsp),%r8d
    0.00 :   75b85:  sub    %r15d,%r8d
    0.00 :   75b88:  sub    %edx,%r8d
    0.00 :   75b8b:  test   %r11,%r11
    0.00 :   75b8e:  je     75baf <__vfprintf_internal+0xb7f>
         : 864   ./stdio-common/vfprintf-internal.c:1516 (discriminator 87)
    0.00 :   75b90:  mov    0x4c(%rsp),%edi
    0.00 :   75b94:  test   %edi,%edi
    0.00 :   75b96:  je     75baf <__vfprintf_internal+0xb7f>
         : 868   ./stdio-common/vfprintf-internal.c:1516 (discriminator 89)
    0.00 :   75b98:  movzbl 0x60(%rsp),%ecx
    0.00 :   75b9d:  mov    $0x10004,%eax
    0.00 :   75ba2:  lea    -0x2(%r8),%edx
    0.00 :   75ba6:  shr    %cl,%rax
    0.00 :   75ba9:  test   $0x1,%al
    0.00 :   75bab:  cmovne %edx,%r8d
         : 875   ./stdio-common/vfprintf-internal.c:1516 (discriminator 93)
    0.00 :   75baf:  mov    0x58(%rsp),%eax
    0.00 :   75bb3:  or     %r10d,%eax
    0.00 :   75bb6:  or     0x40(%rsp),%eax
    0.00 :   75bba:  je     76660 <__vfprintf_internal+0x1630>
         : 880   ./stdio-common/vfprintf-internal.c:1516 (discriminator 94)
    0.00 :   75bc0:  sub    $0x1,%r8d
    0.00 :   75bc4:  cmpb   $0x20,0x38(%rsp)
    0.00 :   75bc9:  je     77561 <__vfprintf_internal+0x2531>
         : 884   ./stdio-common/vfprintf-internal.c:1516 (discriminator 101)
    0.00 :   75bcf:  test   %r10d,%r10d
    0.00 :   75bd2:  je     767d0 <__vfprintf_internal+0x17a0>
         : 887   ./stdio-common/vfprintf-internal.c:1516 (discriminator 102)
    0.00 :   75bd8:  mov    0x28(%rbp),%rax
    0.00 :   75bdc:  cmp    0x30(%rbp),%rax
    0.00 :   75be0:  jae    771fe <__vfprintf_internal+0x21ce>
         : 891   ./stdio-common/vfprintf-internal.c:1516 (discriminator 105)
    0.00 :   75be6:  lea    0x1(%rax),%rdx
    0.00 :   75bea:  mov    %rdx,0x28(%rbp)
    0.00 :   75bee:  movb   $0x2d,(%rax)
         : 895   ./stdio-common/vfprintf-internal.c:1516 (discriminator 128)
    0.00 :   75bf1:  cmp    $0x7fffffff,%r12d
    0.00 :   75bf8:  je     76728 <__vfprintf_internal+0x16f8>
         : 898   ./stdio-common/vfprintf-internal.c:1516 (discriminator 130)
    0.00 :   75bfe:  add    $0x1,%r12d
         : 900   ./stdio-common/vfprintf-internal.c:1516 (discriminator 131)
    0.00 :   75c02:  test   %r11,%r11
    0.00 :   75c05:  je     75c70 <__vfprintf_internal+0xc40>
    0.00 :   75c07:  mov    0x4c(%rsp),%edx
    0.00 :   75c0b:  test   %edx,%edx
    0.00 :   75c0d:  je     75c70 <__vfprintf_internal+0xc40>
         : 906   ./stdio-common/vfprintf-internal.c:1516 (discriminator 134)
    0.00 :   75c0f:  mov    0x60(%rsp),%edx
    0.00 :   75c13:  mov    $0x10004,%eax
    0.00 :   75c18:  bt     %rdx,%rax
    0.00 :   75c1c:  jae    75c70 <__vfprintf_internal+0xc40>
         : 911   ./stdio-common/vfprintf-internal.c:1516 (discriminator 136)
    0.00 :   75c1e:  mov    0x28(%rbp),%rax
    0.00 :   75c22:  cmp    0x30(%rbp),%rax
    0.00 :   75c26:  jae    76f4f <__vfprintf_internal+0x1f1f>
         : 915   ./stdio-common/vfprintf-internal.c:1516 (discriminator 139)
    0.00 :   75c2c:  lea    0x1(%rax),%rdx
    0.00 :   75c30:  mov    %rdx,0x28(%rbp)
    0.00 :   75c34:  movb   $0x30,(%rax)
         : 919   ./stdio-common/vfprintf-internal.c:1516 (discriminator 142)
    0.00 :   75c37:  cmp    $0x7fffffff,%r12d
    0.00 :   75c3e:  je     76728 <__vfprintf_internal+0x16f8>
         : 922   ./stdio-common/vfprintf-internal.c:1516 (discriminator 144)
    0.00 :   75c44:  mov    0x28(%rbp),%rax
    0.00 :   75c48:  cmp    0x30(%rbp),%rax
    0.00 :   75c4c:  jae    77412 <__vfprintf_internal+0x23e2>
         : 926   ./stdio-common/vfprintf-internal.c:1516 (discriminator 146)
    0.00 :   75c52:  lea    0x1(%rax),%rdx
    0.00 :   75c56:  mov    %rdx,0x28(%rbp)
    0.00 :   75c5a:  mov    %r13b,(%rax)
         : 930   ./stdio-common/vfprintf-internal.c:1516 (discriminator 149)
    0.00 :   75c5d:  cmp    $0x7ffffffe,%r12d
    0.00 :   75c64:  je     76728 <__vfprintf_internal+0x16f8>
         : 933   ./stdio-common/vfprintf-internal.c:1516 (discriminator 151)
    0.00 :   75c6a:  add    $0x2,%r12d
    0.00 :   75c6e:  xchg   %ax,%ax
         : 936   ./stdio-common/vfprintf-internal.c:1516 (discriminator 152)
    0.00 :   75c70:  lea    (%r8,%r14,1),%r13d
         : 938   pad_func():
         : 939   ./stdio-common/vfprintf-internal.c:192 (discriminator 152)
    0.00 :   75c74:  test   %r13d,%r13d
    0.00 :   75c77:  jg     76780 <__vfprintf_internal+0x1750>
         : 942   outstring_func():
         : 943   ./stdio-common/vfprintf-internal.c:239 (discriminator 154)
    0.00 :   75c7d:  mov    0xd8(%rbp),%r13
         : 945   IO_validate_vtable():
         : 946   ./stdio-common/../libio/libioP.h:942 (discriminator 154)
    0.00 :   75c84:  lea    0x1a0d75(%rip),%rsi        # 216a00 <_IO_helper_jumps>
    0.00 :   75c8b:  mov    %r13,%rax
    0.00 :   75c8e:  sub    %rsi,%rax
         : 950   ./stdio-common/../libio/libioP.h:943 (discriminator 154)
    0.00 :   75c91:  cmp    %rax,0x30(%rsp)
    0.00 :   75c96:  jbe    771d1 <__vfprintf_internal+0x21a1>
         : 953   outstring_func():
         : 954   ./stdio-common/vfprintf-internal.c:239
    0.00 :   75c9c:  mov    %r15,%rdx
    0.00 :   75c9f:  mov    %r9,%rsi
    0.00 :   75ca2:  mov    %rbp,%rdi
    0.00 :   75ca5:  call   *0x38(%r13)
    0.00 :   75ca9:  cmp    %rax,%r15
    0.00 :   75cac:  jne    76728 <__vfprintf_internal+0x16f8>
         : 961   done_add_func():
         : 962   ./stdio-common/vfprintf-internal.c:127
    0.00 :   75cb2:  movslq %r12d,%rax
    0.00 :   75cb5:  xor    %edx,%edx
    0.00 :   75cb7:  add    %r15,%rax
    0.00 :   75cba:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc0:  cmp    %r15,%rax
    0.00 :   75cc3:  jb     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   75cc9:  movslq %eax,%rcx
    0.00 :   75ccc:  mov    %eax,%r12d
    0.00 :   75ccf:  cmp    %rcx,%rax
    0.00 :   75cd2:  mov    $0x1,%ecx
    0.00 :   75cd7:  cmovne %ecx,%edx
    0.00 :   75cda:  test   %edx,%edx
    0.00 :   75cdc:  jne    75860 <__vfprintf_internal+0x830>
         : 976   __vfprintf_internal():
         : 977   ./stdio-common/vfprintf-internal.c:1517
    0.00 :   75ce2:  test   %eax,%eax
    0.00 :   75ce4:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75cea:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   75cef:  nop
    0.00 :   75cf0:  endbr64
         : 983   ./stdio-common/vfprintf-internal.c:1346
    0.00 :   75cf4:  cmpq   $0xffffffffffffffff,0x80(%rsp)
    0.00 :   75cfd:  je     7717a <__vfprintf_internal+0x214a>
         : 986   ./stdio-common/vfprintf-internal.c:1365
    0.00 :   75d03:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d08:  lea    0x1(%rbx),%rcx
    0.00 :   75d0c:  lea    -0x5a3(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d13:  lea    -0x20(%r13),%edi
    0.00 :   75d17:  cmp    $0x5a,%dil
    0.00 :   75d1b:  ja     76b88 <__vfprintf_internal+0x1b58>
         : 993   ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d21:  movsbl %r13b,%esi
         : 995   ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d25:  lea    0x15b934(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 997   ./stdio-common/vfprintf-internal.c:1344 (discriminator 1)
    0.00 :   75d2c:  movl   $0x1,0x50(%rsp)
         : 999   ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d34:  sub    $0x20,%esi
    0.00 :   75d37:  movslq %esi,%rsi
    0.00 :   75d3a:  movzbl (%rax,%rsi,1),%esi
         : 1003  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d3e:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d42:  lea    -0x5d9(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d49:  add    %rbx,%rsi
         : 1007  ./stdio-common/vfprintf-internal.c:1365 (discriminator 1)
    0.00 :   75d4c:  mov    %rcx,%rbx
    0.00 :   75d4f:  jmp    *%rsi
    0.00 :   75d51:  nopl   0x0(%rax)
    0.00 :   75d58:  endbr64
         : 1012  ./stdio-common/vfprintf-internal.c:1334
    0.00 :   75d5c:  movzbl 0x1(%rbx),%r13d
    0.00 :   75d61:  lea    0x1(%rbx),%rcx
    0.00 :   75d65:  lea    -0x5fc(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75d6c:  lea    -0x20(%r13),%edi
    0.00 :   75d70:  cmp    $0x5a,%dil
    0.00 :   75d74:  ja     76b98 <__vfprintf_internal+0x1b68>
         : 1019  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75d7a:  movsbl %r13b,%esi
         : 1021  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d7e:  lea    0x15b8db(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1023  ./stdio-common/vfprintf-internal.c:1333 (discriminator 1)
    0.00 :   75d85:  movl   $0x1,0x4c(%rsp)
         : 1025  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75d8d:  sub    $0x20,%esi
    0.00 :   75d90:  movslq %esi,%rsi
    0.00 :   75d93:  movzbl (%rax,%rsi,1),%esi
         : 1029  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75d97:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75d9b:  lea    -0x632(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75da2:  add    %rbx,%rsi
         : 1033  ./stdio-common/vfprintf-internal.c:1334 (discriminator 1)
    0.00 :   75da5:  mov    %rcx,%rbx
    0.00 :   75da8:  jmp    *%rsi
    0.00 :   75daa:  nopw   0x0(%rax,%rax,1)
    0.00 :   75db0:  endbr64
         : 1038  ./stdio-common/vfprintf-internal.c:1329
    0.00 :   75db4:  movzbl 0x1(%rbx),%r13d
    0.00 :   75db9:  lea    0x1(%rbx),%rcx
    0.00 :   75dbd:  lea    -0x654(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dc4:  lea    -0x20(%r13),%edi
    0.00 :   75dc8:  cmp    $0x5a,%dil
    0.00 :   75dcc:  ja     75df1 <__vfprintf_internal+0xdc1>
         : 1045  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   75dce:  movsbl %r13b,%esi
    0.00 :   75dd2:  lea    0x15b887(%rip),%rbx        # 1d1660 <step0_jumps.9>
    0.00 :   75dd9:  sub    $0x20,%esi
    0.00 :   75ddc:  movslq %esi,%rsi
    0.00 :   75ddf:  movzbl (%rax,%rsi,1),%esi
    0.00 :   75de3:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   75de7:  lea    -0x67e(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75dee:  add    %rbx,%rsi
         : 1054  ./stdio-common/vfprintf-internal.c:1328 (discriminator 4)
    0.00 :   75df1:  movb   $0x20,0x38(%rsp)
         : 1056  ./stdio-common/vfprintf-internal.c:1329 (discriminator 4)
    0.00 :   75df6:  mov    %rcx,%rbx
         : 1058  ./stdio-common/vfprintf-internal.c:1327 (discriminator 4)
    0.00 :   75df9:  movl   $0x1,0x28(%rsp)
    0.00 :   75e01:  jmp    *%rsi
    0.00 :   75e03:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e08:  endbr64
         : 1063  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e0c:  mov    0xa8(%rsp),%eax
    0.00 :   75e13:  test   %eax,%eax
    0.00 :   75e15:  je     75e26 <__vfprintf_internal+0xdf6>
         : 1067  ./stdio-common/vfprintf-internal.c:1516 (discriminator 223)
    0.00 :   75e17:  mov    0xa0(%rsp),%eax
    0.00 :   75e1e:  test   %eax,%eax
    0.00 :   75e20:  je     76eea <__vfprintf_internal+0x1eba>
         : 1071  ./stdio-common/vfprintf-internal.c:1516 (discriminator 229)
    0.00 :   75e26:  mov    0x20(%rsp),%rsi
    0.00 :   75e2b:  mov    (%rsi),%eax
    0.00 :   75e2d:  cmp    $0x2f,%eax
    0.00 :   75e30:  ja     76c50 <__vfprintf_internal+0x1c20>
         : 1076  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e36:  mov    %eax,%edx
    0.00 :   75e38:  add    $0x8,%eax
    0.00 :   75e3b:  add    0x10(%rsi),%rdx
    0.00 :   75e3f:  mov    %eax,(%rsi)
    0.00 :   75e41:  mov    (%rdx),%rax
    0.00 :   75e44:  test   %r10d,%r10d
    0.00 :   75e47:  je     76c30 <__vfprintf_internal+0x1c00>
         : 1084  ./stdio-common/vfprintf-internal.c:1516 (discriminator 233)
    0.00 :   75e4d:  movslq %r12d,%rdx
    0.00 :   75e50:  mov    %rdx,(%rax)
    0.00 :   75e53:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   75e58:  nopl   0x0(%rax,%rax,1)
    0.00 :   75e60:  endbr64
         : 1090  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   75e64:  mov    0x20(%rsp),%rdi
    0.00 :   75e69:  mov    (%rdi),%eax
    0.00 :   75e6b:  cmp    $0x2f,%eax
    0.00 :   75e6e:  ja     76bc8 <__vfprintf_internal+0x1b98>
    0.00 :   75e74:  mov    %eax,%edx
    0.00 :   75e76:  add    $0x8,%eax
    0.00 :   75e79:  add    0x10(%rdi),%rdx
    0.00 :   75e7d:  mov    %eax,(%rdi)
    0.00 :   75e7f:  mov    (%rdx),%r10
    0.00 :   75e82:  test   %r10,%r10
    0.00 :   75e85:  je     76c83 <__vfprintf_internal+0x1c53>
         : 1102  ./stdio-common/vfprintf-internal.c:1516 (discriminator 217)
    0.00 :   75e8b:  mov    %r10,%r11
    0.00 :   75e8e:  movl   $0x0,0x50(%rsp)
    0.00 :   75e96:  xor    %r10d,%r10d
    0.00 :   75e99:  mov    $0x78,%r13d
    0.00 :   75e9f:  movl   $0x1,0x4c(%rsp)
    0.00 :   75ea7:  movl   $0x10,0x60(%rsp)
    0.00 :   75eaf:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   75eb4:  nopl   0x0(%rax)
    0.00 :   75eb8:  endbr64
         : 1112  ./stdio-common/vfprintf-internal.c:1422
    0.00 :   75ebc:  movzbl 0x1(%rbx),%esi
         : 1114  ./stdio-common/vfprintf-internal.c:1421
    0.00 :   75ec0:  lea    0x1(%rbx),%rcx
         : 1116  ./stdio-common/vfprintf-internal.c:1422
    0.00 :   75ec4:  cmp    $0x2a,%sil
    0.00 :   75ec8:  je     77088 <__vfprintf_internal+0x2058>
         : 1119  ./stdio-common/vfprintf-internal.c:1448
    0.00 :   75ece:  lea    -0x30(%rsi),%r14d
    0.00 :   75ed2:  cmp    $0x9,%r14d
    0.00 :   75ed6:  jbe    76e40 <__vfprintf_internal+0x1e10>
         : 1123  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   75edc:  movzbl (%rcx),%r13d
    0.00 :   75ee0:  mov    %rcx,%rbx
         : 1126  ./stdio-common/vfprintf-internal.c:1462
    0.00 :   75ee3:  xor    %r14d,%r14d
         : 1128  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   75ee6:  lea    -0x20(%r13),%ecx
    0.00 :   75eea:  cmp    $0x5a,%cl
    0.00 :   75eed:  ja     75770 <__vfprintf_internal+0x740>
         : 1132  ./stdio-common/vfprintf-internal.c:1463 (discriminator 1)
    0.00 :   75ef3:  movsbl %r13b,%ecx
    0.00 :   75ef7:  lea    0x15b662(%rip),%rsi        # 1d1560 <step2_jumps.7>
    0.00 :   75efe:  sub    $0x20,%ecx
    0.00 :   75f01:  movslq %ecx,%rcx
    0.00 :   75f04:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   75f08:  movslq (%rsi,%rcx,4),%rsi
    0.00 :   75f0c:  lea    -0x7a3(%rip),%rcx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   75f13:  add    %rcx,%rsi
    0.00 :   75f16:  jmp    *%rsi
    0.00 :   75f18:  nopl   0x0(%rax,%rax,1)
    0.00 :   75f20:  endbr64
         : 1144  ./stdio-common/vfprintf-internal.c:1516
   53.15 :   75f24:  test   %r10d,%r10d
    0.00 :   75f27:  je     76aa8 <__vfprintf_internal+0x1a78>
    0.00 :   75f2d:  mov    0x20(%rsp),%rdi
    0.00 :   75f32:  mov    (%rdi),%eax
    0.00 :   75f34:  cmp    $0x2f,%eax
    0.00 :   75f37:  ja     76da6 <__vfprintf_internal+0x1d76>
    0.00 :   75f3d:  mov    %eax,%edx
    0.00 :   75f3f:  add    $0x8,%eax
    0.00 :   75f42:  add    0x10(%rdi),%rdx
    0.00 :   75f46:  mov    %eax,(%rdi)
    0.00 :   75f48:  mov    (%rdx),%r10
    0.00 :   75f4b:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   75f50:  endbr64
    0.00 :   75f54:  mov    0x28(%rbp),%rax
    0.00 :   75f58:  cmp    0x30(%rbp),%rax
    0.00 :   75f5c:  jae    77360 <__vfprintf_internal+0x2330>
         : 1161  ./stdio-common/vfprintf-internal.c:1516 (discriminator 2)
    0.00 :   75f62:  lea    0x1(%rax),%rdx
    0.00 :   75f66:  mov    %rdx,0x28(%rbp)
    0.00 :   75f6a:  movb   $0x25,(%rax)
         : 1165  ./stdio-common/vfprintf-internal.c:1516 (discriminator 5)
    0.00 :   75f6d:  cmp    $0x7fffffff,%r12d
    0.00 :   75f74:  je     76728 <__vfprintf_internal+0x16f8>
         : 1168  ./stdio-common/vfprintf-internal.c:1516 (discriminator 7)
    0.00 :   75f7a:  add    $0x1,%r12d
    0.00 :   75f7e:  xchg   %ax,%ax
         : 1171  ./stdio-common/vfprintf-internal.c:1589
    0.00 :   75f80:  lea    0x1(%rbx),%r15
         : 1173  __find_specmb():
         : 1174  ./stdio-common/printf-parse.h:111
    0.00 :   75f84:  mov    $0x25,%esi
         : 1176  __vfprintf_internal():
         : 1177  ./stdio-common/vfprintf-internal.c:1583
    0.00 :   75f89:  addl   $0x1,0x78(%rsp)
         : 1179  __find_specmb():
         : 1180  ./stdio-common/printf-parse.h:111
    0.00 :   75f8e:  mov    %r15,%rdi
    0.00 :   75f91:  call   284d0 <*ABS*+0xab010@plt>
         : 1183  outstring_func():
         : 1184  ./stdio-common/vfprintf-internal.c:239
    0.00 :   75f96:  mov    0xd8(%rbp),%rbx
         : 1186  IO_validate_vtable():
         : 1187  ./stdio-common/../libio/libioP.h:942
    0.00 :   75f9d:  lea    0x1a0a5c(%rip),%rdi        # 216a00 <_IO_helper_jumps>
         : 1189  __vfprintf_internal():
         : 1190  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   75fa4:  mov    %rax,%r14
         : 1192  __find_specmb():
         : 1193  ./stdio-common/printf-parse.h:111
    0.00 :   75fa7:  mov    %rax,%r13
         : 1195  IO_validate_vtable():
         : 1196  ./stdio-common/../libio/libioP.h:942
    0.00 :   75faa:  mov    %rbx,%rax
         : 1198  __vfprintf_internal():
         : 1199  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   75fad:  sub    %r15,%r14
         : 1201  IO_validate_vtable():
         : 1202  ./stdio-common/../libio/libioP.h:942
    0.00 :   75fb0:  sub    %rdi,%rax
         : 1204  ./stdio-common/../libio/libioP.h:943
    0.00 :   75fb3:  cmp    %rax,0x30(%rsp)
    0.00 :   75fb8:  jbe    76770 <__vfprintf_internal+0x1740>
         : 1207  outstring_func():
         : 1208  ./stdio-common/vfprintf-internal.c:239
    0.00 :   75fbe:  mov    %r14,%rdx
    0.00 :   75fc1:  mov    %r15,%rsi
    0.00 :   75fc4:  mov    %rbp,%rdi
    0.00 :   75fc7:  call   *0x38(%rbx)
    0.00 :   75fca:  cmp    %r14,%rax
    0.00 :   75fcd:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1215  done_add_func():
         : 1216  ./stdio-common/vfprintf-internal.c:127
    0.00 :   75fd3:  movslq %r12d,%rax
    0.00 :   75fd6:  xor    %edx,%edx
    0.00 :   75fd8:  add    %r14,%rax
    0.00 :   75fdb:  js     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fe1:  cmp    %r14,%rax
    0.00 :   75fe4:  jb     77500 <__vfprintf_internal+0x24d0>
    0.00 :   75fea:  movslq %eax,%rcx
    0.00 :   75fed:  mov    %eax,%r12d
    0.00 :   75ff0:  cmp    %rcx,%rax
    0.00 :   75ff3:  mov    $0x1,%ecx
    0.00 :   75ff8:  cmovne %ecx,%edx
    0.00 :   75ffb:  test   %edx,%edx
    0.00 :   75ffd:  jne    75860 <__vfprintf_internal+0x830>
         : 1230  __vfprintf_internal():
         : 1231  ./stdio-common/vfprintf-internal.c:1593
    0.00 :   76003:  test   %eax,%eax
    0.00 :   76005:  js     7533d <__vfprintf_internal+0x30d>
         : 1234  ./stdio-common/vfprintf-internal.c:1595 (discriminator 2)
    0.00 :   7600b:  cmpb   $0x0,0x0(%r13)
    0.00 :   76010:  jne    75210 <__vfprintf_internal+0x1e0>
    0.00 :   76016:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7601b:  nopl   0x0(%rax,%rax,1)
    0.00 :   76020:  endbr64
         : 1240  ./stdio-common/vfprintf-internal.c:1491
    0.00 :   76024:  jmp    753b4 <__vfprintf_internal+0x384>
    0.00 :   76029:  nopl   0x0(%rax)
    0.00 :   76030:  endbr64
         : 1244  ./stdio-common/vfprintf-internal.c:1392 (discriminator 31)
    0.00 :   76034:  mov    0x20(%rsp),%rdi
         : 1246  ./stdio-common/vfprintf-internal.c:1516 (discriminator 31)
    0.00 :   76039:  movl   $0x8,0x60(%rsp)
         : 1248  ./stdio-common/vfprintf-internal.c:1392 (discriminator 31)
    0.00 :   76041:  mov    (%rdi),%eax
         : 1250  ./stdio-common/vfprintf-internal.c:1516 (discriminator 31)
    0.00 :   76043:  test   %r10d,%r10d
    0.00 :   76046:  jne    75a3c <__vfprintf_internal+0xa0c>
         : 1253  ./stdio-common/vfprintf-internal.c:1516 (discriminator 54)
    0.00 :   7604c:  test   %r11d,%r11d
    0.00 :   7604f:  je     76818 <__vfprintf_internal+0x17e8>
         : 1256  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76055:  cmp    $0x2f,%eax
    0.00 :   76058:  ja     76b70 <__vfprintf_internal+0x1b40>
    0.00 :   7605e:  mov    %eax,%edx
    0.00 :   76060:  add    $0x8,%eax
    0.00 :   76063:  add    0x10(%rdi),%rdx
    0.00 :   76067:  mov    %eax,(%rdi)
    0.00 :   76069:  movl   $0x0,0x40(%rsp)
    0.00 :   76071:  movzbl (%rdx),%r11d
    0.00 :   76075:  movl   $0x0,0x58(%rsp)
    0.00 :   7607d:  cmp    $0xffffffff,%r14d
    0.00 :   76081:  jne    75a70 <__vfprintf_internal+0xa40>
    0.00 :   76087:  nopw   0x0(%rax,%rax,1)
    0.00 :   76090:  movq   $0x1,0x70(%rsp)
    0.00 :   76099:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   7609e:  xchg   %ax,%ax
    0.00 :   760a0:  endbr64
    0.00 :   760a4:  movl   $0xa,0x60(%rsp)
    0.00 :   760ac:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760b1:  nopl   0x0(%rax)
    0.00 :   760b8:  endbr64
         : 1277  ./stdio-common/vfprintf-internal.c:1516 (discriminator 32)
    0.00 :   760bc:  movl   $0x10,0x60(%rsp)
    0.00 :   760c4:  jmp    75a2c <__vfprintf_internal+0x9fc>
    0.00 :   760c9:  nopl   0x0(%rax)
    0.00 :   760d0:  endbr64
         : 1282  ./stdio-common/vfprintf-internal.c:1323
    0.00 :   760d4:  movzbl 0x1(%rbx),%r13d
    0.00 :   760d9:  lea    0x1(%rbx),%rcx
    0.00 :   760dd:  lea    -0x974(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   760e4:  lea    -0x20(%r13),%edi
    0.00 :   760e8:  cmp    $0x5a,%dil
    0.00 :   760ec:  ja     76bb8 <__vfprintf_internal+0x1b88>
         : 1289  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   760f2:  movsbl %r13b,%esi
         : 1291  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   760f6:  lea    0x15b563(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1293  ./stdio-common/vfprintf-internal.c:1322 (discriminator 1)
    0.00 :   760fd:  movl   $0x1,0x40(%rsp)
         : 1295  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   76105:  sub    $0x20,%esi
    0.00 :   76108:  movslq %esi,%rsi
    0.00 :   7610b:  movzbl (%rax,%rsi,1),%esi
         : 1299  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   7610f:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76113:  lea    -0x9aa(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7611a:  add    %rbx,%rsi
         : 1303  ./stdio-common/vfprintf-internal.c:1323 (discriminator 1)
    0.00 :   7611d:  mov    %rcx,%rbx
    0.00 :   76120:  jmp    *%rsi
    0.00 :   76122:  nopw   0x0(%rax,%rax,1)
    0.00 :   76128:  endbr64
         : 1308  ./stdio-common/vfprintf-internal.c:1318
    0.00 :   7612c:  movzbl 0x1(%rbx),%r13d
    0.00 :   76131:  lea    0x1(%rbx),%rcx
    0.00 :   76135:  lea    -0x20(%r13),%esi
    0.00 :   76139:  cmp    $0x5a,%sil
    0.00 :   7613d:  jbe    76b28 <__vfprintf_internal+0x1af8>
    0.00 :   76143:  lea    -0x9da(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
         : 1315  ./stdio-common/vfprintf-internal.c:1317
    0.00 :   7614a:  movl   $0x1,0x58(%rsp)
         : 1317  ./stdio-common/vfprintf-internal.c:1318
    0.00 :   76152:  mov    %rcx,%rbx
    0.00 :   76155:  jmp    *%rsi
    0.00 :   76157:  nopw   0x0(%rax,%rax,1)
    0.00 :   76160:  endbr64
         : 1322  ./stdio-common/vfprintf-internal.c:1474
    0.00 :   76164:  movzbl 0x1(%rbx),%r13d
    0.00 :   76169:  lea    0x1(%rbx),%rcx
    0.00 :   7616d:  lea    -0xa04(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76174:  lea    -0x20(%r13),%edi
    0.00 :   76178:  cmp    $0x5a,%dil
    0.00 :   7617c:  ja     7619a <__vfprintf_internal+0x116a>
         : 1329  ./stdio-common/vfprintf-internal.c:1474 (discriminator 1)
    0.00 :   7617e:  movsbl %r13b,%esi
    0.00 :   76182:  lea    -0xa19(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76189:  sub    $0x20,%esi
    0.00 :   7618c:  movslq %esi,%rsi
    0.00 :   7618f:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76193:  movslq (%r8,%rsi,4),%rsi
    0.00 :   76197:  add    %rbx,%rsi
         : 1337  ./stdio-common/vfprintf-internal.c:1474 (discriminator 4)
    0.00 :   7619a:  mov    %rcx,%rbx
         : 1339  ./stdio-common/vfprintf-internal.c:1472 (discriminator 4)
    0.00 :   7619d:  xor    %r15d,%r15d
         : 1341  ./stdio-common/vfprintf-internal.c:1473 (discriminator 4)
    0.00 :   761a0:  mov    $0x1,%r11d
    0.00 :   761a6:  jmp    *%rsi
    0.00 :   761a8:  nopl   0x0(%rax,%rax,1)
    0.00 :   761b0:  endbr64
         : 1346  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761b4:  mov    0x28(%rsp),%ecx
    0.00 :   761b8:  movzbl 0x38(%rsp),%esi
         : 1349  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761bd:  movzbl 0x1(%rbx),%r13d
         : 1351  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761c2:  test   %ecx,%ecx
    0.00 :   761c4:  mov    $0x30,%ecx
    0.00 :   761c9:  cmove  %ecx,%esi
         : 1355  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761cc:  lea    -0x20(%r13),%edi
    0.00 :   761d0:  lea    0x1(%rbx),%rcx
         : 1358  ./stdio-common/vfprintf-internal.c:1339
    0.00 :   761d4:  mov    %sil,0x38(%rsp)
         : 1360  ./stdio-common/vfprintf-internal.c:1340
    0.00 :   761d9:  lea    -0xa70(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   761e0:  cmp    $0x5a,%dil
    0.00 :   761e4:  ja     76891 <__vfprintf_internal+0x1861>
         : 1364  ./stdio-common/vfprintf-internal.c:1340 (discriminator 1)
    0.00 :   761ea:  movsbl %r13b,%esi
         : 1366  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   761ee:  lea    0x15b46b(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1368  ./stdio-common/vfprintf-internal.c:1340 (discriminator 1)
    0.00 :   761f5:  sub    $0x20,%esi
    0.00 :   761f8:  movslq %esi,%rsi
    0.00 :   761fb:  movzbl (%rax,%rsi,1),%esi
         : 1372  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   761ff:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76203:  lea    -0xa9a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7620a:  add    %rbx,%rsi
         : 1376  ./stdio-common/vfprintf-internal.c:1418 (discriminator 1)
    0.00 :   7620d:  mov    %rcx,%rbx
    0.00 :   76210:  jmp    *%rsi
    0.00 :   76212:  nopw   0x0(%rax,%rax,1)
    0.00 :   76218:  endbr64
         : 1381  ./stdio-common/vfprintf-internal.c:1377
    0.00 :   7621c:  movzbl 0x1(%rbx),%esi
         : 1383  ./stdio-common/vfprintf-internal.c:1376
    0.00 :   76220:  lea    0x1(%rbx),%rdi
    0.00 :   76224:  mov    %rdi,0x70(%rsp)
         : 1386  ./stdio-common/vfprintf-internal.c:1377
    0.00 :   76229:  sub    $0x30,%esi
    0.00 :   7622c:  cmp    $0x9,%esi
    0.00 :   7622f:  jbe    76a10 <__vfprintf_internal+0x19e0>
         : 1390  ./stdio-common/vfprintf-internal.c:1392
    0.00 :   76235:  mov    0x20(%rsp),%rsi
    0.00 :   7623a:  mov    (%rsi),%ecx
    0.00 :   7623c:  cmp    $0x2f,%ecx
    0.00 :   7623f:  jbe    76c70 <__vfprintf_internal+0x1c40>
    0.00 :   76245:  mov    %rsi,%rdi
    0.00 :   76248:  mov    0x8(%rsi),%rsi
    0.00 :   7624c:  lea    0x8(%rsi),%rcx
    0.00 :   76250:  mov    %rcx,0x8(%rdi)
    0.00 :   76254:  mov    (%rsi),%edi
    0.00 :   76256:  mov    %edi,0x10(%rsp)
         : 1401  ./stdio-common/vfprintf-internal.c:1395
    0.00 :   7625a:  test   %edi,%edi
    0.00 :   7625c:  jns    76271 <__vfprintf_internal+0x1241>
         : 1404  ./stdio-common/vfprintf-internal.c:1397
    0.00 :   7625e:  neg    %edi
         : 1406  ./stdio-common/vfprintf-internal.c:1398
    0.00 :   76260:  movb   $0x20,0x38(%rsp)
         : 1408  ./stdio-common/vfprintf-internal.c:1397
    0.00 :   76265:  mov    %edi,0x10(%rsp)
         : 1410  ./stdio-common/vfprintf-internal.c:1399
    0.00 :   76269:  movl   $0x1,0x28(%rsp)
         : 1412  ./stdio-common/vfprintf-internal.c:1402
    0.00 :   76271:  movzbl 0x1(%rbx),%r13d
    0.00 :   76276:  lea    -0xb0d(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   7627d:  lea    -0x20(%r13),%ecx
    0.00 :   76281:  cmp    $0x5a,%cl
    0.00 :   76284:  ja     76c68 <__vfprintf_internal+0x1c38>
         : 1418  ./stdio-common/vfprintf-internal.c:1402 (discriminator 1)
    0.00 :   7628a:  movsbl %r13b,%ecx
    0.00 :   7628e:  lea    0x15b34b(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76295:  sub    $0x20,%ecx
    0.00 :   76298:  movslq %ecx,%rcx
    0.00 :   7629b:  movzbl (%rax,%rcx,1),%ecx
    0.00 :   7629f:  movslq (%rbx,%rcx,4),%rsi
    0.00 :   762a3:  lea    -0xb3a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762aa:  add    %rbx,%rsi
         : 1427  ./stdio-common/vfprintf-internal.c:1376 (discriminator 1)
    0.00 :   762ad:  mov    0x70(%rsp),%rbx
    0.00 :   762b2:  jmp    *%rsi
    0.00 :   762b4:  nopl   0x0(%rax)
    0.00 :   762b8:  endbr64
         : 1432  ./stdio-common/vfprintf-internal.c:1468
    0.00 :   762bc:  movzbl 0x1(%rbx),%r13d
    0.00 :   762c1:  lea    0x1(%rbx),%rcx
    0.00 :   762c5:  lea    -0xb5c(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   762cc:  lea    -0x20(%r13),%edi
    0.00 :   762d0:  cmp    $0x5a,%dil
    0.00 :   762d4:  ja     76be0 <__vfprintf_internal+0x1bb0>
         : 1439  ./stdio-common/vfprintf-internal.c:1468 (discriminator 1)
    0.00 :   762da:  movsbl %r13b,%esi
    0.00 :   762de:  lea    0x15b1fb(%rip),%rbx        # 1d14e0 <step3a_jumps.6>
         : 1442  ./stdio-common/vfprintf-internal.c:1467 (discriminator 1)
    0.00 :   762e5:  mov    $0x1,%r15d
         : 1444  ./stdio-common/vfprintf-internal.c:1468 (discriminator 1)
    0.00 :   762eb:  sub    $0x20,%esi
    0.00 :   762ee:  movslq %esi,%rsi
    0.00 :   762f1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   762f5:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   762f9:  lea    -0xb90(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76300:  add    %rbx,%rsi
    0.00 :   76303:  mov    %rcx,%rbx
    0.00 :   76306:  jmp    *%rsi
    0.00 :   76308:  nopl   0x0(%rax,%rax,1)
    0.00 :   76310:  endbr64
         : 1455  read_int():
         : 1456  ./stdio-common/printf-parse.h:76
    0.00 :   76314:  movzbl (%rbx),%ecx
         : 1458  ./stdio-common/printf-parse.h:78
    0.00 :   76317:  movzbl 0x1(%rbx),%esi
         : 1460  ./stdio-common/printf-parse.h:76
    0.00 :   7631b:  sub    $0x30,%ecx
         : 1462  ./stdio-common/printf-parse.h:78
    0.00 :   7631e:  mov    %esi,%r13d
         : 1464  ./stdio-common/printf-parse.h:76
    0.00 :   76321:  mov    %ecx,0x10(%rsp)
         : 1466  ./stdio-common/printf-parse.h:78
    0.00 :   76325:  lea    0x1(%rbx),%rcx
    0.00 :   76329:  lea    -0x30(%rsi),%ebx
    0.00 :   7632c:  mov    0x10(%rsp),%esi
    0.00 :   76330:  cmp    $0x9,%ebx
    0.00 :   76333:  ja     7642d <__vfprintf_internal+0x13fd>
    0.00 :   76339:  movzbl 0x1(%rcx),%edi
    0.00 :   7633d:  add    $0x1,%rcx
    0.00 :   76341:  mov    %dil,0x70(%rsp)
    0.00 :   76346:  sub    $0x30,%edi
         : 1476  ./stdio-common/printf-parse.h:79
    0.00 :   76349:  test   %esi,%esi
    0.00 :   7634b:  js     77549 <__vfprintf_internal+0x2519>
         : 1479  ./stdio-common/printf-parse.h:81
    0.00 :   76351:  cmp    $0xccccccc,%esi
    0.00 :   76357:  jg     763d8 <__vfprintf_internal+0x13a8>
         : 1482  ./stdio-common/printf-parse.h:87
    0.00 :   76359:  lea    (%rsi,%rsi,4),%esi
         : 1484  ./stdio-common/printf-parse.h:88
    0.00 :   7635c:  mov    %r9d,%r13d
         : 1486  ./stdio-common/printf-parse.h:87
    0.00 :   7635f:  add    %esi,%esi
         : 1488  ./stdio-common/printf-parse.h:88
    0.00 :   76361:  sub    %ebx,%r13d
    0.00 :   76364:  cmp    %r13d,%esi
    0.00 :   76367:  jg     763d8 <__vfprintf_internal+0x13a8>
         : 1492  ./stdio-common/printf-parse.h:91
    0.00 :   76369:  add    %ebx,%esi
         : 1494  ./stdio-common/printf-parse.h:78
    0.00 :   7636b:  cmp    $0x9,%edi
    0.00 :   7636e:  ja     76868 <__vfprintf_internal+0x1838>
    0.00 :   76374:  mov    %edi,%ebx
    0.00 :   76376:  jmp    76339 <__vfprintf_internal+0x1309>
    0.00 :   76378:  nopl   0x0(%rax,%rax,1)
    0.00 :   76380:  endbr64
         : 1501  __vfprintf_internal():
         : 1502  ./stdio-common/vfprintf-internal.c:1369
    0.00 :   76384:  movzbl 0x1(%rbx),%r13d
    0.00 :   76389:  lea    0x1(%rbx),%rcx
    0.00 :   7638d:  lea    -0xc24(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76394:  lea    -0x20(%r13),%edi
    0.00 :   76398:  cmp    $0x5a,%dil
    0.00 :   7639c:  ja     76a98 <__vfprintf_internal+0x1a68>
         : 1509  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763a2:  movsbl %r13b,%esi
         : 1511  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   763a6:  lea    0x15b2b3(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 1513  ./stdio-common/vfprintf-internal.c:1368 (discriminator 1)
    0.00 :   763ad:  movl   $0x1,0x5c(%rsp)
         : 1515  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763b5:  sub    $0x20,%esi
    0.00 :   763b8:  movslq %esi,%rsi
    0.00 :   763bb:  movzbl (%rax,%rsi,1),%esi
         : 1519  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   763bf:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   763c3:  lea    -0xc5a(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   763ca:  add    %rbx,%rsi
         : 1523  ./stdio-common/vfprintf-internal.c:1369 (discriminator 1)
    0.00 :   763cd:  mov    %rcx,%rbx
    0.00 :   763d0:  jmp    *%rsi
    0.00 :   763d2:  nopw   0x0(%rax,%rax,1)
         : 1527  read_int():
         : 1528  ./stdio-common/printf-parse.h:78
    0.00 :   763d8:  cmp    $0x9,%edi
    0.00 :   763db:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763e1:  movzbl 0x1(%rcx),%esi
    0.00 :   763e5:  sub    $0x30,%esi
    0.00 :   763e8:  cmp    $0x9,%esi
    0.00 :   763eb:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   763f1:  movzbl 0x2(%rcx),%esi
    0.00 :   763f5:  add    $0x2,%rcx
    0.00 :   763f9:  sub    $0x30,%esi
    0.00 :   763fc:  cmp    $0x9,%esi
    0.00 :   763ff:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76405:  movl   $0xffffffff,0x10(%rsp)
    0.00 :   7640d:  lea    0x1(%rcx),%rsi
    0.00 :   76411:  nopl   0x0(%rax)
    0.00 :   76418:  movzbl (%rsi),%edi
    0.00 :   7641b:  mov    %rsi,%rcx
    0.00 :   7641e:  add    $0x1,%rsi
    0.00 :   76422:  mov    %edi,%r13d
    0.00 :   76425:  sub    $0x30,%edi
    0.00 :   76428:  cmp    $0x9,%edi
    0.00 :   7642b:  jbe    76418 <__vfprintf_internal+0x13e8>
         : 1550  __vfprintf_internal():
         : 1551  ./stdio-common/vfprintf-internal.c:1408
    0.00 :   7642d:  cmpl   $0xffffffff,0x10(%rsp)
    0.00 :   76432:  jne    76872 <__vfprintf_internal+0x1842>
    0.00 :   76438:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   7643d:  nopl   (%rax)
         : 1556  ./stdio-common/vfprintf-internal.c:1516 (discriminator 86)
    0.00 :   76440:  test   %r10d,%r10d
    0.00 :   76443:  je     76740 <__vfprintf_internal+0x1710>
         : 1559  ./stdio-common/vfprintf-internal.c:1516 (discriminator 157)
    0.00 :   76449:  mov    0x28(%rbp),%rax
    0.00 :   7644d:  cmp    0x30(%rbp),%rax
    0.00 :   76451:  jae    766f0 <__vfprintf_internal+0x16c0>
         : 1563  ./stdio-common/vfprintf-internal.c:1516 (discriminator 160)
    0.00 :   76457:  lea    0x1(%rax),%rcx
    0.00 :   7645b:  mov    %rcx,0x28(%rbp)
    0.00 :   7645f:  movb   $0x2d,(%rax)
         : 1567  ./stdio-common/vfprintf-internal.c:1516 (discriminator 183)
    0.00 :   76462:  cmp    $0x7fffffff,%r12d
    0.00 :   76469:  je     76728 <__vfprintf_internal+0x16f8>
         : 1570  ./stdio-common/vfprintf-internal.c:1516 (discriminator 185)
    0.00 :   7646f:  subl   $0x1,0x10(%rsp)
    0.00 :   76474:  add    $0x1,%r12d
         : 1573  ./stdio-common/vfprintf-internal.c:1516 (discriminator 186)
    0.00 :   76478:  test   %r11,%r11
    0.00 :   7647b:  je     76489 <__vfprintf_internal+0x1459>
    0.00 :   7647d:  mov    0x4c(%rsp),%eax
    0.00 :   76481:  test   %eax,%eax
    0.00 :   76483:  jne    76960 <__vfprintf_internal+0x1930>
         : 1579  ./stdio-common/vfprintf-internal.c:1516 (discriminator 207)
    0.00 :   76489:  mov    0x10(%rsp),%r13d
    0.00 :   7648e:  add    %r15d,%edx
    0.00 :   76491:  sub    %edx,%r13d
    0.00 :   76494:  test   %r14d,%r14d
    0.00 :   76497:  jle    764eb <__vfprintf_internal+0x14bb>
         : 1585  pad_func():
         : 1586  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76499:  movslq %r14d,%rdx
    0.00 :   7649c:  mov    $0x30,%esi
    0.00 :   764a1:  mov    %rbp,%rdi
    0.00 :   764a4:  mov    %r9,0x28(%rsp)
    0.00 :   764a9:  mov    %rdx,0x10(%rsp)
    0.00 :   764ae:  call   806a0 <_IO_padn>
         : 1593  ./stdio-common/vfprintf-internal.c:200
    0.00 :   764b3:  mov    0x10(%rsp),%rdx
    0.00 :   764b8:  cmp    %rax,%rdx
    0.00 :   764bb:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1597  done_add_func():
         : 1598  ./stdio-common/vfprintf-internal.c:127
    0.00 :   764c1:  xor    %eax,%eax
    0.00 :   764c3:  add    %r14d,%r12d
    0.00 :   764c6:  mov    0x28(%rsp),%r9
    0.00 :   764cb:  js     77586 <__vfprintf_internal+0x2556>
    0.00 :   764d1:  cmp    %edx,%r12d
    0.00 :   764d4:  jb     77586 <__vfprintf_internal+0x2556>
    0.00 :   764da:  test   %eax,%eax
    0.00 :   764dc:  jne    75860 <__vfprintf_internal+0x830>
         : 1607  __vfprintf_internal():
         : 1608  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   764e2:  test   %r12d,%r12d
    0.00 :   764e5:  js     7533d <__vfprintf_internal+0x30d>
         : 1611  outstring_func():
         : 1612  ./stdio-common/vfprintf-internal.c:239
    0.00 :   764eb:  mov    0xd8(%rbp),%r14
         : 1614  IO_validate_vtable():
         : 1615  ./stdio-common/../libio/libioP.h:942
    0.00 :   764f2:  lea    0x1a0507(%rip),%rsi        # 216a00 <_IO_helper_jumps>
    0.00 :   764f9:  mov    %r14,%rax
    0.00 :   764fc:  sub    %rsi,%rax
         : 1619  ./stdio-common/../libio/libioP.h:943
    0.00 :   764ff:  cmp    %rax,0x30(%rsp)
    0.00 :   76504:  jbe    771bd <__vfprintf_internal+0x218d>
         : 1622  outstring_func():
         : 1623  ./stdio-common/vfprintf-internal.c:239
    0.00 :   7650a:  mov    %r15,%rdx
    0.00 :   7650d:  mov    %r9,%rsi
    0.00 :   76510:  mov    %rbp,%rdi
    0.00 :   76513:  call   *0x38(%r14)
    0.00 :   76517:  cmp    %r15,%rax
    0.00 :   7651a:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1630  done_add_func():
         : 1631  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76520:  movslq %r12d,%rax
    0.00 :   76523:  xor    %edx,%edx
    0.00 :   76525:  add    %r15,%rax
    0.00 :   76528:  js     77519 <__vfprintf_internal+0x24e9>
    0.00 :   7652e:  cmp    %r15,%rax
    0.00 :   76531:  jb     77519 <__vfprintf_internal+0x24e9>
    0.00 :   76537:  movslq %eax,%rcx
    0.00 :   7653a:  mov    %eax,%r12d
    0.00 :   7653d:  cmp    %rcx,%rax
    0.00 :   76540:  mov    $0x1,%ecx
    0.00 :   76545:  cmovne %ecx,%edx
    0.00 :   76548:  test   %edx,%edx
    0.00 :   7654a:  jne    75860 <__vfprintf_internal+0x830>
         : 1645  __vfprintf_internal():
         : 1646  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76550:  test   %eax,%eax
    0.00 :   76552:  jns    756d0 <__vfprintf_internal+0x6a0>
    0.00 :   76558:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   7655d:  nopl   (%rax)
         : 1651  ./stdio-common/vfprintf-internal.c:1516 (discriminator 67)
    0.00 :   76560:  test   %r11,%r11
    0.00 :   76563:  jne    76800 <__vfprintf_internal+0x17d0>
         : 1654  ./stdio-common/vfprintf-internal.c:1516 (discriminator 69)
    0.00 :   76569:  cmpl   $0x8,0x60(%rsp)
    0.00 :   7656e:  jne    769f8 <__vfprintf_internal+0x19c8>
    0.00 :   76574:  mov    0x4c(%rsp),%eax
    0.00 :   76578:  test   %eax,%eax
    0.00 :   7657a:  je     769f8 <__vfprintf_internal+0x19c8>
         : 1660  ./stdio-common/vfprintf-internal.c:1516 (discriminator 71)
    0.00 :   76580:  movb   $0x30,0x527(%rsp)
    0.00 :   76588:  mov    $0x1,%r15d
    0.00 :   7658e:  lea    0x527(%rsp),%r9
         : 1664  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76596:  movb   $0x20,0x38(%rsp)
    0.00 :   7659b:  xor    %edx,%edx
    0.00 :   7659d:  mov    0x28(%rsp),%eax
    0.00 :   765a1:  test   %eax,%eax
    0.00 :   765a3:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   765a9:  mov    0x10(%rsp),%r8d
    0.00 :   765ae:  add    %r15d,%edx
    0.00 :   765b1:  sub    %edx,%r8d
    0.00 :   765b4:  jmp    75baf <__vfprintf_internal+0xb7f>
    0.00 :   765b9:  nopl   0x0(%rax)
         : 1675  ./stdio-common/vfprintf-internal.c:1516 (discriminator 78)
    0.00 :   765c0:  test   %r11,%r11
    0.00 :   765c3:  je     77038 <__vfprintf_internal+0x2008>
         : 1678  ./stdio-common/vfprintf-internal.c:1516 (discriminator 80)
    0.00 :   765c9:  cmpl   $0x8,0x60(%rsp)
    0.00 :   765ce:  jne    765ea <__vfprintf_internal+0x15ba>
    0.00 :   765d0:  mov    0x4c(%rsp),%eax
    0.00 :   765d4:  test   %eax,%eax
    0.00 :   765d6:  je     765ea <__vfprintf_internal+0x15ba>
         : 1684  ./stdio-common/vfprintf-internal.c:1516 (discriminator 82)
    0.00 :   765d8:  lea    -0x1(%r9),%rax
    0.00 :   765dc:  mov    %r14,%r15
    0.00 :   765df:  movb   $0x30,-0x1(%r9)
    0.00 :   765e4:  sub    %rax,%r15
    0.00 :   765e7:  mov    %rax,%r9
         : 1690  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   765ea:  mov    0x70(%rsp),%rdx
    0.00 :   765ef:  mov    $0x0,%eax
    0.00 :   765f4:  mov    0x28(%rsp),%ecx
    0.00 :   765f8:  sub    %r15,%rdx
    0.00 :   765fb:  cmovs  %rax,%rdx
    0.00 :   765ff:  mov    %edx,%r14d
    0.00 :   76602:  test   %ecx,%ecx
    0.00 :   76604:  jne    76440 <__vfprintf_internal+0x1410>
    0.00 :   7660a:  mov    0x10(%rsp),%r8d
    0.00 :   7660f:  sub    %r15d,%r8d
    0.00 :   76612:  sub    %edx,%r8d
    0.00 :   76615:  jmp    75b90 <__vfprintf_internal+0xb60>
    0.00 :   7661a:  nopw   0x0(%rax,%rax,1)
         : 1704  ./stdio-common/vfprintf-internal.c:1236
    0.00 :   76620:  mov    0x528(%rsp),%rax
    0.00 :   76628:  sub    %fs:0x28,%rax
    0.00 :   76631:  jne    7750a <__vfprintf_internal+0x24da>
    0.00 :   76637:  mov    0x7c(%rsp),%ecx
    0.00 :   7663b:  mov    0x20(%rsp),%rdx
    0.00 :   76640:  mov    %rbp,%rdi
    0.00 :   76643:  mov    0x8(%rsp),%rsi
         : 1712  ./stdio-common/vfprintf-internal.c:1612
    0.00 :   76648:  add    $0x538,%rsp
    0.00 :   7664f:  pop    %rbx
    0.00 :   76650:  pop    %rbp
    0.00 :   76651:  pop    %r12
    0.00 :   76653:  pop    %r13
    0.00 :   76655:  pop    %r14
    0.00 :   76657:  pop    %r15
         : 1720  ./stdio-common/vfprintf-internal.c:1236
    0.00 :   76659:  jmp    775a0 <buffered_vfprintf>
    0.00 :   7665e:  xchg   %ax,%ax
         : 1723  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76660:  cmpb   $0x20,0x38(%rsp)
    0.00 :   76665:  jne    75c02 <__vfprintf_internal+0xbd2>
         : 1726  pad_func():
         : 1727  ./stdio-common/vfprintf-internal.c:192
    0.00 :   7666b:  test   %r8d,%r8d
    0.00 :   7666e:  jle    77541 <__vfprintf_internal+0x2511>
         : 1730  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76674:  movslq %r8d,%rdx
    0.00 :   76677:  mov    $0x20,%esi
    0.00 :   7667c:  mov    %rbp,%rdi
    0.00 :   7667f:  mov    %r10d,0x5c(%rsp)
    0.00 :   76684:  mov    %rdx,0x10(%rsp)
    0.00 :   76689:  mov    %r9,0x50(%rsp)
    0.00 :   7668e:  mov    %r11,0x38(%rsp)
    0.00 :   76693:  mov    %r8d,0x28(%rsp)
    0.00 :   76698:  call   806a0 <_IO_padn>
         : 1740  ./stdio-common/vfprintf-internal.c:200
    0.00 :   7669d:  mov    0x10(%rsp),%rdx
    0.00 :   766a2:  cmp    %rax,%rdx
    0.00 :   766a5:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1744  done_add_func():
         : 1745  ./stdio-common/vfprintf-internal.c:127
    0.00 :   766ab:  mov    0x28(%rsp),%r8d
    0.00 :   766b0:  xor    %eax,%eax
    0.00 :   766b2:  mov    0x38(%rsp),%r11
    0.00 :   766b7:  mov    0x50(%rsp),%r9
    0.00 :   766bc:  mov    0x5c(%rsp),%r10d
    0.00 :   766c1:  add    %r8d,%r12d
    0.00 :   766c4:  js     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766ca:  cmp    %edx,%r12d
    0.00 :   766cd:  jb     77523 <__vfprintf_internal+0x24f3>
    0.00 :   766d3:  mov    %eax,%r8d
    0.00 :   766d6:  test   %eax,%eax
    0.00 :   766d8:  jne    75860 <__vfprintf_internal+0x830>
         : 1758  __vfprintf_internal():
         : 1759  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   766de:  test   %r12d,%r12d
    0.00 :   766e1:  jns    75bcf <__vfprintf_internal+0xb9f>
    0.00 :   766e7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   766ec:  nopl   0x0(%rax)
    0.00 :   766f0:  mov    %r9,0x40(%rsp)
         : 1765  ./stdio-common/vfprintf-internal.c:1516 (discriminator 159)
    0.00 :   766f5:  mov    $0x2d,%esi
    0.00 :   766fa:  mov    %rdx,0x38(%rsp)
    0.00 :   766ff:  mov    %r11,0x28(%rsp)
         : 1769  ./stdio-common/vfprintf-internal.c:1516 (discriminator 179)
    0.00 :   76704:  mov    %rbp,%rdi
    0.00 :   76707:  call   8d800 <__overflow>
    0.00 :   7670c:  mov    0x28(%rsp),%r11
    0.00 :   76711:  mov    0x38(%rsp),%rdx
    0.00 :   76716:  cmp    $0xffffffff,%eax
    0.00 :   76719:  mov    0x40(%rsp),%r9
    0.00 :   7671e:  jne    76462 <__vfprintf_internal+0x1432>
    0.00 :   76724:  nopl   0x0(%rax)
         : 1778  outstring_func():
         : 1779  ./stdio-common/vfprintf-internal.c:240
    0.00 :   76728:  mov    $0xffffffff,%r12d
         : 1781  __vfprintf_internal():
         : 1782  ./stdio-common/vfprintf-internal.c:1608
    0.00 :   7672e:  testl  $0x8000,0x0(%rbp)
    0.00 :   76735:  jne    75346 <__vfprintf_internal+0x316>
    0.00 :   7673b:  jmp    75380 <__vfprintf_internal+0x350>
         : 1786  ./stdio-common/vfprintf-internal.c:1516 (discriminator 158)
    0.00 :   76740:  mov    0x40(%rsp),%eax
    0.00 :   76744:  test   %eax,%eax
    0.00 :   76746:  je     76930 <__vfprintf_internal+0x1900>
         : 1790  ./stdio-common/vfprintf-internal.c:1516 (discriminator 167)
    0.00 :   7674c:  mov    0x28(%rbp),%rax
    0.00 :   76750:  cmp    0x30(%rbp),%rax
    0.00 :   76754:  jae    773b8 <__vfprintf_internal+0x2388>
         : 1794  ./stdio-common/vfprintf-internal.c:1516 (discriminator 170)
    0.00 :   7675a:  lea    0x1(%rax),%rcx
    0.00 :   7675e:  mov    %rcx,0x28(%rbp)
    0.00 :   76762:  movb   $0x2b,(%rax)
    0.00 :   76765:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7676a:  nopw   0x0(%rax,%rax,1)
         : 1800  IO_validate_vtable():
         : 1801  ./stdio-common/../libio/libioP.h:946
    0.00 :   76770:  call   89ef0 <_IO_vtable_check>
    0.00 :   76775:  jmp    75fbe <__vfprintf_internal+0xf8e>
    0.00 :   7677a:  nopw   0x0(%rax,%rax,1)
         : 1805  pad_func():
         : 1806  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76780:  movslq %r13d,%r14
    0.00 :   76783:  mov    $0x30,%esi
    0.00 :   76788:  mov    %rbp,%rdi
    0.00 :   7678b:  mov    %r9,0x10(%rsp)
    0.00 :   76790:  mov    %r14,%rdx
    0.00 :   76793:  call   806a0 <_IO_padn>
         : 1813  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76798:  cmp    %rax,%r14
    0.00 :   7679b:  jne    76728 <__vfprintf_internal+0x16f8>
         : 1816  done_add_func():
         : 1817  ./stdio-common/vfprintf-internal.c:127
    0.00 :   7679d:  xor    %eax,%eax
    0.00 :   7679f:  add    %r13d,%r12d
    0.00 :   767a2:  mov    0x10(%rsp),%r9
    0.00 :   767a7:  js     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767ad:  cmp    %r13d,%r12d
    0.00 :   767b0:  jb     7752d <__vfprintf_internal+0x24fd>
    0.00 :   767b6:  test   %eax,%eax
    0.00 :   767b8:  jne    75860 <__vfprintf_internal+0x830>
         : 1826  __vfprintf_internal():
         : 1827  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   767be:  test   %r12d,%r12d
    0.00 :   767c1:  jns    75c7d <__vfprintf_internal+0xc4d>
    0.00 :   767c7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   767cc:  nopl   0x0(%rax)
         : 1832  ./stdio-common/vfprintf-internal.c:1516 (discriminator 103)
    0.00 :   767d0:  mov    0x40(%rsp),%esi
    0.00 :   767d4:  test   %esi,%esi
    0.00 :   767d6:  je     77058 <__vfprintf_internal+0x2028>
         : 1836  ./stdio-common/vfprintf-internal.c:1516 (discriminator 112)
    0.00 :   767dc:  mov    0x28(%rbp),%rax
    0.00 :   767e0:  cmp    0x30(%rbp),%rax
    0.00 :   767e4:  jae    7739f <__vfprintf_internal+0x236f>
         : 1840  ./stdio-common/vfprintf-internal.c:1516 (discriminator 115)
    0.00 :   767ea:  lea    0x1(%rax),%rdx
    0.00 :   767ee:  mov    %rdx,0x28(%rbp)
    0.00 :   767f2:  movb   $0x2b,(%rax)
    0.00 :   767f5:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   767fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   76800:  movq   $0x0,0x70(%rsp)
         : 1847  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76809:  movb   $0x20,0x38(%rsp)
    0.00 :   7680e:  jmp    75a86 <__vfprintf_internal+0xa56>
    0.00 :   76813:  nopl   0x0(%rax,%rax,1)
         : 1851  ./stdio-common/vfprintf-internal.c:1516 (discriminator 57)
    0.00 :   76818:  test   %r15d,%r15d
    0.00 :   7681b:  jne    76af0 <__vfprintf_internal+0x1ac0>
         : 1854  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76821:  cmp    $0x2f,%eax
    0.00 :   76824:  ja     76dec <__vfprintf_internal+0x1dbc>
    0.00 :   7682a:  mov    %eax,%edx
    0.00 :   7682c:  add    $0x8,%eax
    0.00 :   7682f:  add    0x10(%rdi),%rdx
    0.00 :   76833:  mov    %eax,(%rdi)
    0.00 :   76835:  movl   $0x0,0x40(%rsp)
    0.00 :   7683d:  mov    (%rdx),%r11d
    0.00 :   76840:  xor    %r10d,%r10d
    0.00 :   76843:  movl   $0x0,0x58(%rsp)
    0.00 :   7684b:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76850:  mov    0x8(%rdi),%rdx
    0.00 :   76854:  lea    0x8(%rdx),%rax
    0.00 :   76858:  mov    %rax,0x8(%rdi)
    0.00 :   7685c:  jmp    75a50 <__vfprintf_internal+0xa20>
    0.00 :   76861:  nopl   0x0(%rax)
    0.00 :   76868:  mov    %esi,0x10(%rsp)
    0.00 :   7686c:  movzbl 0x70(%rsp),%r13d
         : 1873  ./stdio-common/vfprintf-internal.c:1415
    0.00 :   76872:  cmp    $0x24,%r13b
    0.00 :   76876:  je     76a88 <__vfprintf_internal+0x1a58>
         : 1876  ./stdio-common/vfprintf-internal.c:1418
    0.00 :   7687c:  lea    -0x20(%r13),%edi
    0.00 :   76880:  lea    -0x1117(%rip),%rsi        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76887:  cmp    $0x5a,%dil
    0.00 :   7688b:  jbe    76cd0 <__vfprintf_internal+0x1ca0>
         : 1881  ./stdio-common/vfprintf-internal.c:1418 (discriminator 4)
    0.00 :   76891:  mov    %rcx,%rbx
    0.00 :   76894:  jmp    *%rsi
    0.00 :   76896:  cs nopw 0x0(%rax,%rax,1)
         : 1885  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   768a0:  mov    0x20(%rsp),%rcx
    0.00 :   768a5:  mov    0x8(%rcx),%rax
    0.00 :   768a9:  mov    %rax,0x10(%rsp)
    0.00 :   768ae:  add    $0xf,%rax
    0.00 :   768b2:  and    $0xfffffffffffffff0,%rax
    0.00 :   768b6:  lea    0x10(%rax),%rdx
    0.00 :   768ba:  mov    %rdx,0x8(%rcx)
    0.00 :   768be:  fldt   (%rax)
    0.00 :   768c0:  fstpt  0xc0(%rsp)
         : 1895  ./stdio-common/vfprintf-internal.c:1556 (discriminator 9)
    0.00 :   768c7:  lea    0xc0(%rsp),%rax
         : 1897  __printf_fp_spec():
         : 1898  ./stdio-common/vfprintf-internal.c:351 (discriminator 9)
    0.00 :   768cf:  and    $0xffffffdf,%r13d
         : 1900  ./stdio-common/vfprintf-internal.c:352 (discriminator 9)
    0.00 :   768d3:  mov    %rbp,%rdi
         : 1902  __vfprintf_internal():
         : 1903  ./stdio-common/vfprintf-internal.c:1556 (discriminator 9)
    0.00 :   768d6:  mov    %rax,0xb8(%rsp)
         : 1905  __printf_fp_spec():
         : 1906  ./stdio-common/vfprintf-internal.c:352 (discriminator 9)
    0.00 :   768de:  lea    0xb8(%rsp),%rdx
    0.00 :   768e6:  lea    0xd0(%rsp),%rsi
         : 1909  ./stdio-common/vfprintf-internal.c:351 (discriminator 9)
    0.00 :   768ee:  cmp    $0x41,%r13d
    0.00 :   768f2:  jne    76928 <__vfprintf_internal+0x18f8>
         : 1912  ./stdio-common/vfprintf-internal.c:352
    0.00 :   768f4:  call   5d8b0 <__printf_fphex>
         : 1914  __vfprintf_internal():
         : 1915  ./stdio-common/vfprintf-internal.c:1559
    0.00 :   768f9:  test   %eax,%eax
    0.00 :   768fb:  js     76728 <__vfprintf_internal+0x16f8>
         : 1918  done_add_func():
         : 1919  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76901:  xor    %edx,%edx
    0.00 :   76903:  add    %eax,%r12d
    0.00 :   76906:  js     7750f <__vfprintf_internal+0x24df>
    0.00 :   7690c:  cmp    %eax,%r12d
    0.00 :   7690f:  jb     7750f <__vfprintf_internal+0x24df>
    0.00 :   76915:  test   %edx,%edx
    0.00 :   76917:  je     75701 <__vfprintf_internal+0x6d1>
    0.00 :   7691d:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76922:  nopw   0x0(%rax,%rax,1)
         : 1929  __printf_fp_spec():
         : 1930  ./stdio-common/vfprintf-internal.c:354
    0.00 :   76928:  call   5d520 <__printf_fp>
    0.00 :   7692d:  jmp    768f9 <__vfprintf_internal+0x18c9>
    0.00 :   7692f:  nop
         : 1934  __vfprintf_internal():
         : 1935  ./stdio-common/vfprintf-internal.c:1516 (discriminator 168)
    0.00 :   76930:  mov    0x58(%rsp),%eax
    0.00 :   76934:  test   %eax,%eax
    0.00 :   76936:  je     76478 <__vfprintf_internal+0x1448>
         : 1939  ./stdio-common/vfprintf-internal.c:1516 (discriminator 177)
    0.00 :   7693c:  mov    0x28(%rbp),%rax
    0.00 :   76940:  cmp    0x30(%rbp),%rax
    0.00 :   76944:  jae    77463 <__vfprintf_internal+0x2433>
         : 1943  ./stdio-common/vfprintf-internal.c:1516 (discriminator 180)
    0.00 :   7694a:  lea    0x1(%rax),%rcx
    0.00 :   7694e:  mov    %rcx,0x28(%rbp)
    0.00 :   76952:  movb   $0x20,(%rax)
    0.00 :   76955:  jmp    76462 <__vfprintf_internal+0x1432>
    0.00 :   7695a:  nopw   0x0(%rax,%rax,1)
         : 1949  ./stdio-common/vfprintf-internal.c:1516 (discriminator 189)
    0.00 :   76960:  mov    0x60(%rsp),%ecx
    0.00 :   76964:  mov    $0x10004,%eax
    0.00 :   76969:  bt     %rcx,%rax
    0.00 :   7696d:  jae    76489 <__vfprintf_internal+0x1459>
         : 1954  ./stdio-common/vfprintf-internal.c:1516 (discriminator 191)
    0.00 :   76973:  mov    0x28(%rbp),%rax
    0.00 :   76977:  cmp    0x30(%rbp),%rax
    0.00 :   7697b:  jae    774c8 <__vfprintf_internal+0x2498>
         : 1958  ./stdio-common/vfprintf-internal.c:1516 (discriminator 194)
    0.00 :   76981:  lea    0x1(%rax),%rcx
    0.00 :   76985:  mov    %rcx,0x28(%rbp)
    0.00 :   76989:  movb   $0x30,(%rax)
         : 1962  ./stdio-common/vfprintf-internal.c:1516 (discriminator 197)
    0.00 :   7698c:  cmp    $0x7fffffff,%r12d
    0.00 :   76993:  je     76728 <__vfprintf_internal+0x16f8>
         : 1965  ./stdio-common/vfprintf-internal.c:1516 (discriminator 199)
    0.00 :   76999:  mov    0x28(%rbp),%rax
    0.00 :   7699d:  cmp    0x30(%rbp),%rax
    0.00 :   769a1:  jae    77495 <__vfprintf_internal+0x2465>
         : 1969  ./stdio-common/vfprintf-internal.c:1516 (discriminator 201)
    0.00 :   769a7:  lea    0x1(%rax),%rcx
    0.00 :   769ab:  mov    %rcx,0x28(%rbp)
    0.00 :   769af:  mov    %r13b,(%rax)
         : 1973  ./stdio-common/vfprintf-internal.c:1516 (discriminator 204)
    0.00 :   769b2:  cmp    $0x7ffffffe,%r12d
    0.00 :   769b9:  je     76728 <__vfprintf_internal+0x16f8>
         : 1976  ./stdio-common/vfprintf-internal.c:1516 (discriminator 206)
    0.00 :   769bf:  subl   $0x2,0x10(%rsp)
    0.00 :   769c4:  add    $0x2,%r12d
    0.00 :   769c8:  jmp    76489 <__vfprintf_internal+0x1459>
    0.00 :   769cd:  nopl   (%rax)
         : 1981  IO_validate_vtable():
         : 1982  ./stdio-common/../libio/libioP.h:946
    0.00 :   769d0:  call   89ef0 <_IO_vtable_check>
    0.00 :   769d5:  jmp    7513d <__vfprintf_internal+0x10d>
    0.00 :   769da:  nopw   0x0(%rax,%rax,1)
         : 1986  __vfprintf_internal():
         : 1987  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   769e0:  mov    0x8(%rsi),%rcx
    0.00 :   769e4:  lea    0x8(%rcx),%rax
    0.00 :   769e8:  mov    %rax,0x8(%rsi)
    0.00 :   769ec:  jmp    7561b <__vfprintf_internal+0x5eb>
    0.00 :   769f1:  nopl   0x0(%rax)
    0.00 :   769f8:  xor    %r15d,%r15d
         : 1994  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   769fb:  lea    0x528(%rsp),%r9
    0.00 :   76a03:  jmp    76596 <__vfprintf_internal+0x1566>
    0.00 :   76a08:  nopl   0x0(%rax,%rax,1)
         : 1998  read_int():
         : 1999  ./stdio-common/printf-parse.h:78
    0.00 :   76a10:  movzbl 0x1(%rdi),%edi
    0.00 :   76a14:  lea    0x2(%rbx),%rcx
    0.00 :   76a18:  mov    %edi,%r13d
    0.00 :   76a1b:  sub    $0x30,%edi
    0.00 :   76a1e:  cmp    $0x9,%edi
    0.00 :   76a21:  ja     76a71 <__vfprintf_internal+0x1a41>
    0.00 :   76a23:  mov    %rbx,0x10(%rsp)
    0.00 :   76a28:  mov    %edx,0x88(%rsp)
    0.00 :   76a2f:  mov    %edi,%ebx
    0.00 :   76a31:  movzbl 0x1(%rcx),%edi
    0.00 :   76a35:  add    $0x1,%rcx
    0.00 :   76a39:  mov    %edi,%r13d
    0.00 :   76a3c:  sub    $0x30,%edi
         : 2013  ./stdio-common/printf-parse.h:81
    0.00 :   76a3f:  cmp    $0xccccccc,%esi
    0.00 :   76a45:  jg     770e0 <__vfprintf_internal+0x20b0>
         : 2016  ./stdio-common/printf-parse.h:87
    0.00 :   76a4b:  lea    (%rsi,%rsi,4),%edx
         : 2018  ./stdio-common/printf-parse.h:88
    0.00 :   76a4e:  mov    %r9d,%esi
         : 2020  ./stdio-common/printf-parse.h:87
    0.00 :   76a51:  add    %edx,%edx
         : 2022  ./stdio-common/printf-parse.h:88
    0.00 :   76a53:  sub    %ebx,%esi
    0.00 :   76a55:  cmp    %esi,%edx
    0.00 :   76a57:  jg     770e0 <__vfprintf_internal+0x20b0>
         : 2026  ./stdio-common/printf-parse.h:91
    0.00 :   76a5d:  lea    (%rdx,%rbx,1),%esi
         : 2028  ./stdio-common/printf-parse.h:78
    0.00 :   76a60:  cmp    $0x9,%edi
    0.00 :   76a63:  jbe    76a2f <__vfprintf_internal+0x19ff>
    0.00 :   76a65:  mov    0x10(%rsp),%rbx
    0.00 :   76a6a:  mov    0x88(%rsp),%edx
         : 2033  __vfprintf_internal():
         : 2034  ./stdio-common/vfprintf-internal.c:1388 (discriminator 1)
    0.00 :   76a71:  cmp    $0x24,%r13b
    0.00 :   76a75:  jne    76235 <__vfprintf_internal+0x1205>
    0.00 :   76a7b:  test   %esi,%esi
    0.00 :   76a7d:  je     76235 <__vfprintf_internal+0x1205>
    0.00 :   76a83:  nopl   0x0(%rax,%rax,1)
    0.00 :   76a88:  mov    0x78(%rsp),%eax
    0.00 :   76a8c:  jmp    752df <__vfprintf_internal+0x2af>
    0.00 :   76a91:  nopl   0x0(%rax)
         : 2043  ./stdio-common/vfprintf-internal.c:1368 (discriminator 4)
    0.00 :   76a98:  movl   $0x1,0x5c(%rsp)
         : 2045  ./stdio-common/vfprintf-internal.c:1369 (discriminator 4)
    0.00 :   76aa0:  mov    %rcx,%rbx
    0.00 :   76aa3:  jmp    *%rsi
    0.00 :   76aa5:  nopl   (%rax)
         : 2049  ./stdio-common/vfprintf-internal.c:1392 (discriminator 16)
    0.00 :   76aa8:  mov    0x20(%rsp),%rsi
    0.00 :   76aad:  mov    (%rsi),%eax
         : 2052  ./stdio-common/vfprintf-internal.c:1516 (discriminator 16)
    0.00 :   76aaf:  test   %r11d,%r11d
    0.00 :   76ab2:  je     76db7 <__vfprintf_internal+0x1d87>
         : 2055  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76ab8:  cmp    $0x2f,%eax
    0.00 :   76abb:  ja     77265 <__vfprintf_internal+0x2235>
    0.00 :   76ac1:  mov    %eax,%edx
    0.00 :   76ac3:  add    $0x8,%eax
    0.00 :   76ac6:  add    0x10(%rsi),%rdx
    0.00 :   76aca:  mov    %eax,(%rsi)
    0.00 :   76acc:  movsbq (%rdx),%r10
         : 2063  ./stdio-common/vfprintf-internal.c:1516 (discriminator 24)
    0.00 :   76ad0:  mov    %r10,%r11
    0.00 :   76ad3:  test   %r10,%r10
    0.00 :   76ad6:  js     76fc8 <__vfprintf_internal+0x1f98>
         : 2067  ./stdio-common/vfprintf-internal.c:1516 (discriminator 26)
    0.00 :   76adc:  movl   $0xa,0x60(%rsp)
    0.00 :   76ae4:  xor    %r10d,%r10d
    0.00 :   76ae7:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76aec:  nopl   0x0(%rax)
         : 2072  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76af0:  cmp    $0x2f,%eax
    0.00 :   76af3:  jbe    76ddc <__vfprintf_internal+0x1dac>
    0.00 :   76af9:  mov    0x8(%rdi),%rdx
    0.00 :   76afd:  lea    0x8(%rdx),%rax
    0.00 :   76b01:  mov    %rax,0x8(%rdi)
    0.00 :   76b05:  movl   $0x0,0x40(%rsp)
    0.00 :   76b0d:  movzwl (%rdx),%r11d
    0.00 :   76b11:  xor    %r10d,%r10d
    0.00 :   76b14:  movl   $0x0,0x58(%rsp)
    0.00 :   76b1c:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76b21:  nopl   0x0(%rax)
         : 2084  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b28:  movsbl %r13b,%esi
         : 2086  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   76b2c:  lea    0x15ab2d(%rip),%rbx        # 1d1660 <step0_jumps.9>
         : 2088  ./stdio-common/vfprintf-internal.c:1317 (discriminator 1)
    0.00 :   76b33:  movl   $0x1,0x58(%rsp)
         : 2090  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b3b:  sub    $0x20,%esi
    0.00 :   76b3e:  movslq %esi,%rsi
    0.00 :   76b41:  movzbl (%rax,%rsi,1),%esi
         : 2094  ./stdio-common/vfprintf-internal.c:1329 (discriminator 1)
    0.00 :   76b45:  movslq (%rbx,%rsi,4),%rsi
    0.00 :   76b49:  lea    -0x13e0(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76b50:  add    %rbx,%rsi
         : 2098  ./stdio-common/vfprintf-internal.c:1318 (discriminator 1)
    0.00 :   76b53:  mov    %rcx,%rbx
    0.00 :   76b56:  jmp    *%rsi
    0.00 :   76b58:  nopl   0x0(%rax,%rax,1)
         : 2102  ./stdio-common/vfprintf-internal.c:1486 (discriminator 4)
    0.00 :   76b60:  mov    %rdx,%rbx
         : 2104  ./stdio-common/vfprintf-internal.c:1485 (discriminator 4)
    0.00 :   76b63:  mov    $0x1,%r10d
         : 2106  ./stdio-common/vfprintf-internal.c:1484 (discriminator 4)
    0.00 :   76b69:  mov    $0x1,%edx
    0.00 :   76b6e:  jmp    *%rsi
         : 2109  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76b70:  mov    0x8(%rdi),%rdx
    0.00 :   76b74:  lea    0x8(%rdx),%rax
    0.00 :   76b78:  mov    %rax,0x8(%rdi)
    0.00 :   76b7c:  jmp    76069 <__vfprintf_internal+0x1039>
    0.00 :   76b81:  nopl   0x0(%rax)
         : 2115  ./stdio-common/vfprintf-internal.c:1344 (discriminator 4)
    0.00 :   76b88:  movl   $0x1,0x50(%rsp)
         : 2117  ./stdio-common/vfprintf-internal.c:1365 (discriminator 4)
    0.00 :   76b90:  mov    %rcx,%rbx
    0.00 :   76b93:  jmp    *%rsi
    0.00 :   76b95:  nopl   (%rax)
         : 2121  ./stdio-common/vfprintf-internal.c:1333 (discriminator 4)
    0.00 :   76b98:  movl   $0x1,0x4c(%rsp)
         : 2123  ./stdio-common/vfprintf-internal.c:1334 (discriminator 4)
    0.00 :   76ba0:  mov    %rcx,%rbx
    0.00 :   76ba3:  jmp    *%rsi
    0.00 :   76ba5:  nopl   (%rax)
         : 2127  ./stdio-common/vfprintf-internal.c:1479 (discriminator 4)
    0.00 :   76ba8:  mov    %rcx,%rbx
         : 2129  ./stdio-common/vfprintf-internal.c:1478 (discriminator 4)
    0.00 :   76bab:  mov    $0x1,%r10d
    0.00 :   76bb1:  jmp    *%rsi
    0.00 :   76bb3:  nopl   0x0(%rax,%rax,1)
         : 2133  ./stdio-common/vfprintf-internal.c:1322 (discriminator 4)
    0.00 :   76bb8:  movl   $0x1,0x40(%rsp)
         : 2135  ./stdio-common/vfprintf-internal.c:1323 (discriminator 4)
    0.00 :   76bc0:  mov    %rcx,%rbx
    0.00 :   76bc3:  jmp    *%rsi
    0.00 :   76bc5:  nopl   (%rax)
         : 2139  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76bc8:  mov    0x8(%rdi),%rdx
    0.00 :   76bcc:  lea    0x8(%rdx),%rax
    0.00 :   76bd0:  mov    %rax,0x8(%rdi)
    0.00 :   76bd4:  jmp    75e7f <__vfprintf_internal+0xe4f>
    0.00 :   76bd9:  nopl   0x0(%rax)
         : 2145  ./stdio-common/vfprintf-internal.c:1468 (discriminator 4)
    0.00 :   76be0:  mov    %rcx,%rbx
         : 2147  ./stdio-common/vfprintf-internal.c:1467 (discriminator 4)
    0.00 :   76be3:  mov    $0x1,%r15d
    0.00 :   76be9:  jmp    *%rsi
    0.00 :   76beb:  nopl   0x0(%rax,%rax,1)
         : 2151  ./stdio-common/vfprintf-internal.c:1516 (discriminator 244)
    0.00 :   76bf0:  mov    0x90(%rsp),%edi
    0.00 :   76bf7:  lea    0x140(%rsp),%rsi
    0.00 :   76bff:  mov    $0x3e8,%edx
    0.00 :   76c04:  call   a8620 <__strerror_r>
    0.00 :   76c09:  mov    %rax,%r15
    0.00 :   76c0c:  jmp    758a1 <__vfprintf_internal+0x871>
    0.00 :   76c11:  nopl   0x0(%rax)
         : 2159  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76c18:  mov    0x8(%rdi),%rdx
    0.00 :   76c1c:  lea    0x8(%rdx),%rax
    0.00 :   76c20:  mov    %rax,0x8(%rdi)
    0.00 :   76c24:  jmp    7572f <__vfprintf_internal+0x6ff>
    0.00 :   76c29:  nopl   0x0(%rax)
         : 2165  ./stdio-common/vfprintf-internal.c:1516 (discriminator 234)
    0.00 :   76c30:  test   %r11d,%r11d
    0.00 :   76c33:  jne    76d9e <__vfprintf_internal+0x1d6e>
         : 2168  ./stdio-common/vfprintf-internal.c:1516 (discriminator 237)
    0.00 :   76c39:  test   %r15d,%r15d
    0.00 :   76c3c:  jne    77276 <__vfprintf_internal+0x2246>
         : 2171  ./stdio-common/vfprintf-internal.c:1516 (discriminator 239)
    0.00 :   76c42:  mov    %r12d,(%rax)
    0.00 :   76c45:  jmp    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76c4a:  nopw   0x0(%rax,%rax,1)
         : 2175  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76c50:  mov    0x8(%rsi),%rdx
    0.00 :   76c54:  lea    0x8(%rdx),%rax
    0.00 :   76c58:  mov    %rax,0x8(%rsi)
    0.00 :   76c5c:  jmp    75e41 <__vfprintf_internal+0xe11>
    0.00 :   76c61:  nopl   0x0(%rax)
         : 2181  ./stdio-common/vfprintf-internal.c:1376 (discriminator 4)
    0.00 :   76c68:  mov    0x70(%rsp),%rbx
    0.00 :   76c6d:  jmp    *%rsi
    0.00 :   76c6f:  nop
    0.00 :   76c70:  mov    %rsi,%rdi
         : 2186  ./stdio-common/vfprintf-internal.c:1392
    0.00 :   76c73:  mov    %ecx,%esi
    0.00 :   76c75:  add    $0x8,%ecx
    0.00 :   76c78:  mov    %ecx,(%rdi)
    0.00 :   76c7a:  add    0x10(%rdi),%rsi
    0.00 :   76c7e:  jmp    76254 <__vfprintf_internal+0x1224>
         : 2192  ./stdio-common/vfprintf-internal.c:1516 (discriminator 218)
    0.00 :   76c83:  mov    $0x5,%eax
    0.00 :   76c88:  lea    0x161be6(%rip),%r15        # 1d8875 <not_available+0x317>
    0.00 :   76c8f:  cmp    %eax,%r14d
    0.00 :   76c92:  cmovl  %eax,%r14d
         : 2197  ./stdio-common/vfprintf-internal.c:1517 (discriminator 218)
    0.00 :   76c96:  cmp    $0x53,%r13b
    0.00 :   76c9a:  jne    758cb <__vfprintf_internal+0x89b>
         : 2200  ./stdio-common/vfprintf-internal.c:1517 (discriminator 41)
    0.00 :   76ca0:  mov    0x28(%rsp),%r8d
    0.00 :   76ca5:  mov    0x10(%rsp),%ecx
    0.00 :   76ca9:  mov    %r12d,%r9d
    0.00 :   76cac:  mov    %r14d,%edx
    0.00 :   76caf:  mov    %r15,%rsi
    0.00 :   76cb2:  mov    %rbp,%rdi
    0.00 :   76cb5:  call   72680 <outstring_converted_wide_string>
    0.00 :   76cba:  mov    %eax,%r12d
    0.00 :   76cbd:  test   %eax,%eax
    0.00 :   76cbf:  jns    75f80 <__vfprintf_internal+0xf50>
    0.00 :   76cc5:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76cca:  nopw   0x0(%rax,%rax,1)
         : 2213  ./stdio-common/vfprintf-internal.c:1418 (discriminator 1)
    0.00 :   76cd0:  movsbl %r13b,%esi
    0.00 :   76cd4:  lea    0x15a905(%rip),%rbx        # 1d15e0 <step1_jumps.8>
    0.00 :   76cdb:  sub    $0x20,%esi
    0.00 :   76cde:  movslq %esi,%rsi
    0.00 :   76ce1:  movzbl (%rax,%rsi,1),%esi
    0.00 :   76ce5:  movslq (%rbx,%rsi,4),%rsi
   14.05 :   76ce9:  lea    -0x1580(%rip),%rbx        # 75770 <__vfprintf_internal+0x740>
    0.00 :   76cf0:  add    %rbx,%rsi
    0.00 :   76cf3:  mov    %rcx,%rbx
    0.00 :   76cf6:  jmp    *%rsi
    0.00 :   76cf8:  nopl   0x0(%rax,%rax,1)
         : 2225  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   76d00:  mov    0x8(%rsi),%rdx
    0.00 :   76d04:  lea    0x8(%rdx),%rax
    0.00 :   76d08:  mov    %rax,0x8(%rsi)
    0.00 :   76d0c:  jmp    755cf <__vfprintf_internal+0x59f>
    0.00 :   76d11:  nopl   0x0(%rax)
         : 2231  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76d18:  mov    0x8(%rdi),%rdx
    0.00 :   76d1c:  lea    0x8(%rdx),%rax
    0.00 :   76d20:  mov    %rax,0x8(%rdi)
    0.00 :   76d24:  jmp    757df <__vfprintf_internal+0x7af>
         : 2236  ./stdio-common/vfprintf-internal.c:1517 (discriminator 43)
    0.00 :   76d29:  mov    %r15,%rdi
    0.00 :   76d2c:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76d31:  mov    %rax,%r14
    0.00 :   76d34:  jmp    758d9 <__vfprintf_internal+0x8a9>
         : 2241  pad_func():
         : 2242  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76d39:  movslq %r13d,%rdx
    0.00 :   76d3c:  mov    $0x20,%esi
    0.00 :   76d41:  mov    %rbp,%rdi
    0.00 :   76d44:  mov    %rdx,0x10(%rsp)
    0.00 :   76d49:  call   806a0 <_IO_padn>
         : 2248  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76d4e:  mov    0x10(%rsp),%rdx
    0.00 :   76d53:  cmp    %rax,%rdx
    0.00 :   76d56:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2252  done_add_func():
         : 2253  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76d5c:  add    %r13d,%r12d
    0.00 :   76d5f:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76d65:  cmp    %r13d,%r12d
    0.00 :   76d68:  jb     75860 <__vfprintf_internal+0x830>
         : 2258  __vfprintf_internal():
         : 2259  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76d6e:  test   %r12d,%r12d
    0.00 :   76d71:  jns    75655 <__vfprintf_internal+0x625>
    0.00 :   76d77:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76d7c:  nopl   0x0(%rax)
         : 2264  ./stdio-common/vfprintf-internal.c:1555
    0.00 :   76d80:  mov    0x8(%rcx),%rax
    0.00 :   76d84:  mov    %rax,0x10(%rsp)
    0.00 :   76d89:  add    $0xf,%rax
    0.00 :   76d8d:  and    $0xfffffffffffffff0,%rax
    0.00 :   76d91:  lea    0x10(%rax),%rdx
    0.00 :   76d95:  mov    %rdx,0x8(%rcx)
    0.00 :   76d99:  jmp    754e7 <__vfprintf_internal+0x4b7>
         : 2272  ./stdio-common/vfprintf-internal.c:1516 (discriminator 236)
    0.00 :   76d9e:  mov    %r12b,(%rax)
    0.00 :   76da1:  jmp    75f80 <__vfprintf_internal+0xf50>
         : 2275  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76da6:  mov    0x8(%rdi),%rdx
    0.00 :   76daa:  lea    0x8(%rdx),%rax
    0.00 :   76dae:  mov    %rax,0x8(%rdi)
    0.00 :   76db2:  jmp    75f48 <__vfprintf_internal+0xf18>
         : 2280  ./stdio-common/vfprintf-internal.c:1516 (discriminator 19)
    0.00 :   76db7:  test   %r15d,%r15d
    0.00 :   76dba:  jne    7727f <__vfprintf_internal+0x224f>
         : 2283  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   76dc0:  cmp    $0x2f,%eax
    0.00 :   76dc3:  ja     77401 <__vfprintf_internal+0x23d1>
    0.00 :   76dc9:  mov    %eax,%edx
    0.00 :   76dcb:  add    $0x8,%eax
    0.00 :   76dce:  add    0x10(%rsi),%rdx
    0.00 :   76dd2:  mov    %eax,(%rsi)
    0.00 :   76dd4:  movslq (%rdx),%r10
    0.00 :   76dd7:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   76ddc:  mov    %eax,%edx
    0.00 :   76dde:  add    $0x8,%eax
    0.00 :   76de1:  add    0x10(%rdi),%rdx
    0.00 :   76de5:  mov    %eax,(%rdi)
    0.00 :   76de7:  jmp    76b05 <__vfprintf_internal+0x1ad5>
    0.00 :   76dec:  mov    0x8(%rdi),%rdx
    0.00 :   76df0:  lea    0x8(%rdx),%rax
    0.00 :   76df4:  mov    %rax,0x8(%rdi)
    0.00 :   76df8:  jmp    76835 <__vfprintf_internal+0x1805>
         : 2301  pad_func():
         : 2302  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76dfd:  movslq %r13d,%rdx
    0.00 :   76e00:  mov    $0x20,%esi
    0.00 :   76e05:  mov    %rbp,%rdi
    0.00 :   76e08:  mov    %rdx,0x10(%rsp)
    0.00 :   76e0d:  call   806a0 <_IO_padn>
         : 2308  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76e12:  mov    0x10(%rsp),%rdx
    0.00 :   76e17:  cmp    %rax,%rdx
    0.00 :   76e1a:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2312  done_add_func():
         : 2313  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76e20:  add    %r13d,%r12d
    0.00 :   76e23:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76e29:  cmp    %r13d,%r12d
    0.00 :   76e2c:  jb     75860 <__vfprintf_internal+0x830>
         : 2318  __vfprintf_internal():
         : 2319  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76e32:  test   %r12d,%r12d
    0.00 :   76e35:  jns    758fa <__vfprintf_internal+0x8ca>
    0.00 :   76e3b:  jmp    7533d <__vfprintf_internal+0x30d>
         : 2323  read_int():
         : 2324  ./stdio-common/printf-parse.h:78
    0.00 :   76e40:  movzbl 0x1(%rcx),%edi
    0.00 :   76e44:  add    $0x2,%rbx
    0.00 :   76e48:  mov    %edi,%r13d
    0.00 :   76e4b:  sub    $0x30,%edi
    0.00 :   76e4e:  cmp    $0x9,%edi
    0.00 :   76e51:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e57:  movzbl 0x1(%rbx),%ecx
    0.00 :   76e5b:  add    $0x1,%rbx
    0.00 :   76e5f:  mov    %ecx,%r13d
    0.00 :   76e62:  sub    $0x30,%ecx
         : 2335  ./stdio-common/printf-parse.h:81
    0.00 :   76e65:  cmp    $0xccccccc,%r14d
    0.00 :   76e6c:  jg     76f80 <__vfprintf_internal+0x1f50>
         : 2338  ./stdio-common/printf-parse.h:87
    0.00 :   76e72:  lea    (%r14,%r14,4),%r14d
         : 2340  ./stdio-common/printf-parse.h:88
    0.00 :   76e76:  mov    %r9d,%esi
         : 2342  ./stdio-common/printf-parse.h:87
    0.00 :   76e79:  add    %r14d,%r14d
         : 2344  ./stdio-common/printf-parse.h:88
    0.00 :   76e7c:  sub    %edi,%esi
    0.00 :   76e7e:  cmp    %esi,%r14d
    0.00 :   76e81:  jg     76f80 <__vfprintf_internal+0x1f50>
         : 2348  ./stdio-common/printf-parse.h:91
    0.00 :   76e87:  add    %edi,%r14d
         : 2350  ./stdio-common/printf-parse.h:78
    0.00 :   76e8a:  cmp    $0x9,%ecx
    0.00 :   76e8d:  ja     75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   76e93:  mov    %ecx,%edi
    0.00 :   76e95:  jmp    76e57 <__vfprintf_internal+0x1e27>
         : 2355  pad_func():
         : 2356  ./stdio-common/vfprintf-internal.c:192
    0.00 :   76e97:  test   %r13d,%r13d
    0.00 :   76e9a:  jle    757c4 <__vfprintf_internal+0x794>
         : 2359  ./stdio-common/vfprintf-internal.c:196
    0.00 :   76ea0:  movslq %r13d,%r14
    0.00 :   76ea3:  mov    $0x20,%esi
    0.00 :   76ea8:  mov    %rbp,%rdi
    0.00 :   76eab:  mov    %r14,%rdx
    0.00 :   76eae:  call   806a0 <_IO_padn>
         : 2365  ./stdio-common/vfprintf-internal.c:200
    0.00 :   76eb3:  cmp    %rax,%r14
    0.00 :   76eb6:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2368  done_add_func():
         : 2369  ./stdio-common/vfprintf-internal.c:127
    0.00 :   76ebc:  add    %r13d,%r12d
    0.00 :   76ebf:  js     75860 <__vfprintf_internal+0x830>
    0.00 :   76ec5:  cmp    %r13d,%r12d
    0.00 :   76ec8:  jb     75860 <__vfprintf_internal+0x830>
         : 2374  __vfprintf_internal():
         : 2375  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76ece:  test   %r12d,%r12d
    0.00 :   76ed1:  jns    757c4 <__vfprintf_internal+0x794>
    0.00 :   76ed7:  jmp    7533d <__vfprintf_internal+0x30d>
    0.00 :   76edc:  nopl   0x0(%rax)
         : 2380  ./stdio-common/vfprintf-internal.c:1260 (discriminator 7)
    0.00 :   76ee0:  call   91230 <__lll_lock_wait_private>
    0.00 :   76ee5:  jmp    75567 <__vfprintf_internal+0x537>
         : 2383  ./stdio-common/vfprintf-internal.c:1516 (discriminator 225)
    0.00 :   76eea:  mov    0x8(%rsp),%r14
    0.00 :   76eef:  mov    %r10d,0x28(%rsp)
    0.00 :   76ef4:  mov    %r11d,0x10(%rsp)
    0.00 :   76ef9:  mov    %r14,%rdi
    0.00 :   76efc:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   76f01:  mov    %r14,%rdi
    0.00 :   76f04:  lea    0x1(%rax),%rsi
    0.00 :   76f08:  call   134f20 <__readonly_area>
    0.00 :   76f0d:  mov    0x10(%rsp),%r11d
    0.00 :   76f12:  mov    0x28(%rsp),%r10d
    0.00 :   76f17:  test   %eax,%eax
    0.00 :   76f19:  mov    %eax,0xa0(%rsp)
    0.00 :   76f20:  jns    75e26 <__vfprintf_internal+0xdf6>
         : 2397  ./stdio-common/vfprintf-internal.c:1516 (discriminator 228)
    0.00 :   76f26:  lea    0x1668cb(%rip),%rdi        # 1dd7f8 <__PRETTY_FUNCTION__.0+0x1d0>
    0.00 :   76f2d:  call   896d0 <__libc_fatal>
    0.00 :   76f32:  nopw   0x0(%rax,%rax,1)
    0.00 :   76f38:  mov    $0x6,%eax
         : 2402  ./stdio-common/vfprintf-internal.c:1517
    0.00 :   76f3d:  mov    $0x6,%r14d
    0.00 :   76f43:  lea    0x161931(%rip),%r15        # 1d887b <null>
    0.00 :   76f4a:  jmp    758d9 <__vfprintf_internal+0x8a9>
         : 2406  ./stdio-common/vfprintf-internal.c:1516 (discriminator 138)
    0.00 :   76f4f:  mov    $0x30,%esi
    0.00 :   76f54:  mov    %rbp,%rdi
    0.00 :   76f57:  mov    %r8d,0x28(%rsp)
    0.00 :   76f5c:  mov    %r9,0x10(%rsp)
    0.00 :   76f61:  call   8d800 <__overflow>
    0.00 :   76f66:  mov    0x10(%rsp),%r9
    0.00 :   76f6b:  mov    0x28(%rsp),%r8d
    0.00 :   76f70:  cmp    $0xffffffff,%eax
    0.00 :   76f73:  jne    75c37 <__vfprintf_internal+0xc07>
    0.00 :   76f79:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   76f7e:  xchg   %ax,%ax
         : 2418  read_int():
         : 2419  ./stdio-common/printf-parse.h:78
    0.00 :   76f80:  cmp    $0x9,%ecx
    0.00 :   76f83:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f89:  movzbl 0x1(%rbx),%eax
    0.00 :   76f8d:  sub    $0x30,%eax
    0.00 :   76f90:  cmp    $0x9,%eax
    0.00 :   76f93:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76f99:  movzbl 0x2(%rbx),%eax
    0.00 :   76f9d:  sub    $0x30,%eax
    0.00 :   76fa0:  cmp    $0x9,%eax
    0.00 :   76fa3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   76fa9:  add    $0x3,%rbx
    0.00 :   76fad:  nopl   (%rax)
    0.00 :   76fb0:  movzbl (%rbx),%eax
    0.00 :   76fb3:  add    $0x1,%rbx
    0.00 :   76fb7:  sub    $0x30,%eax
    0.00 :   76fba:  cmp    $0x9,%eax
    0.00 :   76fbd:  jbe    76fb0 <__vfprintf_internal+0x1f80>
    0.00 :   76fbf:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   76fc4:  nopl   0x0(%rax)
         : 2439  __vfprintf_internal():
         : 2440  ./stdio-common/vfprintf-internal.c:1516 (discriminator 25)
    0.00 :   76fc8:  movl   $0xa,0x60(%rsp)
    0.00 :   76fd0:  neg    %r11
    0.00 :   76fd3:  mov    $0x1,%r10d
    0.00 :   76fd9:  jmp    75a66 <__vfprintf_internal+0xa36>
    0.00 :   76fde:  xchg   %ax,%ax
         : 2446  outstring_func():
         : 2447  ./stdio-common/vfprintf-internal.c:239
    0.00 :   76fe0:  mov    0xd8(%rbp),%r13
         : 2449  IO_validate_vtable():
         : 2450  ./stdio-common/../libio/libioP.h:942
    0.00 :   76fe7:  lea    0x19fa12(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   76fee:  mov    %r13,%rax
    0.00 :   76ff1:  sub    %rdx,%rax
         : 2454  ./stdio-common/../libio/libioP.h:943
    0.00 :   76ff4:  cmp    %rax,0x30(%rsp)
    0.00 :   76ff9:  jbe    77459 <__vfprintf_internal+0x2429>
         : 2457  outstring_func():
         : 2458  ./stdio-common/vfprintf-internal.c:239
    0.00 :   76fff:  mov    %r14,%rdx
    0.00 :   77002:  mov    %r15,%rsi
    0.00 :   77005:  mov    %rbp,%rdi
    0.00 :   77008:  call   *0x38(%r13)
    0.00 :   7700c:  cmp    %r14,%rax
    0.00 :   7700f:  jne    76728 <__vfprintf_internal+0x16f8>
         : 2465  done_add_func():
         : 2466  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77015:  movslq %r12d,%rax
    0.00 :   77018:  xor    %edx,%edx
    0.00 :   7701a:  add    %r14,%rax
    0.00 :   7701d:  js     77028 <__vfprintf_internal+0x1ff8>
    0.00 :   7701f:  cmp    %r14,%rax
    0.00 :   77022:  jae    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77028:  mov    $0x1,%edx
    0.00 :   7702d:  jmp    75cc9 <__vfprintf_internal+0xc99>
    0.00 :   77032:  nopw   0x0(%rax,%rax,1)
         : 2476  __vfprintf_internal():
         : 2477  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77038:  mov    0x70(%rsp),%rdx
    0.00 :   7703d:  mov    $0x0,%eax
    0.00 :   77042:  sub    %r15,%rdx
    0.00 :   77045:  cmovs  %rax,%rdx
    0.00 :   77049:  mov    %edx,%r14d
    0.00 :   7704c:  jmp    7659d <__vfprintf_internal+0x156d>
    0.00 :   77051:  nopl   0x0(%rax)
         : 2485  ./stdio-common/vfprintf-internal.c:1516 (discriminator 113)
    0.00 :   77058:  mov    0x58(%rsp),%ecx
    0.00 :   7705c:  test   %ecx,%ecx
    0.00 :   7705e:  je     75c02 <__vfprintf_internal+0xbd2>
         : 2489  ./stdio-common/vfprintf-internal.c:1516 (discriminator 122)
    0.00 :   77064:  mov    0x28(%rbp),%rax
    0.00 :   77068:  cmp    0x30(%rbp),%rax
    0.00 :   7706c:  jae    7747c <__vfprintf_internal+0x244c>
         : 2493  ./stdio-common/vfprintf-internal.c:1516 (discriminator 125)
    0.00 :   77072:  lea    0x1(%rax),%rdx
    0.00 :   77076:  mov    %rdx,0x28(%rbp)
    0.00 :   7707a:  movb   $0x20,(%rax)
    0.00 :   7707d:  jmp    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77082:  nopw   0x0(%rax,%rax,1)
         : 2499  ./stdio-common/vfprintf-internal.c:1427
    0.00 :   77088:  movzbl 0x2(%rbx),%ecx
         : 2501  ./stdio-common/vfprintf-internal.c:1426
    0.00 :   7708c:  lea    0x2(%rbx),%rsi
    0.00 :   77090:  mov    %rsi,0x70(%rsp)
         : 2504  ./stdio-common/vfprintf-internal.c:1427
    0.00 :   77095:  sub    $0x30,%ecx
    0.00 :   77098:  cmp    $0x9,%ecx
    0.00 :   7709b:  jbe    772b0 <__vfprintf_internal+0x2280>
         : 2508  ./stdio-common/vfprintf-internal.c:1442
    0.00 :   770a1:  mov    0x20(%rsp),%rbx
    0.00 :   770a6:  mov    (%rbx),%ecx
    0.00 :   770a8:  cmp    $0x2f,%ecx
    0.00 :   770ab:  jbe    771ee <__vfprintf_internal+0x21be>
    0.00 :   770b1:  mov    0x8(%rbx),%rsi
    0.00 :   770b5:  lea    0x8(%rsi),%rcx
    0.00 :   770b9:  mov    %rcx,0x8(%rbx)
         : 2516  ./stdio-common/vfprintf-internal.c:1445
    0.00 :   770bd:  mov    (%rsi),%ecx
    0.00 :   770bf:  mov    $0xffffffff,%esi
         : 2519  ./stdio-common/vfprintf-internal.c:1463
    0.00 :   770c4:  mov    0x70(%rsp),%rbx
    0.00 :   770c9:  test   %ecx,%ecx
    0.00 :   770cb:  movzbl (%rbx),%r13d
    0.00 :   770cf:  cmovns %ecx,%esi
    0.00 :   770d2:  mov    %esi,%r14d
    0.00 :   770d5:  jmp    75ee6 <__vfprintf_internal+0xeb6>
    0.00 :   770da:  nopw   0x0(%rax,%rax,1)
         : 2527  read_int():
         : 2528  ./stdio-common/printf-parse.h:78
    0.00 :   770e0:  cmp    $0x9,%edi
    0.00 :   770e3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770e9:  movzbl 0x1(%rcx),%eax
    0.00 :   770ed:  sub    $0x30,%eax
    0.00 :   770f0:  cmp    $0x9,%eax
    0.00 :   770f3:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   770f9:  movzbl 0x2(%rcx),%eax
    0.00 :   770fd:  sub    $0x30,%eax
    0.00 :   77100:  cmp    $0x9,%eax
    0.00 :   77103:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77109:  add    $0x3,%rcx
    0.00 :   7710d:  nopl   (%rax)
    0.00 :   77110:  movzbl (%rcx),%eax
    0.00 :   77113:  add    $0x1,%rcx
    0.00 :   77117:  sub    $0x30,%eax
    0.00 :   7711a:  cmp    $0x9,%eax
    0.00 :   7711d:  jbe    77110 <__vfprintf_internal+0x20e0>
    0.00 :   7711f:  jmp    75860 <__vfprintf_internal+0x830>
    0.00 :   77124:  nopl   0x0(%rax)
         : 2548  __vfprintf_internal():
         : 2549  ./stdio-common/vfprintf-internal.c:1214
    0.00 :   77128:  movl   $0x0,0xa0(%rsp)
         : 2551  ./stdio-common/vfprintf-internal.c:1240
    0.00 :   77133:  movq   $0xffffffffffffffff,0x80(%rsp)
         : 2553  ./stdio-common/vfprintf-internal.c:1182
    0.00 :   7713f:  movq   $0x0,0x98(%rsp)
    0.00 :   7714b:  jmp    752df <__vfprintf_internal+0x2af>
         : 2556  ./stdio-common/vfprintf-internal.c:1516 (discriminator 247)
    0.00 :   77150:  movslq 0x90(%rsp),%r11
    0.00 :   77158:  movl   $0xa,0x60(%rsp)
    0.00 :   77160:  xor    %r10d,%r10d
    0.00 :   77163:  test   %r11d,%r11d
    0.00 :   77166:  jns    75a66 <__vfprintf_internal+0xa36>
         : 2562  ./stdio-common/vfprintf-internal.c:1516 (discriminator 249)
    0.00 :   7716c:  neg    %r11
    0.00 :   7716f:  mov    $0x1,%r10d
    0.00 :   77175:  jmp    75a66 <__vfprintf_internal+0xa36>
         : 2566  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   7717a:  mov    0x60(%rsp),%rcx
    0.00 :   7717f:  mov    0x8(%rcx),%rcx
         : 2569  ./stdio-common/vfprintf-internal.c:1355
    0.00 :   77183:  mov    0x50(%rcx),%rdi
         : 2571  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   77187:  mov    0x48(%rcx),%rsi
         : 2573  ./stdio-common/vfprintf-internal.c:1356
    0.00 :   7718b:  movzbl (%rdi),%ecx
         : 2575  ./stdio-common/vfprintf-internal.c:1352
    0.00 :   7718e:  mov    %rsi,0x98(%rsp)
         : 2577  ./stdio-common/vfprintf-internal.c:1356
    0.00 :   77196:  test   %cl,%cl
    0.00 :   77198:  je     77240 <__vfprintf_internal+0x2210>
    0.00 :   7719e:  cmp    $0x7f,%cl
    0.00 :   771a1:  je     77240 <__vfprintf_internal+0x2210>
         : 2582  ./stdio-common/vfprintf-internal.c:1363
    0.00 :   771a7:  xor    %ecx,%ecx
    0.00 :   771a9:  cmpb   $0x0,(%rsi)
    0.00 :   771ac:  cmovne %rdi,%rcx
    0.00 :   771b0:  mov    %rcx,0x80(%rsp)
    0.00 :   771b8:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   771bd:  mov    %r9,0x10(%rsp)
         : 2589  IO_validate_vtable():
         : 2590  ./stdio-common/../libio/libioP.h:946
    0.00 :   771c2:  call   89ef0 <_IO_vtable_check>
    0.00 :   771c7:  mov    0x10(%rsp),%r9
    0.00 :   771cc:  jmp    7650a <__vfprintf_internal+0x14da>
    0.00 :   771d1:  mov    %r9,0x10(%rsp)
    0.00 :   771d6:  call   89ef0 <_IO_vtable_check>
    0.00 :   771db:  mov    0x10(%rsp),%r9
    0.00 :   771e0:  jmp    75c9c <__vfprintf_internal+0xc6c>
         : 2598  __vfprintf_internal():
         : 2599  ./stdio-common/vfprintf-internal.c:1533
    0.00 :   771e5:  xor    %edx,%edx
    0.00 :   771e7:  xor    %ecx,%ecx
    0.00 :   771e9:  jmp    7541b <__vfprintf_internal+0x3eb>
         : 2603  ./stdio-common/vfprintf-internal.c:1442
    0.00 :   771ee:  mov    %ecx,%esi
    0.00 :   771f0:  add    $0x8,%ecx
    0.00 :   771f3:  add    0x10(%rbx),%rsi
    0.00 :   771f7:  mov    %ecx,(%rbx)
    0.00 :   771f9:  jmp    770bd <__vfprintf_internal+0x208d>
    0.00 :   771fe:  mov    %r8d,0x38(%rsp)
         : 2610  ./stdio-common/vfprintf-internal.c:1516 (discriminator 104)
    0.00 :   77203:  mov    $0x2d,%esi
    0.00 :   77208:  mov    %r9,0x28(%rsp)
    0.00 :   7720d:  mov    %r11,0x10(%rsp)
         : 2614  ./stdio-common/vfprintf-internal.c:1516 (discriminator 124)
    0.00 :   77212:  mov    %rbp,%rdi
    0.00 :   77215:  call   8d800 <__overflow>
    0.00 :   7721a:  mov    0x10(%rsp),%r11
    0.00 :   7721f:  mov    0x28(%rsp),%r9
    0.00 :   77224:  cmp    $0xffffffff,%eax
    0.00 :   77227:  mov    0x38(%rsp),%r8d
    0.00 :   7722c:  jne    75bf1 <__vfprintf_internal+0xbc1>
    0.00 :   77232:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   77237:  nopw   0x0(%rax,%rax,1)
         : 2624  ./stdio-common/vfprintf-internal.c:1363
    0.00 :   77240:  movq   $0x0,0x80(%rsp)
    0.00 :   7724c:  jmp    75d03 <__vfprintf_internal+0xcd3>
    0.00 :   77251:  mov    %rax,0x10(%rsp)
         : 2628  IO_validate_vtable():
         : 2629  ./stdio-common/../libio/libioP.h:946
    0.00 :   77256:  call   89ef0 <_IO_vtable_check>
    0.00 :   7725b:  mov    0x10(%rsp),%rax
    0.00 :   77260:  jmp    75674 <__vfprintf_internal+0x644>
         : 2633  __vfprintf_internal():
         : 2634  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77265:  mov    0x8(%rsi),%rdx
    0.00 :   77269:  lea    0x8(%rdx),%rax
    0.00 :   7726d:  mov    %rax,0x8(%rsi)
    0.00 :   77271:  jmp    76acc <__vfprintf_internal+0x1a9c>
         : 2639  ./stdio-common/vfprintf-internal.c:1516 (discriminator 240)
    0.00 :   77276:  mov    %r12w,(%rax)
    0.00 :   7727a:  jmp    75f80 <__vfprintf_internal+0xf50>
         : 2642  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   7727f:  cmp    $0x2f,%eax
    0.00 :   77282:  ja     773f0 <__vfprintf_internal+0x23c0>
    0.00 :   77288:  mov    %eax,%edx
    0.00 :   7728a:  add    $0x8,%eax
    0.00 :   7728d:  add    0x10(%rsi),%rdx
    0.00 :   77291:  mov    %eax,(%rsi)
    0.00 :   77293:  movswq (%rdx),%r10
    0.00 :   77297:  jmp    76ad0 <__vfprintf_internal+0x1aa0>
    0.00 :   7729c:  mov    %rax,0x10(%rsp)
         : 2652  IO_validate_vtable():
         : 2653  ./stdio-common/../libio/libioP.h:946
    0.00 :   772a1:  call   89ef0 <_IO_vtable_check>
    0.00 :   772a6:  mov    0x10(%rsp),%rax
    0.00 :   772ab:  jmp    75919 <__vfprintf_internal+0x8e9>
         : 2657  read_int():
         : 2658  ./stdio-common/printf-parse.h:78
    0.00 :   772b0:  movzbl 0x1(%rsi),%esi
    0.00 :   772b4:  add    $0x3,%rbx
    0.00 :   772b8:  lea    -0x30(%rsi),%r13d
    0.00 :   772bc:  mov    %esi,%edi
    0.00 :   772be:  cmp    $0x9,%r13d
    0.00 :   772c2:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772c8:  movzbl 0x1(%rbx),%esi
    0.00 :   772cc:  add    $0x1,%rbx
    0.00 :   772d0:  mov    %esi,%edi
    0.00 :   772d2:  sub    $0x30,%esi
         : 2669  ./stdio-common/printf-parse.h:81
    0.00 :   772d5:  cmp    $0xccccccc,%ecx
    0.00 :   772db:  jg     77300 <__vfprintf_internal+0x22d0>
         : 2672  ./stdio-common/printf-parse.h:87
    0.00 :   772dd:  lea    (%rcx,%rcx,4),%ecx
         : 2674  ./stdio-common/printf-parse.h:88
    0.00 :   772e0:  mov    %r9d,%r14d
         : 2676  ./stdio-common/printf-parse.h:87
    0.00 :   772e3:  add    %ecx,%ecx
         : 2678  ./stdio-common/printf-parse.h:88
    0.00 :   772e5:  sub    %r13d,%r14d
    0.00 :   772e8:  cmp    %r14d,%ecx
    0.00 :   772eb:  jg     77300 <__vfprintf_internal+0x22d0>
         : 2682  ./stdio-common/printf-parse.h:91
    0.00 :   772ed:  add    %r13d,%ecx
         : 2684  ./stdio-common/printf-parse.h:78
    0.00 :   772f0:  cmp    $0x9,%esi
    0.00 :   772f3:  ja     77344 <__vfprintf_internal+0x2314>
    0.00 :   772f5:  mov    %esi,%r13d
    0.00 :   772f8:  jmp    772c8 <__vfprintf_internal+0x2298>
    0.00 :   772fa:  nopw   0x0(%rax,%rax,1)
    0.00 :   77300:  cmp    $0x9,%esi
    0.00 :   77303:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77309:  movzbl 0x1(%rbx),%eax
    0.00 :   7730d:  sub    $0x30,%eax
    0.00 :   77310:  cmp    $0x9,%eax
    0.00 :   77313:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77319:  movzbl 0x2(%rbx),%eax
    0.00 :   7731d:  sub    $0x30,%eax
    0.00 :   77320:  cmp    $0x9,%eax
    0.00 :   77323:  ja     75860 <__vfprintf_internal+0x830>
    0.00 :   77329:  add    $0x3,%rbx
    0.00 :   7732d:  nopl   (%rax)
    0.00 :   77330:  movzbl (%rbx),%eax
    0.00 :   77333:  add    $0x1,%rbx
    0.00 :   77337:  sub    $0x30,%eax
    0.00 :   7733a:  cmp    $0x9,%eax
    0.00 :   7733d:  jbe    77330 <__vfprintf_internal+0x2300>
    0.00 :   7733f:  jmp    75860 <__vfprintf_internal+0x830>
         : 2708  __vfprintf_internal():
         : 2709  ./stdio-common/vfprintf-internal.c:1438 (discriminator 1)
    0.00 :   77344:  test   %ecx,%ecx
    0.00 :   77346:  je     770a1 <__vfprintf_internal+0x2071>
    0.00 :   7734c:  cmp    $0x24,%dil
    0.00 :   77350:  jne    770a1 <__vfprintf_internal+0x2071>
    0.00 :   77356:  jmp    76a88 <__vfprintf_internal+0x1a58>
    0.00 :   7735b:  nopl   0x0(%rax,%rax,1)
         : 2716  ./stdio-common/vfprintf-internal.c:1516 (discriminator 1)
    0.00 :   77360:  mov    $0x25,%esi
    0.00 :   77365:  mov    %rbp,%rdi
    0.00 :   77368:  call   8d800 <__overflow>
    0.00 :   7736d:  cmp    $0xffffffff,%eax
    0.00 :   77370:  jne    75f6d <__vfprintf_internal+0xf3d>
    0.00 :   77376:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   7737b:  nopl   0x0(%rax,%rax,1)
         : 2724  ./stdio-common/vfprintf-internal.c:1222 (discriminator 1)
    0.00 :   77380:  mov    0x1a2a89(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   77387:  or     $0x20,%ebx
    0.00 :   7738a:  mov    $0xffffffff,%r12d
    0.00 :   77390:  mov    %ebx,0x0(%rbp)
    0.00 :   77393:  movl   $0x9,%fs:(%rax)
    0.00 :   7739a:  jmp    75354 <__vfprintf_internal+0x324>
    0.00 :   7739f:  mov    %r8d,0x38(%rsp)
         : 2732  ./stdio-common/vfprintf-internal.c:1516 (discriminator 114)
    0.00 :   773a4:  mov    $0x2b,%esi
    0.00 :   773a9:  mov    %r9,0x28(%rsp)
    0.00 :   773ae:  mov    %r11,0x10(%rsp)
    0.00 :   773b3:  jmp    77212 <__vfprintf_internal+0x21e2>
    0.00 :   773b8:  mov    %r9,0x40(%rsp)
         : 2738  ./stdio-common/vfprintf-internal.c:1516 (discriminator 169)
    0.00 :   773bd:  mov    $0x2b,%esi
    0.00 :   773c2:  mov    %rdx,0x38(%rsp)
    0.00 :   773c7:  mov    %r11,0x28(%rsp)
    0.00 :   773cc:  jmp    76704 <__vfprintf_internal+0x16d4>
         : 2743  ./stdio-common/vfprintf-internal.c:1517 (discriminator 8)
    0.00 :   773d1:  movzbl %dl,%esi
    0.00 :   773d4:  mov    %rbp,%rdi
    0.00 :   773d7:  call   8d800 <__overflow>
    0.00 :   773dc:  cmp    $0xffffffff,%eax
    0.00 :   773df:  jne    757f9 <__vfprintf_internal+0x7c9>
    0.00 :   773e5:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   773ea:  nopw   0x0(%rax,%rax,1)
         : 2751  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   773f0:  mov    0x8(%rsi),%rdx
    0.00 :   773f4:  lea    0x8(%rdx),%rax
    0.00 :   773f8:  mov    %rax,0x8(%rsi)
    0.00 :   773fc:  jmp    77293 <__vfprintf_internal+0x2263>
    0.00 :   77401:  mov    0x8(%rsi),%rdx
    0.00 :   77405:  lea    0x8(%rdx),%rax
    0.00 :   77409:  mov    %rax,0x8(%rsi)
    0.00 :   7740d:  jmp    76dd4 <__vfprintf_internal+0x1da4>
         : 2760  ./stdio-common/vfprintf-internal.c:1516 (discriminator 145)
    0.00 :   77412:  movzbl %r13b,%esi
    0.00 :   77416:  mov    %rbp,%rdi
    0.00 :   77419:  mov    %r8d,0x28(%rsp)
    0.00 :   7741e:  mov    %r9,0x10(%rsp)
    0.00 :   77423:  call   8d800 <__overflow>
    0.00 :   77428:  mov    0x10(%rsp),%r9
    0.00 :   7742d:  mov    0x28(%rsp),%r8d
    0.00 :   77432:  cmp    $0xffffffff,%eax
    0.00 :   77435:  jne    75c5d <__vfprintf_internal+0xc2d>
    0.00 :   7743b:  jmp    76728 <__vfprintf_internal+0x16f8>
         : 2771  ./stdio-common/vfprintf-internal.c:1222 (discriminator 3)
    0.00 :   77440:  mov    0x1a29c9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   77447:  mov    $0xffffffff,%r12d
    0.00 :   7744d:  movl   $0x16,%fs:(%rax)
    0.00 :   77454:  jmp    75354 <__vfprintf_internal+0x324>
         : 2776  IO_validate_vtable():
         : 2777  ./stdio-common/../libio/libioP.h:946
    0.00 :   77459:  call   89ef0 <_IO_vtable_check>
    0.00 :   7745e:  jmp    76fff <__vfprintf_internal+0x1fcf>
    0.00 :   77463:  mov    %r9,0x40(%rsp)
         : 2781  __vfprintf_internal():
         : 2782  ./stdio-common/vfprintf-internal.c:1516 (discriminator 179)
    0.00 :   77468:  mov    $0x20,%esi
    0.00 :   7746d:  mov    %rdx,0x38(%rsp)
    0.00 :   77472:  mov    %r11,0x28(%rsp)
    0.00 :   77477:  jmp    76704 <__vfprintf_internal+0x16d4>
    0.00 :   7747c:  mov    %r8d,0x38(%rsp)
         : 2788  ./stdio-common/vfprintf-internal.c:1516 (discriminator 124)
    0.00 :   77481:  mov    $0x20,%esi
    0.00 :   77486:  mov    %r9,0x28(%rsp)
    0.00 :   7748b:  mov    %r11,0x10(%rsp)
    0.00 :   77490:  jmp    77212 <__vfprintf_internal+0x21e2>
         : 2793  ./stdio-common/vfprintf-internal.c:1516 (discriminator 200)
    0.00 :   77495:  movzbl %r13b,%esi
    0.00 :   77499:  mov    %rbp,%rdi
    0.00 :   7749c:  mov    %r9,0x38(%rsp)
    0.00 :   774a1:  mov    %rdx,0x28(%rsp)
    0.00 :   774a6:  call   8d800 <__overflow>
    0.00 :   774ab:  mov    0x28(%rsp),%rdx
    0.00 :   774b0:  mov    0x38(%rsp),%r9
    0.00 :   774b5:  cmp    $0xffffffff,%eax
    0.00 :   774b8:  jne    769b2 <__vfprintf_internal+0x1982>
    0.00 :   774be:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774c3:  nopl   0x0(%rax,%rax,1)
         : 2805  ./stdio-common/vfprintf-internal.c:1516 (discriminator 193)
    0.00 :   774c8:  mov    $0x30,%esi
    0.00 :   774cd:  mov    %rbp,%rdi
    0.00 :   774d0:  mov    %r9,0x38(%rsp)
    0.00 :   774d5:  mov    %rdx,0x28(%rsp)
    0.00 :   774da:  call   8d800 <__overflow>
    0.00 :   774df:  mov    0x28(%rsp),%rdx
    0.00 :   774e4:  mov    0x38(%rsp),%r9
    0.00 :   774e9:  cmp    $0xffffffff,%eax
    0.00 :   774ec:  jne    7698c <__vfprintf_internal+0x195c>
    0.00 :   774f2:  jmp    76728 <__vfprintf_internal+0x16f8>
    0.00 :   774f7:  nopw   0x0(%rax,%rax,1)
         : 2817  done_add_func():
         : 2818  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77500:  mov    $0x1,%edx
    0.00 :   77505:  jmp    75fea <__vfprintf_internal+0xfba>
         : 2821  __vfprintf_internal():
         : 2822  ./stdio-common/vfprintf-internal.c:1612
    0.00 :   7750a:  call   136550 <__stack_chk_fail>
         : 2824  done_add_func():
         : 2825  ./stdio-common/vfprintf-internal.c:127
    0.00 :   7750f:  mov    $0x1,%edx
    0.00 :   77514:  jmp    76915 <__vfprintf_internal+0x18e5>
    0.00 :   77519:  mov    $0x1,%edx
    0.00 :   7751e:  jmp    76537 <__vfprintf_internal+0x1507>
    0.00 :   77523:  mov    $0x1,%eax
    0.00 :   77528:  jmp    766d3 <__vfprintf_internal+0x16a3>
    0.00 :   7752d:  mov    $0x1,%eax
    0.00 :   77532:  jmp    767b6 <__vfprintf_internal+0x1786>
    0.00 :   77537:  mov    $0x1,%edx
    0.00 :   7753c:  jmp    75945 <__vfprintf_internal+0x915>
         : 2836  __vfprintf_internal():
         : 2837  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   77541:  xor    %r8d,%r8d
    0.00 :   77544:  jmp    75c02 <__vfprintf_internal+0xbd2>
         : 2840  read_int():
         : 2841  ./stdio-common/printf-parse.h:78
    0.00 :   77549:  mov    %esi,0x10(%rsp)
    0.00 :   7754d:  movzbl 0x70(%rsp),%r13d
    0.00 :   77553:  cmp    $0x9,%edi
    0.00 :   77556:  jbe    7640d <__vfprintf_internal+0x13dd>
    0.00 :   7755c:  jmp    7642d <__vfprintf_internal+0x13fd>
         : 2847  pad_func():
         : 2848  ./stdio-common/vfprintf-internal.c:192
    0.00 :   77561:  test   %r8d,%r8d
    0.00 :   77564:  jg     76674 <__vfprintf_internal+0x1644>
         : 2851  __vfprintf_internal():
         : 2852  ./stdio-common/vfprintf-internal.c:1516
    0.00 :   7756a:  xor    %r8d,%r8d
    0.00 :   7756d:  jmp    75bcf <__vfprintf_internal+0xb9f>
         : 2855  done_add_func():
         : 2856  ./stdio-common/vfprintf-internal.c:127
    0.00 :   77572:  mov    $0x1,%eax
    0.00 :   77577:  jmp    75851 <__vfprintf_internal+0x821>
    0.00 :   7757c:  mov    $0x1,%edx
    0.00 :   77581:  jmp    756a0 <__vfprintf_internal+0x670>
    0.00 :   77586:  mov    $0x1,%eax
    0.00 :   7758b:  jmp    764da <__vfprintf_internal+0x14aa>
         : 2863  __vfprintf_internal():
         : 2864  ./stdio-common/vfprintf-internal.c:1259
    0.00 :   77590:  movb   $0x1,0xa6(%rsp)
    0.00 :   77598:  jmp    75100 <__vfprintf_internal+0xd0>
 Percent |	Source code & Disassembly of minisat for cycles:u (6 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000012380 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)>:
         : 6     Minisat::vec<Minisat::Solver::Watcher>::capacity(int):
         : 96    void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
         : 97    };
         :
         :
         : 100   template<class T>
         : 101   void vec<T>::capacity(int min_cap) {
   35.70 :   12380:  endbr64
         : 97    if (cap >= min_cap) return;
    0.00 :   12384:  mov    0xc(%rdi),%eax
   45.40 :   12387:  cmp    %esi,%eax
    0.00 :   12389:  jge    123e0 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)+0x60>
         : 98    int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   1238b:  mov    %eax,%ecx
    0.00 :   1238d:  sub    %eax,%esi
         : 96    void vec<T>::capacity(int min_cap) {
    0.00 :   1238f:  push   %rbx
    0.00 :   12390:  mov    %rdi,%rbx
         : 98    int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   12393:  sar    %ecx
    0.00 :   12395:  add    $0x1,%esi
    0.00 :   12398:  add    $0x2,%ecx
    0.00 :   1239b:  and    $0xfffffffe,%esi
    0.00 :   1239e:  and    $0xfffffffe,%ecx
         : 104   Minisat::vec<Minisat::Solver::Watcher>::imax(int, int):
         : 48    static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   123a1:  mov    %ecx,%edi
    0.00 :   123a3:  sub    %esi,%edi
    0.00 :   123a5:  sar    $0x1f,%edi
   18.90 :   123a8:  mov    %edi,%edx
    0.00 :   123aa:  and    %edi,%esi
    0.00 :   123ac:  not    %edx
    0.00 :   123ae:  and    %ecx,%edx
         : 56    Minisat::vec<Minisat::Solver::Watcher>::capacity(int):
         : 99    if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   123b0:  mov    $0x7fffffff,%ecx
         : 101   Minisat::vec<Minisat::Solver::Watcher>::imax(int, int):
         : 48    static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   123b5:  add    %esi,%edx
         : 50    Minisat::vec<Minisat::Solver::Watcher>::capacity(int):
         : 99    if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   123b7:  sub    %eax,%ecx
    0.00 :   123b9:  cmp    %edx,%ecx
    0.00 :   123bb:  jl     123eb <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)+0x6b>
    0.00 :   123bd:  add    %edx,%eax
    0.00 :   123bf:  mov    (%rbx),%rdi
    0.00 :   123c2:  mov    %eax,0xc(%rbx)
    0.00 :   123c5:  cltq
    0.00 :   123c7:  lea    0x0(,%rax,8),%rsi
    0.00 :   123cf:  call   2540 <realloc@plt>
    0.00 :   123d4:  mov    %rax,(%rbx)
    0.00 :   123d7:  test   %rax,%rax
    0.00 :   123da:  je     123e1 <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)+0x61>
         : 101   throw OutOfMemoryException();
         : 102   }
    0.00 :   123dc:  pop    %rbx
    0.00 :   123dd:  ret
    0.00 :   123de:  xchg   %ax,%ax
    0.00 :   123e0:  ret
         : 99    if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   123e1:  call   2330 <__errno_location@plt>
    0.00 :   123e6:  cmpl   $0xc,(%rax)
    0.00 :   123e9:  jne    123dc <Minisat::vec<Minisat::Solver::Watcher>::capacity(int)+0x5c>
         : 100   throw OutOfMemoryException();
    0.00 :   123eb:  mov    $0x1,%edi
    0.00 :   123f0:  call   2360 <__cxa_allocate_exception@plt>
    0.00 :   123f5:  xor    %edx,%edx
    0.00 :   123f7:  lea    0x674a(%rip),%rsi        # 18b48 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    0.00 :   123fe:  mov    %rax,%rdi
    0.00 :   12401:  call   2570 <__cxa_throw@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a1710 <unlink_chunk.constprop.0>:
         : 6     unlink_chunk():
         : 7     ./malloc/malloc.c:1626
    0.00 :   a1710:  sub    $0x8,%rsp
         : 9     ./malloc/malloc.c:1628
   40.19 :   a1714:  mov    0x8(%rdi),%rcx
    0.00 :   a1718:  mov    %rcx,%rax
    0.00 :   a171b:  and    $0xfffffffffffffff8,%rax
    0.00 :   a171f:  cmp    (%rdi,%rax,1),%rax
    0.00 :   a1723:  jne    a17d6 <unlink_chunk.constprop.0+0xc6>
         : 15    ./malloc/malloc.c:1631
    0.00 :   a1729:  movdqu 0x10(%rdi),%xmm0
    0.00 :   a172e:  mov    0x10(%rdi),%rsi
         : 18    ./malloc/malloc.c:1632
    0.00 :   a1732:  mov    0x18(%rdi),%rdx
         : 20    ./malloc/malloc.c:1631
    0.00 :   a1736:  movdqa %xmm0,%xmm1
    0.00 :   a173a:  movq   %xmm0,%rax
    0.00 :   a173f:  punpcklqdq %xmm0,%xmm1
         : 24    ./malloc/malloc.c:1634
    0.00 :   a1743:  cmp    0x18(%rax),%rdi
   38.29 :   a1747:  jne    a17c0 <unlink_chunk.constprop.0+0xb0>
    0.00 :   a1749:  cmp    0x10(%rdx),%rdi
    0.00 :   a174d:  jne    a17c0 <unlink_chunk.constprop.0+0xb0>
         : 29    ./malloc/malloc.c:1637
    0.00 :   a174f:  mov    %rdx,0x18(%rax)
         : 31    ./malloc/malloc.c:1638
    0.00 :   a1753:  movq   %xmm0,0x10(%rdx)
         : 33    ./malloc/malloc.c:1639
    0.00 :   a1758:  cmp    $0x3ff,%rcx
    0.00 :   a175f:  jbe    a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a1761:  mov    0x20(%rdi),%rdx
    0.00 :   a1765:  test   %rdx,%rdx
    0.00 :   a1768:  je     a179b <unlink_chunk.constprop.0+0x8b>
         : 39    ./malloc/malloc.c:1641
    0.00 :   a176a:  cmp    0x28(%rdx),%rdi
    0.00 :   a176e:  jne    a17e2 <unlink_chunk.constprop.0+0xd2>
         : 42    ./malloc/malloc.c:1642
    0.00 :   a1770:  mov    0x28(%rdi),%rcx
    0.00 :   a1774:  movq   %rdx,%xmm0
    0.00 :   a1779:  movq   %rcx,%xmm2
    0.00 :   a177e:  punpcklqdq %xmm2,%xmm0
    0.00 :   a1782:  cmp    0x20(%rcx),%rdi
    0.00 :   a1786:  jne    a17e2 <unlink_chunk.constprop.0+0xd2>
         : 49    ./malloc/malloc.c:1645
    0.00 :   a1788:  cmpq   $0x0,0x20(%rax)
    0.00 :   a178d:  je     a17a0 <unlink_chunk.constprop.0+0x90>
         : 52    ./malloc/malloc.c:1659
    0.00 :   a178f:  mov    %rcx,0x28(%rdx)
         : 54    ./malloc/malloc.c:1660
    0.00 :   a1793:  mov    0x28(%rdi),%rax
    0.00 :   a1797:  mov    %rdx,0x20(%rax)
         : 57    ./malloc/malloc.c:1663
    0.00 :   a179b:  add    $0x8,%rsp
   21.51 :   a179f:  ret
         : 60    ./malloc/malloc.c:1647
    0.00 :   a17a0:  cmp    %rdx,%rdi
    0.00 :   a17a3:  je     a17d0 <unlink_chunk.constprop.0+0xc0>
         : 63    ./malloc/malloc.c:1651
    0.00 :   a17a5:  movups %xmm0,0x20(%rax)
         : 65    ./malloc/malloc.c:1653
    0.00 :   a17a9:  mov    0x20(%rdi),%rdx
    0.00 :   a17ad:  mov    %rax,0x28(%rdx)
         : 68    ./malloc/malloc.c:1654
    0.00 :   a17b1:  mov    0x28(%rdi),%rdx
    0.00 :   a17b5:  mov    %rax,0x20(%rdx)
    0.00 :   a17b9:  jmp    a179b <unlink_chunk.constprop.0+0x8b>
    0.00 :   a17bb:  nopl   0x0(%rax,%rax,1)
         : 73    ./malloc/malloc.c:1635
    0.00 :   a17c0:  lea    0x137f47(%rip),%rdi        # 1d970e <null+0xe93>
    0.00 :   a17c7:  call   a0ce0 <malloc_printerr>
    0.00 :   a17cc:  nopl   0x0(%rax)
         : 77    ./malloc/malloc.c:1648
    0.00 :   a17d0:  movups %xmm1,0x20(%rsi)
    0.00 :   a17d4:  jmp    a179b <unlink_chunk.constprop.0+0x8b>
         : 80    ./malloc/malloc.c:1629
    0.00 :   a17d6:  lea    0x137f14(%rip),%rdi        # 1d96f1 <null+0xe76>
    0.00 :   a17dd:  call   a0ce0 <malloc_printerr>
         : 83    ./malloc/malloc.c:1643
    0.00 :   a17e2:  lea    0x13cd9f(%rip),%rdi        # 1de588 <__PRETTY_FUNCTION__.1+0x448>
    0.00 :   a17e9:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (5 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005a930 <__GI___printf_fp_l>:
         : 6     __GI___printf_fp_l():
         : 7     ./stdio-common/printf_fp.c:216
    0.00 :   5a930:  endbr64
    0.00 :   5a934:  push   %rbp
    0.00 :   5a935:  mov    %rsp,%rbp
    0.00 :   5a938:  push   %r15
    0.00 :   5a93a:  push   %r14
    0.00 :   5a93c:  push   %r13
    0.00 :   5a93e:  push   %r12
    0.00 :   5a940:  mov    %rdi,%r12
    0.00 :   5a943:  mov    %rdx,%rdi
    0.00 :   5a946:  push   %rbx
    0.00 :   5a947:  sub    $0x128,%rsp
    0.00 :   5a94e:  mov    %rdx,-0xb8(%rbp)
    0.00 :   5a955:  mov    %rsi,-0xf8(%rbp)
    0.00 :   5a95c:  mov    %fs:0x28,%rax
    0.00 :   5a965:  mov    %rax,-0x38(%rbp)
    0.00 :   5a969:  xor    %eax,%eax
         : 24    ./stdio-common/printf_fp.c:266
    0.00 :   5a96b:  movzbl 0xd(%rdx),%eax
         : 26    ./stdio-common/printf_fp.c:257
    0.00 :   5a96f:  movl   $0x0,-0xa4(%rbp)
         : 28    ./stdio-common/printf_fp.c:274
    0.00 :   5a979:  movl   $0x0,-0xa0(%rbp)
         : 30    ./stdio-common/printf_fp.c:266
    0.00 :   5a983:  mov    %eax,%edx
    0.00 :   5a985:  shr    $0x2,%dl
    0.00 :   5a988:  mov    %edx,%ebx
         : 34    ./stdio-common/printf_fp.c:298
    0.00 :   5a98a:  movzbl 0xc(%rdi),%edx
         : 36    ./stdio-common/printf_fp.c:277
    0.00 :   5a98e:  mov    %eax,%edi
         : 38    ./stdio-common/printf_fp.c:266
    0.00 :   5a990:  and    $0x1,%ebx
    0.00 :   5a993:  mov    %ebx,-0xbc(%rbp)
         : 41    ./stdio-common/printf_fp.c:277
    0.00 :   5a999:  and    $0x1,%edi
    0.00 :   5a99c:  jne    5ab50 <__GI___printf_fp_l+0x220>
         : 44    _nl_lookup():
         : 45    ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5a9a2:  mov    0x8(%rsi),%rsi
    0.00 :   5a9a6:  mov    0x40(%rsi),%rbx
    0.00 :   5a9aa:  mov    %rbx,-0x108(%rbp)
         : 49    __GI___printf_fp_l():
         : 50    ./stdio-common/printf_fp.c:280
    0.00 :   5a9b1:  mov    0x58(%rsi),%ebx
    0.00 :   5a9b4:  mov    %ebx,-0xc0(%rbp)
         : 53    ./stdio-common/printf_fp.c:298
    0.00 :   5a9ba:  test   %dl,%dl
    0.00 :   5a9bc:  js     5acf0 <__GI___printf_fp_l+0x3c0>
         : 56    ./stdio-common/printf_fp.c:306
    0.00 :   5a9c2:  movq   $0x0,-0xe8(%rbp)
         : 58    ./stdio-common/printf_fp.c:234
    0.00 :   5a9cd:  movl   $0x0,-0x114(%rbp)
         : 60    ./stdio-common/printf_fp.c:233
    0.00 :   5a9d7:  movq   $0x0,-0x110(%rbp)
         : 62    ./stdio-common/printf_fp.c:388
    0.00 :   5a9e2:  mov    (%rcx),%rcx
         : 64    ./stdio-common/printf_fp.c:387
    0.00 :   5a9e5:  test   $0x10,%al
    0.00 :   5a9e7:  je     5ac28 <__GI___printf_fp_l+0x2f8>
         : 67    ./stdio-common/printf_fp.c:388
    0.00 :   5a9ed:  movdqa (%rcx),%xmm2
    0.00 :   5a9f1:  mov    %dl,-0xe0(%rbp)
    0.00 :   5a9f7:  movdqa %xmm2,%xmm1
    0.00 :   5a9fb:  movdqa %xmm2,%xmm0
    0.00 :   5a9ff:  movaps %xmm2,-0xd0(%rbp)
    0.00 :   5aa06:  call   1ba060 <__unordtf2>
    0.00 :   5aa0b:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa13:  movzbl -0xe0(%rbp),%edx
    0.00 :   5aa1a:  test   %rax,%rax
    0.00 :   5aa1d:  jne    5b8af <__GI___printf_fp_l+0xf7f>
         : 78    ./stdio-common/printf_fp.c:388 (discriminator 2)
    0.00 :   5aa23:  movdqa %xmm2,%xmm0
    0.00 :   5aa27:  movdqa 0x187741(%rip),%xmm1        # 1e2170 <othermask+0xe0>
    0.00 :   5aa2f:  pand   0x1876d9(%rip),%xmm0        # 1e2110 <othermask+0x80>
    0.00 :   5aa37:  movaps %xmm2,-0xd0(%rbp)
    0.00 :   5aa3e:  mov    %dl,-0xf0(%rbp)
    0.00 :   5aa44:  movaps %xmm0,-0xe0(%rbp)
    0.00 :   5aa4b:  call   1ba060 <__unordtf2>
    0.00 :   5aa50:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa58:  test   %rax,%rax
    0.00 :   5aa5b:  jne    5b7a8 <__GI___printf_fp_l+0xe78>
    0.00 :   5aa61:  movdqa 0x187707(%rip),%xmm1        # 1e2170 <othermask+0xe0>
    0.00 :   5aa69:  movdqa -0xe0(%rbp),%xmm0
    0.00 :   5aa71:  call   1ba460 <__letf2>
    0.00 :   5aa76:  movdqa -0xd0(%rbp),%xmm2
    0.00 :   5aa7e:  test   %rax,%rax
    0.00 :   5aa81:  jle    5b7a8 <__GI___printf_fp_l+0xe78>
         : 95    ./stdio-common/printf_fp.c:388 (discriminator 5)
    0.00 :   5aa87:  mov    -0xb8(%rbp),%rax
    0.00 :   5aa8e:  movmskps %xmm2,%r13d
    0.00 :   5aa92:  lea    0x17dc6e(%rip),%r14        # 1d8707 <not_available+0x1a9>
    0.00 :   5aa99:  movzbl -0xf0(%rbp),%edx
    0.00 :   5aaa0:  and    $0x8,%r13d
    0.00 :   5aaa4:  movslq 0x8(%rax),%rcx
    0.00 :   5aaa8:  mov    0x1bf349(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5aaaf:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5aab6:  mov    %fs:(%rax),%rax
    0.00 :   5aaba:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5aabf:  lea    0x187f6a(%rip),%rax        # 1e2a30 <default_rwlockattr+0x358>
    0.00 :   5aac6:  lea    0x187f43(%rip),%rcx        # 1e2a10 <default_rwlockattr+0x338>
    0.00 :   5aacd:  cmove  %rax,%rcx
    0.00 :   5aad1:  lea    0x17daf2(%rip),%rax        # 1d85ca <not_available+0x6c>
    0.00 :   5aad8:  cmove  %rax,%r14
         : 111   ./stdio-common/printf_fp.c:402
    0.00 :   5aadc:  mov    -0xb8(%rbp),%rax
    0.00 :   5aae3:  mov    0x4(%rax),%ebx
         : 114   ./stdio-common/printf_fp.c:408
    0.00 :   5aae6:  mov    %edx,%eax
    0.00 :   5aae8:  shr    $0x5,%al
    0.00 :   5aaeb:  xor    $0x1,%eax
    0.00 :   5aaee:  and    $0x1,%eax
         : 119   ./stdio-common/printf_fp.c:404
    0.00 :   5aaf1:  test   %r13d,%r13d
    0.00 :   5aaf4:  je     5ada8 <__GI___printf_fp_l+0x478>
         : 122   ./stdio-common/printf_fp.c:406
    0.00 :   5aafa:  sub    $0x4,%ebx
         : 124   ./stdio-common/printf_fp.c:408
    0.00 :   5aafd:  test   %ebx,%ebx
    0.00 :   5aaff:  setg   %r15b
    0.00 :   5ab03:  jle    5ab0d <__GI___printf_fp_l+0x1dd>
    0.00 :   5ab05:  test   %al,%al
    0.00 :   5ab07:  jne    5ad00 <__GI___printf_fp_l+0x3d0>
         : 130   ./stdio-common/printf_fp.c:260
    0.00 :   5ab0d:  xor    %r13d,%r13d
         : 132   ./stdio-common/printf_fp.c:412
    0.00 :   5ab10:  mov    -0xbc(%rbp),%eax
    0.00 :   5ab16:  test   %eax,%eax
    0.00 :   5ab18:  je     5af18 <__GI___printf_fp_l+0x5e8>
         : 136   ./stdio-common/printf_fp.c:412 (discriminator 1)
    0.00 :   5ab1e:  mov    0xa0(%r12),%rax
    0.00 :   5ab26:  test   %rax,%rax
    0.00 :   5ab29:  je     5cc6d <__GI___printf_fp_l+0x233d>
         : 140   ./stdio-common/printf_fp.c:412 (discriminator 4)
    0.00 :   5ab2f:  mov    0x20(%rax),%rdx
    0.00 :   5ab33:  cmp    0x28(%rax),%rdx
    0.00 :   5ab37:  jae    5cc6d <__GI___printf_fp_l+0x233d>
         : 144   ./stdio-common/printf_fp.c:412 (discriminator 6)
    0.00 :   5ab3d:  lea    0x4(%rdx),%rsi
    0.00 :   5ab41:  mov    %rsi,0x20(%rax)
    0.00 :   5ab45:  movl   $0x2d,(%rdx)
    0.00 :   5ab4b:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5ab50:  mov    %rsi,%r11
         : 150   _nl_lookup():
         : 151   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5ab53:  mov    0x20(%rsi),%rsi
    0.00 :   5ab57:  mov    0x50(%rsi),%rbx
         : 154   __GI___printf_fp_l():
         : 155   ./stdio-common/printf_fp.c:286
    0.00 :   5ab5b:  cmpb   $0x0,(%rbx)
         : 157   _nl_lookup():
         : 158   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5ab5e:  mov    %rbx,-0x108(%rbp)
         : 160   __GI___printf_fp_l():
         : 161   ./stdio-common/printf_fp.c:286
    0.00 :   5ab65:  jne    5ab76 <__GI___printf_fp_l+0x246>
         : 163   _nl_lookup():
         : 164   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5ab67:  mov    0x8(%r11),%r8
    0.00 :   5ab6b:  mov    0x40(%r8),%rbx
    0.00 :   5ab6f:  mov    %rbx,-0x108(%rbp)
         : 168   __GI___printf_fp_l():
         : 169   ./stdio-common/printf_fp.c:288
    0.00 :   5ab76:  mov    0x198(%rsi),%ebx
    0.00 :   5ab7c:  mov    %ebx,-0xc0(%rbp)
         : 172   ./stdio-common/printf_fp.c:290
    0.00 :   5ab82:  test   %ebx,%ebx
    0.00 :   5ab84:  jne    5ab9b <__GI___printf_fp_l+0x26b>
         : 175   _nl_lookup_word():
         : 176   ./stdio-common/../include/../locale/localeinfo.h:330
    0.00 :   5ab86:  mov    -0xf8(%rbp),%rbx
    0.00 :   5ab8d:  mov    0x8(%rbx),%r8
         : 179   __GI___printf_fp_l():
         : 180   ./stdio-common/printf_fp.c:291
    0.00 :   5ab91:  mov    0x58(%r8),%ebx
    0.00 :   5ab95:  mov    %ebx,-0xc0(%rbp)
         : 183   ./stdio-common/printf_fp.c:298
    0.00 :   5ab9b:  test   %dl,%dl
    0.00 :   5ab9d:  jns    5a9c2 <__GI___printf_fp_l+0x92>
         : 186   _nl_lookup():
         : 187   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5aba3:  mov    0x60(%rsi),%rsi
    0.00 :   5aba7:  mov    %rsi,-0xe8(%rbp)
         : 190   __GI___printf_fp_l():
         : 191   ./stdio-common/printf_fp.c:305
    0.00 :   5abae:  movzbl (%rsi),%esi
    0.00 :   5abb1:  mov    %sil,-0xd0(%rbp)
    0.00 :   5abb8:  sub    $0x1,%esi
    0.00 :   5abbb:  cmp    $0x7d,%sil
    0.00 :   5abbf:  ja     5a9c2 <__GI___printf_fp_l+0x92>
         : 197   ./stdio-common/printf_fp.c:310
    0.00 :   5abc5:  mov    -0xbc(%rbp),%r8d
    0.00 :   5abcc:  test   %r8d,%r8d
    0.00 :   5abcf:  je     5af58 <__GI___printf_fp_l+0x628>
         : 201   ./stdio-common/printf_fp.c:312
    0.00 :   5abd5:  test   %dil,%dil
    0.00 :   5abd8:  jne    5b878 <__GI___printf_fp_l+0xf48>
         : 204   _nl_lookup_word():
         : 205   ./stdio-common/../include/../locale/localeinfo.h:330
    0.00 :   5abde:  mov    -0xf8(%rbp),%rsi
    0.00 :   5abe5:  mov    0x8(%rsi),%rsi
         : 208   __GI___printf_fp_l():
         : 209   ./stdio-common/printf_fp.c:313
    0.00 :   5abe9:  mov    0x60(%rsi),%esi
    0.00 :   5abec:  mov    %esi,-0x114(%rbp)
         : 212   ./stdio-common/printf_fp.c:331
    0.00 :   5abf2:  mov    -0x114(%rbp),%edi
    0.00 :   5abf8:  xor    %esi,%esi
         : 215   ./stdio-common/printf_fp.c:388
    0.00 :   5abfa:  mov    (%rcx),%rcx
         : 217   ./stdio-common/printf_fp.c:331
    0.00 :   5abfd:  movq   $0x0,-0x110(%rbp)
    0.00 :   5ac08:  test   %edi,%edi
    0.00 :   5ac0a:  cmovne -0xe8(%rbp),%rsi
    0.00 :   5ac12:  mov    %rsi,-0xe8(%rbp)
         : 222   ./stdio-common/printf_fp.c:387
    0.00 :   5ac19:  test   $0x10,%al
    0.00 :   5ac1b:  jne    5a9ed <__GI___printf_fp_l+0xbd>
    0.00 :   5ac21:  nopl   0x0(%rax)
         : 226   ./stdio-common/printf_fp.c:392
    0.00 :   5ac28:  test   $0x1,%dl
    0.00 :   5ac2b:  je     5acb0 <__GI___printf_fp_l+0x380>
         : 229   ./stdio-common/printf_fp.c:393
    0.00 :   5ac31:  fldt   (%rcx)
    0.00 :   5ac33:  fucomi %st(0),%st
    0.00 :   5ac35:  jp     5cddf <__GI___printf_fp_l+0x24af>
         : 233   ./stdio-common/printf_fp.c:393 (discriminator 2)
    0.00 :   5ac3b:  fld    %st(0)
    0.00 :   5ac3d:  fabs
    0.00 :   5ac3f:  fldt   0x18742b(%rip)        # 1e2070 <in6addr_any+0x90>
    0.00 :   5ac45:  fxch   %st(1)
    0.00 :   5ac47:  fucomip %st(1),%st
    0.00 :   5ac49:  fstp   %st(0)
    0.00 :   5ac4b:  jbe    5b688 <__GI___printf_fp_l+0xd58>
         : 241   ./stdio-common/printf_fp.c:393 (discriminator 5)
    0.00 :   5ac51:  fxam
    0.00 :   5ac53:  fnstsw %ax
    0.00 :   5ac55:  fstp   %st(0)
    0.00 :   5ac57:  mov    %eax,%r13d
    0.00 :   5ac5a:  and    $0x200,%r13d
         : 247   ./stdio-common/printf_fp.c:396 (discriminator 5)
    0.00 :   5ac61:  mov    -0xb8(%rbp),%rax
    0.00 :   5ac68:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5ac6f:  lea    0x17da91(%rip),%r14        # 1d8707 <not_available+0x1a9>
    0.00 :   5ac76:  movslq 0x8(%rax),%rcx
    0.00 :   5ac7a:  mov    0x1bf177(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5ac81:  mov    %fs:(%rax),%rax
    0.00 :   5ac85:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5ac8a:  lea    0x187d9f(%rip),%rax        # 1e2a30 <default_rwlockattr+0x358>
    0.00 :   5ac91:  lea    0x187d78(%rip),%rcx        # 1e2a10 <default_rwlockattr+0x338>
    0.00 :   5ac98:  cmove  %rax,%rcx
    0.00 :   5ac9c:  lea    0x17d927(%rip),%rax        # 1d85ca <not_available+0x6c>
    0.00 :   5aca3:  cmove  %rax,%r14
    0.00 :   5aca7:  jmp    5aadc <__GI___printf_fp_l+0x1ac>
    0.00 :   5acac:  nopl   0x0(%rax)
         : 262   ./stdio-common/printf_fp.c:396
    0.00 :   5acb0:  movsd  (%rcx),%xmm0
    0.00 :   5acb4:  ucomisd %xmm0,%xmm0
    0.00 :   5acb8:  jp     5cdf4 <__GI___printf_fp_l+0x24c4>
         : 266   ./stdio-common/printf_fp.c:396 (discriminator 2)
    0.00 :   5acbe:  movapd %xmm0,%xmm1
   21.58 :   5acc2:  andpd  0x1873c6(%rip),%xmm1        # 1e2090 <othermask>
    0.00 :   5acca:  ucomisd 0x187a0e(%rip),%xmm1        # 1e26e0 <default_rwlockattr+0x8>
   20.84 :   5acd2:  jbe    5afb0 <__GI___printf_fp_l+0x680>
         : 271   ./stdio-common/printf_fp.c:396 (discriminator 5)
    0.00 :   5acd8:  movmskpd %xmm0,%r13d
    0.00 :   5acdd:  and    $0x1,%r13d
    0.00 :   5ace1:  jmp    5ac61 <__GI___printf_fp_l+0x331>
    0.00 :   5ace6:  cs nopw 0x0(%rax,%rax,1)
         : 276   _nl_lookup():
         : 277   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5acf0:  mov    0x50(%rsi),%rsi
    0.00 :   5acf4:  mov    %rsi,-0xe8(%rbp)
         : 280   __GI___printf_fp_l():
         : 281   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5acfb:  jmp    5abae <__GI___printf_fp_l+0x27e>
         : 283   ./stdio-common/printf_fp.c:409
    0.00 :   5ad00:  mov    -0xbc(%rbp),%edx
    0.00 :   5ad06:  movslq %ebx,%r13
    0.00 :   5ad09:  mov    $0x20,%esi
    0.00 :   5ad0e:  mov    %r12,%rdi
    0.00 :   5ad11:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5ad18:  test   %edx,%edx
    0.00 :   5ad1a:  mov    %r13,%rdx
    0.00 :   5ad1d:  je     5af40 <__GI___printf_fp_l+0x610>
         : 292   ./stdio-common/printf_fp.c:409 (discriminator 1)
    0.00 :   5ad23:  call   824e0 <_IO_wpadn>
    0.00 :   5ad28:  mov    -0xd0(%rbp),%rcx
         : 295   ./stdio-common/printf_fp.c:409 (discriminator 4)
    0.00 :   5ad2f:  cmp    %r13,%rax
    0.00 :   5ad32:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 298   ./stdio-common/printf_fp.c:411
    0.00 :   5ad38:  mov    -0xa4(%rbp),%eax
    0.00 :   5ad3e:  mov    %ebx,%r13d
    0.00 :   5ad41:  mov    $0x1,%r15d
    0.00 :   5ad47:  test   %eax,%eax
    0.00 :   5ad49:  jne    5ab10 <__GI___printf_fp_l+0x1e0>
    0.00 :   5ad4f:  mov    -0xb8(%rbp),%rax
    0.00 :   5ad56:  movzbl 0xc(%rax),%edx
         : 306   ./stdio-common/printf_fp.c:413
    0.00 :   5ad5a:  test   $0x40,%dl
    0.00 :   5ad5d:  jne    5adc9 <__GI___printf_fp_l+0x499>
         : 309   ./stdio-common/printf_fp.c:415
    0.00 :   5ad5f:  and    $0x10,%edx
    0.00 :   5ad62:  je     5ae08 <__GI___printf_fp_l+0x4d8>
         : 312   ./stdio-common/printf_fp.c:416
    0.00 :   5ad68:  mov    -0xbc(%rbp),%eax
    0.00 :   5ad6e:  test   %eax,%eax
    0.00 :   5ad70:  je     5b90d <__GI___printf_fp_l+0xfdd>
         : 316   ./stdio-common/printf_fp.c:416 (discriminator 1)
    0.00 :   5ad76:  mov    0xa0(%r12),%rax
    0.00 :   5ad7e:  test   %rax,%rax
    0.00 :   5ad81:  je     5d20f <__GI___printf_fp_l+0x28df>
         : 320   ./stdio-common/printf_fp.c:416 (discriminator 4)
    0.00 :   5ad87:  mov    0x20(%rax),%rdx
    0.00 :   5ad8b:  cmp    0x28(%rax),%rdx
    0.00 :   5ad8f:  jae    5d20f <__GI___printf_fp_l+0x28df>
         : 324   ./stdio-common/printf_fp.c:416 (discriminator 6)
    0.00 :   5ad95:  lea    0x4(%rdx),%rsi
    0.00 :   5ad99:  mov    %rsi,0x20(%rax)
    0.00 :   5ad9d:  movl   $0x20,(%rdx)
    0.00 :   5ada3:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5ada5:  nopl   (%rax)
         : 330   ./stdio-common/printf_fp.c:404 (discriminator 1)
    0.00 :   5ada8:  test   $0x50,%dl
    0.00 :   5adab:  jne    5af00 <__GI___printf_fp_l+0x5d0>
         : 333   ./stdio-common/printf_fp.c:406
    0.00 :   5adb1:  sub    $0x3,%ebx
         : 335   ./stdio-common/printf_fp.c:408
    0.00 :   5adb4:  test   %ebx,%ebx
    0.00 :   5adb6:  setg   %r15b
    0.00 :   5adba:  jle    5adc4 <__GI___printf_fp_l+0x494>
    0.00 :   5adbc:  test   %al,%al
    0.00 :   5adbe:  jne    5ad00 <__GI___printf_fp_l+0x3d0>
         : 341   ./stdio-common/printf_fp.c:413
    0.00 :   5adc4:  test   $0x40,%dl
    0.00 :   5adc7:  je     5ad5f <__GI___printf_fp_l+0x42f>
         : 344   ./stdio-common/printf_fp.c:414
    0.00 :   5adc9:  mov    -0xbc(%rbp),%eax
    0.00 :   5adcf:  test   %eax,%eax
    0.00 :   5add1:  je     5b7e0 <__GI___printf_fp_l+0xeb0>
         : 348   ./stdio-common/printf_fp.c:414 (discriminator 1)
    0.00 :   5add7:  mov    0xa0(%r12),%rax
    0.00 :   5addf:  test   %rax,%rax
    0.00 :   5ade2:  je     5d053 <__GI___printf_fp_l+0x2723>
         : 352   ./stdio-common/printf_fp.c:414 (discriminator 4)
    0.00 :   5ade8:  mov    0x20(%rax),%rdx
    0.00 :   5adec:  cmp    0x28(%rax),%rdx
    0.00 :   5adf0:  jae    5d053 <__GI___printf_fp_l+0x2723>
         : 356   ./stdio-common/printf_fp.c:414 (discriminator 6)
    0.00 :   5adf6:  lea    0x4(%rdx),%rsi
    0.00 :   5adfa:  mov    %rsi,0x20(%rax)
    0.00 :   5adfe:  movl   $0x2b,(%rdx)
         : 360   ./stdio-common/printf_fp.c:416 (discriminator 16)
    0.00 :   5ae04:  add    $0x1,%r13d
         : 362   ./stdio-common/printf_fp.c:418 (discriminator 20)
    0.00 :   5ae08:  mov    -0xbc(%rbp),%eax
    0.00 :   5ae0e:  test   %eax,%eax
    0.00 :   5ae10:  je     5b710 <__GI___printf_fp_l+0xde0>
         : 366   ./stdio-common/printf_fp.c:418
    0.00 :   5ae16:  mov    0xa0(%r12),%rax
    0.00 :   5ae1e:  mov    (%rcx),%esi
    0.00 :   5ae20:  test   %rax,%rax
    0.00 :   5ae23:  je     5b801 <__GI___printf_fp_l+0xed1>
    0.00 :   5ae29:  mov    0x20(%rax),%rdx
    0.00 :   5ae2d:  cmp    %rdx,0x28(%rax)
    0.00 :   5ae31:  jbe    5b801 <__GI___printf_fp_l+0xed1>
    0.00 :   5ae37:  lea    0x4(%rdx),%rdi
    0.00 :   5ae3b:  mov    %rdi,0x20(%rax)
    0.00 :   5ae3f:  mov    %esi,(%rdx)
    0.00 :   5ae41:  cmp    $0xffffffff,%esi
    0.00 :   5ae44:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ae4a:  mov    0x4(%rcx),%esi
    0.00 :   5ae4d:  add    $0x1,%r13d
    0.00 :   5ae51:  lea    0x8(%rcx),%r14
    0.00 :   5ae55:  mov    0x20(%rax),%rdx
    0.00 :   5ae59:  cmp    %rdx,0x28(%rax)
    0.00 :   5ae5d:  jbe    5b83c <__GI___printf_fp_l+0xf0c>
    0.00 :   5ae63:  lea    0x4(%rdx),%rcx
    0.00 :   5ae67:  mov    %rcx,0x20(%rax)
    0.00 :   5ae6b:  mov    %esi,(%rdx)
    0.00 :   5ae6d:  cmp    $0xffffffff,%esi
    0.00 :   5ae70:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5ae76:  mov    (%r14),%esi
    0.00 :   5ae79:  add    $0x1,%r13d
         : 392   ./stdio-common/printf_fp.c:418 (discriminator 18)
    0.00 :   5ae7d:  mov    0x20(%rax),%rdx
    0.00 :   5ae81:  cmp    0x28(%rax),%rdx
    0.00 :   5ae85:  jae    5b865 <__GI___printf_fp_l+0xf35>
         : 396   ./stdio-common/printf_fp.c:418 (discriminator 20)
    0.00 :   5ae8b:  lea    0x4(%rdx),%rcx
    0.00 :   5ae8f:  cmp    $0xffffffff,%esi
    0.00 :   5ae92:  mov    %rcx,0x20(%rax)
    0.00 :   5ae96:  sete   %al
    0.00 :   5ae99:  mov    %esi,(%rdx)
         : 402   ./stdio-common/printf_fp.c:418
    0.00 :   5ae9b:  test   %al,%al
    0.00 :   5ae9d:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 405   ./stdio-common/printf_fp.c:420 (discriminator 30)
    0.00 :   5aea3:  mov    -0xb8(%rbp),%rax
         : 407   ./stdio-common/printf_fp.c:418 (discriminator 30)
    0.00 :   5aeaa:  add    $0x1,%r13d
         : 409   ./stdio-common/printf_fp.c:420 (discriminator 30)
    0.00 :   5aeae:  testb  $0x20,0xc(%rax)
    0.00 :   5aeb2:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5aeb4:  test   %r15b,%r15b
    0.00 :   5aeb7:  je     5aed8 <__GI___printf_fp_l+0x5a8>
         : 414   ./stdio-common/printf_fp.c:421 (discriminator 1)
    0.00 :   5aeb9:  movslq %ebx,%r14
    0.00 :   5aebc:  mov    $0x20,%esi
    0.00 :   5aec1:  mov    %r12,%rdi
    0.00 :   5aec4:  mov    %r14,%rdx
    0.00 :   5aec7:  call   824e0 <_IO_wpadn>
         : 420   ./stdio-common/printf_fp.c:421 (discriminator 4)
    0.00 :   5aecc:  cmp    %r14,%rax
    0.00 :   5aecf:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 423   ./stdio-common/printf_fp.c:421 (discriminator 6)
    0.00 :   5aed5:  add    %ebx,%r13d
         : 425   ./stdio-common/printf_fp.c:1272
    0.00 :   5aed8:  mov    -0x38(%rbp),%rax
    0.00 :   5aedc:  sub    %fs:0x28,%rax
    0.00 :   5aee5:  jne    5d4ba <__GI___printf_fp_l+0x2b8a>
    0.00 :   5aeeb:  lea    -0x28(%rbp),%rsp
    0.00 :   5aeef:  mov    %r13d,%eax
    0.00 :   5aef2:  pop    %rbx
    0.00 :   5aef3:  pop    %r12
    0.00 :   5aef5:  pop    %r13
    0.00 :   5aef7:  pop    %r14
    0.00 :   5aef9:  pop    %r15
    0.00 :   5aefb:  pop    %rbp
    0.00 :   5aefc:  ret
    0.00 :   5aefd:  nopl   (%rax)
         : 439   ./stdio-common/printf_fp.c:406
    0.00 :   5af00:  sub    $0x4,%ebx
         : 441   ./stdio-common/printf_fp.c:408
    0.00 :   5af03:  test   %ebx,%ebx
    0.00 :   5af05:  setg   %r15b
    0.00 :   5af09:  jg     5adbc <__GI___printf_fp_l+0x48c>
    0.00 :   5af0f:  jmp    5adc4 <__GI___printf_fp_l+0x494>
    0.00 :   5af14:  nopl   0x0(%rax)
         : 447   ./stdio-common/printf_fp.c:412 (discriminator 2)
    0.00 :   5af18:  mov    0x28(%r12),%rax
    0.00 :   5af1d:  cmp    0x30(%r12),%rax
    0.00 :   5af22:  jae    5cff6 <__GI___printf_fp_l+0x26c6>
         : 451   ./stdio-common/printf_fp.c:412 (discriminator 11)
    0.00 :   5af28:  lea    0x1(%rax),%rdx
    0.00 :   5af2c:  mov    %rdx,0x28(%r12)
    0.00 :   5af31:  movb   $0x2d,(%rax)
    0.00 :   5af34:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5af39:  nopl   0x0(%rax)
         : 457   ./stdio-common/printf_fp.c:409 (discriminator 2)
    0.00 :   5af40:  call   806a0 <_IO_padn>
    0.00 :   5af45:  mov    -0xd0(%rbp),%rcx
    0.00 :   5af4c:  jmp    5ad2f <__GI___printf_fp_l+0x3ff>
    0.00 :   5af51:  nopl   0x0(%rax)
         : 462   ./stdio-common/printf_fp.c:322
    0.00 :   5af58:  test   %dil,%dil
    0.00 :   5af5b:  jne    5b894 <__GI___printf_fp_l+0xf64>
         : 465   _nl_lookup():
         : 466   ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5af61:  mov    -0xf8(%rbp),%rsi
    0.00 :   5af68:  mov    0x8(%rsi),%rsi
    0.00 :   5af6c:  mov    0x48(%rsi),%rbx
    0.00 :   5af70:  mov    %rbx,-0x110(%rbp)
    0.00 :   5af77:  mov    %rbx,%rsi
         : 472   __GI___printf_fp_l():
         : 473   ./stdio-common/printf_fp.c:337
    0.00 :   5af7a:  movzbl (%rsi),%ebx
    0.00 :   5af7d:  neg    %bl
    0.00 :   5af7f:  sbb    %edi,%edi
    0.00 :   5af81:  and    $0xfffffffe,%edi
    0.00 :   5af84:  cmpb   $0x0,(%rsi)
    0.00 :   5af87:  mov    $0x0,%esi
    0.00 :   5af8c:  cmovne -0xe8(%rbp),%rsi
    0.00 :   5af94:  mov    %edi,-0x114(%rbp)
    0.00 :   5af9a:  mov    %rsi,-0xe8(%rbp)
    0.00 :   5afa1:  jmp    5a9e2 <__GI___printf_fp_l+0xb2>
    0.00 :   5afa6:  cs nopw 0x0(%rax,%rax,1)
         : 485   ./stdio-common/printf_fp.c:396
    0.00 :   5afb0:  lea    -0x60(%rbp),%r15
    0.00 :   5afb4:  lea    -0xa4(%rbp),%rcx
    0.00 :   5afbb:  mov    $0x2,%esi
    0.00 :   5afc0:  lea    -0x98(%rbp),%rdx
    0.00 :   5afc7:  mov    %r15,%rdi
    0.00 :   5afca:  call   564c0 <__mpn_extract_double>
    0.00 :   5afcf:  mov    %eax,%r14d
    0.00 :   5afd2:  mov    %rax,%r13
    0.00 :   5afd5:  shl    $0x6,%r14d
    0.00 :   5afd9:  sub    $0x34,%r14d
         : 496   ./stdio-common/printf_fp.c:432
    0.00 :   5afdd:  mov    -0x98(%rbp),%ecx
         : 498   ./stdio-common/printf_fp.c:437
    0.00 :   5afe3:  mov    %rsp,%rsi
         : 500   ./stdio-common/printf_fp.c:388
    0.00 :   5afe6:  mov    %r13,-0x88(%rbp)
         : 502   ./stdio-common/printf_fp.c:432
    0.00 :   5afed:  mov    %ecx,%eax
    0.00 :   5afef:  neg    %eax
    0.00 :   5aff1:  cmovs  %ecx,%eax
    0.00 :   5aff4:  add    $0x3f,%eax
         : 507   ./stdio-common/printf_fp.c:433
    0.00 :   5aff7:  sar    $0x6,%eax
         : 509   ./stdio-common/printf_fp.c:434
    0.00 :   5affa:  add    $0x4,%eax
    0.00 :   5affd:  cltq
         : 512   ./stdio-common/printf_fp.c:437
    0.00 :   5afff:  lea    0x17(,%rax,8),%rax
    0.00 :   5b007:  mov    %rax,%rdi
    0.00 :   5b00a:  mov    %rax,%rdx
    0.00 :   5b00d:  and    $0xfffffffffffff000,%rdi
    0.00 :   5b014:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b018:  sub    %rdi,%rsi
    0.00 :   5b01b:  cmp    %rsi,%rsp
    0.00 :   5b01e:  je     5b035 <__GI___printf_fp_l+0x705>
    0.00 :   5b020:  sub    $0x1000,%rsp
    0.00 :   5b027:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b030:  cmp    %rsi,%rsp
    0.00 :   5b033:  jne    5b020 <__GI___printf_fp_l+0x6f0>
    0.00 :   5b035:  and    $0xfff,%edx
    0.00 :   5b03b:  sub    %rdx,%rsp
    0.00 :   5b03e:  test   %rdx,%rdx
    0.00 :   5b041:  jne    5b902 <__GI___printf_fp_l+0xfd2>
         : 529   ./stdio-common/printf_fp.c:438
    0.00 :   5b047:  mov    %rax,%r8
         : 531   ./stdio-common/printf_fp.c:437
    0.00 :   5b04a:  lea    0xf(%rsp),%rdi
         : 533   ./stdio-common/printf_fp.c:438
    0.00 :   5b04f:  mov    %rsp,%rsi
    0.00 :   5b052:  mov    %rax,%rdx
    0.00 :   5b055:  and    $0xfffffffffffff000,%r8
         : 537   ./stdio-common/printf_fp.c:437
    0.00 :   5b05c:  and    $0xfffffffffffffff0,%rdi
         : 539   ./stdio-common/printf_fp.c:438
    0.00 :   5b060:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b064:  sub    %r8,%rsi
         : 542   ./stdio-common/printf_fp.c:437
    0.00 :   5b067:  mov    %rdi,-0x90(%rbp)
         : 544   ./stdio-common/printf_fp.c:438
    0.00 :   5b06e:  cmp    %rsi,%rsp
    0.00 :   5b071:  je     5b088 <__GI___printf_fp_l+0x758>
    0.00 :   5b073:  sub    $0x1000,%rsp
    0.00 :   5b07a:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b083:  cmp    %rsi,%rsp
    0.00 :   5b086:  jne    5b073 <__GI___printf_fp_l+0x743>
    0.00 :   5b088:  and    $0xfff,%edx
    0.00 :   5b08e:  sub    %rdx,%rsp
    0.00 :   5b091:  test   %rdx,%rdx
    0.00 :   5b094:  je     5b09c <__GI___printf_fp_l+0x76c>
    0.00 :   5b096:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   5b09c:  lea    0xf(%rsp),%rdx
         : 557   ./stdio-common/printf_fp.c:439
    0.00 :   5b0a1:  mov    %rsp,%rsi
         : 559   ./stdio-common/printf_fp.c:438
    0.00 :   5b0a4:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b0a8:  mov    %rdx,-0x70(%rbp)
         : 562   ./stdio-common/printf_fp.c:439
    0.00 :   5b0ac:  mov    %rax,%rdx
    0.00 :   5b0af:  and    $0xfffffffffffff000,%rax
    0.00 :   5b0b5:  sub    %rax,%rsi
    0.00 :   5b0b8:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5b0bc:  cmp    %rsi,%rsp
    0.00 :   5b0bf:  je     5b0d6 <__GI___printf_fp_l+0x7a6>
    0.00 :   5b0c1:  sub    $0x1000,%rsp
    0.00 :   5b0c8:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b0d1:  cmp    %rsi,%rsp
    0.00 :   5b0d4:  jne    5b0c1 <__GI___printf_fp_l+0x791>
    0.00 :   5b0d6:  mov    %rdx,%rax
    0.00 :   5b0d9:  and    $0xfff,%eax
    0.00 :   5b0de:  sub    %rax,%rsp
    0.00 :   5b0e1:  test   %rax,%rax
    0.00 :   5b0e4:  je     5b0ec <__GI___printf_fp_l+0x7bc>
    0.00 :   5b0e6:  orq    $0x0,-0x8(%rsp,%rax,1)
    0.00 :   5b0ec:  lea    0xf(%rsp),%rax
         : 580   ./stdio-common/printf_fp.c:445
    0.00 :   5b0f1:  movq   $0x0,-0x78(%rbp)
         : 582   ./stdio-common/printf_fp.c:439
    0.00 :   5b0f9:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b0fd:  mov    %rax,-0x80(%rbp)
         : 585   ./stdio-common/printf_fp.c:446
    0.00 :   5b101:  cmp    $0x2,%ecx
    0.00 :   5b104:  jle    5c19b <__GI___printf_fp_l+0x186b>
         : 588   ./stdio-common/printf_fp.c:463
    0.00 :   5b10a:  lea    (%rcx,%r14,1),%esi
         : 590   ./stdio-common/printf_fp.c:467
    0.00 :   5b10e:  test   %esi,%esi
    0.00 :   5b110:  lea    0x3f(%rsi),%edx
    0.00 :   5b113:  cmovns %esi,%edx
    0.00 :   5b116:  sar    $0x6,%edx
         : 595   ./stdio-common/printf_fp.c:463
    0.00 :   5b119:  test   $0x3f,%sil
    0.00 :   5b11d:  jne    5c895 <__GI___printf_fp_l+0x1f65>
         : 598   ./stdio-common/printf_fp.c:465
    0.00 :   5b123:  test   %r13,%r13
    0.00 :   5b126:  jle    5cca1 <__GI___printf_fp_l+0x2371>
    0.00 :   5b12c:  movslq %edx,%rbx
    0.00 :   5b12f:  mov    %r15,%rsi
    0.00 :   5b132:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5b138:  lea    0x0(,%r13,8),%rdx
    0.00 :   5b140:  lea    (%rdi,%rbx,8),%rdi
    0.00 :   5b144:  call   28620 <*ABS*+0xa9c10@plt>
    0.00 :   5b149:  mov    -0xd0(%rbp),%ecx
         : 608   ./stdio-common/printf_fp.c:467
    0.00 :   5b14f:  add    %rbx,%r13
    0.00 :   5b152:  mov    %rbx,%rdx
    0.00 :   5b155:  mov    %r13,-0x88(%rbp)
         : 612   ./stdio-common/printf_fp.c:479 (discriminator 1)
    0.00 :   5b15c:  test   %rdx,%rdx
    0.00 :   5b15f:  jle    5b17f <__GI___printf_fp_l+0x84f>
         : 615   ./stdio-common/printf_fp.c:479
    0.00 :   5b161:  mov    -0x90(%rbp),%rdi
    0.00 :   5b168:  shl    $0x3,%rdx
    0.00 :   5b16c:  xor    %esi,%esi
    0.00 :   5b16e:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5b174:  call   28670 <*ABS*+0xa96d0@plt>
    0.00 :   5b179:  mov    -0xd0(%rbp),%ecx
         : 622   ./stdio-common/printf_fp.c:490
    0.00 :   5b17f:  mov    $0xc,%r13d
         : 624   ./stdio-common/printf_fp.c:449
    0.00 :   5b185:  xor    %r14d,%r14d
         : 626   ./stdio-common/printf_fp.c:459
    0.00 :   5b188:  xor    %eax,%eax
         : 628   ./stdio-common/printf_fp.c:490
    0.00 :   5b18a:  mov    -0x78(%rbp),%rdx
         : 630   ./stdio-common/printf_fp.c:460
    0.00 :   5b18e:  lea    0x171ce3(%rip),%r15        # 1cce78 <_fpioconst_pow10+0x138>
    0.00 :   5b195:  mov    %r12,-0xd0(%rbp)
    0.00 :   5b19c:  mov    %r14d,%r12d
    0.00 :   5b19f:  mov    %r13d,%r14d
    0.00 :   5b1a2:  lea    -0x138(%r15),%rbx
    0.00 :   5b1a9:  mov    %eax,%r13d
    0.00 :   5b1ac:  jmp    5b20e <__GI___printf_fp_l+0x8de>
    0.00 :   5b1ae:  xchg   %ax,%ax
         : 639   ./stdio-common/printf_fp.c:493
    0.00 :   5b1b0:  mov    -0xb8(%rbp),%rax
    0.00 :   5b1b7:  testb  $0x10,0xd(%rax)
    0.00 :   5b1bb:  jne    5b930 <__GI___printf_fp_l+0x1000>
         : 643   ./stdio-common/printf_fp.c:534
    0.00 :   5b1c1:  mov    0x8(%r15),%rdx
         : 645   ./stdio-common/printf_fp.c:535
    0.00 :   5b1c5:  mov    (%r15),%rax
    0.00 :   5b1c8:  lea    0x171cf1(%rip),%rcx        # 1ccec0 <__tens>
         : 648   ./stdio-common/printf_fp.c:534
    0.00 :   5b1cf:  mov    %rdx,-0x68(%rbp)
         : 650   ./stdio-common/printf_fp.c:535
    0.00 :   5b1d3:  lea    (%rcx,%rax,8),%rsi
    0.00 :   5b1d7:  shl    $0x3,%rdx
    0.00 :   5b1db:  call   28620 <*ABS*+0xa9c10@plt>
         : 654   ./stdio-common/printf_fp.c:551
    0.00 :   5b1e0:  mov    -0x68(%rbp),%rdx
    0.00 :   5b1e4:  cmp    %rdx,-0x88(%rbp)
    0.00 :   5b1eb:  jg     5b270 <__GI___printf_fp_l+0x940>
         : 658   ./stdio-common/printf_fp.c:551 (discriminator 1)
    0.00 :   5b1f1:  je     5c1e0 <__GI___printf_fp_l+0x18b0>
         : 660   ./stdio-common/printf_fp.c:569
    0.00 :   5b1f7:  mov    -0x78(%rbp),%rdx
         : 662   ./stdio-common/printf_fp.c:560
    0.00 :   5b1fb:  sub    $0x1,%r14d
         : 664   ./stdio-common/printf_fp.c:562
    0.00 :   5b1ff:  cmp    %rbx,%r15
    0.00 :   5b202:  je     5b2c3 <__GI___printf_fp_l+0x993>
         : 667   ./stdio-common/printf_fp.c:488
    0.00 :   5b208:  mov    -0x98(%rbp),%ecx
         : 669   ./stdio-common/printf_fp.c:488 (discriminator 4)
    0.00 :   5b20e:  mov    -0x8(%r15),%eax
         : 671   ./stdio-common/printf_fp.c:484 (discriminator 4)
    0.00 :   5b212:  sub    $0x18,%r15
         : 673   ./stdio-common/printf_fp.c:488 (discriminator 4)
    0.00 :   5b216:  add    %r12d,%eax
    0.00 :   5b219:  sub    $0x1,%eax
    0.00 :   5b21c:  cmp    %ecx,%eax
    0.00 :   5b21e:  jg     5b1fb <__GI___printf_fp_l+0x8cb>
         : 678   ./stdio-common/printf_fp.c:503
    0.00 :   5b220:  mov    -0x70(%rbp),%rdi
         : 680   ./stdio-common/printf_fp.c:490
    0.00 :   5b224:  test   %rdx,%rdx
    0.00 :   5b227:  je     5b1b0 <__GI___printf_fp_l+0x880>
         : 683   ./stdio-common/printf_fp.c:543
    0.00 :   5b229:  mov    (%r15),%rcx
         : 685   ./stdio-common/printf_fp.c:541
    0.00 :   5b22c:  mov    0x8(%r15),%rax
    0.00 :   5b230:  lea    0x171c89(%rip),%rsi        # 1ccec0 <__tens>
    0.00 :   5b237:  lea    0x8(%rsi,%rcx,8),%rcx
    0.00 :   5b23c:  mov    -0x80(%rbp),%rsi
    0.00 :   5b240:  lea    -0x1(%rax),%r8
    0.00 :   5b244:  call   54f90 <__mpn_mul>
         : 692   ./stdio-common/printf_fp.c:546
    0.00 :   5b249:  mov    0x8(%r15),%rdx
    0.00 :   5b24d:  add    -0x78(%rbp),%rdx
         : 695   ./stdio-common/printf_fp.c:547
    0.00 :   5b251:  test   %rax,%rax
    0.00 :   5b254:  je     5b978 <__GI___printf_fp_l+0x1048>
         : 698   ./stdio-common/printf_fp.c:546
    0.00 :   5b25a:  sub    $0x1,%rdx
         : 700   ./stdio-common/printf_fp.c:545
    0.00 :   5b25e:  mov    %rdx,-0x68(%rbp)
         : 702   ./stdio-common/printf_fp.c:551
    0.00 :   5b262:  cmp    %rdx,-0x88(%rbp)
    0.00 :   5b269:  jle    5b1f1 <__GI___printf_fp_l+0x8c1>
    0.00 :   5b26b:  nopl   0x0(%rax,%rax,1)
         : 706   ./stdio-common/printf_fp.c:554
    0.00 :   5b270:  mov    -0x70(%rbp),%rsi
    0.00 :   5b274:  mov    -0x80(%rbp),%rdi
    0.00 :   5b278:  mov    %rdx,-0x78(%rbp)
    0.00 :   5b27c:  shl    $0x3,%rdx
    0.00 :   5b280:  call   28620 <*ABS*+0xa9c10@plt>
         : 712   ./stdio-common/printf_fp.c:555
    0.00 :   5b285:  mov    -0x78(%rbp),%rdx
    0.00 :   5b289:  mov    -0x80(%rbp),%rax
    0.00 :   5b28d:  bsr    -0x8(%rax,%rdx,8),%rax
         : 716   ./stdio-common/printf_fp.c:556
    0.00 :   5b293:  mov    %edx,%ecx
    0.00 :   5b295:  shl    $0x6,%ecx
    0.00 :   5b298:  lea    -0x81(%rcx),%r10d
         : 720   ./stdio-common/printf_fp.c:557
    0.00 :   5b29f:  mov    %r14d,%ecx
         : 722   ./stdio-common/printf_fp.c:560
    0.00 :   5b2a2:  sub    $0x1,%r14d
         : 724   ./stdio-common/printf_fp.c:555
    0.00 :   5b2a6:  xor    $0x3f,%rax
         : 726   ./stdio-common/printf_fp.c:556
    0.00 :   5b2aa:  sub    %eax,%r10d
         : 728   ./stdio-common/printf_fp.c:557
    0.00 :   5b2ad:  mov    $0x1,%eax
    0.00 :   5b2b2:  shl    %cl,%eax
         : 731   ./stdio-common/printf_fp.c:556
    0.00 :   5b2b4:  mov    %r10d,%r12d
         : 733   ./stdio-common/printf_fp.c:557
    0.00 :   5b2b7:  or     %eax,%r13d
         : 735   ./stdio-common/printf_fp.c:562
    0.00 :   5b2ba:  cmp    %rbx,%r15
    0.00 :   5b2bd:  jne    5b208 <__GI___printf_fp_l+0x8d8>
         : 738   ./stdio-common/printf_fp.c:563
    0.00 :   5b2c3:  mov    %r13d,-0x98(%rbp)
    0.00 :   5b2ca:  mov    -0xd0(%rbp),%r12
         : 741   ./stdio-common/printf_fp.c:569
    0.00 :   5b2d1:  test   %rdx,%rdx
    0.00 :   5b2d4:  jle    5b348 <__GI___printf_fp_l+0xa18>
         : 744   ./stdio-common/printf_fp.c:573
    0.00 :   5b2d6:  mov    -0x80(%rbp),%rdi
         : 746   ./stdio-common/printf_fp.c:577
    0.00 :   5b2da:  bsr    -0x8(%rdi,%rdx,8),%rsi
         : 748   ./stdio-common/printf_fp.c:573
    0.00 :   5b2e0:  mov    (%rdi),%rax
         : 750   ./stdio-common/printf_fp.c:577
    0.00 :   5b2e3:  xor    $0x3f,%rsi
    0.00 :   5b2e7:  mov    %esi,%ecx
         : 753   ./stdio-common/printf_fp.c:573
    0.00 :   5b2e9:  test   %rax,%rax
    0.00 :   5b2ec:  jne    5d3c0 <__GI___printf_fp_l+0x2a90>
    0.00 :   5b2f2:  mov    -0x90(%rbp),%r9
    0.00 :   5b2f9:  mov    %rdi,%rsi
    0.00 :   5b2fc:  xor    %r13d,%r13d
    0.00 :   5b2ff:  jmp    5b325 <__GI___printf_fp_l+0x9f5>
    0.00 :   5b301:  nopl   0x0(%rax)
         : 761   ./stdio-common/printf_fp.c:573 (discriminator 4)
    0.00 :   5b308:  mov    0x8(%rsi),%r8
    0.00 :   5b30c:  lea    0x1(%rax),%r14d
    0.00 :   5b310:  add    $0x8,%rsi
    0.00 :   5b314:  add    $0x1,%rax
    0.00 :   5b318:  add    $0x8,%r13
    0.00 :   5b31c:  test   %r8,%r8
    0.00 :   5b31f:  jne    5ca47 <__GI___printf_fp_l+0x2117>
         : 769   ./stdio-common/printf_fp.c:573 (discriminator 3)
    0.00 :   5b325:  mov    (%r9,%r13,1),%r8
    0.00 :   5b329:  mov    %eax,%r14d
    0.00 :   5b32c:  test   %r8,%r8
    0.00 :   5b32f:  je     5b308 <__GI___printf_fp_l+0x9d8>
         : 774   ./stdio-common/printf_fp.c:579
    0.00 :   5b331:  test   %ecx,%ecx
    0.00 :   5b333:  jne    5cf27 <__GI___printf_fp_l+0x25f7>
         : 777   ./stdio-common/printf_fp.c:583
    0.00 :   5b339:  test   %r14d,%r14d
    0.00 :   5b33c:  jne    5ceb1 <__GI___printf_fp_l+0x2581>
    0.00 :   5b342:  nopw   0x0(%rax,%rax,1)
         : 781   ./stdio-common/printf_fp.c:831
    0.00 :   5b348:  mov    -0xb8(%rbp),%rsi
         : 783   ./stdio-common/printf_fp.c:841
    0.00 :   5b34f:  mov    0x1bea92(%rip),%rdx        # 219de8 <_DYNAMIC+0x228>
         : 785   ./stdio-common/printf_fp.c:831
    0.00 :   5b356:  mov    0x4(%rsi),%eax
         : 787   ./stdio-common/printf_fp.c:841
    0.00 :   5b359:  movslq 0x8(%rsi),%rcx
         : 789   ./stdio-common/printf_fp.c:847
    0.00 :   5b35d:  mov    (%rsi),%edi
         : 791   ./stdio-common/printf_fp.c:831
    0.00 :   5b35f:  mov    %eax,-0x138(%rbp)
         : 793   ./stdio-common/printf_fp.c:841
    0.00 :   5b365:  mov    %fs:(%rdx),%rdx
    0.00 :   5b369:  mov    %rcx,%rax
         : 796   ./stdio-common/printf_fp.c:847
    0.00 :   5b36c:  mov    %edi,-0xf0(%rbp)
         : 798   ./stdio-common/printf_fp.c:841
    0.00 :   5b372:  mov    (%rdx,%rcx,4),%ecx
    0.00 :   5b375:  mov    %ecx,-0x13c(%rbp)
         : 801   ./stdio-common/printf_fp.c:843
    0.00 :   5b37b:  cmp    $0x65,%cl
    0.00 :   5b37e:  je     5c2a8 <__GI___printf_fp_l+0x1978>
         : 804   ./stdio-common/printf_fp.c:853
    0.00 :   5b384:  cmpb   $0x66,-0x13c(%rbp)
    0.00 :   5b38b:  je     5c3d4 <__GI___printf_fp_l+0x1aa4>
         : 807   ./stdio-common/printf_fp.c:873
    0.00 :   5b391:  movl   $0x6,-0x128(%rbp)
    0.00 :   5b39b:  test   %edi,%edi
    0.00 :   5b39d:  js     5b3ad <__GI___printf_fp_l+0xa7d>
         : 811   ./stdio-common/printf_fp.c:873 (discriminator 1)
    0.00 :   5b39f:  mov    $0x1,%edx
    0.00 :   5b3a4:  cmovne %edi,%edx
    0.00 :   5b3a7:  mov    %edx,-0x128(%rbp)
         : 815   ./stdio-common/printf_fp.c:874 (discriminator 8)
    0.00 :   5b3ad:  mov    -0xa0(%rbp),%r14d
         : 817   ./stdio-common/printf_fp.c:861 (discriminator 8)
    0.00 :   5b3b4:  mov    -0x98(%rbp),%edx
         : 819   ./stdio-common/printf_fp.c:874 (discriminator 8)
    0.00 :   5b3ba:  test   %r14d,%r14d
    0.00 :   5b3bd:  je     5c452 <__GI___printf_fp_l+0x1b22>
         : 822   ./stdio-common/printf_fp.c:875 (discriminator 1)
    0.00 :   5b3c3:  cmp    $0x4,%edx
    0.00 :   5b3c6:  jg     5c859 <__GI___printf_fp_l+0x1f29>
         : 825   ./stdio-common/printf_fp.c:888
    0.00 :   5b3cc:  movl   $0x0,-0x118(%rbp)
    0.00 :   5b3d6:  mov    -0x128(%rbp),%eax
    0.00 :   5b3dc:  mov    %eax,-0xe0(%rbp)
         : 829   ./stdio-common/printf_fp.c:895 (discriminator 4)
    0.00 :   5b3e2:  movslq -0x128(%rbp),%rax
         : 831   ./stdio-common/printf_fp.c:887 (discriminator 4)
    0.00 :   5b3e9:  movl   $0x66,-0x9c(%rbp)
         : 833   ./stdio-common/printf_fp.c:895 (discriminator 4)
    0.00 :   5b3f3:  add    $0x5,%rax
    0.00 :   5b3f7:  mov    %rax,-0x120(%rbp)
         : 836   ./stdio-common/printf_fp.c:898
    0.00 :   5b3fe:  mov    -0xb8(%rbp),%rax
    0.00 :   5b405:  xor    %esi,%esi
    0.00 :   5b407:  testb  $0x8,0xc(%rax)
    0.00 :   5b40b:  mov    -0xe0(%rbp),%eax
    0.00 :   5b411:  cmove  %esi,%eax
    0.00 :   5b414:  mov    %eax,-0xf0(%rbp)
         : 843   ./stdio-common/printf_fp.c:901
    0.00 :   5b41a:  cmpq   $0x0,-0xe8(%rbp)
    0.00 :   5b422:  je     5c350 <__GI___printf_fp_l+0x1a20>
         : 846   __guess_grouping():
         : 847   ./stdio-common/printf_fp.c:1295
    0.00 :   5b428:  mov    -0xe8(%rbp),%rax
    0.00 :   5b42f:  movzbl (%rax),%eax
    0.00 :   5b432:  mov    %al,-0xd0(%rbp)
    0.00 :   5b438:  sub    $0x1,%eax
    0.00 :   5b43b:  cmp    $0x7d,%al
    0.00 :   5b43d:  ja     5c3c0 <__GI___printf_fp_l+0x1a90>
         : 854   __GI___printf_fp_l():
         : 855   ./stdio-common/printf_fp.c:905
    0.00 :   5b443:  mov    -0x118(%rbp),%edx
    0.00 :   5b449:  mov    -0xe8(%rbp),%rax
         : 858   __guess_grouping():
         : 859   ./stdio-common/printf_fp.c:1299
    0.00 :   5b450:  xor    %r9d,%r9d
    0.00 :   5b453:  jmp    5b47d <__GI___printf_fp_l+0xb4d>
    0.00 :   5b455:  nopl   (%rax)
         : 863   ./stdio-common/printf_fp.c:1305
    0.00 :   5b458:  movzbl 0x1(%rax),%r8d
         : 865   ./stdio-common/printf_fp.c:1303
    0.00 :   5b45d:  add    $0x1,%rax
         : 867   ./stdio-common/printf_fp.c:1302
    0.00 :   5b461:  lea    0x1(%r9),%edi
         : 869   ./stdio-common/printf_fp.c:1303
    0.00 :   5b465:  sub    %ecx,%edx
         : 871   ./stdio-common/printf_fp.c:1305
    0.00 :   5b467:  cmp    $0x7e,%r8b
    0.00 :   5b46b:  ja     5c90b <__GI___printf_fp_l+0x1fdb>
         : 874   ./stdio-common/printf_fp.c:1312
    0.00 :   5b471:  test   %r8b,%r8b
    0.00 :   5b474:  je     5c91c <__GI___printf_fp_l+0x1fec>
         : 877   ./stdio-common/printf_fp.c:1302
    0.00 :   5b47a:  mov    %edi,%r9d
         : 879   ./stdio-common/printf_fp.c:1300
    0.00 :   5b47d:  movsbl (%rax),%ecx
    0.00 :   5b480:  cmp    %ecx,%edx
    0.00 :   5b482:  ja     5b458 <__GI___printf_fp_l+0xb28>
         : 883   __GI___printf_fp_l():
         : 884   ./stdio-common/printf_fp.c:905
    0.00 :   5b484:  mov    %r9d,%eax
    0.00 :   5b487:  mov    %r9d,-0x124(%rbp)
         : 887   ./stdio-common/printf_fp.c:908
    0.00 :   5b48e:  add    $0x1,%eax
    0.00 :   5b491:  cltq
    0.00 :   5b493:  add    %rax,-0x120(%rbp)
         : 891   ./stdio-common/printf_fp.c:915
    0.00 :   5b49a:  movabs $0x3ffffffffffffffc,%rax
    0.00 :   5b4a4:  cmp    %rax,-0x120(%rbp)
    0.00 :   5b4ab:  ja     5c840 <__GI___printf_fp_l+0x1f10>
         : 895   ./stdio-common/printf_fp.c:916 (discriminator 1)
    0.00 :   5b4b1:  movslq -0xe0(%rbp),%rax
         : 897   ./stdio-common/printf_fp.c:915 (discriminator 1)
    0.00 :   5b4b8:  mov    -0x120(%rbp),%rdi
    0.00 :   5b4bf:  mov    %esi,-0xd0(%rbp)
    0.00 :   5b4c5:  cmp    %rdi,%rax
   14.93 :   5b4c8:  ja     5c840 <__GI___printf_fp_l+0x1f10>
         : 902   ./stdio-common/printf_fp.c:922
    0.00 :   5b4ce:  lea    0x8(,%rdi,4),%r15
         : 904   __libc_use_alloca():
         : 905   ./stdio-common/../sysdeps/pthread/allocalim.h:27
    0.00 :   5b4d6:  mov    %r15,%rdi
    0.00 :   5b4d9:  call   909a0 <__libc_alloca_cutoff>
         : 908   ./stdio-common/../sysdeps/pthread/allocalim.h:29
    0.00 :   5b4de:  mov    -0xd0(%rbp),%esi
    0.00 :   5b4e4:  test   %eax,%eax
    0.00 :   5b4e6:  jne    5b4f5 <__GI___printf_fp_l+0xbc5>
    0.00 :   5b4e8:  cmp    $0x1000,%r15
    0.00 :   5b4ef:  ja     5ce5e <__GI___printf_fp_l+0x252e>
         : 914   __GI___printf_fp_l():
         : 915   ./stdio-common/printf_fp.c:932
    0.00 :   5b4f5:  add    $0x17,%r15
    0.00 :   5b4f9:  mov    %rsp,%rdx
    0.00 :   5b4fc:  mov    %r15,%rax
    0.00 :   5b4ff:  and    $0xfffffffffffff000,%r15
    0.00 :   5b506:  sub    %r15,%rdx
    0.00 :   5b509:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b50d:  cmp    %rdx,%rsp
    0.00 :   5b510:  je     5b527 <__GI___printf_fp_l+0xbf7>
    0.00 :   5b512:  sub    $0x1000,%rsp
    0.00 :   5b519:  orq    $0x0,0xff8(%rsp)
    0.00 :   5b522:  cmp    %rdx,%rsp
    0.00 :   5b525:  jne    5b512 <__GI___printf_fp_l+0xbe2>
    0.00 :   5b527:  and    $0xfff,%eax
    0.00 :   5b52c:  sub    %rax,%rsp
    0.00 :   5b52f:  test   %rax,%rax
    0.00 :   5b532:  je     5b53a <__GI___printf_fp_l+0xc0a>
    0.00 :   5b534:  orq    $0x0,-0x8(%rsp,%rax,1)
    0.00 :   5b53a:  movl   $0x1,-0x14c(%rbp)
    0.00 :   5b544:  lea    0xf(%rsp),%rax
    0.00 :   5b549:  movl   $0x0,-0x140(%rbp)
    0.00 :   5b553:  and    $0xfffffffffffffff0,%rax
    0.00 :   5b557:  mov    %rax,-0x130(%rbp)
         : 938   ./stdio-common/printf_fp.c:936
    0.00 :   5b55e:  mov    -0xa0(%rbp),%r13d
         : 940   ./stdio-common/printf_fp.c:933
    0.00 :   5b565:  lea    0x8(%rax),%r14
         : 942   ./stdio-common/printf_fp.c:936
    0.00 :   5b569:  test   %r13d,%r13d
    0.00 :   5b56c:  je     5b57b <__GI___printf_fp_l+0xc4b>
         : 945   ./stdio-common/printf_fp.c:936 (discriminator 1)
    0.00 :   5b56e:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5b575:  je     5c9f0 <__GI___printf_fp_l+0x20c0>
         : 948   ./stdio-common/printf_fp.c:939
    0.00 :   5b57b:  mov    -0x118(%rbp),%eax
    0.00 :   5b581:  test   %eax,%eax
    0.00 :   5b583:  jle    5cfaa <__GI___printf_fp_l+0x267a>
    0.00 :   5b589:  mov    -0x130(%rbp),%rdi
    0.00 :   5b590:  sub    $0x1,%eax
         : 954   ./stdio-common/printf_fp.c:933
    0.00 :   5b593:  mov    %r14,%r15
    0.00 :   5b596:  lea    -0xa0(%rbp),%r13
    0.00 :   5b59d:  lea    0xc(%rdi,%rax,4),%rbx
    0.00 :   5b5a2:  nopw   0x0(%rax,%rax,1)
         : 959   ./stdio-common/printf_fp.c:942
    0.00 :   5b5a8:  mov    %r13,%rdi
    0.00 :   5b5ab:  add    $0x4,%r15
    0.00 :   5b5af:  call   5a4d0 <hack_digit>
    0.00 :   5b5b4:  mov    %eax,-0x4(%r15)
         : 964   ./stdio-common/printf_fp.c:939
    0.00 :   5b5b8:  cmp    %rbx,%r15
    0.00 :   5b5bb:  jne    5b5a8 <__GI___printf_fp_l+0xc78>
         : 967   ./stdio-common/printf_fp.c:942
    0.00 :   5b5bd:  mov    -0x118(%rbp),%eax
    0.00 :   5b5c3:  mov    %rax,%rcx
    0.00 :   5b5c6:  lea    (%r14,%rax,4),%rax
    0.00 :   5b5ca:  mov    %ecx,-0x134(%rbp)
         : 972   ./stdio-common/printf_fp.c:946
    0.00 :   5b5d0:  mov    -0xb8(%rbp),%rdi
    0.00 :   5b5d7:  testb  $0x8,0xc(%rdi)
    0.00 :   5b5db:  jne    5b5eb <__GI___printf_fp_l+0xcbb>
    0.00 :   5b5dd:  mov    -0xf0(%rbp),%ebx
    0.00 :   5b5e3:  test   %ebx,%ebx
    0.00 :   5b5e5:  jle    5c9b4 <__GI___printf_fp_l+0x2084>
         : 979   ./stdio-common/printf_fp.c:948
    0.00 :   5b5eb:  mov    -0xc0(%rbp),%ecx
    0.00 :   5b5f1:  lea    0x4(%rax),%r15
         : 982   ./stdio-common/printf_fp.c:944
    0.00 :   5b5f5:  mov    $0x1,%esi
         : 984   ./stdio-common/printf_fp.c:948
    0.00 :   5b5fa:  mov    %ecx,(%rax)
         : 986   ./stdio-common/printf_fp.c:962
    0.00 :   5b5fc:  mov    -0xf0(%rbp),%eax
         : 988   ./stdio-common/printf_fp.c:960
    0.00 :   5b602:  xor    %ebx,%ebx
    0.00 :   5b604:  mov    %r12,-0x148(%rbp)
    0.00 :   5b60b:  mov    %r13,%r12
         : 992   ./stdio-common/printf_fp.c:961
    0.00 :   5b60e:  movl   $0x0,-0x100(%rbp)
    0.00 :   5b618:  mov    %ebx,%r13d
    0.00 :   5b61b:  mov    %esi,%ebx
    0.00 :   5b61d:  mov    %eax,-0xd0(%rbp)
         : 997   ./stdio-common/printf_fp.c:962
    0.00 :   5b623:  mov    -0xd0(%rbp),%eax
    0.00 :   5b629:  mov    %eax,%r9d
         : 1000  ./stdio-common/printf_fp.c:963
    0.00 :   5b62c:  cmp    %r13d,%eax
    0.00 :   5b62f:  jg     5b64c <__GI___printf_fp_l+0xd1c>
         : 1003  ./stdio-common/printf_fp.c:963 (discriminator 1)
    0.00 :   5b631:  cmp    %r13d,-0xe0(%rbp)
    0.00 :   5b638:  jle    5b999 <__GI___printf_fp_l+0x1069>
         : 1006  ./stdio-common/printf_fp.c:963 (discriminator 2)
    0.00 :   5b63e:  cmpq   $0x1,-0x88(%rbp)
    0.00 :   5b646:  jle    5b988 <__GI___printf_fp_l+0x1058>
         : 1009  ./stdio-common/printf_fp.c:966
    0.00 :   5b64c:  mov    %r12,%rdi
         : 1011  ./stdio-common/printf_fp.c:965
    0.00 :   5b64f:  add    $0x1,%r13d
         : 1013  ./stdio-common/printf_fp.c:967
    0.00 :   5b653:  add    $0x4,%r15
         : 1015  ./stdio-common/printf_fp.c:966
    0.00 :   5b657:  call   5a4d0 <hack_digit>
    0.00 :   5b65c:  mov    %eax,-0x4(%r15)
         : 1018  ./stdio-common/printf_fp.c:969
    0.00 :   5b660:  test   %ebx,%ebx
    0.00 :   5b662:  jne    5b66d <__GI___printf_fp_l+0xd3d>
    0.00 :   5b664:  cmp    $0x30,%eax
    0.00 :   5b667:  je     5c030 <__GI___printf_fp_l+0x1700>
         : 1023  ./stdio-common/printf_fp.c:962
    0.00 :   5b66d:  mov    -0xd0(%rbp),%eax
    0.00 :   5b673:  mov    $0x1,%ebx
    0.00 :   5b678:  mov    %eax,%r9d
         : 1027  ./stdio-common/printf_fp.c:963
    0.00 :   5b67b:  cmp    %r13d,%eax
    0.00 :   5b67e:  jle    5b631 <__GI___printf_fp_l+0xd01>
    0.00 :   5b680:  jmp    5b64c <__GI___printf_fp_l+0xd1c>
    0.00 :   5b682:  nopw   0x0(%rax,%rax,1)
         : 1032  ./stdio-common/printf_fp.c:393
    0.00 :   5b688:  lea    -0x60(%rbp),%r15
    0.00 :   5b68c:  sub    $0x10,%rsp
    0.00 :   5b690:  lea    -0xa4(%rbp),%rcx
    0.00 :   5b697:  mov    $0x2,%esi
    0.00 :   5b69c:  lea    -0x98(%rbp),%rdx
    0.00 :   5b6a3:  mov    %r15,%rdi
    0.00 :   5b6a6:  fstpt  (%rsp)
    0.00 :   5b6a9:  call   56550 <__mpn_extract_long_double>
    0.00 :   5b6ae:  pop    %rcx
    0.00 :   5b6af:  pop    %rsi
    0.00 :   5b6b0:  mov    %eax,%r14d
    0.00 :   5b6b3:  mov    %rax,%r13
    0.00 :   5b6b6:  shl    $0x6,%r14d
    0.00 :   5b6ba:  sub    $0x3f,%r14d
         : 1047  ./stdio-common/printf_fp.c:400
    0.00 :   5b6be:  jmp    5afdd <__GI___printf_fp_l+0x6ad>
    0.00 :   5b6c3:  mov    %r9d,-0xe0(%rbp)
         : 1050  ./stdio-common/printf_fp.c:1174 (discriminator 5)
    0.00 :   5b6ca:  mov    $0x2d,%esi
         : 1052  ./stdio-common/printf_fp.c:1178 (discriminator 5)
    0.00 :   5b6cf:  mov    %r12,%rdi
    0.00 :   5b6d2:  call   838b0 <__woverflow>
    0.00 :   5b6d7:  mov    -0xe0(%rbp),%r9d
    0.00 :   5b6de:  cmp    $0xffffffff,%eax
    0.00 :   5b6e1:  sete   %al
         : 1058  ./stdio-common/printf_fp.c:1178
    0.00 :   5b6e4:  test   %al,%al
    0.00 :   5b6e6:  je     5bd8e <__GI___printf_fp_l+0x145e>
         : 1061  ./stdio-common/printf_fp.c:1254 (discriminator 37)
    0.00 :   5b6ec:  mov    -0x14c(%rbp),%eax
    0.00 :   5b6f2:  test   %eax,%eax
    0.00 :   5b6f4:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 1065  ./stdio-common/printf_fp.c:1269 (discriminator 7)
    0.00 :   5b6f6:  mov    -0x130(%rbp),%rdi
    0.00 :   5b6fd:  call   28370 <free@plt>
    0.00 :   5b702:  mov    $0xffffffff,%r13d
    0.00 :   5b708:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5b70d:  nopl   (%rax)
         : 1071  ./stdio-common/printf_fp.c:418
    0.00 :   5b710:  movzbl (%r14),%edx
    0.00 :   5b714:  mov    0x28(%r12),%rax
    0.00 :   5b719:  cmp    %rax,0x30(%r12)
    0.00 :   5b71e:  jbe    5cbf0 <__GI___printf_fp_l+0x22c0>
    0.00 :   5b724:  lea    0x1(%rax),%rcx
    0.00 :   5b728:  mov    %rcx,0x28(%r12)
    0.00 :   5b72d:  mov    %dl,(%rax)
    0.00 :   5b72f:  movzbl 0x1(%r14),%edx
    0.00 :   5b734:  mov    0x28(%r12),%rax
    0.00 :   5b739:  cmp    %rax,0x30(%r12)
    0.00 :   5b73e:  jbe    5cbd0 <__GI___printf_fp_l+0x22a0>
    0.00 :   5b744:  lea    0x1(%rax),%rcx
    0.00 :   5b748:  mov    %rcx,0x28(%r12)
    0.00 :   5b74d:  mov    %dl,(%rax)
    0.00 :   5b74f:  movzbl 0x2(%r14),%edx
    0.00 :   5b754:  mov    0x28(%r12),%rax
    0.00 :   5b759:  cmp    0x30(%r12),%rax
    0.00 :   5b75e:  jae    5cbb2 <__GI___printf_fp_l+0x2282>
         : 1090  ./stdio-common/printf_fp.c:418 (discriminator 46)
    0.00 :   5b764:  lea    0x1(%rax),%rcx
    0.00 :   5b768:  mov    %rcx,0x28(%r12)
    0.00 :   5b76d:  mov    %dl,(%rax)
         : 1094  ./stdio-common/printf_fp.c:420 (discriminator 51)
    0.00 :   5b76f:  mov    -0xb8(%rbp),%rax
         : 1096  ./stdio-common/printf_fp.c:418 (discriminator 51)
    0.00 :   5b776:  add    $0x3,%r13d
         : 1098  ./stdio-common/printf_fp.c:420 (discriminator 51)
    0.00 :   5b77a:  testb  $0x20,0xc(%rax)
    0.00 :   5b77e:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5b784:  test   %r15b,%r15b
    0.00 :   5b787:  je     5aed8 <__GI___printf_fp_l+0x5a8>
         : 1103  ./stdio-common/printf_fp.c:421 (discriminator 2)
    0.00 :   5b78d:  movslq %ebx,%r14
    0.00 :   5b790:  mov    $0x20,%esi
    0.00 :   5b795:  mov    %r12,%rdi
    0.00 :   5b798:  mov    %r14,%rdx
    0.00 :   5b79b:  call   806a0 <_IO_padn>
    0.00 :   5b7a0:  jmp    5aecc <__GI___printf_fp_l+0x59c>
    0.00 :   5b7a5:  nopl   (%rax)
         : 1111  ./stdio-common/printf_fp.c:388
    0.00 :   5b7a8:  lea    -0x60(%rbp),%r15
    0.00 :   5b7ac:  lea    -0xa4(%rbp),%rcx
    0.00 :   5b7b3:  movdqa %xmm2,%xmm0
    0.00 :   5b7b7:  mov    $0x2,%esi
    0.00 :   5b7bc:  lea    -0x98(%rbp),%rdx
    0.00 :   5b7c3:  mov    %r15,%rdi
    0.00 :   5b7c6:  call   566b0 <__mpn_extract_float128>
    0.00 :   5b7cb:  mov    %eax,%r14d
    0.00 :   5b7ce:  mov    %rax,%r13
    0.00 :   5b7d1:  shl    $0x6,%r14d
    0.00 :   5b7d5:  sub    $0x70,%r14d
         : 1123  ./stdio-common/printf_fp.c:400
    0.00 :   5b7d9:  jmp    5afdd <__GI___printf_fp_l+0x6ad>
    0.00 :   5b7de:  xchg   %ax,%ax
         : 1126  ./stdio-common/printf_fp.c:414 (discriminator 2)
    0.00 :   5b7e0:  mov    0x28(%r12),%rax
    0.00 :   5b7e5:  cmp    0x30(%r12),%rax
    0.00 :   5b7ea:  jae    5d1fe <__GI___printf_fp_l+0x28ce>
         : 1130  ./stdio-common/printf_fp.c:414 (discriminator 11)
    0.00 :   5b7f0:  lea    0x1(%rax),%rdx
    0.00 :   5b7f4:  mov    %rdx,0x28(%r12)
    0.00 :   5b7f9:  movb   $0x2b,(%rax)
    0.00 :   5b7fc:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
         : 1135  ./stdio-common/printf_fp.c:418
    0.00 :   5b801:  mov    %r12,%rdi
    0.00 :   5b804:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5b80b:  call   838b0 <__woverflow>
    0.00 :   5b810:  mov    -0xd0(%rbp),%rcx
    0.00 :   5b817:  cmp    $0xffffffff,%eax
    0.00 :   5b81a:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5b820:  mov    0xa0(%r12),%rax
    0.00 :   5b828:  mov    0x4(%rcx),%esi
    0.00 :   5b82b:  add    $0x1,%r13d
    0.00 :   5b82f:  lea    0x8(%rcx),%r14
    0.00 :   5b833:  test   %rax,%rax
    0.00 :   5b836:  jne    5ae55 <__GI___printf_fp_l+0x525>
    0.00 :   5b83c:  mov    %r12,%rdi
    0.00 :   5b83f:  call   838b0 <__woverflow>
    0.00 :   5b844:  cmp    $0xffffffff,%eax
    0.00 :   5b847:  je     5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5b84d:  mov    0xa0(%r12),%rax
    0.00 :   5b855:  mov    (%r14),%esi
    0.00 :   5b858:  add    $0x1,%r13d
    0.00 :   5b85c:  test   %rax,%rax
    0.00 :   5b85f:  jne    5ae7d <__GI___printf_fp_l+0x54d>
         : 1157  ./stdio-common/printf_fp.c:418 (discriminator 19)
    0.00 :   5b865:  mov    %r12,%rdi
    0.00 :   5b868:  call   838b0 <__woverflow>
    0.00 :   5b86d:  cmp    $0xffffffff,%eax
    0.00 :   5b870:  sete   %al
    0.00 :   5b873:  jmp    5ae9b <__GI___printf_fp_l+0x56b>
         : 1163  _nl_lookup_word():
         : 1164  ./stdio-common/../include/../locale/localeinfo.h:330
    0.00 :   5b878:  mov    -0xf8(%rbp),%rbx
    0.00 :   5b87f:  mov    0x20(%rbx),%rsi
         : 1167  __GI___printf_fp_l():
         : 1168  ./stdio-common/printf_fp.c:316
    0.00 :   5b883:  mov    0x1a0(%rsi),%edi
    0.00 :   5b889:  mov    %edi,-0x114(%rbp)
    0.00 :   5b88f:  jmp    5abf2 <__GI___printf_fp_l+0x2c2>
         : 1172  _nl_lookup():
         : 1173  ./stdio-common/../include/../locale/localeinfo.h:315
    0.00 :   5b894:  mov    -0xf8(%rbp),%rdi
    0.00 :   5b89b:  mov    0x20(%rdi),%rsi
    0.00 :   5b89f:  mov    0x58(%rsi),%rsi
    0.00 :   5b8a3:  mov    %rsi,-0x110(%rbp)
    0.00 :   5b8aa:  jmp    5af7a <__GI___printf_fp_l+0x64a>
         : 1179  __GI___printf_fp_l():
         : 1180  ./stdio-common/printf_fp.c:388 (discriminator 1)
    0.00 :   5b8af:  movmskps %xmm2,%r13d
    0.00 :   5b8b3:  and    $0x8,%r13d
         : 1183  ./stdio-common/printf_fp.c:396 (discriminator 1)
    0.00 :   5b8b7:  mov    -0xb8(%rbp),%rax
    0.00 :   5b8be:  mov    %r13d,-0xa4(%rbp)
    0.00 :   5b8c5:  lea    0x17ce37(%rip),%r14        # 1d8703 <not_available+0x1a5>
    0.00 :   5b8cc:  movslq 0x8(%rax),%rcx
    0.00 :   5b8d0:  mov    0x1be521(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5b8d7:  mov    %fs:(%rax),%rax
    0.00 :   5b8db:  testb  $0x1,0x1(%rax,%rcx,2)
    0.00 :   5b8e0:  lea    0x187139(%rip),%rax        # 1e2a20 <default_rwlockattr+0x348>
    0.00 :   5b8e7:  lea    0x187112(%rip),%rcx        # 1e2a00 <default_rwlockattr+0x328>
    0.00 :   5b8ee:  cmove  %rax,%rcx
    0.00 :   5b8f2:  lea    0x17ccdb(%rip),%rax        # 1d85d4 <not_available+0x76>
    0.00 :   5b8f9:  cmove  %rax,%r14
    0.00 :   5b8fd:  jmp    5aadc <__GI___printf_fp_l+0x1ac>
         : 1197  ./stdio-common/printf_fp.c:437
    0.00 :   5b902:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   5b908:  jmp    5b047 <__GI___printf_fp_l+0x717>
         : 1200  ./stdio-common/printf_fp.c:416 (discriminator 2)
    0.00 :   5b90d:  mov    0x28(%r12),%rax
    0.00 :   5b912:  cmp    0x30(%r12),%rax
    0.00 :   5b917:  jae    5d406 <__GI___printf_fp_l+0x2ad6>
         : 1204  ./stdio-common/printf_fp.c:416 (discriminator 11)
    0.00 :   5b91d:  lea    0x1(%rax),%rdx
    0.00 :   5b921:  mov    %rdx,0x28(%r12)
    0.00 :   5b926:  movb   $0x20,(%rax)
    0.00 :   5b929:  jmp    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5b92e:  xchg   %ax,%ax
         : 1210  ./stdio-common/printf_fp.c:502
    0.00 :   5b930:  mov    0x8(%r15),%rax
         : 1212  ./stdio-common/printf_fp.c:504
    0.00 :   5b934:  lea    0x171585(%rip),%rcx        # 1ccec0 <__tens>
         : 1214  ./stdio-common/printf_fp.c:503
    0.00 :   5b93b:  add    $0x8,%rdi
         : 1216  ./stdio-common/printf_fp.c:502
    0.00 :   5b93f:  lea    0x1(%rax),%rdx
         : 1218  ./stdio-common/printf_fp.c:504
    0.00 :   5b943:  mov    (%r15),%rax
         : 1220  ./stdio-common/printf_fp.c:502
    0.00 :   5b946:  mov    %rdx,-0x68(%rbp)
         : 1222  ./stdio-common/printf_fp.c:503
    0.00 :   5b94a:  shl    $0x3,%rdx
         : 1224  ./stdio-common/printf_fp.c:504
    0.00 :   5b94e:  lea    (%rcx,%rax,8),%rsi
         : 1226  ./stdio-common/printf_fp.c:503
    0.00 :   5b952:  call   28620 <*ABS*+0xa9c10@plt>
         : 1228  ./stdio-common/printf_fp.c:506
    0.00 :   5b957:  mov    -0x70(%rbp),%rax
    0.00 :   5b95b:  movq   $0x0,(%rax)
         : 1231  ./stdio-common/printf_fp.c:551
    0.00 :   5b962:  mov    -0x68(%rbp),%rdx
         : 1233  ./stdio-common/printf_fp.c:509
    0.00 :   5b966:  addl   $0x40,-0x98(%rbp)
    0.00 :   5b96d:  jmp    5b1e4 <__GI___printf_fp_l+0x8b4>
    0.00 :   5b972:  nopw   0x0(%rax,%rax,1)
         : 1237  ./stdio-common/printf_fp.c:548
    0.00 :   5b978:  sub    $0x2,%rdx
    0.00 :   5b97c:  mov    %rdx,-0x68(%rbp)
    0.00 :   5b980:  jmp    5b1e4 <__GI___printf_fp_l+0x8b4>
    0.00 :   5b985:  nopl   (%rax)
         : 1242  ./stdio-common/printf_fp.c:963 (discriminator 3)
    0.00 :   5b988:  mov    -0x90(%rbp),%rax
    0.00 :   5b98f:  cmpq   $0x0,(%rax)
    0.00 :   5b993:  jne    5b64c <__GI___printf_fp_l+0xd1c>
    0.00 :   5b999:  mov    %r13d,%ebx
    0.00 :   5b99c:  mov    %r12,%r13
    0.00 :   5b99f:  mov    -0x148(%rbp),%r12
         : 1249  ./stdio-common/printf_fp.c:978
    0.00 :   5b9a6:  mov    -0x4(%r15),%edx
    0.00 :   5b9aa:  cmp    -0xc0(%rbp),%edx
    0.00 :   5b9b0:  jne    5b9b6 <__GI___printf_fp_l+0x1086>
         : 1253  ./stdio-common/printf_fp.c:978 (discriminator 2)
    0.00 :   5b9b2:  mov    -0x8(%r15),%edx
         : 1255  ./stdio-common/printf_fp.c:979 (discriminator 4)
    0.00 :   5b9b6:  mov    %r13,%rdi
    0.00 :   5b9b9:  mov    %edx,-0xe0(%rbp)
    0.00 :   5b9bf:  mov    %r9d,-0xd0(%rbp)
    0.00 :   5b9c6:  call   5a4d0 <hack_digit>
         : 1260  ./stdio-common/printf_fp.c:981 (discriminator 4)
    0.00 :   5b9cb:  mov    -0xd0(%rbp),%r9d
    0.00 :   5b9d2:  mov    -0xe0(%rbp),%edx
    0.00 :   5b9d8:  cmp    $0x30,%eax
         : 1264  ./stdio-common/printf_fp.c:979 (discriminator 4)
    0.00 :   5b9db:  mov    %eax,%esi
         : 1266  ./stdio-common/printf_fp.c:981 (discriminator 4)
    0.00 :   5b9dd:  setne  %dil
    0.00 :   5b9e1:  cmp    $0x35,%eax
    0.00 :   5b9e4:  setne  %al
    0.00 :   5b9e7:  and    %al,%dil
    0.00 :   5b9ea:  jne    5ba2b <__GI___printf_fp_l+0x10fb>
         : 1272  ./stdio-common/printf_fp.c:983
    0.00 :   5b9ec:  mov    -0x88(%rbp),%rax
    0.00 :   5b9f3:  cmp    $0x1,%rax
    0.00 :   5b9f7:  je     5ca21 <__GI___printf_fp_l+0x20f1>
         : 1276  ./stdio-common/printf_fp.c:986
    0.00 :   5b9fd:  cmpq   $0x0,-0x78(%rbp)
    0.00 :   5ba02:  jne    5ba26 <__GI___printf_fp_l+0x10f6>
         : 1279  ./stdio-common/printf_fp.c:983
    0.00 :   5ba04:  mov    -0x90(%rbp),%r10
         : 1281  ./stdio-common/printf_fp.c:991
    0.00 :   5ba0b:  test   %rax,%rax
    0.00 :   5ba0e:  jne    5ba1e <__GI___printf_fp_l+0x10ee>
    0.00 :   5ba10:  jmp    5ba2b <__GI___printf_fp_l+0x10fb>
    0.00 :   5ba12:  nopw   0x0(%rax,%rax,1)
    0.00 :   5ba18:  sub    $0x1,%rax
    0.00 :   5ba1c:  je     5ba2b <__GI___printf_fp_l+0x10fb>
         : 1288  ./stdio-common/printf_fp.c:991 (discriminator 1)
    0.00 :   5ba1e:  cmpq   $0x0,-0x8(%r10,%rax,8)
    0.00 :   5ba24:  je     5ba18 <__GI___printf_fp_l+0x10e8>
         : 1291  ./stdio-common/printf_fp.c:982
    0.00 :   5ba26:  mov    $0x1,%edi
         : 1293  get_rounding_mode():
         : 1294  ./stdio-common/../sysdeps/generic/get-rounding-mode.h:94
    0.00 :   5ba2b:  fnstcw -0xa6(%rbp)
         : 1296  ./stdio-common/../sysdeps/generic/get-rounding-mode.h:95
    0.00 :   5ba31:  movzwl -0xa6(%rbp),%eax
    0.00 :   5ba38:  and    $0xc00,%ax
    0.00 :   5ba3c:  cmp    $0x800,%ax
    0.00 :   5ba40:  je     5c75c <__GI___printf_fp_l+0x1e2c>
    0.00 :   5ba46:  ja     5c060 <__GI___printf_fp_l+0x1730>
    0.00 :   5ba4c:  test   %ax,%ax
    0.00 :   5ba4f:  jne    5c070 <__GI___printf_fp_l+0x1740>
         : 1304  round_away():
         : 1305  ./stdio-common/../include/rounding-mode.h:52
    0.00 :   5ba55:  cmp    $0x34,%esi
    0.00 :   5ba58:  jle    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5ba5a:  and    $0x1,%edx
    0.00 :   5ba5d:  jne    5c093 <__GI___printf_fp_l+0x1763>
         : 1310  ./stdio-common/../include/rounding-mode.h:58
    0.00 :   5ba63:  test   %dil,%dil
    0.00 :   5ba66:  jne    5c093 <__GI___printf_fp_l+0x1763>
    0.00 :   5ba6c:  nopl   0x0(%rax)
         : 1314  __GI___printf_fp_l():
         : 1315  ./stdio-common/printf_fp.c:1097
    0.00 :   5ba70:  cmp    %r9d,%ebx
    0.00 :   5ba73:  jg     5ba8c <__GI___printf_fp_l+0x115c>
    0.00 :   5ba75:  jmp    5ba93 <__GI___printf_fp_l+0x1163>
    0.00 :   5ba77:  nopw   0x0(%rax,%rax,1)
         : 1320  ./stdio-common/printf_fp.c:1100
    0.00 :   5ba80:  sub    $0x1,%ebx
         : 1322  ./stdio-common/printf_fp.c:1099
    0.00 :   5ba83:  sub    $0x4,%r15
         : 1324  ./stdio-common/printf_fp.c:1097
    0.00 :   5ba87:  cmp    %r9d,%ebx
    0.00 :   5ba8a:  jle    5ba93 <__GI___printf_fp_l+0x1163>
         : 1327  ./stdio-common/printf_fp.c:1097 (discriminator 1)
    0.00 :   5ba8c:  cmpl   $0x30,-0x4(%r15)
    0.00 :   5ba91:  je     5ba80 <__GI___printf_fp_l+0x1150>
         : 1330  ./stdio-common/printf_fp.c:1104
    0.00 :   5ba93:  test   %ebx,%ebx
    0.00 :   5ba95:  jne    5bab8 <__GI___printf_fp_l+0x1188>
         : 1333  ./stdio-common/printf_fp.c:1104 (discriminator 1)
    0.00 :   5ba97:  mov    -0xb8(%rbp),%rax
    0.00 :   5ba9e:  testb  $0x8,0xc(%rax)
    0.00 :   5baa2:  jne    5bab8 <__GI___printf_fp_l+0x1188>
         : 1337  ./stdio-common/printf_fp.c:1104 (discriminator 2)
    0.00 :   5baa4:  mov    -0xc0(%rbp),%eax
    0.00 :   5baaa:  cmp    %eax,-0x4(%r15)
    0.00 :   5baae:  jne    5bab8 <__GI___printf_fp_l+0x1188>
         : 1341  ./stdio-common/printf_fp.c:1105
    0.00 :   5bab0:  sub    $0x4,%r15
    0.00 :   5bab4:  nopl   0x0(%rax)
         : 1344  ./stdio-common/printf_fp.c:1107
    0.00 :   5bab8:  mov    -0xe8(%rbp),%rcx
    0.00 :   5babf:  test   %rcx,%rcx
    0.00 :   5bac2:  je     5bc1a <__GI___printf_fp_l+0x12ea>
         : 1348  ./stdio-common/printf_fp.c:1112
    0.00 :   5bac8:  mov    -0x134(%rbp),%edx
         : 1350  ./stdio-common/printf_fp.c:1111
    0.00 :   5bace:  mov    -0x118(%rbp),%eax
         : 1352  ./stdio-common/printf_fp.c:1112
    0.00 :   5bad4:  mov    %edx,%ebx
         : 1354  ./stdio-common/printf_fp.c:1111
    0.00 :   5bad6:  cmp    %eax,%edx
    0.00 :   5bad8:  je     5bb27 <__GI___printf_fp_l+0x11f7>
         : 1357  __guess_grouping():
         : 1358  ./stdio-common/printf_fp.c:1295
    0.00 :   5bada:  movl   $0x0,-0x124(%rbp)
    0.00 :   5bae4:  movzbl (%rcx),%eax
    0.00 :   5bae7:  mov    %al,-0xd0(%rbp)
    0.00 :   5baed:  sub    $0x1,%eax
    0.00 :   5baf0:  cmp    $0x7d,%al
    0.00 :   5baf2:  ja     5bc1a <__GI___printf_fp_l+0x12ea>
    0.00 :   5baf8:  mov    %rcx,%rax
         : 1366  ./stdio-common/printf_fp.c:1299
    0.00 :   5bafb:  xor    %esi,%esi
    0.00 :   5bafd:  jmp    5bb1a <__GI___printf_fp_l+0x11ea>
    0.00 :   5baff:  nop
         : 1370  ./stdio-common/printf_fp.c:1305
    0.00 :   5bb00:  movzbl 0x1(%rax),%ecx
         : 1372  ./stdio-common/printf_fp.c:1303
    0.00 :   5bb04:  add    $0x1,%rax
         : 1374  ./stdio-common/printf_fp.c:1302
    0.00 :   5bb08:  add    $0x1,%esi
         : 1376  ./stdio-common/printf_fp.c:1303
    0.00 :   5bb0b:  sub    %edi,%edx
         : 1378  ./stdio-common/printf_fp.c:1305
    0.00 :   5bb0d:  cmp    $0x7e,%cl
    0.00 :   5bb10:  ja     5bb21 <__GI___printf_fp_l+0x11f1>
         : 1381  ./stdio-common/printf_fp.c:1312
    0.00 :   5bb12:  test   %cl,%cl
    0.00 :   5bb14:  je     5ce02 <__GI___printf_fp_l+0x24d2>
         : 1384  ./stdio-common/printf_fp.c:1300
    0.00 :   5bb1a:  movsbl (%rax),%edi
    0.00 :   5bb1d:  cmp    %edi,%edx
    0.00 :   5bb1f:  ja     5bb00 <__GI___printf_fp_l+0x11d0>
         : 1388  __GI___printf_fp_l():
         : 1389  ./stdio-common/printf_fp.c:1112
    0.00 :   5bb21:  mov    %esi,-0x124(%rbp)
         : 1391  group_number():
         : 1392  ./stdio-common/printf_fp.c:1333
    0.00 :   5bb27:  mov    -0x124(%rbp),%edi
    0.00 :   5bb2d:  test   %edi,%edi
    0.00 :   5bb2f:  je     5bc1a <__GI___printf_fp_l+0x12ea>
         : 1396  ./stdio-common/printf_fp.c:1338
    0.00 :   5bb35:  movslq -0x134(%rbp),%rax
         : 1398  ./stdio-common/printf_fp.c:1337
    0.00 :   5bb3c:  movslq %edi,%r13
         : 1400  ./stdio-common/printf_fp.c:1338
    0.00 :   5bb3f:  mov    %r15,%rdx
    0.00 :   5bb42:  lea    (%r14,%rax,4),%rsi
         : 1403  ./stdio-common/printf_fp.c:1337
    0.00 :   5bb46:  add    %r13,%rax
    0.00 :   5bb49:  lea    0x0(,%rax,4),%rcx
         : 1406  ./stdio-common/printf_fp.c:1338
    0.00 :   5bb51:  sub    %rsi,%rdx
         : 1408  ./stdio-common/printf_fp.c:1337
    0.00 :   5bb54:  lea    (%r14,%rcx,1),%rdi
         : 1410  ./stdio-common/printf_fp.c:1338
    0.00 :   5bb58:  sar    $0x2,%rdx
         : 1412  ./stdio-common/printf_fp.c:1337
    0.00 :   5bb5c:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5bb63:  call   c5af0 <wmemmove>
         : 1415  ./stdio-common/printf_fp.c:1340
    0.00 :   5bb68:  mov    -0xd0(%rbp),%rcx
    0.00 :   5bb6f:  mov    -0x114(%rbp),%r8d
    0.00 :   5bb76:  lea    -0x4(%r14,%rcx,1),%rdi
    0.00 :   5bb7b:  mov    -0xe8(%rbp),%rcx
    0.00 :   5bb82:  movsbl (%rcx),%r9d
    0.00 :   5bb86:  cs nopw 0x0(%rax,%rax,1)
         : 1422  ./stdio-common/printf_fp.c:1343
    0.00 :   5bb90:  mov    %ebx,%esi
    0.00 :   5bb92:  mov    %rdi,%rax
    0.00 :   5bb95:  sub    %r9d,%esi
    0.00 :   5bb98:  nopl   0x0(%rax,%rax,1)
         : 1427  ./stdio-common/printf_fp.c:1345
    0.00 :   5bba0:  lea    -0x1(%rbx),%edx
    0.00 :   5bba3:  sub    $0x4,%rax
    0.00 :   5bba7:  mov    %rdx,%rbx
    0.00 :   5bbaa:  mov    (%r14,%rdx,4),%edx
    0.00 :   5bbae:  mov    %edx,0x4(%rax)
         : 1433  ./stdio-common/printf_fp.c:1346
    0.00 :   5bbb1:  cmp    %esi,%ebx
    0.00 :   5bbb3:  jne    5bba0 <__GI___printf_fp_l+0x1270>
    0.00 :   5bbb5:  lea    -0x1(%r9),%eax
    0.00 :   5bbb9:  neg    %rax
    0.00 :   5bbbc:  shl    $0x2,%rax
         : 1439  ./stdio-common/printf_fp.c:1345
    0.00 :   5bbc0:  lea    -0x4(%rdi,%rax,1),%rdx
         : 1441  ./stdio-common/printf_fp.c:1347
    0.00 :   5bbc5:  lea    -0x8(%rdi,%rax,1),%rdi
    0.00 :   5bbca:  mov    %r8d,(%rdx)
         : 1444  ./stdio-common/printf_fp.c:1349
    0.00 :   5bbcd:  movsbl 0x1(%rcx),%r9d
    0.00 :   5bbd2:  cmp    $0x7e,%r9b
    0.00 :   5bbd6:  ja     5bc00 <__GI___printf_fp_l+0x12d0>
         : 1448  ./stdio-common/printf_fp.c:1356
    0.00 :   5bbd8:  test   %r9b,%r9b
    0.00 :   5bbdb:  je     5bbf0 <__GI___printf_fp_l+0x12c0>
         : 1451  ./stdio-common/printf_fp.c:1343
    0.00 :   5bbdd:  add    $0x1,%rcx
         : 1453  ./stdio-common/printf_fp.c:1359
    0.00 :   5bbe1:  cmp    %esi,%r9d
    0.00 :   5bbe4:  jae    5bc00 <__GI___printf_fp_l+0x12d0>
         : 1456  __guess_grouping():
         : 1457  ./stdio-common/printf_fp.c:1299
    0.00 :   5bbe6:  mov    %esi,%ebx
    0.00 :   5bbe8:  jmp    5bb90 <__GI___printf_fp_l+0x1260>
    0.00 :   5bbea:  nopw   0x0(%rax,%rax,1)
         : 1461  group_number():
         : 1462  ./stdio-common/printf_fp.c:1359
    0.00 :   5bbf0:  movsbl (%rcx),%r9d
    0.00 :   5bbf4:  cmp    %esi,%r9d
    0.00 :   5bbf7:  jb     5bbe6 <__GI___printf_fp_l+0x12b6>
    0.00 :   5bbf9:  nopl   0x0(%rax)
         : 1467  ./stdio-common/printf_fp.c:1363
    0.00 :   5bc00:  lea    -0x1(%rsi),%eax
    0.00 :   5bc03:  sub    $0x4,%rdi
    0.00 :   5bc07:  mov    %rax,%rsi
    0.00 :   5bc0a:  mov    (%r14,%rax,4),%eax
    0.00 :   5bc0e:  mov    %eax,0x4(%rdi)
         : 1473  ./stdio-common/printf_fp.c:1364
    0.00 :   5bc11:  cmp    %r14,%rdi
    0.00 :   5bc14:  ja     5bc00 <__GI___printf_fp_l+0x12d0>
         : 1476  ./stdio-common/printf_fp.c:1366
    0.00 :   5bc16:  lea    (%r15,%r13,4),%r15
         : 1478  __GI___printf_fp_l():
         : 1479  ./stdio-common/printf_fp.c:1120
    0.00 :   5bc1a:  mov    -0x9c(%rbp),%edx
    0.00 :   5bc20:  cmp    $0x66,%edx
    0.00 :   5bc23:  je     5bcb3 <__GI___printf_fp_l+0x1383>
         : 1483  ./stdio-common/printf_fp.c:1122
    0.00 :   5bc29:  mov    -0xa0(%rbp),%ecx
    0.00 :   5bc2f:  mov    -0x98(%rbp),%eax
         : 1486  ./stdio-common/printf_fp.c:1142
    0.00 :   5bc35:  mov    $0x2b,%edi
         : 1488  ./stdio-common/printf_fp.c:1122
    0.00 :   5bc3a:  test   %ecx,%ecx
    0.00 :   5bc3c:  jne    5d037 <__GI___printf_fp_l+0x2707>
         : 1491  ./stdio-common/printf_fp.c:1141 (discriminator 4)
    0.00 :   5bc42:  movd   %edx,%xmm0
    0.00 :   5bc46:  movd   %edi,%xmm3
         : 1494  ./stdio-common/printf_fp.c:1142 (discriminator 4)
    0.00 :   5bc4a:  lea    0x8(%r15),%rsi
         : 1496  ./stdio-common/printf_fp.c:1141 (discriminator 4)
    0.00 :   5bc4e:  punpckldq %xmm3,%xmm0
    0.00 :   5bc52:  movq   %xmm0,(%r15)
         : 1499  ./stdio-common/printf_fp.c:1146 (discriminator 4)
    0.00 :   5bc57:  cmp    $0x9,%eax
    0.00 :   5bc5a:  jle    5c33d <__GI___printf_fp_l+0x1a0d>
         : 1502  ./stdio-common/printf_fp.c:1145
    0.00 :   5bc60:  mov    $0xa,%ecx
    0.00 :   5bc65:  nopl   (%rax)
         : 1505  ./stdio-common/printf_fp.c:1147
    0.00 :   5bc68:  lea    (%rcx,%rcx,4),%ecx
    0.00 :   5bc6b:  add    %ecx,%ecx
         : 1508  ./stdio-common/printf_fp.c:1146
    0.00 :   5bc6d:  cmp    %eax,%ecx
    0.00 :   5bc6f:  jle    5bc68 <__GI___printf_fp_l+0x1338>
    0.00 :   5bc71:  nopl   0x0(%rax)
         : 1512  ./stdio-common/printf_fp.c:1155 (discriminator 1)
    0.00 :   5bc78:  movslq %ecx,%rcx
         : 1514  ./stdio-common/printf_fp.c:1156 (discriminator 1)
    0.00 :   5bc7b:  add    $0x4,%rsi
    0.00 :   5bc7f:  mov    %rcx,%rdi
         : 1517  ./stdio-common/printf_fp.c:1155 (discriminator 1)
    0.00 :   5bc82:  imul   $0x66666667,%rcx,%rcx
    0.00 :   5bc89:  mov    %edi,%edx
    0.00 :   5bc8b:  sar    $0x1f,%edx
    0.00 :   5bc8e:  sar    $0x22,%rcx
    0.00 :   5bc92:  sub    %edx,%ecx
         : 1523  ./stdio-common/printf_fp.c:1156 (discriminator 1)
    0.00 :   5bc94:  cltd
    0.00 :   5bc95:  idiv   %ecx
    0.00 :   5bc97:  add    $0x30,%eax
    0.00 :   5bc9a:  mov    %eax,-0x4(%rsi)
         : 1528  ./stdio-common/printf_fp.c:1157 (discriminator 1)
    0.00 :   5bc9d:  mov    %edx,%eax
         : 1530  ./stdio-common/printf_fp.c:1159 (discriminator 1)
    0.00 :   5bc9f:  cmp    $0x6d,%edi
    0.00 :   5bca2:  jg     5bc78 <__GI___printf_fp_l+0x1348>
    0.00 :   5bca4:  mov    %edx,-0x98(%rbp)
         : 1534  ./stdio-common/printf_fp.c:1160
    0.00 :   5bcaa:  add    $0x30,%eax
    0.00 :   5bcad:  lea    0x4(%rsi),%r15
    0.00 :   5bcb1:  mov    %eax,(%rsi)
         : 1538  ./stdio-common/printf_fp.c:1166
    0.00 :   5bcb3:  mov    -0xb8(%rbp),%rcx
    0.00 :   5bcba:  mov    -0xa4(%rbp),%eax
         : 1541  ./stdio-common/printf_fp.c:1168
    0.00 :   5bcc0:  mov    %r15,%rbx
    0.00 :   5bcc3:  sub    %r14,%rbx
         : 1544  ./stdio-common/printf_fp.c:1166
    0.00 :   5bcc6:  movzbl 0xc(%rcx),%edx
    0.00 :   5bcca:  test   %eax,%eax
    0.00 :   5bccc:  jne    5c138 <__GI___printf_fp_l+0x1808>
         : 1548  ./stdio-common/printf_fp.c:1166 (discriminator 1)
    0.00 :   5bcd2:  test   $0x50,%dl
    0.00 :   5bcd5:  jne    5c138 <__GI___printf_fp_l+0x1808>
         : 1551  ./stdio-common/printf_fp.c:1168
    0.00 :   5bcdb:  mov    -0x138(%rbp),%edi
    0.00 :   5bce1:  mov    %rbx,%rax
    0.00 :   5bce4:  sar    $0x2,%rax
    0.00 :   5bce8:  sub    %eax,%edi
    0.00 :   5bcea:  mov    %edi,-0xd0(%rbp)
         : 1557  ./stdio-common/printf_fp.c:1170
    0.00 :   5bcf0:  test   $0x20,%dl
    0.00 :   5bcf3:  jne    5c903 <__GI___printf_fp_l+0x1fd3>
    0.00 :   5bcf9:  mov    0x10(%rcx),%esi
    0.00 :   5bcfc:  cmp    $0x30,%esi
    0.00 :   5bcff:  je     5c903 <__GI___printf_fp_l+0x1fd3>
    0.00 :   5bd05:  mov    -0xd0(%rbp),%eax
    0.00 :   5bd0b:  test   %eax,%eax
    0.00 :   5bd0d:  jle    5c903 <__GI___printf_fp_l+0x1fd3>
         : 1566  ./stdio-common/printf_fp.c:1171
    0.00 :   5bd13:  movslq -0xd0(%rbp),%r13
    0.00 :   5bd1a:  mov    -0xbc(%rbp),%eax
    0.00 :   5bd20:  mov    %r12,%rdi
    0.00 :   5bd23:  mov    %r13,%rdx
    0.00 :   5bd26:  test   %eax,%eax
    0.00 :   5bd28:  je     5ce9b <__GI___printf_fp_l+0x256b>
         : 1573  ./stdio-common/printf_fp.c:1171 (discriminator 1)
    0.00 :   5bd2e:  call   824e0 <_IO_wpadn>
         : 1575  ./stdio-common/printf_fp.c:1171 (discriminator 4)
    0.00 :   5bd33:  cmp    %r13,%rax
    0.00 :   5bd36:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
         : 1578  ./stdio-common/printf_fp.c:1173
    0.00 :   5bd3c:  mov    -0xa4(%rbp),%eax
    0.00 :   5bd42:  mov    -0xd0(%rbp),%r9d
         : 1581  ./stdio-common/printf_fp.c:1173 (discriminator 10)
    0.00 :   5bd49:  test   %eax,%eax
    0.00 :   5bd4b:  je     5c360 <__GI___printf_fp_l+0x1a30>
         : 1584  ./stdio-common/printf_fp.c:1174
    0.00 :   5bd51:  mov    -0xbc(%rbp),%r11d
    0.00 :   5bd58:  test   %r11d,%r11d
    0.00 :   5bd5b:  je     5c6f0 <__GI___printf_fp_l+0x1dc0>
         : 1588  ./stdio-common/printf_fp.c:1174 (discriminator 1)
    0.00 :   5bd61:  mov    0xa0(%r12),%rax
    0.00 :   5bd69:  test   %rax,%rax
    0.00 :   5bd6c:  je     5b6c3 <__GI___printf_fp_l+0xd93>
         : 1592  ./stdio-common/printf_fp.c:1174 (discriminator 4)
    0.00 :   5bd72:  mov    0x20(%rax),%rdx
    0.00 :   5bd76:  cmp    0x28(%rax),%rdx
    0.00 :   5bd7a:  jae    5b6c3 <__GI___printf_fp_l+0xd93>
         : 1596  ./stdio-common/printf_fp.c:1174 (discriminator 6)
    0.00 :   5bd80:  lea    0x4(%rdx),%rsi
    0.00 :   5bd84:  mov    %rsi,0x20(%rax)
    0.00 :   5bd88:  movl   $0x2d,(%rdx)
         : 1600  ./stdio-common/printf_fp.c:1180 (discriminator 16)
    0.00 :   5bd8e:  mov    -0xb8(%rbp),%rax
         : 1602  ./stdio-common/printf_fp.c:1178 (discriminator 16)
    0.00 :   5bd95:  add    $0x1,%r9d
         : 1604  ./stdio-common/printf_fp.c:1180 (discriminator 16)
    0.00 :   5bd99:  movzbl 0xc(%rax),%eax
         : 1606  ./stdio-common/printf_fp.c:1180 (discriminator 20)
    0.00 :   5bd9d:  test   $0x20,%al
    0.00 :   5bd9f:  jne    5bdbc <__GI___printf_fp_l+0x148c>
         : 1609  ./stdio-common/printf_fp.c:1180 (discriminator 1)
    0.00 :   5bda1:  mov    -0xb8(%rbp),%rax
    0.00 :   5bda8:  cmpl   $0x30,0x10(%rax)
    0.00 :   5bdac:  jne    5bdbc <__GI___printf_fp_l+0x148c>
    0.00 :   5bdae:  mov    -0xd0(%rbp),%edi
    0.00 :   5bdb4:  test   %edi,%edi
    0.00 :   5bdb6:  jg     5ce16 <__GI___printf_fp_l+0x24e6>
         : 1616  ./stdio-common/printf_fp.c:1188 (discriminator 10)
    0.00 :   5bdbc:  mov    -0xbc(%rbp),%ecx
         : 1618  ./stdio-common/printf_fp.c:1195 (discriminator 10)
    0.00 :   5bdc2:  mov    -0xb8(%rbp),%rax
         : 1620  ./stdio-common/printf_fp.c:1188 (discriminator 10)
    0.00 :   5bdc9:  test   %ecx,%ecx
    0.00 :   5bdcb:  jne    5c208 <__GI___printf_fp_l+0x18d8>
         : 1623  ./stdio-common/printf_fp.c:1195
    0.00 :   5bdd1:  testb  $0x8,0xd(%rax)
    0.00 :   5bdd5:  je     5bdf6 <__GI___printf_fp_l+0x14c6>
         : 1626  _nl_lookup_word():
         : 1627  ./stdio-common/../include/../locale/localeinfo.h:330
    0.00 :   5bdd7:  mov    -0xf8(%rbp),%rax
    0.00 :   5bdde:  mov    (%rax),%rax
         : 1630  __GI___printf_fp_l():
         : 1631  ./stdio-common/printf_fp.c:1196
    0.00 :   5bde1:  mov    0xa8(%rax),%eax
         : 1633  ./stdio-common/printf_fp.c:1207
    0.00 :   5bde7:  imul   -0x120(%rbp),%rax
    0.00 :   5bdef:  mov    %rax,-0x120(%rbp)
         : 1636  ./stdio-common/printf_fp.c:1200
    0.00 :   5bdf6:  mov    -0x108(%rbp),%rdi
    0.00 :   5bdfd:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5be04:  call   28490 <*ABS*+0xa86a0@plt>
         : 1640  ./stdio-common/printf_fp.c:1202
    0.00 :   5be09:  mov    -0x110(%rbp),%rdi
    0.00 :   5be10:  mov    -0xe0(%rbp),%r9d
         : 1643  ./stdio-common/printf_fp.c:1200
    0.00 :   5be17:  mov    %rax,%rbx
         : 1645  ./stdio-common/printf_fp.c:1202
    0.00 :   5be1a:  test   %rdi,%rdi
    0.00 :   5be1d:  je     5cba8 <__GI___printf_fp_l+0x2278>
         : 1648  ./stdio-common/printf_fp.c:1205
    0.00 :   5be23:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   5be28:  mov    -0xe0(%rbp),%r9d
    0.00 :   5be2f:  mov    %rax,%r13
         : 1652  ./stdio-common/printf_fp.c:1208
    0.00 :   5be32:  movslq -0x124(%rbp),%rax
    0.00 :   5be39:  imul   %r13,%rax
         : 1655  ./stdio-common/printf_fp.c:1207
    0.00 :   5be3d:  mov    -0x120(%rbp),%rdi
    0.00 :   5be44:  lea    0x2(%rdi,%rbx,1),%rdx
    0.00 :   5be49:  add    %rdx,%rax
         : 1659  ./stdio-common/printf_fp.c:1209
    0.00 :   5be4c:  mov    -0x140(%rbp),%edx
         : 1661  ./stdio-common/printf_fp.c:1207
    0.00 :   5be52:  mov    %rax,-0xf0(%rbp)
         : 1663  ./stdio-common/printf_fp.c:1209
    0.00 :   5be59:  test   %edx,%edx
    0.00 :   5be5b:  jne    5d14c <__GI___printf_fp_l+0x281c>
         : 1666  ./stdio-common/printf_fp.c:1220
    0.00 :   5be61:  add    $0x17,%rax
    0.00 :   5be65:  mov    %rsp,%rsi
    0.00 :   5be68:  mov    %rax,%rdx
    0.00 :   5be6b:  and    $0xfffffffffffff000,%rax
    0.00 :   5be71:  sub    %rax,%rsi
    0.00 :   5be74:  and    $0xfffffffffffffff0,%rdx
    0.00 :   5be78:  cmp    %rsi,%rsp
    0.00 :   5be7b:  je     5be92 <__GI___printf_fp_l+0x1562>
    0.00 :   5be7d:  sub    $0x1000,%rsp
    0.00 :   5be84:  orq    $0x0,0xff8(%rsp)
    0.00 :   5be8d:  cmp    %rsi,%rsp
    0.00 :   5be90:  jne    5be7d <__GI___printf_fp_l+0x154d>
    0.00 :   5be92:  and    $0xfff,%edx
    0.00 :   5be98:  sub    %rdx,%rsp
    0.00 :   5be9b:  test   %rdx,%rdx
    0.00 :   5be9e:  je     5bea6 <__GI___printf_fp_l+0x1576>
    0.00 :   5bea0:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   5bea6:  lea    0xf(%rsp),%rax
    0.00 :   5beab:  and    $0xfffffffffffffff0,%rax
    0.00 :   5beaf:  mov    %rax,-0xe0(%rbp)
         : 1687  ./stdio-common/printf_fp.c:1227
    0.00 :   5beb6:  cmp    %r14,%r15
    0.00 :   5beb9:  jbe    5d0b5 <__GI___printf_fp_l+0x2785>
    0.00 :   5bebf:  mov    %r13,-0xe8(%rbp)
    0.00 :   5bec6:  mov    -0xe0(%rbp),%rdi
    0.00 :   5becd:  mov    %r12,-0x100(%rbp)
    0.00 :   5bed4:  mov    -0x114(%rbp),%r13d
    0.00 :   5bedb:  mov    %r15,%r12
    0.00 :   5bede:  mov    %r14,%r15
    0.00 :   5bee1:  mov    %r9d,-0xf8(%rbp)
    0.00 :   5bee8:  mov    %rbx,%r14
    0.00 :   5beeb:  mov    -0xc0(%rbp),%ebx
    0.00 :   5bef1:  jmp    5bf10 <__GI___printf_fp_l+0x15e0>
    0.00 :   5bef3:  nopl   0x0(%rax,%rax,1)
         : 1701  ./stdio-common/printf_fp.c:1230
    0.00 :   5bef8:  cmp    %edx,%r13d
    0.00 :   5befb:  je     5c180 <__GI___printf_fp_l+0x1850>
         : 1704  ./stdio-common/printf_fp.c:1233
    0.00 :   5bf01:  mov    %dl,(%rdi)
    0.00 :   5bf03:  add    $0x1,%rdi
         : 1707  ./stdio-common/printf_fp.c:1227 (discriminator 2)
    0.00 :   5bf07:  add    $0x4,%r15
    0.00 :   5bf0b:  cmp    %r15,%r12
    0.00 :   5bf0e:  jbe    5bf32 <__GI___printf_fp_l+0x1602>
         : 1711  ./stdio-common/printf_fp.c:1228
    0.00 :   5bf10:  mov    (%r15),%edx
    0.00 :   5bf13:  cmp    %ebx,%edx
    0.00 :   5bf15:  jne    5bef8 <__GI___printf_fp_l+0x15c8>
         : 1715  ./stdio-common/printf_fp.c:1229
    0.00 :   5bf17:  mov    -0x108(%rbp),%rsi
    0.00 :   5bf1e:  mov    %r14,%rdx
         : 1718  ./stdio-common/printf_fp.c:1227
    0.00 :   5bf21:  add    $0x4,%r15
         : 1720  ./stdio-common/printf_fp.c:1229
    0.00 :   5bf25:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   5bf2a:  mov    %rax,%rdi
         : 1723  ./stdio-common/printf_fp.c:1227
    0.00 :   5bf2d:  cmp    %r15,%r12
    0.00 :   5bf30:  ja     5bf10 <__GI___printf_fp_l+0x15e0>
         : 1726  ./stdio-common/printf_fp.c:1237
    0.00 :   5bf32:  mov    -0xb8(%rbp),%rax
    0.00 :   5bf39:  mov    -0xf8(%rbp),%r9d
    0.00 :   5bf40:  mov    -0x100(%rbp),%r12
    0.00 :   5bf47:  testb  $0x8,0xd(%rax)
    0.00 :   5bf4b:  jne    5d0e5 <__GI___printf_fp_l+0x27b5>
    0.00 :   5bf51:  mov    -0xe0(%rbp),%r14
         : 1733  ./stdio-common/printf_fp.c:1254 (discriminator 2)
    0.00 :   5bf58:  sub    %r14,%rdi
    0.00 :   5bf5b:  mov    %rdi,%rbx
    0.00 :   5bf5e:  mov    %rdi,%r8
    0.00 :   5bf61:  cmp    $0x14,%rdi
    0.00 :   5bf65:  jle    5c7ad <__GI___printf_fp_l+0x1e7d>
         : 1739  ./stdio-common/printf_fp.c:1254
    0.00 :   5bf6b:  mov    0xd8(%r12),%rbx
         : 1741  IO_validate_vtable():
         : 1742  ./stdio-common/../libio/libioP.h:940
    0.00 :   5bf73:  lea    0x1baa86(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   5bf7a:  lea    0x1bb7e7(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   5bf81:  sub    %rdx,%rax
         : 1746  ./stdio-common/../libio/libioP.h:942
    0.00 :   5bf84:  mov    %rbx,%rcx
    0.00 :   5bf87:  sub    %rdx,%rcx
         : 1749  ./stdio-common/../libio/libioP.h:943
    0.00 :   5bf8a:  cmp    %rcx,%rax
    0.00 :   5bf8d:  jbe    5d2f0 <__GI___printf_fp_l+0x29c0>
         : 1752  __GI___printf_fp_l():
         : 1753  ./stdio-common/printf_fp.c:1254
    0.00 :   5bf93:  mov    0x38(%rbx),%rax
    0.00 :   5bf97:  mov    %r9d,-0xf0(%rbp)
         : 1756  ./stdio-common/printf_fp.c:1254 (discriminator 14)
    0.00 :   5bf9e:  mov    %r8,%rdx
    0.00 :   5bfa1:  mov    %r14,%rsi
    0.00 :   5bfa4:  mov    %r12,%rdi
    0.00 :   5bfa7:  mov    %r8,-0xe8(%rbp)
    0.00 :   5bfae:  call   *%rax
    0.00 :   5bfb0:  mov    -0xe8(%rbp),%r8
    0.00 :   5bfb7:  mov    -0xf0(%rbp),%r9d
    0.00 :   5bfbe:  cmp    %r8,%rax
    0.00 :   5bfc1:  jne    5d443 <__GI___printf_fp_l+0x2b13>
         : 1766  ./stdio-common/printf_fp.c:1254
    0.00 :   5bfc7:  lea    (%r9,%r8,1),%r13d
         : 1768  ./stdio-common/printf_fp.c:1257 (discriminator 65)
    0.00 :   5bfcb:  mov    -0x140(%rbp),%r14d
    0.00 :   5bfd2:  test   %r14d,%r14d
    0.00 :   5bfd5:  jne    5cfc3 <__GI___printf_fp_l+0x2693>
         : 1772  ./stdio-common/printf_fp.c:1268
    0.00 :   5bfdb:  mov    -0xb8(%rbp),%rax
    0.00 :   5bfe2:  testb  $0x20,0xc(%rax)
    0.00 :   5bfe6:  je     5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5bfec:  mov    -0xd0(%rbp),%ecx
    0.00 :   5bff2:  test   %ecx,%ecx
    0.00 :   5bff4:  jle    5aed8 <__GI___printf_fp_l+0x5a8>
         : 1779  ./stdio-common/printf_fp.c:1269
    0.00 :   5bffa:  mov    %r12,%rdi
    0.00 :   5bffd:  mov    -0xbc(%rbp),%r12d
         : 1782  ./stdio-common/printf_fp.c:1171
    0.00 :   5c004:  movslq %ecx,%rbx
         : 1784  ./stdio-common/printf_fp.c:1269
    0.00 :   5c007:  mov    0x10(%rax),%esi
    0.00 :   5c00a:  mov    %rbx,%rdx
    0.00 :   5c00d:  test   %r12d,%r12d
    0.00 :   5c010:  je     5cd61 <__GI___printf_fp_l+0x2431>
         : 1789  ./stdio-common/printf_fp.c:1269 (discriminator 1)
    0.00 :   5c016:  call   824e0 <_IO_wpadn>
         : 1791  ./stdio-common/printf_fp.c:1269 (discriminator 4)
    0.00 :   5c01b:  cmp    %rbx,%rax
    0.00 :   5c01e:  jne    5d443 <__GI___printf_fp_l+0x2b13>
         : 1794  ./stdio-common/printf_fp.c:1269 (discriminator 6)
    0.00 :   5c024:  add    -0xd0(%rbp),%r13d
    0.00 :   5c02b:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
         : 1797  ./stdio-common/printf_fp.c:972
    0.00 :   5c030:  mov    -0xf0(%rbp),%eax
         : 1799  ./stdio-common/printf_fp.c:971
    0.00 :   5c036:  addl   $0x1,-0xe0(%rbp)
         : 1801  ./stdio-common/printf_fp.c:972
    0.00 :   5c03d:  test   %eax,%eax
    0.00 :   5c03f:  jle    5b623 <__GI___printf_fp_l+0xcf3>
         : 1804  ./stdio-common/printf_fp.c:973
    0.00 :   5c045:  addl   $0x1,-0x100(%rbp)
    0.00 :   5c04c:  mov    -0x100(%rbp),%edi
    0.00 :   5c052:  add    %edi,%eax
    0.00 :   5c054:  mov    %eax,-0xd0(%rbp)
    0.00 :   5c05a:  jmp    5b623 <__GI___printf_fp_l+0xcf3>
    0.00 :   5c05f:  nop
         : 1811  get_rounding_mode():
         : 1812  ./stdio-common/../sysdeps/generic/get-rounding-mode.h:95
    0.00 :   5c060:  cmp    $0xc00,%ax
    0.00 :   5c064:  je     5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c06a:  jmp    28961 <__GI___printf_fp_l.cold>
    0.00 :   5c06f:  nop
    0.00 :   5c070:  cmp    $0x400,%ax
    0.00 :   5c074:  jne    5d51a <__GI___printf_fp_l+0x2bea>
         : 1819  round_away():
         : 1820  ./stdio-common/../include/rounding-mode.h:49
    0.00 :   5c07a:  mov    -0xa4(%rbp),%r8d
    0.00 :   5c081:  test   %r8d,%r8d
    0.00 :   5c084:  je     5ba70 <__GI___printf_fp_l+0x1140>
         : 1824  ./stdio-common/../include/rounding-mode.h:58
    0.00 :   5c08a:  cmp    $0x34,%esi
    0.00 :   5c08d:  jle    5ba63 <__GI___printf_fp_l+0x1133>
         : 1827  __GI___printf_fp_l():
         : 1828  ./stdio-common/printf_fp.c:1008
    0.00 :   5c093:  mov    -0x4(%r15),%esi
         : 1830  ./stdio-common/printf_fp.c:1003
    0.00 :   5c097:  test   %ebx,%ebx
    0.00 :   5c099:  je     5c2ee <__GI___printf_fp_l+0x19be>
    0.00 :   5c09f:  mov    -0xc0(%rbp),%edx
         : 1834  ./stdio-common/printf_fp.c:1008
    0.00 :   5c0a5:  lea    -0x4(%r15),%rax
         : 1836  ./stdio-common/printf_fp.c:1007
    0.00 :   5c0a9:  xor    %edi,%edi
         : 1838  ./stdio-common/printf_fp.c:1008
    0.00 :   5c0ab:  cmp    %esi,-0xc0(%rbp)
    0.00 :   5c0b1:  jne    5c0d8 <__GI___printf_fp_l+0x17a8>
    0.00 :   5c0b3:  jmp    5cca9 <__GI___printf_fp_l+0x2379>
    0.00 :   5c0b8:  nopl   0x0(%rax,%rax,1)
         : 1843  ./stdio-common/printf_fp.c:1010
    0.00 :   5c0c0:  movl   $0x30,(%rax)
         : 1845  ./stdio-common/printf_fp.c:1008
    0.00 :   5c0c6:  mov    -0x4(%rax),%esi
    0.00 :   5c0c9:  sub    $0x4,%rax
         : 1848  ./stdio-common/printf_fp.c:1011
    0.00 :   5c0cd:  add    $0x1,%edi
         : 1850  ./stdio-common/printf_fp.c:1008
    0.00 :   5c0d0:  cmp    %edx,%esi
    0.00 :   5c0d2:  je     5cca9 <__GI___printf_fp_l+0x2379>
         : 1853  ./stdio-common/printf_fp.c:1008 (discriminator 1)
    0.00 :   5c0d8:  cmp    $0x39,%esi
    0.00 :   5c0db:  je     5c0c0 <__GI___printf_fp_l+0x1790>
         : 1856  ./stdio-common/printf_fp.c:1013
    0.00 :   5c0dd:  cmp    -0xf0(%rbp),%edi
    0.00 :   5c0e3:  jne    5c113 <__GI___printf_fp_l+0x17e3>
    0.00 :   5c0e5:  mov    -0x100(%rbp),%r10d
    0.00 :   5c0ec:  test   %r10d,%r10d
    0.00 :   5c0ef:  jle    5c113 <__GI___printf_fp_l+0x17e3>
         : 1862  ./stdio-common/printf_fp.c:1014
    0.00 :   5c0f1:  subl   $0x1,-0x100(%rbp)
    0.00 :   5c0f8:  mov    -0x100(%rbp),%edi
         : 1865  ./stdio-common/printf_fp.c:1015
    0.00 :   5c0fe:  cmp    -0xc0(%rbp),%esi
    0.00 :   5c104:  je     5ccc1 <__GI___printf_fp_l+0x2391>
         : 1868  ./stdio-common/printf_fp.c:1097
    0.00 :   5c10a:  add    -0xf0(%rbp),%edi
    0.00 :   5c110:  mov    %edi,%r9d
         : 1871  ./stdio-common/printf_fp.c:1017
    0.00 :   5c113:  add    $0x1,%esi
    0.00 :   5c116:  mov    %esi,(%rax)
         : 1874  ./stdio-common/printf_fp.c:1028
    0.00 :   5c118:  cmp    %esi,-0xc0(%rbp)
    0.00 :   5c11e:  je     5c2f1 <__GI___printf_fp_l+0x19c1>
         : 1877  ./stdio-common/printf_fp.c:1097
    0.00 :   5c124:  cmp    %r9d,%ebx
    0.00 :   5c127:  jg     5ba8c <__GI___printf_fp_l+0x115c>
    0.00 :   5c12d:  jmp    5bab8 <__GI___printf_fp_l+0x1188>
    0.00 :   5c132:  nopw   0x0(%rax,%rax,1)
         : 1882  ./stdio-common/printf_fp.c:1167
    0.00 :   5c138:  mov    -0x138(%rbp),%edi
         : 1884  ./stdio-common/printf_fp.c:1168
    0.00 :   5c13e:  mov    %rbx,%rsi
    0.00 :   5c141:  sar    $0x2,%rsi
         : 1887  ./stdio-common/printf_fp.c:1167
    0.00 :   5c145:  sub    $0x1,%edi
         : 1889  ./stdio-common/printf_fp.c:1168
    0.00 :   5c148:  sub    %esi,%edi
         : 1891  ./stdio-common/printf_fp.c:1170
    0.00 :   5c14a:  and    $0x20,%edx
         : 1893  ./stdio-common/printf_fp.c:1168
    0.00 :   5c14d:  mov    %edi,-0xd0(%rbp)
         : 1895  ./stdio-common/printf_fp.c:1170
    0.00 :   5c153:  jne    5c170 <__GI___printf_fp_l+0x1840>
         : 1897  ./stdio-common/printf_fp.c:1170 (discriminator 1)
    0.00 :   5c155:  mov    -0xb8(%rbp),%rsi
    0.00 :   5c15c:  mov    0x10(%rsi),%esi
    0.00 :   5c15f:  test   %edi,%edi
    0.00 :   5c161:  jle    5c170 <__GI___printf_fp_l+0x1840>
    0.00 :   5c163:  cmp    $0x30,%esi
    0.00 :   5c166:  jne    5bd13 <__GI___printf_fp_l+0x13e3>
    0.00 :   5c16c:  nopl   0x0(%rax)
         : 1905  ./stdio-common/printf_fp.c:260
    0.00 :   5c170:  xor    %r9d,%r9d
    0.00 :   5c173:  jmp    5bd49 <__GI___printf_fp_l+0x1419>
    0.00 :   5c178:  nopl   0x0(%rax,%rax,1)
         : 1909  ./stdio-common/printf_fp.c:1231
    0.00 :   5c180:  mov    -0xe8(%rbp),%rdx
    0.00 :   5c187:  mov    -0x110(%rbp),%rsi
    0.00 :   5c18e:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   5c193:  mov    %rax,%rdi
    0.00 :   5c196:  jmp    5bf07 <__GI___printf_fp_l+0x15d7>
         : 1915  ./stdio-common/printf_fp.c:649
    0.00 :   5c19b:  test   %ecx,%ecx
    0.00 :   5c19d:  js     5c47a <__GI___printf_fp_l+0x1b4a>
         : 1918  ./stdio-common/printf_fp.c:825
    0.00 :   5c1a3:  mov    %r13,%rdx
    0.00 :   5c1a6:  add    %r14d,%ecx
    0.00 :   5c1a9:  mov    %r15,%rsi
    0.00 :   5c1ac:  call   54d10 <__mpn_lshift>
    0.00 :   5c1b1:  mov    %rax,%r8
         : 1924  ./stdio-common/printf_fp.c:826
    0.00 :   5c1b4:  mov    -0x88(%rbp),%rax
    0.00 :   5c1bb:  lea    0x1(%rax),%rdx
    0.00 :   5c1bf:  mov    %rdx,-0x88(%rbp)
    0.00 :   5c1c6:  mov    -0x90(%rbp),%rdx
    0.00 :   5c1cd:  mov    %r8,(%rdx,%rax,8)
         : 1930  ./stdio-common/printf_fp.c:827
    0.00 :   5c1d1:  movl   $0x0,-0x98(%rbp)
    0.00 :   5c1db:  jmp    5b348 <__GI___printf_fp_l+0xa18>
         : 1933  ./stdio-common/printf_fp.c:551 (discriminator 2)
    0.00 :   5c1e0:  mov    -0x70(%rbp),%rsi
    0.00 :   5c1e4:  mov    -0x90(%rbp),%rdi
    0.00 :   5c1eb:  call   54620 <__mpn_cmp>
         : 1937  ./stdio-common/printf_fp.c:554 (discriminator 2)
    0.00 :   5c1f0:  mov    -0x68(%rbp),%rdx
         : 1939  ./stdio-common/printf_fp.c:551 (discriminator 2)
    0.00 :   5c1f4:  test   %eax,%eax
    0.00 :   5c1f6:  jns    5b270 <__GI___printf_fp_l+0x940>
    0.00 :   5c1fc:  jmp    5b1f7 <__GI___printf_fp_l+0x8c7>
    0.00 :   5c201:  nopl   0x0(%rax)
         : 1944  ./stdio-common/printf_fp.c:1237
    0.00 :   5c208:  testb  $0x8,0xd(%rax)
    0.00 :   5c20c:  jne    5d12e <__GI___printf_fp_l+0x27fe>
         : 1947  ./stdio-common/printf_fp.c:1254 (discriminator 1)
    0.00 :   5c212:  sar    $0x2,%rbx
    0.00 :   5c216:  mov    %rbx,%r8
    0.00 :   5c219:  cmp    %r14,%r15
    0.00 :   5c21c:  jne    5c771 <__GI___printf_fp_l+0x1e41>
         : 1952  ./stdio-common/printf_fp.c:1254
    0.00 :   5c222:  lea    0x1(%rbx),%r15d
    0.00 :   5c226:  test   %rbx,%rbx
    0.00 :   5c229:  je     5d430 <__GI___printf_fp_l+0x2b00>
    0.00 :   5c22f:  mov    %r12,%rdi
    0.00 :   5c232:  mov    %r15d,%r12d
    0.00 :   5c235:  mov    %r9d,%r15d
    0.00 :   5c238:  jmp    5c273 <__GI___printf_fp_l+0x1943>
    0.00 :   5c23a:  nopw   0x0(%rax,%rax,1)
         : 1961  ./stdio-common/printf_fp.c:1254 (discriminator 26)
    0.00 :   5c240:  mov    0x20(%rax),%rdx
    0.00 :   5c244:  cmp    0x28(%rax),%rdx
    0.00 :   5c248:  jae    5c287 <__GI___printf_fp_l+0x1957>
         : 1965  ./stdio-common/printf_fp.c:1254 (discriminator 28)
    0.00 :   5c24a:  lea    0x4(%rdx),%rcx
    0.00 :   5c24e:  cmp    $0xffffffff,%esi
    0.00 :   5c251:  mov    %rcx,0x20(%rax)
    0.00 :   5c255:  sete   %al
    0.00 :   5c258:  mov    %esi,(%rdx)
         : 1971  ./stdio-common/printf_fp.c:1254
    0.00 :   5c25a:  test   %al,%al
    0.00 :   5c25c:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
         : 1974  ./stdio-common/printf_fp.c:1254 (discriminator 38)
    0.00 :   5c262:  lea    (%r12,%r15,1),%r13d
    0.00 :   5c266:  sub    %ebx,%r13d
    0.00 :   5c269:  sub    $0x1,%rbx
    0.00 :   5c26d:  je     5cd6b <__GI___printf_fp_l+0x243b>
         : 1979  ./stdio-common/printf_fp.c:1254 (discriminator 43)
    0.00 :   5c273:  mov    0xa0(%rdi),%rax
    0.00 :   5c27a:  add    $0x4,%r14
    0.00 :   5c27e:  mov    -0x4(%r14),%esi
    0.00 :   5c282:  test   %rax,%rax
    0.00 :   5c285:  jne    5c240 <__GI___printf_fp_l+0x1910>
         : 1985  ./stdio-common/printf_fp.c:1254 (discriminator 27)
    0.00 :   5c287:  mov    %rdi,-0xe0(%rbp)
    0.00 :   5c28e:  call   838b0 <__woverflow>
    0.00 :   5c293:  mov    -0xe0(%rbp),%rdi
    0.00 :   5c29a:  cmp    $0xffffffff,%eax
    0.00 :   5c29d:  sete   %al
    0.00 :   5c2a0:  jmp    5c25a <__GI___printf_fp_l+0x192a>
    0.00 :   5c2a2:  nopw   0x0(%rax,%rax,1)
         : 1993  ./stdio-common/printf_fp.c:845
    0.00 :   5c2a8:  mov    %eax,-0x9c(%rbp)
         : 1995  ./stdio-common/printf_fp.c:847
    0.00 :   5c2ae:  movslq %edi,%rax
    0.00 :   5c2b1:  test   %eax,%eax
    0.00 :   5c2b3:  js     5c99a <__GI___printf_fp_l+0x206a>
         : 1999  ./stdio-common/printf_fp.c:848
    0.00 :   5c2b9:  add    $0x8,%rax
    0.00 :   5c2bd:  mov    %rax,-0x120(%rbp)
         : 2002  ./stdio-common/printf_fp.c:856
    0.00 :   5c2c4:  mov    -0xf0(%rbp),%eax
         : 2004  ./stdio-common/printf_fp.c:858
    0.00 :   5c2ca:  mov    $0x1,%esi
         : 2006  ./stdio-common/printf_fp.c:857
    0.00 :   5c2cf:  movl   $0x7fffffff,-0x128(%rbp)
         : 2008  ./stdio-common/printf_fp.c:867
    0.00 :   5c2d9:  movl   $0x1,-0x118(%rbp)
         : 2010  ./stdio-common/printf_fp.c:856
    0.00 :   5c2e3:  mov    %eax,-0xe0(%rbp)
    0.00 :   5c2e9:  jmp    5b41a <__GI___printf_fp_l+0xaea>
    0.00 :   5c2ee:  mov    %r15,%rax
         : 2014  ./stdio-common/printf_fp.c:1031
    0.00 :   5c2f1:  mov    -0xc0(%rbp),%edi
    0.00 :   5c2f7:  cmp    %edi,-0x4(%rax)
    0.00 :   5c2fa:  jne    5c300 <__GI___printf_fp_l+0x19d0>
         : 2018  ./stdio-common/printf_fp.c:1032
    0.00 :   5c2fc:  sub    $0x4,%rax
         : 2020  ./stdio-common/printf_fp.c:1034
    0.00 :   5c300:  sub    $0x4,%rax
   21.51 :   5c304:  cmp    %r14,%rax
    0.00 :   5c307:  jae    5c323 <__GI___printf_fp_l+0x19f3>
    0.00 :   5c309:  jmp    5c935 <__GI___printf_fp_l+0x2005>
    0.00 :   5c30e:  xchg   %ax,%ax
         : 2026  ./stdio-common/printf_fp.c:1035
    0.00 :   5c310:  movl   $0x30,(%rax)
         : 2028  ./stdio-common/printf_fp.c:1034
    0.00 :   5c316:  sub    $0x4,%rax
    0.00 :   5c31a:  cmp    %rax,%r14
    0.00 :   5c31d:  ja     5c935 <__GI___printf_fp_l+0x2005>
         : 2032  ./stdio-common/printf_fp.c:1034 (discriminator 1)
    0.00 :   5c323:  mov    (%rax),%esi
    0.00 :   5c325:  cmp    $0x39,%esi
    0.00 :   5c328:  je     5c310 <__GI___printf_fp_l+0x19e0>
         : 2036  ./stdio-common/printf_fp.c:1037
    0.00 :   5c32a:  cmp    %r14,%rax
    0.00 :   5c32d:  jb     5c935 <__GI___printf_fp_l+0x2005>
         : 2039  ./stdio-common/printf_fp.c:1039
    0.00 :   5c333:  add    $0x1,%esi
    0.00 :   5c336:  mov    %esi,(%rax)
    0.00 :   5c338:  jmp    5ba70 <__GI___printf_fp_l+0x1140>
         : 2043  ./stdio-common/printf_fp.c:1151
    0.00 :   5c33d:  movl   $0x30,0x8(%r15)
    0.00 :   5c345:  lea    0xc(%r15),%rsi
    0.00 :   5c349:  jmp    5bcaa <__GI___printf_fp_l+0x137a>
    0.00 :   5c34e:  xchg   %ax,%ax
         : 2048  ./stdio-common/printf_fp.c:840
    0.00 :   5c350:  movl   $0x0,-0x124(%rbp)
    0.00 :   5c35a:  jmp    5b4b1 <__GI___printf_fp_l+0xb81>
    0.00 :   5c35f:  nop
    0.00 :   5c360:  mov    -0xb8(%rbp),%rax
    0.00 :   5c367:  movzbl 0xc(%rax),%edx
         : 2054  ./stdio-common/printf_fp.c:1175
    0.00 :   5c36b:  mov    %edx,%eax
    0.00 :   5c36d:  test   $0x40,%dl
    0.00 :   5c370:  je     5c711 <__GI___printf_fp_l+0x1de1>
         : 2058  ./stdio-common/printf_fp.c:1176
    0.00 :   5c376:  mov    -0xbc(%rbp),%r10d
    0.00 :   5c37d:  test   %r10d,%r10d
    0.00 :   5c380:  je     5cd40 <__GI___printf_fp_l+0x2410>
         : 2062  ./stdio-common/printf_fp.c:1176 (discriminator 1)
    0.00 :   5c386:  mov    0xa0(%r12),%rax
    0.00 :   5c38e:  test   %rax,%rax
    0.00 :   5c391:  je     5d31a <__GI___printf_fp_l+0x29ea>
         : 2066  ./stdio-common/printf_fp.c:1176 (discriminator 4)
    0.00 :   5c397:  mov    0x20(%rax),%rdx
    0.00 :   5c39b:  cmp    0x28(%rax),%rdx
    0.00 :   5c39f:  jae    5d31a <__GI___printf_fp_l+0x29ea>
         : 2070  ./stdio-common/printf_fp.c:1176 (discriminator 6)
    0.00 :   5c3a5:  lea    0x4(%rdx),%rsi
    0.00 :   5c3a9:  mov    %rsi,0x20(%rax)
    0.00 :   5c3ad:  movl   $0x2b,(%rdx)
    0.00 :   5c3b3:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
    0.00 :   5c3b8:  nopl   0x0(%rax,%rax,1)
         : 2076  __guess_grouping():
         : 2077  ./stdio-common/printf_fp.c:1176 (discriminator 6)
    0.00 :   5c3c0:  movl   $0x0,-0x124(%rbp)
    0.00 :   5c3ca:  mov    $0x1,%eax
    0.00 :   5c3cf:  jmp    5b493 <__GI___printf_fp_l+0xb63>
         : 2081  __GI___printf_fp_l():
         : 2082  ./stdio-common/printf_fp.c:855
    0.00 :   5c3d4:  movl   $0x66,-0x9c(%rbp)
         : 2084  ./stdio-common/printf_fp.c:848
    0.00 :   5c3de:  movslq %edi,%rdx
         : 2086  ./stdio-common/printf_fp.c:856
    0.00 :   5c3e1:  test   %edi,%edi
    0.00 :   5c3e3:  jns    5c3f4 <__GI___printf_fp_l+0x1ac4>
    0.00 :   5c3e5:  movl   $0x6,-0xf0(%rbp)
    0.00 :   5c3ef:  mov    $0x6,%edx
         : 2091  ./stdio-common/printf_fp.c:859 (discriminator 4)
    0.00 :   5c3f4:  mov    -0xa0(%rbp),%eax
    0.00 :   5c3fa:  mov    %eax,-0x124(%rbp)
    0.00 :   5c400:  test   %eax,%eax
    0.00 :   5c402:  jne    5cc10 <__GI___printf_fp_l+0x22e0>
         : 2096  ./stdio-common/printf_fp.c:861
    0.00 :   5c408:  movslq -0x98(%rbp),%rax
         : 2098  ./stdio-common/printf_fp.c:901
    0.00 :   5c40f:  cmpq   $0x0,-0xe8(%rbp)
         : 2100  ./stdio-common/printf_fp.c:858
    0.00 :   5c417:  mov    $0x1,%esi
         : 2102  ./stdio-common/printf_fp.c:857
    0.00 :   5c41c:  movl   $0x7fffffff,-0x128(%rbp)
         : 2104  ./stdio-common/printf_fp.c:861
    0.00 :   5c426:  lea    0x1(%rax),%edi
         : 2106  ./stdio-common/printf_fp.c:863
    0.00 :   5c429:  lea    0x2(%rdx,%rax,1),%rax
    0.00 :   5c42e:  mov    %rax,-0x120(%rbp)
         : 2109  ./stdio-common/printf_fp.c:856
    0.00 :   5c435:  mov    -0xf0(%rbp),%eax
         : 2111  ./stdio-common/printf_fp.c:861
    0.00 :   5c43b:  mov    %edi,-0x118(%rbp)
         : 2113  ./stdio-common/printf_fp.c:856
    0.00 :   5c441:  mov    %eax,-0xe0(%rbp)
         : 2115  ./stdio-common/printf_fp.c:901
    0.00 :   5c447:  jne    5b428 <__GI___printf_fp_l+0xaf8>
    0.00 :   5c44d:  jmp    5b49a <__GI___printf_fp_l+0xb6a>
         : 2118  ./stdio-common/printf_fp.c:874 (discriminator 1)
    0.00 :   5c452:  cmp    %edx,-0x128(%rbp)
    0.00 :   5c458:  jle    5c859 <__GI___printf_fp_l+0x1f29>
         : 2121  ./stdio-common/printf_fp.c:889
    0.00 :   5c45e:  mov    -0x128(%rbp),%esi
         : 2123  ./stdio-common/printf_fp.c:888
    0.00 :   5c464:  lea    0x1(%rdx),%eax
    0.00 :   5c467:  mov    %eax,-0x118(%rbp)
         : 2126  ./stdio-common/printf_fp.c:889
    0.00 :   5c46d:  sub    %eax,%esi
    0.00 :   5c46f:  mov    %esi,-0xe0(%rbp)
    0.00 :   5c475:  jmp    5b3e2 <__GI___printf_fp_l+0xab2>
         : 2130  ./stdio-common/printf_fp.c:665
    0.00 :   5c47a:  mov    %r15,%rsi
    0.00 :   5c47d:  mov    %r13,%rdx
    0.00 :   5c480:  mov    %r14d,%ecx
         : 2134  ./stdio-common/printf_fp.c:670
    0.00 :   5c483:  mov    $0xc,%r15d
         : 2136  ./stdio-common/printf_fp.c:665
    0.00 :   5c489:  call   54d10 <__mpn_lshift>
         : 2138  ./stdio-common/printf_fp.c:670
    0.00 :   5c48e:  mov    -0x98(%rbp),%esi
         : 2140  ./stdio-common/printf_fp.c:652
    0.00 :   5c494:  movl   $0x0,-0xd0(%rbp)
         : 2142  ./stdio-common/printf_fp.c:662
    0.00 :   5c49e:  lea    0x1709d3(%rip),%rbx        # 1cce78 <_fpioconst_pow10+0x138>
         : 2144  ./stdio-common/printf_fp.c:665
    0.00 :   5c4a5:  mov    %rax,%r8
         : 2146  ./stdio-common/printf_fp.c:666
    0.00 :   5c4a8:  mov    -0x88(%rbp),%rax
         : 2148  ./stdio-common/printf_fp.c:690
    0.00 :   5c4af:  mov    %r12,-0xe0(%rbp)
         : 2150  ./stdio-common/printf_fp.c:670
    0.00 :   5c4b6:  neg    %esi
         : 2152  ./stdio-common/printf_fp.c:666
    0.00 :   5c4b8:  lea    0x1(%rax),%rdx
    0.00 :   5c4bc:  mov    %rdx,-0x88(%rbp)
    0.00 :   5c4c3:  mov    -0x90(%rbp),%rdx
    0.00 :   5c4ca:  mov    %r8,(%rdx,%rax,8)
         : 2157  ./stdio-common/printf_fp.c:669
    0.00 :   5c4ce:  movl   $0x1,-0xa0(%rbp)
         : 2159  ./stdio-common/printf_fp.c:670
    0.00 :   5c4d8:  mov    %esi,-0x98(%rbp)
    0.00 :   5c4de:  jmp    5c585 <__GI___printf_fp_l+0x1c55>
    0.00 :   5c4e3:  nopl   0x0(%rax,%rax,1)
         : 2163  ./stdio-common/printf_fp.c:685
    0.00 :   5c4e8:  lea    0x8(%rcx,%rax,8),%r10
    0.00 :   5c4ed:  mov    %r9,%r8
    0.00 :   5c4f0:  mov    %rsi,%rcx
    0.00 :   5c4f3:  mov    %r10,%rsi
    0.00 :   5c4f6:  call   54f90 <__mpn_mul>
         : 2169  ./stdio-common/printf_fp.c:693
    0.00 :   5c4fb:  mov    -0x88(%rbp),%rsi
    0.00 :   5c502:  mov    0x8(%rbx),%r8
    0.00 :   5c506:  add    %rsi,%r8
         : 2173  ./stdio-common/printf_fp.c:694
    0.00 :   5c509:  test   %rax,%rax
    0.00 :   5c50c:  je     5c5d0 <__GI___printf_fp_l+0x1ca0>
         : 2176  ./stdio-common/printf_fp.c:693
    0.00 :   5c512:  sub    $0x1,%r8
    0.00 :   5c516:  mov    %r8,-0x68(%rbp)
         : 2179  ./stdio-common/printf_fp.c:697
    0.00 :   5c51a:  mov    -0x70(%rbp),%r10
    0.00 :   5c51e:  lea    0x0(,%r8,8),%rdx
         : 2182  ./stdio-common/printf_fp.c:698
    0.00 :   5c526:  mov    %r8,%r13
         : 2184  ./stdio-common/printf_fp.c:697
    0.00 :   5c529:  lea    -0x8(%r10,%rdx,1),%rax
    0.00 :   5c52e:  bsr    (%rax),%rcx
         : 2187  ./stdio-common/printf_fp.c:698
    0.00 :   5c532:  sub    %rsi,%r13
         : 2189  ./stdio-common/printf_fp.c:706
    0.00 :   5c535:  mov    -0x98(%rbp),%esi
         : 2191  ./stdio-common/printf_fp.c:699
    0.00 :   5c53b:  add    $0x1,%r13
    0.00 :   5c53f:  shl    $0x6,%r13d
         : 2194  ./stdio-common/printf_fp.c:706
    0.00 :   5c543:  lea    0x3(%rsi),%edi
         : 2196  ./stdio-common/printf_fp.c:697
    0.00 :   5c546:  xor    $0x3f,%rcx
         : 2198  ./stdio-common/printf_fp.c:699
    0.00 :   5c54a:  sub    %ecx,%r13d
         : 2200  ./stdio-common/printf_fp.c:697
    0.00 :   5c54d:  mov    %ecx,%r12d
         : 2202  ./stdio-common/printf_fp.c:699
    0.00 :   5c550:  sub    $0x1,%r13d
         : 2204  ./stdio-common/printf_fp.c:706
    0.00 :   5c554:  cmp    %r13d,%edi
    0.00 :   5c557:  je     5c698 <__GI___printf_fp_l+0x1d68>
         : 2207  ./stdio-common/printf_fp.c:728
    0.00 :   5c55d:  lea    0x2(%rsi),%eax
    0.00 :   5c560:  cmp    %eax,%r13d
    0.00 :   5c563:  jle    5c5e8 <__GI___printf_fp_l+0x1cb8>
         : 2211  ./stdio-common/printf_fp.c:789
    0.00 :   5c569:  lea    0x1707e8(%rip),%rax        # 1ccd58 <_fpioconst_pow10+0x18>
         : 2213  ./stdio-common/printf_fp.c:787
    0.00 :   5c570:  sub    $0x1,%r15d
         : 2215  ./stdio-common/printf_fp.c:789
    0.00 :   5c574:  cmp    %rax,%rbx
    0.00 :   5c577:  je     5caf3 <__GI___printf_fp_l+0x21c3>
         : 2218  ./stdio-common/printf_fp.c:789 (discriminator 1)
    0.00 :   5c57d:  test   %esi,%esi
    0.00 :   5c57f:  jle    5cea5 <__GI___printf_fp_l+0x2575>
         : 2221  ./stdio-common/printf_fp.c:675
    0.00 :   5c585:  sub    $0x18,%rbx
         : 2223  ./stdio-common/printf_fp.c:677
    0.00 :   5c589:  cmp    %esi,0x14(%rbx)
    0.00 :   5c58c:  jg     5c569 <__GI___printf_fp_l+0x1c39>
         : 2226  ./stdio-common/printf_fp.c:684
    0.00 :   5c58e:  mov    0x8(%rbx),%rax
         : 2228  ./stdio-common/printf_fp.c:685
    0.00 :   5c592:  mov    -0x70(%rbp),%rdi
    0.00 :   5c596:  lea    0x170923(%rip),%rcx        # 1ccec0 <__tens>
         : 2231  ./stdio-common/printf_fp.c:684
    0.00 :   5c59d:  mov    -0x88(%rbp),%r9
         : 2233  ./stdio-common/printf_fp.c:688
    0.00 :   5c5a4:  mov    -0x90(%rbp),%rsi
         : 2235  ./stdio-common/printf_fp.c:684
    0.00 :   5c5ab:  lea    -0x1(%rax),%rdx
         : 2237  ./stdio-common/printf_fp.c:686
    0.00 :   5c5af:  mov    (%rbx),%rax
         : 2239  ./stdio-common/printf_fp.c:684
    0.00 :   5c5b2:  cmp    %rdx,%r9
    0.00 :   5c5b5:  jl     5c4e8 <__GI___printf_fp_l+0x1bb8>
         : 2242  ./stdio-common/printf_fp.c:690
    0.00 :   5c5bb:  mov    %rdx,%r8
    0.00 :   5c5be:  lea    0x8(%rcx,%rax,8),%rcx
    0.00 :   5c5c3:  mov    %r9,%rdx
    0.00 :   5c5c6:  call   54f90 <__mpn_mul>
    0.00 :   5c5cb:  jmp    5c4fb <__GI___printf_fp_l+0x1bcb>
         : 2248  ./stdio-common/printf_fp.c:695
    0.00 :   5c5d0:  sub    $0x2,%r8
    0.00 :   5c5d4:  mov    %r8,-0x68(%rbp)
    0.00 :   5c5d8:  jmp    5c51a <__GI___printf_fp_l+0x1bea>
         : 2252  ./stdio-common/printf_fp.c:745
    0.00 :   5c5dd:  mov    -0x70(%rbp),%r10
         : 2254  ./stdio-common/printf_fp.c:748
    0.00 :   5c5e1:  mov    -0x68(%rbp),%r8
    0.00 :   5c5e5:  nopl   (%rax)
         : 2257  ./stdio-common/printf_fp.c:737
    0.00 :   5c5e8:  mov    $0x1,%eax
    0.00 :   5c5ed:  mov    %r15d,%ecx
         : 2260  ./stdio-common/printf_fp.c:736
    0.00 :   5c5f0:  sub    %r13d,%esi
         : 2262  ./stdio-common/printf_fp.c:737
    0.00 :   5c5f3:  shl    %cl,%eax
    0.00 :   5c5f5:  or     %eax,-0xd0(%rbp)
         : 2265  ./stdio-common/printf_fp.c:742
    0.00 :   5c5fb:  mov    %r12d,%eax
    0.00 :   5c5fe:  sub    %esi,%eax
    0.00 :   5c600:  test   %esi,%esi
         : 2269  ./stdio-common/printf_fp.c:736
    0.00 :   5c602:  mov    %esi,-0x98(%rbp)
         : 2271  ./stdio-common/printf_fp.c:742
    0.00 :   5c608:  cmovs  %eax,%r12d
         : 2273  ./stdio-common/printf_fp.c:745
    0.00 :   5c60c:  mov    (%r10),%rax
    0.00 :   5c60f:  test   %rax,%rax
    0.00 :   5c612:  jne    5d18e <__GI___printf_fp_l+0x285e>
    0.00 :   5c618:  lea    0x8(%r10),%rdx
    0.00 :   5c61c:  mov    $0x1,%eax
    0.00 :   5c621:  nopl   0x0(%rax)
         : 2280  ./stdio-common/printf_fp.c:745 (discriminator 3)
    0.00 :   5c628:  mov    (%rdx),%rcx
    0.00 :   5c62b:  lea    -0x1(%rax),%r9d
    0.00 :   5c62f:  movslq %eax,%rdi
    0.00 :   5c632:  mov    %rdx,%r14
    0.00 :   5c635:  lea    0x0(,%rax,8),%r11
    0.00 :   5c63d:  mov    %rax,%r13
    0.00 :   5c640:  add    $0x8,%rdx
    0.00 :   5c644:  add    $0x1,%rax
    0.00 :   5c648:  test   %rcx,%rcx
    0.00 :   5c64b:  je     5c628 <__GI___printf_fp_l+0x1cf8>
         : 2291  ./stdio-common/printf_fp.c:746
    0.00 :   5c64d:  cmp    $0x3f,%r12d
    0.00 :   5c651:  jne    5cc20 <__GI___printf_fp_l+0x22f0>
         : 2294  ./stdio-common/printf_fp.c:748
    0.00 :   5c657:  sub    %rdi,%r8
    0.00 :   5c65a:  test   %r8,%r8
    0.00 :   5c65d:  jle    5c688 <__GI___printf_fp_l+0x1d58>
    0.00 :   5c65f:  mov    -0x90(%rbp),%r9
    0.00 :   5c666:  lea    (%r10,%r13,8),%rcx
    0.00 :   5c66a:  xor    %eax,%eax
    0.00 :   5c66c:  nopl   0x0(%rax)
         : 2302  ./stdio-common/printf_fp.c:748 (discriminator 3)
    0.00 :   5c670:  mov    (%rcx,%rax,8),%rdx
    0.00 :   5c674:  mov    %rdx,(%r9,%rax,8)
    0.00 :   5c678:  mov    -0x68(%rbp),%r8
    0.00 :   5c67c:  add    $0x1,%rax
    0.00 :   5c680:  sub    %rdi,%r8
    0.00 :   5c683:  cmp    %rax,%r8
    0.00 :   5c686:  jg     5c670 <__GI___printf_fp_l+0x1d40>
         : 2310  ./stdio-common/printf_fp.c:749 (discriminator 4)
    0.00 :   5c688:  mov    %r8,-0x88(%rbp)
    0.00 :   5c68f:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c694:  nopl   0x0(%rax)
         : 2314  ./stdio-common/printf_fp.c:708
    0.00 :   5c698:  cmp    $0x3c,%ecx
    0.00 :   5c69b:  jg     5cd7e <__GI___printf_fp_l+0x244e>
         : 2317  ./stdio-common/printf_fp.c:712
    0.00 :   5c6a1:  mov    $0x3c,%ecx
    0.00 :   5c6a6:  mov    $0xa,%edi
         : 2320  ./stdio-common/printf_fp.c:710
    0.00 :   5c6ab:  movq   $0x0,-0x50(%rbp)
         : 2322  ./stdio-common/printf_fp.c:712
    0.00 :   5c6b3:  sub    %r12d,%ecx
    0.00 :   5c6b6:  shl    %cl,%rdi
    0.00 :   5c6b9:  mov    %rdi,-0x48(%rbp)
    0.00 :   5c6bd:  mov    %rdi,%rcx
         : 2327  ./stdio-common/printf_fp.c:728
    0.00 :   5c6c0:  lea    0x2(%rsi),%edi
    0.00 :   5c6c3:  cmp    %edi,%r13d
    0.00 :   5c6c6:  jle    5c5e8 <__GI___printf_fp_l+0x1cb8>
         : 2331  ./stdio-common/printf_fp.c:730
    0.00 :   5c6cc:  cmp    %rcx,(%rax)
    0.00 :   5c6cf:  jb     5c5e8 <__GI___printf_fp_l+0x1cb8>
         : 2334  ./stdio-common/printf_fp.c:731
    0.00 :   5c6d5:  jne    5c569 <__GI___printf_fp_l+0x1c39>
         : 2336  ./stdio-common/printf_fp.c:732
    0.00 :   5c6db:  mov    -0x50(%rbp),%rax
    0.00 :   5c6df:  cmp    %rax,-0x10(%r10,%rdx,1)
    0.00 :   5c6e4:  jae    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5c6ea:  jmp    5c5e8 <__GI___printf_fp_l+0x1cb8>
    0.00 :   5c6ef:  nop
         : 2342  ./stdio-common/printf_fp.c:1174 (discriminator 2)
    0.00 :   5c6f0:  mov    0x28(%r12),%rax
    0.00 :   5c6f5:  cmp    0x30(%r12),%rax
    0.00 :   5c6fa:  jae    5d2ca <__GI___printf_fp_l+0x299a>
         : 2346  ./stdio-common/printf_fp.c:1174 (discriminator 11)
    0.00 :   5c700:  lea    0x1(%rax),%rdx
    0.00 :   5c704:  mov    %rdx,0x28(%r12)
    0.00 :   5c709:  movb   $0x2d,(%rax)
    0.00 :   5c70c:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
         : 2351  ./stdio-common/printf_fp.c:1177
    0.00 :   5c711:  and    $0x10,%edx
    0.00 :   5c714:  je     5bd9d <__GI___printf_fp_l+0x146d>
         : 2354  ./stdio-common/printf_fp.c:1178
    0.00 :   5c71a:  mov    -0xbc(%rbp),%r8d
    0.00 :   5c721:  test   %r8d,%r8d
    0.00 :   5c724:  je     5d064 <__GI___printf_fp_l+0x2734>
         : 2358  ./stdio-common/printf_fp.c:1178 (discriminator 1)
    0.00 :   5c72a:  mov    0xa0(%r12),%rax
    0.00 :   5c732:  test   %rax,%rax
    0.00 :   5c735:  je     5d475 <__GI___printf_fp_l+0x2b45>
         : 2362  ./stdio-common/printf_fp.c:1178 (discriminator 4)
    0.00 :   5c73b:  mov    0x20(%rax),%rdx
    0.00 :   5c73f:  cmp    0x28(%rax),%rdx
    0.00 :   5c743:  jae    5d475 <__GI___printf_fp_l+0x2b45>
         : 2366  ./stdio-common/printf_fp.c:1178 (discriminator 6)
    0.00 :   5c749:  lea    0x4(%rdx),%rsi
    0.00 :   5c74d:  mov    %rsi,0x20(%rax)
    0.00 :   5c751:  movl   $0x20,(%rdx)
    0.00 :   5c757:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
         : 2371  round_away():
         : 2372  ./stdio-common/../include/rounding-mode.h:58
    0.00 :   5c75c:  mov    -0xa4(%rbp),%r10d
    0.00 :   5c763:  test   %r10d,%r10d
    0.00 :   5c766:  jne    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c76c:  jmp    5c08a <__GI___printf_fp_l+0x175a>
         : 2377  __GI___printf_fp_l():
         : 2378  ./stdio-common/printf_fp.c:1254
    0.00 :   5c771:  mov    0xd8(%r12),%rbx
         : 2380  IO_validate_vtable():
         : 2381  ./stdio-common/../libio/libioP.h:940
    0.00 :   5c779:  lea    0x1ba280(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   5c780:  lea    0x1bafe1(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   5c787:  sub    %rdx,%rax
         : 2385  ./stdio-common/../libio/libioP.h:942
    0.00 :   5c78a:  mov    %rbx,%rcx
    0.00 :   5c78d:  sub    %rdx,%rcx
         : 2388  ./stdio-common/../libio/libioP.h:943
    0.00 :   5c790:  cmp    %rcx,%rax
    0.00 :   5c793:  jbe    5d295 <__GI___printf_fp_l+0x2965>
         : 2391  __GI___printf_fp_l():
         : 2392  ./stdio-common/printf_fp.c:1254
    0.00 :   5c799:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5c7a4:  mov    0x38(%rbx),%rax
    0.00 :   5c7a8:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5c7ad:  mov    %r14,%r15
    0.00 :   5c7b0:  mov    %r9d,%r13d
    0.00 :   5c7b3:  test   %rdi,%rdi
    0.00 :   5c7b6:  jne    5c7e2 <__GI___printf_fp_l+0x1eb2>
    0.00 :   5c7b8:  jmp    5d0c2 <__GI___printf_fp_l+0x2792>
    0.00 :   5c7bd:  nopl   (%rax)
         : 2402  ./stdio-common/printf_fp.c:1254 (discriminator 54)
    0.00 :   5c7c0:  lea    0x1(%rax),%rcx
    0.00 :   5c7c4:  mov    %rcx,0x28(%r12)
    0.00 :   5c7c9:  mov    %dl,(%rax)
         : 2406  ./stdio-common/printf_fp.c:1254 (discriminator 59)
    0.00 :   5c7cb:  mov    %r14,%rdx
    0.00 :   5c7ce:  lea    0x0(%r13,%r15,1),%eax
    0.00 :   5c7d3:  sub    %r15,%rdx
    0.00 :   5c7d6:  sub    %r14d,%eax
    0.00 :   5c7d9:  add    %rbx,%rdx
    0.00 :   5c7dc:  je     5c88d <__GI___printf_fp_l+0x1f5d>
         : 2413  ./stdio-common/printf_fp.c:1254 (discriminator 64)
    0.00 :   5c7e2:  add    $0x1,%r15
    0.00 :   5c7e6:  mov    0x28(%r12),%rax
    0.00 :   5c7eb:  movzbl -0x1(%r15),%edx
    0.00 :   5c7f0:  cmp    0x30(%r12),%rax
    0.00 :   5c7f5:  jb     5c7c0 <__GI___printf_fp_l+0x1e90>
         : 2419  ./stdio-common/printf_fp.c:1254 (discriminator 53)
    0.00 :   5c7f7:  movzbl %dl,%esi
    0.00 :   5c7fa:  mov    %r12,%rdi
    0.00 :   5c7fd:  call   8d800 <__overflow>
    0.00 :   5c802:  cmp    $0xffffffff,%eax
    0.00 :   5c805:  jne    5c7cb <__GI___printf_fp_l+0x1e9b>
         : 2425  ./stdio-common/printf_fp.c:1254
    0.00 :   5c807:  mov    -0x14c(%rbp),%r15d
    0.00 :   5c80e:  mov    %eax,%r13d
    0.00 :   5c811:  test   %r15d,%r15d
    0.00 :   5c814:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 2430  ./stdio-common/printf_fp.c:1254 (discriminator 60)
    0.00 :   5c81a:  mov    -0xe0(%rbp),%rdi
    0.00 :   5c821:  call   28370 <free@plt>
    0.00 :   5c826:  mov    -0x130(%rbp),%rdi
    0.00 :   5c82d:  call   28370 <free@plt>
    0.00 :   5c832:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5c837:  nopw   0x0(%rax,%rax,1)
         : 2437  ./stdio-common/printf_fp.c:919
    0.00 :   5c840:  mov    0x1bd5c9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
         : 2439  ./stdio-common/printf_fp.c:920
    0.00 :   5c847:  mov    $0xffffffff,%r13d
         : 2441  ./stdio-common/printf_fp.c:919
    0.00 :   5c84d:  movl   $0x22,%fs:(%rax)
         : 2443  ./stdio-common/printf_fp.c:920
    0.00 :   5c854:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
         : 2445  ./stdio-common/printf_fp.c:882
    0.00 :   5c859:  movl   $0x1,-0x118(%rbp)
         : 2447  ./stdio-common/printf_fp.c:878
    0.00 :   5c863:  sub    $0x2,%eax
    0.00 :   5c866:  mov    %eax,-0x9c(%rbp)
         : 2450  ./stdio-common/printf_fp.c:881
    0.00 :   5c86c:  mov    -0x128(%rbp),%eax
    0.00 :   5c872:  sub    $0x1,%eax
    0.00 :   5c875:  mov    %eax,-0xe0(%rbp)
         : 2454  ./stdio-common/printf_fp.c:883
    0.00 :   5c87b:  cltq
    0.00 :   5c87d:  add    $0x8,%rax
    0.00 :   5c881:  mov    %rax,-0x120(%rbp)
    0.00 :   5c888:  jmp    5b3fe <__GI___printf_fp_l+0xace>
    0.00 :   5c88d:  mov    %eax,%r13d
    0.00 :   5c890:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
         : 2461  ./stdio-common/printf_fp.c:474
    0.00 :   5c895:  mov    %esi,%eax
         : 2463  ./stdio-common/printf_fp.c:472
    0.00 :   5c897:  movslq %edx,%rdx
         : 2465  ./stdio-common/printf_fp.c:474
    0.00 :   5c89a:  sar    $0x1f,%eax
         : 2467  ./stdio-common/printf_fp.c:471
    0.00 :   5c89d:  lea    (%rdi,%rdx,8),%rdi
    0.00 :   5c8a1:  mov    %r13,%rdx
         : 2470  ./stdio-common/printf_fp.c:474
    0.00 :   5c8a4:  shr    $0x1a,%eax
    0.00 :   5c8a7:  lea    (%rsi,%rax,1),%ecx
         : 2473  ./stdio-common/printf_fp.c:471
    0.00 :   5c8aa:  mov    %r15,%rsi
         : 2475  ./stdio-common/printf_fp.c:474
    0.00 :   5c8ad:  and    $0x3f,%ecx
    0.00 :   5c8b0:  sub    %eax,%ecx
         : 2478  ./stdio-common/printf_fp.c:471
    0.00 :   5c8b2:  call   54d10 <__mpn_lshift>
         : 2480  ./stdio-common/printf_fp.c:475
    0.00 :   5c8b7:  mov    -0x98(%rbp),%ecx
    0.00 :   5c8bd:  mov    -0x88(%rbp),%rsi
   21.14 :   5c8c4:  add    %ecx,%r14d
    0.00 :   5c8c7:  lea    0x3f(%r14),%edx
    0.00 :   5c8cb:  cmovns %r14d,%edx
    0.00 :   5c8cf:  sar    $0x6,%edx
    0.00 :   5c8d2:  movslq %edx,%rdx
    0.00 :   5c8d5:  add    %rdx,%rsi
    0.00 :   5c8d8:  mov    %rsi,-0x88(%rbp)
         : 2490  ./stdio-common/printf_fp.c:476
    0.00 :   5c8df:  test   %rax,%rax
    0.00 :   5c8e2:  je     5b15c <__GI___printf_fp_l+0x82c>
         : 2493  ./stdio-common/printf_fp.c:477
    0.00 :   5c8e8:  lea    0x1(%rsi),%rdi
    0.00 :   5c8ec:  mov    %rdi,-0x88(%rbp)
    0.00 :   5c8f3:  mov    -0x90(%rbp),%rdi
    0.00 :   5c8fa:  mov    %rax,(%rdi,%rsi,8)
    0.00 :   5c8fe:  jmp    5b15c <__GI___printf_fp_l+0x82c>
         : 2499  ./stdio-common/printf_fp.c:260
    0.00 :   5c903:  xor    %r9d,%r9d
    0.00 :   5c906:  jmp    5c36b <__GI___printf_fp_l+0x1a3b>
         : 2502  ./stdio-common/printf_fp.c:908
    0.00 :   5c90b:  lea    0x2(%r9),%eax
         : 2504  ./stdio-common/printf_fp.c:905
    0.00 :   5c90f:  mov    %edi,-0x124(%rbp)
         : 2506  ./stdio-common/printf_fp.c:908
    0.00 :   5c915:  cltq
    0.00 :   5c917:  jmp    5b493 <__GI___printf_fp_l+0xb63>
         : 2509  __guess_grouping():
         : 2510  ./stdio-common/printf_fp.c:1315
    0.00 :   5c91c:  lea    -0x1(%rdx),%eax
    0.00 :   5c91f:  xor    %edx,%edx
    0.00 :   5c921:  div    %ecx
    0.00 :   5c923:  add    %edi,%eax
    0.00 :   5c925:  mov    %eax,-0x124(%rbp)
         : 2516  __GI___printf_fp_l():
         : 2517  ./stdio-common/printf_fp.c:908
    0.00 :   5c92b:  add    $0x1,%eax
    0.00 :   5c92e:  cltq
         : 2520  __guess_grouping():
         : 2521  ./stdio-common/printf_fp.c:1316
    0.00 :   5c930:  jmp    5b493 <__GI___printf_fp_l+0xb63>
         : 2523  __GI___printf_fp_l():
         : 2524  ./stdio-common/printf_fp.c:1043
    0.00 :   5c935:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5c93c:  je     5d085 <__GI___printf_fp_l+0x2755>
         : 2527  ./stdio-common/printf_fp.c:1045
    0.00 :   5c942:  mov    -0x130(%rbp),%rax
         : 2529  ./stdio-common/printf_fp.c:1046
    0.00 :   5c949:  cmpl   $0x1,-0xa0(%rbp)
         : 2531  ./stdio-common/printf_fp.c:1045
    0.00 :   5c950:  movl   $0x31,0x8(%rax)
         : 2533  ./stdio-common/printf_fp.c:1046
    0.00 :   5c957:  sbb    %eax,%eax
    0.00 :   5c959:  and    $0x2,%eax
    0.00 :   5c95c:  sub    $0x1,%eax
    0.00 :   5c95f:  add    %eax,-0x98(%rbp)
         : 2538  ./stdio-common/printf_fp.c:1051
    0.00 :   5c965:  jne    5c971 <__GI___printf_fp_l+0x2041>
         : 2540  ./stdio-common/printf_fp.c:1052
    0.00 :   5c967:  movl   $0x0,-0xa0(%rbp)
         : 2542  ./stdio-common/printf_fp.c:1087
    0.00 :   5c971:  mov    -0x134(%rbp),%eax
    0.00 :   5c977:  mov    -0x128(%rbp),%ecx
    0.00 :   5c97d:  add    %ebx,%eax
    0.00 :   5c97f:  cmp    %ecx,%eax
    0.00 :   5c981:  jle    5ba70 <__GI___printf_fp_l+0x1140>
         : 2548  ./stdio-common/printf_fp.c:1089
    0.00 :   5c987:  sub    %ecx,%eax
    0.00 :   5c989:  movslq %eax,%rsi
         : 2551  ./stdio-common/printf_fp.c:1090
    0.00 :   5c98c:  sub    %eax,%ebx
         : 2553  ./stdio-common/printf_fp.c:1089
    0.00 :   5c98e:  shl    $0x2,%rsi
    0.00 :   5c992:  sub    %rsi,%r15
         : 2556  ./stdio-common/printf_fp.c:1090
    0.00 :   5c995:  jmp    5ba70 <__GI___printf_fp_l+0x1140>
    0.00 :   5c99a:  movq   $0xe,-0x120(%rbp)
         : 2559  ./stdio-common/printf_fp.c:847
    0.00 :   5c9a5:  movl   $0x6,-0xf0(%rbp)
         : 2561  ./stdio-common/printf_fp.c:851
    0.00 :   5c9af:  jmp    5c2c4 <__GI___printf_fp_l+0x1994>
         : 2563  ./stdio-common/printf_fp.c:947
    0.00 :   5c9b4:  mov    -0xe0(%rbp),%r11d
    0.00 :   5c9bb:  test   %r11d,%r11d
    0.00 :   5c9be:  jle    5d01c <__GI___printf_fp_l+0x26ec>
         : 2567  ./stdio-common/printf_fp.c:947 (discriminator 1)
    0.00 :   5c9c4:  cmpq   $0x1,-0x88(%rbp)
    0.00 :   5c9cc:  jg     5b5eb <__GI___printf_fp_l+0xcbb>
         : 2570  ./stdio-common/printf_fp.c:947 (discriminator 2)
    0.00 :   5c9d2:  mov    -0x90(%rbp),%rdx
    0.00 :   5c9d9:  cmpq   $0x0,(%rdx)
    0.00 :   5c9dd:  jne    5b5eb <__GI___printf_fp_l+0xcbb>
    0.00 :   5c9e3:  mov    %rax,%r15
         : 2575  ./stdio-common/printf_fp.c:944
    0.00 :   5c9e6:  mov    $0x1,%esi
    0.00 :   5c9eb:  jmp    5b5fc <__GI___printf_fp_l+0xccc>
         : 2578  ./stdio-common/printf_fp.c:956
    0.00 :   5c9f0:  mov    -0xc0(%rbp),%ebx
    0.00 :   5c9f6:  lea    0x10(%rax),%r15
         : 2581  ./stdio-common/printf_fp.c:955
    0.00 :   5c9fa:  subl   $0x1,-0x98(%rbp)
    0.00 :   5ca01:  lea    -0xa0(%rbp),%r13
         : 2584  ./stdio-common/printf_fp.c:954
    0.00 :   5ca08:  movl   $0x30,0x8(%rax)
         : 2586  ./stdio-common/printf_fp.c:956
    0.00 :   5ca0f:  mov    %ebx,0xc(%rax)
         : 2588  ./stdio-common/printf_fp.c:835
    0.00 :   5ca12:  movl   $0x0,-0x134(%rbp)
    0.00 :   5ca1c:  jmp    5b5fc <__GI___printf_fp_l+0xccc>
         : 2591  ./stdio-common/printf_fp.c:983 (discriminator 1)
    0.00 :   5ca21:  mov    -0x90(%rbp),%r10
    0.00 :   5ca28:  cmpq   $0x0,(%r10)
    0.00 :   5ca2c:  je     5ba2b <__GI___printf_fp_l+0x10fb>
         : 2595  ./stdio-common/printf_fp.c:986
    0.00 :   5ca32:  cmpq   $0x0,-0x78(%rbp)
         : 2597  ./stdio-common/printf_fp.c:990
    0.00 :   5ca37:  mov    $0x1,%eax
         : 2599  ./stdio-common/printf_fp.c:986
    0.00 :   5ca3c:  je     5ba1e <__GI___printf_fp_l+0x10ee>
    0.00 :   5ca42:  jmp    5ba26 <__GI___printf_fp_l+0x10f6>
         : 2602  ./stdio-common/printf_fp.c:579
    0.00 :   5ca47:  test   %ecx,%ecx
    0.00 :   5ca49:  je     5ceb1 <__GI___printf_fp_l+0x2581>
         : 2605  ./stdio-common/printf_fp.c:595
    0.00 :   5ca4f:  xor    %eax,%eax
         : 2607  ./stdio-common/printf_fp.c:596
    0.00 :   5ca51:  mov    (%r9,%r13,1),%r9
         : 2609  ./stdio-common/printf_fp.c:595
    0.00 :   5ca55:  tzcnt  %r8,%rax
    0.00 :   5ca5a:  mov    %eax,%r8d
         : 2612  ./stdio-common/printf_fp.c:596
    0.00 :   5ca5d:  test   %r9,%r9
    0.00 :   5ca60:  je     5d180 <__GI___printf_fp_l+0x2850>
         : 2615  ./stdio-common/printf_fp.c:599
    0.00 :   5ca66:  xor    %r8d,%r8d
         : 2617  ./stdio-common/printf_fp.c:608
    0.00 :   5ca69:  mov    $0x40,%r15d
         : 2619  ./stdio-common/printf_fp.c:599
    0.00 :   5ca6f:  tzcnt  %r9,%r8
         : 2621  ./stdio-common/printf_fp.c:600
    0.00 :   5ca74:  cmp    %r8d,%eax
    0.00 :   5ca77:  cmovle %eax,%r8d
         : 2624  ./stdio-common/printf_fp.c:608
    0.00 :   5ca7b:  sub    %ecx,%r15d
         : 2626  ./stdio-common/printf_fp.c:639
    0.00 :   5ca7e:  movslq %r14d,%rbx
         : 2628  ./stdio-common/printf_fp.c:618
    0.00 :   5ca81:  cmp    %r8d,%r15d
    0.00 :   5ca84:  jle    5cf4c <__GI___printf_fp_l+0x261c>
         : 2631  ./stdio-common/printf_fp.c:637
    0.00 :   5ca8a:  sub    $0x1,%r14d
         : 2633  ./stdio-common/printf_fp.c:636
    0.00 :   5ca8e:  sub    $0x8,%r13
    0.00 :   5ca92:  mov    %r15d,%ecx
         : 2636  ./stdio-common/printf_fp.c:637
    0.00 :   5ca95:  movslq %r14d,%r14
         : 2638  ./stdio-common/printf_fp.c:636
    0.00 :   5ca98:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5ca9c:  sub    %r14,%rdx
    0.00 :   5ca9f:  call   54e30 <__mpn_rshift>
         : 2642  ./stdio-common/printf_fp.c:640
    0.00 :   5caa4:  mov    -0x90(%rbp),%rdi
    0.00 :   5caab:  mov    %r15d,%ecx
         : 2645  ./stdio-common/printf_fp.c:639
    0.00 :   5caae:  sub    %rbx,-0x78(%rbp)
         : 2647  ./stdio-common/printf_fp.c:640
    0.00 :   5cab2:  mov    -0x88(%rbp),%rdx
    0.00 :   5cab9:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5cabd:  sub    %r14,%rdx
    0.00 :   5cac0:  call   54e30 <__mpn_rshift>
         : 2652  ./stdio-common/printf_fp.c:643
    0.00 :   5cac5:  mov    -0x88(%rbp),%rdx
         : 2654  ./stdio-common/printf_fp.c:644
    0.00 :   5cacc:  mov    -0x90(%rbp),%rcx
    0.00 :   5cad3:  mov    %rdx,%rax
    0.00 :   5cad6:  sub    %r14,%rax
    0.00 :   5cad9:  cmpq   $0x0,-0x8(%rcx,%rax,8)
    0.00 :   5cadf:  jne    5cae7 <__GI___printf_fp_l+0x21b7>
         : 2660  ./stdio-common/printf_fp.c:643
    0.00 :   5cae1:  mov    %rdx,%rax
    0.00 :   5cae4:  sub    %rbx,%rax
    0.00 :   5cae7:  mov    %rax,-0x88(%rbp)
    0.00 :   5caee:  jmp    5b348 <__GI___printf_fp_l+0xa18>
         : 2665  ./stdio-common/printf_fp.c:791
    0.00 :   5caf3:  mov    -0xe0(%rbp),%r12
    0.00 :   5cafa:  test   %esi,%esi
    0.00 :   5cafc:  jle    5cb97 <__GI___printf_fp_l+0x2267>
         : 2669  ./stdio-common/printf_fp.c:795
    0.00 :   5cb02:  mov    -0x88(%rbp),%rdx
    0.00 :   5cb09:  mov    -0x70(%rbp),%rdi
    0.00 :   5cb0d:  mov    $0xa,%ecx
    0.00 :   5cb12:  mov    -0x90(%rbp),%rsi
    0.00 :   5cb19:  call   55420 <__mpn_mul_1>
         : 2675  ./stdio-common/printf_fp.c:799
    0.00 :   5cb1e:  mov    -0x70(%rbp),%rsi
    0.00 :   5cb22:  xor    %edi,%edi
         : 2678  ./stdio-common/printf_fp.c:800
    0.00 :   5cb24:  mov    $0x4,%edx
         : 2680  ./stdio-common/printf_fp.c:796
    0.00 :   5cb29:  mov    -0x88(%rbp),%r8
         : 2682  ./stdio-common/printf_fp.c:800
    0.00 :   5cb30:  mov    -0x98(%rbp),%eax
    0.00 :   5cb36:  mov    %edx,%ecx
         : 2685  ./stdio-common/printf_fp.c:796
    0.00 :   5cb38:  mov    %r8,-0x68(%rbp)
         : 2687  ./stdio-common/printf_fp.c:799
    0.00 :   5cb3c:  tzcnt  (%rsi),%rdi
         : 2689  ./stdio-common/printf_fp.c:800
    0.00 :   5cb41:  cmp    %edx,%eax
    0.00 :   5cb43:  cmovle %eax,%ecx
    0.00 :   5cb46:  cmp    %edi,%ecx
    0.00 :   5cb48:  jle    5d0ca <__GI___printf_fp_l+0x279a>
         : 2694  ./stdio-common/printf_fp.c:803
    0.00 :   5cb4e:  mov    $0x40,%r9d
         : 2696  ./stdio-common/printf_fp.c:802
    0.00 :   5cb54:  mov    -0x90(%rbp),%rdi
    0.00 :   5cb5b:  mov    %r8,%rdx
         : 2699  ./stdio-common/printf_fp.c:803
    0.00 :   5cb5e:  sub    %ecx,%r9d
         : 2701  ./stdio-common/printf_fp.c:802
    0.00 :   5cb61:  mov    %r9d,%ecx
    0.00 :   5cb64:  call   54d10 <__mpn_lshift>
         : 2704  ./stdio-common/printf_fp.c:804
    0.00 :   5cb69:  test   %rax,%rax
    0.00 :   5cb6c:  je     5cb85 <__GI___printf_fp_l+0x2255>
         : 2707  ./stdio-common/printf_fp.c:805
    0.00 :   5cb6e:  mov    -0x68(%rbp),%rdx
    0.00 :   5cb72:  lea    0x1(%rdx),%rcx
    0.00 :   5cb76:  mov    %rcx,-0x68(%rbp)
    0.00 :   5cb7a:  mov    -0x90(%rbp),%rcx
    0.00 :   5cb81:  mov    %rax,(%rcx,%rdx,8)
         : 2713  ./stdio-common/printf_fp.c:809
    0.00 :   5cb85:  mov    -0x68(%rbp),%rax
         : 2715  ./stdio-common/printf_fp.c:810
    0.00 :   5cb89:  orl    $0x1,-0xd0(%rbp)
         : 2717  ./stdio-common/printf_fp.c:809
    0.00 :   5cb90:  mov    %rax,-0x88(%rbp)
         : 2719  ./stdio-common/printf_fp.c:813
    0.00 :   5cb97:  mov    -0xd0(%rbp),%eax
    0.00 :   5cb9d:  mov    %eax,-0x98(%rbp)
    0.00 :   5cba3:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5cba8:  xor    %eax,%eax
         : 2724  ./stdio-common/printf_fp.c:1203
    0.00 :   5cbaa:  xor    %r13d,%r13d
    0.00 :   5cbad:  jmp    5be3d <__GI___printf_fp_l+0x150d>
         : 2727  ./stdio-common/printf_fp.c:418 (discriminator 45)
    0.00 :   5cbb2:  movzbl %dl,%esi
    0.00 :   5cbb5:  mov    %r12,%rdi
    0.00 :   5cbb8:  call   8d800 <__overflow>
    0.00 :   5cbbd:  cmp    $0xffffffff,%eax
    0.00 :   5cbc0:  jne    5b76f <__GI___printf_fp_l+0xe3f>
    0.00 :   5cbc6:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cbcb:  nopl   0x0(%rax,%rax,1)
         : 2735  ./stdio-common/printf_fp.c:418
    0.00 :   5cbd0:  movzbl %dl,%esi
    0.00 :   5cbd3:  mov    %r12,%rdi
    0.00 :   5cbd6:  call   8d800 <__overflow>
    0.00 :   5cbdb:  cmp    $0xffffffff,%eax
    0.00 :   5cbde:  jne    5b74f <__GI___printf_fp_l+0xe1f>
    0.00 :   5cbe4:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cbe9:  nopl   0x0(%rax)
    0.00 :   5cbf0:  movzbl %dl,%esi
    0.00 :   5cbf3:  mov    %r12,%rdi
    0.00 :   5cbf6:  call   8d800 <__overflow>
    0.00 :   5cbfb:  cmp    $0xffffffff,%eax
    0.00 :   5cbfe:  jne    5b72f <__GI___printf_fp_l+0xdff>
    0.00 :   5cc04:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5cc09:  nopl   0x0(%rax)
         : 2750  ./stdio-common/printf_fp.c:868
    0.00 :   5cc10:  lea    0x2(%rdx),%rax
    0.00 :   5cc14:  mov    %rax,-0x120(%rbp)
    0.00 :   5cc1b:  jmp    5c2c4 <__GI___printf_fp_l+0x1994>
         : 2754  ./stdio-common/printf_fp.c:753
    0.00 :   5cc20:  xor    %eax,%eax
    0.00 :   5cc22:  tzcnt  %rcx,%rax
         : 2757  ./stdio-common/printf_fp.c:767
    0.00 :   5cc27:  mov    $0x3f,%ecx
    0.00 :   5cc2c:  sub    %r12d,%ecx
         : 2760  ./stdio-common/printf_fp.c:748
    0.00 :   5cc2f:  mov    -0x90(%rbp),%r12
         : 2762  ./stdio-common/printf_fp.c:767
    0.00 :   5cc36:  cmp    %ecx,%eax
    0.00 :   5cc38:  jge    5d32b <__GI___printf_fp_l+0x29fb>
         : 2765  ./stdio-common/printf_fp.c:780
    0.00 :   5cc3e:  movslq %r9d,%r13
         : 2767  ./stdio-common/printf_fp.c:779
    0.00 :   5cc41:  mov    %r8,%rdx
    0.00 :   5cc44:  lea    -0x8(%r10,%r11,1),%rsi
    0.00 :   5cc49:  sub    %r13,%rdx
    0.00 :   5cc4c:  mov    %r12,%rdi
    0.00 :   5cc4f:  call   54e30 <__mpn_rshift>
         : 2773  ./stdio-common/printf_fp.c:782
    0.00 :   5cc54:  mov    -0x68(%rbp),%rax
         : 2775  ./stdio-common/printf_fp.c:789
    0.00 :   5cc58:  mov    -0x98(%rbp),%esi
         : 2777  ./stdio-common/printf_fp.c:782
    0.00 :   5cc5e:  sub    %r13,%rax
    0.00 :   5cc61:  mov    %rax,-0x88(%rbp)
    0.00 :   5cc68:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5cc6d:  mov    %rcx,-0xd0(%rbp)
         : 2782  ./stdio-common/printf_fp.c:412 (discriminator 5)
    0.00 :   5cc74:  mov    $0x2d,%esi
         : 2784  ./stdio-common/printf_fp.c:414 (discriminator 5)
    0.00 :   5cc79:  mov    %r12,%rdi
    0.00 :   5cc7c:  call   838b0 <__woverflow>
    0.00 :   5cc81:  mov    -0xd0(%rbp),%rcx
    0.00 :   5cc88:  cmp    $0xffffffff,%eax
    0.00 :   5cc8b:  sete   %al
         : 2790  ./stdio-common/printf_fp.c:414
    0.00 :   5cc8e:  test   %al,%al
    0.00 :   5cc90:  je     5ae04 <__GI___printf_fp_l+0x4d4>
         : 2793  ./stdio-common/printf_fp.c:1269
    0.00 :   5cc96:  mov    $0xffffffff,%r13d
    0.00 :   5cc9c:  jmp    5aed8 <__GI___printf_fp_l+0x5a8>
    0.00 :   5cca1:  movslq %edx,%rbx
    0.00 :   5cca4:  jmp    5b14f <__GI___printf_fp_l+0x81f>
         : 2798  ./stdio-common/printf_fp.c:1013
    0.00 :   5cca9:  cmp    -0xf0(%rbp),%edi
    0.00 :   5ccaf:  jne    5ccc1 <__GI___printf_fp_l+0x2391>
    0.00 :   5ccb1:  mov    -0x100(%rbp),%r8d
    0.00 :   5ccb8:  test   %r8d,%r8d
    0.00 :   5ccbb:  jg     5c0f1 <__GI___printf_fp_l+0x17c1>
         : 2804  ./stdio-common/printf_fp.c:1097
    0.00 :   5ccc1:  mov    -0xf0(%rbp),%r9d
    0.00 :   5ccc8:  add    -0x100(%rbp),%r9d
         : 2807  ./stdio-common/printf_fp.c:1018
    0.00 :   5cccf:  cmpb   $0x67,-0x13c(%rbp)
         : 2809  ./stdio-common/printf_fp.c:1028
    0.00 :   5ccd6:  mov    (%rax),%esi
         : 2811  ./stdio-common/printf_fp.c:1018
    0.00 :   5ccd8:  jne    5c118 <__GI___printf_fp_l+0x17e8>
         : 2813  ./stdio-common/printf_fp.c:1018 (discriminator 1)
    0.00 :   5ccde:  cmpl   $0x66,-0x9c(%rbp)
    0.00 :   5cce5:  jne    5c118 <__GI___printf_fp_l+0x17e8>
         : 2816  ./stdio-common/printf_fp.c:1018
    0.00 :   5cceb:  mov    -0xb8(%rbp),%rdi
    0.00 :   5ccf2:  testb  $0x8,0xc(%rdi)
    0.00 :   5ccf6:  je     5c118 <__GI___printf_fp_l+0x17e8>
         : 2820  ./stdio-common/printf_fp.c:1019
    0.00 :   5ccfc:  mov    -0x130(%rbp),%rdi
    0.00 :   5cd03:  add    $0xc,%rdi
         : 2823  ./stdio-common/printf_fp.c:1018
    0.00 :   5cd07:  cmp    %rdi,%rax
    0.00 :   5cd0a:  jne    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cd10:  mov    -0x130(%rbp),%rdi
    0.00 :   5cd17:  cmpl   $0x30,0x8(%rdi)
    0.00 :   5cd1b:  jne    5c118 <__GI___printf_fp_l+0x17e8>
         : 2829  ./stdio-common/printf_fp.c:1097
    0.00 :   5cd21:  mov    -0x100(%rbp),%edi
    0.00 :   5cd27:  mov    -0xf0(%rbp),%ecx
    0.00 :   5cd2d:  lea    -0x1(%rdi,%rcx,1),%r9d
    0.00 :   5cd32:  jmp    5c118 <__GI___printf_fp_l+0x17e8>
    0.00 :   5cd37:  nopw   0x0(%rax,%rax,1)
         : 2835  ./stdio-common/printf_fp.c:1176 (discriminator 2)
    0.00 :   5cd40:  mov    0x28(%r12),%rax
    0.00 :   5cd45:  cmp    0x30(%r12),%rax
    0.00 :   5cd4a:  jae    5d464 <__GI___printf_fp_l+0x2b34>
         : 2839  ./stdio-common/printf_fp.c:1176 (discriminator 11)
    0.00 :   5cd50:  lea    0x1(%rax),%rdx
    0.00 :   5cd54:  mov    %rdx,0x28(%r12)
    0.00 :   5cd59:  movb   $0x2b,(%rax)
    0.00 :   5cd5c:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
         : 2844  ./stdio-common/printf_fp.c:1269 (discriminator 2)
    0.00 :   5cd61:  call   806a0 <_IO_padn>
    0.00 :   5cd66:  jmp    5c01b <__GI___printf_fp_l+0x16eb>
    0.00 :   5cd6b:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5cd76:  mov    %rdi,%r12
    0.00 :   5cd79:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
         : 2850  ./stdio-common/printf_fp.c:718
    0.00 :   5cd7e:  lea    -0x50(%rbp),%rdi
         : 2852  ./stdio-common/printf_fp.c:719
    0.00 :   5cd82:  mov    $0x40,%ecx
         : 2854  ./stdio-common/printf_fp.c:718
    0.00 :   5cd87:  mov    $0x2,%edx
         : 2856  ./stdio-common/printf_fp.c:716
    0.00 :   5cd8c:  movdqa 0x1854bc(%rip),%xmm4        # 1e2250 <othermask+0x1c0>
         : 2858  ./stdio-common/printf_fp.c:718
    0.00 :   5cd94:  mov    %rdi,%rsi
         : 2860  ./stdio-common/printf_fp.c:719
    0.00 :   5cd97:  sub    %r12d,%ecx
         : 2862  ./stdio-common/printf_fp.c:716
    0.00 :   5cd9a:  movaps %xmm4,-0x50(%rbp)
         : 2864  ./stdio-common/printf_fp.c:718
    0.00 :   5cd9e:  call   54d10 <__mpn_lshift>
         : 2866  ./stdio-common/printf_fp.c:728
    0.00 :   5cda3:  mov    -0x98(%rbp),%esi
    0.00 :   5cda9:  lea    0x2(%rsi),%eax
    0.00 :   5cdac:  cmp    %r13d,%eax
    0.00 :   5cdaf:  jge    5c5dd <__GI___printf_fp_l+0x1cad>
         : 2871  ./stdio-common/printf_fp.c:729
    0.00 :   5cdb5:  lea    0x3(%rsi),%eax
    0.00 :   5cdb8:  cmp    %r13d,%eax
    0.00 :   5cdbb:  jne    5c569 <__GI___printf_fp_l+0x1c39>
         : 2875  ./stdio-common/printf_fp.c:748
    0.00 :   5cdc1:  mov    -0x68(%rbp),%r8
         : 2877  ./stdio-common/printf_fp.c:745
    0.00 :   5cdc5:  mov    -0x70(%rbp),%r10
         : 2879  ./stdio-common/printf_fp.c:730
    0.00 :   5cdc9:  mov    -0x48(%rbp),%rcx
    0.00 :   5cdcd:  lea    0x0(,%r8,8),%rdx
    0.00 :   5cdd5:  lea    -0x8(%r10,%rdx,1),%rax
    0.00 :   5cdda:  jmp    5c6cc <__GI___printf_fp_l+0x1d9c>
         : 2884  ./stdio-common/printf_fp.c:393 (discriminator 1)
    0.00 :   5cddf:  fxam
    0.00 :   5cde1:  fnstsw %ax
    0.00 :   5cde3:  fstp   %st(0)
    0.00 :   5cde5:  mov    %eax,%r13d
    0.00 :   5cde8:  and    $0x200,%r13d
    0.00 :   5cdef:  jmp    5b8b7 <__GI___printf_fp_l+0xf87>
         : 2891  ./stdio-common/printf_fp.c:396 (discriminator 1)
    0.00 :   5cdf4:  movmskpd %xmm0,%r13d
    0.00 :   5cdf9:  and    $0x1,%r13d
    0.00 :   5cdfd:  jmp    5b8b7 <__GI___printf_fp_l+0xf87>
         : 2895  __guess_grouping():
         : 2896  ./stdio-common/printf_fp.c:1315
    0.00 :   5ce02:  lea    -0x1(%rdx),%eax
    0.00 :   5ce05:  xor    %edx,%edx
    0.00 :   5ce07:  div    %edi
    0.00 :   5ce09:  add    %esi,%eax
    0.00 :   5ce0b:  mov    %eax,-0x124(%rbp)
         : 2902  ./stdio-common/printf_fp.c:1316
    0.00 :   5ce11:  jmp    5bb27 <__GI___printf_fp_l+0x11f7>
         : 2904  __GI___printf_fp_l():
         : 2905  ./stdio-common/printf_fp.c:1181
    0.00 :   5ce16:  mov    -0xbc(%rbp),%esi
         : 2907  ./stdio-common/printf_fp.c:1171
    0.00 :   5ce1c:  movslq -0xd0(%rbp),%r13
    0.00 :   5ce23:  mov    %r9d,-0xe0(%rbp)
         : 2910  ./stdio-common/printf_fp.c:1181
    0.00 :   5ce2a:  mov    %r12,%rdi
    0.00 :   5ce2d:  test   %esi,%esi
    0.00 :   5ce2f:  mov    %r13,%rdx
    0.00 :   5ce32:  mov    $0x30,%esi
    0.00 :   5ce37:  je     5d11d <__GI___printf_fp_l+0x27ed>
         : 2916  ./stdio-common/printf_fp.c:1181 (discriminator 1)
    0.00 :   5ce3d:  call   824e0 <_IO_wpadn>
    0.00 :   5ce42:  mov    -0xe0(%rbp),%r9d
         : 2919  ./stdio-common/printf_fp.c:1181 (discriminator 4)
    0.00 :   5ce49:  cmp    %r13,%rax
    0.00 :   5ce4c:  jne    5b6ec <__GI___printf_fp_l+0xdbc>
         : 2922  ./stdio-common/printf_fp.c:1181 (discriminator 6)
    0.00 :   5ce52:  add    -0xd0(%rbp),%r9d
    0.00 :   5ce59:  jmp    5bdbc <__GI___printf_fp_l+0x148c>
         : 2925  ./stdio-common/printf_fp.c:926
    0.00 :   5ce5e:  mov    %r15,%rdi
    0.00 :   5ce61:  mov    %esi,-0xd0(%rbp)
    0.00 :   5ce67:  call   28380 <malloc@plt>
    0.00 :   5ce6c:  mov    %rax,-0x130(%rbp)
         : 2930  ./stdio-common/printf_fp.c:927
    0.00 :   5ce73:  test   %rax,%rax
    0.00 :   5ce76:  je     5b702 <__GI___printf_fp_l+0xdd2>
         : 2933  __libc_use_alloca():
         : 2934  ./stdio-common/../sysdeps/pthread/allocalim.h:29
    0.00 :   5ce7c:  movl   $0x0,-0x14c(%rbp)
    0.00 :   5ce86:  mov    -0xd0(%rbp),%esi
         : 2937  __GI___printf_fp_l():
         : 2938  ./stdio-common/../sysdeps/pthread/allocalim.h:29
    0.00 :   5ce8c:  movl   $0x1,-0x140(%rbp)
    0.00 :   5ce96:  jmp    5b55e <__GI___printf_fp_l+0xc2e>
         : 2941  ./stdio-common/printf_fp.c:1171 (discriminator 2)
    0.00 :   5ce9b:  call   806a0 <_IO_padn>
    0.00 :   5cea0:  jmp    5bd33 <__GI___printf_fp_l+0x1403>
    0.00 :   5cea5:  mov    -0xe0(%rbp),%r12
    0.00 :   5ceac:  jmp    5cb97 <__GI___printf_fp_l+0x2267>
         : 2946  ./stdio-common/printf_fp.c:585
    0.00 :   5ceb1:  movslq %r14d,%r14
    0.00 :   5ceb4:  sub    %r14,%rdx
    0.00 :   5ceb7:  test   %rdx,%rdx
    0.00 :   5ceba:  jle    5cee0 <__GI___printf_fp_l+0x25b0>
    0.00 :   5cebc:  lea    (%rdi,%rax,8),%rsi
    0.00 :   5cec0:  xor    %ecx,%ecx
    0.00 :   5cec2:  nopw   0x0(%rax,%rax,1)
         : 2954  ./stdio-common/printf_fp.c:585 (discriminator 3)
    0.00 :   5cec8:  mov    (%rsi,%rcx,8),%rdx
    0.00 :   5cecc:  mov    %rdx,(%rdi,%rcx,8)
    0.00 :   5ced0:  mov    -0x78(%rbp),%rdx
    0.00 :   5ced4:  add    $0x1,%rcx
    0.00 :   5ced8:  sub    %r14,%rdx
    0.00 :   5cedb:  cmp    %rcx,%rdx
    0.00 :   5cede:  jg     5cec8 <__GI___printf_fp_l+0x2598>
         : 2962  ./stdio-common/printf_fp.c:586 (discriminator 4)
    0.00 :   5cee0:  mov    %rdx,-0x78(%rbp)
         : 2964  ./stdio-common/printf_fp.c:587 (discriminator 4)
    0.00 :   5cee4:  mov    -0x88(%rbp),%rdx
    0.00 :   5ceeb:  sub    %r14,%rdx
    0.00 :   5ceee:  test   %rdx,%rdx
    0.00 :   5cef1:  jle    5cf1b <__GI___printf_fp_l+0x25eb>
    0.00 :   5cef3:  lea    (%r9,%rax,8),%rcx
         : 2970  ./stdio-common/printf_fp.c:587
    0.00 :   5cef7:  xor    %eax,%eax
    0.00 :   5cef9:  nopl   0x0(%rax)
         : 2973  ./stdio-common/printf_fp.c:587 (discriminator 3)
    0.00 :   5cf00:  mov    (%rcx,%rax,8),%rdx
    0.00 :   5cf04:  mov    %rdx,(%r9,%rax,8)
    0.00 :   5cf08:  mov    -0x88(%rbp),%rdx
    0.00 :   5cf0f:  add    $0x1,%rax
    0.00 :   5cf13:  sub    %r14,%rdx
    0.00 :   5cf16:  cmp    %rax,%rdx
    0.00 :   5cf19:  jg     5cf00 <__GI___printf_fp_l+0x25d0>
         : 2981  ./stdio-common/printf_fp.c:588 (discriminator 4)
    0.00 :   5cf1b:  mov    %rdx,-0x88(%rbp)
    0.00 :   5cf22:  jmp    5b348 <__GI___printf_fp_l+0xa18>
         : 2984  ./stdio-common/printf_fp.c:608
    0.00 :   5cf27:  mov    $0x40,%r15d
         : 2986  ./stdio-common/printf_fp.c:605
    0.00 :   5cf2d:  tzcnt  %r8,%r8
         : 2988  ./stdio-common/printf_fp.c:608
    0.00 :   5cf32:  sub    %ecx,%r15d
    0.00 :   5cf35:  test   %r14d,%r14d
    0.00 :   5cf38:  jne    5ca7e <__GI___printf_fp_l+0x214e>
    0.00 :   5cf3e:  xor    %r14d,%r14d
    0.00 :   5cf41:  xor    %ebx,%ebx
         : 2994  ./stdio-common/printf_fp.c:608 (discriminator 1)
    0.00 :   5cf43:  cmp    %r8d,%r15d
    0.00 :   5cf46:  jg     5d240 <__GI___printf_fp_l+0x2910>
         : 2997  ./stdio-common/printf_fp.c:624
    0.00 :   5cf4c:  sub    %rbx,%rdx
    0.00 :   5cf4f:  mov    %r15d,%ecx
         : 3000  ./stdio-common/printf_fp.c:626
    0.00 :   5cf52:  add    $0x1,%r14d
         : 3002  ./stdio-common/printf_fp.c:624
    0.00 :   5cf56:  call   54e30 <__mpn_rshift>
         : 3004  ./stdio-common/printf_fp.c:627
    0.00 :   5cf5b:  mov    -0x90(%rbp),%rdi
    0.00 :   5cf62:  mov    %r15d,%ecx
         : 3007  ./stdio-common/printf_fp.c:626
    0.00 :   5cf65:  movslq %r14d,%r14
         : 3009  ./stdio-common/printf_fp.c:627
    0.00 :   5cf68:  mov    -0x88(%rbp),%rdx
         : 3011  ./stdio-common/printf_fp.c:626
    0.00 :   5cf6f:  sub    %r14,-0x78(%rbp)
         : 3013  ./stdio-common/printf_fp.c:627
    0.00 :   5cf73:  lea    (%rdi,%r13,1),%rsi
    0.00 :   5cf77:  sub    %rbx,%rdx
    0.00 :   5cf7a:  call   54e30 <__mpn_rshift>
         : 3017  ./stdio-common/printf_fp.c:629
    0.00 :   5cf7f:  mov    -0x88(%rbp),%rdx
    0.00 :   5cf86:  mov    -0x90(%rbp),%rcx
    0.00 :   5cf8d:  mov    %rdx,%rax
    0.00 :   5cf90:  sub    %rbx,%rax
    0.00 :   5cf93:  cmpq   $0x0,-0x8(%rcx,%rax,8)
    0.00 :   5cf99:  jne    5cae7 <__GI___printf_fp_l+0x21b7>
    0.00 :   5cf9f:  mov    %rdx,%rax
    0.00 :   5cfa2:  sub    %r14,%rax
    0.00 :   5cfa5:  jmp    5cae7 <__GI___printf_fp_l+0x21b7>
         : 3027  ./stdio-common/printf_fp.c:939
    0.00 :   5cfaa:  movl   $0x0,-0x134(%rbp)
         : 3029  ./stdio-common/printf_fp.c:933
    0.00 :   5cfb4:  mov    %r14,%rax
    0.00 :   5cfb7:  lea    -0xa0(%rbp),%r13
    0.00 :   5cfbe:  jmp    5b5d0 <__GI___printf_fp_l+0xca0>
         : 3033  ./stdio-common/printf_fp.c:1259
    0.00 :   5cfc3:  mov    -0xe0(%rbp),%rdi
    0.00 :   5cfca:  call   28370 <free@plt>
         : 3036  ./stdio-common/printf_fp.c:1260
    0.00 :   5cfcf:  mov    -0x130(%rbp),%rdi
    0.00 :   5cfd6:  call   28370 <free@plt>
         : 3039  ./stdio-common/printf_fp.c:1263
    0.00 :   5cfdb:  movq   $0x0,-0xe0(%rbp)
         : 3041  ./stdio-common/printf_fp.c:1264
    0.00 :   5cfe6:  movq   $0x0,-0x130(%rbp)
    0.00 :   5cff1:  jmp    5bfdb <__GI___printf_fp_l+0x16ab>
    0.00 :   5cff6:  mov    %rcx,-0xd0(%rbp)
         : 3045  ./stdio-common/printf_fp.c:412 (discriminator 10)
    0.00 :   5cffd:  mov    $0x2d,%esi
         : 3047  ./stdio-common/printf_fp.c:414 (discriminator 10)
    0.00 :   5d002:  mov    %r12,%rdi
    0.00 :   5d005:  call   8d800 <__overflow>
    0.00 :   5d00a:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d011:  cmp    $0xffffffff,%eax
    0.00 :   5d014:  sete   %al
    0.00 :   5d017:  jmp    5cc8e <__GI___printf_fp_l+0x235e>
         : 3054  ./stdio-common/printf_fp.c:961
    0.00 :   5d01c:  movl   $0x0,-0x100(%rbp)
    0.00 :   5d026:  mov    -0xf0(%rbp),%r9d
    0.00 :   5d02d:  mov    %rax,%r15
         : 3058  ./stdio-common/printf_fp.c:960
    0.00 :   5d030:  xor    %ebx,%ebx
    0.00 :   5d032:  jmp    5b9a6 <__GI___printf_fp_l+0x1076>
         : 3061  ./stdio-common/printf_fp.c:1122 (discriminator 1)
    0.00 :   5d037:  cmpb   $0x67,-0x13c(%rbp)
    0.00 :   5d03e:  jne    5d049 <__GI___printf_fp_l+0x2719>
    0.00 :   5d040:  cmp    $0x4,%eax
    0.00 :   5d043:  je     5d4bf <__GI___printf_fp_l+0x2b8f>
         : 3066  ./stdio-common/printf_fp.c:1142
    0.00 :   5d049:  mov    $0x2d,%edi
    0.00 :   5d04e:  jmp    5bc42 <__GI___printf_fp_l+0x1312>
    0.00 :   5d053:  mov    %rcx,-0xd0(%rbp)
         : 3070  ./stdio-common/printf_fp.c:414 (discriminator 5)
    0.00 :   5d05a:  mov    $0x2b,%esi
    0.00 :   5d05f:  jmp    5cc79 <__GI___printf_fp_l+0x2349>
         : 3073  ./stdio-common/printf_fp.c:1178 (discriminator 2)
    0.00 :   5d064:  mov    0x28(%r12),%rax
    0.00 :   5d069:  cmp    0x30(%r12),%rax
    0.00 :   5d06e:  jae    5d4a9 <__GI___printf_fp_l+0x2b79>
         : 3077  ./stdio-common/printf_fp.c:1178 (discriminator 11)
    0.00 :   5d074:  lea    0x1(%rax),%rdx
    0.00 :   5d078:  mov    %rdx,0x28(%r12)
    0.00 :   5d07d:  movb   $0x20,(%rax)
    0.00 :   5d080:  jmp    5bd8e <__GI___printf_fp_l+0x145e>
         : 3082  ./stdio-common/printf_fp.c:1054
    0.00 :   5d085:  mov    -0x128(%rbp),%esi
         : 3084  ./stdio-common/printf_fp.c:1059
    0.00 :   5d08b:  mov    -0x130(%rbp),%rax
         : 3086  ./stdio-common/printf_fp.c:1054
    0.00 :   5d092:  cmp    %esi,-0x134(%rbp)
    0.00 :   5d098:  je     5d339 <__GI___printf_fp_l+0x2a09>
         : 3089  ./stdio-common/printf_fp.c:1081
    0.00 :   5d09e:  addl   $0x1,-0x134(%rbp)
         : 3091  ./stdio-common/printf_fp.c:1080
    0.00 :   5d0a5:  lea    0x4(%rax),%r14
    0.00 :   5d0a9:  movl   $0x31,0x4(%rax)
         : 3094  ./stdio-common/printf_fp.c:1081
    0.00 :   5d0b0:  jmp    5c971 <__GI___printf_fp_l+0x2041>
         : 3096  ./stdio-common/printf_fp.c:1237
    0.00 :   5d0b5:  mov    -0xb8(%rbp),%rax
    0.00 :   5d0bc:  testb  $0x8,0xd(%rax)
    0.00 :   5d0c0:  jne    5d0de <__GI___printf_fp_l+0x27ae>
         : 3100  ./stdio-common/printf_fp.c:1254
    0.00 :   5d0c2:  mov    %r9d,%r13d
    0.00 :   5d0c5:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
         : 3103  ./stdio-common/printf_fp.c:808
    0.00 :   5d0ca:  mov    -0x90(%rbp),%rdi
    0.00 :   5d0d1:  mov    %r8,%rdx
    0.00 :   5d0d4:  call   54e30 <__mpn_rshift>
    0.00 :   5d0d9:  jmp    5cb85 <__GI___printf_fp_l+0x2255>
         : 3108  ./stdio-common/printf_fp.c:1227
    0.00 :   5d0de:  mov    -0xe0(%rbp),%rdi
         : 3110  ./stdio-common/printf_fp.c:1221
    0.00 :   5d0e5:  mov    -0xe0(%rbp),%rax
    0.00 :   5d0ec:  mov    -0xf0(%rbp),%rbx
         : 3113  ./stdio-common/printf_fp.c:1247
    0.00 :   5d0f3:  mov    %rdi,%rsi
    0.00 :   5d0f6:  mov    %r9d,-0xe8(%rbp)
         : 3116  ./stdio-common/printf_fp.c:1221
    0.00 :   5d0fd:  add    %rax,%rbx
         : 3118  ./stdio-common/printf_fp.c:1247
    0.00 :   5d100:  mov    %rax,%rdi
    0.00 :   5d103:  mov    %rbx,%rdx
    0.00 :   5d106:  call   5a620 <_i18n_number_rewrite>
    0.00 :   5d10b:  mov    -0xe8(%rbp),%r9d
         : 3123  ./stdio-common/printf_fp.c:1221
    0.00 :   5d112:  mov    %rbx,%rdi
         : 3125  ./stdio-common/printf_fp.c:1247
    0.00 :   5d115:  mov    %rax,%r14
         : 3127  ./stdio-common/printf_fp.c:1254
    0.00 :   5d118:  jmp    5bf58 <__GI___printf_fp_l+0x1628>
         : 3129  ./stdio-common/printf_fp.c:1181 (discriminator 2)
    0.00 :   5d11d:  call   806a0 <_IO_padn>
    0.00 :   5d122:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d129:  jmp    5ce49 <__GI___printf_fp_l+0x2519>
         : 3133  ./stdio-common/printf_fp.c:1247
    0.00 :   5d12e:  xor    %edx,%edx
    0.00 :   5d130:  xor    %esi,%esi
    0.00 :   5d132:  xor    %edi,%edi
    0.00 :   5d134:  mov    %r9d,-0xe0(%rbp)
    0.00 :   5d13b:  call   5a620 <_i18n_number_rewrite>
         : 3139  ./stdio-common/printf_fp.c:1254
    0.00 :   5d140:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d147:  jmp    5c212 <__GI___printf_fp_l+0x18e2>
         : 3142  ./stdio-common/printf_fp.c:1211
    0.00 :   5d14c:  mov    %rax,%rdi
    0.00 :   5d14f:  mov    %r9d,-0xe8(%rbp)
    0.00 :   5d156:  call   28380 <malloc@plt>
         : 3146  ./stdio-common/printf_fp.c:1212
    0.00 :   5d15b:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d162:  test   %rax,%rax
         : 3149  ./stdio-common/printf_fp.c:1211
    0.00 :   5d165:  mov    %rax,-0xe0(%rbp)
         : 3151  ./stdio-common/printf_fp.c:1212
    0.00 :   5d16c:  jne    5beb6 <__GI___printf_fp_l+0x1586>
    0.00 :   5d172:  jmp    5b6f6 <__GI___printf_fp_l+0xdc6>
    0.00 :   5d177:  nopw   0x0(%rax,%rax,1)
         : 3155  ./stdio-common/printf_fp.c:608
    0.00 :   5d180:  mov    $0x40,%r15d
    0.00 :   5d186:  sub    %ecx,%r15d
    0.00 :   5d189:  jmp    5ca7e <__GI___printf_fp_l+0x214e>
         : 3159  ./stdio-common/printf_fp.c:746
    0.00 :   5d18e:  cmp    $0x3f,%r12d
    0.00 :   5d192:  je     5d4ef <__GI___printf_fp_l+0x2bbf>
         : 3162  ./stdio-common/printf_fp.c:756
    0.00 :   5d198:  mov    $0x3f,%ecx
         : 3164  ./stdio-common/printf_fp.c:753
    0.00 :   5d19d:  tzcnt  %rax,%rax
         : 3166  ./stdio-common/printf_fp.c:756
    0.00 :   5d1a2:  sub    %r12d,%ecx
    0.00 :   5d1a5:  cmp    %ecx,%eax
    0.00 :   5d1a7:  jl     5d1be <__GI___printf_fp_l+0x288e>
    0.00 :   5d1a9:  mov    -0x90(%rbp),%r12
    0.00 :   5d1b0:  xor    %r13d,%r13d
         : 3172  ./stdio-common/printf_fp.c:769
    0.00 :   5d1b3:  mov    %r8,%rdx
    0.00 :   5d1b6:  mov    %r10,%rsi
    0.00 :   5d1b9:  jmp    5cc4c <__GI___printf_fp_l+0x231c>
         : 3176  ./stdio-common/printf_fp.c:762
    0.00 :   5d1be:  mov    -0x90(%rbp),%rdi
    0.00 :   5d1c5:  mov    %r8,%rdx
    0.00 :   5d1c8:  mov    %r10,%rsi
         : 3180  ./stdio-common/printf_fp.c:763
    0.00 :   5d1cb:  lea    0x1(%r12),%ecx
         : 3182  ./stdio-common/printf_fp.c:762
    0.00 :   5d1d0:  call   54d10 <__mpn_lshift>
         : 3184  ./stdio-common/printf_fp.c:765
    0.00 :   5d1d5:  mov    -0x90(%rbp),%rdx
         : 3186  ./stdio-common/printf_fp.c:789
    0.00 :   5d1dc:  mov    -0x98(%rbp),%esi
         : 3188  ./stdio-common/printf_fp.c:762
    0.00 :   5d1e2:  mov    %rax,%r8
         : 3190  ./stdio-common/printf_fp.c:764
    0.00 :   5d1e5:  mov    -0x68(%rbp),%rax
    0.00 :   5d1e9:  add    $0x1,%rax
    0.00 :   5d1ed:  mov    %rax,-0x88(%rbp)
         : 3194  ./stdio-common/printf_fp.c:765
    0.00 :   5d1f4:  mov    %r8,-0x8(%rdx,%rax,8)
    0.00 :   5d1f9:  jmp    5c569 <__GI___printf_fp_l+0x1c39>
    0.00 :   5d1fe:  mov    %rcx,-0xd0(%rbp)
         : 3198  ./stdio-common/printf_fp.c:414 (discriminator 10)
    0.00 :   5d205:  mov    $0x2b,%esi
    0.00 :   5d20a:  jmp    5d002 <__GI___printf_fp_l+0x26d2>
         : 3201  ./stdio-common/printf_fp.c:416 (discriminator 5)
    0.00 :   5d20f:  mov    $0x20,%esi
    0.00 :   5d214:  mov    %r12,%rdi
    0.00 :   5d217:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d21e:  call   838b0 <__woverflow>
    0.00 :   5d223:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d22a:  cmp    $0xffffffff,%eax
    0.00 :   5d22d:  jne    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5d233:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5d238:  nopl   0x0(%rax,%rax,1)
         : 3211  ./stdio-common/printf_fp.c:613
    0.00 :   5d240:  mov    %rdi,%rsi
    0.00 :   5d243:  mov    %ecx,-0xd0(%rbp)
    0.00 :   5d249:  call   54d10 <__mpn_lshift>
         : 3215  ./stdio-common/printf_fp.c:614
    0.00 :   5d24e:  mov    -0x90(%rbp),%rdi
    0.00 :   5d255:  mov    -0xd0(%rbp),%ecx
    0.00 :   5d25b:  mov    -0x88(%rbp),%rdx
    0.00 :   5d262:  mov    %rdi,%rsi
    0.00 :   5d265:  call   54d10 <__mpn_lshift>
         : 3221  ./stdio-common/printf_fp.c:615
    0.00 :   5d26a:  test   %rax,%rax
    0.00 :   5d26d:  je     5b348 <__GI___printf_fp_l+0xa18>
         : 3224  ./stdio-common/printf_fp.c:616
    0.00 :   5d273:  mov    -0x88(%rbp),%rdx
    0.00 :   5d27a:  lea    0x1(%rdx),%rcx
    0.00 :   5d27e:  mov    %rcx,-0x88(%rbp)
    0.00 :   5d285:  mov    -0x90(%rbp),%rcx
    0.00 :   5d28c:  mov    %rax,(%rcx,%rdx,8)
    0.00 :   5d290:  jmp    5b348 <__GI___printf_fp_l+0xa18>
    0.00 :   5d295:  mov    %r8,-0xf0(%rbp)
    0.00 :   5d29c:  mov    %r9d,-0xe8(%rbp)
         : 3233  IO_validate_vtable():
         : 3234  ./stdio-common/../libio/libioP.h:946
    0.00 :   5d2a3:  call   89ef0 <_IO_vtable_check>
         : 3236  __GI___printf_fp_l():
         : 3237  ./stdio-common/printf_fp.c:1254
    0.00 :   5d2a8:  mov    0x38(%rbx),%rax
    0.00 :   5d2ac:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5d2b7:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d2be:  mov    -0xf0(%rbp),%r8
    0.00 :   5d2c5:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5d2ca:  mov    %r9d,-0xe0(%rbp)
         : 3244  ./stdio-common/printf_fp.c:1174 (discriminator 10)
    0.00 :   5d2d1:  mov    $0x2d,%esi
         : 3246  ./stdio-common/printf_fp.c:1178 (discriminator 10)
    0.00 :   5d2d6:  mov    %r12,%rdi
    0.00 :   5d2d9:  call   8d800 <__overflow>
    0.00 :   5d2de:  mov    -0xe0(%rbp),%r9d
    0.00 :   5d2e5:  cmp    $0xffffffff,%eax
    0.00 :   5d2e8:  sete   %al
    0.00 :   5d2eb:  jmp    5b6e4 <__GI___printf_fp_l+0xdb4>
    0.00 :   5d2f0:  mov    %r9d,-0xe8(%rbp)
         : 3254  IO_validate_vtable():
         : 3255  ./stdio-common/../libio/libioP.h:946
    0.00 :   5d2f7:  mov    %rdi,-0xf0(%rbp)
    0.00 :   5d2fe:  call   89ef0 <_IO_vtable_check>
         : 3258  __GI___printf_fp_l():
         : 3259  ./stdio-common/printf_fp.c:1254
    0.00 :   5d303:  mov    0x38(%rbx),%rax
    0.00 :   5d307:  mov    -0xe8(%rbp),%r9d
    0.00 :   5d30e:  mov    -0xf0(%rbp),%r8
    0.00 :   5d315:  jmp    5bf97 <__GI___printf_fp_l+0x1667>
    0.00 :   5d31a:  mov    %r9d,-0xe0(%rbp)
         : 3265  ./stdio-common/printf_fp.c:1176 (discriminator 5)
    0.00 :   5d321:  mov    $0x2b,%esi
    0.00 :   5d326:  jmp    5b6cf <__GI___printf_fp_l+0xd9f>
         : 3268  ./stdio-common/printf_fp.c:748
    0.00 :   5d32b:  movslq %edi,%r13
         : 3270  ./stdio-common/printf_fp.c:745
    0.00 :   5d32e:  mov    %r14,%r10
         : 3272  ./stdio-common/printf_fp.c:748
    0.00 :   5d331:  sub    %r13,%r8
    0.00 :   5d334:  jmp    5d1b3 <__GI___printf_fp_l+0x2883>
         : 3275  ./stdio-common/printf_fp.c:1059
    0.00 :   5d339:  mov    -0xc0(%rbp),%esi
         : 3277  ./stdio-common/printf_fp.c:1060
    0.00 :   5d33f:  movl   $0x31,(%rax)
         : 3279  ./stdio-common/printf_fp.c:1059
    0.00 :   5d345:  mov    %esi,0x4(%rax)
         : 3281  ./stdio-common/printf_fp.c:1062
    0.00 :   5d348:  mov    -0xb8(%rbp),%rax
    0.00 :   5d34f:  testb  $0x8,0xc(%rax)
    0.00 :   5d353:  jne    5d35d <__GI___printf_fp_l+0x2a2d>
    0.00 :   5d355:  test   %ebx,%ebx
    0.00 :   5d357:  je     5d486 <__GI___printf_fp_l+0x2b56>
         : 3287  ./stdio-common/printf_fp.c:1065
    0.00 :   5d35d:  movslq -0x134(%rbp),%rax
    0.00 :   5d364:  mov    -0x130(%rbp),%rdi
    0.00 :   5d36b:  movl   $0x30,0x8(%rdi,%rax,4)
         : 3291  ./stdio-common/printf_fp.c:1069
    0.00 :   5d373:  lea    0x1(%rbx,%rax,1),%ebx
    0.00 :   5d377:  mov    %rdi,%r14
         : 3294  ./stdio-common/printf_fp.c:1074
    0.00 :   5d37a:  mov    -0xb8(%rbp),%rax
         : 3296  ./stdio-common/printf_fp.c:1072
    0.00 :   5d381:  addl   $0x1,-0x98(%rbp)
         : 3298  ./stdio-common/printf_fp.c:1074
    0.00 :   5d388:  movslq 0x8(%rax),%rsi
    0.00 :   5d38c:  mov    0x1bca65(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   5d393:  mov    %fs:(%rax),%rax
         : 3302  ./stdio-common/printf_fp.c:1070
    0.00 :   5d397:  movl   $0x1,-0x134(%rbp)
         : 3304  ./stdio-common/printf_fp.c:1074
    0.00 :   5d3a1:  movzwl (%rax,%rsi,2),%eax
    0.00 :   5d3a5:  and    $0x100,%ax
    0.00 :   5d3a9:  cmp    $0x1,%ax
    0.00 :   5d3ad:  sbb    %eax,%eax
    0.00 :   5d3af:  and    $0x20,%eax
    0.00 :   5d3b2:  add    $0x45,%eax
    0.00 :   5d3b5:  mov    %eax,-0x9c(%rbp)
    0.00 :   5d3bb:  jmp    5c971 <__GI___printf_fp_l+0x2041>
         : 3313  ./stdio-common/printf_fp.c:579
    0.00 :   5d3c0:  test   %esi,%esi
    0.00 :   5d3c2:  je     5b348 <__GI___printf_fp_l+0xa18>
         : 3316  ./stdio-common/printf_fp.c:596
    0.00 :   5d3c8:  mov    -0x90(%rbp),%rsi
         : 3318  ./stdio-common/printf_fp.c:595
    0.00 :   5d3cf:  tzcnt  %rax,%rax
    0.00 :   5d3d4:  mov    %eax,%r8d
         : 3321  ./stdio-common/printf_fp.c:596
    0.00 :   5d3d7:  mov    (%rsi),%r13
    0.00 :   5d3da:  test   %r13,%r13
    0.00 :   5d3dd:  je     5d498 <__GI___printf_fp_l+0x2b68>
         : 3325  ./stdio-common/printf_fp.c:599
    0.00 :   5d3e3:  xor    %r8d,%r8d
         : 3327  ./stdio-common/printf_fp.c:608
    0.00 :   5d3e6:  mov    $0x40,%r15d
         : 3329  ./stdio-common/printf_fp.c:573
    0.00 :   5d3ec:  mov    %rdi,%rsi
         : 3331  ./stdio-common/printf_fp.c:599
    0.00 :   5d3ef:  tzcnt  %r13,%r8
         : 3333  ./stdio-common/printf_fp.c:600
    0.00 :   5d3f4:  cmp    %r8d,%eax
    0.00 :   5d3f7:  cmovle %eax,%r8d
         : 3336  ./stdio-common/printf_fp.c:608
    0.00 :   5d3fb:  sub    %ecx,%r15d
         : 3338  ./stdio-common/printf_fp.c:573
    0.00 :   5d3fe:  xor    %r13d,%r13d
    0.00 :   5d401:  jmp    5cf3e <__GI___printf_fp_l+0x260e>
         : 3341  ./stdio-common/printf_fp.c:416 (discriminator 10)
    0.00 :   5d406:  mov    $0x20,%esi
    0.00 :   5d40b:  mov    %r12,%rdi
    0.00 :   5d40e:  mov    %rcx,-0xd0(%rbp)
    0.00 :   5d415:  call   8d800 <__overflow>
    0.00 :   5d41a:  mov    -0xd0(%rbp),%rcx
    0.00 :   5d421:  cmp    $0xffffffff,%eax
    0.00 :   5d424:  jne    5ae04 <__GI___printf_fp_l+0x4d4>
    0.00 :   5d42a:  jmp    5b702 <__GI___printf_fp_l+0xdd2>
    0.00 :   5d42f:  nop
         : 3351  ./stdio-common/printf_fp.c:1254
    0.00 :   5d430:  movq   $0x0,-0xe0(%rbp)
    0.00 :   5d43b:  mov    %r9d,%r13d
    0.00 :   5d43e:  jmp    5bfcb <__GI___printf_fp_l+0x169b>
         : 3355  ./stdio-common/printf_fp.c:1269 (discriminator 5)
    0.00 :   5d443:  mov    -0x14c(%rbp),%r11d
    0.00 :   5d44a:  test   %r11d,%r11d
    0.00 :   5d44d:  jne    5b702 <__GI___printf_fp_l+0xdd2>
         : 3359  ./stdio-common/printf_fp.c:1269 (discriminator 7)
    0.00 :   5d453:  mov    -0xe0(%rbp),%rdi
    0.00 :   5d45a:  call   28370 <free@plt>
    0.00 :   5d45f:  jmp    5b6f6 <__GI___printf_fp_l+0xdc6>
    0.00 :   5d464:  mov    %r9d,-0xe0(%rbp)
         : 3364  ./stdio-common/printf_fp.c:1176 (discriminator 10)
    0.00 :   5d46b:  mov    $0x2b,%esi
    0.00 :   5d470:  jmp    5d2d6 <__GI___printf_fp_l+0x29a6>
    0.00 :   5d475:  mov    %r9d,-0xe0(%rbp)
         : 3368  ./stdio-common/printf_fp.c:1178 (discriminator 5)
    0.00 :   5d47c:  mov    $0x20,%esi
    0.00 :   5d481:  jmp    5b6cf <__GI___printf_fp_l+0xd9f>
    0.00 :   5d486:  mov    -0x128(%rbp),%ebx
    0.00 :   5d48c:  mov    -0x130(%rbp),%r14
    0.00 :   5d493:  jmp    5d37a <__GI___printf_fp_l+0x2a4a>
         : 3374  ./stdio-common/printf_fp.c:608
    0.00 :   5d498:  mov    $0x40,%r15d
         : 3376  ./stdio-common/printf_fp.c:573
    0.00 :   5d49e:  mov    %rdi,%rsi
         : 3378  ./stdio-common/printf_fp.c:608
    0.00 :   5d4a1:  sub    %ecx,%r15d
    0.00 :   5d4a4:  jmp    5cf3e <__GI___printf_fp_l+0x260e>
    0.00 :   5d4a9:  mov    %r9d,-0xe0(%rbp)
         : 3382  ./stdio-common/printf_fp.c:1178 (discriminator 10)
    0.00 :   5d4b0:  mov    $0x20,%esi
    0.00 :   5d4b5:  jmp    5d2d6 <__GI___printf_fp_l+0x29a6>
         : 3385  ./stdio-common/printf_fp.c:1272
    0.00 :   5d4ba:  call   136550 <__stack_chk_fail>
         : 3387  ./stdio-common/printf_fp.c:1129
    0.00 :   5d4bf:  mov    $0x6,%edx
    0.00 :   5d4c4:  lea    0x185575(%rip),%rsi        # 1e2a40 <default_rwlockattr+0x368>
    0.00 :   5d4cb:  mov    %r14,%rdi
    0.00 :   5d4ce:  call   c5ae0 <wmemcpy>
         : 3392  ./stdio-common/printf_fp.c:1130
    0.00 :   5d4d3:  mov    -0xc0(%rbp),%eax
    0.00 :   5d4d9:  mov    %eax,0x4(%r14)
         : 3395  ./stdio-common/printf_fp.c:1131
    0.00 :   5d4dd:  lea    0x8(%r14),%rax
    0.00 :   5d4e1:  cmp    %r15,%rax
    0.00 :   5d4e4:  jbe    5d4f9 <__GI___printf_fp_l+0x2bc9>
         : 3399  ./stdio-common/printf_fp.c:1137
    0.00 :   5d4e6:  add    $0x14,%r15
    0.00 :   5d4ea:  jmp    5bcb3 <__GI___printf_fp_l+0x1383>
         : 3402  ./stdio-common/printf_fp.c:745
    0.00 :   5d4ef:  xor    %r13d,%r13d
    0.00 :   5d4f2:  xor    %edi,%edi
    0.00 :   5d4f4:  jmp    5c657 <__GI___printf_fp_l+0x1d27>
         : 3406  ./stdio-common/printf_fp.c:1133
    0.00 :   5d4f9:  mov    %r15,%rdx
    0.00 :   5d4fc:  lea    0x18(%r14),%rdi
    0.00 :   5d500:  mov    $0x30,%esi
         : 3410  ./stdio-common/printf_fp.c:1134
    0.00 :   5d505:  add    $0x10,%r15
         : 3412  ./stdio-common/printf_fp.c:1133
    0.00 :   5d509:  sub    %rax,%rdx
    0.00 :   5d50c:  sar    $0x2,%rdx
    0.00 :   5d510:  call   283f0 <*ABS*+0xc5b00@plt>
         : 3416  ./stdio-common/printf_fp.c:1134
    0.00 :   5d515:  jmp    5bcb3 <__GI___printf_fp_l+0x1383>
    0.00 :   5d51a:  jmp    28961 <__GI___printf_fp_l.cold>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (6 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b240 <check_match>:
         : 6    check_match():
         : 7    ./elf/dl-lookup.c:70
   35.15 :   b240:   push   %r14
         : 9    ./elf/dl-lookup.c:73
    0.00 :   b242:   movzwl 0x6(%r9),%eax
         : 11   ./elf/dl-lookup.c:70
   12.27 :   b247:   mov    %rdi,%r10
    0.00 :   b24a:   push   %r13
    0.00 :   b24c:   mov    %rdx,%r13
    0.00 :   b24f:   mov    %r8d,%edx
    0.00 :   b252:   push   %r12
    0.00 :   b254:   push   %rbp
    0.00 :   b255:   mov    %ecx,%ebp
    0.00 :   b257:   movzbl 0x4(%r9),%ecx
   17.62 :   b25c:   push   %rbx
    0.00 :   b25d:   mov    %r9,%rbx
    0.00 :   b260:   mov    0x40(%rsp),%r12
    0.00 :   b265:   and    $0xf,%ecx
         : 24   ./elf/dl-lookup.c:73
    0.00 :   b268:   cmpq   $0x0,0x8(%r9)
    0.00 :   b26d:   je     b390 <check_match+0x150>
    0.00 :   b273:   xor    %r8d,%r8d
    0.00 :   b276:   test   %ax,%ax
         : 29   ./elf/dl-lookup.c:86
    0.00 :   b279:   mov    $0xfffffb98,%eax
         : 31   ./elf/dl-lookup.c:73
    0.00 :   b27e:   sete   %r8b
         : 33   ./elf/dl-lookup.c:86
    0.00 :   b282:   sar    %cl,%eax
         : 35   ./elf/dl-lookup.c:73
    0.00 :   b284:   and    %edx,%r8d
         : 37   ./elf/dl-lookup.c:86
    0.00 :   b287:   and    $0x1,%eax
    0.00 :   b28a:   or     %eax,%r8d
    0.00 :   b28d:   jne    b360 <check_match+0x120>
         : 41   ./elf/dl-lookup.c:89
    0.00 :   b293:   cmp    %rsi,%rbx
    0.00 :   b296:   je     b2af <check_match+0x6f>
         : 44   ./elf/dl-lookup.c:89 (discriminator 1)
    0.00 :   b298:   mov    (%rbx),%edi
    0.00 :   b29a:   mov    %r10,%rsi
    0.00 :   b29d:   add    0x38(%rsp),%rdi
    0.00 :   b2a2:   call   27220 <strcmp>
    0.00 :   b2a7:   test   %eax,%eax
    0.00 :   b2a9:   jne    b360 <check_match+0x120>
         : 51   ./elf/dl-lookup.c:93
    0.00 :   b2af:   mov    0x348(%r12),%rax
         : 53   ./elf/dl-lookup.c:94
    0.00 :   b2b7:   test   %r13,%r13
    0.00 :   b2ba:   je     b310 <check_match+0xd0>
         : 56   ./elf/dl-lookup.c:96
    0.00 :   b2bc:   test   %rax,%rax
    0.00 :   b2bf:   je     b3b0 <check_match+0x170>
         : 59   ./elf/dl-lookup.c:115
    0.00 :   b2c5:   mov    0x30(%rsp),%edx
    0.00 :   b2c9:   movzwl (%rax,%rdx,2),%r14d
         : 62   ./elf/dl-lookup.c:116
   16.92 :   b2ce:   mov    %r14,%rax
    0.00 :   b2d1:   and    $0x7fff,%eax
    0.00 :   b2d6:   lea    (%rax,%rax,2),%rdx
    0.00 :   b2da:   mov    0x2e8(%r12),%rax
    0.00 :   b2e2:   lea    (%rax,%rdx,8),%rax
    0.00 :   b2e6:   mov    0x8(%rax),%ebp
    0.00 :   b2e9:   cmp    0x8(%r13),%ebp
    0.00 :   b2ed:   je     b370 <check_match+0x130>
         : 71   ./elf/dl-lookup.c:118
    0.00 :   b2f3:   or     0xc(%r13),%ebp
    0.00 :   b2f7:   jne    b360 <check_match+0x120>
         : 74   ./elf/dl-lookup.c:119
    0.00 :   b2f9:   test   %r14w,%r14w
    0.00 :   b2fd:   js     b360 <check_match+0x120>
         : 77   ./elf/dl-lookup.c:78
    0.00 :   b2ff:   mov    %rbx,%rax
         : 79   ./elf/dl-lookup.c:162
    0.00 :   b302:   pop    %rbx
    0.00 :   b303:   pop    %rbp
    0.00 :   b304:   pop    %r12
    0.00 :   b306:   pop    %r13
    0.00 :   b308:   pop    %r14
    0.00 :   b30a:   ret
    0.00 :   b30b:   nopl   0x0(%rax,%rax,1)
         : 87   ./elf/dl-lookup.c:144
    0.00 :   b310:   test   %rax,%rax
    0.00 :   b313:   je     b2ff <check_match+0xbf>
         : 90   ./elf/dl-lookup.c:146
    0.00 :   b315:   mov    0x30(%rsp),%edx
    0.00 :   b319:   movzwl (%rax,%rdx,2),%edx
         : 93   ./elf/dl-lookup.c:147
    0.00 :   b31d:   xor    %eax,%eax
         : 95   ./elf/dl-lookup.c:146
    0.00 :   b31f:   mov    %edx,%ecx
    0.00 :   b321:   and    $0x7fff,%ecx
         : 98   ./elf/dl-lookup.c:147
    0.00 :   b327:   and    $0x2,%ebp
    0.00 :   b32a:   sete   %al
    0.00 :   b32d:   add    $0x2,%eax
         : 102  ./elf/dl-lookup.c:146
    0.00 :   b330:   cmp    %eax,%ecx
    0.00 :   b332:   jl     b2ff <check_match+0xbf>
         : 105  ./elf/dl-lookup.c:150
    0.00 :   b334:   test   %dx,%dx
    0.00 :   b337:   js     b360 <check_match+0x120>
         : 108  ./elf/dl-lookup.c:151
    0.00 :   b339:   mov    0x50(%rsp),%rax
    0.00 :   b33e:   mov    0x50(%rsp),%rsi
    0.00 :   b343:   mov    (%rax),%eax
    0.00 :   b345:   lea    0x1(%rax),%edx
    0.00 :   b348:   mov    %edx,(%rsi)
    0.00 :   b34a:   test   %eax,%eax
    0.00 :   b34c:   jne    b360 <check_match+0x120>
         : 116  ./elf/dl-lookup.c:153
    0.00 :   b34e:   mov    0x48(%rsp),%rax
    0.00 :   b353:   mov    %rbx,(%rax)
    0.00 :   b356:   cs nopw 0x0(%rax,%rax,1)
         : 120  ./elf/dl-lookup.c:155
    0.00 :   b360:   xor    %eax,%eax
         : 122  ./elf/dl-lookup.c:162
    0.00 :   b362:   pop    %rbx
    0.00 :   b363:   pop    %rbp
    0.00 :   b364:   pop    %r12
    0.00 :   b366:   pop    %r13
    0.00 :   b368:   pop    %r14
    0.00 :   b36a:   ret
    0.00 :   b36b:   nopl   0x0(%rax,%rax,1)
         : 130  ./elf/dl-lookup.c:117
    0.00 :   b370:   mov    0x0(%r13),%rsi
    0.00 :   b374:   mov    (%rax),%rdi
    0.00 :   b377:   call   27220 <strcmp>
    0.00 :   b37c:   test   %eax,%eax
   18.03 :   b37e:   je     b2ff <check_match+0xbf>
    0.00 :   b384:   jmp    b2f3 <check_match+0xb3>
    0.00 :   b389:   nopl   0x0(%rax)
         : 138  ./elf/dl-lookup.c:73 (discriminator 1)
    0.00 :   b390:   cmp    $0x6,%cl
    0.00 :   b393:   je     b273 <check_match+0x33>
    0.00 :   b399:   cmp    $0xfff1,%ax
    0.00 :   b39d:   je     b273 <check_match+0x33>
         : 143  ./elf/dl-lookup.c:155
    0.00 :   b3a3:   xor    %eax,%eax
    0.00 :   b3a5:   jmp    b362 <check_match+0x122>
    0.00 :   b3a7:   nopw   0x0(%rax,%rax,1)
         : 147  ./elf/dl-lookup.c:106
    0.00 :   b3b0:   mov    0x10(%r13),%rdi
    0.00 :   b3b4:   test   %rdi,%rdi
    0.00 :   b3b7:   je     b2ff <check_match+0xbf>
         : 151  ./elf/dl-lookup.c:106 (discriminator 1)
    0.00 :   b3bd:   mov    %r12,%rsi
    0.00 :   b3c0:   call   d690 <_dl_name_match_p>
    0.00 :   b3c5:   test   %eax,%eax
    0.00 :   b3c7:   je     b2ff <check_match+0xbf>
         : 156  ./elf/dl-lookup.c:106 (discriminator 2)
    0.00 :   b3cd:   lea    0x257b4(%rip),%rcx        # 30b88 <__PRETTY_FUNCTION__.2>
    0.00 :   b3d4:   mov    $0x6a,%edx
    0.00 :   b3d9:   lea    0x22a9d(%rip),%rsi        # 2de7d <_sys_errnameidx+0x57d>
    0.00 :   b3e0:   lea    0x254c1(%rip),%rdi        # 308a8 <__PRETTY_FUNCTION__.10+0x10>
    0.00 :   b3e7:   call   1e460 <__GI___assert_fail>
 Percent |	Source code & Disassembly of minisat for cycles:u (5 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000007df0 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]>:
         : 6    Minisat::SimpSolver::gatherTouchedClauses():
         :
         : 278  return true;
         : 279  }
         :
         :
         : 282  void SimpSolver::gatherTouchedClauses()
    0.00 :   7df0:   push   %r15
    0.00 :   7df2:   push   %r14
    0.00 :   7df4:   push   %r13
    0.00 :   7df6:   push   %r12
    0.00 :   7df8:   push   %rbp
    0.00 :   7df9:   push   %rbx
    0.00 :   7dfa:   mov    %rdi,%rbx
    0.00 :   7dfd:   sub    $0x48,%rsp
         : 291  Minisat::Queue<unsigned int>::size() const:
         : 42   typedef T Key;
         :
         : 44   Queue() : buf(1), first(0), end(0) {}
         :
         : 46   void clear (bool dealloc = false) { buf.clear(dealloc); buf.growTo(1); first = end = 0; }
         : 47   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   7e01:   mov    0x378(%rdi),%ecx
         : 49   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7e07:   mov    %fs:0x28,%rax
    0.00 :   7e10:   mov    %rax,0x38(%rsp)
    0.00 :   7e15:   xor    %eax,%eax
         : 280  Minisat::Queue<unsigned int>::size() const:
    0.00 :   7e17:   mov    0x37c(%rdi),%eax
         : 43   Minisat::SimpSolver::gatherTouchedClauses():
         : 282  {
         : 283  if (n_touched == 0) return;
         :
         : 285  int i,j;
         : 286  for (i = j = 0; i < subsumption_queue.size(); i++)
    0.00 :   7e1d:   movl   $0x0,0x1c(%rsp)
         : 288  Minisat::Queue<unsigned int>::size() const:
    0.00 :   7e25:   mov    %eax,%esi
    0.00 :   7e27:   sub    %ecx,%esi
    0.00 :   7e29:   cmp    %ecx,%eax
    0.00 :   7e2b:   jge    7ea0 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0xb0>
         : 46   Minisat::vec<unsigned int>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   7e2d:   mov    0x370(%rdi),%r8d
         : 70   Minisat::Queue<unsigned int>::size() const:
    0.00 :   7e34:   xor    %edi,%edi
    0.00 :   7e36:   lea    (%rsi,%r8,1),%r9d
    0.00 :   7e3a:   jmp    7e7d <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x8d>
    0.00 :   7e3c:   nopl   0x0(%rax)
         : 46   Minisat::Queue<unsigned int>::operator[](int):
         :
         : 46   const T& operator [] (int index) const  { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
         : 47   T&       operator [] (int index)        { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
    0.00 :   7e40:   lea    (%rdi,%rcx,1),%eax
    0.00 :   7e43:   cltd
    0.00 :   7e44:   idiv   %r8d
         : 51   Minisat::SimpSolver::gatherTouchedClauses():
         : 283  if (ca[subsumption_queue[i]].mark() == 0)
    0.00 :   7e47:   mov    0x368(%rbx),%rax
         : 285  Minisat::vec<unsigned int>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7e4e:   movslq %edx,%rdx
         : 94   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7e51:   mov    (%rax,%rdx,4),%eax
         : 284  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   7e54:   cmp    %eax,0x230(%rbx)
    0.00 :   7e5a:   jbe    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
    0.00 :   7e60:   mov    0x228(%rbx),%rdx
    0.00 :   7e67:   lea    (%rdx,%rax,4),%rdx
         : 73   Minisat::Clause::mark() const:
         : 167  int          size        ()      const   { return header.size; }
         : 168  void         shrink      (int i)         { assert(i <= size()); if (header.has_extra) data[header.size-i] = data[header.size]; header.size -= i; }
         : 169  void         pop         ()              { shrink(1); }
         : 170  bool         learnt      ()      const   { return header.learnt; }
         : 171  bool         has_extra   ()      const   { return header.has_extra; }
         : 172  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   7e6b:   movzbl (%rdx),%eax
         : 174  Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7e6e:   test   $0x3,%al
    0.00 :   7e70:   jne    7e7a <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x8a>
         : 285  Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   7e72:   and    $0xfffffffc,%eax
    0.00 :   7e75:   or     $0x2,%eax
    0.00 :   7e78:   mov    %al,(%rdx)
         : 172  Minisat::SimpSolver::gatherTouchedClauses():
         : 282  for (i = j = 0; i < subsumption_queue.size(); i++)
    0.00 :   7e7a:   add    $0x1,%edi
    0.00 :   7e7d:   cmp    %edi,%r9d
    0.00 :   7e80:   jg     7e40 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x50>
         : 286  Minisat::vec<char>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7e82:   mov    0x2f0(%rbx),%edx
         : 65   Minisat::SimpSolver::gatherTouchedClauses():
         : 286  ca[subsumption_queue[i]].mark(2);
         :
         : 288  for (i = 0; i < touched.size(); i++)
    0.00 :   7e88:   test   %edx,%edx
    0.00 :   7e8a:   jg     7efa <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x10a>
         : 297  ca[cs[j]].mark(2);
         : 298  }
         : 299  touched[i] = 0;
         : 300  }
         :
         : 302  for (i = 0; i < subsumption_queue.size(); i++)
    0.00 :   7e8c:   movl   $0x0,0x1c(%rsp)
    0.00 :   7e94:   jmp    81cd <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x3dd>
    0.00 :   7e99:   nopl   0x0(%rax)
         : 306  Minisat::Queue<unsigned int>::size() const:
         : 42   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   7ea0:   xor    %edi,%edi
    0.00 :   7ea2:   jmp    7ee8 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0xf8>
    0.00 :   7ea4:   nopl   0x0(%rax)
         : 46   Minisat::Queue<unsigned int>::operator[](int):
         : 45   T&       operator [] (int index)        { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
    0.00 :   7ea8:   lea    (%rdi,%rcx,1),%eax
    0.00 :   7eab:   cltd
    0.00 :   7eac:   idivl  0x370(%rbx)
         : 49   Minisat::SimpSolver::gatherTouchedClauses():
         : 283  if (ca[subsumption_queue[i]].mark() == 0)
    0.00 :   7eb2:   mov    0x368(%rbx),%rax
         : 285  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7eb9:   movslq %edx,%rdx
         : 89   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7ebc:   mov    (%rax,%rdx,4),%eax
         : 284  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
   19.01 :   7ebf:   cmp    0x230(%rbx),%eax
    0.00 :   7ec5:   jae    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
    0.00 :   7ecb:   mov    0x228(%rbx),%rdx
    0.00 :   7ed2:   lea    (%rdx,%rax,4),%rdx
         : 67   Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   7ed6:   movzbl (%rdx),%eax
         : 169  Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7ed9:   test   $0x3,%al
    0.00 :   7edb:   jne    7ee5 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0xf5>
         : 285  Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   7edd:   and    $0xfffffffc,%eax
    0.00 :   7ee0:   or     $0x2,%eax
    0.00 :   7ee3:   mov    %al,(%rdx)
         : 172  Minisat::SimpSolver::gatherTouchedClauses():
         : 282  for (i = j = 0; i < subsumption_queue.size(); i++)
    0.00 :   7ee5:   add    $0x1,%edi
    0.00 :   7ee8:   cmp    %edi,%esi
    0.00 :   7eea:   jg     7ea8 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0xb8>
         : 286  Minisat::vec<char>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7eec:   mov    0x2f0(%rbx),%edx
         : 65   Minisat::SimpSolver::gatherTouchedClauses():
         : 286  for (i = 0; i < touched.size(); i++)
    0.00 :   7ef2:   test   %edx,%edx
    0.00 :   7ef4:   jle    824c <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x45c>
         : 289  Minisat::Queue<unsigned int>::size() const:
         : 42   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   7efa:   xor    %r15d,%r15d
    0.00 :   7efd:   jmp    7f15 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x125>
    0.00 :   7eff:   nop
         : 46   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7f00:   lea    0x1(%r15),%eax
    0.00 :   7f04:   add    $0x1,%r15
    0.00 :   7f08:   mov    %eax,0x1c(%rsp)
    0.00 :   7f0c:   cmp    %r15d,%edx
    0.00 :   7f0f:   jle    81a6 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x3b6>
         : 287  if (touched[i]){
    0.00 :   7f15:   mov    0x2e8(%rbx),%rax
    0.00 :   7f1c:   cmpb   $0x0,(%rax,%r15,1)
    0.00 :   7f21:   je     7f00 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x110>
         : 291  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  OccLists(const Deleted& d) : deleted(d) {}
         :
         : 271  void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
         : 272  // Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 273  Vec&  operator[](const Idx& idx){ return occs[toInt(idx)]; }
         : 274  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   7f23:   mov    0x308(%rbx),%rax
    0.00 :   7f2a:   cmpb   $0x0,(%rax,%r15,1)
    0.00 :   7f2f:   jne    8190 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x3a0>
         : 278  Minisat::vec<Minisat::vec<unsigned int> >::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7f35:   mov    %r15,%r14
    0.00 :   7f38:   shl    $0x4,%r14
    0.00 :   7f3c:   add    0x2f8(%rbx),%r14
         : 91   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7f43:   mov    0x8(%r14),%r8d
         : 65   Minisat::SimpSolver::gatherTouchedClauses():
         : 289  for (j = 0; j < cs.size(); j++)
    0.00 :   7f47:   test   %r8d,%r8d
    0.00 :   7f4a:   jle    8008 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x218>
         : 292  Minisat::vec<unsigned int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   7f50:   mov    (%r14),%rdi
         : 88   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7f53:   mov    0x230(%rbx),%esi
    0.00 :   7f59:   xor    %ebp,%ebp
    0.00 :   7f5b:   jmp    7f6d <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x17d>
    0.00 :   7f5d:   nopl   (%rax)
         : 67   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7f60:   add    $0x1,%rbp
   18.61 :   7f64:   cmp    %ebp,%r8d
    0.00 :   7f67:   jle    8008 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x218>
         : 290  if (ca[cs[j]].mark() == 0){
    0.00 :   7f6d:   mov    (%rdi,%rbp,4),%edx
    0.00 :   7f70:   lea    0x0(,%rbp,4),%r13
         : 293  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7f78:   cmp    %esi,%edx
    0.00 :   7f7a:   jae    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
         : 65   Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   7f80:   mov    0x228(%rbx),%rcx
         : 169  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7f87:   mov    %edx,%eax
         : 64   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7f89:   testb  $0x3,(%rcx,%rax,4)
    0.00 :   7f8d:   jne    7f60 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x170>
         : 292  Minisat::Queue<unsigned int>::insert(unsigned int):
         :
         : 51   T    peek  () const { assert(first != end); return buf[first]; }
         : 52   void pop   () { assert(first != end); first++; if (first == buf.size()) first = 0; }
         : 53   void insert(T elem) {   // INVARIANT: buf[end] is always unused
         : 54   buf[end++] = elem;
    0.00 :   7f8f:   movslq 0x37c(%rbx),%rax
         : 56   Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   7f96:   mov    0x368(%rbx),%rdi
         : 89   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 51   if (end == buf.size()) end = 0;
    0.00 :   7f9d:   xor    %esi,%esi
         : 50   buf[end++] = elem;
    0.00 :   7f9f:   lea    0x1(%rax),%ecx
    0.00 :   7fa2:   mov    %ecx,0x37c(%rbx)
    0.00 :   7fa8:   mov    %edx,(%rdi,%rax,4)
         : 51   if (end == buf.size()) end = 0;
    0.00 :   7fab:   mov    0x37c(%rbx),%eax
         : 53   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
   21.22 :   7fb1:   mov    0x370(%rbx),%r9d
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 52   if (first == end){  // Resize:
    0.00 :   7fb8:   mov    0x378(%rbx),%edx
         : 51   if (end == buf.size()) end = 0;
    0.00 :   7fbe:   cmp    %r9d,%eax
    0.00 :   7fc1:   cmove  %esi,%eax
    0.00 :   7fc4:   mov    %eax,0x37c(%rbx)
         : 52   if (first == end){  // Resize:
    0.00 :   7fca:   cmp    %edx,%eax
    0.00 :   7fcc:   je     8020 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x230>
         : 55   Minisat::vec<unsigned int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   7fce:   mov    (%r14),%rdi
         : 88   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7fd1:   mov    0x230(%rbx),%esi
         : 64   Minisat::SimpSolver::gatherTouchedClauses():
         : 292  ca[cs[j]].mark(2);
    0.00 :   7fd7:   mov    (%rdi,%r13,1),%eax
         : 294  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   7fdb:   cmp    %esi,%eax
    0.00 :   7fdd:   jae    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
         : 65   Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   7fe3:   mov    0x228(%rbx),%rcx
         : 170  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   7fea:   mov    0x8(%r14),%r8d
         : 65   Minisat::SimpSolver::gatherTouchedClauses():
         : 289  for (j = 0; j < cs.size(); j++)
    0.00 :   7fee:   add    $0x1,%rbp
         : 291  Minisat::Clause::mark(unsigned int):
    0.00 :   7ff2:   movzbl (%rcx,%rax,4),%edx
    0.00 :   7ff6:   and    $0xfffffffc,%edx
    0.00 :   7ff9:   or     $0x2,%edx
    0.00 :   7ffc:   mov    %dl,(%rcx,%rax,4)
         : 172  Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   7fff:   cmp    %ebp,%r8d
    0.00 :   8002:   jg     7f6d <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x17d>
         : 294  touched[i] = 0;
    0.00 :   8008:   mov    0x2e8(%rbx),%rax
   19.64 :   800f:   movb   $0x0,(%rax,%r15,1)
         : 297  Minisat::vec<char>::size() const:
    0.00 :   8014:   mov    0x2f0(%rbx),%edx
         : 64   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   801a:   jmp    7f00 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x110>
    0.00 :   801f:   nop
         : 65   Minisat::vec<unsigned int>::vec(int):
         : 55   explicit vec(int size)      : data(NULL) , sz(0)   , cap(0)    { growTo(size); }
    0.00 :   8020:   movq   $0x0,0x20(%rsp)
         : 57   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 53   vec<T>  tmp((buf.size()*3 + 1) >> 1);
    0.00 :   8029:   lea    0x1(%r9,%r9,2),%ecx
         : 55   Minisat::vec<unsigned int>::vec(int):
    0.00 :   802e:   movq   $0x0,0x28(%rsp)
         : 56   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   8037:   sar    %ecx
    0.00 :   8039:   mov    %ecx,%r12d
         : 55   Minisat::vec<unsigned int>::growTo(int):
         : 114  sz = size; }
         :
         :
         : 117  template<class T>
         : 118  void vec<T>::growTo(int size) {
         : 119  if (sz >= size) return;
    0.00 :   803c:   test   %ecx,%ecx
    0.00 :   803e:   jle    8150 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x360>
         : 115  capacity(size);
    0.00 :   8044:   lea    0x20(%rsp),%rdi
    0.00 :   8049:   mov    %ecx,%esi
    0.00 :   804b:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   8050:   movslq 0x28(%rsp),%rax
    0.00 :   8055:   mov    0x20(%rsp),%r8
    0.00 :   805a:   cmp    %eax,%r12d
    0.00 :   805d:   jle    8082 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x292>
    0.00 :   805f:   mov    %r12d,%edx
    0.00 :   8062:   lea    (%r8,%rax,4),%rdi
    0.00 :   8066:   xor    %esi,%esi
    0.00 :   8068:   mov    %r8,(%rsp)
    0.00 :   806c:   sub    %eax,%edx
    0.00 :   806e:   sub    $0x1,%edx
    0.00 :   8071:   lea    0x4(,%rdx,4),%rdx
    0.00 :   8079:   call   2370 <memset@plt>
    0.00 :   807e:   mov    (%rsp),%r8
         : 130  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 56   //**/printf("queue alloc: %d elems (%.1f MB)\n", tmp.size(), tmp.size() * sizeof(T) / 1000000.0);
         : 57   int     i = 0;
         : 58   for (int j = first; j < buf.size(); j++) tmp[i++] = buf[j];
    0.00 :   8082:   mov    0x378(%rbx),%edx
         : 60   Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   8088:   mov    0x2c(%rsp),%esi
         : 93   Minisat::vec<unsigned int>::growTo(int):
         : 117  sz = size; }
    0.00 :   808c:   mov    %r12d,0x28(%rsp)
         : 119  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   8091:   mov    0x370(%rbx),%r9d
         : 65   Minisat::vec<unsigned int>::clear(bool):
         :
         :
         : 124  template<class T>
         : 125  void vec<T>::clear(bool dealloc) {
         : 126  if (data != NULL){
    0.00 :   8098:   mov    0x368(%rbx),%rdi
         : 128  Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   809f:   cmp    %r9d,%edx
    0.00 :   80a2:   jge    8161 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x371>
    0.00 :   80a8:   movslq %edx,%rax
    0.00 :   80ab:   mov    $0x1,%r10d
    0.00 :   80b1:   mov    %rax,%r9
    0.00 :   80b4:   sub    %edx,%r10d
    0.00 :   80b7:   neg    %r9
    0.00 :   80ba:   lea    (%r8,%r9,4),%r11
    0.00 :   80be:   xchg   %ax,%ax
    0.00 :   80c0:   mov    (%rdi,%rax,4),%edx
    0.00 :   80c3:   lea    (%r10,%rax,1),%r9d
    0.00 :   80c7:   mov    %edx,(%r11,%rax,4)
         : 68   Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   80cb:   mov    0x370(%rbx),%edx
         : 65   Minisat::Queue<unsigned int>::insert(unsigned int):
    0.00 :   80d1:   add    $0x1,%rax
    0.00 :   80d5:   cmp    %eax,%edx
    0.00 :   80d7:   jg     80c0 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x2d0>
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   80d9:   mov    0x37c(%rbx),%eax
    0.00 :   80df:   test   %eax,%eax
    0.00 :   80e1:   jle    82cf <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4df>
    0.00 :   80e7:   movslq %r9d,%r9
         : 55   int     i = 0;
    0.00 :   80ea:   xor    %eax,%eax
    0.00 :   80ec:   lea    (%r8,%r9,4),%r9
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   80f0:   mov    (%rdi,%rax,4),%edx
    0.00 :   80f3:   mov    %edx,(%r9,%rax,4)
    0.00 :   80f7:   add    $0x1,%rax
    0.00 :   80fb:   cmp    %eax,0x37c(%rbx)
    0.00 :   8101:   jg     80f0 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x300>
         : 58   first = 0;
    0.00 :   8103:   movl   $0x0,0x378(%rbx)
         : 60   Minisat::vec<unsigned int>::size() const:
    0.00 :   810d:   mov    0x370(%rbx),%eax
         : 64   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 59   end   = buf.size();
    0.00 :   8113:   mov    %eax,0x37c(%rbx)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   8119:   mov    %esi,0xc(%rsp)
    0.00 :   811d:   mov    %r8,(%rsp)
         : 125  for (int i = 0; i < sz; i++) data[i].~T();
         : 126  sz = 0;
         : 127  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   8121:   call   2440 <free@plt>
    0.00 :   8126:   mov    0xc(%rsp),%esi
    0.00 :   812a:   mov    (%rsp),%r8
         : 131  Minisat::vec<unsigned int>::moveTo(Minisat::vec<unsigned int>&):
         : 91   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
    0.00 :   812e:   mov    %r8,0x368(%rbx)
    0.00 :   8135:   mov    %r12d,0x370(%rbx)
    0.00 :   813c:   mov    %esi,0x374(%rbx)
         : 95   Minisat::Queue<unsigned int>::insert(unsigned int):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   8142:   jmp    7fce <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x1de>
    0.00 :   8147:   nopw   0x0(%rax,%rax,1)
         : 124  Minisat::vec<unsigned int>::growTo(int):
    0.00 :   8150:   xor    %esi,%esi
    0.00 :   8152:   xor    %r12d,%r12d
    0.00 :   8155:   xor    %r8d,%r8d
         : 124  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 56   for (int j = first; j < buf.size(); j++) tmp[i++] = buf[j];
    0.00 :   8158:   cmp    %r9d,%edx
    0.00 :   815b:   jl     80a8 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x2b8>
         : 57   for (int j = 0    ; j < end       ; j++) tmp[i++] = buf[j];
    0.00 :   8161:   mov    0x37c(%rbx),%edx
    0.00 :   8167:   test   %edx,%edx
    0.00 :   8169:   jg     82e4 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4f4>
         : 58   first = 0;
    0.00 :   816f:   movl   $0x0,0x378(%rbx)
         : 59   end   = buf.size();
    0.00 :   8179:   mov    %r9d,0x37c(%rbx)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   8180:   test   %rdi,%rdi
    0.00 :   8183:   je     812e <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x33e>
    0.00 :   8185:   jmp    8119 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x329>
    0.00 :   8187:   nopw   0x0(%rax,%rax,1)
         : 127  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
         : 269  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
    0.00 :   8190:   lea    0x1c(%rsp),%rsi
         : 271  Minisat::SimpSolver::gatherTouchedClauses():
         : 288  const vec<CRef>& cs = occurs.lookup(i);
    0.00 :   8195:   lea    0x2f8(%rbx),%rdi
         : 290  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::lookup(int const&):
    0.00 :   819c:   call   b5e0 <Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::clean(int const&)>
    0.00 :   81a1:   jmp    7f35 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x145>
         : 271  Minisat::Queue<unsigned int>::size() const:
         : 42   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   81a6:   mov    0x37c(%rbx),%eax
    0.00 :   81ac:   mov    0x378(%rbx),%ecx
         : 45   Minisat::SimpSolver::gatherTouchedClauses():
         : 297  for (i = 0; i < subsumption_queue.size(); i++)
    0.00 :   81b2:   movl   $0x0,0x1c(%rsp)
         : 299  Minisat::Queue<unsigned int>::size() const:
    0.00 :   81ba:   mov    %eax,%esi
    0.00 :   81bc:   sub    %ecx,%esi
         : 44   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   81be:   cmp    %ecx,%eax
    0.00 :   81c0:   jge    8254 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x464>
    0.00 :   81c6:   mov    0x370(%rbx),%r8d
         : 300  Minisat::Queue<unsigned int>::size() const:
    0.00 :   81cd:   add    %r8d,%esi
    0.00 :   81d0:   xor    %edi,%edi
    0.00 :   81d2:   jmp    821b <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x42b>
    0.00 :   81d4:   nopl   0x0(%rax)
         : 46   Minisat::Queue<unsigned int>::operator[](int):
         : 45   T&       operator [] (int index)        { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
    0.00 :   81d8:   lea    (%rcx,%rdi,1),%eax
    0.00 :   81db:   cltd
    0.00 :   81dc:   idiv   %r8d
         : 49   Minisat::SimpSolver::gatherTouchedClauses():
         : 298  if (ca[subsumption_queue[i]].mark() == 2)
    0.00 :   81df:   mov    0x368(%rbx),%rax
         : 300  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   81e6:   movslq %edx,%rdx
         : 89   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   81e9:   mov    (%rax,%rdx,4),%eax
         : 299  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
   21.52 :   81ec:   cmp    %eax,0x230(%rbx)
    0.00 :   81f2:   jbe    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
    0.00 :   81f8:   mov    0x228(%rbx),%rdx
    0.00 :   81ff:   lea    (%rdx,%rax,4),%rdx
         : 67   Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   8203:   movzbl (%rdx),%eax
    0.00 :   8206:   mov    %eax,%r9d
    0.00 :   8209:   and    $0x3,%r9d
         : 171  Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   820d:   cmp    $0x2,%r9b
    0.00 :   8211:   jne    8218 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x428>
         : 300  Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   8213:   and    $0xfffffffc,%eax
    0.00 :   8216:   mov    %al,(%rdx)
         : 171  Minisat::SimpSolver::gatherTouchedClauses():
         : 297  for (i = 0; i < subsumption_queue.size(); i++)
    0.00 :   8218:   add    $0x1,%edi
    0.00 :   821b:   cmp    %edi,%esi
    0.00 :   821d:   jg     81d8 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x3e8>
         : 301  ca[subsumption_queue[i]].mark(0);
         :
         : 303  n_touched = 0;
    0.00 :   821f:   movl   $0x0,0x3a4(%rbx)
         : 302  }
    0.00 :   8229:   mov    0x38(%rsp),%rax
    0.00 :   822e:   sub    %fs:0x28,%rax
    0.00 :   8237:   jne    82ca <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4da>
    0.00 :   823d:   add    $0x48,%rsp
    0.00 :   8241:   pop    %rbx
    0.00 :   8242:   pop    %rbp
    0.00 :   8243:   pop    %r12
    0.00 :   8245:   pop    %r13
    0.00 :   8247:   pop    %r14
    0.00 :   8249:   pop    %r15
    0.00 :   824b:   ret
         : 297  for (i = 0; i < subsumption_queue.size(); i++)
    0.00 :   824c:   movl   $0x0,0x1c(%rsp)
         : 299  Minisat::Queue<unsigned int>::size() const:
         : 42   int  size  () const { return (end >= first) ? end - first : end - first + buf.size(); }
    0.00 :   8254:   xor    %edi,%edi
    0.00 :   8256:   jmp    82a2 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4b2>
    0.00 :   8258:   nopl   0x0(%rax,%rax,1)
         : 46   Minisat::Queue<unsigned int>::operator[](int):
         : 45   T&       operator [] (int index)        { assert(index >= 0); assert(index < size()); return buf[(first + index) % buf.size()]; }
    0.00 :   8260:   lea    (%rcx,%rdi,1),%eax
    0.00 :   8263:   cltd
    0.00 :   8264:   idivl  0x370(%rbx)
         : 49   Minisat::SimpSolver::gatherTouchedClauses():
         : 298  if (ca[subsumption_queue[i]].mark() == 2)
    0.00 :   826a:   mov    0x368(%rbx),%rax
         : 300  Minisat::vec<unsigned int>::operator[](int):
    0.00 :   8271:   movslq %edx,%rdx
         : 88   Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   8274:   mov    (%rax,%rdx,4),%eax
         : 299  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   8277:   cmp    0x230(%rbx),%eax
    0.00 :   827d:   jae    82ab <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4bb>
    0.00 :   827f:   mov    0x228(%rbx),%rdx
    0.00 :   8286:   lea    (%rdx,%rax,4),%rdx
         : 67   Minisat::Clause::mark() const:
         : 167  uint32_t     mark        ()      const   { return header.mark; }
    0.00 :   828a:   movzbl (%rdx),%eax
    0.00 :   828d:   mov    %eax,%r8d
    0.00 :   8290:   and    $0x3,%r8d
         : 171  Minisat::SimpSolver::gatherTouchedClauses():
    0.00 :   8294:   cmp    $0x2,%r8b
    0.00 :   8298:   jne    829f <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x4af>
         : 300  Minisat::Clause::mark(unsigned int):
         : 168  void         mark        (uint32_t m)    { header.mark = m; }
    0.00 :   829a:   and    $0xfffffffc,%eax
    0.00 :   829d:   mov    %al,(%rdx)
         : 171  Minisat::SimpSolver::gatherTouchedClauses():
         : 297  for (i = 0; i < subsumption_queue.size(); i++)
    0.00 :   829f:   add    $0x1,%edi
    0.00 :   82a2:   cmp    %edi,%esi
    0.00 :   82a4:   jg     8260 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x470>
    0.00 :   82a6:   jmp    821f <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x42f>
         : 302  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   82ab:   lea    0xb786(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   82b2:   mov    $0x3f,%edx
    0.00 :   82b7:   lea    0xb75c(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   82be:   lea    0xc153(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   82c5:   call   23b0 <__assert_fail@plt>
         : 68   Minisat::SimpSolver::gatherTouchedClauses():
         : 302  }
    0.00 :   82ca:   call   2410 <__stack_chk_fail@plt>
         : 304  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 58   first = 0;
    0.00 :   82cf:   movl   $0x0,0x378(%rbx)
         : 59   end   = buf.size();
    0.00 :   82d9:   mov    %edx,0x37c(%rbx)
         : 61   Minisat::vec<unsigned int>::clear(bool):
         : 121  void vec<T>::clear(bool dealloc) {
    0.00 :   82df:   jmp    8119 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x329>
         : 123  Minisat::Queue<unsigned int>::insert(unsigned int):
         : 55   int     i = 0;
    0.00 :   82e4:   xor    %r9d,%r9d
    0.00 :   82e7:   jmp    80e7 <Minisat::SimpSolver::gatherTouchedClauses() [clone .part.0]+0x2f7>
 Percent |	Source code & Disassembly of minisat for cycles:u (4 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000011a60 <Minisat::Solver::newVar(bool, bool)>:
         : 6     Minisat::Solver::newVar(bool, bool):
         :
         : 116   // Creates a new SAT variable in the solver. If 'decision' is cleared, variable will not be
         : 117   // used as a decision variable (NOTE! This has effects on the meaning of a SATISFIABLE result).
         : 118   //
         : 119   Var Solver::newVar(bool sign, bool dvar)
         : 120   {
    0.00 :   11a60:  endbr64
    0.00 :   11a64:  push   %r15
         : 123   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::init(Minisat::Lit const&):
         : 266   Deleted   deleted;
         :
         : 268   public:
         : 269   OccLists(const Deleted& d) : deleted(d) {}
         :
         : 271   void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
    0.00 :   11a66:  lea    0x138(%rdi),%r8
         : 273   Minisat::Solver::newVar(bool, bool):
    0.00 :   11a6d:  push   %r14
    0.00 :   11a6f:  push   %r13
    0.00 :   11a71:  mov    %esi,%r13d
    0.00 :   11a74:  push   %r12
    0.00 :   11a76:  push   %rbp
    0.00 :   11a77:  mov    %edx,%ebp
    0.00 :   11a79:  push   %rbx
    0.00 :   11a7a:  mov    %rdi,%rbx
    0.00 :   11a7d:  sub    $0x18,%rsp
         : 124   Minisat::vec<Minisat::Solver::VarData>::size() const:
         :
         : 64    // Pointer to first element:
         : 65    operator T*       (void)           { return data; }
         :
         : 67    // Size operations:
         : 68    int      size     (void) const     { return sz; }
    0.00 :   11a81:  mov    0x1c8(%rdi),%r12d
         : 70    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 114   sz = size; }
         :
         :
         : 117   template<class T>
         : 118   void vec<T>::growTo(int size) {
         : 119   if (sz >= size) return;
    0.00 :   11a88:  mov    0x140(%rdi),%edx
         : 121   Minisat::mkLit(int, bool):
         : 58    inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   11a8e:  lea    (%r12,%r12,1),%r14d
         : 60    Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::init(Minisat::Lit const&):
         : 266   void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
    0.00 :   11a92:  lea    0x1(%r14),%esi
         : 268   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
    0.00 :   11a96:  cmp    %edx,%esi
    0.00 :   11a98:  jg     11ce0 <Minisat::Solver::newVar(bool, bool)+0x280>
         : 116   Minisat::vec<char>::growTo(int, char const&):
         : 106   if (sz >= size) return;
    0.00 :   11a9e:  mov    0x150(%rbx),%eax
         : 108   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::init(Minisat::Lit const&):
    0.00 :   11aa4:  lea    0x148(%rbx),%r15
         : 267   Minisat::vec<char>::growTo(int, char const&):
    0.00 :   11aab:  cmp    %eax,%esi
    0.00 :   11aad:  jg     11f90 <Minisat::Solver::newVar(bool, bool)+0x530>
         : 108   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::init(Minisat::Lit const&):
    0.00 :   11ab3:  lea    0x2(%r14),%esi
         : 267   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 114   if (sz >= size) return;
    0.00 :   11ab7:  cmp    %edx,%esi
    0.00 :   11ab9:  jg     11e00 <Minisat::Solver::newVar(bool, bool)+0x3a0>
         : 117   Minisat::vec<char>::growTo(int, char const&):
         : 106   if (sz >= size) return;
    0.00 :   11abf:  cmp    %eax,%esi
    0.00 :   11ac1:  jg     11f14 <Minisat::Solver::newVar(bool, bool)+0x4b4>
         : 109   Minisat::vec<Minisat::lbool>::push(Minisat::lbool const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   11ac7:  movslq 0x178(%rbx),%rsi
    0.00 :   11ace:  cmp    0x17c(%rbx),%esi
    0.00 :   11ad4:  je     11f70 <Minisat::Solver::newVar(bool, bool)+0x510>
    0.00 :   11ada:  mov    0x170(%rbx),%rax
    0.00 :   11ae1:  lea    0x1(%rsi),%edx
    0.00 :   11ae4:  mov    %edx,0x178(%rbx)
   25.35 :   11aea:  movb   $0x2,(%rax,%rsi,1)
         : 82    Minisat::vec<Minisat::Solver::VarData>::push(Minisat::Solver::VarData const&):
    0.00 :   11aee:  movslq 0x1c8(%rbx),%rsi
    0.00 :   11af5:  cmp    0x1cc(%rbx),%esi
    0.00 :   11afb:  je     12080 <Minisat::Solver::newVar(bool, bool)+0x620>
    0.00 :   11b01:  lea    0x1(%rsi),%edx
    0.00 :   11b04:  mov    $0xffffffff,%edi
         : 79    Minisat::Solver::newVar(bool, bool):
         : 122   watches  .init(mkLit(v, false));
         : 123   watches  .init(mkLit(v, true ));
         : 124   assigns  .push(l_Undef);
         : 125   vardata  .push(mkVarData(CRef_Undef, 0));
         : 126   //activity .push(0);
         : 127   activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
    0.00 :   11b09:  pxor   %xmm0,%xmm0
    0.00 :   11b0d:  cmpb   $0x0,0x5d(%rbx)
         : 130   Minisat::vec<Minisat::Solver::VarData>::push(Minisat::Solver::VarData const&):
    0.00 :   11b11:  mov    0x1c0(%rbx),%rax
    0.00 :   11b18:  mov    %edx,0x1c8(%rbx)
    0.00 :   11b1e:  mov    %rdi,(%rax,%rsi,8)
         : 77    Minisat::Solver::newVar(bool, bool):
    0.00 :   11b22:  je     11b66 <Minisat::Solver::newVar(bool, bool)+0x106>
         : 123   Minisat::Solver::drand(double&):
         : 263   // Static helpers:
         : 264   //
         :
         : 266   // Returns a random float 0 <= x < 1. Seed must never be 0.
         : 267   static inline double drand(double& seed) {
         : 268   seed *= 1389796;
    0.00 :   11b24:  movsd  0x37cc(%rip),%xmm0        # 152f8 <typeinfo name for Minisat::Solver+0x18>
    0.00 :   11b2c:  mulsd  0x48(%rbx),%xmm0
         : 264   int q = (int)(seed / 2147483647);
    0.00 :   11b31:  movsd  0x37c7(%rip),%xmm1        # 15300 <typeinfo name for Minisat::Solver+0x20>
    0.00 :   11b39:  movapd %xmm0,%xmm2
    0.00 :   11b3d:  divsd  %xmm1,%xmm2
    0.00 :   11b41:  cvttsd2si %xmm2,%eax
         : 265   seed -= (double)q * 2147483647;
    0.00 :   11b45:  pxor   %xmm2,%xmm2
    0.00 :   11b49:  cvtsi2sd %eax,%xmm2
    0.00 :   11b4d:  mulsd  %xmm1,%xmm2
    0.00 :   11b51:  subsd  %xmm2,%xmm0
    0.00 :   11b55:  movsd  %xmm0,0x48(%rbx)
         : 266   return seed / 2147483647; }
    0.00 :   11b5a:  divsd  %xmm1,%xmm0
         : 268   Minisat::Solver::newVar(bool, bool):
    0.00 :   11b5e:  mulsd  0x37da(%rip),%xmm0        # 15340 <typeinfo name for Minisat::Solver+0x60>
         : 123   Minisat::vec<double>::push(double const&):
    0.00 :   11b66:  movslq 0x128(%rbx),%rsi
    0.00 :   11b6d:  cmp    0x12c(%rbx),%esi
    0.00 :   11b73:  je     12058 <Minisat::Solver::newVar(bool, bool)+0x5f8>
    0.00 :   11b79:  mov    0x120(%rbx),%rax
    0.00 :   11b80:  lea    0x1(%rsi),%edx
    0.00 :   11b83:  mov    %edx,0x128(%rbx)
    0.00 :   11b89:  movsd  %xmm0,(%rax,%rsi,8)
         : 78    Minisat::vec<char>::push(char const&):
    0.00 :   11b8e:  movslq 0x248(%rbx),%rsi
    0.00 :   11b95:  cmp    0x24c(%rbx),%esi
    0.00 :   11b9b:  je     12018 <Minisat::Solver::newVar(bool, bool)+0x5b8>
    0.00 :   11ba1:  mov    0x240(%rbx),%rax
    0.00 :   11ba8:  lea    0x1(%rsi),%edx
    0.00 :   11bab:  mov    %edx,0x248(%rbx)
    0.00 :   11bb1:  movb   $0x0,(%rax,%rsi,1)
    0.00 :   11bb5:  movslq 0x188(%rbx),%rsi
    0.00 :   11bbc:  cmp    0x18c(%rbx),%esi
    0.00 :   11bc2:  je     11ff8 <Minisat::Solver::newVar(bool, bool)+0x598>
    0.00 :   11bc8:  mov    0x180(%rbx),%rax
    0.00 :   11bcf:  lea    0x1(%rsi),%edx
    0.00 :   11bd2:  mov    %edx,0x188(%rbx)
    0.00 :   11bd8:  mov    %r13b,(%rax,%rsi,1)
         : 88    Minisat::vec<char>::push():
         : 73    void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
    0.00 :   11bdc:  movslq 0x198(%rbx),%rsi
    0.00 :   11be3:  cmp    0x19c(%rbx),%esi
    0.00 :   11be9:  je     12038 <Minisat::Solver::newVar(bool, bool)+0x5d8>
    0.00 :   11bef:  mov    0x190(%rbx),%rax
         : 78    Minisat::Solver::newVar(bool, bool):
         : 126   seen     .push(0);
         : 127   polarity .push(sign);
         : 128   decision .push();
         : 129   trail    .capacity(v+1);
    0.00 :   11bf6:  lea    0x1(%r12),%r14d
    0.00 :   11bfb:  lea    0x1a0(%rbx),%rdi
         : 132   Minisat::vec<char>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   11c02:  movslq %r12d,%r13
         : 89    Minisat::vec<char>::push():
    0.00 :   11c05:  movb   $0x0,(%rax,%rsi,1)
         : 88    Minisat::Solver::newVar(bool, bool):
    0.00 :   11c09:  mov    %r14d,%esi
         : 127   Minisat::vec<char>::push():
         : 73    void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
    0.00 :   11c0c:  addl   $0x1,0x198(%rbx)
         : 75    Minisat::Solver::newVar(bool, bool):
    0.00 :   11c13:  call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
         : 127   Minisat::vec<char>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   11c18:  mov    0x190(%rbx),%rax
    0.00 :   11c1f:  add    %r13,%rax
         : 90    Minisat::Solver::setDecisionVar(int, bool):
         : 333   inline int      Solver::nVars         ()      const   { return vardata.size(); }
         : 334   inline int      Solver::nFreeVars     ()      const   { return (int)dec_vars - (trail_lim.size() == 0 ? trail.size() : trail_lim[0]); }
         : 335   inline void     Solver::setPolarity   (Var v, bool b) { polarity[v] = b; }
         : 336   inline void     Solver::setDecisionVar(Var v, bool b)
         : 337   {
         : 338   if      ( b && !decision[v]) dec_vars++;
    0.00 :   11c22:  test   %bpl,%bpl
    0.00 :   11c25:  jne    11cc8 <Minisat::Solver::newVar(bool, bool)+0x268>
         : 334   else if (!b &&  decision[v]) dec_vars--;
    0.00 :   11c2b:  cmpb   $0x0,(%rax)
    0.00 :   11c2e:  jne    120a0 <Minisat::Solver::newVar(bool, bool)+0x640>
         :
         : 337   decision[v] = b;
    0.00 :   11c34:  mov    %bpl,(%rax)
         : 339   Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   11c37:  mov    0x210(%rbx),%eax
         : 65    Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80    public:
         : 81    Heap(const Comp& c) : lt(c) { }
         :
         : 83    int  size      ()          const { return heap.size(); }
         : 84    bool empty     ()          const { return heap.size() == 0; }
         : 85    bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
   24.58 :   11c3d:  cmp    %eax,%r12d
    0.00 :   11c40:  jge    11c68 <Minisat::Solver::newVar(bool, bool)+0x208>
    0.00 :   11c42:  mov    0x208(%rbx),%rdx
    0.00 :   11c49:  mov    (%rdx,%r13,4),%edx
    0.00 :   11c4d:  test   %edx,%edx
    0.00 :   11c4f:  js     11c68 <Minisat::Solver::newVar(bool, bool)+0x208>
         : 92    Minisat::Solver::newVar(bool, bool):
         : 129   setDecisionVar(v, dvar);
         : 130   return v;
         : 131   }
    0.00 :   11c51:  add    $0x18,%rsp
    0.00 :   11c55:  mov    %r12d,%eax
    0.00 :   11c58:  pop    %rbx
    0.00 :   11c59:  pop    %rbp
    0.00 :   11c5a:  pop    %r12
    0.00 :   11c5c:  pop    %r13
    0.00 :   11c5e:  pop    %r14
    0.00 :   11c60:  pop    %r15
    0.00 :   11c62:  ret
    0.00 :   11c63:  nopl   0x0(%rax,%rax,1)
         : 142   Minisat::Solver::insertVarOrder(int):
         : 281   if (!order_heap.inHeap(x) && decision[x]) order_heap.insert(x); }
    0.00 :   11c68:  mov    0x190(%rbx),%rdx
    0.00 :   11c6f:  cmpb   $0x0,(%rdx,%r13,1)
    0.00 :   11c74:  je     11c51 <Minisat::Solver::newVar(bool, bool)+0x1f1>
         : 285   Minisat::vec<int>::growTo(int, int const&):
         : 106   if (sz >= size) return;
    0.00 :   11c76:  cmp    %eax,%r14d
    0.00 :   11c79:  jg     120b0 <Minisat::Solver::newVar(bool, bool)+0x650>
         : 109   Minisat::vec<int>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   11c7f:  mov    0x208(%rbx),%rbp
    0.00 :   11c86:  shl    $0x2,%r13
    0.00 :   11c8a:  lea    0x0(%rbp,%r13,1),%rdx
         : 90    Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
    0.00 :   11c8f:  cmp    %eax,%r12d
    0.00 :   11c92:  jge    1210a <Minisat::Solver::newVar(bool, bool)+0x6aa>
    0.00 :   11c98:  mov    (%rdx),%eax
    0.00 :   11c9a:  test   %eax,%eax
    0.00 :   11c9c:  js     1210a <Minisat::Solver::newVar(bool, bool)+0x6aa>
         : 85    Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         :
         :
         : 104   void insert(int n)
         : 105   {
         : 106   indices.growTo(n+1, -1);
         : 107   assert(!inHeap(n));
    0.00 :   11ca2:  lea    0x240f(%rip),%rcx        # 140b8 <typeinfo name for Minisat::BoolOption+0x7a8>
    0.00 :   11ca9:  mov    $0x66,%edx
    0.00 :   11cae:  lea    0x27de(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   11cb5:  lea    0x27e5(%rip),%rdi        # 144a1 <typeinfo name for Minisat::BoolOption+0xb91>
    0.00 :   11cbc:  call   23b0 <__assert_fail@plt>
    0.00 :   11cc1:  nopl   0x0(%rax)
         : 114   Minisat::Solver::setDecisionVar(int, bool):
         : 333   if      ( b && !decision[v]) dec_vars++;
    0.00 :   11cc8:  cmpb   $0x0,(%rax)
    0.00 :   11ccb:  jne    11c34 <Minisat::Solver::newVar(bool, bool)+0x1d4>
    0.00 :   11cd1:  addq   $0x1,0xc8(%rbx)
    0.00 :   11cd9:  jmp    11c34 <Minisat::Solver::newVar(bool, bool)+0x1d4>
    0.00 :   11cde:  xchg   %ax,%ax
         : 339   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 115   capacity(size);
    0.00 :   11ce0:  mov    %r8,%rdi
    0.00 :   11ce3:  mov    %esi,0x8(%rsp)
    0.00 :   11ce7:  mov    %r8,(%rsp)
    0.00 :   11ceb:  call   12820 <Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::capacity(int)>
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11cf0:  mov    0x140(%rbx),%r9d
    0.00 :   11cf7:  mov    0x8(%rsp),%esi
    0.00 :   11cfb:  mov    (%rsp),%r8
    0.00 :   11cff:  cmp    %r9d,%esi
    0.00 :   11d02:  jle    11de9 <Minisat::Solver::newVar(bool, bool)+0x389>
    0.00 :   11d08:  mov    %r14d,%ecx
    0.00 :   11d0b:  mov    0x138(%rbx),%r10
    0.00 :   11d12:  sub    %r9d,%ecx
    0.00 :   11d15:  lea    0x1(%rcx),%r11d
    0.00 :   11d19:  cmp    $0x2,%ecx
    0.00 :   11d1c:  jbe    11d99 <Minisat::Solver::newVar(bool, bool)+0x339>
    0.00 :   11d1e:  sub    $0x3,%ecx
    0.00 :   11d21:  movslq %r9d,%rax
    0.00 :   11d24:  xor    %edi,%edi
    0.00 :   11d26:  shl    $0x4,%rax
    0.00 :   11d2a:  shr    $0x2,%ecx
    0.00 :   11d2d:  lea    (%r10,%rax,1),%rdx
    0.00 :   11d31:  add    $0x1,%ecx
    0.00 :   11d34:  lea    0x8(%r10,%rax,1),%rax
    0.00 :   11d39:  nopl   0x0(%rax)
         : 137   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11d40:  add    $0x1,%edi
    0.00 :   11d43:  movq   $0x0,(%rdx)
    0.00 :   11d4a:  add    $0x40,%rax
    0.00 :   11d4e:  add    $0x40,%rdx
    0.00 :   11d52:  movq   $0x0,-0x30(%rdx)
    0.00 :   11d5a:  movq   $0x0,-0x20(%rdx)
    0.00 :   11d62:  movq   $0x0,-0x10(%rdx)
    0.00 :   11d6a:  movq   $0x0,-0x40(%rax)
    0.00 :   11d72:  movq   $0x0,-0x30(%rax)
    0.00 :   11d7a:  movq   $0x0,-0x20(%rax)
    0.00 :   11d82:  movq   $0x0,-0x10(%rax)
         : 66    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11d8a:  cmp    %ecx,%edi
    0.00 :   11d8c:  jb     11d40 <Minisat::Solver::newVar(bool, bool)+0x2e0>
    0.00 :   11d8e:  shl    $0x2,%ecx
    0.00 :   11d91:  add    %ecx,%r9d
    0.00 :   11d94:  cmp    %r11d,%ecx
    0.00 :   11d97:  je     11de9 <Minisat::Solver::newVar(bool, bool)+0x389>
    0.00 :   11d99:  movslq %r9d,%rax
    0.00 :   11d9c:  lea    0x1(%r9),%ecx
    0.00 :   11da0:  shl    $0x4,%rax
    0.00 :   11da4:  lea    (%r10,%rax,1),%rdx
         : 127   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11da8:  movq   $0x0,(%rdx)
    0.00 :   11daf:  movq   $0x0,0x8(%rdx)
         : 57    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11db7:  cmp    %r9d,%r14d
    0.00 :   11dba:  jle    11de9 <Minisat::Solver::newVar(bool, bool)+0x389>
    0.00 :   11dbc:  lea    0x10(%r10,%rax,1),%rdx
         : 120   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11dc1:  movq   $0x0,(%rdx)
    0.00 :   11dc8:  movq   $0x0,0x8(%rdx)
         : 57    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11dd0:  cmp    %ecx,%r14d
    0.00 :   11dd3:  jle    11de9 <Minisat::Solver::newVar(bool, bool)+0x389>
    0.00 :   11dd5:  lea    0x20(%r10,%rax,1),%rax
         : 120   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11dda:  movq   $0x0,(%rax)
    0.00 :   11de1:  movq   $0x0,0x8(%rax)
         : 57    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 117   sz = size; }
    0.00 :   11de9:  mov    %esi,0x140(%rbx)
    0.00 :   11def:  mov    %esi,%edx
    0.00 :   11df1:  jmp    11a9e <Minisat::Solver::newVar(bool, bool)+0x3e>
    0.00 :   11df6:  cs nopw 0x0(%rax,%rax,1)
         : 115   capacity(size);
    0.00 :   11e00:  mov    %r8,%rdi
    0.00 :   11e03:  mov    %esi,(%rsp)
    0.00 :   11e06:  call   12820 <Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::capacity(int)>
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11e0b:  mov    0x140(%rbx),%r8d
    0.00 :   11e12:  mov    (%rsp),%esi
    0.00 :   11e15:  cmp    %r8d,%esi
    0.00 :   11e18:  jle    11f00 <Minisat::Solver::newVar(bool, bool)+0x4a0>
    0.00 :   11e1e:  mov    %r14d,%ecx
    0.00 :   11e21:  mov    0x138(%rbx),%r9
    0.00 :   11e28:  sub    %r8d,%ecx
    0.00 :   11e2b:  lea    0x1(%rcx),%eax
    0.00 :   11e2e:  lea    0x2(%rcx),%r10d
    0.00 :   11e32:  cmp    $0x2,%eax
    0.00 :   11e35:  jbe    11eb1 <Minisat::Solver::newVar(bool, bool)+0x451>
    0.00 :   11e37:  sub    $0x2,%ecx
    0.00 :   11e3a:  movslq %r8d,%rax
    0.00 :   11e3d:  xor    %edi,%edi
    0.00 :   11e3f:  shl    $0x4,%rax
    0.00 :   11e43:  shr    $0x2,%ecx
    0.00 :   11e46:  lea    (%r9,%rax,1),%rdx
    0.00 :   11e4a:  add    $0x1,%ecx
    0.00 :   11e4d:  lea    0x8(%r9,%rax,1),%rax
    0.00 :   11e52:  nopw   0x0(%rax,%rax,1)
         : 137   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11e58:  add    $0x1,%edi
    0.00 :   11e5b:  movq   $0x0,(%rdx)
    0.00 :   11e62:  add    $0x40,%rax
    0.00 :   11e66:  add    $0x40,%rdx
    0.00 :   11e6a:  movq   $0x0,-0x30(%rdx)
    0.00 :   11e72:  movq   $0x0,-0x20(%rdx)
    0.00 :   11e7a:  movq   $0x0,-0x10(%rdx)
    0.00 :   11e82:  movq   $0x0,-0x40(%rax)
    0.00 :   11e8a:  movq   $0x0,-0x30(%rax)
    0.00 :   11e92:  movq   $0x0,-0x20(%rax)
    0.00 :   11e9a:  movq   $0x0,-0x10(%rax)
         : 66    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11ea2:  cmp    %edi,%ecx
    0.00 :   11ea4:  ja     11e58 <Minisat::Solver::newVar(bool, bool)+0x3f8>
    0.00 :   11ea6:  shl    $0x2,%ecx
    0.00 :   11ea9:  add    %ecx,%r8d
    0.00 :   11eac:  cmp    %ecx,%r10d
    0.00 :   11eaf:  je     11f00 <Minisat::Solver::newVar(bool, bool)+0x4a0>
    0.00 :   11eb1:  movslq %r8d,%rax
    0.00 :   11eb4:  shl    $0x4,%rax
    0.00 :   11eb8:  lea    (%r9,%rax,1),%rdx
         : 126   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11ebc:  movq   $0x0,(%rdx)
    0.00 :   11ec3:  movq   $0x0,0x8(%rdx)
         : 57    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11ecb:  lea    0x1(%r8),%edx
    0.00 :   11ecf:  cmp    %edx,%esi
    0.00 :   11ed1:  jle    11f00 <Minisat::Solver::newVar(bool, bool)+0x4a0>
    0.00 :   11ed3:  lea    0x10(%r9,%rax,1),%rdx
         : 121   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11ed8:  movq   $0x0,(%rdx)
    0.00 :   11edf:  movq   $0x0,0x8(%rdx)
         : 57    Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   11ee7:  cmp    %r8d,%r14d
    0.00 :   11eea:  jle    11f00 <Minisat::Solver::newVar(bool, bool)+0x4a0>
    0.00 :   11eec:  lea    0x20(%r9,%rax,1),%rax
         : 120   Minisat::vec<Minisat::Solver::Watcher>::vec():
         : 54    vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   11ef1:  movq   $0x0,(%rax)
    0.00 :   11ef8:  movq   $0x0,0x8(%rax)
         : 57    Minisat::vec<char>::growTo(int, char const&):
         : 106   if (sz >= size) return;
    0.00 :   11f00:  mov    0x150(%rbx),%eax
         : 108   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 117   sz = size; }
   25.43 :   11f06:  mov    %esi,0x140(%rbx)
         : 119   Minisat::vec<char>::growTo(int, char const&):
         : 106   if (sz >= size) return;
    0.00 :   11f0c:  cmp    %eax,%esi
    0.00 :   11f0e:  jle    11ac7 <Minisat::Solver::newVar(bool, bool)+0x67>
         : 107   capacity(size);
    0.00 :   11f14:  mov    %r15,%rdi
    0.00 :   11f17:  mov    %esi,(%rsp)
    0.00 :   11f1a:  call   b4c0 <Minisat::vec<char>::capacity(int)>
         : 108   for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   11f1f:  mov    0x150(%rbx),%eax
    0.00 :   11f25:  mov    (%rsp),%esi
    0.00 :   11f28:  cmp    %eax,%esi
    0.00 :   11f2a:  jle    11f57 <Minisat::Solver::newVar(bool, bool)+0x4f7>
    0.00 :   11f2c:  sub    %eax,%r14d
    0.00 :   11f2f:  movslq %eax,%rdx
    0.00 :   11f32:  lea    0x1(%r14),%edi
    0.00 :   11f36:  lea    0x1(%rdx),%rax
    0.00 :   11f3a:  add    %rax,%rdi
    0.00 :   11f3d:  jmp    11f44 <Minisat::Solver::newVar(bool, bool)+0x4e4>
    0.00 :   11f3f:  nop
    0.00 :   11f40:  add    $0x1,%rax
    0.00 :   11f44:  mov    0x148(%rbx),%rcx
    0.00 :   11f4b:  movb   $0x0,(%rcx,%rdx,1)
    0.00 :   11f4f:  mov    %rax,%rdx
    0.00 :   11f52:  cmp    %rax,%rdi
    0.00 :   11f55:  jne    11f40 <Minisat::Solver::newVar(bool, bool)+0x4e0>
         : 109   sz = size; }
    0.00 :   11f57:  mov    %esi,0x150(%rbx)
         : 111   Minisat::vec<Minisat::lbool>::push(Minisat::lbool const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   11f5d:  movslq 0x178(%rbx),%rsi
    0.00 :   11f64:  cmp    0x17c(%rbx),%esi
    0.00 :   11f6a:  jne    11ada <Minisat::Solver::newVar(bool, bool)+0x7a>
    0.00 :   11f70:  add    $0x1,%esi
         : 79    Minisat::Solver::newVar(bool, bool):
         : 119   assigns  .push(l_Undef);
    0.00 :   11f73:  lea    0x170(%rbx),%rdi
         : 121   Minisat::vec<Minisat::lbool>::push(Minisat::lbool const&):
    0.00 :   11f7a:  call   121d0 <Minisat::vec<Minisat::lbool>::capacity(int)>
    0.00 :   11f7f:  movslq 0x178(%rbx),%rsi
    0.00 :   11f86:  jmp    11ada <Minisat::Solver::newVar(bool, bool)+0x7a>
    0.00 :   11f8b:  nopl   0x0(%rax,%rax,1)
         : 78    Minisat::vec<char>::growTo(int, char const&):
         : 107   capacity(size);
    0.00 :   11f90:  mov    %r15,%rdi
    0.00 :   11f93:  mov    %r8,0x8(%rsp)
    0.00 :   11f98:  mov    %esi,(%rsp)
    0.00 :   11f9b:  call   b4c0 <Minisat::vec<char>::capacity(int)>
         : 108   for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   11fa0:  mov    0x150(%rbx),%eax
    0.00 :   11fa6:  mov    (%rsp),%esi
    0.00 :   11fa9:  mov    0x8(%rsp),%r8
    0.00 :   11fae:  cmp    %eax,%esi
    0.00 :   11fb0:  jle    11fdf <Minisat::Solver::newVar(bool, bool)+0x57f>
    0.00 :   11fb2:  movslq %eax,%rdx
    0.00 :   11fb5:  mov    %r14d,%edi
    0.00 :   11fb8:  sub    %eax,%edi
    0.00 :   11fba:  lea    0x1(%rdx),%rax
    0.00 :   11fbe:  add    %rax,%rdi
    0.00 :   11fc1:  jmp    11fcc <Minisat::Solver::newVar(bool, bool)+0x56c>
    0.00 :   11fc3:  nopl   0x0(%rax,%rax,1)
    0.00 :   11fc8:  add    $0x1,%rax
    0.00 :   11fcc:  mov    0x148(%rbx),%rcx
    0.00 :   11fd3:  movb   $0x0,(%rcx,%rdx,1)
    0.00 :   11fd7:  mov    %rax,%rdx
    0.00 :   11fda:  cmp    %rax,%rdi
    0.00 :   11fdd:  jne    11fc8 <Minisat::Solver::newVar(bool, bool)+0x568>
         : 109   sz = size; }
    0.00 :   11fdf:  mov    %esi,0x150(%rbx)
         : 111   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::growTo(int):
         : 114   if (sz >= size) return;
    0.00 :   11fe5:  mov    0x140(%rbx),%edx
    0.00 :   11feb:  mov    %esi,%eax
    0.00 :   11fed:  jmp    11ab3 <Minisat::Solver::newVar(bool, bool)+0x53>
    0.00 :   11ff2:  nopw   0x0(%rax,%rax,1)
         : 119   Minisat::vec<char>::push(char const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   11ff8:  add    $0x1,%esi
         : 76    Minisat::Solver::newVar(bool, bool):
         : 124   polarity .push(sign);
    0.00 :   11ffb:  lea    0x180(%rbx),%rdi
         : 126   Minisat::vec<char>::push(char const&):
    0.00 :   12002:  call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   12007:  movslq 0x188(%rbx),%rsi
    0.00 :   1200e:  jmp    11bc8 <Minisat::Solver::newVar(bool, bool)+0x168>
    0.00 :   12013:  nopl   0x0(%rax,%rax,1)
    0.00 :   12018:  add    $0x1,%esi
         : 79    Minisat::Solver::newVar(bool, bool):
         : 123   seen     .push(0);
    0.00 :   1201b:  lea    0x240(%rbx),%rdi
         : 125   Minisat::vec<char>::push(char const&):
    0.00 :   12022:  call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   12027:  movslq 0x248(%rbx),%rsi
    0.00 :   1202e:  jmp    11ba1 <Minisat::Solver::newVar(bool, bool)+0x141>
    0.00 :   12033:  nopl   0x0(%rax,%rax,1)
         : 78    Minisat::vec<char>::push():
         : 73    void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
    0.00 :   12038:  add    $0x1,%esi
         : 75    Minisat::Solver::newVar(bool, bool):
         : 125   decision .push();
    0.00 :   1203b:  lea    0x190(%rbx),%rdi
         : 127   Minisat::vec<char>::push():
    0.00 :   12042:  call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   12047:  movslq 0x198(%rbx),%rsi
    0.00 :   1204e:  jmp    11bef <Minisat::Solver::newVar(bool, bool)+0x18f>
    0.00 :   12053:  nopl   0x0(%rax,%rax,1)
         : 77    Minisat::vec<double>::push(double const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   12058:  add    $0x1,%esi
         : 76    Minisat::Solver::newVar(bool, bool):
         : 122   activity .push(rnd_init_act ? drand(random_seed) * 0.00001 : 0);
    0.00 :   1205b:  lea    0x120(%rbx),%rdi
    0.00 :   12062:  movsd  %xmm0,(%rsp)
         : 125   Minisat::vec<double>::push(double const&):
    0.00 :   12067:  call   122f0 <Minisat::vec<double>::capacity(int)>
    0.00 :   1206c:  movslq 0x128(%rbx),%rsi
    0.00 :   12073:  movsd  (%rsp),%xmm0
    0.00 :   12078:  jmp    11b79 <Minisat::Solver::newVar(bool, bool)+0x119>
    0.00 :   1207d:  nopl   (%rax)
         : 79    Minisat::vec<Minisat::Solver::VarData>::push(Minisat::Solver::VarData const&):
    0.00 :   12080:  add    $0x1,%esi
         : 75    Minisat::Solver::newVar(bool, bool):
         : 120   vardata  .push(mkVarData(CRef_Undef, 0));
    0.00 :   12083:  lea    0x1c0(%rbx),%rdi
         : 122   Minisat::vec<Minisat::Solver::VarData>::push(Minisat::Solver::VarData const&):
    0.00 :   1208a:  call   12260 <Minisat::vec<Minisat::Solver::VarData>::capacity(int)>
    0.00 :   1208f:  movslq 0x1c8(%rbx),%rsi
    0.00 :   12096:  jmp    11b01 <Minisat::Solver::newVar(bool, bool)+0xa1>
    0.00 :   1209b:  nopl   0x0(%rax,%rax,1)
         : 78    Minisat::Solver::setDecisionVar(int, bool):
         : 334   else if (!b &&  decision[v]) dec_vars--;
    0.00 :   120a0:  subq   $0x1,0xc8(%rbx)
    0.00 :   120a8:  jmp    11c34 <Minisat::Solver::newVar(bool, bool)+0x1d4>
    0.00 :   120ad:  nopl   (%rax)
         : 338   Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 101   indices.growTo(n+1, -1);
    0.00 :   120b0:  lea    0x208(%rbx),%rdi
         : 103   Minisat::vec<int>::growTo(int, int const&):
         : 107   capacity(size);
    0.00 :   120b7:  mov    %r14d,%esi
    0.00 :   120ba:  call   b430 <Minisat::vec<int>::capacity(int)>
         : 108   for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   120bf:  movslq 0x210(%rbx),%rax
    0.00 :   120c6:  mov    0x208(%rbx),%rbp
    0.00 :   120cd:  cmp    %eax,%r14d
    0.00 :   120d0:  jle    120ee <Minisat::Solver::newVar(bool, bool)+0x68e>
    0.00 :   120d2:  mov    %r12d,%edx
    0.00 :   120d5:  lea    0x0(%rbp,%rax,4),%rdi
    0.00 :   120da:  mov    $0xff,%esi
    0.00 :   120df:  sub    %eax,%edx
    0.00 :   120e1:  lea    0x4(,%rdx,4),%rdx
    0.00 :   120e9:  call   2370 <memset@plt>
         : 119   Minisat::vec<int>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   120ee:  shl    $0x2,%r13
         : 88    Minisat::vec<int>::growTo(int, int const&):
         : 109   sz = size; }
    0.00 :   120f2:  mov    %r14d,%eax
    0.00 :   120f5:  mov    %r14d,0x210(%rbx)
         : 112   Minisat::vec<int>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   120fc:  lea    0x0(%rbp,%r13,1),%rdx
         : 88    Minisat::Heap<Minisat::Solver::VarOrderLt>::inHeap(int) const:
         : 80    bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   12101:  cmp    %eax,%r12d
    0.00 :   12104:  jl     11c98 <Minisat::Solver::newVar(bool, bool)+0x238>
         : 83    Minisat::vec<int>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   1210a:  mov    0x200(%rbx),%eax
         : 65    Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         :
         : 105   indices[n] = heap.size();
    0.00 :   12110:  mov    %eax,(%rdx)
         : 107   Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   12112:  cmp    0x204(%rbx),%eax
    0.00 :   12118:  je     121a4 <Minisat::Solver::newVar(bool, bool)+0x744>
    0.00 :   1211e:  movslq 0x200(%rbx),%rax
    0.00 :   12125:  mov    0x1f8(%rbx),%rdi
    0.00 :   1212c:  lea    0x1(%rax),%ecx
    0.00 :   1212f:  mov    %ecx,0x200(%rbx)
    0.00 :   12135:  mov    %r12d,(%rdi,%rax,4)
         : 82    Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106   heap.push(n);
         : 107   percolateUp(indices[n]);
    0.00 :   12139:  movslq (%rdx),%r8
         : 109   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41    static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   1213c:  lea    -0x1(%r8),%edx
         : 43    Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 46    int x  = heap[i];
    0.00 :   12140:  mov    (%rdi,%r8,4),%r10d
         : 48    Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 106   percolateUp(indices[n]);
    0.00 :   12144:  mov    %r8,%rax
         : 108   Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41    static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   12147:  sar    %edx
         : 43    Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49    while (i != 0 && lt(x, heap[p])){
    0.00 :   12149:  test   %r8d,%r8d
    0.00 :   1214c:  je     121c4 <Minisat::Solver::newVar(bool, bool)+0x764>
         : 52    Minisat::vec<double>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   1214e:  mov    0x1f0(%rbx),%rcx
    0.00 :   12155:  movslq %r10d,%r11
    0.00 :   12158:  mov    (%rcx),%r9
         : 90    Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165   bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.00 :   1215b:  movsd  (%r9,%r11,8),%xmm0
    0.00 :   12161:  jmp    12181 <Minisat::Solver::newVar(bool, bool)+0x721>
    0.00 :   12163:  nopl   0x0(%rax,%rax,1)
         : 169   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 50    heap[i]          = heap[p];
    0.00 :   12168:  mov    %ecx,(%r8)
         : 51    indices[heap[p]] = i;
    0.00 :   1216b:  mov    %eax,0x0(%rbp,%rcx,4)
         : 53    Minisat::Heap<Minisat::Solver::VarOrderLt>::parent(int):
         : 41    static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   1216f:  lea    -0x1(%rdx),%eax
    0.00 :   12172:  sar    %eax
    0.00 :   12174:  mov    %eax,%ecx
         : 45    Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49    while (i != 0 && lt(x, heap[p])){
    0.00 :   12176:  mov    %edx,%eax
    0.00 :   12178:  test   %edx,%edx
    0.00 :   1217a:  je     12197 <Minisat::Solver::newVar(bool, bool)+0x737>
         : 53    p                = parent(p);
    0.00 :   1217c:  mov    %ecx,%edx
    0.00 :   1217e:  movslq %eax,%r8
         : 56    Minisat::vec<int>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   12181:  movslq %edx,%rcx
    0.00 :   12184:  lea    (%rdi,%r8,4),%r8
         : 90    Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 49    while (i != 0 && lt(x, heap[p])){
    0.00 :   12188:  movslq (%rdi,%rcx,4),%rcx
    0.00 :   1218c:  comisd (%r9,%rcx,8),%xmm0
    0.00 :   12192:  ja     12168 <Minisat::Solver::newVar(bool, bool)+0x708>
         : 53    Minisat::vec<int>::operator[](int):
   24.64 :   12194:  mov    %r8,%rdi
         : 88    Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateUp(int):
         : 55    heap   [i] = x;
    0.00 :   12197:  mov    %r10d,(%rdi)
         : 56    indices[x] = i;
    0.00 :   1219a:  mov    %eax,0x0(%rbp,%r11,4)
         : 58    Minisat::Solver::newVar(bool, bool):
         : 128   return v;
    0.00 :   1219f:  jmp    11c51 <Minisat::Solver::newVar(bool, bool)+0x1f1>
         : 130   Minisat::vec<int>::push(int const&):
         : 74    void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   121a4:  lea    0x1(%rax),%esi
         : 76    Minisat::Heap<Minisat::Solver::VarOrderLt>::insert(int):
         : 105   heap.push(n);
    0.00 :   121a7:  lea    0x1f8(%rbx),%rdi
         : 107   Minisat::vec<int>::push(int const&):
    0.00 :   121ae:  call   b430 <Minisat::vec<int>::capacity(int)>
         : 75    Minisat::vec<int>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   121b3:  mov    0x208(%rbx),%rbp
    0.00 :   121ba:  lea    0x0(%rbp,%r13,1),%rdx
         : 90    Minisat::vec<int>::push(int const&):
    0.00 :   121bf:  jmp    1211e <Minisat::Solver::newVar(bool, bool)+0x6be>
         : 88    Minisat::vec<int>::operator[](int):
    0.00 :   121c4:  movslq %r10d,%r11
    0.00 :   121c7:  jmp    12197 <Minisat::Solver::newVar(bool, bool)+0x737>
 Percent |	Source code & Disassembly of libm.so.6 for cycles:u (3 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000037e30 <pow@@GLIBC_2.29>:
         : 6     __pow():
         : 7     ./math/./w_pow_template.c:31
    0.00 :   37e30:  endbr64
    0.00 :   37e34:  sub    $0x18,%rsp
         : 10    ./math/./w_pow_template.c:32
    0.00 :   37e38:  movsd  %xmm1,0x8(%rsp)
    0.00 :   37e3e:  movsd  %xmm0,(%rsp)
    0.00 :   37e43:  call   e300 <*ABS*+0x29d80@plt>
         : 14    ./math/./w_pow_template.c:33
    0.00 :   37e48:  movsd  (%rsp),%xmm2
    0.00 :   37e4d:  movq   0x5246b(%rip),%xmm4        # 8a2c0 <othermask>
    0.00 :   37e55:  movsd  0x5247b(%rip),%xmm3        # 8a2d8 <one+0x8>
    0.00 :   37e5d:  movapd %xmm0,%xmm5
   66.48 :   37e61:  movsd  0x8(%rsp),%xmm1
    0.00 :   37e67:  andpd  %xmm4,%xmm5
    0.00 :   37e6b:  ucomisd %xmm5,%xmm3
   33.52 :   37e6f:  jb     37e88 <pow@@GLIBC_2.29+0x58>
         : 23    ./math/./w_pow_template.c:45
    0.00 :   37e71:  pxor   %xmm6,%xmm6
    0.00 :   37e75:  ucomisd %xmm6,%xmm0
    0.00 :   37e79:  jp     37e7d <pow@@GLIBC_2.29+0x4d>
    0.00 :   37e7b:  je     37eb8 <pow@@GLIBC_2.29+0x88>
         : 28    ./math/./w_pow_template.c:49
    0.00 :   37e7d:  add    $0x18,%rsp
    0.00 :   37e81:  ret
    0.00 :   37e82:  nopw   0x0(%rax,%rax,1)
         : 32    ./math/./w_pow_template.c:35
    0.00 :   37e88:  andpd  %xmm4,%xmm2
    0.00 :   37e8c:  ucomisd %xmm2,%xmm3
    0.00 :   37e90:  jb     37e7d <pow@@GLIBC_2.29+0x4d>
         : 36    ./math/./w_pow_template.c:35 (discriminator 1)
    0.00 :   37e92:  andpd  %xmm4,%xmm1
    0.00 :   37e96:  ucomisd %xmm1,%xmm3
    0.00 :   37e9a:  jb     37e7d <pow@@GLIBC_2.29+0x4d>
         : 40    ./math/./w_pow_template.c:37
    0.00 :   37e9c:  ucomisd %xmm0,%xmm0
    0.00 :   37ea0:  jnp    37ed8 <pow@@GLIBC_2.29+0xa8>
         : 43    ./math/./w_pow_template.c:39
    0.00 :   37ea2:  mov    0xae10f(%rip),%rax        # e5fb8 <errno@GLIBC_PRIVATE>
    0.00 :   37ea9:  movl   $0x21,%fs:(%rax)
    0.00 :   37eb0:  jmp    37e7d <pow@@GLIBC_2.29+0x4d>
    0.00 :   37eb2:  nopw   0x0(%rax,%rax,1)
         : 48    ./math/./w_pow_template.c:45 (discriminator 1)
    0.00 :   37eb8:  movapd %xmm2,%xmm5
    0.00 :   37ebc:  andpd  %xmm4,%xmm5
    0.00 :   37ec0:  ucomisd %xmm5,%xmm3
    0.00 :   37ec4:  jb     37e7d <pow@@GLIBC_2.29+0x4d>
         : 53    ./math/./w_pow_template.c:45 (discriminator 2)
    0.00 :   37ec6:  ucomisd %xmm6,%xmm2
    0.00 :   37eca:  jp     37ece <pow@@GLIBC_2.29+0x9e>
    0.00 :   37ecc:  je     37e7d <pow@@GLIBC_2.29+0x4d>
         : 57    ./math/./w_pow_template.c:45
    0.00 :   37ece:  andpd  %xmm4,%xmm1
    0.00 :   37ed2:  ucomisd %xmm1,%xmm3
    0.00 :   37ed6:  jb     37e7d <pow@@GLIBC_2.29+0x4d>
         : 61    ./math/./w_pow_template.c:42
    0.00 :   37ed8:  mov    0xae0d9(%rip),%rax        # e5fb8 <errno@GLIBC_PRIVATE>
    0.00 :   37edf:  movl   $0x22,%fs:(%rax)
    0.00 :   37ee6:  jmp    37e7d <pow@@GLIBC_2.29+0x4d>
 Percent |	Source code & Disassembly of minisat for cycles:u (4 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000c3e0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]>:
         : 6    void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>):
         : 57   }
         : 58   template <class T> static inline void selectionSort(T* array, int size) {
         : 59   selectionSort(array, size, LessThan_default<T>()); }
         :
         : 61   template <class T, class LessThan>
         : 62   void sort(T* array, int size, LessThan lt)
    0.00 :   c3e0:   push   %r15
    0.00 :   c3e2:   mov    %rdi,%r8
    0.00 :   c3e5:   push   %r14
    0.00 :   c3e7:   push   %r13
    0.00 :   c3e9:   push   %r12
    0.00 :   c3eb:   push   %rbp
    0.00 :   c3ec:   push   %rbx
    0.00 :   c3ed:   mov    %esi,%ebx
    0.00 :   c3ef:   sub    $0x28,%rsp
         : 59   {
         : 60   if (size <= 15)
    0.00 :   c3f3:   cmp    $0xf,%esi
    0.00 :   c3f6:   jle    c470 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x90>
         : 63   selectionSort(array, size, lt);
         :
         : 65   else{
         : 66   T           pivot = array[size / 2];
    0.00 :   c3f8:   mov    %ebx,%eax
    0.00 :   c3fa:   mov    %r8,%r12
    0.00 :   c3fd:   mov    %ebx,%edx
         : 65   T           tmp;
         : 66   int         i = -1;
    0.00 :   c3ff:   mov    $0xffffffff,%r13d
         : 63   T           pivot = array[size / 2];
    0.00 :   c405:   sar    %eax
    0.00 :   c407:   cltq
    0.00 :   c409:   mov    (%r8,%rax,4),%ecx
    0.00 :   c40d:   nopl   (%rax)
    0.00 :   c410:   mov    (%r12),%edi
         : 69   int         j = size;
         :
         : 71   for(;;){
         : 72   do i++; while(lt(array[i], pivot));
    0.00 :   c414:   add    $0x1,%r13d
    0.00 :   c418:   mov    %r12,%rbp
    0.00 :   c41b:   cmp    %edi,%ecx
    0.00 :   c41d:   jg     c44c <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x6c>
    0.00 :   c41f:   movslq %edx,%rax
    0.00 :   c422:   lea    -0x4(%r8,%rax,4),%rax
    0.00 :   c427:   nopw   0x0(%rax,%rax,1)
         : 70   do j--; while(lt(pivot, array[j]));
    0.00 :   c430:   mov    %rax,%rsi
    0.00 :   c433:   sub    $0x4,%rax
    0.00 :   c437:   sub    $0x1,%edx
    0.00 :   c43a:   cmp    0x4(%rax),%ecx
    0.00 :   c43d:   jl     c430 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x50>
         :
         : 73   if (i >= j) break;
    0.00 :   c43f:   cmp    %edx,%r13d
    0.00 :   c442:   jge    c458 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x78>
         :
         : 75   tmp = array[i]; array[i] = array[j]; array[j] = tmp;
    0.00 :   c444:   mov    (%rsi),%eax
    0.00 :   c446:   mov    %eax,(%r12)
    0.00 :   c44a:   mov    %edi,(%rsi)
         : 68   for(;;){
    0.00 :   c44c:   add    $0x4,%r12
    0.00 :   c450:   jmp    c410 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x30>
    0.00 :   c452:   nopw   0x0(%rax,%rax,1)
         : 77   }
         :
         : 79   sort(array    , i     , lt);
    0.00 :   c458:   mov    %r13d,%esi
    0.00 :   c45b:   mov    %r8,%rdi
         : 78   sort(&array[i], size-i, lt);
    0.00 :   c45e:   sub    %r13d,%ebx
         : 77   sort(array    , i     , lt);
    0.00 :   c461:   call   c3e0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]>
         : 59   if (size <= 15)
    0.00 :   c466:   cmp    $0xf,%ebx
    0.00 :   c469:   jle    c473 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x93>
         : 69   do i++; while(lt(array[i], pivot));
    0.00 :   c46b:   mov    %r12,%r8
    0.00 :   c46e:   jmp    c3f8 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x18>
         : 59   if (size <= 15)
    0.00 :   c470:   mov    %rdi,%rbp
         : 61   void Minisat::selectionSort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>):
         : 44   for (i = 0; i < size-1; i++){
    0.00 :   c473:   lea    -0x1(%rbx),%eax
    0.00 :   c476:   mov    %eax,0x1c(%rsp)
    0.00 :   c47a:   test   %eax,%eax
    0.00 :   c47c:   jle    c71e <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x33e>
    0.00 :   c482:   mov    %rbp,%rax
    0.00 :   c485:   mov    $0x5,%r13d
    0.00 :   c48b:   mov    $0x2,%edi
    0.00 :   c490:   xor    %ecx,%ecx
    0.00 :   c492:   movl   $0x7,0x14(%rsp)
    0.00 :   c49a:   mov    $0x4,%r9d
    0.00 :   c4a0:   mov    $0x3,%r8d
    0.00 :   c4a6:   movl   $0x6,0x10(%rsp)
   24.34 :   c4ae:   movl   $0xe,0x18(%rsp)
    0.00 :   c4b6:   jmp    c700 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x320>
    0.00 :   c4bb:   nopl   0x0(%rax,%rax,1)
    0.00 :   c4c0:   mov    0x4(%rax),%r10d
    0.00 :   c4c4:   lea    0x4(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c4c8:   mov    %ecx,%r15d
    0.00 :   c4cb:   mov    %rdx,0x8(%rsp)
    0.00 :   c4d0:   cmp    %r11d,%r10d
    0.00 :   c4d3:   jl     c4de <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0xfe>
    0.00 :   c4d5:   mov    %r11d,%r10d
    0.00 :   c4d8:   mov    %rax,%rdx
   21.29 :   c4db:   mov    %esi,%r15d
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c4de:   mov    %edi,%r14d
   27.68 :   c4e1:   cmp    %edi,%ebx
    0.00 :   c4e3:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c4e9:   mov    0x8(%rax),%r12d
    0.00 :   c4ed:   lea    0x8(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c4f1:   cmp    %r10d,%r12d
    0.00 :   c4f4:   jl     c504 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x124>
    0.00 :   c4f6:   movslq %r15d,%rdx
    0.00 :   c4f9:   mov    %r10d,%r12d
    0.00 :   c4fc:   mov    %r15d,%r14d
    0.00 :   c4ff:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c504:   mov    %r8d,%r15d
   26.69 :   c507:   cmp    %r8d,%ebx
    0.00 :   c50a:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c510:   mov    0xc(%rax),%r10d
    0.00 :   c514:   lea    0xc(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c518:   cmp    %r12d,%r10d
    0.00 :   c51b:   jl     c52b <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x14b>
    0.00 :   c51d:   movslq %r14d,%rdx
    0.00 :   c520:   mov    %r12d,%r10d
    0.00 :   c523:   mov    %r14d,%r15d
    0.00 :   c526:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c52b:   mov    %r9d,%r14d
    0.00 :   c52e:   cmp    %r9d,%ebx
    0.00 :   c531:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c537:   mov    0x10(%rax),%r12d
    0.00 :   c53b:   lea    0x10(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c53f:   cmp    %r10d,%r12d
    0.00 :   c542:   jl     c552 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x172>
    0.00 :   c544:   movslq %r15d,%rdx
    0.00 :   c547:   mov    %r10d,%r12d
    0.00 :   c54a:   mov    %r15d,%r14d
    0.00 :   c54d:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c552:   mov    %r13d,%r15d
    0.00 :   c555:   cmp    %ebx,%r13d
    0.00 :   c558:   jge    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c55e:   mov    0x14(%rax),%r10d
    0.00 :   c562:   lea    0x14(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c566:   cmp    %r12d,%r10d
    0.00 :   c569:   jl     c579 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x199>
    0.00 :   c56b:   movslq %r14d,%rdx
    0.00 :   c56e:   mov    %r12d,%r10d
    0.00 :   c571:   mov    %r14d,%r15d
    0.00 :   c574:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c579:   mov    0x10(%rsp),%r12d
    0.00 :   c57e:   mov    %r12d,%r14d
    0.00 :   c581:   cmp    %r12d,%ebx
    0.00 :   c584:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c58a:   mov    0x18(%rax),%r12d
    0.00 :   c58e:   lea    0x18(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c592:   cmp    %r12d,%r10d
    0.00 :   c595:   jg     c5a5 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x1c5>
    0.00 :   c597:   movslq %r15d,%rdx
    0.00 :   c59a:   mov    %r10d,%r12d
    0.00 :   c59d:   mov    %r15d,%r14d
    0.00 :   c5a0:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c5a5:   mov    0x14(%rsp),%r10d
    0.00 :   c5aa:   mov    %r10d,%r15d
    0.00 :   c5ad:   cmp    %ebx,%r10d
    0.00 :   c5b0:   jge    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c5b6:   mov    0x1c(%rax),%r10d
    0.00 :   c5ba:   lea    0x1c(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c5be:   cmp    %r10d,%r12d
    0.00 :   c5c1:   jg     c5d1 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x1f1>
    0.00 :   c5c3:   movslq %r14d,%rdx
    0.00 :   c5c6:   mov    %r12d,%r10d
    0.00 :   c5c9:   mov    %r14d,%r15d
    0.00 :   c5cc:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c5d1:   lea    0x8(%rsi),%r14d
    0.00 :   c5d5:   cmp    %r14d,%ebx
    0.00 :   c5d8:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c5de:   mov    0x20(%rax),%r12d
    0.00 :   c5e2:   lea    0x20(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c5e6:   cmp    %r12d,%r10d
    0.00 :   c5e9:   jg     c5f9 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x219>
    0.00 :   c5eb:   movslq %r15d,%rdx
    0.00 :   c5ee:   mov    %r10d,%r12d
    0.00 :   c5f1:   mov    %r15d,%r14d
    0.00 :   c5f4:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c5f9:   lea    0x9(%rsi),%r15d
    0.00 :   c5fd:   cmp    %r15d,%ebx
    0.00 :   c600:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c606:   mov    0x24(%rax),%r10d
    0.00 :   c60a:   lea    0x24(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c60e:   cmp    %r10d,%r12d
    0.00 :   c611:   jg     c621 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x241>
    0.00 :   c613:   movslq %r14d,%rdx
    0.00 :   c616:   mov    %r12d,%r10d
    0.00 :   c619:   mov    %r14d,%r15d
    0.00 :   c61c:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c621:   lea    0xa(%rsi),%r14d
    0.00 :   c625:   cmp    %r14d,%ebx
    0.00 :   c628:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c62e:   mov    0x28(%rax),%r12d
    0.00 :   c632:   lea    0x28(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c636:   cmp    %r12d,%r10d
    0.00 :   c639:   jg     c649 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x269>
    0.00 :   c63b:   movslq %r15d,%rdx
    0.00 :   c63e:   mov    %r10d,%r12d
    0.00 :   c641:   mov    %r15d,%r14d
    0.00 :   c644:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c649:   lea    0xb(%rsi),%r15d
    0.00 :   c64d:   cmp    %r15d,%ebx
    0.00 :   c650:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c652:   mov    0x2c(%rax),%r10d
    0.00 :   c656:   lea    0x2c(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c65a:   cmp    %r10d,%r12d
    0.00 :   c65d:   jg     c66d <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x28d>
    0.00 :   c65f:   movslq %r14d,%rdx
    0.00 :   c662:   mov    %r12d,%r10d
    0.00 :   c665:   mov    %r14d,%r15d
    0.00 :   c668:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c66d:   lea    0xc(%rsi),%r14d
    0.00 :   c671:   cmp    %r14d,%ebx
    0.00 :   c674:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c676:   mov    0x30(%rax),%r12d
    0.00 :   c67a:   lea    0x30(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c67e:   cmp    %r12d,%r10d
    0.00 :   c681:   jg     c691 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2b1>
    0.00 :   c683:   movslq %r15d,%rdx
    0.00 :   c686:   mov    %r10d,%r12d
    0.00 :   c689:   mov    %r15d,%r14d
    0.00 :   c68c:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c691:   add    $0xd,%esi
    0.00 :   c694:   cmp    %esi,%ebx
    0.00 :   c696:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c698:   mov    0x34(%rax),%r10d
    0.00 :   c69c:   lea    0x34(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c6a0:   cmp    %r10d,%r12d
    0.00 :   c6a3:   jg     c6b3 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2d3>
    0.00 :   c6a5:   movslq %r14d,%rdx
    0.00 :   c6a8:   mov    %r12d,%r10d
    0.00 :   c6ab:   mov    %r14d,%esi
    0.00 :   c6ae:   lea    0x0(%rbp,%rdx,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c6b3:   cmp    0x18(%rsp),%ebx
    0.00 :   c6b7:   jle    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c6b9:   lea    0x38(%rax),%rdx
         : 47   if (lt(array[j], array[best_i]))
    0.00 :   c6bd:   cmp    %r10d,0x38(%rax)
    0.00 :   c6c1:   jl     c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
    0.00 :   c6c3:   movslq %esi,%rsi
    0.00 :   c6c6:   lea    0x0(%rbp,%rsi,4),%rdx
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c6cb:   nopl   0x0(%rax,%rax,1)
         : 50   tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   c6d0:   mov    (%rdx),%esi
         : 44   for (i = 0; i < size-1; i++){
    0.00 :   c6d2:   addl   $0x1,0x18(%rsp)
    0.00 :   c6d7:   add    $0x1,%edi
    0.00 :   c6da:   add    $0x1,%r8d
    0.00 :   c6de:   addl   $0x1,0x10(%rsp)
    0.00 :   c6e3:   add    $0x1,%r9d
    0.00 :   c6e7:   add    $0x1,%r13d
         : 50   tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   c6eb:   mov    %esi,(%rax)
         : 44   for (i = 0; i < size-1; i++){
    0.00 :   c6ed:   mov    0x8(%rsp),%rax
    0.00 :   c6f2:   addl   $0x1,0x14(%rsp)
         : 50   tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   c6f7:   mov    %r11d,(%rdx)
         : 44   for (i = 0; i < size-1; i++){
    0.00 :   c6fa:   cmp    0x1c(%rsp),%ecx
    0.00 :   c6fe:   je     c71e <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x33e>
    0.00 :   c700:   mov    %ecx,%esi
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c702:   add    $0x1,%ecx
         : 50   tmp = array[i]; array[i] = array[best_i]; array[best_i] = tmp;
    0.00 :   c705:   mov    (%rax),%r11d
         : 46   for (j = i+1; j < size; j++){
    0.00 :   c708:   cmp    %ebx,%ecx
    0.00 :   c70a:   jl     c4c0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0xe0>
    0.00 :   c710:   lea    0x4(%rax),%rsi
    0.00 :   c714:   mov    %rax,%rdx
    0.00 :   c717:   mov    %rsi,0x8(%rsp)
    0.00 :   c71c:   jmp    c6d0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]+0x2f0>
         : 53   void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>):
         : 80   }
         : 81   }
    0.00 :   c71e:   add    $0x28,%rsp
    0.00 :   c722:   pop    %rbx
    0.00 :   c723:   pop    %rbp
    0.00 :   c724:   pop    %r12
    0.00 :   c726:   pop    %r13
    0.00 :   c728:   pop    %r14
    0.00 :   c72a:   pop    %r15
    0.00 :   c72c:   ret
 Percent |	Source code & Disassembly of minisat for cycles:u (3 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000dfa0 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)>:
         : 6    Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 546  checkGarbage();
         : 547  }
         :
         :
         : 550  void Solver::removeSatisfied(vec<CRef>& cs)
         : 551  {
    0.00 :   dfa0:   endbr64
    0.00 :   dfa4:   push   %r13
    0.00 :   dfa6:   push   %r12
    0.00 :   dfa8:   push   %rbp
    0.00 :   dfa9:   push   %rbx
    0.00 :   dfaa:   sub    $0x8,%rsp
         : 548  int i, j;
         : 549  for (i = j = 0; i < cs.size(); i++){
    0.00 :   dfae:   mov    0x8(%rsi),%eax
    0.00 :   dfb1:   test   %eax,%eax
    0.00 :   dfb3:   jle    e06d <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xcd>
    0.00 :   dfb9:   mov    %rdi,%r13
    0.00 :   dfbc:   mov    %rsi,%rbp
    0.00 :   dfbf:   xor    %ebx,%ebx
    0.00 :   dfc1:   xor    %r12d,%r12d
    0.00 :   dfc4:   nopl   0x0(%rax)
         : 558  Minisat::vec<unsigned int>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   dfc8:   mov    0x0(%rbp),%r9
         : 94   Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 549  Clause& c = ca[cs[i]];
    0.00 :   dfcc:   mov    (%r9,%rbx,4),%r8d
         : 551  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   dfd0:   cmp    0x230(%r13),%r8d
    0.00 :   dfd7:   jae    e090 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xf0>
    0.00 :   dfdd:   mov    0x228(%r13),%rdx
    0.00 :   dfe4:   mov    %r8d,%eax
    0.00 :   dfe7:   lea    (%rdx,%rax,4),%rdx
         : 74   Minisat::Solver::satisfied(Minisat::Clause const&) const:
         : 199  for (int i = 0; i < c.size(); i++)
    0.00 :   dfeb:   mov    (%rdx),%eax
    0.00 :   dfed:   shr    $0x5,%eax
    0.00 :   dff0:   je     e060 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xc0>
    0.00 :   dff2:   sub    $0x1,%eax
         : 204  Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   dff5:   mov    0x170(%r13),%rsi
    0.00 :   dffc:   lea    0x4(%rdx),%rcx
   34.59 :   e000:   lea    0x8(%rdx,%rax,4),%rdi
    0.00 :   e005:   jmp    e019 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0x79>
    0.00 :   e007:   nopw   0x0(%rax,%rax,1)
         : 92   Minisat::Solver::satisfied(Minisat::Clause const&) const:
    0.00 :   e010:   add    $0x4,%rcx
   30.68 :   e014:   cmp    %rdi,%rcx
    0.00 :   e017:   je     e060 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xc0>
         : 202  Minisat::Clause::operator[](int) const:
         : 178  void         relocate    (CRef c)        { header.reloced = 1; data[0].rel = c; }
         :
         : 180  // NOTE: somewhat unsafe to change the clause in-place! Must manually call 'calcAbstraction' afterwards for
         : 181  //       subsumption operations to behave correctly.
         : 182  Lit&         operator [] (int i)         { return data[i].lit; }
         : 183  Lit          operator [] (int i) const   { return data[i].lit; }
    0.00 :   e019:   mov    (%rcx),%eax
         : 185  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
   34.73 :   e01b:   mov    %eax,%edx
         : 64   Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
    0.00 :   e01d:   and    $0x1,%eax
         : 63   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   e020:   sar    %edx
         : 64   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   e022:   movslq %edx,%rdx
         : 87   Minisat::Solver::satisfied(Minisat::Clause const&) const:
         : 200  if (value(c[i]) == l_True)
    0.00 :   e025:   cmp    %al,(%rsi,%rdx,1)
    0.00 :   e028:   jne    e010 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0x70>
         : 203  Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 551  if (satisfied(c))
         : 552  removeClause(cs[i]);
    0.00 :   e02a:   mov    %r8d,%esi
    0.00 :   e02d:   mov    %r13,%rdi
    0.00 :   e030:   call   de80 <Minisat::Solver::removeClause(unsigned int)>
         : 556  Minisat::vec<unsigned int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e035:   mov    0x8(%rbp),%eax
    0.00 :   e038:   lea    0x1(%rbx),%edx
         : 66   Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 548  for (i = j = 0; i < cs.size(); i++){
    0.00 :   e03b:   add    $0x1,%rbx
    0.00 :   e03f:   cmp    %ebx,%eax
    0.00 :   e041:   jg     dfc8 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0x28>
         : 555  else
         : 556  cs[j++] = cs[i];
         : 557  }
         : 558  cs.shrink(i - j);
    0.00 :   e043:   sub    %r12d,%edx
         : 560  Minisat::vec<unsigned int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   e046:   cmp    %eax,%edx
    0.00 :   e048:   jg     e06f <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xcf>
    0.00 :   e04a:   test   %edx,%edx
    0.00 :   e04c:   jle    e053 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xb3>
    0.00 :   e04e:   sub    %edx,%eax
    0.00 :   e050:   mov    %eax,0x8(%rbp)
         : 71   Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 556  }
    0.00 :   e053:   add    $0x8,%rsp
    0.00 :   e057:   pop    %rbx
    0.00 :   e058:   pop    %rbp
    0.00 :   e059:   pop    %r12
    0.00 :   e05b:   pop    %r13
    0.00 :   e05d:   ret
    0.00 :   e05e:   xchg   %ax,%ax
         : 564  Minisat::vec<unsigned int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e060:   movslq %r12d,%rax
         : 89   Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&):
         : 553  cs[j++] = cs[i];
    0.00 :   e063:   add    $0x1,%r12d
    0.00 :   e067:   mov    %r8d,(%r9,%rax,4)
    0.00 :   e06b:   jmp    e035 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0x95>
         : 557  Minisat::vec<unsigned int>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   e06d:   je     e053 <Minisat::Solver::removeSatisfied(Minisat::vec<unsigned int>&)+0xb3>
    0.00 :   e06f:   lea    0x6662(%rip),%rcx        # 146d8 <typeinfo name for Minisat::BoolOption+0xdc8>
    0.00 :   e076:   mov    $0x40,%edx
    0.00 :   e07b:   lea    0x6450(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   e082:   lea    0x6689(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   e089:   call   23b0 <__assert_fail@plt>
    0.00 :   e08e:   xchg   %ax,%ax
         : 72   Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   e090:   lea    0x59a1(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   e097:   mov    $0x3f,%edx
    0.00 :   e09c:   lea    0x5977(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   e0a3:   lea    0x636e(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   e0aa:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (4 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000017970 <__GI___tunables_init>:
         : 6     __GI___tunables_init():
         : 7     ./elf/dl-tunables.c:282
    0.00 :   17970:  endbr64
    0.00 :   17974:  push   %r15
    0.00 :   17976:  push   %r14
    0.00 :   17978:  push   %r13
    0.00 :   1797a:  push   %r12
    0.00 :   1797c:  push   %rbp
    0.00 :   1797d:  mov    %rdi,%rbp
    0.00 :   17980:  push   %rbx
    0.00 :   17981:  sub    $0x28,%rsp
         : 17    maybe_enable_malloc_check():
         : 18    ./elf/dl-tunables.c:273
    0.00 :   17985:  mov    0x2210d(%rip),%eax        # 39a98 <__libc_enable_secure>
    0.00 :   1798b:  test   %eax,%eax
    0.00 :   1798d:  jne    17c25 <__GI___tunables_init+0x2b5>
    0.00 :   17993:  lea    0x21166(%rip),%rbx        # 38b00 <tunable_list>
    0.00 :   1799a:  mov    $0xffffffffffffffa8,%r12
    0.00 :   179a1:  sub    %rbx,%r12
    0.00 :   179a4:  nopl   0x0(%rax)
         : 26    get_next_env():
         : 27    ./elf/dl-tunables.c:71
    0.00 :   179a8:  test   %rbp,%rbp
    0.00 :   179ab:  je     179ed <__GI___tunables_init+0x7d>
    0.00 :   179ad:  mov    0x0(%rbp),%r9
    0.00 :   179b1:  test   %r9,%r9
    0.00 :   179b4:  je     179ed <__GI___tunables_init+0x7d>
         : 33    ./elf/dl-tunables.c:77
    0.00 :   179b6:  movzbl (%r9),%edx
         : 35    ./elf/dl-tunables.c:74
    0.00 :   179ba:  lea    0x8(%rbp),%r13
         : 37    ./elf/dl-tunables.c:77
    0.00 :   179be:  cmp    $0x3d,%dl
    0.00 :   179c1:  je     179fc <__GI___tunables_init+0x8c>
    0.00 :   179c3:  test   %dl,%dl
    0.00 :   179c5:  je     179fc <__GI___tunables_init+0x8c>
    0.00 :   179c7:  mov    $0x1,%eax
    0.00 :   179cc:  jmp    179d5 <__GI___tunables_init+0x65>
    0.00 :   179ce:  xchg   %ax,%ax
    0.00 :   179d0:  cmp    $0x3d,%dl
   33.03 :   179d3:  je     17a00 <__GI___tunables_init+0x90>
    0.00 :   179d5:  movzbl (%r9,%rax,1),%edx
    0.00 :   179da:  mov    %rax,%rcx
    0.00 :   179dd:  add    $0x1,%rax
    0.00 :   179e1:  test   %dl,%dl
    0.00 :   179e3:  jne    179d0 <__GI___tunables_init+0x60>
         : 52    ./elf/dl-tunables.c:74
    0.00 :   179e5:  mov    %r13,%rbp
         : 54    ./elf/dl-tunables.c:71
    0.00 :   179e8:  test   %rbp,%rbp
    0.00 :   179eb:  jne    179ad <__GI___tunables_init+0x3d>
         : 57    __GI___tunables_init():
         : 58    ./elf/dl-tunables.c:357
    0.00 :   179ed:  add    $0x28,%rsp
    0.00 :   179f1:  pop    %rbx
    0.00 :   179f2:  pop    %rbp
    0.00 :   179f3:  pop    %r12
    0.00 :   179f5:  pop    %r13
    0.00 :   179f7:  pop    %r14
    0.00 :   179f9:  pop    %r15
    0.00 :   179fb:  ret
         : 67    get_next_env():
         : 68    ./elf/dl-tunables.c:77
    0.00 :   179fc:  xor    %ecx,%ecx
    0.00 :   179fe:  xchg   %ax,%ax
         : 71    ./elf/dl-tunables.c:81
    0.00 :   17a00:  test   %dl,%dl
    0.00 :   17a02:  je     179e5 <__GI___tunables_init+0x75>
         : 74    ./elf/dl-tunables.c:86
    0.00 :   17a04:  lea    0x1(%rcx),%r14
    0.00 :   17a08:  mov    %r9,%rax
    0.00 :   17a0b:  lea    0x16866(%rip),%rsi        # 2e278 <_sys_errnameidx+0x978>
         : 78    tunable_is_name():
         : 79    ./elf/dl-tunables.h:140
    0.00 :   17a12:  mov    $0x47,%ecx
         : 81    get_next_env():
         : 82    ./elf/dl-tunables.c:86
    0.00 :   17a17:  lea    (%r9,%r14,1),%r15
         : 84    tunable_is_name():
         : 85    ./elf/dl-tunables.h:140
    0.00 :   17a1b:  jmp    17a3b <__GI___tunables_init+0xcb>
    0.00 :   17a1d:  nopl   (%rax)
         : 88    ./elf/dl-tunables.h:141
    0.00 :   17a20:  cmp    %cl,%dl
    0.00 :   17a22:  jne    17a42 <__GI___tunables_init+0xd2>
         : 91    ./elf/dl-tunables.h:140
    0.00 :   17a24:  movzbl 0x1(%rsi),%ecx
    0.00 :   17a28:  add    $0x1,%rsi
    0.00 :   17a2c:  lea    0x1(%rax),%rdx
    0.00 :   17a30:  test   %cl,%cl
    0.00 :   17a32:  je     17b0c <__GI___tunables_init+0x19c>
    0.00 :   17a38:  mov    %rdx,%rax
    0.00 :   17a3b:  movzbl (%rax),%edx
         : 99    ./elf/dl-tunables.h:141
   28.99 :   17a3e:  test   %dl,%dl
    0.00 :   17a40:  jne    17a20 <__GI___tunables_init+0xb0>
         : 102   __GI___tunables_init():
         : 103   ./elf/dl-tunables.c:323
    0.00 :   17a42:  mov    0x2204f(%rip),%r11d        # 39a98 <__libc_enable_secure>
   18.54 :   17a49:  lea    0x21108(%rip),%r8        # 38b58 <tunable_list+0x58>
    0.00 :   17a50:  xor    %r10d,%r10d
    0.00 :   17a53:  jmp    17a6a <__GI___tunables_init+0xfa>
    0.00 :   17a55:  nopl   (%rax)
         : 109   ./elf/dl-tunables.c:305 (discriminator 2)
    0.00 :   17a58:  add    $0x1,%r10d
    0.00 :   17a5c:  add    $0x70,%r8
    0.00 :   17a60:  cmp    $0x23,%r10d
    0.00 :   17a64:  je     179e5 <__GI___tunables_init+0x75>
         : 114   ./elf/dl-tunables.c:311
    0.00 :   17a6a:  cmpb   $0x0,-0x8(%r8)
   19.44 :   17a6f:  jne    17a58 <__GI___tunables_init+0xe8>
         : 117   ./elf/dl-tunables.c:311 (discriminator 2)
    0.00 :   17a71:  movzbl (%r8),%edi
    0.00 :   17a75:  test   %dil,%dil
    0.00 :   17a78:  je     17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a7a:  lea    (%r12,%r8,1),%r14
         : 122   ./elf/dl-tunables.c:311
    0.00 :   17a7e:  mov    %r8,%rsi
    0.00 :   17a81:  mov    %r9,%rax
    0.00 :   17a84:  mov    %edi,%edx
    0.00 :   17a86:  cs nopw 0x0(%rax,%rax,1)
         : 127   tunable_is_name():
         : 128   ./elf/dl-tunables.h:140
    0.00 :   17a90:  movzbl (%rax),%ecx
         : 130   ./elf/dl-tunables.h:141
    0.00 :   17a93:  cmp    %dl,%cl
    0.00 :   17a95:  jne    17a58 <__GI___tunables_init+0xe8>
    0.00 :   17a97:  test   %cl,%cl
    0.00 :   17a99:  je     17a58 <__GI___tunables_init+0xe8>
         : 135   ./elf/dl-tunables.h:140
    0.00 :   17a9b:  movzbl 0x1(%rsi),%edx
    0.00 :   17a9f:  add    $0x1,%rsi
    0.00 :   17aa3:  add    $0x1,%rax
    0.00 :   17aa7:  test   %dl,%dl
    0.00 :   17aa9:  jne    17a90 <__GI___tunables_init+0x120>
         : 141   ./elf/dl-tunables.h:145
    0.00 :   17aab:  cmpb   $0x3d,(%rax)
    0.00 :   17aae:  jne    17a58 <__GI___tunables_init+0xe8>
         : 144   __GI___tunables_init():
         : 145   ./elf/dl-tunables.c:323
    0.00 :   17ab0:  test   %r11d,%r11d
    0.00 :   17ab3:  je     17ac6 <__GI___tunables_init+0x156>
         : 148   ./elf/dl-tunables.c:325
    0.00 :   17ab5:  mov    -0x4(%r8),%eax
    0.00 :   17ab9:  test   %eax,%eax
    0.00 :   17abb:  je     17b90 <__GI___tunables_init+0x220>
         : 152   ./elf/dl-tunables.c:348
    0.00 :   17ac1:  cmp    $0x2,%eax
    0.00 :   17ac4:  jne    17a58 <__GI___tunables_init+0xe8>
         : 155   tunable_initialize():
         : 156   ./elf/dl-tunables.c:147
    0.00 :   17ac6:  movslq %r10d,%r10
    0.00 :   17ac9:  lea    0x0(,%r10,8),%rax
    0.00 :   17ad1:  sub    %r10,%rax
    0.00 :   17ad4:  shl    $0x4,%rax
    0.00 :   17ad8:  cmpl   $0x3,0x30(%rbx,%rax,1)
    0.00 :   17add:  je     17b86 <__GI___tunables_init+0x216>
         : 163   ./elf/dl-tunables.c:148
    0.00 :   17ae3:  xor    %esi,%esi
    0.00 :   17ae5:  mov    %r15,%rdi
    0.00 :   17ae8:  call   d750 <_dl_strtoul>
    0.00 :   17aed:  mov    %rax,0x18(%rsp)
         : 168   ./elf/dl-tunables.c:151
    0.00 :   17af2:  lea    0x18(%rsp),%rsi
         : 170   __GI___tunables_init():
         : 171   ./elf/dl-tunables.c:307
    0.00 :   17af7:  lea    (%rbx,%r14,1),%rdi
         : 173   tunable_initialize():
         : 174   ./elf/dl-tunables.c:151
    0.00 :   17afb:  xor    %ecx,%ecx
    0.00 :   17afd:  xor    %edx,%edx
    0.00 :   17aff:  call   17320 <do_tunable_update_val>
         : 178   ./elf/dl-tunables.c:152
    0.00 :   17b04:  mov    %r13,%rbp
    0.00 :   17b07:  jmp    179a8 <__GI___tunables_init+0x38>
         : 181   tunable_is_name():
         : 182   ./elf/dl-tunables.h:145
    0.00 :   17b0c:  cmpb   $0x3d,0x1(%rax)
    0.00 :   17b10:  jne    17a42 <__GI___tunables_init+0xd2>
         : 185   tunables_strdup():
         : 186   ./elf/dl-tunables.c:49
    0.00 :   17b16:  xor    %eax,%eax
    0.00 :   17b18:  nopl   0x0(%rax,%rax,1)
         : 189   ./elf/dl-tunables.c:51
    0.00 :   17b20:  mov    %rax,%rdx
    0.00 :   17b23:  add    $0x1,%rax
    0.00 :   17b27:  cmpb   $0x0,-0x1(%r9,%rax,1)
    0.00 :   17b2d:  jne    17b20 <__GI___tunables_init+0x1b0>
         : 194   ./elf/dl-tunables.c:52
    0.00 :   17b2f:  lea    0x2(%rdx),%rdi
    0.00 :   17b33:  mov    %r9,0x8(%rsp)
    0.00 :   17b38:  mov    %rdx,(%rsp)
    0.00 :   17b3c:  call   d3d0 <__minimal_malloc>
         : 199   ./elf/dl-tunables.c:57
    0.00 :   17b41:  mov    (%rsp),%rdx
    0.00 :   17b45:  mov    0x8(%rsp),%r9
    0.00 :   17b4a:  test   %rax,%rax
    0.00 :   17b4d:  je     17c53 <__GI___tunables_init+0x2e3>
    0.00 :   17b53:  nopl   0x0(%rax,%rax,1)
         : 205   ./elf/dl-tunables.c:61
    0.00 :   17b58:  movzbl (%r9,%rdx,1),%ecx
    0.00 :   17b5d:  mov    %cl,(%rax,%rdx,1)
         : 208   ./elf/dl-tunables.c:60
    0.00 :   17b60:  sub    $0x1,%rdx
    0.00 :   17b64:  jae    17b58 <__GI___tunables_init+0x1e8>
         : 211   __GI___tunables_init():
         : 212   ./elf/dl-tunables.c:298
    0.00 :   17b66:  lea    (%rax,%r14,1),%rdi
    0.00 :   17b6a:  mov    %r15,%rsi
    0.00 :   17b6d:  mov    %rax,(%rsp)
    0.00 :   17b71:  call   17410 <parse_tunables>
         : 217   ./elf/dl-tunables.c:300
    0.00 :   17b76:  mov    (%rsp),%rax
    0.00 :   17b7a:  mov    %rax,0x0(%rbp)
         : 220   get_next_env():
         : 221   ./elf/dl-tunables.c:74
    0.00 :   17b7e:  mov    %r13,%rbp
         : 223   __GI___tunables_init():
         : 224   ./elf/dl-tunables.c:301
    0.00 :   17b81:  jmp    179a8 <__GI___tunables_init+0x38>
         : 226   tunable_initialize():
         : 227   ./elf/dl-tunables.c:150
    0.00 :   17b86:  mov    %r15,0x18(%rsp)
    0.00 :   17b8b:  jmp    17af2 <__GI___tunables_init+0x182>
         : 230   __GI___tunables_init():
         : 231   ./elf/dl-tunables.c:330
    0.00 :   17b90:  mov    0x0(%rbp),%rax
    0.00 :   17b94:  mov    %rbp,%rsi
    0.00 :   17b97:  mov    %rbp,%r13
    0.00 :   17b9a:  test   %rax,%rax
    0.00 :   17b9d:  je     17a58 <__GI___tunables_init+0xe8>
         : 237   tunable_is_name():
         : 238   ./elf/dl-tunables.h:140
    0.00 :   17ba3:  mov    %r8,%rcx
    0.00 :   17ba6:  test   %dil,%dil
    0.00 :   17ba9:  jne    17bc6 <__GI___tunables_init+0x256>
    0.00 :   17bab:  jmp    17bf0 <__GI___tunables_init+0x280>
    0.00 :   17bad:  nopl   (%rax)
         : 244   ./elf/dl-tunables.h:141
    0.00 :   17bb0:  cmp    %dl,%dil
    0.00 :   17bb3:  jne    17bcd <__GI___tunables_init+0x25d>
         : 247   ./elf/dl-tunables.h:140
    0.00 :   17bb5:  movzbl 0x1(%rcx),%edi
    0.00 :   17bb9:  add    $0x1,%rcx
    0.00 :   17bbd:  add    $0x1,%rax
    0.00 :   17bc1:  test   %dil,%dil
    0.00 :   17bc4:  je     17bf0 <__GI___tunables_init+0x280>
    0.00 :   17bc6:  movzbl (%rax),%edx
         : 254   ./elf/dl-tunables.h:141
    0.00 :   17bc9:  test   %dl,%dl
    0.00 :   17bcb:  jne    17bb0 <__GI___tunables_init+0x240>
         : 257   __GI___tunables_init():
         : 258   ./elf/dl-tunables.c:330
    0.00 :   17bcd:  mov    0x8(%rsi),%rax
         : 260   ./elf/dl-tunables.c:341
    0.00 :   17bd1:  add    $0x8,%rsi
         : 262   ./elf/dl-tunables.c:330
    0.00 :   17bd5:  test   %rax,%rax
    0.00 :   17bd8:  je     17c19 <__GI___tunables_init+0x2a9>
         : 265   tunable_is_name():
         : 266   ./elf/dl-tunables.h:140
    0.00 :   17bda:  movzbl (%r8),%edi
    0.00 :   17bde:  mov    %r8,%rcx
    0.00 :   17be1:  test   %dil,%dil
    0.00 :   17be4:  jne    17bc6 <__GI___tunables_init+0x256>
    0.00 :   17be6:  cs nopw 0x0(%rax,%rax,1)
         : 272   ./elf/dl-tunables.h:145
    0.00 :   17bf0:  cmpb   $0x3d,(%rax)
    0.00 :   17bf3:  jne    17bcd <__GI___tunables_init+0x25d>
    0.00 :   17bf5:  mov    %rsi,%rax
    0.00 :   17bf8:  nopl   0x0(%rax,%rax,1)
         : 277   __GI___tunables_init():
         : 278   ./elf/dl-tunables.c:337 (discriminator 1)
    0.00 :   17c00:  mov    0x8(%rax),%rdx
         : 280   ./elf/dl-tunables.c:338 (discriminator 1)
    0.00 :   17c04:  add    $0x8,%rax
         : 282   ./elf/dl-tunables.c:337 (discriminator 1)
    0.00 :   17c08:  mov    %rdx,-0x8(%rax)
         : 284   ./elf/dl-tunables.c:338 (discriminator 1)
    0.00 :   17c0c:  test   %rdx,%rdx
    0.00 :   17c0f:  jne    17c00 <__GI___tunables_init+0x290>
         : 287   ./elf/dl-tunables.c:330
    0.00 :   17c11:  mov    (%rsi),%rax
    0.00 :   17c14:  test   %rax,%rax
    0.00 :   17c17:  jne    17bda <__GI___tunables_init+0x26a>
         : 291   ./elf/dl-tunables.c:348
    0.00 :   17c19:  mov    -0x4(%r8),%eax
    0.00 :   17c1d:  mov    %rbp,%r13
    0.00 :   17c20:  jmp    17ac1 <__GI___tunables_init+0x151>
         : 295   __access_noerrno():
         : 296   ./elf/../sysdeps/unix/sysv/linux/not-errno.h:30
    0.00 :   17c25:  xor    %esi,%esi
    0.00 :   17c27:  lea    0x16659(%rip),%rdi        # 2e287 <_sys_errnameidx+0x987>
    0.00 :   17c2e:  mov    $0x15,%eax
    0.00 :   17c33:  syscall
         : 301   maybe_enable_malloc_check():
         : 302   ./elf/dl-tunables.c:273
    0.00 :   17c35:  test   %eax,%eax
    0.00 :   17c37:  je     17c44 <__GI___tunables_init+0x2d4>
    0.00 :   17c39:  cmp    $0xfffff000,%eax
    0.00 :   17c3e:  ja     17993 <__GI___tunables_init+0x23>
         : 307   ./elf/dl-tunables.c:274
    0.00 :   17c44:  movl   $0x2,0x21de6(%rip)        # 39a34 <tunable_list+0xf34>
    0.00 :   17c4e:  jmp    17993 <__GI___tunables_init+0x23>
         : 310   tunables_strdup():
         : 311   ./elf/dl-tunables.c:58
    0.00 :   17c53:  lea    0x19946(%rip),%rdi        # 315a0 <__PRETTY_FUNCTION__.0+0x10>
    0.00 :   17c5a:  call   ff20 <_dl_fatal_printf>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000019010 <update_active.constprop.0>:
         : 6     update_active():
         : 7     ./elf/../sysdeps/x86/cpu-features.c:43
    0.00 :   19010:  push   %r15
    0.00 :   19012:  push   %r14
    0.00 :   19014:  push   %r13
    0.00 :   19016:  push   %r12
    0.00 :   19018:  push   %rbp
    0.00 :   19019:  push   %rbx
    0.00 :   1901a:  sub    $0xa0,%rsp
         : 15    ./elf/../sysdeps/x86/cpu-features.c:88
    0.00 :   19021:  mov    0x20b85(%rip),%ebx        # 39bac <_rtld_global_ro+0xcc>
         : 17    ./elf/../sysdeps/x86/cpu-features.c:47
    0.00 :   19027:  mov    0x20b3e(%rip),%r11d        # 39b6c <_rtld_global_ro+0x8c>
         : 19    ./elf/../sysdeps/x86/cpu-features.c:75
    0.00 :   1902e:  mov    0x20b57(%rip),%r8d        # 39b8c <_rtld_global_ro+0xac>
         : 21    ./elf/../sysdeps/x86/cpu-features.c:57
    0.00 :   19035:  mov    0x20b34(%rip),%r14d        # 39b70 <_rtld_global_ro+0x90>
         : 23    ./elf/../sysdeps/x86/cpu-features.c:88
    0.00 :   1903c:  mov    %ebx,-0x70(%rsp)
         : 25    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   19040:  and    $0x200161,%ebx
         : 27    ./elf/../sysdeps/x86/cpu-features.c:56
    0.00 :   19046:  mov    %r11d,%ecx
         : 29    ./elf/../sysdeps/x86/cpu-features.c:55
    0.00 :   19049:  mov    %r11d,%eax
         : 31    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   1904c:  or     0x20b6a(%rip),%ebx        # 39bbc <_rtld_global_ro+0xdc>
         : 33    ./elf/../sysdeps/x86/cpu-features.c:66
    0.00 :   19052:  mov    0x20b2f(%rip),%r13d        # 39b88 <_rtld_global_ro+0xa8>
         : 35    ./elf/../sysdeps/x86/cpu-features.c:55
    0.00 :   19059:  and    $0x2d82203,%eax
         : 37    ./elf/../sysdeps/x86/cpu-features.c:56
    0.00 :   1905e:  and    $0x8000000,%ecx
         : 39    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   19064:  mov    %ebx,%r15d
    0.00 :   19067:  mov    %ebx,-0x6c(%rsp)
         : 42    ./elf/../sysdeps/x86/cpu-features.c:93
    0.00 :   1906b:  mov    0x20b3f(%rip),%ebx        # 39bb0 <_rtld_global_ro+0xd0>
         : 44    ./elf/../sysdeps/x86/cpu-features.c:76
    0.00 :   19071:  mov    %r8d,%edx
         : 46    ./elf/../sysdeps/x86/cpu-features.c:55
    0.00 :   19074:  or     0x20b02(%rip),%eax        # 39b7c <_rtld_global_ro+0x9c>
         : 48    ./elf/../sysdeps/x86/cpu-features.c:80
    0.00 :   1907a:  mov    %r11d,%esi
         : 50    ./elf/../sysdeps/x86/cpu-features.c:76
    0.00 :   1907d:  and    $0x10,%edx
         : 52    ./elf/../sysdeps/x86/cpu-features.c:65
    0.00 :   19080:  mov    %r14d,%r9d
         : 54    ./elf/../sysdeps/x86/cpu-features.c:93
    0.00 :   19083:  and    $0x8000000,%ebx
         : 56    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   19089:  movd   %r15d,%xmm0
         : 58    ./elf/../sysdeps/x86/cpu-features.c:56
    0.00 :   1908e:  or     %ecx,%eax
         : 60    ./elf/../sysdeps/x86/cpu-features.c:74
    0.00 :   19090:  mov    %r13d,%edi
         : 62    ./elf/../sysdeps/x86/cpu-features.c:93
    0.00 :   19093:  or     0x20b27(%rip),%ebx        # 39bc0 <_rtld_global_ro+0xe0>
         : 64    ./elf/../sysdeps/x86/cpu-features.c:80
    0.00 :   19099:  and    $0x40000000,%esi
         : 66    ./elf/../sysdeps/x86/cpu-features.c:76
    0.00 :   1909f:  mov    %edx,-0x74(%rsp)
         : 68    ./elf/../sysdeps/x86/cpu-features.c:65
    0.00 :   190a3:  and    $0x17888110,%r9d
         : 70    ./elf/../sysdeps/x86/cpu-features.c:84
    0.00 :   190aa:  mov    0x20adf(%rip),%r10d        # 39b90 <_rtld_global_ro+0xb0>
         : 72    ./elf/../sysdeps/x86/cpu-features.c:95
    0.00 :   190b1:  mov    0x20b6c(%rip),%r15d        # 39c24 <_rtld_global_ro+0x144>
         : 74    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   190b8:  movd   %ebx,%xmm1
         : 76    ./elf/../sysdeps/x86/cpu-features.c:80
    0.00 :   190bc:  or     %eax,%esi
         : 78    ./elf/../sysdeps/x86/cpu-features.c:94
    0.00 :   190be:  mov    0x20b44(%rip),%ebx        # 39c08 <_rtld_global_ro+0x128>
         : 80    ./elf/../sysdeps/x86/cpu-features.c:65
    0.00 :   190c4:  or     0x20ab5(%rip),%r9d        # 39b80 <_rtld_global_ro+0xa0>
         : 82    ./elf/../sysdeps/x86/cpu-features.c:83
    0.00 :   190cb:  mov    %r8d,%eax
         : 84    ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   190ce:  punpckldq %xmm1,%xmm0
         : 86    ./elf/../sysdeps/x86/cpu-features.c:74
    0.00 :   190d2:  and    $0x218c0318,%edi
         : 88    ./elf/../sysdeps/x86/cpu-features.c:87
    0.00 :   190d8:  mov    %r10d,%edx
         : 90    ./elf/../sysdeps/x86/cpu-features.c:74
    0.00 :   190db:  or     0x20ab7(%rip),%edi        # 39b98 <_rtld_global_ro+0xb8>
         : 92    ./elf/../sysdeps/x86/cpu-features.c:65
    0.00 :   190e1:  mov    %r9d,0x20a98(%rip)        # 39b80 <_rtld_global_ro+0xa0>
         : 94    ./elf/../sysdeps/x86/cpu-features.c:94
    0.00 :   190e8:  and    $0x200,%ebx
    0.00 :   190ee:  or     %ebx,0x20b24(%rip)        # 39c18 <_rtld_global_ro+0x138>
         : 97    ./elf/../sysdeps/x86/cpu-features.c:97
    0.00 :   190f4:  mov    %r15d,%ebx
         : 99    ./elf/../sysdeps/x86/cpu-features.c:83
    0.00 :   190f7:  and    $0x1a400131,%eax
         : 101   ./elf/../sysdeps/x86/cpu-features.c:74
    0.00 :   190fc:  mov    %edi,0x20a96(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 103   ./elf/../sysdeps/x86/cpu-features.c:83
    0.00 :   19102:  or     0x20a94(%rip),%eax        # 39b9c <_rtld_global_ro+0xbc>
         : 105   ./elf/../sysdeps/x86/cpu-features.c:87
    0.00 :   19108:  and    $0x14810,%edx
         : 107   ./elf/../sysdeps/x86/cpu-features.c:97
    0.00 :   1910e:  and    $0x1c00,%ebx
         : 109   ./elf/../sysdeps/x86/cpu-features.c:80
    0.00 :   19114:  mov    %esi,0x20a62(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 111   ./elf/../sysdeps/x86/cpu-features.c:87
    0.00 :   1911a:  or     0x20a80(%rip),%edx        # 39ba0 <_rtld_global_ro+0xc0>
         : 113   ./elf/../sysdeps/x86/cpu-features.c:92
    0.00 :   19120:  movq   %xmm0,0x20a94(%rip)        # 39bbc <_rtld_global_ro+0xdc>
         : 115   ./elf/../sysdeps/x86/cpu-features.c:97
    0.00 :   19128:  or     0x20b06(%rip),%ebx        # 39c34 <_rtld_global_ro+0x154>
         : 117   ./elf/../sysdeps/x86/cpu-features.c:98
    0.00 :   1912e:  mov    0x20b34(%rip),%ebp        # 39c68 <_rtld_global_ro+0x188>
         : 119   ./elf/../sysdeps/x86/cpu-features.c:97
    0.00 :   19134:  mov    %ebx,0x20afa(%rip)        # 39c34 <_rtld_global_ro+0x154>
         : 121   ./elf/../sysdeps/x86/cpu-features.c:98
    0.00 :   1913a:  and    $0x10,%ebp
    0.00 :   1913d:  or     %ebp,0x20b35(%rip)        # 39c78 <_rtld_global_ro+0x198>
         : 124   ./elf/../sysdeps/x86/cpu-features.c:100
    0.00 :   19143:  test   $0x800,%r10d
    0.00 :   1914a:  jne    1915d <update_active.constprop.0+0x14d>
         : 127   ./elf/../sysdeps/x86/cpu-features.c:101
    0.00 :   1914c:  mov    %r13d,%ebp
    0.00 :   1914f:  and    $0x800,%ebp
    0.00 :   19155:  or     %ebp,%edi
    0.00 :   19157:  mov    %edi,0x20a3b(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 132   ./elf/../sysdeps/x86/cpu-features.c:104
    0.00 :   1915d:  mov    %r10d,%r12d
         : 134   ./elf/../sysdeps/x86/cpu-features.c:105
    0.00 :   19160:  mov    %r8d,%ebp
         : 136   ./elf/../sysdeps/x86/cpu-features.c:104
    0.00 :   19163:  and    $0x100000,%r12d
         : 138   ./elf/../sysdeps/x86/cpu-features.c:105
    0.00 :   1916a:  and    $0x80,%ebp
         : 140   ./elf/../sysdeps/x86/cpu-features.c:104
    0.00 :   19170:  or     %edx,%r12d
         : 142   ./elf/../sysdeps/x86/cpu-features.c:105
    0.00 :   19173:  or     %eax,%ebp
         : 144   ./elf/../sysdeps/x86/cpu-features.c:104
    0.00 :   19175:  mov    %r12d,0x20a24(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
         : 146   ./elf/../sysdeps/x86/cpu-features.c:105
    0.00 :   1917c:  mov    %ebp,0x20a1a(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 148   ./elf/../sysdeps/x86/cpu-features.c:109
    0.00 :   19182:  test   %ecx,%ecx
    0.00 :   19184:  je     191d5 <update_active.constprop.0+0x1c5>
         : 151   ./elf/../sysdeps/x86/cpu-features.c:113
    0.00 :   19186:  xor    %ecx,%ecx
    0.00 :   19188:  xgetbv
         : 154   ./elf/../sysdeps/x86/cpu-features.c:115
   34.76 :   1918b:  mov    %eax,%edx
    0.00 :   1918d:  and    $0x6,%edx
    0.00 :   19190:  cmp    $0x6,%edx
    0.00 :   19193:  je     19330 <update_active.constprop.0+0x320>
         : 159   ./elf/../sysdeps/x86/cpu-features.c:198
    0.00 :   19199:  and    $0x60000,%eax
    0.00 :   1919e:  cmp    $0x60000,%eax
    0.00 :   191a3:  je     19410 <update_active.constprop.0+0x400>
         : 163   ./elf/../sysdeps/x86/cpu-features.c:210
    0.00 :   191a9:  or     $0x4000000,%esi
    0.00 :   191af:  mov    %esi,0x209c7(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 166   ./elf/../sysdeps/x86/cpu-features.c:211
    0.00 :   191b5:  mov    0x20a09(%rip),%esi        # 39bc4 <_rtld_global_ro+0xe4>
         : 168   ./elf/../sysdeps/x86/cpu-features.c:214
    0.00 :   191bb:  mov    %esi,%ebp
    0.00 :   191bd:  and    $0x17,%ebp
    0.00 :   191c0:  or     0x20a0e(%rip),%ebp        # 39bd4 <_rtld_global_ro+0xf4>
         : 172   ./elf/../sysdeps/x86/cpu-features.c:218
    0.00 :   191c6:  cmpl   $0xc,0x20987(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 174   ./elf/../sysdeps/x86/cpu-features.c:214
    0.00 :   191cd:  mov    %ebp,0x20a01(%rip)        # 39bd4 <_rtld_global_ro+0xf4>
         : 176   ./elf/../sysdeps/x86/cpu-features.c:218
    0.00 :   191d3:  jg     19240 <update_active.constprop.0+0x230>
         : 178   ./elf/../sysdeps/x86/cpu-features.c:285
    0.00 :   191d5:  mov    -0x74(%rsp),%eax
    0.00 :   191d9:  test   %eax,%eax
    0.00 :   191db:  je     191e4 <update_active.constprop.0+0x1d4>
         : 182   ./elf/../sysdeps/x86/cpu-features.c:286
    0.00 :   191dd:  orl    $0x8,0x209b8(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 184   ./elf/../sysdeps/x86/cpu-features.c:289
    0.00 :   191e4:  mov    0x20a5e(%rip),%eax        # 39c48 <_rtld_global_ro+0x168>
    0.00 :   191ea:  test   $0x1,%al
    0.00 :   191ec:  je     1920e <update_active.constprop.0+0x1fe>
         : 188   ./elf/../sysdeps/x86/cpu-features.c:293
    0.00 :   191ee:  and    $0x4,%eax
    0.00 :   191f1:  or     0x20a61(%rip),%eax        # 39c58 <_rtld_global_ro+0x178>
         : 191   ./elf/../sysdeps/x86/cpu-features.c:292
    0.00 :   191f7:  and    $0x800000,%r8d
    0.00 :   191fe:  or     %r8d,0x20997(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 194   ./elf/../sysdeps/x86/cpu-features.c:293
    0.00 :   19205:  or     $0x1,%eax
    0.00 :   19208:  mov    %eax,0x20a4a(%rip)        # 39c58 <_rtld_global_ro+0x178>
         : 197   get_isa_level():
         : 198   ./elf/../sysdeps/x86/get-isa-level.h:31
    0.00 :   1920e:  mov    %r9d,%edx
         : 200   ./elf/../sysdeps/x86/get-isa-level.h:28
    0.00 :   19211:  xor    %eax,%eax
         : 202   ./elf/../sysdeps/x86/get-isa-level.h:31
    0.00 :   19213:  and    $0x8100,%edx
         : 204   ./elf/../sysdeps/x86/get-isa-level.h:30
    0.00 :   19219:  cmp    $0x8100,%edx
    0.00 :   1921f:  je     19300 <update_active.constprop.0+0x2f0>
         : 207   update_active():
         : 208   ./elf/../sysdeps/x86/cpu-features.c:296
    0.00 :   19225:  mov    %eax,0x20a5d(%rip)        # 39c88 <_rtld_global_ro+0x1a8>
         : 210   ./elf/../sysdeps/x86/cpu-features.c:297
    0.00 :   1922b:  add    $0xa0,%rsp
    0.00 :   19232:  pop    %rbx
    0.00 :   19233:  pop    %rbp
    0.00 :   19234:  pop    %r12
    0.00 :   19236:  pop    %r13
    0.00 :   19238:  pop    %r14
    0.00 :   1923a:  pop    %r15
    0.00 :   1923c:  ret
    0.00 :   1923d:  nopl   (%rax)
         : 220   ./elf/../sysdeps/x86/cpu-features.c:222
    0.00 :   19240:  mov    $0xd,%eax
    0.00 :   19245:  xor    %ecx,%ecx
    0.00 :   19247:  cpuid
         : 224   ./elf/../sysdeps/x86/cpu-features.c:223
    0.00 :   19249:  test   %ebx,%ebx
    0.00 :   1924b:  je     191d5 <update_active.constprop.0+0x1c5>
         : 227   ./elf/../sysdeps/x86/cpu-features.c:226
    0.00 :   1924d:  add    $0x7f,%ebx
         : 229   ./elf/../sysdeps/x86/cpu-features.c:225
    0.00 :   19250:  and    $0xffffffc0,%ebx
         : 231   ./elf/../sysdeps/x86/cpu-features.c:234
    0.00 :   19253:  and    $0x2,%esi
         : 233   ./elf/../sysdeps/x86/cpu-features.c:229
    0.00 :   19256:  mov    %ebx,%eax
         : 235   ./elf/../sysdeps/x86/cpu-features.c:231
    0.00 :   19258:  mov    %ebx,0x20a3a(%rip)        # 39c98 <_rtld_global_ro+0x1b8>
         : 237   ./elf/../sysdeps/x86/cpu-features.c:229
    0.00 :   1925e:  mov    %rax,0x20a2b(%rip)        # 39c90 <_rtld_global_ro+0x1b0>
         : 239   ./elf/../sysdeps/x86/cpu-features.c:234
    0.00 :   19265:  je     191d5 <update_active.constprop.0+0x1c5>
         : 241   ./elf/../sysdeps/x86/cpu-features.c:242
    0.00 :   1926b:  lea    0x1c(%rsp),%rdi
    0.00 :   19270:  lea    -0x60(%rsp),%r10
    0.00 :   19275:  mov    $0x2,%esi
    0.00 :   1927a:  movl   $0x240,-0x60(%rsp)
    0.00 :   19282:  mov    $0x3,%r11d
         : 247   ./elf/../sysdeps/x86/cpu-features.c:248
    0.00 :   19288:  mov    $0xee,%r12d
         : 249   ./elf/../sysdeps/x86/cpu-features.c:250
    0.00 :   1928e:  mov    $0xd,%r13d
    0.00 :   19294:  jmp    192dc <update_active.constprop.0+0x2cc>
    0.00 :   19296:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   192a0:  mov    %r13d,%eax
   34.76 :   192a3:  mov    %esi,%ecx
    0.00 :   192a5:  cpuid
         : 256   ./elf/../sysdeps/x86/cpu-features.c:251
    0.00 :   192a7:  mov    %eax,0x4(%rdi)
         : 258   ./elf/../sysdeps/x86/cpu-features.c:259
    0.00 :   192aa:  cmp    $0x2,%esi
    0.00 :   192ad:  je     192cd <update_active.constprop.0+0x2bd>
         : 261   ./elf/../sysdeps/x86/cpu-features.c:263
    0.00 :   192af:  mov    (%rdi),%eax
    0.00 :   192b1:  add    -0x4(%r10),%eax
         : 264   ./elf/../sysdeps/x86/cpu-features.c:264
    0.00 :   192b5:  and    $0x2,%ecx
    0.00 :   192b8:  je     192c0 <update_active.constprop.0+0x2b0>
         : 267   ./elf/../sysdeps/x86/cpu-features.c:266
    0.00 :   192ba:  add    $0x3f,%eax
    0.00 :   192bd:  and    $0xffffffc0,%eax
    0.00 :   192c0:  mov    %eax,(%r10)
         : 271   ./elf/../sysdeps/x86/cpu-features.c:246
    0.00 :   192c3:  cmp    $0x20,%r11d
    0.00 :   192c7:  je     19430 <update_active.constprop.0+0x420>
    0.00 :   192cd:  add    $0x1,%esi
    0.00 :   192d0:  add    $0x1,%r11d
    0.00 :   192d4:  add    $0x4,%rdi
    0.00 :   192d8:  add    $0x4,%r10
         : 278   ./elf/../sysdeps/x86/cpu-features.c:248
    0.00 :   192dc:  bt     %esi,%r12d
   30.48 :   192e0:  jb     192a0 <update_active.constprop.0+0x290>
         : 281   ./elf/../sysdeps/x86/cpu-features.c:256
    0.00 :   192e2:  movl   $0x0,0x4(%rdi)
         : 283   ./elf/../sysdeps/x86/cpu-features.c:259
    0.00 :   192e9:  cmp    $0x2,%esi
    0.00 :   192ec:  je     192cd <update_active.constprop.0+0x2bd>
         : 286   ./elf/../sysdeps/x86/cpu-features.c:263
    0.00 :   192ee:  mov    (%rdi),%eax
    0.00 :   192f0:  add    -0x4(%r10),%eax
         : 289   ./elf/../sysdeps/x86/cpu-features.c:262
    0.00 :   192f4:  mov    %eax,(%r10)
         : 291   ./elf/../sysdeps/x86/cpu-features.c:264
    0.00 :   192f7:  jmp    192c3 <update_active.constprop.0+0x2b3>
    0.00 :   192f9:  nopl   0x0(%rax)
         : 294   get_isa_level():
         : 295   ./elf/../sysdeps/x86/get-isa-level.h:32
    0.00 :   19300:  mov    %r14d,%eax
    0.00 :   19303:  and    $0x1,%eax
    0.00 :   19306:  je     19225 <update_active.constprop.0+0x215>
         : 299   ./elf/../sysdeps/x86/get-isa-level.h:36
    0.00 :   1930c:  and    $0x7800000,%r9d
    0.00 :   19313:  cmp    $0x7800000,%r9d
    0.00 :   1931a:  je     19460 <update_active.constprop.0+0x450>
         : 303   ./elf/../sysdeps/x86/get-isa-level.h:28
    0.00 :   19320:  xor    %eax,%eax
    0.00 :   19322:  jmp    19225 <update_active.constprop.0+0x215>
    0.00 :   19327:  nopw   0x0(%rax,%rax,1)
         : 307   update_active():
         : 308   ./elf/../sysdeps/x86/cpu-features.c:119
    0.00 :   19330:  test   $0x10000000,%r11d
    0.00 :   19337:  je     1938c <update_active.constprop.0+0x37c>
         : 311   ./elf/../sysdeps/x86/cpu-features.c:121
    0.00 :   19339:  or     $0x10000000,%esi
         : 313   ./elf/../sysdeps/x86/cpu-features.c:124
    0.00 :   1933f:  test   $0x20,%r13b
    0.00 :   19343:  jne    19508 <update_active.constprop.0+0x4f8>
         : 316   ./elf/../sysdeps/x86/cpu-features.c:134
    0.00 :   19349:  mov    %r15d,%edx
         : 318   ./elf/../sysdeps/x86/cpu-features.c:144
    0.00 :   1934c:  and    $0x20001000,%r11d
         : 320   ./elf/../sysdeps/x86/cpu-features.c:134
    0.00 :   19353:  and    $0x10,%edx
         : 322   ./elf/../sysdeps/x86/cpu-features.c:144
    0.00 :   19356:  or     %r11d,%esi
         : 324   ./elf/../sysdeps/x86/cpu-features.c:134
    0.00 :   19359:  or     %edx,%ebx
         : 326   ./elf/../sysdeps/x86/cpu-features.c:140
    0.00 :   1935b:  mov    %r8d,%edx
         : 328   ./elf/../sysdeps/x86/cpu-features.c:144
    0.00 :   1935e:  mov    %esi,0x20818(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 330   ./elf/../sysdeps/x86/cpu-features.c:140
    0.00 :   19364:  and    $0x600,%edx
         : 332   ./elf/../sysdeps/x86/cpu-features.c:134
    0.00 :   1936a:  mov    %ebx,0x208c4(%rip)        # 39c34 <_rtld_global_ro+0x154>
         : 334   ./elf/../sysdeps/x86/cpu-features.c:140
    0.00 :   19370:  or     %edx,%ebp
         : 336   ./elf/../sysdeps/x86/cpu-features.c:142
    0.00 :   19372:  mov    -0x70(%rsp),%edx
         : 338   ./elf/../sysdeps/x86/cpu-features.c:140
    0.00 :   19376:  mov    %ebp,0x20820(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 340   ./elf/../sysdeps/x86/cpu-features.c:142
    0.00 :   1937c:  and    $0x800,%edx
    0.00 :   19382:  or     -0x6c(%rsp),%edx
    0.00 :   19386:  mov    %edx,0x20830(%rip)        # 39bbc <_rtld_global_ro+0xdc>
         : 344   ./elf/../sysdeps/x86/cpu-features.c:149
    0.00 :   1938c:  mov    %eax,%edx
    0.00 :   1938e:  and    $0xe0,%edx
    0.00 :   19394:  cmp    $0xe0,%edx
    0.00 :   1939a:  jne    19199 <update_active.constprop.0+0x189>
         : 349   ./elf/../sysdeps/x86/cpu-features.c:154
    0.00 :   193a0:  test   $0x10000,%r13d
    0.00 :   193a7:  je     19199 <update_active.constprop.0+0x189>
         : 352   ./elf/../sysdeps/x86/cpu-features.c:184
    0.00 :   193ad:  mov    %r8d,%edx
         : 354   ./elf/../sysdeps/x86/cpu-features.c:190
    0.00 :   193b0:  and    $0x20,%r15d
         : 356   ./elf/../sysdeps/x86/cpu-features.c:168
    0.00 :   193b4:  and    $0xdc220000,%r13d
         : 358   ./elf/../sysdeps/x86/cpu-features.c:176
    0.00 :   193bb:  or     0x207d6(%rip),%r13d        # 39b98 <_rtld_global_ro+0xb8>
         : 360   ./elf/../sysdeps/x86/cpu-features.c:184
    0.00 :   193c2:  and    $0x5842,%edx
         : 362   ./elf/../sysdeps/x86/cpu-features.c:176
    0.00 :   193c8:  or     $0x10000,%r13d
         : 364   ./elf/../sysdeps/x86/cpu-features.c:190
    0.00 :   193cf:  or     %ebx,%r15d
         : 366   ./elf/../sysdeps/x86/cpu-features.c:210
    0.00 :   193d2:  mov    0x207a4(%rip),%esi        # 39b7c <_rtld_global_ro+0x9c>
         : 368   ./elf/../sysdeps/x86/cpu-features.c:184
    0.00 :   193d8:  or     %ebp,%edx
         : 370   ./elf/../sysdeps/x86/cpu-features.c:176
    0.00 :   193da:  mov    %r13d,0x207b7(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 372   ./elf/../sysdeps/x86/cpu-features.c:184
    0.00 :   193e1:  mov    %edx,0x207b5(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 374   ./elf/../sysdeps/x86/cpu-features.c:192
    0.00 :   193e7:  mov    %r10d,%edx
    0.00 :   193ea:  and    $0x80010c,%edx
         : 377   ./elf/../sysdeps/x86/cpu-features.c:190
    0.00 :   193f0:  mov    %r15d,0x2083d(%rip)        # 39c34 <_rtld_global_ro+0x154>
         : 379   ./elf/../sysdeps/x86/cpu-features.c:192
    0.00 :   193f7:  or     %edx,%r12d
    0.00 :   193fa:  mov    %r12d,0x2079f(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
    0.00 :   19401:  jmp    19199 <update_active.constprop.0+0x189>
    0.00 :   19406:  cs nopw 0x0(%rax,%rax,1)
         : 384   ./elf/../sysdeps/x86/cpu-features.c:206
    0.00 :   19410:  and    $0x3400000,%r10d
    0.00 :   19417:  or     %r12d,%r10d
    0.00 :   1941a:  mov    %r10d,0x2077f(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
    0.00 :   19421:  jmp    191a9 <update_active.constprop.0+0x199>
    0.00 :   19426:  cs nopw 0x0(%rax,%rax,1)
         : 390   ./elf/../sysdeps/x86/cpu-features.c:271
    0.00 :   19430:  mov    0x94(%rsp),%eax
         : 392   ./elf/../sysdeps/x86/cpu-features.c:273
    0.00 :   19437:  add    0x14(%rsp),%eax
    0.00 :   1943b:  je     191d5 <update_active.constprop.0+0x1c5>
         : 395   ./elf/../sysdeps/x86/cpu-features.c:276
    0.00 :   19441:  add    $0x7f,%eax
         : 397   ./elf/../sysdeps/x86/cpu-features.c:277
    0.00 :   19444:  or     $0x2,%ebp
         : 399   ./elf/../sysdeps/x86/cpu-features.c:276
    0.00 :   19447:  and    $0xffffffc0,%eax
         : 401   ./elf/../sysdeps/x86/cpu-features.c:277
    0.00 :   1944a:  mov    %ebp,0x20784(%rip)        # 39bd4 <_rtld_global_ro+0xf4>
         : 403   ./elf/../sysdeps/x86/cpu-features.c:276
    0.00 :   19450:  mov    %rax,0x20839(%rip)        # 39c90 <_rtld_global_ro+0x1b0>
         : 405   ./elf/../sysdeps/x86/cpu-features.c:277
    0.00 :   19457:  jmp    191d5 <update_active.constprop.0+0x1c5>
    0.00 :   1945c:  nopl   0x0(%rax)
         : 408   get_isa_level():
         : 409   ./elf/../sysdeps/x86/get-isa-level.h:39
    0.00 :   19460:  mov    0x20716(%rip),%edx        # 39b7c <_rtld_global_ro+0x9c>
    0.00 :   19466:  test   $0x20,%dh
    0.00 :   19469:  je     19225 <update_active.constprop.0+0x215>
         : 413   ./elf/../sysdeps/x86/get-isa-level.h:40
    0.00 :   1946f:  mov    0x20747(%rip),%ecx        # 39bbc <_rtld_global_ro+0xdc>
    0.00 :   19475:  mov    %ecx,%esi
    0.00 :   19477:  and    $0x1,%esi
    0.00 :   1947a:  je     19225 <update_active.constprop.0+0x215>
         : 418   ./elf/../sysdeps/x86/get-isa-level.h:45
    0.00 :   19480:  mov    %edx,%edi
         : 420   ./elf/../sysdeps/x86/get-isa-level.h:38
    0.00 :   19482:  mov    %esi,%eax
         : 422   ./elf/../sysdeps/x86/get-isa-level.h:45
    0.00 :   19484:  and    $0x980201,%edi
    0.00 :   1948a:  cmp    $0x980201,%edi
    0.00 :   19490:  jne    19225 <update_active.constprop.0+0x215>
         : 426   ./elf/../sysdeps/x86/get-isa-level.h:47
    0.00 :   19496:  mov    $0x3,%eax
         : 428   ./elf/../sysdeps/x86/get-isa-level.h:48
    0.00 :   1949b:  test   $0x10000000,%edx
    0.00 :   194a1:  je     19225 <update_active.constprop.0+0x215>
         : 431   ./elf/../sysdeps/x86/get-isa-level.h:49
    0.00 :   194a7:  mov    0x206eb(%rip),%esi        # 39b98 <_rtld_global_ro+0xb8>
    0.00 :   194ad:  test   $0x20,%sil
    0.00 :   194b1:  je     19225 <update_active.constprop.0+0x215>
         : 435   ./elf/../sysdeps/x86/get-isa-level.h:51
    0.00 :   194b7:  mov    %edx,%edi
    0.00 :   194b9:  and    $0x20001000,%edi
    0.00 :   194bf:  cmp    $0x20001000,%edi
    0.00 :   194c5:  jne    19225 <update_active.constprop.0+0x215>
         : 440   ./elf/../sysdeps/x86/get-isa-level.h:52
    0.00 :   194cb:  and    $0x20,%ecx
    0.00 :   194ce:  je     19225 <update_active.constprop.0+0x215>
         : 443   ./elf/../sysdeps/x86/get-isa-level.h:53
    0.00 :   194d4:  and    $0x400000,%edx
    0.00 :   194da:  je     19520 <update_active.constprop.0+0x510>
         : 446   ./elf/../sysdeps/x86/get-isa-level.h:59
    0.00 :   194dc:  mov    %esi,%edx
         : 448   ./elf/../sysdeps/x86/get-isa-level.h:55
    0.00 :   194de:  mov    $0x7,%eax
         : 450   ./elf/../sysdeps/x86/get-isa-level.h:59
    0.00 :   194e3:  and    $0x50030000,%edx
         : 452   ./elf/../sysdeps/x86/get-isa-level.h:56
    0.00 :   194e9:  cmp    $0x50030000,%edx
    0.00 :   194ef:  jne    19225 <update_active.constprop.0+0x215>
         : 455   ./elf/../sysdeps/x86/get-isa-level.h:61
    0.00 :   194f5:  mov    %esi,%eax
    0.00 :   194f7:  sar    $0x1f,%eax
    0.00 :   194fa:  and    $0x8,%eax
    0.00 :   194fd:  add    $0x7,%eax
    0.00 :   19500:  jmp    19225 <update_active.constprop.0+0x215>
    0.00 :   19505:  nopl   (%rax)
         : 462   update_active():
         : 463   ./elf/../sysdeps/x86/cpu-features.c:131
    0.00 :   19508:  orl    $0x200,0x20772(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 465   ./elf/../sysdeps/x86/cpu-features.c:126
    0.00 :   19512:  or     $0x20,%edi
    0.00 :   19515:  mov    %edi,0x2067d(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 468   ./elf/../sysdeps/x86/cpu-features.c:130
    0.00 :   1951b:  jmp    19349 <update_active.constprop.0+0x339>
         : 470   get_isa_level():
         : 471   ./elf/../sysdeps/x86/get-isa-level.h:47
    0.00 :   19520:  mov    $0x3,%eax
    0.00 :   19525:  jmp    19225 <update_active.constprop.0+0x215>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a4ab0 <_int_realloc>:
         : 6     _int_realloc():
         : 7     ./malloc/malloc.c:4818
    0.00 :   a4ab0:  push   %r15
    0.00 :   a4ab2:  push   %r14
    0.00 :   a4ab4:  push   %r13
    0.00 :   a4ab6:  push   %r12
    0.00 :   a4ab8:  push   %rbp
    0.00 :   a4ab9:  push   %rbx
    0.00 :   a4aba:  sub    $0x8,%rsp
         : 15    ./malloc/malloc.c:4829
    0.00 :   a4abe:  mov    0x8(%rsi),%rax
    0.00 :   a4ac2:  cmp    $0x10,%rax
    0.00 :   a4ac6:  jbe    a4c60 <_int_realloc+0x1b0>
    0.00 :   a4acc:  mov    %rcx,%rbp
         : 20    ./malloc/malloc.c:4830
    0.00 :   a4acf:  mov    0x888(%rdi),%rcx
    0.00 :   a4ad6:  mov    %rdi,%r13
    0.00 :   a4ad9:  mov    %rdx,%rbx
    0.00 :   a4adc:  cmp    %rdx,%rcx
    0.00 :   a4adf:  jbe    a4c60 <_int_realloc+0x1b0>
         : 26    ./malloc/malloc.c:4836
    0.00 :   a4ae5:  test   $0x2,%al
    0.00 :   a4ae7:  jne    a4ccf <_int_realloc+0x21f>
         : 29    ./malloc/malloc.c:4838
    0.00 :   a4aed:  lea    (%rsi,%rdx,1),%r14
    0.00 :   a4af1:  mov    %rsi,%r12
         : 32    ./malloc/malloc.c:4839
    0.00 :   a4af4:  mov    0x8(%r14),%rsi
    0.00 :   a4af8:  mov    %rsi,%rdx
    0.00 :   a4afb:  and    $0xfffffffffffffff8,%rdx
         : 36    ./malloc/malloc.c:4841
    0.00 :   a4aff:  cmp    %rdx,%rcx
    0.00 :   a4b02:  jbe    a4c70 <_int_realloc+0x1c0>
    0.00 :   a4b08:  cmp    $0x10,%rsi
    0.00 :   a4b0c:  jbe    a4c70 <_int_realloc+0x1c0>
         : 41    ./malloc/malloc.c:4844
    0.00 :   a4b12:  cmp    %rbp,%rbx
    0.00 :   a4b15:  jb     a4b68 <_int_realloc+0xb8>
         : 44    ./malloc/malloc.c:4858
    0.00 :   a4b17:  lea    0x176162(%rip),%rdx        # 21ac80 <main_arena>
         : 46    ./malloc/malloc.c:4911
    0.00 :   a4b1e:  mov    %rbx,%rcx
    0.00 :   a4b21:  sub    %rbp,%rcx
         : 49    ./malloc/malloc.c:4858
    0.00 :   a4b24:  cmp    %rdx,%r13
    0.00 :   a4b27:  setne  %dl
         : 52    ./malloc/malloc.c:4915
    0.00 :   a4b2a:  and    $0x7,%eax
         : 54    ./malloc/malloc.c:4858
    0.00 :   a4b2d:  movzbl %dl,%edx
    0.00 :   a4b30:  shl    $0x2,%rdx
    0.00 :   a4b34:  or     %rdx,%rax
         : 58    ./malloc/malloc.c:4913
    0.00 :   a4b37:  cmp    $0x1f,%rcx
    0.00 :   a4b3b:  ja     a4be0 <_int_realloc+0x130>
         : 61    ./malloc/malloc.c:4915
    0.00 :   a4b41:  or     %rax,%rbx
    0.00 :   a4b44:  mov    %rbx,0x8(%r12)
         : 64    ./malloc/malloc.c:4916
    0.00 :   a4b49:  orq    $0x1,0x8(%r14)
         : 66    ./malloc/malloc.c:4932
    0.00 :   a4b4e:  lea    0x10(%r12),%r15
         : 68    ./malloc/malloc.c:4933
    0.00 :   a4b53:  add    $0x8,%rsp
    0.00 :   a4b57:  mov    %r15,%rax
    0.00 :   a4b5a:  pop    %rbx
    0.00 :   a4b5b:  pop    %rbp
    0.00 :   a4b5c:  pop    %r12
    0.00 :   a4b5e:  pop    %r13
    0.00 :   a4b60:  pop    %r14
    0.00 :   a4b62:  pop    %r15
    0.00 :   a4b64:  ret
    0.00 :   a4b65:  nopl   (%rax)
         : 79    ./malloc/malloc.c:4854
    0.00 :   a4b68:  cmp    %r14,0x60(%rdi)
    0.00 :   a4b6c:  je     a4c80 <_int_realloc+0x1d0>
         : 82    ./malloc/malloc.c:4866 (discriminator 1)
    0.00 :   a4b72:  testb  $0x1,0x8(%r14,%rdx,1)
   49.98 :   a4b78:  je     a4c10 <_int_realloc+0x160>
         : 85    ./malloc/malloc.c:4878
    0.00 :   a4b7e:  lea    -0xf(%rbp),%rsi
    0.00 :   a4b82:  mov    %r13,%rdi
    0.00 :   a4b85:  call   a39b0 <_int_malloc>
    0.00 :   a4b8a:  mov    %rax,%r15
         : 90    ./malloc/malloc.c:4879
    0.00 :   a4b8d:  test   %rax,%rax
    0.00 :   a4b90:  je     a4b53 <_int_realloc+0xa3>
         : 93    ./malloc/malloc.c:4882
    0.00 :   a4b92:  lea    -0x10(%r15),%rdx
         : 95    ./malloc/malloc.c:4883
    0.00 :   a4b96:  mov    -0x8(%rax),%rax
         : 97    ./malloc/malloc.c:4888
   50.02 :   a4b9a:  cmp    %rdx,%r14
    0.00 :   a4b9d:  je     a4c40 <_int_realloc+0x190>
         : 100   ./malloc/malloc.c:4896
    0.00 :   a4ba3:  mov    0x8(%r12),%rdx
         : 102   ./malloc/malloc.c:4895
    0.00 :   a4ba8:  lea    0x10(%r12),%rsi
         : 104   ./malloc/malloc.c:4899
    0.00 :   a4bad:  mov    %r15,%rdi
         : 106   ./malloc/malloc.c:4896
    0.00 :   a4bb0:  mov    %rdx,%rax
    0.00 :   a4bb3:  and    $0xfffffffffffffff8,%rdx
    0.00 :   a4bb7:  shr    %rax
    0.00 :   a4bba:  xor    $0x1,%rax
    0.00 :   a4bbe:  and    $0x1,%eax
    0.00 :   a4bc1:  lea    -0x10(%rdx,%rax,8),%rdx
         : 113   ./malloc/malloc.c:4899
    0.00 :   a4bc6:  call   28620 <*ABS*+0xa9c10@plt>
         : 115   ./malloc/malloc.c:4900
    0.00 :   a4bcb:  mov    $0x1,%edx
    0.00 :   a4bd0:  mov    %r12,%rsi
    0.00 :   a4bd3:  mov    %r13,%rdi
    0.00 :   a4bd6:  call   a26a0 <_int_free>
         : 120   ./malloc/malloc.c:4902
    0.00 :   a4bdb:  jmp    a4b53 <_int_realloc+0xa3>
         : 122   ./malloc/malloc.c:4924
    0.00 :   a4be0:  or     %rdx,%rcx
         : 124   ./malloc/malloc.c:4920
    0.00 :   a4be3:  lea    (%r12,%rbp,1),%rsi
         : 126   ./malloc/malloc.c:4923
    0.00 :   a4be7:  or     %rax,%rbp
         : 128   ./malloc/malloc.c:4928
    0.00 :   a4bea:  mov    $0x1,%edx
         : 130   ./malloc/malloc.c:4924
    0.00 :   a4bef:  or     $0x1,%rcx
         : 132   ./malloc/malloc.c:4923
    0.00 :   a4bf3:  mov    %rbp,0x8(%r12)
         : 134   ./malloc/malloc.c:4928
    0.00 :   a4bf8:  mov    %r13,%rdi
         : 136   ./malloc/malloc.c:4924
    0.00 :   a4bfb:  mov    %rcx,0x8(%rsi)
         : 138   ./malloc/malloc.c:4927
    0.00 :   a4bff:  orq    $0x1,0x8(%r14)
         : 140   ./malloc/malloc.c:4928
    0.00 :   a4c04:  call   a26a0 <_int_free>
    0.00 :   a4c09:  jmp    a4b4e <_int_realloc+0x9e>
    0.00 :   a4c0e:  xchg   %ax,%ax
         : 144   ./malloc/malloc.c:4868
    0.00 :   a4c10:  lea    (%rbx,%rdx,1),%r15
         : 146   ./malloc/malloc.c:4867
    0.00 :   a4c14:  cmp    %r15,%rbp
    0.00 :   a4c17:  ja     a4b7e <_int_realloc+0xce>
         : 149   ./malloc/malloc.c:4872
    0.00 :   a4c1d:  mov    %r14,%rdi
    0.00 :   a4c20:  mov    %r15,%rbx
    0.00 :   a4c23:  lea    (%r12,%r15,1),%r14
    0.00 :   a4c27:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a4c2c:  mov    0x8(%r12),%rax
    0.00 :   a4c31:  jmp    a4b17 <_int_realloc+0x67>
    0.00 :   a4c36:  cs nopw 0x0(%rax,%rax,1)
         : 157   ./malloc/malloc.c:4883
    0.00 :   a4c40:  and    $0xfffffffffffffff8,%rax
         : 159   ./malloc/malloc.c:4890
    0.00 :   a4c44:  add    %rax,%rbx
         : 161   ./malloc/malloc.c:4909
    0.00 :   a4c47:  cmp    %rbx,%rbp
    0.00 :   a4c4a:  ja     a4cee <_int_realloc+0x23e>
    0.00 :   a4c50:  mov    0x8(%r12),%rax
    0.00 :   a4c55:  lea    (%r12,%rbx,1),%r14
    0.00 :   a4c59:  jmp    a4b17 <_int_realloc+0x67>
    0.00 :   a4c5e:  xchg   %ax,%ax
         : 168   ./malloc/malloc.c:4831
    0.00 :   a4c60:  lea    0x134ba2(%rip),%rdi        # 1d9809 <null+0xf8e>
    0.00 :   a4c67:  call   a0ce0 <malloc_printerr>
    0.00 :   a4c6c:  nopl   0x0(%rax)
         : 172   ./malloc/malloc.c:4842
    0.00 :   a4c70:  lea    0x134bc7(%rip),%rdi        # 1d983e <null+0xfc3>
    0.00 :   a4c77:  call   a0ce0 <malloc_printerr>
    0.00 :   a4c7c:  nopl   0x0(%rax)
         : 176   ./malloc/malloc.c:4855 (discriminator 1)
    0.00 :   a4c80:  add    %rbx,%rdx
         : 178   ./malloc/malloc.c:4856 (discriminator 1)
    0.00 :   a4c83:  lea    0x20(%rbp),%rcx
         : 180   ./malloc/malloc.c:4854 (discriminator 1)
    0.00 :   a4c87:  cmp    %rdx,%rcx
    0.00 :   a4c8a:  ja     a4b7e <_int_realloc+0xce>
         : 183   ./malloc/malloc.c:4858
    0.00 :   a4c90:  lea    0x175fe9(%rip),%rcx        # 21ac80 <main_arena>
         : 185   ./malloc/malloc.c:4862
    0.00 :   a4c97:  lea    0x10(%r12),%r15
         : 187   ./malloc/malloc.c:4858
    0.00 :   a4c9c:  cmp    %rcx,%rdi
    0.00 :   a4c9f:  setne  %cl
    0.00 :   a4ca2:  and    $0x7,%eax
         : 191   ./malloc/malloc.c:4860
    0.00 :   a4ca5:  sub    %rbp,%rdx
         : 193   ./malloc/malloc.c:4858
    0.00 :   a4ca8:  movzbl %cl,%ecx
         : 195   ./malloc/malloc.c:4860
    0.00 :   a4cab:  or     $0x1,%rdx
         : 197   ./malloc/malloc.c:4858
    0.00 :   a4caf:  shl    $0x2,%rcx
    0.00 :   a4cb3:  or     %rcx,%rax
    0.00 :   a4cb6:  or     %rbp,%rax
    0.00 :   a4cb9:  mov    %rax,0x8(%r12)
         : 202   ./malloc/malloc.c:4859
    0.00 :   a4cbe:  lea    (%r12,%rbp,1),%rax
    0.00 :   a4cc2:  mov    %rax,0x60(%rdi)
         : 205   ./malloc/malloc.c:4860
    0.00 :   a4cc6:  mov    %rdx,0x8(%rax)
         : 207   ./malloc/malloc.c:4862
    0.00 :   a4cca:  jmp    a4b53 <_int_realloc+0xa3>
         : 209   ./malloc/malloc.c:4836 (discriminator 1)
    0.00 :   a4ccf:  lea    0x13a4b2(%rip),%rcx        # 1df188 <__PRETTY_FUNCTION__.16>
    0.00 :   a4cd6:  mov    $0x12e4,%edx
    0.00 :   a4cdb:  lea    0x1349aa(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4ce2:  lea    0x134b3c(%rip),%rdi        # 1d9825 <null+0xfaa>
    0.00 :   a4ce9:  call   a0e70 <__malloc_assert>
         : 215   ./malloc/malloc.c:4909 (discriminator 1)
    0.00 :   a4cee:  lea    0x13a493(%rip),%rcx        # 1df188 <__PRETTY_FUNCTION__.16>
    0.00 :   a4cf5:  mov    $0x132d,%edx
    0.00 :   a4cfa:  lea    0x13498b(%rip),%rsi        # 1d968c <null+0xe11>
    0.00 :   a4d01:  lea    0x13a0c8(%rip),%rdi        # 1dedd0 <__PRETTY_FUNCTION__.1+0xc90>
    0.00 :   a4d08:  call   a0e70 <__malloc_assert>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005a4d0 <hack_digit>:
         : 6     hack_digit():
         : 7     ./stdio-common/printf_fp.c:170
    0.00 :   5a4d0:  push   %r12
    0.00 :   5a4d2:  push   %rbx
    0.00 :   5a4d3:  mov    %rdi,%rbx
    0.00 :   5a4d6:  sub    $0x8,%rsp
         : 12    ./stdio-common/printf_fp.c:173
    0.00 :   5a4da:  mov    (%rdi),%eax
    0.00 :   5a4dc:  test   %eax,%eax
    0.00 :   5a4de:  je     5a4ea <hack_digit+0x1a>
         : 16    ./stdio-common/printf_fp.c:173 (discriminator 1)
    0.00 :   5a4e0:  cmpl   $0x66,0x4(%rdi)
    0.00 :   5a4e4:  je     5a5d8 <hack_digit+0x108>
         : 19    ./stdio-common/printf_fp.c:175
    0.00 :   5a4ea:  mov    0x28(%rbx),%r9
         : 21    ./stdio-common/printf_fp.c:177
    0.00 :   5a4ee:  mov    0x18(%rbx),%rdx
    0.00 :   5a4f2:  mov    0x10(%rbx),%rdi
         : 24    ./stdio-common/printf_fp.c:175
    0.00 :   5a4f6:  test   %r9,%r9
    0.00 :   5a4f9:  je     5a5a8 <hack_digit+0xd8>
         : 27    ./stdio-common/printf_fp.c:183
    0.00 :   5a4ff:  cmp    %rdx,%r9
    0.00 :   5a502:  jle    5a540 <hack_digit+0x70>
    0.00 :   5a504:  mov    $0x30,%r12d
         : 31    ./stdio-common/printf_fp.c:204
    0.00 :   5a50a:  mov    $0xa,%ecx
    0.00 :   5a50f:  mov    %rdi,%rsi
    0.00 :   5a512:  call   55420 <__mpn_mul_1>
         : 35    ./stdio-common/printf_fp.c:205
    0.00 :   5a517:  test   %rax,%rax
    0.00 :   5a51a:  je     5a530 <hack_digit+0x60>
         : 38    ./stdio-common/printf_fp.c:206
    0.00 :   5a51c:  mov    0x18(%rbx),%rdx
    0.00 :   5a520:  mov    0x10(%rbx),%rcx
    0.00 :   5a524:  lea    0x1(%rdx),%rsi
    0.00 :   5a528:  mov    %rsi,0x18(%rbx)
    0.00 :   5a52c:  mov    %rax,(%rcx,%rdx,8)
         : 44    ./stdio-common/printf_fp.c:210
    0.00 :   5a530:  add    $0x8,%rsp
    0.00 :   5a534:  mov    %r12d,%eax
    0.00 :   5a537:  pop    %rbx
    0.00 :   5a538:  pop    %r12
    0.00 :   5a53a:  ret
    0.00 :   5a53b:  nopl   0x0(%rax,%rax,1)
         : 51    ./stdio-common/printf_fp.c:187
    0.00 :   5a540:  mov    0x30(%rbx),%r10
   49.97 :   5a544:  mov    0x20(%rbx),%r8
    0.00 :   5a548:  mov    %rdx,%rcx
    0.00 :   5a54b:  xor    %esi,%esi
    0.00 :   5a54d:  mov    %rdi,%rdx
    0.00 :   5a550:  mov    %r10,%rdi
    0.00 :   5a553:  call   546c0 <__mpn_divrem>
         : 59    ./stdio-common/printf_fp.c:189
    0.00 :   5a558:  mov    0x30(%rbx),%rdx
         : 61    ./stdio-common/printf_fp.c:187
    0.00 :   5a55c:  mov    %rax,%r8
         : 63    ./stdio-common/printf_fp.c:189
    0.00 :   5a55f:  mov    0x18(%rbx),%rax
    0.00 :   5a563:  sub    0x28(%rbx),%rax
    0.00 :   5a567:  mov    %r8,(%rdx,%rax,8)
         : 67    ./stdio-common/printf_fp.c:190
    0.00 :   5a56b:  mov    (%rdx),%r12
         : 69    ./stdio-common/printf_fp.c:192
    0.00 :   5a56e:  mov    0x28(%rbx),%rdx
    0.00 :   5a572:  mov    %rdx,0x18(%rbx)
         : 72    ./stdio-common/printf_fp.c:193
    0.00 :   5a576:  test   %rdx,%rdx
    0.00 :   5a579:  je     5a600 <hack_digit+0x130>
    0.00 :   5a57f:  mov    0x10(%rbx),%rdi
    0.00 :   5a583:  jmp    5a592 <hack_digit+0xc2>
    0.00 :   5a585:  nopl   (%rax)
         : 78    ./stdio-common/printf_fp.c:194
    0.00 :   5a588:  sub    $0x1,%rdx
    0.00 :   5a58c:  mov    %rdx,0x18(%rbx)
         : 81    ./stdio-common/printf_fp.c:193
    0.00 :   5a590:  je     5a600 <hack_digit+0x130>
         : 83    ./stdio-common/printf_fp.c:193 (discriminator 1)
    0.00 :   5a592:  cmpq   $0x0,-0x8(%rdi,%rdx,8)
    0.00 :   5a598:  je     5a588 <hack_digit+0xb8>
         : 86    ./stdio-common/printf_fp.c:200
    0.00 :   5a59a:  add    $0x30,%r12d
    0.00 :   5a59e:  jmp    5a50a <hack_digit+0x3a>
    0.00 :   5a5a3:  nopl   0x0(%rax,%rax,1)
         : 90    ./stdio-common/printf_fp.c:177
    0.00 :   5a5a8:  lea    -0x8(%rdi,%rdx,8),%rbx
         : 92    ./stdio-common/printf_fp.c:178
    0.00 :   5a5ad:  mov    $0xa,%ecx
    0.00 :   5a5b2:  sub    $0x1,%rdx
    0.00 :   5a5b6:  mov    %rdi,%rsi
         : 96    ./stdio-common/printf_fp.c:177
    0.00 :   5a5b9:  mov    (%rbx),%r12
         : 98    ./stdio-common/printf_fp.c:178
   50.03 :   5a5bc:  call   55420 <__mpn_mul_1>
    0.00 :   5a5c1:  mov    %rax,(%rbx)
         : 101   ./stdio-common/printf_fp.c:209
    0.00 :   5a5c4:  add    $0x30,%r12d
         : 103   ./stdio-common/printf_fp.c:210
    0.00 :   5a5c8:  add    $0x8,%rsp
    0.00 :   5a5cc:  mov    %r12d,%eax
    0.00 :   5a5cf:  pop    %rbx
    0.00 :   5a5d0:  pop    %r12
    0.00 :   5a5d2:  ret
    0.00 :   5a5d3:  nopl   0x0(%rax,%rax,1)
         : 110   ./stdio-common/printf_fp.c:173 (discriminator 2)
    0.00 :   5a5d8:  mov    0x8(%rdi),%eax
    0.00 :   5a5db:  mov    $0x30,%r12d
    0.00 :   5a5e1:  lea    -0x1(%rax),%edx
    0.00 :   5a5e4:  mov    %edx,0x8(%rdi)
    0.00 :   5a5e7:  test   %eax,%eax
    0.00 :   5a5e9:  jle    5a4ea <hack_digit+0x1a>
         : 117   ./stdio-common/printf_fp.c:210
    0.00 :   5a5ef:  add    $0x8,%rsp
    0.00 :   5a5f3:  mov    %r12d,%eax
    0.00 :   5a5f6:  pop    %rbx
    0.00 :   5a5f7:  pop    %r12
    0.00 :   5a5f9:  ret
    0.00 :   5a5fa:  nopw   0x0(%rax,%rax,1)
         : 124   ./stdio-common/printf_fp.c:199
    0.00 :   5a600:  movq   $0x1,0x18(%rbx)
         : 126   ./stdio-common/printf_fp.c:200
    0.00 :   5a608:  add    $0x30,%r12d
         : 128   ./stdio-common/printf_fp.c:210
    0.00 :   5a60c:  add    $0x8,%rsp
    0.00 :   5a610:  mov    %r12d,%eax
    0.00 :   5a613:  pop    %rbx
    0.00 :   5a614:  pop    %r12
    0.00 :   5a616:  ret
 Percent |	Source code & Disassembly of minisat for cycles:u (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .plt.sec:
         :
         : 5    0000000000002370 <memset@plt>:
  100.00 :   2370:   endbr64
    0.00 :   2374:   bnd jmp *0x16b15(%rip)        # 18e90 <memset@GLIBC_2.2.5>
    0.00 :   237b:   nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of minisat for cycles:u (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000116c0 <Minisat::Solver::solve_()>:
         : 6     Minisat::Solver::solve_():
         : 752   return pow(y, seq);
         : 753   }
         :
         : 755   // NOTE: assumptions passed in member-variable 'assumptions'.
         : 756   lbool Solver::solve_()
         : 757   {
    0.00 :   116c0:  endbr64
    0.00 :   116c4:  push   %r12
    0.00 :   116c6:  push   %rbp
    0.00 :   116c7:  mov    %rdi,%rbp
    0.00 :   116ca:  push   %rbx
         : 763   Minisat::vec<Minisat::lbool>::clear(bool):
         : 122   sz = size; }
         :
         :
         : 125   template<class T>
         : 126   void vec<T>::clear(bool dealloc) {
         : 127   if (data != NULL){
    0.00 :   116cb:  cmpq   $0x0,0x8(%rdi)
    0.00 :   116d0:  je     116d9 <Minisat::Solver::solve_()+0x19>
         : 124   for (int i = 0; i < sz; i++) data[i].~T();
         : 125   sz = 0;
    0.00 :   116d2:  movl   $0x0,0x10(%rdi)
         : 127   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122   if (data != NULL){
    0.00 :   116d9:  cmpq   $0x0,0x18(%rbp)
    0.00 :   116de:  je     116e7 <Minisat::Solver::solve_()+0x27>
         : 124   sz = 0;
    0.00 :   116e0:  movl   $0x0,0x20(%rbp)
         : 126   Minisat::Solver::solve_():
         : 755   model.clear();
         : 756   conflict.clear();
         : 757   if (!ok) return l_False;
    0.00 :   116e7:  cmpb   $0x0,0xf0(%rbp)
    0.00 :   116ee:  mov    $0x1,%r12d
    0.00 :   116f4:  je     117be <Minisat::Solver::solve_()+0xfe>
         :
         : 761   solves++;
         :
         : 763   max_learnts               = nClauses() * learntsize_factor;
         : 764   learntsize_adjust_confl   = learntsize_adjust_start_confl;
    0.00 :   116fa:  mov    0x88(%rbp),%eax
         : 759   max_learnts               = nClauses() * learntsize_factor;
    0.00 :   11700:  pxor   %xmm0,%xmm0
         : 760   learntsize_adjust_confl   = learntsize_adjust_start_confl;
    0.00 :   11704:  pxor   %xmm1,%xmm1
         : 764   learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
         : 765   lbool   status            = l_Undef;
         :
         : 767   if (verbosity >= 1){
    0.00 :   11708:  mov    0x28(%rbp),%esi
         : 759   max_learnts               = nClauses() * learntsize_factor;
    0.00 :   1170b:  cvtsi2sdl 0x100(%rbp),%xmm0
    0.00 :   11713:  mulsd  0x78(%rbp),%xmm0
         : 757   solves++;
    0.00 :   11718:  addq   $0x1,0x98(%rbp)
         : 760   learntsize_adjust_confl   = learntsize_adjust_start_confl;
    0.00 :   11720:  cvtsi2sd %eax,%xmm1
         : 761   learntsize_adjust_cnt     = (int)learntsize_adjust_confl;
    0.00 :   11724:  mov    %eax,0x290(%rbp)
         : 759   max_learnts               = nClauses() * learntsize_factor;
    0.00 :   1172a:  unpcklpd %xmm1,%xmm0
    0.00 :   1172e:  movups %xmm0,0x280(%rbp)
         : 764   if (verbosity >= 1){
    0.00 :   11735:  test   %esi,%esi
    0.00 :   11737:  jg     11970 <Minisat::Solver::solve_()+0x2b0>
         : 752   {
    0.00 :   1173d:  xor    %ebx,%ebx
         : 774   }
         :
         : 776   // Search:
         : 777   int curr_restarts = 0;
         : 778   while (status == l_Undef){
         : 779   double rest_base = luby_restart ? luby(restart_inc, curr_restarts) : pow(restart_inc, curr_restarts);
    0.00 :   1173f:  cmpb   $0x0,0x50(%rbp)
    0.00 :   11743:  movsd  0x70(%rbp),%xmm0
    0.00 :   11748:  je     117d0 <Minisat::Solver::solve_()+0x110>
         : 739   for (size = 1, seq = 0; size < x+1; seq++, size = 2*size+1);
    0.00 :   1174e:  test   %ebx,%ebx
         : 741   luby():
    0.00 :   11750:  je     11a50 <Minisat::Solver::solve_()+0x390>
    0.00 :   11756:  mov    $0x1,%edx
    0.00 :   1175b:  xor    %esi,%esi
    0.00 :   1175d:  nopl   (%rax)
    0.00 :   11760:  lea    (%rdx,%rdx,1),%eax
    0.00 :   11763:  add    $0x1,%esi
    0.00 :   11766:  lea    0x1(%rax),%edx
    0.00 :   11769:  cmp    %ebx,%edx
    0.00 :   1176b:  jle    11760 <Minisat::Solver::solve_()+0xa0>
         : 741   while (size-1 != x){
    0.00 :   1176d:  cmp    %ebx,%eax
    0.00 :   1176f:  je     1178b <Minisat::Solver::solve_()+0xcb>
    0.00 :   11771:  mov    %ebx,%edx
    0.00 :   11773:  nopl   0x0(%rax,%rax,1)
         : 742   size = (size-1)>>1;
    0.00 :   11778:  sar    %eax
         : 743   seq--;
    0.00 :   1177a:  sub    $0x1,%esi
         : 742   size = (size-1)>>1;
    0.00 :   1177d:  mov    %eax,%ecx
         : 744   x = x % size;
    0.00 :   1177f:  mov    %edx,%eax
    0.00 :   11781:  cltd
    0.00 :   11782:  idiv   %ecx
         : 741   while (size-1 != x){
    0.00 :   11784:  lea    -0x1(%rcx),%eax
    0.00 :   11787:  cmp    %edx,%eax
    0.00 :   11789:  jne    11778 <Minisat::Solver::solve_()+0xb8>
         : 745   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
         : 418   inline _GLIBCXX_CONSTEXPR
         : 419   typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
         : 420   pow(_Tp __x, _Up __y)
         : 421   {
         : 422   typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
         : 423   return pow(__type(__x), __type(__y));
    0.00 :   1178b:  pxor   %xmm1,%xmm1
    0.00 :   1178f:  cvtsi2sd %esi,%xmm1
    0.00 :   11793:  call   2580 <pow@plt>
         : 427   Minisat::Solver::solve_():
    0.00 :   11798:  jmp    117dd <Minisat::Solver::solve_()+0x11d>
    0.00 :   1179a:  nopw   0x0(%rax,%rax,1)
         :
         : 789   if (status == l_True){
         : 790   // Extend & copy model:
         : 791   model.growTo(nVars());
         : 792   for (int i = 0; i < nVars(); i++) model[i] = value(i);
         : 793   }else if (status == l_False && conflict.size() == 0)
    0.00 :   117a0:  cmp    $0x1,%r12b
    0.00 :   117a4:  je     119d8 <Minisat::Solver::solve_()+0x318>
         : 796   Minisat::Solver::cancelUntil(int):
         : 208   if (decisionLevel() > level){
    0.00 :   117aa:  mov    0x1b8(%rbp),%eax
    0.00 :   117b0:  test   %eax,%eax
    0.00 :   117b2:  jle    117be <Minisat::Solver::solve_()+0xfe>
    0.00 :   117b4:  xor    %esi,%esi
    0.00 :   117b6:  mov    %rbp,%rdi
    0.00 :   117b9:  call   e9d0 <Minisat::Solver::cancelUntil(int) [clone .part.0]>
         : 215   Minisat::Solver::solve_():
         : 793   ok = false;
         :
         : 795   cancelUntil(0);
         : 796   return status;
         : 797   }
    0.00 :   117be:  mov    %r12d,%eax
    0.00 :   117c1:  pop    %rbx
    0.00 :   117c2:  pop    %rbp
    0.00 :   117c3:  pop    %r12
    0.00 :   117c5:  ret
    0.00 :   117c6:  cs nopw 0x0(%rax,%rax,1)
         : 804   __gnu_cxx::__promote_2<double, int, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type>::__type std::pow<double, int>(double, int):
    0.00 :   117d0:  pxor   %xmm1,%xmm1
    0.00 :   117d4:  cvtsi2sd %ebx,%xmm1
    0.00 :   117d8:  call   2580 <pow@plt>
         : 421   Minisat::Solver::solve_():
         : 775   status = search(rest_base * restart_first);
    0.00 :   117dd:  pxor   %xmm1,%xmm1
    0.00 :   117e1:  mov    %rbp,%rdi
    0.00 :   117e4:  cvtsi2sdl 0x68(%rbp),%xmm1
    0.00 :   117e9:  mulsd  %xmm0,%xmm1
    0.00 :   117ed:  cvttsd2si %xmm1,%esi
    0.00 :   117f1:  call   10b80 <Minisat::Solver::search(int)>
         : 782   Minisat::Solver::withinBudget() const:
         : 346   inline void     Solver::interrupt(){ asynch_interrupt = true; }
         : 347   inline void     Solver::clearInterrupt(){ asynch_interrupt = false; }
         : 348   inline void     Solver::budgetOff(){ conflict_budget = propagation_budget = -1; }
         : 349   inline bool     Solver::withinBudget() const {
         : 350   return !asynch_interrupt &&
         : 351   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.00 :   117f6:  cmpb   $0x0,0x2a8(%rbp)
         : 353   Minisat::Solver::solve_():
  100.00 :   117fd:  mov    %eax,%r12d
         : 776   Minisat::Solver::withinBudget() const:
    0.00 :   11800:  jne    11820 <Minisat::Solver::solve_()+0x160>
    0.00 :   11802:  mov    0x298(%rbp),%rax
         : 345   return !asynch_interrupt &&
    0.00 :   11809:  test   %rax,%rax
    0.00 :   1180c:  js     119a8 <Minisat::Solver::solve_()+0x2e8>
         : 346   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.00 :   11812:  cmp    %rax,0xc0(%rbp)
    0.00 :   11819:  jb     119a8 <Minisat::Solver::solve_()+0x2e8>
    0.00 :   1181f:  nop
         : 350   Minisat::Solver::solve_():
         : 780   if (verbosity >= 1)
    0.00 :   11820:  mov    0x28(%rbp),%ecx
    0.00 :   11823:  test   %ecx,%ecx
    0.00 :   11825:  jle    11833 <Minisat::Solver::solve_()+0x173>
         : 112   }
         :
         : 114   __fortify_function int
         : 115   printf (const char *__restrict __fmt, ...)
         : 116   {
         : 117   return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   11827:  lea    0x1eb2(%rip),%rdi        # 136e0 <_IO_stdin_used+0x6e0>
         : 119   printf():
    0.00 :   1182e:  call   24e0 <puts@plt>
         : 113   Minisat::Solver::solve_():
         : 784   if (status == l_True){
    0.00 :   11833:  test   %r12b,%r12b
    0.00 :   11836:  jne    117a0 <Minisat::Solver::solve_()+0xe0>
         : 787   Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   1183c:  mov    0x1c8(%rbp),%ebx
         : 65    Minisat::vec<Minisat::lbool>::growTo(int):
         : 114   if (sz >= size) return;
    0.00 :   11842:  cmp    %ebx,0x10(%rbp)
    0.00 :   11845:  jl     119f0 <Minisat::Solver::solve_()+0x330>
         : 117   Minisat::Solver::solve_():
         : 787   for (int i = 0; i < nVars(); i++) model[i] = value(i);
    0.00 :   1184b:  test   %ebx,%ebx
    0.00 :   1184d:  jle    117aa <Minisat::Solver::solve_()+0xea>
         : 790   Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   11853:  mov    0x170(%rbp),%rcx
         : 88    Minisat::vec<Minisat::lbool>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   1185a:  mov    0x8(%rbp),%rdx
    0.00 :   1185e:  mov    %ebx,%edi
    0.00 :   11860:  lea    -0x1(%rbx),%eax
    0.00 :   11863:  lea    0x1(%rcx),%r8
    0.00 :   11867:  mov    %rdx,%rsi
    0.00 :   1186a:  sub    %r8,%rsi
    0.00 :   1186d:  cmp    $0xe,%rsi
    0.00 :   11871:  jbe    11a30 <Minisat::Solver::solve_()+0x370>
    0.00 :   11877:  cmp    $0x6,%eax
    0.00 :   1187a:  jbe    11a30 <Minisat::Solver::solve_()+0x370>
    0.00 :   11880:  cmp    $0xe,%eax
    0.00 :   11883:  jbe    11a57 <Minisat::Solver::solve_()+0x397>
    0.00 :   11889:  mov    %ebx,%esi
    0.00 :   1188b:  xor    %eax,%eax
    0.00 :   1188d:  shr    $0x4,%esi
    0.00 :   11890:  shl    $0x4,%rsi
    0.00 :   11894:  nopl   0x0(%rax)
         : 105   Minisat::Solver::solve_():
    0.00 :   11898:  movdqu (%rcx,%rax,1),%xmm2
    0.00 :   1189d:  movups %xmm2,(%rdx,%rax,1)
         : 789   Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   118a1:  add    $0x10,%rax
    0.00 :   118a5:  cmp    %rsi,%rax
    0.00 :   118a8:  jne    11898 <Minisat::Solver::solve_()+0x1d8>
    0.00 :   118aa:  mov    %ebx,%esi
    0.00 :   118ac:  and    $0xfffffff0,%esi
    0.00 :   118af:  mov    %esi,%eax
    0.00 :   118b1:  cmp    %ebx,%esi
    0.00 :   118b3:  je     117aa <Minisat::Solver::solve_()+0xea>
    0.00 :   118b9:  mov    %ebx,%edi
    0.00 :   118bb:  sub    %esi,%edi
    0.00 :   118bd:  lea    -0x1(%rdi),%r8d
    0.00 :   118c1:  cmp    $0x6,%r8d
    0.00 :   118c5:  jbe    118de <Minisat::Solver::solve_()+0x21e>
         : 77    Minisat::Solver::value(int) const:
         : 321   inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   118c7:  mov    (%rcx,%rsi,1),%r8
         : 323   Minisat::Solver::solve_():
    0.00 :   118cb:  mov    %r8,(%rdx,%rsi,1)
         : 788   Minisat::vec<Minisat::Solver::VarData>::size() const:
    0.00 :   118cf:  mov    %edi,%esi
    0.00 :   118d1:  and    $0xfffffff8,%esi
    0.00 :   118d4:  add    %esi,%eax
    0.00 :   118d6:  cmp    %esi,%edi
    0.00 :   118d8:  je     117aa <Minisat::Solver::solve_()+0xea>
         : 68    Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86    const T& operator [] (int index) const { return data[index]; }
    0.00 :   118de:  movslq %eax,%rsi
         : 88    Minisat::Solver::value(int) const:
    0.00 :   118e1:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   118e5:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   118e9:  lea    0x1(%rax),%esi
    0.00 :   118ec:  cmp    %ebx,%esi
    0.00 :   118ee:  jge    117aa <Minisat::Solver::solve_()+0xea>
         : 791   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   118f4:  movslq %esi,%rsi
         : 87    Minisat::Solver::value(int) const:
    0.00 :   118f7:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   118fb:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   118ff:  lea    0x2(%rax),%esi
    0.00 :   11902:  cmp    %ebx,%esi
    0.00 :   11904:  jge    117aa <Minisat::Solver::solve_()+0xea>
         : 791   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   1190a:  movslq %esi,%rsi
         : 87    Minisat::Solver::value(int) const:
    0.00 :   1190d:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   11911:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   11915:  lea    0x3(%rax),%esi
    0.00 :   11918:  cmp    %esi,%ebx
    0.00 :   1191a:  jle    117aa <Minisat::Solver::solve_()+0xea>
         : 791   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   11920:  movslq %esi,%rsi
         : 87    Minisat::Solver::value(int) const:
    0.00 :   11923:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   11927:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   1192b:  lea    0x4(%rax),%esi
    0.00 :   1192e:  cmp    %esi,%ebx
    0.00 :   11930:  jle    117aa <Minisat::Solver::solve_()+0xea>
         : 791   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   11936:  movslq %esi,%rsi
         : 87    Minisat::Solver::value(int) const:
    0.00 :   11939:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   1193d:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   11941:  lea    0x5(%rax),%esi
    0.00 :   11944:  cmp    %esi,%ebx
    0.00 :   11946:  jle    117aa <Minisat::Solver::solve_()+0xea>
         : 791   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   1194c:  movslq %esi,%rsi
         : 87    Minisat::Solver::solve_():
    0.00 :   1194f:  add    $0x6,%eax
         : 788   Minisat::Solver::value(int) const:
    0.00 :   11952:  movzbl (%rcx,%rsi,1),%edi
         : 322   Minisat::Solver::solve_():
    0.00 :   11956:  mov    %dil,(%rdx,%rsi,1)
    0.00 :   1195a:  cmp    %eax,%ebx
    0.00 :   1195c:  jle    117aa <Minisat::Solver::solve_()+0xea>
         : 790   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   11962:  cltq
         : 87    Minisat::Solver::value(int) const:
    0.00 :   11964:  movzbl (%rcx,%rax,1),%ecx
         : 322   Minisat::Solver::solve_():
    0.00 :   11968:  mov    %cl,(%rdx,%rax,1)
         : 788   Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   1196b:  jmp    117aa <Minisat::Solver::solve_()+0xea>
         : 65    Minisat::Solver::solve_():
    0.00 :   11970:  lea    0x34e9(%rip),%rdi        # 14e60 <Minisat::lit_Undef+0x708>
         : 113   printf():
    0.00 :   11977:  call   24e0 <puts@plt>
         : 113   Minisat::Solver::solve_():
    0.00 :   1197c:  lea    0x352d(%rip),%rdi        # 14eb0 <Minisat::lit_Undef+0x758>
         : 113   printf():
    0.00 :   11983:  call   24e0 <puts@plt>
         : 113   Minisat::Solver::solve_():
    0.00 :   11988:  lea    0x3571(%rip),%rdi        # 14f00 <Minisat::lit_Undef+0x7a8>
         : 113   printf():
    0.00 :   1198f:  call   24e0 <puts@plt>
         : 113   Minisat::Solver::solve_():
    0.00 :   11994:  lea    0x1d45(%rip),%rdi        # 136e0 <_IO_stdin_used+0x6e0>
         : 113   printf():
    0.00 :   1199b:  call   24e0 <puts@plt>
    0.00 :   119a0:  jmp    1173d <Minisat::Solver::solve_()+0x7d>
    0.00 :   119a5:  nopl   (%rax)
         : 115   Minisat::Solver::withinBudget() const:
         : 347   (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
    0.00 :   119a8:  mov    0x2a0(%rbp),%rax
         : 346   (conflict_budget    < 0 || conflicts < (uint64_t)conflict_budget) &&
    0.00 :   119af:  test   %rax,%rax
    0.00 :   119b2:  js     119c1 <Minisat::Solver::solve_()+0x301>
         : 347   (propagation_budget < 0 || propagations < (uint64_t)propagation_budget); }
    0.00 :   119b4:  cmp    %rax,0xb8(%rbp)
    0.00 :   119bb:  jae    11820 <Minisat::Solver::solve_()+0x160>
         : 350   Minisat::Solver::solve_():
         : 777   curr_restarts++;
    0.00 :   119c1:  add    $0x1,%ebx
         : 773   while (status == l_Undef){
    0.00 :   119c4:  test   $0x2,%r12b
    0.00 :   119c8:  jne    1173f <Minisat::Solver::solve_()+0x7f>
    0.00 :   119ce:  jmp    11820 <Minisat::Solver::solve_()+0x160>
    0.00 :   119d3:  nopl   0x0(%rax,%rax,1)
         : 788   }else if (status == l_False && conflict.size() == 0)
    0.00 :   119d8:  mov    0x20(%rbp),%edx
    0.00 :   119db:  test   %edx,%edx
    0.00 :   119dd:  jne    117aa <Minisat::Solver::solve_()+0xea>
         : 789   ok = false;
    0.00 :   119e3:  movb   $0x0,0xf0(%rbp)
    0.00 :   119ea:  jmp    117aa <Minisat::Solver::solve_()+0xea>
    0.00 :   119ef:  nop
         : 753   model.clear();
    0.00 :   119f0:  lea    0x8(%rbp),%rdi
         : 755   Minisat::vec<Minisat::lbool>::growTo(int):
         : 115   capacity(size);
    0.00 :   119f4:  mov    %ebx,%esi
    0.00 :   119f6:  call   121d0 <Minisat::vec<Minisat::lbool>::capacity(int)>
         : 116   for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   119fb:  mov    0x10(%rbp),%eax
    0.00 :   119fe:  cmp    %eax,%ebx
    0.00 :   11a00:  jle    11a19 <Minisat::Solver::solve_()+0x359>
         : 120   Minisat::lbool::lbool():
         : 94    uint8_t value;
         :
         : 96    public:
         : 97    explicit lbool(uint8_t v) : value(v) { }
         :
         : 99    lbool()       : value(0) { }
    0.00 :   11a02:  lea    -0x1(%rbx),%edx
    0.00 :   11a05:  movslq %eax,%rdi
    0.00 :   11a08:  xor    %esi,%esi
    0.00 :   11a0a:  add    0x8(%rbp),%rdi
    0.00 :   11a0e:  sub    %eax,%edx
    0.00 :   11a10:  add    $0x1,%rdx
    0.00 :   11a14:  call   2370 <memset@plt>
         : 107   Minisat::vec<Minisat::lbool>::growTo(int):
         : 117   sz = size; }
    0.00 :   11a19:  mov    %ebx,0x10(%rbp)
         : 119   Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63    int      size     (void) const     { return sz; }
    0.00 :   11a1c:  mov    0x1c8(%rbp),%ebx
    0.00 :   11a22:  jmp    1184b <Minisat::Solver::solve_()+0x18b>
    0.00 :   11a27:  nopw   0x0(%rax,%rax,1)
         : 67    Minisat::vec<Minisat::lbool>::operator[](int):
         : 87    T&       operator [] (int index)       { return data[index]; }
    0.00 :   11a30:  xor    %eax,%eax
    0.00 :   11a32:  nopw   0x0(%rax,%rax,1)
         : 90    Minisat::Solver::value(int) const:
         : 321   inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   11a38:  movzbl (%rcx,%rax,1),%esi
         : 323   Minisat::Solver::solve_():
         : 787   for (int i = 0; i < nVars(); i++) model[i] = value(i);
    0.00 :   11a3c:  mov    %sil,(%rdx,%rax,1)
    0.00 :   11a40:  add    $0x1,%rax
    0.00 :   11a44:  cmp    %rax,%rbx
    0.00 :   11a47:  jne    11a38 <Minisat::Solver::solve_()+0x378>
    0.00 :   11a49:  jmp    117aa <Minisat::Solver::solve_()+0xea>
    0.00 :   11a4e:  xchg   %ax,%ax
         : 794   luby():
         : 739   for (size = 1, seq = 0; size < x+1; seq++, size = 2*size+1);
    0.00 :   11a50:  xor    %esi,%esi
    0.00 :   11a52:  jmp    1178b <Minisat::Solver::solve_()+0xcb>
         : 742   Minisat::vec<Minisat::lbool>::operator[](int):
    0.00 :   11a57:  xor    %esi,%esi
    0.00 :   11a59:  xor    %eax,%eax
    0.00 :   11a5b:  jmp    118c7 <Minisat::Solver::solve_()+0x207>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000629e0 <__vfscanf_internal>:
         : 6     __vfscanf_internal():
         : 7     ./stdio-common/vfscanf-internal.c:278
    0.00 :   629e0:  endbr64
    0.00 :   629e4:  push   %rbp
    0.00 :   629e5:  mov    %rsp,%rbp
    0.00 :   629e8:  push   %r15
    0.00 :   629ea:  push   %r14
    0.00 :   629ec:  mov    %rdi,%r14
    0.00 :   629ef:  push   %r13
    0.00 :   629f1:  push   %r12
    0.00 :   629f3:  mov    %ecx,%r12d
    0.00 :   629f6:  push   %rbx
    0.00 :   629f7:  sub    $0x6d8,%rsp
    0.00 :   629fe:  mov    %rsi,-0x618(%rbp)
    0.00 :   62a05:  mov    %rdx,-0x6c8(%rbp)
         : 21    ./stdio-common/vfscanf-internal.c:288
    0.00 :   62a0c:  mov    %fs:0x28,%rax
    0.00 :   62a15:  mov    %rax,-0x38(%rbp)
    0.00 :   62a19:  mov    0x1b7550(%rip),%rax        # 219f70 <_DYNAMIC+0x3b0>
    0.00 :   62a20:  mov    %fs:(%rax),%rax
    0.00 :   62a24:  mov    %rax,-0x658(%rbp)
         : 27    ./stdio-common/vfscanf-internal.c:289
    0.00 :   62a2b:  mov    (%rax),%rax
         : 29    scratch_buffer_init():
         : 30    ./stdio-common/../include/scratch_buffer.h:78
    0.00 :   62a2e:  movq   $0x400,-0x458(%rbp)
         : 32    __vfscanf_internal():
         : 33    ./stdio-common/vfscanf-internal.c:289
    0.00 :   62a39:  mov    %rax,-0x678(%rbp)
         : 35    scratch_buffer_init():
         : 36    ./stdio-common/../include/scratch_buffer.h:77
    0.00 :   62a40:  lea    -0x450(%rbp),%rax
    0.00 :   62a47:  mov    %rax,-0x460(%rbp)
         : 39    __vfscanf_internal():
         : 40    ./stdio-common/vfscanf-internal.c:339
    0.00 :   62a4e:  movdqu (%rdx),%xmm1
         : 42    scratch_buffer_init():
         : 43    ./stdio-common/../include/scratch_buffer.h:77
    0.00 :   62a52:  mov    %rax,-0x6a8(%rbp)
         : 45    __vfscanf_internal():
         : 46    ./stdio-common/vfscanf-internal.c:339
    0.00 :   62a59:  movups %xmm1,-0x5a8(%rbp)
    0.00 :   62a60:  mov    0x10(%rdx),%rax
    0.00 :   62a64:  movaps %xmm1,-0x600(%rbp)
    0.00 :   62a6b:  mov    %rax,-0x598(%rbp)
         : 51    ./stdio-common/vfscanf-internal.c:345
    0.00 :   62a72:  mov    0xc0(%rdi),%eax
    0.00 :   62a78:  test   %eax,%eax
    0.00 :   62a7a:  jne    62df8 <__vfscanf_internal+0x418>
         : 55    ./stdio-common/vfscanf-internal.c:345 (discriminator 3)
    0.00 :   62a80:  movl   $0xffffffff,0xc0(%rdi)
         : 57    ./stdio-common/vfscanf-internal.c:348
    0.00 :   62a8a:  testb  $0x4,(%r14)
    0.00 :   62a8e:  jne    66493 <__vfscanf_internal+0x3ab3>
         : 60    ./stdio-common/vfscanf-internal.c:348 (discriminator 2)
    0.00 :   62a94:  cmpq   $0x0,-0x618(%rbp)
    0.00 :   62a9c:  je     67451 <__vfscanf_internal+0x4a71>
         : 63    ./stdio-common/vfscanf-internal.c:352 (discriminator 4)
    0.00 :   62aa2:  mov    -0x658(%rbp),%rax
    0.00 :   62aa9:  mov    0x8(%rax),%rax
         : 66    ./stdio-common/vfscanf-internal.c:365 (discriminator 4)
    0.00 :   62aad:  mov    0x48(%rax),%rdi
         : 68    ./stdio-common/vfscanf-internal.c:359 (discriminator 4)
    0.00 :   62ab1:  mov    0x40(%rax),%rsi
         : 70    ./stdio-common/vfscanf-internal.c:367 (discriminator 4)
    0.00 :   62ab5:  xor    %eax,%eax
    0.00 :   62ab7:  cmpb   $0x0,(%rdi)
         : 73    ./stdio-common/vfscanf-internal.c:359 (discriminator 4)
    0.00 :   62aba:  mov    %rsi,-0x6d8(%rbp)
         : 75    ./stdio-common/vfscanf-internal.c:367 (discriminator 4)
    0.00 :   62ac1:  cmovne %rdi,%rax
         : 77    ./stdio-common/vfscanf-internal.c:372 (discriminator 4)
    0.00 :   62ac5:  mov    %r14,-0x5d8(%rbp)
         : 79    ./stdio-common/vfscanf-internal.c:367 (discriminator 4)
    0.00 :   62acc:  mov    %rax,-0x680(%rbp)
         : 81    ./stdio-common/vfscanf-internal.c:372 (discriminator 4)
    0.00 :   62ad3:  mov    0x1b7466(%rip),%rax        # 219f40 <_IO_funlockfile@@GLIBC_2.2.5+0x1b7ef0>
    0.00 :   62ada:  mov    %rax,-0x5e0(%rbp)
    0.00 :   62ae1:  lea    -0x5e0(%rbp),%rax
    0.00 :   62ae8:  mov    %rax,%rdi
    0.00 :   62aeb:  mov    %rax,-0x6b0(%rbp)
    0.00 :   62af2:  call   911c0 <__GI___libc_cleanup_push_defer>
    0.00 :   62af7:  mov    (%r14),%eax
    0.00 :   62afa:  and    $0x8000,%eax
    0.00 :   62aff:  je     62e10 <__vfscanf_internal+0x430>
         : 91    ./stdio-common/vfscanf-internal.c:381 (discriminator 16)
    0.00 :   62b05:  mov    -0x618(%rbp),%rax
         : 93    ./stdio-common/vfscanf-internal.c:377 (discriminator 16)
    0.00 :   62b0c:  movq   $0x0,-0x5b8(%rbp)
         : 95    ./stdio-common/vfscanf-internal.c:381 (discriminator 16)
    0.00 :   62b17:  movzbl (%rax),%r13d
    0.00 :   62b1b:  test   %r13b,%r13b
    0.00 :   62b1e:  je     6598b <__vfscanf_internal+0x2fab>
         : 99    ./stdio-common/vfscanf-internal.c:570
    0.00 :   62b24:  mov    %r12d,%eax
         : 101   ./stdio-common/vfscanf-internal.c:284
    0.00 :   62b27:  xor    %r15d,%r15d
         : 103   ./stdio-common/vfscanf-internal.c:283
    0.00 :   62b2a:  xor    %ebx,%ebx
         : 105   ./stdio-common/vfscanf-internal.c:293
    0.00 :   62b2c:  movl   $0x0,-0x600(%rbp)
         : 107   ./stdio-common/vfscanf-internal.c:282
    0.00 :   62b36:  movl   $0x0,-0x640(%rbp)
         : 109   ./stdio-common/vfscanf-internal.c:570
    0.00 :   62b40:  and    $0x2,%eax
    0.00 :   62b43:  mov    %eax,-0x690(%rbp)
         : 112   ./stdio-common/vfscanf-internal.c:2429
    0.00 :   62b49:  mov    %r12d,%eax
    0.00 :   62b4c:  not    %r12d
    0.00 :   62b4f:  and    $0x1,%r12d
    0.00 :   62b53:  and    $0x4,%eax
         : 117   ./stdio-common/vfscanf-internal.c:328
    0.00 :   62b56:  movq   $0x0,-0x698(%rbp)
    0.00 :   62b61:  mov    %r12d,-0x6e0(%rbp)
         : 120   ./stdio-common/vfscanf-internal.c:332
    0.00 :   62b68:  xor    %r12d,%r12d
         : 122   ./stdio-common/vfscanf-internal.c:327
    0.00 :   62b6b:  movq   $0x0,-0x670(%rbp)
         : 124   ./stdio-common/vfscanf-internal.c:326
    0.00 :   62b76:  movq   $0x0,-0x6b8(%rbp)
         : 126   ./stdio-common/vfscanf-internal.c:325
    0.00 :   62b81:  movq   $0x0,-0x6c0(%rbp)
         : 128   ./stdio-common/vfscanf-internal.c:313
    0.00 :   62b8c:  movq   $0x0,-0x6d0(%rbp)
         : 130   ./stdio-common/vfscanf-internal.c:2180
    0.00 :   62b97:  mov    %r12d,-0x610(%rbp)
         : 132   ./stdio-common/vfscanf-internal.c:2429
    0.00 :   62b9e:  mov    %eax,-0x6dc(%rbp)
         : 134   ./stdio-common/vfscanf-internal.c:2180
    0.00 :   62ba4:  mov    %r14,%rax
    0.00 :   62ba7:  mov    %rbx,%r14
    0.00 :   62baa:  mov    %r13d,%ebx
    0.00 :   62bad:  mov    %r15d,%r13d
    0.00 :   62bb0:  mov    %rax,%r15
         : 140   ./stdio-common/vfscanf-internal.c:418
    0.00 :   62bb3:  test   $0x80,%bl
    0.00 :   62bb6:  jne    62cc0 <__vfscanf_internal+0x2e0>
         : 143   ./stdio-common/vfscanf-internal.c:442
    0.00 :   62bbc:  mov    -0x618(%rbp),%rax
    0.00 :   62bc3:  lea    0x1(%rax),%r12
         : 146   ./stdio-common/vfscanf-internal.c:443
    0.00 :   62bc7:  cmp    $0x25,%bl
    0.00 :   62bca:  je     62d00 <__vfscanf_internal+0x320>
         : 149   ./stdio-common/vfscanf-internal.c:446
    0.00 :   62bd0:  mov    -0x658(%rbp),%rsi
    0.00 :   62bd7:  movzbl %bl,%eax
    0.00 :   62bda:  mov    0x68(%rsi),%rdx
    0.00 :   62bde:  testb  $0x20,0x1(%rdx,%rax,2)
    0.00 :   62be3:  jne    631a0 <__vfscanf_internal+0x7c0>
         : 155   ./stdio-common/vfscanf-internal.c:453
    0.00 :   62be9:  cmp    $0xffffffff,%r13d
    0.00 :   62bed:  je     631c0 <__vfscanf_internal+0x7e0>
         : 158   ./stdio-common/vfscanf-internal.c:453 (discriminator 2)
    0.00 :   62bf3:  mov    0x8(%r15),%rax
    0.00 :   62bf7:  cmp    0x10(%r15),%rax
    0.00 :   62bfb:  jae    63308 <__vfscanf_internal+0x928>
         : 162   ./stdio-common/vfscanf-internal.c:453 (discriminator 5)
    0.00 :   62c01:  lea    0x1(%rax),%rdx
    0.00 :   62c05:  mov    %rdx,0x8(%r15)
    0.00 :   62c09:  movzbl (%rax),%r13d
         : 166   ./stdio-common/vfscanf-internal.c:461 (discriminator 8)
    0.00 :   62c0d:  mov    -0x610(%rbp),%r11d
         : 168   ./stdio-common/vfscanf-internal.c:453 (discriminator 8)
    0.00 :   62c14:  add    $0x1,%r14
         : 170   ./stdio-common/vfscanf-internal.c:461 (discriminator 8)
    0.00 :   62c18:  test   %r11d,%r11d
    0.00 :   62c1b:  jne    6325d <__vfscanf_internal+0x87d>
         : 173   ./stdio-common/vfscanf-internal.c:469
    0.00 :   62c21:  movzbl %bl,%eax
    0.00 :   62c24:  cmp    %r13d,%eax
    0.00 :   62c27:  jne    63985 <__vfscanf_internal+0xfa5>
         : 177   ./stdio-common/vfscanf-internal.c:442
    0.00 :   62c2d:  mov    %r12,-0x618(%rbp)
    0.00 :   62c34:  movl   $0x0,-0x610(%rbp)
         : 180   ./stdio-common/vfscanf-internal.c:381
    0.00 :   62c3e:  mov    -0x618(%rbp),%rax
    0.00 :   62c45:  movzbl (%rax),%ebx
    0.00 :   62c48:  test   %bl,%bl
    0.00 :   62c4a:  jne    62bb3 <__vfscanf_internal+0x1d3>
         : 185   ./stdio-common/vfscanf-internal.c:3015
    0.00 :   62c50:  mov    -0x610(%rbp),%r12d
    0.00 :   62c57:  mov    %r15,%r14
    0.00 :   62c5a:  mov    %r13d,%r15d
    0.00 :   62c5d:  test   %r12d,%r12d
    0.00 :   62c60:  je     63108 <__vfscanf_internal+0x728>
    0.00 :   62c66:  mov    -0x658(%rbp),%r12
    0.00 :   62c6d:  mov    -0x600(%rbp),%ebx
    0.00 :   62c73:  jmp    62ca7 <__vfscanf_internal+0x2c7>
         : 194   ./stdio-common/vfscanf-internal.c:3018 (discriminator 2)
    0.00 :   62c75:  mov    0x8(%r14),%rax
    0.00 :   62c79:  cmp    0x10(%r14),%rax
    0.00 :   62c7d:  jae    65210 <__vfscanf_internal+0x2830>
         : 198   ./stdio-common/vfscanf-internal.c:3018 (discriminator 5)
    0.00 :   62c83:  lea    0x1(%rax),%rdx
    0.00 :   62c87:  mov    %rdx,0x8(%r14)
    0.00 :   62c8b:  movzbl (%rax),%r15d
    0.00 :   62c8f:  mov    %r15,%rdx
         : 203   ./stdio-common/vfscanf-internal.c:3019 (discriminator 5)
    0.00 :   62c92:  add    %rdx,%rdx
         : 205   ./stdio-common/vfscanf-internal.c:3019 (discriminator 12)
    0.00 :   62c95:  mov    0x68(%r12),%rax
    0.00 :   62c9a:  movzwl (%rax,%rdx,1),%eax
    0.00 :   62c9e:  test   $0x20,%ah
    0.00 :   62ca1:  je     65760 <__vfscanf_internal+0x2d80>
         : 210   ./stdio-common/vfscanf-internal.c:3018
    0.00 :   62ca7:  cmp    $0xffffffff,%r15d
    0.00 :   62cab:  jne    62c75 <__vfscanf_internal+0x295>
         : 213   ./stdio-common/vfscanf-internal.c:3018 (discriminator 1)
    0.00 :   62cad:  mov    0x1b715c(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   62cb4:  mov    $0xfffffffffffffffe,%rdx
    0.00 :   62cbb:  mov    %ebx,%fs:(%rax)
    0.00 :   62cbe:  jmp    62c95 <__vfscanf_internal+0x2b5>
         : 218   ./stdio-common/vfscanf-internal.c:421
    0.00 :   62cc0:  mov    -0x618(%rbp),%rbx
    0.00 :   62cc7:  mov    %rbx,%rdi
    0.00 :   62cca:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   62ccf:  lea    -0x5b8(%rbp),%rdx
    0.00 :   62cd6:  mov    %rbx,%rdi
    0.00 :   62cd9:  mov    %rax,%rsi
    0.00 :   62cdc:  call   c5f80 <__mbrlen>
         : 226   ./stdio-common/vfscanf-internal.c:423
    0.00 :   62ce1:  test   %eax,%eax
    0.00 :   62ce3:  jg     631f0 <__vfscanf_internal+0x810>
         : 229   ./stdio-common/vfscanf-internal.c:442
    0.00 :   62ce9:  mov    -0x618(%rbp),%rax
    0.00 :   62cf0:  movzbl (%rbx),%ebx
    0.00 :   62cf3:  lea    0x1(%rax),%r12
         : 233   ./stdio-common/vfscanf-internal.c:443
    0.00 :   62cf7:  cmp    $0x25,%bl
    0.00 :   62cfa:  jne    62bd0 <__vfscanf_internal+0x1f0>
         : 236   char_buffer_rewind():
         : 237   ./stdio-common/vfscanf-internal.c:222
    0.00 :   62d00:  movq   -0x460(%rbp),%xmm0
    0.00 :   62d08:  mov    %rax,%rdi
         : 240   ./stdio-common/vfscanf-internal.c:223
    0.00 :   62d0b:  mov    -0x460(%rbp),%rax
    0.00 :   62d12:  add    -0x458(%rbp),%rax
         : 243   ./stdio-common/vfscanf-internal.c:222
    0.00 :   62d19:  movq   %rax,%xmm3
         : 245   __vfscanf_internal():
         : 246   ./stdio-common/vfscanf-internal.c:488
    0.00 :   62d1e:  movzbl 0x1(%rdi),%eax
         : 248   char_buffer_rewind():
         : 249   ./stdio-common/vfscanf-internal.c:222
    0.00 :   62d22:  punpcklqdq %xmm3,%xmm0
         : 251   __vfscanf_internal():
         : 252   ./stdio-common/vfscanf-internal.c:488
    0.00 :   62d26:  mov    %eax,%ebx
    0.00 :   62d28:  sub    $0x30,%eax
         : 255   char_buffer_rewind():
         : 256   ./stdio-common/vfscanf-internal.c:222
    0.00 :   62d2b:  movaps %xmm0,-0x470(%rbp)
         : 258   __vfscanf_internal():
         : 259   ./stdio-common/vfscanf-internal.c:488
    0.00 :   62d32:  cmp    $0x9,%eax
    0.00 :   62d35:  ja     62e50 <__vfscanf_internal+0x470>
         : 262   read_int():
         : 263   ./stdio-common/printf-parse.h:78
    0.00 :   62d3b:  movzbl 0x2(%rdi),%edx
         : 265   ./stdio-common/printf-parse.h:76
    0.00 :   62d3f:  mov    %eax,-0x638(%rbp)
    0.00 :   62d45:  mov    %eax,%esi
         : 268   ./stdio-common/printf-parse.h:78
    0.00 :   62d47:  lea    0x2(%rdi),%rax
    0.00 :   62d4b:  mov    %edx,%ebx
    0.00 :   62d4d:  sub    $0x30,%edx
    0.00 :   62d50:  cmp    $0x9,%edx
    0.00 :   62d53:  ja     62db5 <__vfscanf_internal+0x3d5>
         : 274   ./stdio-common/printf-parse.h:88
    0.00 :   62d55:  mov    $0x7fffffff,%edi
    0.00 :   62d5a:  nopw   0x0(%rax,%rax,1)
         : 277   ./stdio-common/printf-parse.h:78
    0.00 :   62d60:  movzbl 0x1(%rax),%ecx
    0.00 :   62d64:  lea    0x1(%rax),%r12
    0.00 :   62d68:  mov    %ecx,%ebx
    0.00 :   62d6a:  sub    $0x30,%ecx
         : 282   ./stdio-common/printf-parse.h:79
    0.00 :   62d6d:  test   %esi,%esi
    0.00 :   62d6f:  js     63a00 <__vfscanf_internal+0x1020>
         : 285   ./stdio-common/printf-parse.h:81
    0.00 :   62d75:  cmp    $0xccccccc,%esi
    0.00 :   62d7b:  jg     63098 <__vfscanf_internal+0x6b8>
         : 288   ./stdio-common/printf-parse.h:87
    0.00 :   62d81:  lea    (%rsi,%rsi,4),%esi
         : 290   ./stdio-common/printf-parse.h:88
    0.00 :   62d84:  mov    %edi,%r8d
         : 292   ./stdio-common/printf-parse.h:87
    0.00 :   62d87:  add    %esi,%esi
         : 294   ./stdio-common/printf-parse.h:88
    0.00 :   62d89:  sub    %edx,%r8d
    0.00 :   62d8c:  cmp    %r8d,%esi
    0.00 :   62d8f:  jg     63098 <__vfscanf_internal+0x6b8>
         : 298   ./stdio-common/printf-parse.h:91
    0.00 :   62d95:  add    %edx,%esi
    0.00 :   62d97:  mov    %rax,%r12
         : 301   ./stdio-common/printf-parse.h:78
    0.00 :   62d9a:  movzbl 0x1(%r12),%edx
    0.00 :   62da0:  lea    0x1(%r12),%rax
    0.00 :   62da5:  mov    %edx,%ebx
    0.00 :   62da7:  sub    $0x30,%edx
    0.00 :   62daa:  cmp    $0x9,%edx
    0.00 :   62dad:  jbe    62d60 <__vfscanf_internal+0x380>
    0.00 :   62daf:  mov    %esi,-0x638(%rbp)
         : 309   __vfscanf_internal():
         : 310   ./stdio-common/vfscanf-internal.c:479
    0.00 :   62db5:  movl   $0x0,-0x63c(%rbp)
         : 312   ./stdio-common/vfscanf-internal.c:497
    0.00 :   62dbf:  movl   $0x0,-0x68c(%rbp)
         : 314   ./stdio-common/vfscanf-internal.c:491
    0.00 :   62dc9:  cmp    $0x24,%bl
    0.00 :   62dcc:  je     63324 <__vfscanf_internal+0x944>
         : 317   ./stdio-common/vfscanf-internal.c:528
    0.00 :   62dd2:  mov    -0x638(%rbp),%r10d
    0.00 :   62dd9:  mov    %rax,%r12
    0.00 :   62ddc:  test   %r10d,%r10d
    0.00 :   62ddf:  jne    62ee7 <__vfscanf_internal+0x507>
         : 322   ./stdio-common/vfscanf-internal.c:529
    0.00 :   62de5:  movl   $0xffffffff,-0x638(%rbp)
    0.00 :   62def:  jmp    62ee7 <__vfscanf_internal+0x507>
    0.00 :   62df4:  nopl   0x0(%rax)
         : 326   ./stdio-common/vfscanf-internal.c:345 (discriminator 5)
    0.00 :   62df8:  cmp    $0xffffffff,%eax
    0.00 :   62dfb:  je     62a8a <__vfscanf_internal+0xaa>
         : 329   ./stdio-common/vfscanf-internal.c:348 (discriminator 3)
    0.00 :   62e01:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   62e0b:  jmp    63172 <__vfscanf_internal+0x792>
         : 332   ./stdio-common/vfscanf-internal.c:372 (discriminator 5)
    0.00 :   62e10:  mov    %fs:0x10,%rbx
    0.00 :   62e19:  mov    0x88(%r14),%rdi
    0.00 :   62e20:  cmp    %rbx,0x8(%rdi)
    0.00 :   62e24:  je     62e40 <__vfscanf_internal+0x460>
         : 337   ./stdio-common/vfscanf-internal.c:372 (discriminator 7)
    0.00 :   62e26:  mov    $0x1,%edx
    0.00 :   62e2b:  lock cmpxchg %edx,(%rdi)
    0.00 :   62e2f:  jne    6592b <__vfscanf_internal+0x2f4b>
         : 341   ./stdio-common/vfscanf-internal.c:372 (discriminator 14)
    0.00 :   62e35:  mov    0x88(%r14),%rdi
    0.00 :   62e3c:  mov    %rbx,0x8(%rdi)
         : 344   ./stdio-common/vfscanf-internal.c:372 (discriminator 15)
    0.00 :   62e40:  addl   $0x1,0x4(%rdi)
    0.00 :   62e44:  jmp    62b05 <__vfscanf_internal+0x125>
    0.00 :   62e49:  nopl   0x0(%rax)
         : 348   ./stdio-common/vfscanf-internal.c:482
    0.00 :   62e50:  movl   $0x0,-0x68c(%rbp)
         : 350   ./stdio-common/vfscanf-internal.c:504
    0.00 :   62e5a:  movl   $0x0,-0x63c(%rbp)
    0.00 :   62e64:  lea    -0x27(%rbx),%eax
    0.00 :   62e67:  cmp    $0x22,%al
    0.00 :   62e69:  ja     62ece <__vfscanf_internal+0x4ee>
    0.00 :   62e6b:  movabs $0xfffffffbfffffff6,%rdx
    0.00 :   62e75:  bt     %rax,%rdx
    0.00 :   62e79:  jb     62ece <__vfscanf_internal+0x4ee>
    0.00 :   62e7b:  xor    %eax,%eax
    0.00 :   62e7d:  cmpq   $0x0,-0x680(%rbp)
    0.00 :   62e85:  je     62f0e <__vfscanf_internal+0x52e>
    0.00 :   62e8b:  nopl   0x0(%rax,%rax,1)
         : 362   ./stdio-common/vfscanf-internal.c:505
    0.00 :   62e90:  add    $0x1,%r12
    0.00 :   62e94:  cmp    $0x2a,%bl
    0.00 :   62e97:  je     630c0 <__vfscanf_internal+0x6e0>
    0.00 :   62e9d:  cmp    $0x49,%bl
    0.00 :   62ea0:  je     630b0 <__vfscanf_internal+0x6d0>
         : 368   ./stdio-common/vfscanf-internal.c:516
    0.00 :   62ea6:  mov    %eax,%ecx
    0.00 :   62ea8:  or     $0x80,%cl
    0.00 :   62eab:  cmp    $0x27,%bl
    0.00 :   62eae:  cmove  %ecx,%eax
         : 373   ./stdio-common/vfscanf-internal.c:504
    0.00 :   62eb1:  movzbl (%r12),%ebx
    0.00 :   62eb6:  lea    -0x27(%rbx),%ecx
    0.00 :   62eb9:  cmp    $0x22,%cl
    0.00 :   62ebc:  ja     62ec8 <__vfscanf_internal+0x4e8>
    0.00 :   62ebe:  bt     %rcx,%rdx
    0.00 :   62ec2:  jae    62e90 <__vfscanf_internal+0x4b0>
    0.00 :   62ec4:  nopl   0x0(%rax)
    0.00 :   62ec8:  mov    %eax,-0x63c(%rbp)
         : 382   ./stdio-common/vfscanf-internal.c:529
    0.00 :   62ece:  movl   $0xffffffff,-0x638(%rbp)
         : 384   ./stdio-common/vfscanf-internal.c:525
    0.00 :   62ed8:  movzbl %bl,%edx
    0.00 :   62edb:  sub    $0x30,%edx
    0.00 :   62ede:  cmp    $0x9,%edx
    0.00 :   62ee1:  jbe    63873 <__vfscanf_internal+0xe93>
         : 389   ./stdio-common/vfscanf-internal.c:532
    0.00 :   62ee7:  lea    0x1(%r12),%rax
    0.00 :   62eec:  mov    %rax,-0x618(%rbp)
    0.00 :   62ef3:  lea    -0x4c(%rbx),%eax
    0.00 :   62ef6:  cmp    $0x2e,%al
    0.00 :   62ef8:  ja     62f57 <__vfscanf_internal+0x577>
    0.00 :   62efa:  lea    0x16dc93(%rip),%rdx        # 1d0b94 <codestrs_4+0x94>
    0.00 :   62f01:  movzbl %al,%eax
    0.00 :   62f04:  movslq (%rdx,%rax,4),%rax
    0.00 :   62f08:  add    %rdx,%rax
    0.00 :   62f0b:  notrack jmp *%rax
         : 400   ./stdio-common/vfscanf-internal.c:505
    0.00 :   62f0e:  add    $0x1,%r12
    0.00 :   62f12:  cmp    $0x2a,%bl
    0.00 :   62f15:  je     62f3e <__vfscanf_internal+0x55e>
         : 404   ./stdio-common/vfscanf-internal.c:519
    0.00 :   62f17:  mov    %eax,%ecx
    0.00 :   62f19:  or     $0x4,%ch
    0.00 :   62f1c:  cmp    $0x49,%bl
    0.00 :   62f1f:  cmove  %ecx,%eax
         : 409   ./stdio-common/vfscanf-internal.c:504
    0.00 :   62f22:  movzbl (%r12),%ebx
    0.00 :   62f27:  lea    -0x27(%rbx),%ecx
    0.00 :   62f2a:  cmp    $0x22,%cl
    0.00 :   62f2d:  ja     62ec8 <__vfscanf_internal+0x4e8>
    0.00 :   62f2f:  bt     %rcx,%rdx
    0.00 :   62f33:  jb     62ec8 <__vfscanf_internal+0x4e8>
         : 416   ./stdio-common/vfscanf-internal.c:505
    0.00 :   62f35:  add    $0x1,%r12
    0.00 :   62f39:  cmp    $0x2a,%bl
    0.00 :   62f3c:  jne    62f17 <__vfscanf_internal+0x537>
         : 420   ./stdio-common/vfscanf-internal.c:508
    0.00 :   62f3e:  or     $0x8,%eax
         : 422   ./stdio-common/vfscanf-internal.c:509
    0.00 :   62f41:  jmp    62f22 <__vfscanf_internal+0x542>
         : 424   ./stdio-common/vfscanf-internal.c:603
    0.00 :   62f43:  orl    $0x1,-0x63c(%rbp)
         : 426   ./stdio-common/vfscanf-internal.c:536
    0.00 :   62f4a:  movzbl 0x1(%r12),%ebx
         : 428   ./stdio-common/vfscanf-internal.c:532
    0.00 :   62f50:  mov    -0x618(%rbp),%r12
         : 430   ./stdio-common/vfscanf-internal.c:612
    0.00 :   62f57:  test   %bl,%bl
    0.00 :   62f59:  je     6397d <__vfscanf_internal+0xf9d>
         : 433   ./stdio-common/vfscanf-internal.c:617
    0.00 :   62f5f:  mov    -0x610(%rbp),%r8d
         : 435   ./stdio-common/vfscanf-internal.c:616
    0.00 :   62f66:  lea    0x1(%r12),%rax
    0.00 :   62f6b:  mov    %rax,-0x618(%rbp)
         : 438   ./stdio-common/vfscanf-internal.c:617
    0.00 :   62f72:  test   %r8d,%r8d
    0.00 :   62f75:  jne    62f82 <__vfscanf_internal+0x5a2>
         : 441   ./stdio-common/vfscanf-internal.c:618
    0.00 :   62f77:  lea    -0x43(%rbx),%eax
    0.00 :   62f7a:  cmp    $0x2b,%al
    0.00 :   62f7c:  jbe    63340 <__vfscanf_internal+0x960>
         : 445   ./stdio-common/vfscanf-internal.c:621
    0.00 :   62f82:  mov    0x1b6e87(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   62f89:  mov    %fs:(%r10),%eax
    0.00 :   62f8d:  mov    %eax,-0x610(%rbp)
         : 449   ./stdio-common/vfscanf-internal.c:622
    0.00 :   62f93:  mov    %r13d,%eax
    0.00 :   62f96:  mov    %r10,%r13
    0.00 :   62f99:  movl   $0x0,%fs:(%r10)
    0.00 :   62fa1:  mov    %r12,-0x630(%rbp)
    0.00 :   62fa8:  mov    -0x658(%rbp),%r12
    0.00 :   62faf:  mov    %bl,-0x620(%rbp)
    0.00 :   62fb5:  mov    -0x600(%rbp),%ebx
    0.00 :   62fbb:  jmp    62ff1 <__vfscanf_internal+0x611>
    0.00 :   62fbd:  nopl   (%rax)
         : 459   ./stdio-common/vfscanf-internal.c:628 (discriminator 4)
    0.00 :   62fc0:  mov    0x8(%r15),%rax
   49.85 :   62fc4:  cmp    0x10(%r15),%rax
    0.00 :   62fc8:  jae    630c8 <__vfscanf_internal+0x6e8>
         : 463   ./stdio-common/vfscanf-internal.c:628 (discriminator 7)
    0.00 :   62fce:  lea    0x1(%rax),%rdx
    0.00 :   62fd2:  mov    %rdx,0x8(%r15)
    0.00 :   62fd6:  movzbl (%rax),%eax
         : 467   ./stdio-common/vfscanf-internal.c:631 (discriminator 10)
    0.00 :   62fd9:  mov    0x68(%r12),%rsi
    0.00 :   62fde:  movslq %eax,%rdx
         : 470   ./stdio-common/vfscanf-internal.c:628 (discriminator 10)
    0.00 :   62fe1:  add    $0x1,%r14
         : 472   ./stdio-common/vfscanf-internal.c:631 (discriminator 10)
    0.00 :   62fe5:  add    %rdx,%rdx
    0.00 :   62fe8:  movzwl (%rsi,%rdx,1),%edx
    0.00 :   62fec:  and    $0x20,%dh
    0.00 :   62fef:  je     6301e <__vfscanf_internal+0x63e>
         : 477   ./stdio-common/vfscanf-internal.c:628
    0.00 :   62ff1:  cmp    $0xffffffff,%eax
    0.00 :   62ff4:  jne    62fc0 <__vfscanf_internal+0x5e0>
         : 480   ./stdio-common/vfscanf-internal.c:629
    0.00 :   62ff6:  mov    %fs:0x0(%r13),%eax
         : 482   ./stdio-common/vfscanf-internal.c:628
    0.00 :   62ffb:  cmp    $0x4,%eax
    0.00 :   62ffe:  je     630e9 <__vfscanf_internal+0x709>
         : 485   ./stdio-common/vfscanf-internal.c:631
    0.00 :   63004:  mov    0x68(%r12),%rsi
    0.00 :   63009:  mov    $0xfffffffffffffffe,%rdx
    0.00 :   63010:  mov    $0xffffffff,%eax
    0.00 :   63015:  movzwl (%rsi,%rdx,1),%edx
    0.00 :   63019:  and    $0x20,%dh
    0.00 :   6301c:  jne    62ff1 <__vfscanf_internal+0x611>
         : 492   ./stdio-common/vfscanf-internal.c:632
    0.00 :   6301e:  mov    %r13,%r10
    0.00 :   63021:  mov    %eax,%r13d
    0.00 :   63024:  mov    -0x610(%rbp),%eax
    0.00 :   6302a:  mov    %ebx,-0x600(%rbp)
    0.00 :   63030:  mov    -0x630(%rbp),%r12
    0.00 :   63037:  movzbl -0x620(%rbp),%ebx
    0.00 :   6303e:  mov    %eax,%fs:(%r10)
         : 500   ./stdio-common/vfscanf-internal.c:633
    0.00 :   63042:  cmp    $0xffffffff,%r13d
    0.00 :   63046:  je     63999 <__vfscanf_internal+0xfb9>
         : 503   ./stdio-common/vfscanf-internal.c:633 (discriminator 2)
    0.00 :   6304c:  lea    -0x1(%r14),%rax
    0.00 :   63050:  movzbl %r13b,%esi
    0.00 :   63054:  mov    %r15,%rdi
         : 507   ./stdio-common/vfscanf-internal.c:637 (discriminator 2)
    0.00 :   63057:  sub    $0x25,%ebx
    0.00 :   6305a:  mov    %r10,-0x610(%rbp)
         : 510   ./stdio-common/vfscanf-internal.c:633 (discriminator 2)
    0.00 :   63061:  mov    %rax,-0x620(%rbp)
    0.00 :   63068:  call   8e7b0 <_IO_sputbackc>
         : 513   ./stdio-common/vfscanf-internal.c:637 (discriminator 2)
    0.00 :   6306d:  cmp    $0x53,%bl
    0.00 :   63070:  ja     63d57 <__vfscanf_internal+0x1377>
    0.00 :   63076:  lea    0x16dbd3(%rip),%rdx        # 1d0c50 <codestrs_4+0x150>
    0.00 :   6307d:  movzbl %bl,%ebx
    0.00 :   63080:  mov    -0x610(%rbp),%r10
    0.00 :   63087:  movslq (%rdx,%rbx,4),%rax
    0.00 :   6308b:  add    %rdx,%rax
    0.00 :   6308e:  notrack jmp *%rax
    0.00 :   63091:  nopl   0x0(%rax)
         : 523   read_int():
         : 524   ./stdio-common/printf-parse.h:78
    0.00 :   63098:  cmp    $0x9,%ecx
    0.00 :   6309b:  ja     6381d <__vfscanf_internal+0xe3d>
         : 527   ./stdio-common/printf-parse.h:89
    0.00 :   630a1:  mov    $0xffffffff,%esi
    0.00 :   630a6:  jmp    62d9a <__vfscanf_internal+0x3ba>
    0.00 :   630ab:  nopl   0x0(%rax,%rax,1)
         : 531   __vfscanf_internal():
         : 532   ./stdio-common/vfscanf-internal.c:519
    0.00 :   630b0:  or     $0x4,%ah
         : 534   ./stdio-common/vfscanf-internal.c:520
    0.00 :   630b3:  jmp    62eb1 <__vfscanf_internal+0x4d1>
    0.00 :   630b8:  nopl   0x0(%rax,%rax,1)
         : 537   ./stdio-common/vfscanf-internal.c:508
    0.00 :   630c0:  or     $0x8,%eax
         : 539   ./stdio-common/vfscanf-internal.c:509
    0.00 :   630c3:  jmp    62eb1 <__vfscanf_internal+0x4d1>
         : 541   ./stdio-common/vfscanf-internal.c:628 (discriminator 6)
    0.00 :   630c8:  mov    %r15,%rdi
    0.00 :   630cb:  call   8da40 <__uflow>
    0.00 :   630d0:  cmp    $0xffffffff,%eax
    0.00 :   630d3:  jne    62fd9 <__vfscanf_internal+0x5f9>
         : 546   ./stdio-common/vfscanf-internal.c:628 (discriminator 11)
    0.00 :   630d9:  mov    %fs:0x0(%r13),%ebx
    0.00 :   630de:  mov    %ebx,%eax
    0.00 :   630e0:  cmp    $0x4,%eax
    0.00 :   630e3:  jne    63004 <__vfscanf_internal+0x624>
         : 551   ./stdio-common/vfscanf-internal.c:630
    0.00 :   630e9:  mov    -0x640(%rbp),%edi
    0.00 :   630ef:  mov    $0xffffffff,%eax
    0.00 :   630f4:  mov    %r15,%r14
    0.00 :   630f7:  test   %edi,%edi
    0.00 :   630f9:  cmovne %edi,%eax
    0.00 :   630fc:  mov    %eax,-0x640(%rbp)
    0.00 :   63102:  nopw   0x0(%rax,%rax,1)
         : 559   ./stdio-common/vfscanf-internal.c:3025
    0.00 :   63108:  testl  $0x8000,(%r14)
    0.00 :   6310f:  jne    63136 <__vfscanf_internal+0x756>
         : 562   ./stdio-common/vfscanf-internal.c:3025 (discriminator 1)
    0.00 :   63111:  mov    0x88(%r14),%rdi
    0.00 :   63118:  mov    0x4(%rdi),%eax
    0.00 :   6311b:  sub    $0x1,%eax
    0.00 :   6311e:  mov    %eax,0x4(%rdi)
    0.00 :   63121:  jne    63136 <__vfscanf_internal+0x756>
         : 568   ./stdio-common/vfscanf-internal.c:3025 (discriminator 3)
    0.00 :   63123:  movq   $0x0,0x8(%rdi)
    0.00 :   6312b:  xchg   %eax,(%rdi)
    0.00 :   6312d:  cmp    $0x1,%eax
    0.00 :   63130:  jg     65981 <__vfscanf_internal+0x2fa1>
         : 573   ./stdio-common/vfscanf-internal.c:3025 (discriminator 23)
    0.00 :   63136:  mov    -0x6b0(%rbp),%rdi
    0.00 :   6313d:  call   91200 <__GI___libc_cleanup_pop_restore>
         : 576   scratch_buffer_free():
         : 577   ./stdio-common/../include/scratch_buffer.h:85 (discriminator 23)
    0.00 :   63142:  mov    -0x460(%rbp),%rdi
    0.00 :   63149:  cmp    -0x6a8(%rbp),%rdi
    0.00 :   63150:  je     63157 <__vfscanf_internal+0x777>
         : 581   ./stdio-common/../include/scratch_buffer.h:86
    0.00 :   63152:  call   28370 <free@plt>
         : 583   __vfscanf_internal():
         : 584   ./stdio-common/vfscanf-internal.c:3029
    0.00 :   63157:  cmpl   $0xffffffff,-0x640(%rbp)
    0.00 :   6315e:  je     6390f <__vfscanf_internal+0xf2f>
         : 587   ./stdio-common/vfscanf-internal.c:3046
    0.00 :   63164:  cmpq   $0x0,-0x670(%rbp)
    0.00 :   6316c:  jne    63962 <__vfscanf_internal+0xf82>
         : 590   ./stdio-common/vfscanf-internal.c:3052
    0.00 :   63172:  mov    -0x38(%rbp),%rax
    0.00 :   63176:  sub    %fs:0x28,%rax
    0.00 :   6317f:  jne    69711 <__vfscanf_internal+0x6d31>
    0.00 :   63185:  mov    -0x640(%rbp),%eax
    0.00 :   6318b:  lea    -0x28(%rbp),%rsp
    0.00 :   6318f:  pop    %rbx
    0.00 :   63190:  pop    %r12
    0.00 :   63192:  pop    %r13
    0.00 :   63194:  pop    %r14
    0.00 :   63196:  pop    %r15
    0.00 :   63198:  pop    %rbp
    0.00 :   63199:  ret
    0.00 :   6319a:  nopw   0x0(%rax,%rax,1)
         : 604   ./stdio-common/vfscanf-internal.c:442
    0.00 :   631a0:  mov    %r12,-0x618(%rbp)
         : 606   ./stdio-common/vfscanf-internal.c:448
    0.00 :   631a7:  movl   $0x1,-0x610(%rbp)
    0.00 :   631b1:  jmp    62c3e <__vfscanf_internal+0x25e>
    0.00 :   631b6:  cs nopw 0x0(%rax,%rax,1)
         : 610   ./stdio-common/vfscanf-internal.c:453 (discriminator 1)
    0.00 :   631c0:  mov    0x1b6c49(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   631c7:  mov    -0x600(%rbp),%edi
    0.00 :   631cd:  mov    %r15,%r14
    0.00 :   631d0:  mov    %edi,%fs:(%rax)
         : 615   ./stdio-common/vfscanf-internal.c:457
    0.00 :   631d3:  mov    -0x640(%rbp),%edi
    0.00 :   631d9:  mov    $0xffffffff,%eax
    0.00 :   631de:  test   %edi,%edi
    0.00 :   631e0:  cmovne %edi,%eax
    0.00 :   631e3:  mov    %eax,-0x640(%rbp)
    0.00 :   631e9:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   631ee:  xchg   %ax,%ax
    0.00 :   631f0:  mov    -0x618(%rbp),%rsi
    0.00 :   631f7:  sub    $0x1,%eax
    0.00 :   631fa:  add    $0x1,%r14
    0.00 :   631fe:  lea    0x1(%rsi,%rax,1),%r12
         : 627   ./stdio-common/vfscanf-internal.c:423
    0.00 :   63203:  mov    %rsi,%rbx
    0.00 :   63206:  mov    %r12,%rcx
    0.00 :   63209:  mov    %rsi,%r12
         : 631   ./stdio-common/vfscanf-internal.c:427
    0.00 :   6320c:  cmp    $0xffffffff,%r13d
    0.00 :   63210:  je     632da <__vfscanf_internal+0x8fa>
         : 634   ./stdio-common/vfscanf-internal.c:427 (discriminator 2)
    0.00 :   63216:  mov    0x8(%r15),%rax
    0.00 :   6321a:  cmp    0x10(%r15),%rax
    0.00 :   6321e:  jae    63849 <__vfscanf_internal+0xe69>
         : 638   ./stdio-common/vfscanf-internal.c:427 (discriminator 5)
    0.00 :   63224:  lea    0x1(%rax),%rdx
    0.00 :   63228:  mov    %rdx,0x8(%r15)
    0.00 :   6322c:  movzbl (%rax),%r13d
    0.00 :   63230:  mov    %r14,%rax
    0.00 :   63233:  sub    %r12,%rax
    0.00 :   63236:  add    %rbx,%rax
         : 645   ./stdio-common/vfscanf-internal.c:430 (discriminator 8)
    0.00 :   63239:  movzbl (%rbx),%edx
    0.00 :   6323c:  add    $0x1,%rbx
    0.00 :   63240:  cmp    %r13d,%edx
    0.00 :   63243:  jne    6596d <__vfscanf_internal+0x2f8d>
         : 650   ./stdio-common/vfscanf-internal.c:436
    0.00 :   63249:  cmp    %rcx,%rbx
    0.00 :   6324c:  jne    6320c <__vfscanf_internal+0x82c>
    0.00 :   6324e:  mov    %rbx,-0x618(%rbp)
         : 654   ./stdio-common/vfscanf-internal.c:427
    0.00 :   63255:  mov    %rax,%r14
    0.00 :   63258:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 657   ./stdio-common/vfscanf-internal.c:463
    0.00 :   6325d:  mov    -0x658(%rbp),%rdi
    0.00 :   63264:  movslq %r13d,%rax
    0.00 :   63267:  mov    0x68(%rdi),%rcx
    0.00 :   6326b:  testb  $0x20,0x1(%rcx,%rax,2)
    0.00 :   63270:  jne    6329e <__vfscanf_internal+0x8be>
    0.00 :   63272:  jmp    62c21 <__vfscanf_internal+0x241>
    0.00 :   63277:  nopw   0x0(%rax,%rax,1)
         : 665   ./stdio-common/vfscanf-internal.c:464 (discriminator 5)
    0.00 :   63280:  lea    0x1(%rax),%rdx
    0.00 :   63284:  mov    %rdx,0x8(%r15)
    0.00 :   63288:  movzbl (%rax),%r13d
         : 669   ./stdio-common/vfscanf-internal.c:463
    0.00 :   6328c:  movslq %r13d,%rax
         : 671   ./stdio-common/vfscanf-internal.c:464
    0.00 :   6328f:  add    $0x1,%r14
         : 673   ./stdio-common/vfscanf-internal.c:463
    0.00 :   63293:  testb  $0x20,0x1(%rcx,%rax,2)
    0.00 :   63298:  je     62c21 <__vfscanf_internal+0x241>
         : 676   ./stdio-common/vfscanf-internal.c:464 (discriminator 2)
    0.00 :   6329e:  mov    0x8(%r15),%rax
    0.00 :   632a2:  cmp    0x10(%r15),%rax
    0.00 :   632a6:  jb     63280 <__vfscanf_internal+0x8a0>
         : 680   ./stdio-common/vfscanf-internal.c:464 (discriminator 4)
    0.00 :   632a8:  mov    %r15,%rdi
    0.00 :   632ab:  call   8da40 <__uflow>
    0.00 :   632b0:  mov    %eax,%r13d
    0.00 :   632b3:  cmp    $0xffffffff,%eax
    0.00 :   632b6:  jne    696cd <__vfscanf_internal+0x6ced>
         : 686   ./stdio-common/vfscanf-internal.c:465
    0.00 :   632bc:  mov    %r15,%r14
    0.00 :   632bf:  mov    %eax,%r15d
    0.00 :   632c2:  mov    -0x640(%rbp),%eax
    0.00 :   632c8:  test   %eax,%eax
    0.00 :   632ca:  cmovne %eax,%r15d
    0.00 :   632ce:  mov    %r15d,-0x640(%rbp)
    0.00 :   632d5:  jmp    63108 <__vfscanf_internal+0x728>
         : 694   ./stdio-common/vfscanf-internal.c:427 (discriminator 1)
    0.00 :   632da:  mov    0x1b6b2f(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   632e1:  mov    -0x600(%rbp),%edi
    0.00 :   632e7:  mov    %r15,%r14
    0.00 :   632ea:  mov    %edi,%fs:(%rax)
         : 699   ./stdio-common/vfscanf-internal.c:429
    0.00 :   632ed:  mov    -0x640(%rbp),%esi
    0.00 :   632f3:  mov    $0xffffffff,%eax
    0.00 :   632f8:  test   %esi,%esi
    0.00 :   632fa:  cmovne %esi,%eax
    0.00 :   632fd:  mov    %eax,-0x640(%rbp)
    0.00 :   63303:  jmp    63108 <__vfscanf_internal+0x728>
         : 706   ./stdio-common/vfscanf-internal.c:453 (discriminator 4)
    0.00 :   63308:  mov    %r15,%rdi
    0.00 :   6330b:  call   8da40 <__uflow>
    0.00 :   63310:  mov    %eax,%r13d
    0.00 :   63313:  cmp    $0xffffffff,%eax
    0.00 :   63316:  jne    62c0d <__vfscanf_internal+0x22d>
    0.00 :   6331c:  mov    %r15,%r14
    0.00 :   6331f:  jmp    631d3 <__vfscanf_internal+0x7f3>
         : 714   ./stdio-common/vfscanf-internal.c:490
    0.00 :   63324:  mov    -0x638(%rbp),%eax
    0.00 :   6332a:  mov    %eax,-0x68c(%rbp)
    0.00 :   63330:  mov    %r12,%rax
         : 718   ./stdio-common/vfscanf-internal.c:504
    0.00 :   63333:  movzbl 0x2(%rax),%ebx
         : 720   ./stdio-common/vfscanf-internal.c:492
    0.00 :   63337:  lea    0x2(%rax),%r12
    0.00 :   6333b:  jmp    62e5a <__vfscanf_internal+0x47a>
         : 723   ./stdio-common/vfscanf-internal.c:618
    0.00 :   63340:  movabs $0xfffff7fefefffffe,%rdx
    0.00 :   6334a:  bt     %rax,%rdx
    0.00 :   6334e:  jb     62f82 <__vfscanf_internal+0x5a2>
         : 727   ./stdio-common/vfscanf-internal.c:637
    0.00 :   63354:  lea    0x16da45(%rip),%rdx        # 1d0da0 <codestrs_4+0x2a0>
    0.00 :   6335b:  movzbl %al,%eax
    0.00 :   6335e:  movslq (%rdx,%rax,4),%rax
    0.00 :   63362:  add    %rdx,%rax
    0.00 :   63365:  notrack jmp *%rax
    0.00 :   63368:  nopl   0x0(%rax,%rax,1)
    0.00 :   63370:  mov    %r15,%r14
    0.00 :   63373:  jmp    63108 <__vfscanf_internal+0x728>
         : 736   ./stdio-common/vfscanf-internal.c:536
    0.00 :   63378:  movzbl 0x1(%r12),%ebx
         : 738   ./stdio-common/vfscanf-internal.c:558
    0.00 :   6337e:  orl    $0x3,-0x63c(%rbp)
         : 740   ./stdio-common/vfscanf-internal.c:532
    0.00 :   63385:  mov    -0x618(%rbp),%r12
         : 742   ./stdio-common/vfscanf-internal.c:559
    0.00 :   6338c:  jmp    62f57 <__vfscanf_internal+0x577>
         : 744   ./stdio-common/vfscanf-internal.c:563
    0.00 :   63391:  movzbl 0x1(%r12),%eax
    0.00 :   63397:  mov    %eax,%edx
    0.00 :   63399:  and    $0xfffffff7,%edx
    0.00 :   6339c:  cmp    $0x53,%dl
    0.00 :   6339f:  je     633a9 <__vfscanf_internal+0x9c9>
    0.00 :   633a1:  cmp    $0x73,%al
    0.00 :   633a3:  jne    62f82 <__vfscanf_internal+0x5a2>
         : 752   ./stdio-common/vfscanf-internal.c:570
    0.00 :   633a9:  mov    -0x690(%rbp),%r9d
    0.00 :   633b0:  test   %r9d,%r9d
    0.00 :   633b3:  jne    62f82 <__vfscanf_internal+0x5a2>
         : 756   ./stdio-common/vfscanf-internal.c:577
    0.00 :   633b9:  orl    $0x100,-0x63c(%rbp)
         : 758   ./stdio-common/vfscanf-internal.c:532
    0.00 :   633c3:  mov    -0x618(%rbp),%r12
         : 760   ./stdio-common/vfscanf-internal.c:578
    0.00 :   633ca:  mov    %eax,%ebx
    0.00 :   633cc:  jmp    62f57 <__vfscanf_internal+0x577>
    0.00 :   633d1:  nopl   0x0(%rax)
         : 764   ./stdio-common/vfscanf-internal.c:581
    0.00 :   633d8:  movzbl 0x1(%r12),%ebx
    0.00 :   633de:  cmp    $0x6c,%bl
    0.00 :   633e1:  je     656ed <__vfscanf_internal+0x2d0d>
         : 768   ./stdio-common/vfscanf-internal.c:580
    0.00 :   633e7:  orl    $0x2000,-0x63c(%rbp)
         : 770   ./stdio-common/vfscanf-internal.c:532
    0.00 :   633f1:  mov    -0x618(%rbp),%r12
    0.00 :   633f8:  jmp    62f57 <__vfscanf_internal+0x577>
         : 773   ./stdio-common/vfscanf-internal.c:545
    0.00 :   633fd:  movzbl 0x1(%r12),%ebx
    0.00 :   63403:  cmp    $0x6c,%bl
    0.00 :   63406:  je     6571f <__vfscanf_internal+0x2d3f>
         : 777   ./stdio-common/vfscanf-internal.c:553
    0.00 :   6340c:  orl    $0x1,-0x63c(%rbp)
         : 779   ./stdio-common/vfscanf-internal.c:532
    0.00 :   63413:  mov    -0x618(%rbp),%r12
    0.00 :   6341a:  jmp    62f57 <__vfscanf_internal+0x577>
         : 782   ./stdio-common/vfscanf-internal.c:536
    0.00 :   6341f:  movzbl 0x1(%r12),%ebx
    0.00 :   63425:  cmp    $0x68,%bl
    0.00 :   63428:  je     65706 <__vfscanf_internal+0x2d26>
         : 786   ./stdio-common/vfscanf-internal.c:542
    0.00 :   6342e:  orl    $0x4,-0x63c(%rbp)
         : 788   ./stdio-common/vfscanf-internal.c:532
    0.00 :   63435:  mov    -0x618(%rbp),%r12
    0.00 :   6343c:  jmp    62f57 <__vfscanf_internal+0x577>
         : 791   ./stdio-common/vfscanf-internal.c:637
    0.00 :   63441:  mov    -0x620(%rbp),%r14
         : 793   ./stdio-common/vfscanf-internal.c:1209
    0.00 :   63448:  mov    -0x63c(%rbp),%eax
    0.00 :   6344e:  mov    %eax,%esi
    0.00 :   63450:  and    $0x8,%esi
    0.00 :   63453:  mov    %esi,-0x610(%rbp)
    0.00 :   63459:  jne    6350c <__vfscanf_internal+0xb2c>
         : 799   ./stdio-common/vfscanf-internal.c:1209 (discriminator 1)
    0.00 :   6345f:  test   $0x21,%ah
    0.00 :   63462:  je     66247 <__vfscanf_internal+0x3867>
         : 802   ./stdio-common/vfscanf-internal.c:1209 (discriminator 3)
    0.00 :   63468:  mov    -0x68c(%rbp),%esi
    0.00 :   6346e:  test   %esi,%esi
    0.00 :   63470:  jne    66769 <__vfscanf_internal+0x3d89>
         : 806   ./stdio-common/vfscanf-internal.c:1209
    0.00 :   63476:  mov    -0x5a8(%rbp),%edx
    0.00 :   6347c:  cmp    $0x2f,%edx
    0.00 :   6347f:  ja     66230 <__vfscanf_internal+0x3850>
    0.00 :   63485:  mov    %edx,%eax
    0.00 :   63487:  add    $0x8,%edx
    0.00 :   6348a:  add    -0x598(%rbp),%rax
    0.00 :   63491:  mov    %edx,-0x5a8(%rbp)
    0.00 :   63497:  mov    (%rax),%rax
    0.00 :   6349a:  mov    %rax,-0x670(%rbp)
    0.00 :   634a1:  mov    %rax,%rbx
         : 817   ./stdio-common/vfscanf-internal.c:1209 (discriminator 12)
    0.00 :   634a4:  test   %rbx,%rbx
    0.00 :   634a7:  je     693a5 <__vfscanf_internal+0x69c5>
         : 820   ./stdio-common/vfscanf-internal.c:1209 (discriminator 14)
    0.00 :   634ad:  mov    $0x190,%edi
    0.00 :   634b2:  call   28380 <malloc@plt>
    0.00 :   634b7:  mov    %rax,-0x6b8(%rbp)
    0.00 :   634be:  mov    %rax,(%rbx)
    0.00 :   634c1:  test   %rax,%rax
    0.00 :   634c4:  je     69484 <__vfscanf_internal+0x6aa4>
         : 827   ./stdio-common/vfscanf-internal.c:1209 (discriminator 16)
    0.00 :   634ca:  mov    -0x6d0(%rbp),%rax
    0.00 :   634d1:  test   %rax,%rax
    0.00 :   634d4:  je     65ba6 <__vfscanf_internal+0x31c6>
         : 831   ./stdio-common/vfscanf-internal.c:1209 (discriminator 19)
    0.00 :   634da:  mov    (%rax),%rax
    0.00 :   634dd:  lea    0x1(%rax),%rdx
    0.00 :   634e1:  cmp    $0x20,%rax
    0.00 :   634e5:  je     65ba6 <__vfscanf_internal+0x31c6>
         : 836   ./stdio-common/vfscanf-internal.c:1209 (discriminator 22)
    0.00 :   634eb:  mov    -0x6d0(%rbp),%rdi
    0.00 :   634f2:  mov    -0x670(%rbp),%rsi
    0.00 :   634f9:  movq   $0x64,-0x698(%rbp)
    0.00 :   63504:  mov    %rdx,(%rdi)
    0.00 :   63507:  mov    %rsi,0x10(%rdi,%rax,8)
         : 842   ./stdio-common/vfscanf-internal.c:1211 (discriminator 35)
    0.00 :   6350c:  cmp    $0xffffffff,%r13d
    0.00 :   63510:  je     63d8f <__vfscanf_internal+0x13af>
         : 845   ./stdio-common/vfscanf-internal.c:1211 (discriminator 2)
    0.00 :   63516:  mov    0x8(%r15),%rax
    0.00 :   6351a:  cmp    0x10(%r15),%rax
    0.00 :   6351e:  jae    660f0 <__vfscanf_internal+0x3710>
         : 849   ./stdio-common/vfscanf-internal.c:1211 (discriminator 5)
    0.00 :   63524:  lea    0x1(%rax),%rdx
    0.00 :   63528:  mov    %rdx,0x8(%r15)
    0.00 :   6352c:  movzbl (%rax),%r13d
         : 853   ./stdio-common/vfscanf-internal.c:1221 (discriminator 8)
    0.00 :   63530:  mov    -0x658(%rbp),%rdi
         : 855   ./stdio-common/vfscanf-internal.c:1216 (discriminator 8)
    0.00 :   63537:  lea    -0x540(%rbp),%rax
         : 857   ./stdio-common/vfscanf-internal.c:1211 (discriminator 8)
    0.00 :   6353e:  add    $0x1,%r14
         : 859   ./stdio-common/vfscanf-internal.c:1216 (discriminator 8)
    0.00 :   63542:  movq   $0x0,-0x540(%rbp)
    0.00 :   6354d:  mov    %rax,-0x630(%rbp)
         : 862   ./stdio-common/vfscanf-internal.c:1221 (discriminator 8)
    0.00 :   63554:  movslq %r13d,%rax
    0.00 :   63557:  mov    0x68(%rdi),%rdx
    0.00 :   6355b:  testb  $0x20,0x1(%rdx,%rax,2)
    0.00 :   63560:  jne    6584d <__vfscanf_internal+0x2e6d>
         : 867   ./stdio-common/vfscanf-internal.c:1308
    0.00 :   63566:  mov    -0x63c(%rbp),%eax
    0.00 :   6356c:  lea    -0x50(%rbp),%r12
    0.00 :   63570:  and    $0x2100,%eax
    0.00 :   63575:  mov    %eax,-0x620(%rbp)
         : 872   ./stdio-common/vfscanf-internal.c:1280
    0.00 :   6357b:  mov    -0x610(%rbp),%edx
    0.00 :   63581:  xor    %ebx,%ebx
    0.00 :   63583:  mov    %r13d,%eax
    0.00 :   63586:  test   %edx,%edx
    0.00 :   63588:  cmove  -0x6b8(%rbp),%rbx
    0.00 :   63590:  jmp    635a5 <__vfscanf_internal+0xbc5>
         : 879   ./stdio-common/vfscanf-internal.c:1293 (discriminator 5)
    0.00 :   63592:  lea    0x1(%rax),%rdx
    0.00 :   63596:  mov    %rdx,0x8(%r15)
    0.00 :   6359a:  movzbl (%rax),%r13d
         : 883   ./stdio-common/vfscanf-internal.c:1293 (discriminator 8)
    0.00 :   6359e:  add    $0x1,%r14
         : 885   ./stdio-common/vfscanf-internal.c:1296 (discriminator 8)
    0.00 :   635a2:  mov    %r13d,%eax
         : 887   ./stdio-common/vfscanf-internal.c:1286
    0.00 :   635a5:  mov    -0x630(%rbp),%rcx
    0.00 :   635ac:  mov    %r12,%rsi
    0.00 :   635af:  mov    %rbx,%rdi
         : 891   ./stdio-common/vfscanf-internal.c:1280
    0.00 :   635b2:  mov    %al,-0x50(%rbp)
         : 893   ./stdio-common/vfscanf-internal.c:1286
    0.00 :   635b5:  mov    $0x1,%edx
    0.00 :   635ba:  call   c5fb0 <__mbrtowc>
         : 896   ./stdio-common/vfscanf-internal.c:1289
    0.00 :   635bf:  cmp    $0xfffffffffffffffe,%rax
    0.00 :   635c3:  jne    657ae <__vfscanf_internal+0x2dce>
         : 899   ./stdio-common/vfscanf-internal.c:1293 (discriminator 2)
    0.00 :   635c9:  mov    0x8(%r15),%rax
    0.00 :   635cd:  cmp    0x10(%r15),%rax
    0.00 :   635d1:  jb     63592 <__vfscanf_internal+0xbb2>
         : 903   ./stdio-common/vfscanf-internal.c:1293 (discriminator 4)
    0.00 :   635d3:  mov    %r15,%rdi
    0.00 :   635d6:  call   8da40 <__uflow>
    0.00 :   635db:  mov    %eax,%r13d
    0.00 :   635de:  cmp    $0xffffffff,%eax
    0.00 :   635e1:  jne    6359e <__vfscanf_internal+0xbbe>
         : 909   ./stdio-common/vfscanf-internal.c:1294
    0.00 :   635e3:  mov    0x1b6826(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   635ea:  mov    %r15,%r14
    0.00 :   635ed:  movl   $0x54,%fs:(%rax)
    0.00 :   635f4:  jmp    63108 <__vfscanf_internal+0x728>
         : 914   ./stdio-common/vfscanf-internal.c:637
    0.00 :   635f9:  mov    -0x620(%rbp),%r14
         : 916   ./stdio-common/vfscanf-internal.c:862
    0.00 :   63600:  mov    -0x638(%rbp),%edi
    0.00 :   63606:  mov    $0x1,%eax
    0.00 :   6360b:  cmp    $0xffffffff,%edi
    0.00 :   6360e:  cmovne %edi,%eax
    0.00 :   63611:  mov    %eax,-0x638(%rbp)
         : 922   ./stdio-common/vfscanf-internal.c:864
    0.00 :   63617:  mov    -0x63c(%rbp),%eax
    0.00 :   6361d:  mov    %eax,%esi
    0.00 :   6361f:  and    $0x8,%esi
    0.00 :   63622:  mov    %esi,-0x610(%rbp)
    0.00 :   63628:  jne    636ec <__vfscanf_internal+0xd0c>
         : 928   ./stdio-common/vfscanf-internal.c:864 (discriminator 1)
    0.00 :   6362e:  test   $0x21,%ah
    0.00 :   63631:  je     66502 <__vfscanf_internal+0x3b22>
         : 931   ./stdio-common/vfscanf-internal.c:864 (discriminator 3)
    0.00 :   63637:  mov    -0x68c(%rbp),%eax
    0.00 :   6363d:  test   %eax,%eax
    0.00 :   6363f:  jne    66e90 <__vfscanf_internal+0x44b0>
         : 935   ./stdio-common/vfscanf-internal.c:864
    0.00 :   63645:  mov    -0x5a8(%rbp),%edx
    0.00 :   6364b:  cmp    $0x2f,%edx
    0.00 :   6364e:  ja     662a0 <__vfscanf_internal+0x38c0>
    0.00 :   63654:  mov    %edx,%eax
    0.00 :   63656:  add    $0x8,%edx
    0.00 :   63659:  add    -0x598(%rbp),%rax
    0.00 :   63660:  mov    %edx,-0x5a8(%rbp)
    0.00 :   63666:  mov    (%rax),%rax
    0.00 :   63669:  mov    %rax,-0x670(%rbp)
    0.00 :   63670:  mov    %rax,%rbx
         : 946   ./stdio-common/vfscanf-internal.c:864 (discriminator 12)
    0.00 :   63673:  test   %rbx,%rbx
    0.00 :   63676:  je     68f7f <__vfscanf_internal+0x659f>
         : 949   ./stdio-common/vfscanf-internal.c:864 (discriminator 14)
    0.00 :   6367c:  movslq -0x638(%rbp),%rdi
    0.00 :   63683:  mov    $0x400,%eax
    0.00 :   63688:  cmp    %eax,%edi
    0.00 :   6368a:  cmovle %rdi,%rax
    0.00 :   6368e:  lea    0x0(,%rax,4),%rdi
    0.00 :   63696:  mov    %rax,-0x698(%rbp)
    0.00 :   6369d:  call   28380 <malloc@plt>
    0.00 :   636a2:  mov    %rax,-0x6b8(%rbp)
    0.00 :   636a9:  mov    %rax,(%rbx)
    0.00 :   636ac:  test   %rax,%rax
    0.00 :   636af:  je     69993 <__vfscanf_internal+0x6fb3>
         : 961   ./stdio-common/vfscanf-internal.c:864 (discriminator 15)
    0.00 :   636b5:  mov    -0x6d0(%rbp),%rax
    0.00 :   636bc:  test   %rax,%rax
    0.00 :   636bf:  je     65b4b <__vfscanf_internal+0x316b>
         : 965   ./stdio-common/vfscanf-internal.c:864 (discriminator 18)
    0.00 :   636c5:  mov    (%rax),%rax
         : 967   ./stdio-common/vfscanf-internal.c:1209 (discriminator 18)
    0.00 :   636c8:  lea    0x1(%rax),%rdx
         : 969   ./stdio-common/vfscanf-internal.c:864 (discriminator 18)
    0.00 :   636cc:  cmp    $0x20,%rax
    0.00 :   636d0:  je     65b4b <__vfscanf_internal+0x316b>
         : 972   ./stdio-common/vfscanf-internal.c:864 (discriminator 21)
    0.00 :   636d6:  mov    -0x6d0(%rbp),%rsi
    0.00 :   636dd:  mov    -0x670(%rbp),%rdi
    0.00 :   636e4:  mov    %rdx,(%rsi)
    0.00 :   636e7:  mov    %rdi,0x10(%rsi,%rax,8)
         : 977   ./stdio-common/vfscanf-internal.c:866 (discriminator 33)
    0.00 :   636ec:  cmp    $0xffffffff,%r13d
    0.00 :   636f0:  je     63dbd <__vfscanf_internal+0x13dd>
         : 980   ./stdio-common/vfscanf-internal.c:866 (discriminator 2)
    0.00 :   636f6:  mov    0x8(%r15),%rax
    0.00 :   636fa:  cmp    0x10(%r15),%rax
    0.00 :   636fe:  jae    6610c <__vfscanf_internal+0x372c>
         : 984   ./stdio-common/vfscanf-internal.c:866 (discriminator 5)
    0.00 :   63704:  lea    0x1(%rax),%rdx
    0.00 :   63708:  mov    %rdx,0x8(%r15)
    0.00 :   6370c:  movzbl (%rax),%r13d
         : 988   ./stdio-common/vfscanf-internal.c:924 (discriminator 8)
    0.00 :   63710:  lea    -0x540(%rbp),%rax
         : 990   ./stdio-common/vfscanf-internal.c:866 (discriminator 8)
    0.00 :   63717:  add    $0x1,%r14
         : 992   ./stdio-common/vfscanf-internal.c:924 (discriminator 8)
    0.00 :   6371b:  movq   $0x0,-0x540(%rbp)
    0.00 :   63726:  mov    %rax,-0x630(%rbp)
         : 995   ./stdio-common/vfscanf-internal.c:931 (discriminator 8)
    0.00 :   6372d:  mov    -0x63c(%rbp),%eax
    0.00 :   63733:  and    $0x2100,%eax
    0.00 :   63738:  mov    %eax,-0x63c(%rbp)
    0.00 :   6373e:  movslq -0x638(%rbp),%rax
    0.00 :   63745:  lea    -0x1(%rax),%esi
    0.00 :   63748:  mov    %rax,-0x638(%rbp)
    0.00 :   6374f:  mov    %esi,-0x620(%rbp)
         : 1003  ./stdio-common/vfscanf-internal.c:931
    0.00 :   63755:  mov    -0x610(%rbp),%eax
         : 1005  ./stdio-common/vfscanf-internal.c:929
    0.00 :   6375b:  mov    %r13b,-0x50(%rbp)
         : 1007  ./stdio-common/vfscanf-internal.c:931
    0.00 :   6375f:  test   %eax,%eax
    0.00 :   63761:  jne    63799 <__vfscanf_internal+0xdb9>
         : 1010  ./stdio-common/vfscanf-internal.c:931 (discriminator 1)
    0.00 :   63763:  mov    -0x63c(%rbp),%r12d
    0.00 :   6376a:  test   %r12d,%r12d
    0.00 :   6376d:  je     63799 <__vfscanf_internal+0xdb9>
         : 1014  ./stdio-common/vfscanf-internal.c:932
    0.00 :   6376f:  mov    -0x670(%rbp),%rax
    0.00 :   63776:  mov    (%rax),%rdi
    0.00 :   63779:  mov    -0x698(%rbp),%rax
    0.00 :   63780:  lea    0x0(,%rax,4),%r12
    0.00 :   63788:  lea    (%rdi,%r12,1),%rax
    0.00 :   6378c:  cmp    %rax,-0x6b8(%rbp)
    0.00 :   63793:  je     67601 <__vfscanf_internal+0x4c21>
    0.00 :   63799:  mov    -0x610(%rbp),%ebx
    0.00 :   6379f:  xor    %r12d,%r12d
    0.00 :   637a2:  test   %ebx,%ebx
    0.00 :   637a4:  lea    -0x50(%rbp),%rbx
    0.00 :   637a8:  cmove  -0x6b8(%rbp),%r12
    0.00 :   637b0:  jmp    637cc <__vfscanf_internal+0xdec>
    0.00 :   637b2:  nopw   0x0(%rax,%rax,1)
         : 1029  ./stdio-common/vfscanf-internal.c:977 (discriminator 5)
    0.00 :   637b8:  lea    0x1(%rax),%rdx
    0.00 :   637bc:  mov    %rdx,0x8(%r15)
    0.00 :   637c0:  movzbl (%rax),%r13d
         : 1033  ./stdio-common/vfscanf-internal.c:980 (discriminator 8)
    0.00 :   637c4:  mov    %r13b,-0x50(%rbp)
         : 1035  ./stdio-common/vfscanf-internal.c:977 (discriminator 8)
    0.00 :   637c8:  add    $0x1,%r14
         : 1037  ./stdio-common/vfscanf-internal.c:970
    0.00 :   637cc:  mov    -0x630(%rbp),%rcx
    0.00 :   637d3:  mov    $0x1,%edx
    0.00 :   637d8:  mov    %rbx,%rsi
    0.00 :   637db:  mov    %r12,%rdi
    0.00 :   637de:  call   c5fb0 <__mbrtowc>
         : 1043  ./stdio-common/vfscanf-internal.c:973
    0.00 :   637e3:  cmp    $0xfffffffffffffffe,%rax
    0.00 :   637e7:  jne    658d7 <__vfscanf_internal+0x2ef7>
         : 1046  ./stdio-common/vfscanf-internal.c:977 (discriminator 2)
    0.00 :   637ed:  mov    0x8(%r15),%rax
    0.00 :   637f1:  cmp    0x10(%r15),%rax
    0.00 :   637f5:  jb     637b8 <__vfscanf_internal+0xdd8>
         : 1050  ./stdio-common/vfscanf-internal.c:977 (discriminator 4)
    0.00 :   637f7:  mov    %r15,%rdi
    0.00 :   637fa:  call   8da40 <__uflow>
    0.00 :   637ff:  mov    %eax,%r13d
    0.00 :   63802:  cmp    $0xffffffff,%eax
    0.00 :   63805:  jne    637c4 <__vfscanf_internal+0xde4>
         : 1056  ./stdio-common/vfscanf-internal.c:978
    0.00 :   63807:  mov    0x1b6602(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6380e:  mov    %r15,%r14
    0.00 :   63811:  movl   $0x54,%fs:(%rax)
    0.00 :   63818:  jmp    63108 <__vfscanf_internal+0x728>
         : 1061  ./stdio-common/vfscanf-internal.c:491
    0.00 :   6381d:  cmp    $0x24,%bl
    0.00 :   63820:  je     65272 <__vfscanf_internal+0x2892>
         : 1064  ./stdio-common/vfscanf-internal.c:479
    0.00 :   63826:  movl   $0x0,-0x63c(%rbp)
         : 1066  ./stdio-common/vfscanf-internal.c:497
    0.00 :   63830:  movl   $0x0,-0x68c(%rbp)
         : 1068  ./stdio-common/vfscanf-internal.c:491
    0.00 :   6383a:  movl   $0xffffffff,-0x638(%rbp)
    0.00 :   63844:  jmp    62ee7 <__vfscanf_internal+0x507>
         : 1071  ./stdio-common/vfscanf-internal.c:427 (discriminator 4)
    0.00 :   63849:  mov    %r15,%rdi
    0.00 :   6384c:  mov    %rcx,-0x618(%rbp)
    0.00 :   63853:  call   8da40 <__uflow>
    0.00 :   63858:  mov    -0x618(%rbp),%rcx
    0.00 :   6385f:  cmp    $0xffffffff,%eax
    0.00 :   63862:  mov    %eax,%r13d
    0.00 :   63865:  jne    63230 <__vfscanf_internal+0x850>
    0.00 :   6386b:  mov    %r15,%r14
    0.00 :   6386e:  jmp    632ed <__vfscanf_internal+0x90d>
         : 1081  read_int():
         : 1082  ./stdio-common/printf-parse.h:76
    0.00 :   63873:  mov    %edx,-0x638(%rbp)
    0.00 :   63879:  mov    %edx,%esi
         : 1085  ./stdio-common/printf-parse.h:78
    0.00 :   6387b:  movzbl 0x1(%r12),%edx
    0.00 :   63881:  lea    0x1(%r12),%rax
    0.00 :   63886:  mov    %edx,%ebx
    0.00 :   63888:  sub    $0x30,%edx
    0.00 :   6388b:  cmp    $0x9,%edx
    0.00 :   6388e:  ja     62dd2 <__vfscanf_internal+0x3f2>
         : 1092  ./stdio-common/printf-parse.h:88
    0.00 :   63894:  mov    $0x7fffffff,%edi
    0.00 :   63899:  jmp    638c7 <__vfscanf_internal+0xee7>
    0.00 :   6389b:  nopl   0x0(%rax,%rax,1)
         : 1096  ./stdio-common/printf-parse.h:78
    0.00 :   638a0:  cmp    $0x9,%ecx
    0.00 :   638a3:  ja     6538d <__vfscanf_internal+0x29ad>
         : 1099  ./stdio-common/printf-parse.h:89
    0.00 :   638a9:  mov    $0xffffffff,%esi
         : 1101  ./stdio-common/printf-parse.h:78
    0.00 :   638ae:  movzbl 0x1(%r12),%edx
    0.00 :   638b4:  lea    0x1(%r12),%rax
    0.00 :   638b9:  mov    %edx,%ebx
    0.00 :   638bb:  sub    $0x30,%edx
    0.00 :   638be:  cmp    $0x9,%edx
    0.00 :   638c1:  ja     63a32 <__vfscanf_internal+0x1052>
    0.00 :   638c7:  movzbl 0x1(%rax),%ecx
    0.00 :   638cb:  lea    0x1(%rax),%r12
    0.00 :   638cf:  mov    %ecx,%ebx
    0.00 :   638d1:  sub    $0x30,%ecx
         : 1112  ./stdio-common/printf-parse.h:79
    0.00 :   638d4:  test   %esi,%esi
    0.00 :   638d6:  js     65cb9 <__vfscanf_internal+0x32d9>
         : 1115  ./stdio-common/printf-parse.h:81
    0.00 :   638dc:  cmp    $0xccccccc,%esi
    0.00 :   638e2:  jg     638a0 <__vfscanf_internal+0xec0>
         : 1118  ./stdio-common/printf-parse.h:87
    0.00 :   638e4:  lea    (%rsi,%rsi,4),%esi
         : 1120  ./stdio-common/printf-parse.h:88
    0.00 :   638e7:  mov    %edi,%r8d
         : 1122  ./stdio-common/printf-parse.h:87
    0.00 :   638ea:  add    %esi,%esi
         : 1124  ./stdio-common/printf-parse.h:88
    0.00 :   638ec:  sub    %edx,%r8d
    0.00 :   638ef:  cmp    %r8d,%esi
    0.00 :   638f2:  jle    63908 <__vfscanf_internal+0xf28>
         : 1128  ./stdio-common/printf-parse.h:78
    0.00 :   638f4:  cmp    $0x9,%ecx
    0.00 :   638f7:  jbe    638a9 <__vfscanf_internal+0xec9>
    0.00 :   638f9:  movl   $0xffffffff,-0x638(%rbp)
    0.00 :   63903:  jmp    62ee7 <__vfscanf_internal+0x507>
         : 1133  ./stdio-common/printf-parse.h:91
    0.00 :   63908:  add    %edx,%esi
    0.00 :   6390a:  mov    %rax,%r12
    0.00 :   6390d:  jmp    638ae <__vfscanf_internal+0xece>
         : 1137  __vfscanf_internal():
         : 1138  ./stdio-common/vfscanf-internal.c:3031
    0.00 :   6390f:  cmpq   $0x0,-0x6d0(%rbp)
    0.00 :   63917:  mov    -0x6d0(%rbp),%r12
    0.00 :   6391e:  je     62e01 <__vfscanf_internal+0x421>
         : 1142  ./stdio-common/vfscanf-internal.c:3036
    0.00 :   63924:  xor    %ebx,%ebx
    0.00 :   63926:  cmpq   $0x0,(%r12)
    0.00 :   6392b:  je     63953 <__vfscanf_internal+0xf73>
    0.00 :   6392d:  nopl   (%rax)
         : 1147  ./stdio-common/vfscanf-internal.c:3038 (discriminator 3)
    0.00 :   63930:  mov    0x10(%r12,%rbx,8),%rax
    0.00 :   63935:  mov    (%rax),%rdi
    0.00 :   63938:  call   28370 <free@plt>
         : 1151  ./stdio-common/vfscanf-internal.c:3039 (discriminator 3)
    0.00 :   6393d:  mov    0x10(%r12,%rbx,8),%rax
         : 1153  ./stdio-common/vfscanf-internal.c:3036 (discriminator 3)
    0.00 :   63942:  add    $0x1,%rbx
         : 1155  ./stdio-common/vfscanf-internal.c:3039 (discriminator 3)
    0.00 :   63946:  movq   $0x0,(%rax)
         : 1157  ./stdio-common/vfscanf-internal.c:3036 (discriminator 3)
    0.00 :   6394d:  cmp    %rbx,(%r12)
    0.00 :   63951:  ja     63930 <__vfscanf_internal+0xf50>
         : 1160  ./stdio-common/vfscanf-internal.c:3041
    0.00 :   63953:  mov    0x8(%r12),%r12
         : 1162  ./stdio-common/vfscanf-internal.c:3034
    0.00 :   63958:  test   %r12,%r12
    0.00 :   6395b:  jne    63924 <__vfscanf_internal+0xf44>
    0.00 :   6395d:  jmp    62e01 <__vfscanf_internal+0x421>
         : 1166  ./stdio-common/vfscanf-internal.c:3048
    0.00 :   63962:  mov    -0x670(%rbp),%rbx
    0.00 :   63969:  mov    (%rbx),%rdi
    0.00 :   6396c:  call   28370 <free@plt>
         : 1170  ./stdio-common/vfscanf-internal.c:3049
    0.00 :   63971:  movq   $0x0,(%rbx)
    0.00 :   63978:  jmp    63172 <__vfscanf_internal+0x792>
    0.00 :   6397d:  mov    %r15,%r14
    0.00 :   63980:  jmp    63108 <__vfscanf_internal+0x728>
         : 1175  ./stdio-common/vfscanf-internal.c:471
    0.00 :   63985:  movzbl %r13b,%esi
    0.00 :   63989:  mov    %r15,%rdi
    0.00 :   6398c:  mov    %r15,%r14
    0.00 :   6398f:  call   8e7b0 <_IO_sputbackc>
    0.00 :   63994:  jmp    63108 <__vfscanf_internal+0x728>
         : 1181  ./stdio-common/vfscanf-internal.c:637
    0.00 :   63999:  cmp    $0x67,%bl
    0.00 :   6399c:  ja     639c7 <__vfscanf_internal+0xfe7>
    0.00 :   6399e:  cmp    $0x24,%bl
    0.00 :   639a1:  jbe    63d3f <__vfscanf_internal+0x135f>
    0.00 :   639a7:  sub    $0x25,%ebx
    0.00 :   639aa:  cmp    $0x42,%bl
    0.00 :   639ad:  ja     63d47 <__vfscanf_internal+0x1367>
    0.00 :   639b3:  lea    0x16d496(%rip),%rdx        # 1d0e50 <codestrs_4+0x350>
    0.00 :   639ba:  movzbl %bl,%ebx
    0.00 :   639bd:  movslq (%rdx,%rbx,4),%rax
    0.00 :   639c1:  add    %rdx,%rax
    0.00 :   639c4:  notrack jmp *%rax
    0.00 :   639c7:  lea    -0x69(%rbx),%ecx
    0.00 :   639ca:  cmp    $0xf,%cl
    0.00 :   639cd:  ja     6835d <__vfscanf_internal+0x597d>
    0.00 :   639d3:  mov    $0x1,%eax
    0.00 :   639d8:  shl    %cl,%rax
    0.00 :   639db:  test   $0x90c1,%eax
    0.00 :   639e0:  jne    63d67 <__vfscanf_internal+0x1387>
    0.00 :   639e6:  cmp    $0xa,%cl
    0.00 :   639e9:  je     653a3 <__vfscanf_internal+0x29c3>
    0.00 :   639ef:  cmp    $0x5,%cl
    0.00 :   639f2:  je     6434e <__vfscanf_internal+0x196e>
    0.00 :   639f8:  mov    %r15,%r14
    0.00 :   639fb:  jmp    63108 <__vfscanf_internal+0x728>
         : 1207  read_int():
         : 1208  ./stdio-common/printf-parse.h:78
    0.00 :   63a00:  mov    %esi,-0x638(%rbp)
    0.00 :   63a06:  mov    %r12,%rdx
    0.00 :   63a09:  cmp    $0x9,%ecx
    0.00 :   63a0c:  ja     645e7 <__vfscanf_internal+0x1c07>
    0.00 :   63a12:  mov    %r12,%rax
    0.00 :   63a15:  nopl   (%rax)
    0.00 :   63a18:  mov    %rax,%r12
    0.00 :   63a1b:  movzbl 0x1(%rax),%edx
    0.00 :   63a1f:  add    $0x1,%rax
    0.00 :   63a23:  mov    %edx,%ebx
    0.00 :   63a25:  sub    $0x30,%edx
    0.00 :   63a28:  cmp    $0x9,%edx
    0.00 :   63a2b:  jbe    63a18 <__vfscanf_internal+0x1038>
    0.00 :   63a2d:  jmp    62db5 <__vfscanf_internal+0x3d5>
    0.00 :   63a32:  mov    %esi,-0x638(%rbp)
    0.00 :   63a38:  jmp    62dd2 <__vfscanf_internal+0x3f2>
         : 1225  __vfscanf_internal():
         : 1226  ./stdio-common/vfscanf-internal.c:637
    0.00 :   63a3d:  mov    -0x620(%rbp),%r14
         : 1228  ./stdio-common/vfscanf-internal.c:1912
    0.00 :   63a44:  cmp    $0xffffffff,%r13d
    0.00 :   63a48:  je     66dc4 <__vfscanf_internal+0x43e4>
         : 1231  ./stdio-common/vfscanf-internal.c:1912 (discriminator 2)
    0.00 :   63a4e:  mov    0x8(%r15),%rax
    0.00 :   63a52:  cmp    0x10(%r15),%rax
    0.00 :   63a56:  jae    66da8 <__vfscanf_internal+0x43c8>
         : 1235  ./stdio-common/vfscanf-internal.c:1912 (discriminator 5)
    0.00 :   63a5c:  lea    0x1(%rax),%rdx
    0.00 :   63a60:  mov    %rdx,0x8(%r15)
    0.00 :   63a64:  movzbl (%rax),%r13d
         : 1239  ./stdio-common/vfscanf-internal.c:1914
    0.00 :   63a68:  mov    -0x638(%rbp),%esi
    0.00 :   63a6e:  xor    %eax,%eax
         : 1242  ./stdio-common/vfscanf-internal.c:1912
    0.00 :   63a70:  lea    0x1(%r14),%r12
         : 1244  ./stdio-common/vfscanf-internal.c:1914
    0.00 :   63a74:  test   %esi,%esi
    0.00 :   63a76:  setg   %al
    0.00 :   63a79:  sub    %eax,%esi
         : 1248  ./stdio-common/vfscanf-internal.c:1921
    0.00 :   63a7b:  lea    -0x2b(%r13),%eax
    0.00 :   63a7f:  and    $0xfffffffd,%eax
         : 1251  ./stdio-common/vfscanf-internal.c:1914
    0.00 :   63a82:  mov    %esi,-0x638(%rbp)
         : 1253  char_buffer_add():
         : 1254  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63a88:  mov    -0x470(%rbp),%rsi
         : 1256  __vfscanf_internal():
         : 1257  ./stdio-common/vfscanf-internal.c:1921
    0.00 :   63a8f:  jne    65c9e <__vfscanf_internal+0x32be>
         : 1259  char_buffer_add():
         : 1260  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63a95:  mov    -0x468(%rbp),%rax
    0.00 :   63a9c:  cmp    %rsi,%rax
    0.00 :   63a9f:  je     678cc <__vfscanf_internal+0x4eec>
         : 1264  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63aa5:  lea    0x1(%rsi),%rax
    0.00 :   63aa9:  mov    %rax,-0x470(%rbp)
    0.00 :   63ab0:  mov    %r13b,(%rsi)
         : 1268  __vfscanf_internal():
         : 1269  ./stdio-common/vfscanf-internal.c:1925
    0.00 :   63ab3:  mov    -0x638(%rbp),%r9d
    0.00 :   63aba:  test   %r9d,%r9d
    0.00 :   63abd:  je     67b49 <__vfscanf_internal+0x5169>
         : 1273  ./stdio-common/vfscanf-internal.c:1925 (discriminator 3)
    0.00 :   63ac3:  mov    0x8(%r15),%rax
    0.00 :   63ac7:  cmp    0x10(%r15),%rax
    0.00 :   63acb:  jae    670e9 <__vfscanf_internal+0x4709>
         : 1277  ./stdio-common/vfscanf-internal.c:1925 (discriminator 6)
    0.00 :   63ad1:  lea    0x1(%rax),%rdx
    0.00 :   63ad5:  mov    %rdx,0x8(%r15)
    0.00 :   63ad9:  movzbl (%rax),%r13d
    0.00 :   63add:  mov    %r13,%rax
         : 1282  ./stdio-common/vfscanf-internal.c:1928 (discriminator 9)
    0.00 :   63ae0:  mov    -0x638(%rbp),%esi
         : 1284  ./stdio-common/vfscanf-internal.c:1925 (discriminator 9)
    0.00 :   63ae6:  lea    0x2(%r14),%r12
         : 1286  ./stdio-common/vfscanf-internal.c:1928 (discriminator 9)
    0.00 :   63aea:  test   %esi,%esi
    0.00 :   63aec:  jle    673b4 <__vfscanf_internal+0x49d4>
         : 1289  ./stdio-common/vfscanf-internal.c:1929
    0.00 :   63af2:  sub    $0x1,%esi
         : 1291  ./stdio-common/vfscanf-internal.c:1923
    0.00 :   63af5:  movb   $0x1,-0x668(%rbp)
         : 1293  ./stdio-common/vfscanf-internal.c:1929
    0.00 :   63afc:  movq   $0x1,-0x620(%rbp)
    0.00 :   63b07:  mov    %esi,-0x638(%rbp)
    0.00 :   63b0d:  mov    -0x470(%rbp),%rsi
         : 1297  ./stdio-common/vfscanf-internal.c:1933 (discriminator 2)
    0.00 :   63b14:  mov    -0x658(%rbp),%rdi
    0.00 :   63b1b:  mov    0x70(%rdi),%rdx
    0.00 :   63b1f:  mov    (%rdx,%rax,4),%eax
    0.00 :   63b22:  cmp    $0x6e,%eax
    0.00 :   63b25:  je     66377 <__vfscanf_internal+0x3997>
         : 1303  ./stdio-common/vfscanf-internal.c:1954 (discriminator 2)
    0.00 :   63b2b:  cmp    $0x69,%eax
    0.00 :   63b2e:  jne    66898 <__vfscanf_internal+0x3eb8>
         : 1306  char_buffer_add():
         : 1307  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63b34:  cmp    %rsi,-0x468(%rbp)
    0.00 :   63b3b:  je     6a670 <__vfscanf_internal+0x7c90>
         : 1310  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63b41:  lea    0x1(%rsi),%rax
    0.00 :   63b45:  mov    %rax,-0x470(%rbp)
    0.00 :   63b4c:  mov    %r13b,(%rsi)
         : 1314  __vfscanf_internal():
         : 1315  ./stdio-common/vfscanf-internal.c:1958
    0.00 :   63b4f:  mov    -0x638(%rbp),%eax
    0.00 :   63b55:  test   %eax,%eax
    0.00 :   63b57:  je     67503 <__vfscanf_internal+0x4b23>
         : 1319  ./stdio-common/vfscanf-internal.c:1959
    0.00 :   63b5d:  mov    0x8(%r15),%rax
    0.00 :   63b61:  cmp    0x10(%r15),%rax
    0.00 :   63b65:  jae    67d6f <__vfscanf_internal+0x538f>
         : 1323  ./stdio-common/vfscanf-internal.c:1959 (discriminator 2)
    0.00 :   63b6b:  lea    0x1(%rax),%rdx
    0.00 :   63b6f:  mov    %rdx,0x8(%r15)
    0.00 :   63b73:  movzbl (%rax),%eax
    0.00 :   63b76:  mov    %rax,%rdx
         : 1328  ./stdio-common/vfscanf-internal.c:1960 (discriminator 5)
    0.00 :   63b79:  mov    -0x658(%rbp),%rsi
    0.00 :   63b80:  mov    0x70(%rsi),%rcx
         : 1331  ./stdio-common/vfscanf-internal.c:1958 (discriminator 5)
    0.00 :   63b84:  cmpl   $0x6e,(%rcx,%rdx,4)
    0.00 :   63b88:  jne    69378 <__vfscanf_internal+0x6998>
         : 1334  ./stdio-common/vfscanf-internal.c:1963
    0.00 :   63b8e:  mov    -0x638(%rbp),%esi
    0.00 :   63b94:  xor    %edx,%edx
    0.00 :   63b96:  test   %esi,%esi
    0.00 :   63b98:  setg   %dl
    0.00 :   63b9b:  sub    %edx,%esi
         : 1340  char_buffer_add():
         : 1341  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63b9d:  mov    -0x470(%rbp),%rdx
         : 1343  __vfscanf_internal():
         : 1344  ./stdio-common/vfscanf-internal.c:1963
    0.00 :   63ba4:  mov    %esi,-0x638(%rbp)
         : 1346  char_buffer_add():
         : 1347  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63baa:  cmp    -0x468(%rbp),%rdx
    0.00 :   63bb1:  je     69364 <__vfscanf_internal+0x6984>
         : 1350  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63bb7:  lea    0x1(%rdx),%rcx
    0.00 :   63bbb:  mov    %rcx,-0x470(%rbp)
    0.00 :   63bc2:  mov    %al,(%rdx)
         : 1354  __vfscanf_internal():
         : 1355  ./stdio-common/vfscanf-internal.c:1965
    0.00 :   63bc4:  mov    -0x638(%rbp),%edx
    0.00 :   63bca:  test   %edx,%edx
    0.00 :   63bcc:  je     6750b <__vfscanf_internal+0x4b2b>
         : 1359  ./stdio-common/vfscanf-internal.c:1966
    0.00 :   63bd2:  mov    0x8(%r15),%rax
    0.00 :   63bd6:  cmp    0x10(%r15),%rax
    0.00 :   63bda:  jae    67d88 <__vfscanf_internal+0x53a8>
         : 1363  ./stdio-common/vfscanf-internal.c:1966 (discriminator 2)
    0.00 :   63be0:  lea    0x1(%rax),%rdx
    0.00 :   63be4:  mov    %rdx,0x8(%r15)
    0.00 :   63be8:  movzbl (%rax),%r13d
    0.00 :   63bec:  mov    %r13,%rax
         : 1368  ./stdio-common/vfscanf-internal.c:1967 (discriminator 5)
    0.00 :   63bef:  mov    -0x658(%rbp),%rdi
         : 1370  ./stdio-common/vfscanf-internal.c:1966 (discriminator 5)
    0.00 :   63bf6:  lea    0x2(%r12),%r14
         : 1372  ./stdio-common/vfscanf-internal.c:1967 (discriminator 5)
    0.00 :   63bfb:  mov    0x70(%rdi),%rdx
         : 1374  ./stdio-common/vfscanf-internal.c:1965 (discriminator 5)
    0.00 :   63bff:  cmpl   $0x66,(%rdx,%rax,4)
    0.00 :   63c03:  jne    68a7c <__vfscanf_internal+0x609c>
         : 1377  ./stdio-common/vfscanf-internal.c:1970
    0.00 :   63c09:  mov    -0x638(%rbp),%edi
    0.00 :   63c0f:  xor    %eax,%eax
    0.00 :   63c11:  test   %edi,%edi
    0.00 :   63c13:  setg   %al
    0.00 :   63c16:  sub    %eax,%edi
         : 1383  char_buffer_add():
         : 1384  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63c18:  mov    -0x470(%rbp),%rax
         : 1386  __vfscanf_internal():
         : 1387  ./stdio-common/vfscanf-internal.c:1970
    0.00 :   63c1f:  mov    %edi,-0x638(%rbp)
         : 1389  char_buffer_add():
         : 1390  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63c25:  cmp    -0x468(%rbp),%rax
    0.00 :   63c2c:  je     68a67 <__vfscanf_internal+0x6087>
         : 1393  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63c32:  lea    0x1(%rax),%rdx
    0.00 :   63c36:  mov    %rdx,-0x470(%rbp)
    0.00 :   63c3d:  mov    %r13b,(%rax)
         : 1397  __vfscanf_internal():
         : 1398  ./stdio-common/vfscanf-internal.c:1973
    0.00 :   63c40:  mov    -0x638(%rbp),%ecx
    0.00 :   63c46:  test   %ecx,%ecx
    0.00 :   63c48:  jne    68736 <__vfscanf_internal+0x5d56>
         : 1402  char_buffer_add():
         : 1403  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63c4e:  mov    -0x470(%rbp),%rsi
    0.00 :   63c55:  cmp    -0x468(%rbp),%rsi
    0.00 :   63c5c:  je     67e92 <__vfscanf_internal+0x54b2>
         : 1407  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63c62:  lea    0x1(%rsi),%rax
    0.00 :   63c66:  mov    %rax,-0x470(%rbp)
    0.00 :   63c6d:  movb   $0x0,(%rsi)
         : 1411  __vfscanf_internal():
         : 1412  ./stdio-common/vfscanf-internal.c:2421
    0.00 :   63c70:  cmpq   $0x0,-0x470(%rbp)
    0.00 :   63c78:  je     67e9b <__vfscanf_internal+0x54bb>
         : 1415  ./stdio-common/vfscanf-internal.c:2431
    0.00 :   63c7e:  mov    -0x63c(%rbp),%eax
         : 1417  char_buffer_start():
         : 1418  ./stdio-common/vfscanf-internal.c:206
    0.00 :   63c84:  mov    -0x460(%rbp),%rdi
         : 1420  __vfscanf_internal():
         : 1421  ./stdio-common/vfscanf-internal.c:2431
    0.00 :   63c8b:  mov    %eax,%edx
         : 1423  ./stdio-common/vfscanf-internal.c:2433
    0.00 :   63c8d:  mov    %eax,%ebx
         : 1425  ./stdio-common/vfscanf-internal.c:2431
    0.00 :   63c8f:  and    $0x80,%edx
         : 1427  ./stdio-common/vfscanf-internal.c:2433
    0.00 :   63c95:  and    $0x8,%ebx
         : 1429  ./stdio-common/vfscanf-internal.c:2428
    0.00 :   63c98:  test   $0x2,%al
    0.00 :   63c9a:  je     66dd3 <__vfscanf_internal+0x43f3>
         : 1432  ./stdio-common/vfscanf-internal.c:2429
    0.00 :   63ca0:  mov    -0x6dc(%rbp),%eax
    0.00 :   63ca6:  test   %eax,%eax
    0.00 :   63ca8:  jne    6848c <__vfscanf_internal+0x5aac>
         : 1436  ./stdio-common/vfscanf-internal.c:2439
    0.00 :   63cae:  mov    -0x6e0(%rbp),%eax
    0.00 :   63cb4:  test   %eax,%eax
    0.00 :   63cb6:  je     66dd3 <__vfscanf_internal+0x43f3>
         : 1440  ./stdio-common/vfscanf-internal.c:2441
    0.00 :   63cbc:  lea    -0x5e8(%rbp),%rsi
    0.00 :   63cc3:  call   47fc0 <__strtold_internal>
         : 1443  ./stdio-common/vfscanf-internal.c:2443
    0.00 :   63cc8:  test   %ebx,%ebx
    0.00 :   63cca:  jne    64902 <__vfscanf_internal+0x1f22>
         : 1446  char_buffer_start():
         : 1447  ./stdio-common/vfscanf-internal.c:206
    0.00 :   63cd0:  mov    -0x460(%rbp),%rsi
         : 1449  __vfscanf_internal():
         : 1450  ./stdio-common/vfscanf-internal.c:2443
    0.00 :   63cd7:  mov    -0x5e8(%rbp),%rdx
         : 1452  char_buffer_start():
         : 1453  ./stdio-common/vfscanf-internal.c:206
    0.00 :   63cde:  mov    %rsi,%rbx
         : 1455  __vfscanf_internal():
         : 1456  ./stdio-common/vfscanf-internal.c:2443
    0.00 :   63ce1:  cmp    %rsi,%rdx
    0.00 :   63ce4:  je     6a469 <__vfscanf_internal+0x7a89>
         : 1459  ./stdio-common/vfscanf-internal.c:2444
    0.00 :   63cea:  mov    -0x68c(%rbp),%r12d
    0.00 :   63cf1:  test   %r12d,%r12d
    0.00 :   63cf4:  jne    6a3d0 <__vfscanf_internal+0x79f0>
    0.00 :   63cfa:  mov    -0x5a8(%rbp),%ecx
    0.00 :   63d00:  cmp    $0x2f,%ecx
    0.00 :   63d03:  ja     6a3b9 <__vfscanf_internal+0x79d9>
    0.00 :   63d09:  mov    %ecx,%eax
    0.00 :   63d0b:  add    $0x8,%ecx
    0.00 :   63d0e:  add    -0x598(%rbp),%rax
    0.00 :   63d15:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   63d1b:  mov    (%rax),%rax
         : 1471  ./stdio-common/vfscanf-internal.c:2444 (discriminator 8)
    0.00 :   63d1e:  fstpt  (%rax)
         : 1473  ./stdio-common/vfscanf-internal.c:2461
    0.00 :   63d20:  cmp    %rsi,%rdx
    0.00 :   63d23:  je     6a65e <__vfscanf_internal+0x7c7e>
         : 1476  ./stdio-common/vfscanf-internal.c:2465
    0.00 :   63d29:  addl   $0x1,-0x640(%rbp)
    0.00 :   63d30:  movl   $0x0,-0x610(%rbp)
    0.00 :   63d3a:  jmp    62c3e <__vfscanf_internal+0x25e>
    0.00 :   63d3f:  mov    %r15,%r14
    0.00 :   63d42:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   63d47:  mov    %r15,%r14
    0.00 :   63d4a:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   63d4f:  mov    %r15,%r14
    0.00 :   63d52:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   63d57:  mov    %r15,%r14
    0.00 :   63d5a:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   63d5f:  mov    %r15,%r14
    0.00 :   63d62:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   63d67:  mov    %r15,%r14
         : 1491  ./stdio-common/vfscanf-internal.c:1398 (discriminator 1)
    0.00 :   63d6a:  mov    -0x600(%rbp),%eax
    0.00 :   63d70:  mov    %eax,%fs:(%r10)
         : 1494  ./stdio-common/vfscanf-internal.c:1400
    0.00 :   63d74:  mov    -0x640(%rbp),%edi
    0.00 :   63d7a:  mov    $0xffffffff,%eax
    0.00 :   63d7f:  test   %edi,%edi
    0.00 :   63d81:  cmovne %edi,%eax
    0.00 :   63d84:  mov    %eax,-0x640(%rbp)
    0.00 :   63d8a:  jmp    63108 <__vfscanf_internal+0x728>
         : 1501  ./stdio-common/vfscanf-internal.c:1211 (discriminator 1)
    0.00 :   63d8f:  mov    0x1b607a(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   63d96:  mov    -0x600(%rbp),%esi
    0.00 :   63d9c:  mov    %r15,%r14
    0.00 :   63d9f:  mov    %esi,%fs:(%rax)
         : 1506  ./stdio-common/vfscanf-internal.c:1213
    0.00 :   63da2:  mov    -0x640(%rbp),%esi
    0.00 :   63da8:  mov    $0xffffffff,%eax
    0.00 :   63dad:  test   %esi,%esi
    0.00 :   63daf:  cmovne %esi,%eax
    0.00 :   63db2:  mov    %eax,-0x640(%rbp)
    0.00 :   63db8:  jmp    63108 <__vfscanf_internal+0x728>
         : 1513  ./stdio-common/vfscanf-internal.c:866 (discriminator 1)
    0.00 :   63dbd:  mov    0x1b604c(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   63dc4:  mov    -0x600(%rbp),%edi
    0.00 :   63dca:  mov    %r15,%r14
    0.00 :   63dcd:  mov    %edi,%fs:(%rax)
         : 1518  ./stdio-common/vfscanf-internal.c:868
    0.00 :   63dd0:  mov    -0x640(%rbp),%edi
    0.00 :   63dd6:  mov    $0xffffffff,%eax
    0.00 :   63ddb:  test   %edi,%edi
    0.00 :   63ddd:  cmovne %edi,%eax
    0.00 :   63de0:  mov    %eax,-0x640(%rbp)
    0.00 :   63de6:  jmp    63108 <__vfscanf_internal+0x728>
         : 1525  ./stdio-common/vfscanf-internal.c:637
    0.00 :   63deb:  mov    %r14,-0x620(%rbp)
         : 1527  ./stdio-common/vfscanf-internal.c:1377
    0.00 :   63df2:  movl   $0x10,-0x610(%rbp)
         : 1529  ./stdio-common/vfscanf-internal.c:1398
    0.00 :   63dfc:  cmp    $0xffffffff,%r13d
    0.00 :   63e00:  je     6523a <__vfscanf_internal+0x285a>
         : 1532  ./stdio-common/vfscanf-internal.c:1398 (discriminator 2)
    0.00 :   63e06:  mov    0x8(%r15),%rax
    0.00 :   63e0a:  cmp    0x10(%r15),%rax
    0.00 :   63e0e:  jae    65249 <__vfscanf_internal+0x2869>
         : 1536  ./stdio-common/vfscanf-internal.c:1398 (discriminator 5)
    0.00 :   63e14:  lea    0x1(%rax),%rdx
    0.00 :   63e18:  mov    %rdx,0x8(%r15)
    0.00 :   63e1c:  movzbl (%rax),%r13d
         : 1540  ./stdio-common/vfscanf-internal.c:1398 (discriminator 8)
    0.00 :   63e20:  mov    -0x620(%rbp),%rax
    0.00 :   63e27:  lea    0x1(%rax),%r14
         : 1543  ./stdio-common/vfscanf-internal.c:1403 (discriminator 8)
    0.00 :   63e2b:  lea    -0x2b(%r13),%eax
    0.00 :   63e2f:  and    $0xfffffffd,%eax
    0.00 :   63e32:  jne    63e93 <__vfscanf_internal+0x14b3>
         : 1547  char_buffer_add():
         : 1548  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63e34:  mov    -0x470(%rbp),%rsi
    0.00 :   63e3b:  mov    -0x468(%rbp),%rax
    0.00 :   63e42:  cmp    %rsi,%rax
    0.00 :   63e45:  je     662b7 <__vfscanf_internal+0x38d7>
         : 1553  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63e4b:  lea    0x1(%rsi),%rax
    0.00 :   63e4f:  mov    %rax,-0x470(%rbp)
    0.00 :   63e56:  mov    %r13b,(%rsi)
         : 1557  __vfscanf_internal():
         : 1558  ./stdio-common/vfscanf-internal.c:1407
    0.00 :   63e59:  mov    -0x638(%rbp),%esi
    0.00 :   63e5f:  xor    %eax,%eax
    0.00 :   63e61:  test   %esi,%esi
    0.00 :   63e63:  setg   %al
    0.00 :   63e66:  sub    %eax,%esi
         : 1564  ./stdio-common/vfscanf-internal.c:1408
    0.00 :   63e68:  mov    0x8(%r15),%rax
         : 1566  ./stdio-common/vfscanf-internal.c:1407
    0.00 :   63e6c:  mov    %esi,-0x638(%rbp)
         : 1568  ./stdio-common/vfscanf-internal.c:1408
    0.00 :   63e72:  cmp    0x10(%r15),%rax
    0.00 :   63e76:  jae    64927 <__vfscanf_internal+0x1f47>
         : 1571  ./stdio-common/vfscanf-internal.c:1408 (discriminator 5)
    0.00 :   63e7c:  lea    0x1(%rax),%rdx
    0.00 :   63e80:  mov    %rdx,0x8(%r15)
    0.00 :   63e84:  movzbl (%rax),%r13d
         : 1575  ./stdio-common/vfscanf-internal.c:1408 (discriminator 8)
    0.00 :   63e88:  mov    -0x620(%rbp),%r14
    0.00 :   63e8f:  add    $0x2,%r14
         : 1578  ./stdio-common/vfscanf-internal.c:1412
    0.00 :   63e93:  mov    -0x638(%rbp),%esi
    0.00 :   63e99:  test   %esi,%esi
    0.00 :   63e9b:  setne  %al
    0.00 :   63e9e:  mov    %eax,%ecx
    0.00 :   63ea0:  cmp    $0x30,%r13d
    0.00 :   63ea4:  jne    6494e <__vfscanf_internal+0x1f6e>
    0.00 :   63eaa:  test   %al,%al
    0.00 :   63eac:  je     6494e <__vfscanf_internal+0x1f6e>
         : 1587  ./stdio-common/vfscanf-internal.c:1415
    0.00 :   63eb2:  xor    %eax,%eax
    0.00 :   63eb4:  test   %esi,%esi
    0.00 :   63eb6:  setg   %al
    0.00 :   63eb9:  sub    %eax,%esi
         : 1592  char_buffer_add():
         : 1593  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63ebb:  mov    -0x468(%rbp),%rax
         : 1595  __vfscanf_internal():
         : 1596  ./stdio-common/vfscanf-internal.c:1415
    0.00 :   63ec2:  mov    %esi,-0x638(%rbp)
         : 1598  char_buffer_add():
         : 1599  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63ec8:  mov    -0x470(%rbp),%rsi
    0.00 :   63ecf:  cmp    %rsi,%rax
    0.00 :   63ed2:  je     66600 <__vfscanf_internal+0x3c20>
         : 1603  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63ed8:  lea    0x1(%rsi),%rax
    0.00 :   63edc:  mov    %rax,-0x470(%rbp)
    0.00 :   63ee3:  movb   $0x30,(%rsi)
         : 1607  __vfscanf_internal():
         : 1608  ./stdio-common/vfscanf-internal.c:1418
    0.00 :   63ee6:  mov    0x8(%r15),%rax
    0.00 :   63eea:  cmp    0x10(%r15),%rax
    0.00 :   63eee:  jae    65647 <__vfscanf_internal+0x2c67>
         : 1612  ./stdio-common/vfscanf-internal.c:1418 (discriminator 5)
    0.00 :   63ef4:  lea    0x1(%rax),%rdx
    0.00 :   63ef8:  mov    %rdx,0x8(%r15)
    0.00 :   63efc:  movzbl (%rax),%r13d
         : 1616  ./stdio-common/vfscanf-internal.c:1418 (discriminator 8)
    0.00 :   63f00:  add    $0x1,%r14
         : 1618  ./stdio-common/vfscanf-internal.c:1420 (discriminator 11)
    0.00 :   63f04:  mov    -0x638(%rbp),%r9d
    0.00 :   63f0b:  test   %r9d,%r9d
    0.00 :   63f0e:  je     65178 <__vfscanf_internal+0x2798>
         : 1622  ./stdio-common/vfscanf-internal.c:1420 (discriminator 3)
    0.00 :   63f14:  mov    -0x658(%rbp),%rdi
    0.00 :   63f1b:  movzbl %r13b,%eax
    0.00 :   63f1f:  mov    0x70(%rdi),%rdx
    0.00 :   63f23:  cmpl   $0x78,(%rdx,%rax,4)
    0.00 :   63f27:  je     65c01 <__vfscanf_internal+0x3221>
         : 1628  ./stdio-common/vfscanf-internal.c:1431
    0.00 :   63f2d:  mov    -0x610(%rbp),%eax
         : 1630  ./stdio-common/vfscanf-internal.c:1733
    0.00 :   63f33:  cmp    $0xffffffff,%r13d
    0.00 :   63f37:  setne  %cl
         : 1633  ./stdio-common/vfscanf-internal.c:1431
    0.00 :   63f3a:  test   %eax,%eax
    0.00 :   63f3c:  jne    6518a <__vfscanf_internal+0x27aa>
    0.00 :   63f42:  movl   $0x8,-0x610(%rbp)
         : 1637  ./stdio-common/vfscanf-internal.c:1733
    0.00 :   63f4c:  test   %cl,%cl
    0.00 :   63f4e:  je     65c6c <__vfscanf_internal+0x328c>
         : 1640  ./stdio-common/vfscanf-internal.c:1742
    0.00 :   63f54:  mov    -0x63c(%rbp),%eax
         : 1642  scratch_buffer_grow_preserve():
         : 1643  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   63f5a:  mov    %r15,%r12
    0.00 :   63f5d:  mov    %r13d,%r15d
    0.00 :   63f60:  mov    %r14,%r13
    0.00 :   63f63:  mov    -0x638(%rbp),%r14d
         : 1648  __vfscanf_internal():
         : 1649  ./stdio-common/vfscanf-internal.c:1742
    0.00 :   63f6a:  and    $0x80,%eax
    0.00 :   63f6f:  mov    %eax,-0x650(%rbp)
         : 1652  scratch_buffer_grow_preserve():
         : 1653  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   63f75:  lea    -0x460(%rbp),%rax
    0.00 :   63f7c:  mov    %rax,-0x648(%rbp)
    0.00 :   63f83:  jmp    64010 <__vfscanf_internal+0x1630>
    0.00 :   63f88:  nopl   0x0(%rax,%rax,1)
         : 1658  __vfscanf_internal():
         : 1659  ./stdio-common/vfscanf-internal.c:1740
    0.00 :   63f90:  lea    -0x30(%r15),%eax
    0.00 :   63f94:  cmp    $0x9,%eax
    0.00 :   63f97:  ja     64630 <__vfscanf_internal+0x1c50>
         : 1663  ./stdio-common/vfscanf-internal.c:1740 (discriminator 1)
    0.00 :   63f9d:  lea    -0x2f(%r15),%eax
    0.00 :   63fa1:  cmp    -0x610(%rbp),%eax
    0.00 :   63fa7:  jg     64630 <__vfscanf_internal+0x1c50>
         : 1667  char_buffer_add():
         : 1668  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63fad:  mov    -0x470(%rbp),%rax
    0.00 :   63fb4:  mov    -0x468(%rbp),%rbx
         : 1671  __vfscanf_internal():
         : 1672  ./stdio-common/vfscanf-internal.c:1797
    0.00 :   63fbb:  mov    %r15d,%r11d
         : 1674  char_buffer_add():
         : 1675  ./stdio-common/vfscanf-internal.c:260
    0.00 :   63fbe:  cmp    %rbx,%rax
    0.00 :   63fc1:  je     648f4 <__vfscanf_internal+0x1f14>
         : 1678  ./stdio-common/vfscanf-internal.c:263
    0.00 :   63fc7:  lea    0x1(%rax),%rsi
    0.00 :   63fcb:  mov    %rsi,-0x470(%rbp)
    0.00 :   63fd2:  mov    %r11b,(%rax)
         : 1682  __vfscanf_internal():
         : 1683  ./stdio-common/vfscanf-internal.c:1799
    0.00 :   63fd5:  xor    %eax,%eax
    0.00 :   63fd7:  test   %r14d,%r14d
    0.00 :   63fda:  setg   %al
    0.00 :   63fdd:  sub    %eax,%r14d
         : 1688  ./stdio-common/vfscanf-internal.c:1801
    0.00 :   63fe0:  cmp    $0xffffffff,%r15d
    0.00 :   63fe4:  je     645f8 <__vfscanf_internal+0x1c18>
         : 1691  ./stdio-common/vfscanf-internal.c:1801 (discriminator 2)
    0.00 :   63fea:  mov    0x8(%r12),%rax
    0.00 :   63fef:  cmp    0x10(%r12),%rax
    0.00 :   63ff4:  jae    64875 <__vfscanf_internal+0x1e95>
         : 1695  ./stdio-common/vfscanf-internal.c:1801 (discriminator 5)
    0.00 :   63ffa:  lea    0x1(%rax),%rdx
    0.00 :   63ffe:  mov    %rdx,0x8(%r12)
    0.00 :   64003:  movzbl (%rax),%r15d
         : 1699  ./stdio-common/vfscanf-internal.c:1801 (discriminator 8)
    0.00 :   64007:  add    $0x1,%r13
         : 1701  ./stdio-common/vfscanf-internal.c:1733 (discriminator 8)
    0.00 :   6400b:  test   %r14d,%r14d
    0.00 :   6400e:  je     64036 <__vfscanf_internal+0x1656>
         : 1704  ./stdio-common/vfscanf-internal.c:1735
    0.00 :   64010:  cmpl   $0x10,-0x610(%rbp)
    0.00 :   64017:  jne    63f90 <__vfscanf_internal+0x15b0>
         : 1707  ./stdio-common/vfscanf-internal.c:1737
    0.00 :   6401d:  mov    -0x658(%rbp),%rsi
    0.00 :   64024:  movslq %r15d,%rax
    0.00 :   64027:  mov    0x68(%rsi),%rdx
    0.00 :   6402b:  testb  $0x10,0x1(%rdx,%rax,2)
    0.00 :   64030:  jne    63fad <__vfscanf_internal+0x15cd>
    0.00 :   64036:  mov    -0x470(%rbp),%rsi
   50.15 :   6403d:  mov    %r14d,-0x638(%rbp)
    0.00 :   64044:  mov    %r13,%r14
    0.00 :   64047:  mov    %r15d,%r13d
    0.00 :   6404a:  mov    %r12,%r15
         : 1718  ./stdio-common/vfscanf-internal.c:1804
    0.00 :   6404d:  test   %rsi,%rsi
    0.00 :   64050:  je     66128 <__vfscanf_internal+0x3748>
         : 1721  char_buffer_start():
         : 1722  ./stdio-common/vfscanf-internal.c:206
    0.00 :   64056:  mov    -0x460(%rbp),%rax
         : 1724  __vfscanf_internal():
         : 1725  ./stdio-common/vfscanf-internal.c:1811
    0.00 :   6405d:  cmp    %rsi,%rax
    0.00 :   64060:  je     65281 <__vfscanf_internal+0x28a1>
         : 1728  char_buffer_size():
         : 1729  ./stdio-common/vfscanf-internal.c:214
    0.00 :   64066:  mov    %rsi,%rdx
    0.00 :   64069:  sub    %rax,%rdx
         : 1732  __vfscanf_internal():
         : 1733  ./stdio-common/vfscanf-internal.c:1812
    0.00 :   6406c:  cmp    $0x1,%rdx
    0.00 :   64070:  je     6577b <__vfscanf_internal+0x2d9b>
         : 1736  ./stdio-common/vfscanf-internal.c:1840
    0.00 :   64076:  cmp    $0xffffffff,%r13d
    0.00 :   6407a:  je     65671 <__vfscanf_internal+0x2c91>
         : 1739  ./stdio-common/vfscanf-internal.c:1840 (discriminator 2)
    0.00 :   64080:  movzbl %r13b,%esi
    0.00 :   64084:  mov    %r15,%rdi
    0.00 :   64087:  sub    $0x1,%r14
    0.00 :   6408b:  call   8e7b0 <_IO_sputbackc>
         : 1744  char_buffer_add():
         : 1745  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64090:  mov    -0x470(%rbp),%rsi
    0.00 :   64097:  cmp    -0x468(%rbp),%rsi
    0.00 :   6409e:  je     66754 <__vfscanf_internal+0x3d74>
         : 1749  ./stdio-common/vfscanf-internal.c:263
    0.00 :   640a4:  lea    0x1(%rsi),%rax
    0.00 :   640a8:  mov    %rax,-0x470(%rbp)
    0.00 :   640af:  movb   $0x0,(%rsi)
         : 1753  __vfscanf_internal():
         : 1754  ./stdio-common/vfscanf-internal.c:1844
    0.00 :   640b2:  cmpq   $0x0,-0x470(%rbp)
    0.00 :   640ba:  je     66310 <__vfscanf_internal+0x3930>
         : 1757  ./stdio-common/vfscanf-internal.c:1669
    0.00 :   640c0:  mov    -0x63c(%rbp),%eax
         : 1759  char_buffer_start():
         : 1760  ./stdio-common/vfscanf-internal.c:206
    0.00 :   640c6:  mov    -0x460(%rbp),%rdi
         : 1762  __vfscanf_internal():
         : 1763  ./stdio-common/vfscanf-internal.c:1862
    0.00 :   640cd:  lea    -0x5e8(%rbp),%rsi
    0.00 :   640d4:  mov    -0x610(%rbp),%edx
         : 1766  ./stdio-common/vfscanf-internal.c:1669
    0.00 :   640da:  mov    %eax,%ecx
    0.00 :   640dc:  and    $0x80,%ecx
         : 1769  ./stdio-common/vfscanf-internal.c:1861
    0.00 :   640e2:  and    $0x40,%eax
    0.00 :   640e5:  mov    %eax,%ebx
    0.00 :   640e7:  je     65265 <__vfscanf_internal+0x2885>
         : 1773  ./stdio-common/vfscanf-internal.c:1862
    0.00 :   640ed:  call   474c0 <__strtol_internal>
    0.00 :   640f2:  mov    %rax,%rdx
         : 1776  ./stdio-common/vfscanf-internal.c:1868
    0.00 :   640f5:  mov    -0x460(%rbp),%rax
    0.00 :   640fc:  cmp    %rax,-0x5e8(%rbp)
    0.00 :   64103:  je     6657a <__vfscanf_internal+0x3b9a>
         : 1780  ./stdio-common/vfscanf-internal.c:1871
    0.00 :   64109:  mov    -0x63c(%rbp),%eax
    0.00 :   6410f:  mov    %eax,%edi
    0.00 :   64111:  and    $0x8,%edi
    0.00 :   64114:  mov    %edi,-0x610(%rbp)
    0.00 :   6411a:  jne    64918 <__vfscanf_internal+0x1f38>
         : 1786  ./stdio-common/vfscanf-internal.c:1877
    0.00 :   64120:  and    $0x1,%eax
         : 1788  ./stdio-common/vfscanf-internal.c:1873
    0.00 :   64123:  test   %ebx,%ebx
    0.00 :   64125:  je     659c0 <__vfscanf_internal+0x2fe0>
         : 1791  ./stdio-common/vfscanf-internal.c:1877
    0.00 :   6412b:  test   %eax,%eax
    0.00 :   6412d:  je     66330 <__vfscanf_internal+0x3950>
         : 1794  ./stdio-common/vfscanf-internal.c:1878
    0.00 :   64133:  mov    -0x68c(%rbp),%eax
    0.00 :   64139:  test   %eax,%eax
    0.00 :   6413b:  jne    677ed <__vfscanf_internal+0x4e0d>
         : 1798  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   64141:  mov    -0x5a8(%rbp),%ecx
    0.00 :   64147:  cmp    $0x2f,%ecx
    0.00 :   6414a:  ja     666da <__vfscanf_internal+0x3cfa>
    0.00 :   64150:  mov    %ecx,%eax
    0.00 :   64152:  add    $0x8,%ecx
    0.00 :   64155:  add    -0x598(%rbp),%rax
    0.00 :   6415c:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   64162:  mov    (%rax),%rax
         : 1807  ./stdio-common/vfscanf-internal.c:1891 (discriminator 8)
    0.00 :   64165:  mov    %rdx,(%rax)
         : 1809  ./stdio-common/vfscanf-internal.c:1900
    0.00 :   64168:  addl   $0x1,-0x640(%rbp)
    0.00 :   6416f:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 1812  ./stdio-common/vfscanf-internal.c:637
    0.00 :   64174:  mov    -0x620(%rbp),%r14
         : 1814  ./stdio-common/vfscanf-internal.c:699
    0.00 :   6417b:  mov    -0x63c(%rbp),%edi
    0.00 :   64181:  mov    %edi,%eax
    0.00 :   64183:  and    $0x1,%eax
    0.00 :   64186:  mov    %eax,-0x610(%rbp)
    0.00 :   6418c:  jne    63600 <__vfscanf_internal+0xc20>
         : 1820  ./stdio-common/vfscanf-internal.c:702
    0.00 :   64192:  mov    -0x638(%rbp),%esi
    0.00 :   64198:  mov    $0x1,%eax
    0.00 :   6419d:  cmp    $0xffffffff,%esi
    0.00 :   641a0:  cmovne %esi,%eax
    0.00 :   641a3:  mov    %eax,-0x638(%rbp)
         : 1826  ./stdio-common/vfscanf-internal.c:737
    0.00 :   641a9:  mov    %edi,%eax
    0.00 :   641ab:  and    $0x8,%edi
    0.00 :   641ae:  mov    %edi,%ebx
    0.00 :   641b0:  jne    64270 <__vfscanf_internal+0x1890>
         : 1831  ./stdio-common/vfscanf-internal.c:737 (discriminator 1)
    0.00 :   641b6:  test   $0x21,%ah
    0.00 :   641b9:  je     676f9 <__vfscanf_internal+0x4d19>
         : 1834  ./stdio-common/vfscanf-internal.c:737 (discriminator 3)
    0.00 :   641bf:  mov    -0x68c(%rbp),%eax
    0.00 :   641c5:  test   %eax,%eax
    0.00 :   641c7:  jne    69063 <__vfscanf_internal+0x6683>
         : 1838  ./stdio-common/vfscanf-internal.c:737
    0.00 :   641cd:  mov    -0x5a8(%rbp),%edx
    0.00 :   641d3:  cmp    $0x2f,%edx
    0.00 :   641d6:  ja     677d6 <__vfscanf_internal+0x4df6>
    0.00 :   641dc:  mov    %edx,%eax
    0.00 :   641de:  add    $0x8,%edx
    0.00 :   641e1:  add    -0x598(%rbp),%rax
    0.00 :   641e8:  mov    %edx,-0x5a8(%rbp)
    0.00 :   641ee:  mov    (%rax),%rax
    0.00 :   641f1:  mov    %rax,-0x670(%rbp)
    0.00 :   641f8:  mov    %rax,%r12
         : 1849  ./stdio-common/vfscanf-internal.c:737 (discriminator 12)
    0.00 :   641fb:  test   %r12,%r12
    0.00 :   641fe:  je     69103 <__vfscanf_internal+0x6723>
         : 1852  ./stdio-common/vfscanf-internal.c:737 (discriminator 14)
    0.00 :   64204:  movslq -0x638(%rbp),%rdi
    0.00 :   6420b:  mov    $0x400,%eax
    0.00 :   64210:  cmp    %eax,%edi
    0.00 :   64212:  cmovle %rdi,%rax
    0.00 :   64216:  mov    %rax,%rdi
    0.00 :   64219:  mov    %rax,-0x698(%rbp)
    0.00 :   64220:  call   28380 <malloc@plt>
    0.00 :   64225:  mov    %rax,-0x6c0(%rbp)
    0.00 :   6422c:  mov    %rax,(%r12)
    0.00 :   64230:  test   %rax,%rax
    0.00 :   64233:  je     6923d <__vfscanf_internal+0x685d>
         : 1864  ./stdio-common/vfscanf-internal.c:737 (discriminator 15)
    0.00 :   64239:  mov    -0x6d0(%rbp),%rax
    0.00 :   64240:  test   %rax,%rax
    0.00 :   64243:  je     6777b <__vfscanf_internal+0x4d9b>
         : 1868  ./stdio-common/vfscanf-internal.c:737 (discriminator 18)
    0.00 :   64249:  mov    (%rax),%rax
         : 1870  ./stdio-common/vfscanf-internal.c:1209 (discriminator 18)
    0.00 :   6424c:  lea    0x1(%rax),%rdx
         : 1872  ./stdio-common/vfscanf-internal.c:737 (discriminator 18)
    0.00 :   64250:  cmp    $0x20,%rax
    0.00 :   64254:  je     6777b <__vfscanf_internal+0x4d9b>
         : 1875  ./stdio-common/vfscanf-internal.c:737 (discriminator 21)
    0.00 :   6425a:  mov    -0x6d0(%rbp),%rsi
    0.00 :   64261:  mov    -0x670(%rbp),%rdi
    0.00 :   64268:  mov    %rdx,(%rsi)
    0.00 :   6426b:  mov    %rdi,0x10(%rsi,%rax,8)
         : 1880  ./stdio-common/vfscanf-internal.c:740 (discriminator 33)
    0.00 :   64270:  cmp    $0xffffffff,%r13d
    0.00 :   64274:  je     66f92 <__vfscanf_internal+0x45b2>
         : 1883  ./stdio-common/vfscanf-internal.c:740 (discriminator 2)
    0.00 :   6427a:  mov    0x8(%r15),%rax
    0.00 :   6427e:  cmp    0x10(%r15),%rax
    0.00 :   64282:  jae    66f60 <__vfscanf_internal+0x4580>
         : 1887  ./stdio-common/vfscanf-internal.c:740 (discriminator 5)
    0.00 :   64288:  lea    0x1(%rax),%rdx
    0.00 :   6428c:  mov    %rdx,0x8(%r15)
    0.00 :   64290:  movzbl (%rax),%r13d
         : 1891  ./stdio-common/vfscanf-internal.c:740 (discriminator 8)
    0.00 :   64294:  lea    0x1(%r14),%r12
         : 1893  ./stdio-common/vfscanf-internal.c:799 (discriminator 8)
    0.00 :   64298:  test   %ebx,%ebx
    0.00 :   6429a:  jne    66659 <__vfscanf_internal+0x3c79>
    0.00 :   642a0:  testl  $0x2100,-0x63c(%rbp)
    0.00 :   642aa:  jne    66fa7 <__vfscanf_internal+0x45c7>
         : 1898  ./stdio-common/vfscanf-internal.c:803
    0.00 :   642b0:  mov    -0x6c0(%rbp),%rbx
    0.00 :   642b7:  mov    -0x638(%rbp),%eax
    0.00 :   642bd:  add    %ebx,%eax
    0.00 :   642bf:  sub    %rbx,%r12
    0.00 :   642c2:  mov    %eax,-0x610(%rbp)
    0.00 :   642c8:  jmp    642dc <__vfscanf_internal+0x18fc>
    0.00 :   642ca:  nopw   0x0(%rax,%rax,1)
         : 1906  ./stdio-common/vfscanf-internal.c:839
    0.00 :   642d0:  lea    0x1(%rax),%rdx
    0.00 :   642d4:  mov    %rdx,0x8(%r15)
    0.00 :   642d8:  movzbl (%rax),%r13d
    0.00 :   642dc:  mov    -0x610(%rbp),%eax
    0.00 :   642e2:  lea    (%rbx,%r12,1),%r14
         : 1912  ./stdio-common/vfscanf-internal.c:837
    0.00 :   642e6:  add    $0x1,%rbx
    0.00 :   642ea:  mov    %r13b,-0x1(%rbx)
         : 1915  ./stdio-common/vfscanf-internal.c:839
    0.00 :   642ee:  sub    %ebx,%eax
    0.00 :   642f0:  test   %eax,%eax
    0.00 :   642f2:  jle    6431f <__vfscanf_internal+0x193f>
    0.00 :   642f4:  mov    0x8(%r15),%rax
    0.00 :   642f8:  cmp    %rax,0x10(%r15)
    0.00 :   642fc:  ja     642d0 <__vfscanf_internal+0x18f0>
    0.00 :   642fe:  mov    %r15,%rdi
    0.00 :   64301:  call   8da40 <__uflow>
    0.00 :   64306:  mov    %eax,%r13d
    0.00 :   64309:  cmp    $0xffffffff,%eax
    0.00 :   6430c:  jne    642dc <__vfscanf_internal+0x18fc>
    0.00 :   6430e:  mov    0x1b5afb(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   64315:  mov    %fs:(%r10),%eax
    0.00 :   64319:  mov    %eax,-0x600(%rbp)
         : 1930  ./stdio-common/vfscanf-internal.c:854
    0.00 :   6431f:  addl   $0x1,-0x640(%rbp)
         : 1932  ./stdio-common/vfscanf-internal.c:851
    0.00 :   64326:  mov    %rbx,-0x6c0(%rbp)
         : 1934  ./stdio-common/vfscanf-internal.c:854
    0.00 :   6432d:  movl   $0x0,-0x610(%rbp)
         : 1936  ./stdio-common/vfscanf-internal.c:853
    0.00 :   64337:  movq   $0x0,-0x670(%rbp)
    0.00 :   64342:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 1939  ./stdio-common/vfscanf-internal.c:637
    0.00 :   64347:  mov    -0x620(%rbp),%r14
         : 1941  ./stdio-common/vfscanf-internal.c:653
    0.00 :   6434e:  mov    -0x63c(%rbp),%eax
    0.00 :   64354:  mov    %eax,%esi
    0.00 :   64356:  and    $0x8,%esi
    0.00 :   64359:  mov    %esi,-0x610(%rbp)
    0.00 :   6435f:  jne    64918 <__vfscanf_internal+0x1f38>
         : 1947  ./stdio-common/vfscanf-internal.c:658
    0.00 :   64365:  test   $0x1,%al
    0.00 :   64367:  je     664b0 <__vfscanf_internal+0x3ad0>
         : 1950  ./stdio-common/vfscanf-internal.c:659
    0.00 :   6436d:  mov    -0x68c(%rbp),%edi
    0.00 :   64373:  test   %edi,%edi
    0.00 :   64375:  jne    67cbe <__vfscanf_internal+0x52de>
    0.00 :   6437b:  mov    -0x5a8(%rbp),%edx
    0.00 :   64381:  cmp    $0x2f,%edx
    0.00 :   64384:  ja     67f36 <__vfscanf_internal+0x5556>
    0.00 :   6438a:  mov    %edx,%eax
    0.00 :   6438c:  add    $0x8,%edx
    0.00 :   6438f:  add    -0x598(%rbp),%rax
    0.00 :   64396:  mov    %edx,-0x5a8(%rbp)
    0.00 :   6439c:  mov    (%rax),%rax
         : 1962  ./stdio-common/vfscanf-internal.c:659 (discriminator 8)
    0.00 :   6439f:  mov    %r14,(%rax)
    0.00 :   643a2:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 1965  ./stdio-common/vfscanf-internal.c:637
    0.00 :   643a7:  mov    %r14,-0x620(%rbp)
         : 1967  ./stdio-common/vfscanf-internal.c:653
    0.00 :   643ae:  mov    -0x63c(%rbp),%eax
    0.00 :   643b4:  mov    %eax,%ebx
         : 1970  ./stdio-common/vfscanf-internal.c:2469
    0.00 :   643b6:  mov    %eax,%edi
         : 1972  ./stdio-common/vfscanf-internal.c:653
    0.00 :   643b8:  and    $0x8,%ebx
         : 1974  ./stdio-common/vfscanf-internal.c:2469
    0.00 :   643bb:  and    $0x1,%edi
    0.00 :   643be:  mov    %edi,-0x610(%rbp)
    0.00 :   643c4:  je     65a5b <__vfscanf_internal+0x307b>
         : 1978  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   643ca:  test   %ebx,%ebx
    0.00 :   643cc:  jne    64481 <__vfscanf_internal+0x1aa1>
         : 1981  ./stdio-common/vfscanf-internal.c:2470 (discriminator 1)
    0.00 :   643d2:  test   $0x21,%ah
    0.00 :   643d5:  je     67a24 <__vfscanf_internal+0x5044>
         : 1984  ./stdio-common/vfscanf-internal.c:2470 (discriminator 3)
    0.00 :   643db:  mov    -0x68c(%rbp),%r10d
    0.00 :   643e2:  test   %r10d,%r10d
    0.00 :   643e5:  jne    67984 <__vfscanf_internal+0x4fa4>
         : 1988  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   643eb:  mov    -0x5a8(%rbp),%edx
    0.00 :   643f1:  cmp    $0x2f,%edx
    0.00 :   643f4:  ja     6796d <__vfscanf_internal+0x4f8d>
    0.00 :   643fa:  mov    %edx,%eax
    0.00 :   643fc:  add    $0x8,%edx
    0.00 :   643ff:  add    -0x598(%rbp),%rax
    0.00 :   64406:  mov    %edx,-0x5a8(%rbp)
    0.00 :   6440c:  mov    (%rax),%rax
    0.00 :   6440f:  mov    %rax,-0x670(%rbp)
    0.00 :   64416:  mov    %rax,%r14
         : 1999  ./stdio-common/vfscanf-internal.c:2470 (discriminator 12)
    0.00 :   64419:  test   %r14,%r14
    0.00 :   6441c:  je     68f77 <__vfscanf_internal+0x6597>
         : 2002  ./stdio-common/vfscanf-internal.c:2470 (discriminator 14)
    0.00 :   64422:  mov    $0x190,%edi
    0.00 :   64427:  call   28380 <malloc@plt>
    0.00 :   6442c:  mov    %rax,-0x6b8(%rbp)
    0.00 :   64433:  mov    %rax,(%r14)
    0.00 :   64436:  test   %rax,%rax
    0.00 :   64439:  je     69460 <__vfscanf_internal+0x6a80>
         : 2009  ./stdio-common/vfscanf-internal.c:2470 (discriminator 15)
    0.00 :   6443f:  mov    -0x6d0(%rbp),%rax
    0.00 :   64446:  test   %rax,%rax
    0.00 :   64449:  je     6766d <__vfscanf_internal+0x4c8d>
         : 2013  ./stdio-common/vfscanf-internal.c:2470 (discriminator 18)
    0.00 :   6444f:  mov    (%rax),%rax
    0.00 :   64452:  cmp    $0x20,%rax
    0.00 :   64456:  je     6766d <__vfscanf_internal+0x4c8d>
         : 2017  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   6445c:  lea    0x1(%rax),%rdx
         : 2019  ./stdio-common/vfscanf-internal.c:2472 (discriminator 21)
    0.00 :   64460:  mov    -0x6d0(%rbp),%rsi
    0.00 :   64467:  mov    -0x670(%rbp),%rdi
    0.00 :   6446e:  mov    %rdx,(%rsi)
    0.00 :   64471:  mov    %rdi,0x10(%rsi,%rax,8)
    0.00 :   64476:  movq   $0x64,-0x698(%rbp)
         : 2025  ./stdio-common/vfscanf-internal.c:2474 (discriminator 33)
    0.00 :   64481:  cmpb   $0x5e,0x1(%r12)
         : 2027  ./stdio-common/vfscanf-internal.c:2480 (discriminator 33)
    0.00 :   64487:  movb   $0x0,-0x648(%rbp)
         : 2029  ./stdio-common/vfscanf-internal.c:2474 (discriminator 33)
    0.00 :   6448e:  jne    644a3 <__vfscanf_internal+0x1ac3>
         : 2031  ./stdio-common/vfscanf-internal.c:2476
    0.00 :   64490:  lea    0x2(%r12),%rax
         : 2033  ./stdio-common/vfscanf-internal.c:2477
    0.00 :   64495:  movb   $0x1,-0x648(%rbp)
         : 2035  ./stdio-common/vfscanf-internal.c:2476
    0.00 :   6449c:  mov    %rax,-0x618(%rbp)
         : 2037  scratch_buffer_set_array_size():
         : 2038  ./stdio-common/../include/scratch_buffer.h:131
    0.00 :   644a3:  lea    -0x460(%rbp),%rdi
    0.00 :   644aa:  mov    $0x1,%edx
    0.00 :   644af:  mov    $0x100,%esi
    0.00 :   644b4:  call   a7ba0 <__libc_scratch_buffer_set_array_size>
         : 2043  __vfscanf_internal():
         : 2044  ./stdio-common/vfscanf-internal.c:2502
    0.00 :   644b9:  test   %al,%al
    0.00 :   644bb:  je     6792d <__vfscanf_internal+0x4f4d>
         : 2047  ./stdio-common/vfscanf-internal.c:2508
    0.00 :   644c1:  mov    -0x460(%rbp),%rax
    0.00 :   644c8:  lea    0x8(%rax),%rdi
    0.00 :   644cc:  movq   $0x0,(%rax)
    0.00 :   644d3:  movq   $0x0,0xf8(%rax)
    0.00 :   644de:  and    $0xfffffffffffffff8,%rdi
    0.00 :   644e2:  sub    %rdi,%rax
    0.00 :   644e5:  mov    %rax,%rcx
    0.00 :   644e8:  xor    %eax,%eax
    0.00 :   644ea:  add    $0x100,%ecx
    0.00 :   644f0:  shr    $0x3,%ecx
    0.00 :   644f3:  rep stos %rax,%es:(%rdi)
         : 2059  ./stdio-common/vfscanf-internal.c:2510
    0.00 :   644f6:  mov    -0x618(%rbp),%rax
    0.00 :   644fd:  movzbl (%rax),%eax
         : 2062  ./stdio-common/vfscanf-internal.c:2511
    0.00 :   64500:  cmp    $0x5d,%al
    0.00 :   64502:  je     660a8 <__vfscanf_internal+0x36c8>
    0.00 :   64508:  cmp    $0x2d,%al
    0.00 :   6450a:  je     660a8 <__vfscanf_internal+0x36c8>
         : 2067  ./stdio-common/vfscanf-internal.c:2520
    0.00 :   64510:  mov    -0x618(%rbp),%rdx
    0.00 :   64517:  add    $0x1,%rdx
    0.00 :   6451b:  test   %al,%al
    0.00 :   6451d:  jne    64542 <__vfscanf_internal+0x1b62>
    0.00 :   6451f:  jmp    67925 <__vfscanf_internal+0x4f45>
    0.00 :   64524:  nopl   0x0(%rax)
         : 2074  ./stdio-common/vfscanf-internal.c:2530
    0.00 :   64528:  mov    -0x460(%rbp),%rcx
    0.00 :   6452f:  movb   $0x1,(%rcx,%rax,1)
         : 2077  ./stdio-common/vfscanf-internal.c:2520
    0.00 :   64533:  movzbl (%rdx),%eax
    0.00 :   64536:  test   %al,%al
    0.00 :   64538:  je     660ce <__vfscanf_internal+0x36ee>
    0.00 :   6453e:  add    $0x1,%rdx
         : 2082  ./stdio-common/vfscanf-internal.c:2520 (discriminator 1)
    0.00 :   64542:  cmp    $0x5d,%al
    0.00 :   64544:  je     65cd0 <__vfscanf_internal+0x32f0>
         : 2085  ./stdio-common/vfscanf-internal.c:2521
    0.00 :   6454a:  cmp    $0x2d,%al
    0.00 :   6454c:  jne    64528 <__vfscanf_internal+0x1b48>
         : 2088  ./stdio-common/vfscanf-internal.c:2521 (discriminator 1)
    0.00 :   6454e:  movzbl (%rdx),%ecx
    0.00 :   64551:  test   %cl,%cl
    0.00 :   64553:  je     64528 <__vfscanf_internal+0x1b48>
    0.00 :   64555:  cmp    $0x5d,%cl
    0.00 :   64558:  je     64528 <__vfscanf_internal+0x1b48>
         : 2094  ./stdio-common/vfscanf-internal.c:2521 (discriminator 3)
    0.00 :   6455a:  movzbl -0x2(%rdx),%esi
    0.00 :   6455e:  cmp    %sil,%cl
    0.00 :   64561:  jb     64528 <__vfscanf_internal+0x1b48>
         : 2098  ./stdio-common/vfscanf-internal.c:2525
    0.00 :   64563:  jbe    68a50 <__vfscanf_internal+0x6070>
         : 2100  ./stdio-common/vfscanf-internal.c:2526 (discriminator 3)
    0.00 :   64569:  mov    -0x460(%rbp),%rcx
    0.00 :   64570:  movzbl %sil,%eax
         : 2103  ./stdio-common/vfscanf-internal.c:2525 (discriminator 3)
    0.00 :   64574:  add    $0x1,%esi
         : 2105  ./stdio-common/vfscanf-internal.c:2526 (discriminator 3)
    0.00 :   64577:  movb   $0x1,(%rcx,%rax,1)
         : 2107  ./stdio-common/vfscanf-internal.c:2525 (discriminator 3)
    0.00 :   6457b:  movzbl (%rdx),%eax
    0.00 :   6457e:  cmp    %sil,%al
    0.00 :   64581:  ja     64569 <__vfscanf_internal+0x1b89>
    0.00 :   64583:  jmp    64536 <__vfscanf_internal+0x1b56>
         : 2112  ./stdio-common/vfscanf-internal.c:637
    0.00 :   64585:  mov    %r14,-0x620(%rbp)
         : 2114  ./stdio-common/vfscanf-internal.c:1390
    0.00 :   6458c:  orl    $0x40,-0x63c(%rbp)
         : 2116  ./stdio-common/vfscanf-internal.c:1389
    0.00 :   64593:  movl   $0xa,-0x610(%rbp)
         : 2118  ./stdio-common/vfscanf-internal.c:1391
    0.00 :   6459d:  jmp    63dfc <__vfscanf_internal+0x141c>
    0.00 :   645a2:  mov    %r15,%r14
         : 2121  ./stdio-common/vfscanf-internal.c:1912 (discriminator 1)
    0.00 :   645a5:  mov    -0x600(%rbp),%eax
    0.00 :   645ab:  mov    %eax,%fs:(%r10)
         : 2124  ./stdio-common/vfscanf-internal.c:1916
    0.00 :   645af:  mov    -0x640(%rbp),%edi
    0.00 :   645b5:  mov    $0xffffffff,%eax
    0.00 :   645ba:  test   %edi,%edi
    0.00 :   645bc:  cmovne %edi,%eax
    0.00 :   645bf:  mov    %eax,-0x640(%rbp)
    0.00 :   645c5:  jmp    63108 <__vfscanf_internal+0x728>
         : 2131  ./stdio-common/vfscanf-internal.c:637
    0.00 :   645ca:  mov    %r14,-0x620(%rbp)
         : 2133  ./stdio-common/vfscanf-internal.c:1395
    0.00 :   645d1:  orl    $0x40,-0x63c(%rbp)
         : 2135  ./stdio-common/vfscanf-internal.c:1394
    0.00 :   645d8:  movl   $0x0,-0x610(%rbp)
    0.00 :   645e2:  jmp    63dfc <__vfscanf_internal+0x141c>
         : 2138  read_int():
         : 2139  ./stdio-common/vfscanf-internal.c:1394
    0.00 :   645e7:  mov    %rax,%r12
         : 2141  ./stdio-common/printf-parse.h:78
    0.00 :   645ea:  mov    %rdx,%rax
    0.00 :   645ed:  jmp    62db5 <__vfscanf_internal+0x3d5>
    0.00 :   645f2:  nopw   0x0(%rax,%rax,1)
         : 2145  __vfscanf_internal():
         : 2146  ./stdio-common/vfscanf-internal.c:1801 (discriminator 1)
    0.00 :   645f8:  mov    0x1b5811(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   645ff:  mov    -0x600(%rbp),%eax
    0.00 :   64605:  mov    %r14d,-0x638(%rbp)
    0.00 :   6460c:  mov    %r12,%r15
    0.00 :   6460f:  mov    %r13,%r14
    0.00 :   64612:  mov    %eax,%fs:(%r10)
         : 2153  ./stdio-common/vfscanf-internal.c:1733
    0.00 :   64616:  mov    -0x470(%rbp),%rsi
         : 2155  ./stdio-common/vfscanf-internal.c:1428
    0.00 :   6461d:  mov    $0xffffffff,%r13d
    0.00 :   64623:  jmp    6404d <__vfscanf_internal+0x166d>
    0.00 :   64628:  nopl   0x0(%rax,%rax,1)
         : 2159  ./stdio-common/vfscanf-internal.c:1742
    0.00 :   64630:  cmpl   $0xa,-0x610(%rbp)
    0.00 :   64637:  jne    65c78 <__vfscanf_internal+0x3298>
         : 2162  ./stdio-common/vfscanf-internal.c:1742 (discriminator 1)
    0.00 :   6463d:  mov    -0x650(%rbp),%eax
    0.00 :   64643:  test   %eax,%eax
    0.00 :   64645:  je     64036 <__vfscanf_internal+0x1656>
         : 2166  ./stdio-common/vfscanf-internal.c:1752
    0.00 :   6464b:  mov    -0x680(%rbp),%rdx
         : 2168  ./stdio-common/vfscanf-internal.c:1750
    0.00 :   64652:  test   %r14d,%r14d
    0.00 :   64655:  mov    $0x7fffffff,%r8d
    0.00 :   6465b:  cmovg  %r14d,%r8d
         : 2172  ./stdio-common/vfscanf-internal.c:1752
    0.00 :   6465f:  movzbl (%rdx),%eax
    0.00 :   64662:  cmp    %eax,%r15d
    0.00 :   64665:  jne    647df <__vfscanf_internal+0x1dff>
    0.00 :   6466b:  mov    %r14d,-0x630(%rbp)
    0.00 :   64672:  mov    %r13,%rbx
    0.00 :   64675:  mov    %r8d,%r14d
    0.00 :   64678:  mov    %r12,%r13
    0.00 :   6467b:  mov    %rdx,%r12
    0.00 :   6467e:  jmp    646d6 <__vfscanf_internal+0x1cf6>
         : 2182  char_buffer_add():
         : 2183  ./stdio-common/vfscanf-internal.c:263
    0.00 :   64680:  lea    0x1(%rax),%rcx
    0.00 :   64684:  mov    %rcx,-0x470(%rbp)
    0.00 :   6468b:  mov    %r15b,(%rax)
         : 2187  __vfscanf_internal():
         : 2188  ./stdio-common/vfscanf-internal.c:1755
    0.00 :   6468e:  add    $0x1,%r12
    0.00 :   64692:  cmpb   $0x0,(%r12)
    0.00 :   64697:  je     64766 <__vfscanf_internal+0x1d86>
         : 2192  ./stdio-common/vfscanf-internal.c:1759
    0.00 :   6469d:  test   %r14d,%r14d
    0.00 :   646a0:  je     648ac <__vfscanf_internal+0x1ecc>
         : 2195  ./stdio-common/vfscanf-internal.c:1759 (discriminator 3)
    0.00 :   646a6:  mov    0x8(%r13),%rax
    0.00 :   646aa:  cmp    0x10(%r13),%rax
    0.00 :   646ae:  jae    647a8 <__vfscanf_internal+0x1dc8>
         : 2199  ./stdio-common/vfscanf-internal.c:1759 (discriminator 5)
    0.00 :   646b4:  lea    0x1(%rax),%rcx
    0.00 :   646b8:  mov    %rcx,0x8(%r13)
    0.00 :   646bc:  movzbl (%rax),%r15d
         : 2203  ./stdio-common/vfscanf-internal.c:1752 (discriminator 8)
    0.00 :   646c0:  movzbl (%r12),%eax
         : 2205  ./stdio-common/vfscanf-internal.c:1759 (discriminator 8)
    0.00 :   646c5:  add    $0x1,%rbx
         : 2207  ./stdio-common/vfscanf-internal.c:1761 (discriminator 8)
    0.00 :   646c9:  sub    $0x1,%r14d
         : 2209  ./stdio-common/vfscanf-internal.c:1752 (discriminator 8)
    0.00 :   646cd:  cmp    %r15d,%eax
    0.00 :   646d0:  jne    648dc <__vfscanf_internal+0x1efc>
         : 2212  char_buffer_add():
         : 2213  ./stdio-common/vfscanf-internal.c:260
    0.00 :   646d6:  mov    -0x470(%rbp),%rax
         : 2215  __vfscanf_internal():
         : 2216  ./stdio-common/vfscanf-internal.c:1754
    0.00 :   646dd:  mov    %r15d,%r11d
         : 2218  char_buffer_add():
         : 2219  ./stdio-common/vfscanf-internal.c:260
    0.00 :   646e0:  cmp    -0x468(%rbp),%rax
    0.00 :   646e7:  jne    64680 <__vfscanf_internal+0x1ca0>
    0.00 :   646e9:  mov    %r15b,-0x620(%rbp)
         : 2223  char_buffer_add_slow():
         : 2224  ./stdio-common/vfscanf-internal.c:238
    0.00 :   646f0:  test   %rax,%rax
    0.00 :   646f3:  je     6519c <__vfscanf_internal+0x27bc>
         : 2227  scratch_buffer_grow_preserve():
         : 2228  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   646f9:  mov    -0x648(%rbp),%rdi
         : 2230  char_buffer_add_slow():
         : 2231  ./stdio-common/vfscanf-internal.c:240
    0.00 :   64700:  sub    -0x460(%rbp),%rax
    0.00 :   64707:  mov    %rax,-0x638(%rbp)
         : 2234  scratch_buffer_grow_preserve():
         : 2235  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6470e:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 2237  char_buffer_add_slow():
         : 2238  ./stdio-common/vfscanf-internal.c:241
    0.00 :   64713:  movzbl -0x620(%rbp),%r11d
    0.00 :   6471b:  test   %al,%al
    0.00 :   6471d:  je     651e5 <__vfscanf_internal+0x2805>
         : 2242  char_buffer_start():
         : 2243  ./stdio-common/vfscanf-internal.c:206
    0.00 :   64723:  mov    -0x460(%rbp),%rcx
         : 2245  char_buffer_add_slow():
         : 2246  ./stdio-common/vfscanf-internal.c:248
    0.00 :   6472a:  mov    -0x638(%rbp),%rax
         : 2248  __vfscanf_internal():
         : 2249  ./stdio-common/vfscanf-internal.c:1755
    0.00 :   64731:  add    $0x1,%r12
         : 2251  char_buffer_add_slow():
         : 2252  ./stdio-common/vfscanf-internal.c:248
    0.00 :   64735:  add    %rcx,%rax
         : 2254  char_buffer_rewind():
         : 2255  ./stdio-common/vfscanf-internal.c:223
    0.00 :   64738:  add    -0x458(%rbp),%rcx
         : 2257  char_buffer_add_slow():
         : 2258  ./stdio-common/vfscanf-internal.c:249
    0.00 :   6473f:  lea    0x1(%rax),%rsi
    0.00 :   64743:  movq   %rcx,%xmm4
    0.00 :   64748:  movq   %rsi,%xmm0
    0.00 :   6474d:  punpcklqdq %xmm4,%xmm0
    0.00 :   64751:  movaps %xmm0,-0x470(%rbp)
    0.00 :   64758:  mov    %r15b,(%rax)
         : 2265  __vfscanf_internal():
         : 2266  ./stdio-common/vfscanf-internal.c:1755
    0.00 :   6475b:  cmpb   $0x0,(%r12)
    0.00 :   64760:  jne    6469d <__vfscanf_internal+0x1cbd>
         : 2269  char_buffer_error():
         : 2270  ./stdio-common/vfscanf-internal.c:231
    0.00 :   64766:  mov    -0x470(%rbp),%rsi
    0.00 :   6476d:  mov    %r14d,%r8d
    0.00 :   64770:  mov    %r13,%r12
    0.00 :   64773:  mov    %rbx,%r13
    0.00 :   64776:  mov    -0x630(%rbp),%r14d
         : 2276  __vfscanf_internal():
         : 2277  ./stdio-common/vfscanf-internal.c:1765
    0.00 :   6477d:  test   %rsi,%rsi
    0.00 :   64780:  jne    647f7 <__vfscanf_internal+0x1e17>
    0.00 :   64782:  mov    %r12,%r14
         : 2281  ./stdio-common/vfscanf-internal.c:1767
    0.00 :   64785:  mov    0x1b5684(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6478c:  movl   $0xc,%fs:(%rax)
         : 2284  ./stdio-common/vfscanf-internal.c:1768
    0.00 :   64793:  movl   $0xffffffff,-0x640(%rbp)
         : 2286  ./stdio-common/vfscanf-internal.c:1769
    0.00 :   6479d:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   647a2:  nopw   0x0(%rax,%rax,1)
         : 2289  ./stdio-common/vfscanf-internal.c:1759 (discriminator 4)
    0.00 :   647a8:  mov    %r13,%rdi
    0.00 :   647ab:  call   8da40 <__uflow>
    0.00 :   647b0:  mov    %eax,%r15d
    0.00 :   647b3:  cmp    $0xffffffff,%eax
    0.00 :   647b6:  jne    646c0 <__vfscanf_internal+0x1ce0>
         : 2295  ./stdio-common/vfscanf-internal.c:1759 (discriminator 9)
    0.00 :   647bc:  mov    0x1b564d(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   647c3:  mov    %r14d,%r8d
    0.00 :   647c6:  mov    %r12,%rdx
    0.00 :   647c9:  mov    %r13,%r12
    0.00 :   647cc:  mov    -0x630(%rbp),%r14d
    0.00 :   647d3:  mov    %rbx,%r13
    0.00 :   647d6:  mov    %fs:(%rax),%eax
    0.00 :   647d9:  mov    %eax,-0x600(%rbp)
         : 2304  char_buffer_error():
         : 2305  ./stdio-common/vfscanf-internal.c:231
    0.00 :   647df:  mov    -0x470(%rbp),%rsi
         : 2307  __vfscanf_internal():
         : 2308  ./stdio-common/vfscanf-internal.c:1765
    0.00 :   647e6:  test   %rsi,%rsi
    0.00 :   647e9:  je     64782 <__vfscanf_internal+0x1da2>
         : 2311  ./stdio-common/vfscanf-internal.c:1772
    0.00 :   647eb:  cmpb   $0x0,(%rdx)
    0.00 :   647ee:  jne    6a61b <__vfscanf_internal+0x7c3b>
         : 2314  ./stdio-common/vfscanf-internal.c:1797
    0.00 :   647f4:  mov    %r15d,%r11d
         : 2316  char_buffer_add():
         : 2317  ./stdio-common/vfscanf-internal.c:260
    0.00 :   647f7:  mov    -0x468(%rbp),%rbx
         : 2319  __vfscanf_internal():
         : 2320  ./stdio-common/vfscanf-internal.c:1786
    0.00 :   647fe:  test   %r14d,%r14d
         : 2322  ./stdio-common/vfscanf-internal.c:1791
    0.00 :   64801:  lea    -0x1(%rsi),%rax
    0.00 :   64805:  mov    %rax,-0x470(%rbp)
         : 2325  ./stdio-common/vfscanf-internal.c:1786
    0.00 :   6480c:  cmovg  %r8d,%r14d
         : 2327  char_buffer_add():
         : 2328  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64810:  cmp    %rbx,%rax
    0.00 :   64813:  jne    63fcb <__vfscanf_internal+0x15eb>
         : 2331  scratch_buffer_grow_preserve():
         : 2332  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   64819:  mov    -0x648(%rbp),%rdi
    0.00 :   64820:  mov    %r11b,-0x630(%rbp)
         : 2335  char_buffer_add_slow():
         : 2336  ./stdio-common/vfscanf-internal.c:240
    0.00 :   64827:  sub    -0x460(%rbp),%rbx
         : 2338  scratch_buffer_grow_preserve():
         : 2339  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6482e:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 2341  char_buffer_add_slow():
         : 2342  ./stdio-common/vfscanf-internal.c:241
    0.00 :   64833:  movzbl -0x630(%rbp),%r11d
    0.00 :   6483b:  test   %al,%al
    0.00 :   6483d:  je     659b0 <__vfscanf_internal+0x2fd0>
         : 2346  char_buffer_start():
         : 2347  ./stdio-common/vfscanf-internal.c:206
    0.00 :   64843:  mov    -0x460(%rbp),%rax
         : 2349  char_buffer_add_slow():
         : 2350  ./stdio-common/vfscanf-internal.c:248
    0.00 :   6484a:  add    %rax,%rbx
         : 2352  char_buffer_rewind():
         : 2353  ./stdio-common/vfscanf-internal.c:223
    0.00 :   6484d:  add    -0x458(%rbp),%rax
         : 2355  char_buffer_add_slow():
         : 2356  ./stdio-common/vfscanf-internal.c:249
    0.00 :   64854:  lea    0x1(%rbx),%rsi
    0.00 :   64858:  movq   %rax,%xmm5
    0.00 :   6485d:  movq   %rsi,%xmm0
    0.00 :   64862:  punpcklqdq %xmm5,%xmm0
    0.00 :   64866:  movaps %xmm0,-0x470(%rbp)
    0.00 :   6486d:  mov    %r11b,(%rbx)
    0.00 :   64870:  jmp    63fd5 <__vfscanf_internal+0x15f5>
         : 2364  __vfscanf_internal():
         : 2365  ./stdio-common/vfscanf-internal.c:1801 (discriminator 4)
    0.00 :   64875:  mov    %r12,%rdi
    0.00 :   64878:  call   8da40 <__uflow>
    0.00 :   6487d:  mov    %eax,%r15d
    0.00 :   64880:  cmp    $0xffffffff,%eax
    0.00 :   64883:  jne    64007 <__vfscanf_internal+0x1627>
         : 2371  ./stdio-common/vfscanf-internal.c:1801 (discriminator 9)
    0.00 :   64889:  mov    0x1b5580(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   64890:  mov    %r14d,-0x638(%rbp)
    0.00 :   64897:  mov    %r12,%r15
    0.00 :   6489a:  mov    %r13,%r14
    0.00 :   6489d:  mov    %fs:(%r10),%eax
    0.00 :   648a1:  mov    %eax,-0x600(%rbp)
    0.00 :   648a7:  jmp    64616 <__vfscanf_internal+0x1c36>
         : 2379  char_buffer_error():
         : 2380  ./stdio-common/vfscanf-internal.c:231
    0.00 :   648ac:  mov    -0x630(%rbp),%eax
    0.00 :   648b2:  mov    -0x470(%rbp),%rsi
    0.00 :   648b9:  mov    %rbx,%r14
    0.00 :   648bc:  mov    %eax,-0x638(%rbp)
    0.00 :   648c2:  mov    %r13,%rax
    0.00 :   648c5:  mov    %r15d,%r13d
    0.00 :   648c8:  mov    %rax,%r15
         : 2388  __vfscanf_internal():
         : 2389  ./stdio-common/vfscanf-internal.c:1765
    0.00 :   648cb:  test   %rsi,%rsi
    0.00 :   648ce:  jne    66148 <__vfscanf_internal+0x3768>
    0.00 :   648d4:  mov    %r15,%r14
    0.00 :   648d7:  jmp    64785 <__vfscanf_internal+0x1da5>
    0.00 :   648dc:  mov    %r14d,%r8d
    0.00 :   648df:  mov    %r12,%rdx
    0.00 :   648e2:  mov    -0x630(%rbp),%r14d
    0.00 :   648e9:  mov    %r13,%r12
    0.00 :   648ec:  mov    %rbx,%r13
    0.00 :   648ef:  jmp    647df <__vfscanf_internal+0x1dff>
         : 2400  char_buffer_add_slow():
         : 2401  ./stdio-common/vfscanf-internal.c:238
    0.00 :   648f4:  test   %rbx,%rbx
    0.00 :   648f7:  jne    64819 <__vfscanf_internal+0x1e39>
    0.00 :   648fd:  jmp    63fd5 <__vfscanf_internal+0x15f5>
         : 2405  __vfscanf_internal():
         : 2406  ./stdio-common/vfscanf-internal.c:238
    0.00 :   64902:  fstp   %st(0)
         : 2408  ./stdio-common/vfscanf-internal.c:2461
    0.00 :   64904:  mov    -0x5e8(%rbp),%rax
    0.00 :   6490b:  cmp    %rax,-0x460(%rbp)
    0.00 :   64912:  je     695c6 <__vfscanf_internal+0x6be6>
    0.00 :   64918:  movl   $0x0,-0x610(%rbp)
    0.00 :   64922:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 2414  ./stdio-common/vfscanf-internal.c:1408 (discriminator 4)
    0.00 :   64927:  mov    %r15,%rdi
    0.00 :   6492a:  call   8da40 <__uflow>
    0.00 :   6492f:  mov    %eax,%r13d
    0.00 :   64932:  cmp    $0xffffffff,%eax
    0.00 :   64935:  jne    63e88 <__vfscanf_internal+0x14a8>
         : 2420  ./stdio-common/vfscanf-internal.c:1408 (discriminator 9)
    0.00 :   6493b:  mov    0x1b54ce(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   64942:  xor    %ecx,%ecx
    0.00 :   64944:  mov    %fs:(%r10),%eax
    0.00 :   64948:  mov    %eax,-0x600(%rbp)
         : 2425  ./stdio-common/vfscanf-internal.c:1435
    0.00 :   6494e:  mov    -0x610(%rbp),%edi
    0.00 :   64954:  test   %edi,%edi
    0.00 :   64956:  jne    6518a <__vfscanf_internal+0x27aa>
    0.00 :   6495c:  movl   $0xa,-0x610(%rbp)
         : 2430  ./stdio-common/vfscanf-internal.c:1438 (discriminator 1)
    0.00 :   64966:  testl  $0x400,-0x63c(%rbp)
    0.00 :   64970:  je     63f4c <__vfscanf_internal+0x156c>
         : 2433  ./stdio-common/vfscanf-internal.c:1453
    0.00 :   64976:  lea    0x173ea5(%rip),%rdi        # 1d8822 <not_available+0x2c4>
    0.00 :   6497d:  mov    %cl,-0x630(%rbp)
    0.00 :   64983:  call   12a560 <wctrans>
         : 2437  ./stdio-common/vfscanf-internal.c:1461
    0.00 :   64988:  mov    -0x678(%rbp),%rsi
         : 2439  ./stdio-common/vfscanf-internal.c:1465
    0.00 :   6498f:  movzbl -0x630(%rbp),%ecx
         : 2441  ./stdio-common/vfscanf-internal.c:1453
    0.00 :   64996:  mov    %rax,-0x6a0(%rbp)
         : 2443  ./stdio-common/vfscanf-internal.c:1461
    0.00 :   6499d:  mov    0xd8(%rsi),%edi
    0.00 :   649a3:  mov    %edi,-0x610(%rbp)
    0.00 :   649a9:  sub    $0x1,%edi
         : 2447  ./stdio-common/vfscanf-internal.c:1465
    0.00 :   649ac:  test   %rax,%rax
         : 2449  ./stdio-common/vfscanf-internal.c:1461
    0.00 :   649af:  mov    %edi,-0x6e8(%rbp)
         : 2451  ./stdio-common/vfscanf-internal.c:1465
    0.00 :   649b5:  jne    67f4d <__vfscanf_internal+0x556d>
         : 2453  ./stdio-common/vfscanf-internal.c:1669
    0.00 :   649bb:  mov    -0x63c(%rbp),%eax
    0.00 :   649c1:  mov    %r15,%r12
    0.00 :   649c4:  movl   $0x0,-0x688(%rbp)
    0.00 :   649ce:  and    $0x80,%eax
    0.00 :   649d3:  mov    %eax,-0x6f0(%rbp)
    0.00 :   649d9:  lea    -0x590(%rbp),%rax
    0.00 :   649e0:  mov    %rax,-0x650(%rbp)
         : 2461  ./stdio-common/vfscanf-internal.c:1525
    0.00 :   649e7:  test   %cl,%cl
    0.00 :   649e9:  je     6a28b <__vfscanf_internal+0x78ab>
    0.00 :   649ef:  nop
    0.00 :   649f0:  mov    -0x638(%rbp),%eax
    0.00 :   649f6:  mov    $0x7fffffff,%esi
         : 2467  ./stdio-common/vfscanf-internal.c:1669
    0.00 :   649fb:  mov    %r12,%r15
    0.00 :   649fe:  mov    %r13d,%r12d
    0.00 :   64a01:  movq   $0x0,-0x630(%rbp)
    0.00 :   64a0c:  test   %eax,%eax
    0.00 :   64a0e:  cmovg  %eax,%esi
    0.00 :   64a11:  mov    -0x650(%rbp),%rax
    0.00 :   64a18:  mov    %esi,-0x668(%rbp)
    0.00 :   64a1e:  mov    %rax,-0x648(%rbp)
    0.00 :   64a25:  nopl   (%rax)
    0.00 :   64a28:  mov    -0x630(%rbp),%eax
         : 2478  ./stdio-common/vfscanf-internal.c:1561
    0.00 :   64a2e:  cmpq   $0x0,-0x6a0(%rbp)
    0.00 :   64a36:  mov    %eax,-0x660(%rbp)
    0.00 :   64a3c:  jne    65050 <__vfscanf_internal+0x2670>
         : 2482  ./stdio-common/vfscanf-internal.c:1565
    0.00 :   64a42:  mov    -0x678(%rbp),%rax
    0.00 :   64a49:  mov    -0x630(%rbp),%rdi
    0.00 :   64a50:  mov    0xe0(%rax,%rdi,8),%r13
    0.00 :   64a58:  mov    -0x648(%rbp),%rax
         : 2487  ./stdio-common/vfscanf-internal.c:1567 (discriminator 1)
    0.00 :   64a5f:  mov    -0x688(%rbp),%esi
    0.00 :   64a65:  mov    %r13,(%rax)
    0.00 :   64a68:  test   %esi,%esi
    0.00 :   64a6a:  je     64ab0 <__vfscanf_internal+0x20d0>
         : 2492  ./stdio-common/vfscanf-internal.c:1567
    0.00 :   64a6c:  xor    %ebx,%ebx
    0.00 :   64a6e:  mov    %r14,-0x610(%rbp)
    0.00 :   64a75:  mov    %r12d,-0x620(%rbp)
    0.00 :   64a7c:  mov    %ebx,%r14d
    0.00 :   64a7f:  mov    %rax,%r12
    0.00 :   64a82:  mov    %esi,%ebx
    0.00 :   64a84:  nopl   0x0(%rax)
         : 2500  ./stdio-common/vfscanf-internal.c:1568 (discriminator 3)
    0.00 :   64a88:  mov    %r13,%rdi
         : 2502  ./stdio-common/vfscanf-internal.c:1567 (discriminator 3)
    0.00 :   64a8b:  add    $0x1,%r14d
         : 2504  ./stdio-common/vfscanf-internal.c:1568 (discriminator 3)
    0.00 :   64a8f:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   64a94:  lea    0x1(%r13,%rax,1),%r13
    0.00 :   64a99:  mov    %r13,(%r12)
         : 2508  ./stdio-common/vfscanf-internal.c:1567 (discriminator 3)
    0.00 :   64a9d:  cmp    %r14d,%ebx
    0.00 :   64aa0:  jne    64a88 <__vfscanf_internal+0x20a8>
    0.00 :   64aa2:  mov    -0x610(%rbp),%r14
    0.00 :   64aa9:  mov    -0x620(%rbp),%r12d
         : 2513  ./stdio-common/vfscanf-internal.c:1571
    0.00 :   64ab0:  movzbl 0x0(%r13),%edx
    0.00 :   64ab5:  cmp    %r12d,%edx
    0.00 :   64ab8:  jne    651f5 <__vfscanf_internal+0x2815>
         : 2517  ./stdio-common/vfscanf-internal.c:1559
    0.00 :   64abe:  mov    -0x668(%rbp),%r10d
         : 2519  ./stdio-common/vfscanf-internal.c:1571
    0.00 :   64ac5:  mov    %r13,-0x620(%rbp)
    0.00 :   64acc:  mov    %r13,%rbx
    0.00 :   64acf:  mov    %r14,%r13
    0.00 :   64ad2:  mov    %r10d,%r14d
    0.00 :   64ad5:  jmp    64b00 <__vfscanf_internal+0x2120>
    0.00 :   64ad7:  nopw   0x0(%rax,%rax,1)
         : 2526  ./stdio-common/vfscanf-internal.c:1577 (discriminator 5)
    0.00 :   64ae0:  lea    0x1(%rax),%rcx
    0.00 :   64ae4:  mov    %rcx,0x8(%r15)
    0.00 :   64ae8:  movzbl (%rax),%r12d
         : 2530  ./stdio-common/vfscanf-internal.c:1571 (discriminator 8)
    0.00 :   64aec:  movzbl (%rbx),%eax
         : 2532  ./stdio-common/vfscanf-internal.c:1577 (discriminator 8)
    0.00 :   64aef:  add    $0x1,%r13
         : 2534  ./stdio-common/vfscanf-internal.c:1579 (discriminator 8)
    0.00 :   64af3:  sub    $0x1,%r14d
         : 2536  ./stdio-common/vfscanf-internal.c:1571 (discriminator 8)
    0.00 :   64af7:  cmp    %r12d,%eax
    0.00 :   64afa:  jne    65030 <__vfscanf_internal+0x2650>
         : 2539  ./stdio-common/vfscanf-internal.c:1573
    0.00 :   64b00:  mov    %rbx,%r9
    0.00 :   64b03:  add    $0x1,%rbx
    0.00 :   64b07:  cmpb   $0x0,(%rbx)
    0.00 :   64b0a:  je     64fb0 <__vfscanf_internal+0x25d0>
         : 2544  ./stdio-common/vfscanf-internal.c:1577
    0.00 :   64b10:  test   %r14d,%r14d
    0.00 :   64b13:  je     64fc0 <__vfscanf_internal+0x25e0>
         : 2547  ./stdio-common/vfscanf-internal.c:1577 (discriminator 3)
    0.00 :   64b19:  mov    0x8(%r15),%rax
    0.00 :   64b1d:  cmp    0x10(%r15),%rax
    0.00 :   64b21:  jb     64ae0 <__vfscanf_internal+0x2100>
         : 2551  ./stdio-common/vfscanf-internal.c:1577 (discriminator 4)
    0.00 :   64b23:  mov    %r15,%rdi
    0.00 :   64b26:  mov    %r9,-0x610(%rbp)
    0.00 :   64b2d:  call   8da40 <__uflow>
    0.00 :   64b32:  mov    -0x610(%rbp),%r9
    0.00 :   64b39:  cmp    $0xffffffff,%eax
    0.00 :   64b3c:  mov    %eax,%r12d
    0.00 :   64b3f:  jne    64aec <__vfscanf_internal+0x210c>
         : 2559  ./stdio-common/vfscanf-internal.c:1577 (discriminator 9)
    0.00 :   64b41:  mov    0x1b52c8(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   64b48:  mov    %r14d,%r10d
    0.00 :   64b4b:  mov    %r13,%r14
    0.00 :   64b4e:  mov    %rbx,%rdx
    0.00 :   64b51:  mov    -0x620(%rbp),%r13
    0.00 :   64b58:  mov    %fs:(%rax),%eax
    0.00 :   64b5b:  mov    %eax,-0x600(%rbp)
         : 2567  ./stdio-common/vfscanf-internal.c:1583
    0.00 :   64b61:  cmpb   $0x0,(%rdx)
    0.00 :   64b64:  je     694ce <__vfscanf_internal+0x6aee>
         : 2570  ./stdio-common/vfscanf-internal.c:1592
    0.00 :   64b6a:  cmp    %r13,%rdx
    0.00 :   64b6d:  ja     65048 <__vfscanf_internal+0x2668>
         : 2573  ./stdio-common/vfscanf-internal.c:1601 (discriminator 2)
    0.00 :   64b73:  mov    %r13,%rdi
    0.00 :   64b76:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   64b7b:  mov    -0x648(%rbp),%rdi
         : 2577  ./stdio-common/vfscanf-internal.c:1529 (discriminator 2)
    0.00 :   64b82:  addq   $0x1,-0x630(%rbp)
         : 2579  ./stdio-common/vfscanf-internal.c:1601 (discriminator 2)
    0.00 :   64b8a:  lea    0x1(%r13,%rax,1),%rax
    0.00 :   64b8f:  mov    %rax,(%rdi)
         : 2582  ./stdio-common/vfscanf-internal.c:1529 (discriminator 2)
    0.00 :   64b92:  mov    -0x630(%rbp),%rax
    0.00 :   64b99:  add    $0x8,%rdi
    0.00 :   64b9d:  mov    %rdi,-0x648(%rbp)
    0.00 :   64ba4:  cmp    $0xa,%rax
    0.00 :   64ba8:  jne    64a28 <__vfscanf_internal+0x2048>
         : 2588  ./stdio-common/vfscanf-internal.c:1608
    0.00 :   64bae:  mov    -0x688(%rbp),%eax
    0.00 :   64bb4:  mov    %r12d,%r13d
    0.00 :   64bb7:  mov    %r15,%r12
    0.00 :   64bba:  add    $0x1,%eax
    0.00 :   64bbd:  mov    %eax,-0x648(%rbp)
    0.00 :   64bc3:  cmp    %eax,-0x6e8(%rbp)
    0.00 :   64bc9:  jl     64d20 <__vfscanf_internal+0x2340>
    0.00 :   64bcf:  mov    %r12,%r15
    0.00 :   64bd2:  mov    %r14,%r12
    0.00 :   64bd5:  mov    %r13d,%r14d
    0.00 :   64bd8:  nopl   0x0(%rax,%rax,1)
         : 2600  ./stdio-common/vfscanf-internal.c:1596
    0.00 :   64be0:  movq   $0x0,-0x620(%rbp)
    0.00 :   64beb:  mov    %r15,%r13
    0.00 :   64bee:  mov    %r14d,%r15d
    0.00 :   64bf1:  nopl   0x0(%rax)
    0.00 :   64bf8:  mov    -0x620(%rbp),%rax
         : 2606  ./stdio-common/vfscanf-internal.c:1623
    0.00 :   64bff:  mov    -0x650(%rbp),%rdi
    0.00 :   64c06:  mov    (%rdi,%rax,8),%rsi
    0.00 :   64c0a:  mov    %eax,-0x660(%rbp)
         : 2610  ./stdio-common/vfscanf-internal.c:1624
    0.00 :   64c10:  movzbl (%rsi),%edx
         : 2612  ./stdio-common/vfscanf-internal.c:1623
    0.00 :   64c13:  mov    %rsi,-0x630(%rbp)
         : 2614  ./stdio-common/vfscanf-internal.c:1624
    0.00 :   64c1a:  cmp    %r15d,%edx
    0.00 :   64c1d:  jne    6515a <__vfscanf_internal+0x277a>
         : 2617  ./stdio-common/vfscanf-internal.c:1621
    0.00 :   64c23:  mov    -0x668(%rbp),%r14d
         : 2619  ./stdio-common/vfscanf-internal.c:1624
    0.00 :   64c2a:  mov    %rsi,%rbx
    0.00 :   64c2d:  jmp    64c50 <__vfscanf_internal+0x2270>
    0.00 :   64c2f:  nop
         : 2623  ./stdio-common/vfscanf-internal.c:1630 (discriminator 5)
    0.00 :   64c30:  lea    0x1(%rax),%rdx
    0.00 :   64c34:  mov    %rdx,0x8(%r13)
    0.00 :   64c38:  movzbl (%rax),%r15d
         : 2627  ./stdio-common/vfscanf-internal.c:1624 (discriminator 8)
    0.00 :   64c3c:  movzbl (%rbx),%eax
         : 2629  ./stdio-common/vfscanf-internal.c:1630 (discriminator 8)
    0.00 :   64c3f:  add    $0x1,%r12
         : 2631  ./stdio-common/vfscanf-internal.c:1632 (discriminator 8)
    0.00 :   64c43:  sub    $0x1,%r14d
         : 2633  ./stdio-common/vfscanf-internal.c:1624 (discriminator 8)
    0.00 :   64c47:  cmp    %r15d,%eax
    0.00 :   64c4a:  jne    64f90 <__vfscanf_internal+0x25b0>
         : 2636  ./stdio-common/vfscanf-internal.c:1626
    0.00 :   64c50:  mov    %rbx,%rcx
    0.00 :   64c53:  add    $0x1,%rbx
    0.00 :   64c57:  cmpb   $0x0,(%rbx)
    0.00 :   64c5a:  je     64e50 <__vfscanf_internal+0x2470>
         : 2641  ./stdio-common/vfscanf-internal.c:1630
    0.00 :   64c60:  test   %r14d,%r14d
    0.00 :   64c63:  je     64f20 <__vfscanf_internal+0x2540>
         : 2644  ./stdio-common/vfscanf-internal.c:1630 (discriminator 3)
    0.00 :   64c69:  mov    0x8(%r13),%rax
    0.00 :   64c6d:  cmp    0x10(%r13),%rax
    0.00 :   64c71:  jb     64c30 <__vfscanf_internal+0x2250>
         : 2648  ./stdio-common/vfscanf-internal.c:1630 (discriminator 4)
    0.00 :   64c73:  mov    %r13,%rdi
    0.00 :   64c76:  mov    %rcx,-0x610(%rbp)
    0.00 :   64c7d:  call   8da40 <__uflow>
    0.00 :   64c82:  mov    -0x610(%rbp),%rcx
    0.00 :   64c89:  cmp    $0xffffffff,%eax
    0.00 :   64c8c:  mov    %eax,%r15d
    0.00 :   64c8f:  jne    64c3c <__vfscanf_internal+0x225c>
         : 2656  ./stdio-common/vfscanf-internal.c:1630 (discriminator 9)
    0.00 :   64c91:  mov    0x1b5178(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   64c98:  mov    %rbx,%rdx
    0.00 :   64c9b:  mov    %rcx,%rbx
    0.00 :   64c9e:  mov    %fs:(%rax),%eax
    0.00 :   64ca1:  mov    %eax,-0x600(%rbp)
         : 2662  ./stdio-common/vfscanf-internal.c:1636
    0.00 :   64ca7:  cmpb   $0x0,(%rdx)
    0.00 :   64caa:  je     64e50 <__vfscanf_internal+0x2470>
         : 2665  ./stdio-common/vfscanf-internal.c:1644
    0.00 :   64cb0:  cmp    %rdx,-0x630(%rbp)
    0.00 :   64cb7:  jb     64fa0 <__vfscanf_internal+0x25c0>
         : 2668  ./stdio-common/vfscanf-internal.c:1653 (discriminator 2)
    0.00 :   64cbd:  mov    -0x630(%rbp),%rbx
    0.00 :   64cc4:  mov    %rbx,%rdi
    0.00 :   64cc7:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   64ccc:  mov    -0x620(%rbp),%rdi
    0.00 :   64cd3:  mov    -0x650(%rbp),%rsi
    0.00 :   64cda:  lea    0x1(%rbx,%rax,1),%rax
    0.00 :   64cdf:  mov    %rax,(%rsi,%rdi,8)
         : 2676  ./stdio-common/vfscanf-internal.c:1611 (discriminator 2)
    0.00 :   64ce3:  add    $0x1,%rdi
    0.00 :   64ce7:  mov    %rdi,-0x620(%rbp)
    0.00 :   64cee:  cmp    $0xa,%rdi
    0.00 :   64cf2:  jne    64bf8 <__vfscanf_internal+0x2218>
         : 2681  ./stdio-common/vfscanf-internal.c:1608
    0.00 :   64cf8:  addl   $0x1,-0x648(%rbp)
    0.00 :   64cff:  mov    %r15d,%r14d
    0.00 :   64d02:  mov    -0x648(%rbp),%eax
    0.00 :   64d08:  mov    %r13,%r15
    0.00 :   64d0b:  cmp    %eax,-0x6e8(%rbp)
    0.00 :   64d11:  jge    64be0 <__vfscanf_internal+0x2200>
    0.00 :   64d17:  mov    %r14d,%r13d
    0.00 :   64d1a:  mov    %r12,%r14
    0.00 :   64d1d:  mov    %r15,%r12
         : 2691  ./stdio-common/vfscanf-internal.c:1669
    0.00 :   64d20:  mov    -0x6f0(%rbp),%eax
    0.00 :   64d26:  test   %eax,%eax
    0.00 :   64d28:  je     64f01 <__vfscanf_internal+0x2521>
         : 2695  ./stdio-common/vfscanf-internal.c:1677
    0.00 :   64d2e:  mov    -0x638(%rbp),%eax
         : 2697  ./stdio-common/vfscanf-internal.c:1679
    0.00 :   64d34:  mov    -0x680(%rbp),%r15
         : 2699  ./stdio-common/vfscanf-internal.c:1677
    0.00 :   64d3b:  mov    $0x7fffffff,%r10d
    0.00 :   64d41:  test   %eax,%eax
    0.00 :   64d43:  cmovg  %eax,%r10d
         : 2703  ./stdio-common/vfscanf-internal.c:1679
    0.00 :   64d47:  movzbl (%r15),%eax
    0.00 :   64d4b:  cmp    %r13d,%eax
    0.00 :   64d4e:  jne    6508b <__vfscanf_internal+0x26ab>
         : 2707  scratch_buffer_grow_preserve():
         : 2708  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   64d54:  lea    -0x460(%rbp),%rax
    0.00 :   64d5b:  mov    %r10d,%ebx
    0.00 :   64d5e:  mov    %rax,-0x630(%rbp)
    0.00 :   64d65:  jmp    64dc5 <__vfscanf_internal+0x23e5>
    0.00 :   64d67:  nopw   0x0(%rax,%rax,1)
         : 2714  char_buffer_add():
         : 2715  ./stdio-common/vfscanf-internal.c:263
    0.00 :   64d70:  lea    0x1(%rax),%rdx
    0.00 :   64d74:  mov    %rdx,-0x470(%rbp)
    0.00 :   64d7b:  mov    %r13b,(%rax)
         : 2719  __vfscanf_internal():
         : 2720  ./stdio-common/vfscanf-internal.c:1682
    0.00 :   64d7e:  add    $0x1,%r15
    0.00 :   64d82:  cmpb   $0x0,(%r15)
    0.00 :   64d86:  je     660d6 <__vfscanf_internal+0x36f6>
         : 2724  ./stdio-common/vfscanf-internal.c:1686
    0.00 :   64d8c:  test   %ebx,%ebx
    0.00 :   64d8e:  je     661ef <__vfscanf_internal+0x380f>
         : 2727  ./stdio-common/vfscanf-internal.c:1686 (discriminator 3)
    0.00 :   64d94:  mov    0x8(%r12),%rax
    0.00 :   64d99:  cmp    0x10(%r12),%rax
    0.00 :   64d9e:  jae    65064 <__vfscanf_internal+0x2684>
         : 2731  ./stdio-common/vfscanf-internal.c:1686 (discriminator 5)
    0.00 :   64da4:  lea    0x1(%rax),%rdx
    0.00 :   64da8:  mov    %rdx,0x8(%r12)
    0.00 :   64dad:  movzbl (%rax),%r13d
         : 2735  ./stdio-common/vfscanf-internal.c:1679 (discriminator 8)
    0.00 :   64db1:  movzbl (%r15),%eax
         : 2737  ./stdio-common/vfscanf-internal.c:1686 (discriminator 8)
    0.00 :   64db5:  add    $0x1,%r14
         : 2739  ./stdio-common/vfscanf-internal.c:1688 (discriminator 8)
    0.00 :   64db9:  sub    $0x1,%ebx
         : 2741  ./stdio-common/vfscanf-internal.c:1679 (discriminator 8)
    0.00 :   64dbc:  cmp    %r13d,%eax
    0.00 :   64dbf:  jne    66228 <__vfscanf_internal+0x3848>
         : 2744  char_buffer_add():
         : 2745  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64dc5:  mov    -0x470(%rbp),%rax
    0.00 :   64dcc:  mov    -0x468(%rbp),%rdx
         : 2748  __vfscanf_internal():
         : 2749  ./stdio-common/vfscanf-internal.c:1681
    0.00 :   64dd3:  mov    %r13d,%esi
         : 2751  char_buffer_add():
         : 2752  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64dd6:  cmp    %rax,%rdx
    0.00 :   64dd9:  jne    64d70 <__vfscanf_internal+0x2390>
    0.00 :   64ddb:  mov    %r13b,-0x620(%rbp)
         : 2756  char_buffer_add_slow():
         : 2757  ./stdio-common/vfscanf-internal.c:238
    0.00 :   64de2:  test   %rdx,%rdx
    0.00 :   64de5:  je     66f44 <__vfscanf_internal+0x4564>
         : 2760  scratch_buffer_grow_preserve():
         : 2761  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   64deb:  mov    -0x630(%rbp),%rdi
         : 2763  char_buffer_add_slow():
         : 2764  ./stdio-common/vfscanf-internal.c:240
    0.00 :   64df2:  sub    -0x460(%rbp),%rdx
    0.00 :   64df9:  mov    %rdx,-0x610(%rbp)
         : 2767  scratch_buffer_grow_preserve():
         : 2768  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   64e00:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 2770  char_buffer_add_slow():
         : 2771  ./stdio-common/vfscanf-internal.c:241
    0.00 :   64e05:  movzbl -0x620(%rbp),%esi
    0.00 :   64e0c:  test   %al,%al
    0.00 :   64e0e:  je     67e17 <__vfscanf_internal+0x5437>
         : 2775  char_buffer_start():
         : 2776  ./stdio-common/vfscanf-internal.c:206
    0.00 :   64e14:  mov    -0x460(%rbp),%rax
         : 2778  char_buffer_add_slow():
         : 2779  ./stdio-common/vfscanf-internal.c:248
    0.00 :   64e1b:  mov    -0x610(%rbp),%rdx
    0.00 :   64e22:  add    %rax,%rdx
         : 2782  char_buffer_rewind():
         : 2783  ./stdio-common/vfscanf-internal.c:223
    0.00 :   64e25:  add    -0x458(%rbp),%rax
         : 2785  char_buffer_add_slow():
         : 2786  ./stdio-common/vfscanf-internal.c:249
    0.00 :   64e2c:  lea    0x1(%rdx),%rdi
    0.00 :   64e30:  movq   %rax,%xmm5
    0.00 :   64e35:  movq   %rdi,%xmm0
    0.00 :   64e3a:  punpcklqdq %xmm5,%xmm0
    0.00 :   64e3e:  movaps %xmm0,-0x470(%rbp)
    0.00 :   64e45:  mov    %r13b,(%rdx)
    0.00 :   64e48:  jmp    64d7e <__vfscanf_internal+0x239e>
    0.00 :   64e4d:  nopl   (%rax)
    0.00 :   64e50:  mov    %r14d,%r15d
    0.00 :   64e53:  mov    %r12,%r14
    0.00 :   64e56:  mov    %r13,%r12
         : 2798  __vfscanf_internal():
         : 2799  ./stdio-common/vfscanf-internal.c:1638
    0.00 :   64e59:  mov    -0x648(%rbp),%eax
    0.00 :   64e5f:  mov    %eax,-0x688(%rbp)
    0.00 :   64e65:  mov    -0x638(%rbp),%eax
         : 2803  ./stdio-common/vfscanf-internal.c:1668
    0.00 :   64e6b:  mov    -0x660(%rbp),%r13d
         : 2805  char_buffer_add():
         : 2806  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64e72:  mov    -0x468(%rbp),%rbx
         : 2808  __vfscanf_internal():
         : 2809  ./stdio-common/vfscanf-internal.c:1638
    0.00 :   64e79:  test   %eax,%eax
    0.00 :   64e7b:  cmovle %eax,%r15d
         : 2812  char_buffer_add():
         : 2813  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64e7f:  mov    -0x470(%rbp),%rax
         : 2815  __vfscanf_internal():
         : 2816  ./stdio-common/vfscanf-internal.c:1668
    0.00 :   64e86:  add    $0x30,%r13d
         : 2818  ./stdio-common/vfscanf-internal.c:1724
    0.00 :   64e8a:  mov    %r13d,%esi
         : 2820  ./stdio-common/vfscanf-internal.c:1638
    0.00 :   64e8d:  mov    %r15d,-0x638(%rbp)
         : 2822  char_buffer_add():
         : 2823  ./stdio-common/vfscanf-internal.c:260
    0.00 :   64e94:  cmp    %rax,%rbx
    0.00 :   64e97:  je     65735 <__vfscanf_internal+0x2d55>
         : 2826  ./stdio-common/vfscanf-internal.c:263
    0.00 :   64e9d:  mov    -0x688(%rbp),%edi
    0.00 :   64ea3:  lea    0x1(%rax),%rcx
    0.00 :   64ea7:  mov    %edi,-0x6e8(%rbp)
    0.00 :   64ead:  mov    %rcx,-0x470(%rbp)
    0.00 :   64eb4:  mov    %sil,(%rax)
         : 2832  __vfscanf_internal():
         : 2833  ./stdio-common/vfscanf-internal.c:1725
    0.00 :   64eb7:  mov    -0x638(%rbp),%ecx
    0.00 :   64ebd:  test   %ecx,%ecx
    0.00 :   64ebf:  jle    64ec8 <__vfscanf_internal+0x24e8>
         : 2837  ./stdio-common/vfscanf-internal.c:1726
    0.00 :   64ec1:  subl   $0x1,-0x638(%rbp)
         : 2839  ./stdio-common/vfscanf-internal.c:1728
    0.00 :   64ec8:  cmp    $0xffffffff,%r13d
    0.00 :   64ecc:  je     65134 <__vfscanf_internal+0x2754>
         : 2842  ./stdio-common/vfscanf-internal.c:1728 (discriminator 2)
    0.00 :   64ed2:  mov    0x8(%r12),%rax
    0.00 :   64ed7:  cmp    0x10(%r12),%rax
    0.00 :   64edc:  jae    651b8 <__vfscanf_internal+0x27d8>
         : 2846  ./stdio-common/vfscanf-internal.c:1728 (discriminator 5)
    0.00 :   64ee2:  lea    0x1(%rax),%rcx
    0.00 :   64ee6:  mov    %rcx,0x8(%r12)
    0.00 :   64eeb:  movzbl (%rax),%r13d
         : 2850  ./stdio-common/vfscanf-internal.c:1525 (discriminator 8)
    0.00 :   64eef:  mov    -0x638(%rbp),%edx
         : 2852  ./stdio-common/vfscanf-internal.c:1728 (discriminator 8)
    0.00 :   64ef5:  add    $0x1,%r14
         : 2854  ./stdio-common/vfscanf-internal.c:1525 (discriminator 8)
    0.00 :   64ef9:  test   %edx,%edx
    0.00 :   64efb:  jne    649f0 <__vfscanf_internal+0x2010>
    0.00 :   64f01:  mov    -0x470(%rbp),%rsi
    0.00 :   64f08:  mov    %r12,%r15
         : 2859  ./stdio-common/vfscanf-internal.c:1439 (discriminator 2)
    0.00 :   64f0b:  movl   $0xa,-0x610(%rbp)
    0.00 :   64f15:  jmp    6404d <__vfscanf_internal+0x166d>
    0.00 :   64f1a:  nopw   0x0(%rax,%rax,1)
         : 2863  ./stdio-common/vfscanf-internal.c:1644
    0.00 :   64f20:  mov    %rbx,%rdx
    0.00 :   64f23:  mov    %rcx,%rbx
    0.00 :   64f26:  cmp    %rdx,-0x630(%rbp)
    0.00 :   64f2d:  jae    64cbd <__vfscanf_internal+0x22dd>
         : 2868  ./stdio-common/vfscanf-internal.c:1646 (discriminator 2)
    0.00 :   64f33:  movzbl %r15b,%esi
    0.00 :   64f37:  mov    %r13,%rdi
    0.00 :   64f3a:  sub    $0x1,%r12
    0.00 :   64f3e:  call   8e7b0 <_IO_sputbackc>
         : 2873  ./stdio-common/vfscanf-internal.c:1647
    0.00 :   64f43:  mov    -0x630(%rbp),%r14
    0.00 :   64f4a:  cmp    %rbx,%r14
    0.00 :   64f4d:  jae    64f80 <__vfscanf_internal+0x25a0>
    0.00 :   64f4f:  mov    %rbx,%r15
    0.00 :   64f52:  nopw   0x0(%rax,%rax,1)
         : 2879  ./stdio-common/vfscanf-internal.c:1648
    0.00 :   64f58:  movzbl (%r15),%esi
    0.00 :   64f5c:  mov    %r13,%rdi
         : 2882  ./stdio-common/vfscanf-internal.c:1647
    0.00 :   64f5f:  sub    $0x1,%r15
         : 2884  ./stdio-common/vfscanf-internal.c:1648
    0.00 :   64f63:  call   8e7b0 <_IO_sputbackc>
         : 2886  ./stdio-common/vfscanf-internal.c:1647
    0.00 :   64f68:  cmp    %r15,%r14
    0.00 :   64f6b:  jne    64f58 <__vfscanf_internal+0x2578>
         : 2889  ./stdio-common/vfscanf-internal.c:1648
    0.00 :   64f6d:  mov    -0x630(%rbp),%rsi
    0.00 :   64f74:  mov    %rsi,%rax
    0.00 :   64f77:  sub    %rbx,%rax
    0.00 :   64f7a:  mov    %rsi,%rbx
    0.00 :   64f7d:  add    %rax,%r12
         : 2895  ./stdio-common/vfscanf-internal.c:1649
    0.00 :   64f80:  movzbl (%rbx),%r15d
    0.00 :   64f84:  jmp    64cbd <__vfscanf_internal+0x22dd>
    0.00 :   64f89:  nopl   0x0(%rax)
    0.00 :   64f90:  mov    %rbx,%rdx
    0.00 :   64f93:  mov    %rcx,%rbx
    0.00 :   64f96:  jmp    64ca7 <__vfscanf_internal+0x22c7>
    0.00 :   64f9b:  nopl   0x0(%rax,%rax,1)
         : 2903  ./stdio-common/vfscanf-internal.c:1646
    0.00 :   64fa0:  cmp    $0xffffffff,%r15d
    0.00 :   64fa4:  je     64f43 <__vfscanf_internal+0x2563>
    0.00 :   64fa6:  jmp    64f33 <__vfscanf_internal+0x2553>
    0.00 :   64fa8:  nopl   0x0(%rax,%rax,1)
    0.00 :   64fb0:  mov    %r15,%r12
    0.00 :   64fb3:  mov    %r14d,%r15d
    0.00 :   64fb6:  mov    %r13,%r14
         : 2911  ./stdio-common/vfscanf-internal.c:1585
    0.00 :   64fb9:  jmp    64e65 <__vfscanf_internal+0x2485>
    0.00 :   64fbe:  xchg   %ax,%ax
         : 2914  ./stdio-common/vfscanf-internal.c:1592
    0.00 :   64fc0:  mov    %r13,%r14
    0.00 :   64fc3:  mov    -0x620(%rbp),%r13
    0.00 :   64fca:  cmp    %r13,%rbx
    0.00 :   64fcd:  jbe    64b73 <__vfscanf_internal+0x2193>
         : 2919  ./stdio-common/vfscanf-internal.c:1594 (discriminator 2)
    0.00 :   64fd3:  movzbl %r12b,%esi
    0.00 :   64fd7:  mov    %r15,%rdi
    0.00 :   64fda:  mov    %r9,-0x610(%rbp)
    0.00 :   64fe1:  sub    $0x1,%r14
    0.00 :   64fe5:  call   8e7b0 <_IO_sputbackc>
    0.00 :   64fea:  mov    -0x610(%rbp),%r9
         : 2926  ./stdio-common/vfscanf-internal.c:1595
    0.00 :   64ff1:  cmp    %r13,%r9
    0.00 :   64ff4:  jbe    65022 <__vfscanf_internal+0x2642>
    0.00 :   64ff6:  mov    %r9,%r12
    0.00 :   64ff9:  mov    %r9,%rbx
    0.00 :   64ffc:  nopl   0x0(%rax)
         : 2932  ./stdio-common/vfscanf-internal.c:1596
    0.00 :   65000:  movzbl (%r12),%esi
    0.00 :   65005:  mov    %r15,%rdi
         : 2935  ./stdio-common/vfscanf-internal.c:1595
    0.00 :   65008:  sub    $0x1,%r12
         : 2937  ./stdio-common/vfscanf-internal.c:1596
    0.00 :   6500c:  call   8e7b0 <_IO_sputbackc>
         : 2939  ./stdio-common/vfscanf-internal.c:1595
    0.00 :   65011:  cmp    %r13,%r12
    0.00 :   65014:  jne    65000 <__vfscanf_internal+0x2620>
         : 2942  ./stdio-common/vfscanf-internal.c:1596
    0.00 :   65016:  mov    %r13,%rax
    0.00 :   65019:  mov    %r13,%r9
    0.00 :   6501c:  sub    %rbx,%rax
    0.00 :   6501f:  add    %rax,%r14
         : 2947  ./stdio-common/vfscanf-internal.c:1597
    0.00 :   65022:  movzbl (%r9),%r12d
    0.00 :   65026:  jmp    64b73 <__vfscanf_internal+0x2193>
    0.00 :   6502b:  nopl   0x0(%rax,%rax,1)
    0.00 :   65030:  mov    %r14d,%r10d
    0.00 :   65033:  mov    %rbx,%rdx
    0.00 :   65036:  mov    %r13,%r14
    0.00 :   65039:  mov    -0x620(%rbp),%r13
    0.00 :   65040:  jmp    64b61 <__vfscanf_internal+0x2181>
    0.00 :   65045:  nopl   (%rax)
         : 2957  ./stdio-common/vfscanf-internal.c:1594
    0.00 :   65048:  cmp    $0xffffffff,%r12d
    0.00 :   6504c:  je     64ff1 <__vfscanf_internal+0x2611>
    0.00 :   6504e:  jmp    64fd3 <__vfscanf_internal+0x25f3>
         : 2961  ./stdio-common/vfscanf-internal.c:1562
    0.00 :   65050:  mov    -0x630(%rbp),%rax
    0.00 :   65057:  mov    -0x540(%rbp,%rax,8),%r13
    0.00 :   6505f:  jmp    64a58 <__vfscanf_internal+0x2078>
         : 2965  ./stdio-common/vfscanf-internal.c:1686 (discriminator 4)
    0.00 :   65064:  mov    %r12,%rdi
    0.00 :   65067:  call   8da40 <__uflow>
    0.00 :   6506c:  mov    %eax,%r13d
    0.00 :   6506f:  cmp    $0xffffffff,%eax
    0.00 :   65072:  jne    64db1 <__vfscanf_internal+0x23d1>
         : 2971  ./stdio-common/vfscanf-internal.c:1686 (discriminator 9)
    0.00 :   65078:  mov    0x1b4d91(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6507f:  mov    %ebx,%r10d
    0.00 :   65082:  mov    %fs:(%rax),%eax
    0.00 :   65085:  mov    %eax,-0x600(%rbp)
         : 2976  char_buffer_error():
         : 2977  ./stdio-common/vfscanf-internal.c:231
    0.00 :   6508b:  mov    -0x470(%rbp),%rcx
    0.00 :   65092:  mov    %rcx,%rsi
         : 2980  __vfscanf_internal():
         : 2981  ./stdio-common/vfscanf-internal.c:1692
    0.00 :   65095:  test   %rcx,%rcx
    0.00 :   65098:  je     66f52 <__vfscanf_internal+0x4572>
         : 2984  ./stdio-common/vfscanf-internal.c:1699
    0.00 :   6509e:  cmpb   $0x0,(%r15)
    0.00 :   650a2:  jne    691b2 <__vfscanf_internal+0x67d2>
         : 2987  ./stdio-common/vfscanf-internal.c:1724
    0.00 :   650a8:  mov    %r13d,%esi
         : 2989  ./stdio-common/vfscanf-internal.c:1713
    0.00 :   650ab:  mov    -0x638(%rbp),%eax
         : 2991  char_buffer_add():
         : 2992  ./stdio-common/vfscanf-internal.c:260
    0.00 :   650b1:  mov    -0x468(%rbp),%rbx
         : 2994  __vfscanf_internal():
         : 2995  ./stdio-common/vfscanf-internal.c:1713
    0.00 :   650b8:  test   %eax,%eax
    0.00 :   650ba:  cmovle %eax,%r10d
         : 2998  ./stdio-common/vfscanf-internal.c:1718
    0.00 :   650be:  lea    -0x1(%rcx),%rax
    0.00 :   650c2:  mov    %rax,-0x470(%rbp)
         : 3001  ./stdio-common/vfscanf-internal.c:1713
    0.00 :   650c9:  mov    %r10d,-0x638(%rbp)
         : 3003  char_buffer_add():
         : 3004  ./stdio-common/vfscanf-internal.c:260
    0.00 :   650d0:  cmp    %rbx,%rax
    0.00 :   650d3:  jne    64ead <__vfscanf_internal+0x24cd>
         : 3007  scratch_buffer_grow_preserve():
         : 3008  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   650d9:  lea    -0x460(%rbp),%rdi
    0.00 :   650e0:  mov    %sil,-0x610(%rbp)
         : 3011  char_buffer_add_slow():
         : 3012  ./stdio-common/vfscanf-internal.c:240
    0.00 :   650e7:  sub    -0x460(%rbp),%rbx
         : 3014  scratch_buffer_grow_preserve():
         : 3015  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   650ee:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 3017  char_buffer_add_slow():
         : 3018  ./stdio-common/vfscanf-internal.c:241
    0.00 :   650f3:  movzbl -0x610(%rbp),%esi
    0.00 :   650fa:  test   %al,%al
    0.00 :   650fc:  je     683a0 <__vfscanf_internal+0x59c0>
         : 3022  char_buffer_start():
         : 3023  ./stdio-common/vfscanf-internal.c:206
    0.00 :   65102:  mov    -0x460(%rbp),%rax
         : 3025  char_buffer_add_slow():
         : 3026  ./stdio-common/vfscanf-internal.c:248
    0.00 :   65109:  add    %rax,%rbx
         : 3028  char_buffer_rewind():
         : 3029  ./stdio-common/vfscanf-internal.c:223
    0.00 :   6510c:  add    -0x458(%rbp),%rax
         : 3031  char_buffer_add_slow():
         : 3032  ./stdio-common/vfscanf-internal.c:249
    0.00 :   65113:  lea    0x1(%rbx),%rdi
    0.00 :   65117:  movq   %rax,%xmm6
    0.00 :   6511c:  movq   %rdi,%xmm0
    0.00 :   65121:  punpcklqdq %xmm6,%xmm0
    0.00 :   65125:  movaps %xmm0,-0x470(%rbp)
    0.00 :   6512c:  mov    %sil,(%rbx)
    0.00 :   6512f:  jmp    64eb7 <__vfscanf_internal+0x24d7>
         : 3040  __vfscanf_internal():
         : 3041  ./stdio-common/vfscanf-internal.c:1728 (discriminator 1)
    0.00 :   65134:  mov    0x1b4cd5(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6513b:  mov    -0x600(%rbp),%eax
    0.00 :   65141:  mov    %r12,%r15
    0.00 :   65144:  mov    %eax,%fs:(%r10)
         : 3046  ./stdio-common/vfscanf-internal.c:1525
    0.00 :   65148:  mov    -0x470(%rbp),%rsi
         : 3048  ./stdio-common/vfscanf-internal.c:1500
    0.00 :   6514f:  mov    $0xffffffff,%r13d
    0.00 :   65155:  jmp    64f0b <__vfscanf_internal+0x252b>
         : 3051  ./stdio-common/vfscanf-internal.c:1636
    0.00 :   6515a:  test   %dl,%dl
    0.00 :   6515c:  jne    64cbd <__vfscanf_internal+0x22dd>
    0.00 :   65162:  mov    %r12,%r14
         : 3055  ./stdio-common/vfscanf-internal.c:1621
    0.00 :   65165:  mov    -0x668(%rbp),%r15d
    0.00 :   6516c:  mov    %r13,%r12
    0.00 :   6516f:  jmp    64e59 <__vfscanf_internal+0x2479>
    0.00 :   65174:  nopl   0x0(%rax)
         : 3060  ./stdio-common/vfscanf-internal.c:1431
    0.00 :   65178:  mov    -0x610(%rbp),%r11d
    0.00 :   6517f:  test   %r11d,%r11d
    0.00 :   65182:  je     6834e <__vfscanf_internal+0x596e>
         : 3064  ./stdio-common/vfscanf-internal.c:1733
    0.00 :   65188:  xor    %ecx,%ecx
         : 3066  ./stdio-common/vfscanf-internal.c:1438
    0.00 :   6518a:  cmpl   $0xa,-0x610(%rbp)
    0.00 :   65191:  je     6495c <__vfscanf_internal+0x1f7c>
    0.00 :   65197:  jmp    63f4c <__vfscanf_internal+0x156c>
         : 3070  ./stdio-common/vfscanf-internal.c:1755
    0.00 :   6519c:  add    $0x1,%r12
    0.00 :   651a0:  cmpb   $0x0,(%r12)
    0.00 :   651a5:  jne    6469d <__vfscanf_internal+0x1cbd>
    0.00 :   651ab:  mov    %r13,%r14
    0.00 :   651ae:  jmp    64785 <__vfscanf_internal+0x1da5>
    0.00 :   651b3:  nopl   0x0(%rax,%rax,1)
         : 3077  ./stdio-common/vfscanf-internal.c:1728 (discriminator 4)
    0.00 :   651b8:  mov    %r12,%rdi
    0.00 :   651bb:  call   8da40 <__uflow>
    0.00 :   651c0:  mov    %eax,%r13d
    0.00 :   651c3:  cmp    $0xffffffff,%eax
    0.00 :   651c6:  jne    64eef <__vfscanf_internal+0x250f>
         : 3083  ./stdio-common/vfscanf-internal.c:1728 (discriminator 9)
    0.00 :   651cc:  mov    0x1b4c3d(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   651d3:  mov    %r12,%r15
    0.00 :   651d6:  mov    %fs:(%r10),%eax
    0.00 :   651da:  mov    %eax,-0x600(%rbp)
    0.00 :   651e0:  jmp    65148 <__vfscanf_internal+0x2768>
         : 3089  char_buffer_add_slow():
         : 3090  ./stdio-common/vfscanf-internal.c:243
    0.00 :   651e5:  pxor   %xmm0,%xmm0
    0.00 :   651e9:  movaps %xmm0,-0x470(%rbp)
         : 3093  ./stdio-common/vfscanf-internal.c:245
    0.00 :   651f0:  jmp    6468e <__vfscanf_internal+0x1cae>
         : 3095  __vfscanf_internal():
         : 3096  ./stdio-common/vfscanf-internal.c:1583
    0.00 :   651f5:  test   %dl,%dl
    0.00 :   651f7:  jne    64b73 <__vfscanf_internal+0x2193>
    0.00 :   651fd:  mov    %r15,%r12
         : 3100  ./stdio-common/vfscanf-internal.c:1559
    0.00 :   65200:  mov    -0x668(%rbp),%r15d
    0.00 :   65207:  jmp    64e65 <__vfscanf_internal+0x2485>
    0.00 :   6520c:  nopl   0x0(%rax)
         : 3104  ./stdio-common/vfscanf-internal.c:3018 (discriminator 4)
    0.00 :   65210:  mov    %r14,%rdi
    0.00 :   65213:  call   8da40 <__uflow>
    0.00 :   65218:  mov    %eax,%r15d
    0.00 :   6521b:  cmp    $0xffffffff,%eax
    0.00 :   6521e:  jne    68ea7 <__vfscanf_internal+0x64c7>
         : 3110  ./stdio-common/vfscanf-internal.c:3018 (discriminator 9)
    0.00 :   65224:  mov    0x1b4be5(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6522b:  mov    $0xfffffffffffffffe,%rdx
    0.00 :   65232:  mov    %fs:(%rax),%ebx
    0.00 :   65235:  jmp    62c95 <__vfscanf_internal+0x2b5>
    0.00 :   6523a:  mov    0x1b4bcf(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   65241:  mov    %r15,%r14
    0.00 :   65244:  jmp    63d6a <__vfscanf_internal+0x138a>
         : 3118  ./stdio-common/vfscanf-internal.c:1398 (discriminator 4)
    0.00 :   65249:  mov    %r15,%rdi
    0.00 :   6524c:  call   8da40 <__uflow>
    0.00 :   65251:  mov    %eax,%r13d
    0.00 :   65254:  cmp    $0xffffffff,%eax
    0.00 :   65257:  jne    63e20 <__vfscanf_internal+0x1440>
    0.00 :   6525d:  mov    %r15,%r14
    0.00 :   65260:  jmp    63d74 <__vfscanf_internal+0x1394>
         : 3126  ./stdio-common/vfscanf-internal.c:1865
    0.00 :   65265:  call   47500 <__strtoul_internal>
    0.00 :   6526a:  mov    %rax,%rdx
    0.00 :   6526d:  jmp    640f5 <__vfscanf_internal+0x1715>
         : 3130  ./stdio-common/vfscanf-internal.c:490
    0.00 :   65272:  movl   $0xffffffff,-0x68c(%rbp)
    0.00 :   6527c:  jmp    63333 <__vfscanf_internal+0x953>
         : 3133  ./stdio-common/vfscanf-internal.c:1818 (discriminator 1)
    0.00 :   65281:  testl  $0x1000,-0x63c(%rbp)
    0.00 :   6528b:  je     6578d <__vfscanf_internal+0x2dad>
         : 3136  ./stdio-common/vfscanf-internal.c:1818
    0.00 :   65291:  cmpl   $0x4,-0x638(%rbp)
    0.00 :   65298:  jbe    6578d <__vfscanf_internal+0x2dad>
    0.00 :   6529e:  cmp    $0x28,%r13d
    0.00 :   652a2:  jne    6578d <__vfscanf_internal+0x2dad>
         : 3141  ./stdio-common/vfscanf-internal.c:1822
    0.00 :   652a8:  mov    -0x658(%rbp),%rax
    0.00 :   652af:  mov    0x70(%rax),%rbx
    0.00 :   652b3:  mov    0x8(%r15),%rax
    0.00 :   652b7:  cmp    0x10(%r15),%rax
    0.00 :   652bb:  jae    666be <__vfscanf_internal+0x3cde>
         : 3147  ./stdio-common/vfscanf-internal.c:1822 (discriminator 37)
    0.00 :   652c1:  lea    0x1(%rax),%rdx
    0.00 :   652c5:  mov    %rdx,0x8(%r15)
    0.00 :   652c9:  movzbl (%rax),%r13d
    0.00 :   652cd:  mov    %r13,%rax
         : 3152  ./stdio-common/vfscanf-internal.c:1818
    0.00 :   652d0:  cmpl   $0x6e,(%rbx,%rax,4)
    0.00 :   652d4:  jne    693ad <__vfscanf_internal+0x69cd>
         : 3155  ./stdio-common/vfscanf-internal.c:1823
    0.00 :   652da:  mov    -0x658(%rbp),%rax
    0.00 :   652e1:  mov    0x70(%rax),%rbx
    0.00 :   652e5:  mov    0x8(%r15),%rax
    0.00 :   652e9:  cmp    0x10(%r15),%rax
    0.00 :   652ed:  jae    67203 <__vfscanf_internal+0x4823>
         : 3161  ./stdio-common/vfscanf-internal.c:1823 (discriminator 37)
    0.00 :   652f3:  lea    0x1(%rax),%rdx
    0.00 :   652f7:  mov    %rdx,0x8(%r15)
    0.00 :   652fb:  movzbl (%rax),%r13d
    0.00 :   652ff:  mov    %r13,%rax
         : 3166  ./stdio-common/vfscanf-internal.c:1818
    0.00 :   65302:  cmpl   $0x69,(%rbx,%rax,4)
    0.00 :   65306:  jne    693ad <__vfscanf_internal+0x69cd>
         : 3169  ./stdio-common/vfscanf-internal.c:1824
    0.00 :   6530c:  mov    -0x658(%rbp),%rax
    0.00 :   65313:  mov    0x70(%rax),%rbx
    0.00 :   65317:  mov    0x8(%r15),%rax
    0.00 :   6531b:  cmp    0x10(%r15),%rax
    0.00 :   6531f:  jae    67150 <__vfscanf_internal+0x4770>
         : 3175  ./stdio-common/vfscanf-internal.c:1824 (discriminator 37)
    0.00 :   65325:  lea    0x1(%rax),%rdx
    0.00 :   65329:  mov    %rdx,0x8(%r15)
    0.00 :   6532d:  movzbl (%rax),%r13d
    0.00 :   65331:  mov    %r13,%rax
         : 3180  ./stdio-common/vfscanf-internal.c:1818
    0.00 :   65334:  cmpl   $0x6c,(%rbx,%rax,4)
    0.00 :   65338:  jne    693ad <__vfscanf_internal+0x69cd>
         : 3183  ./stdio-common/vfscanf-internal.c:1825
    0.00 :   6533e:  mov    0x8(%r15),%rax
    0.00 :   65342:  cmp    0x10(%r15),%rax
    0.00 :   65346:  jae    66477 <__vfscanf_internal+0x3a97>
         : 3187  ./stdio-common/vfscanf-internal.c:1825 (discriminator 2)
    0.00 :   6534c:  lea    0x1(%rax),%rdx
    0.00 :   65350:  mov    %rdx,0x8(%r15)
    0.00 :   65354:  movzbl (%rax),%r13d
         : 3191  ./stdio-common/vfscanf-internal.c:1825 (discriminator 5)
    0.00 :   65358:  add    $0x4,%r14
         : 3193  ./stdio-common/vfscanf-internal.c:1818 (discriminator 5)
    0.00 :   6535c:  cmp    $0x29,%r13d
    0.00 :   65360:  jne    693ad <__vfscanf_internal+0x69cd>
         : 3196  char_buffer_add():
         : 3197  ./stdio-common/vfscanf-internal.c:260
    0.00 :   65366:  mov    -0x470(%rbp),%rbx
    0.00 :   6536d:  cmp    -0x468(%rbp),%rbx
    0.00 :   65374:  je     67188 <__vfscanf_internal+0x47a8>
         : 3201  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6537a:  lea    0x1(%rbx),%rax
    0.00 :   6537e:  mov    %rax,-0x470(%rbp)
    0.00 :   65385:  movb   $0x30,(%rbx)
    0.00 :   65388:  jmp    64090 <__vfscanf_internal+0x16b0>
         : 3206  read_int():
         : 3207  ./stdio-common/printf-parse.h:78
    0.00 :   6538d:  movl   $0xffffffff,-0x638(%rbp)
    0.00 :   65397:  jmp    62ee7 <__vfscanf_internal+0x507>
         : 3210  __vfscanf_internal():
         : 3211  ./stdio-common/vfscanf-internal.c:637
    0.00 :   6539c:  mov    -0x620(%rbp),%r14
         : 3213  ./stdio-common/vfscanf-internal.c:1017
    0.00 :   653a3:  mov    -0x63c(%rbp),%eax
    0.00 :   653a9:  mov    %eax,%esi
    0.00 :   653ab:  and    $0x1,%esi
    0.00 :   653ae:  mov    %esi,-0x610(%rbp)
    0.00 :   653b4:  jne    63448 <__vfscanf_internal+0xa68>
         : 3219  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   653ba:  mov    %eax,%ebx
    0.00 :   653bc:  and    $0x8,%ebx
    0.00 :   653bf:  jne    65483 <__vfscanf_internal+0x2aa3>
         : 3223  ./stdio-common/vfscanf-internal.c:1019 (discriminator 1)
    0.00 :   653c5:  test   $0x21,%ah
    0.00 :   653c8:  je     681ab <__vfscanf_internal+0x57cb>
         : 3226  ./stdio-common/vfscanf-internal.c:1019 (discriminator 3)
    0.00 :   653ce:  mov    -0x68c(%rbp),%r9d
    0.00 :   653d5:  test   %r9d,%r9d
    0.00 :   653d8:  jne    68107 <__vfscanf_internal+0x5727>
         : 3230  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   653de:  mov    -0x5a8(%rbp),%edx
    0.00 :   653e4:  cmp    $0x2f,%edx
    0.00 :   653e7:  ja     680f0 <__vfscanf_internal+0x5710>
    0.00 :   653ed:  mov    %edx,%eax
    0.00 :   653ef:  add    $0x8,%edx
    0.00 :   653f2:  add    -0x598(%rbp),%rax
    0.00 :   653f9:  mov    %edx,-0x5a8(%rbp)
    0.00 :   653ff:  mov    (%rax),%rax
    0.00 :   65402:  mov    %rax,-0x670(%rbp)
    0.00 :   65409:  mov    %rax,%r12
    0.00 :   6540c:  mov    %r10,-0x630(%rbp)
         : 3242  ./stdio-common/vfscanf-internal.c:1019 (discriminator 12)
    0.00 :   65413:  test   %r12,%r12
    0.00 :   65416:  je     6a29f <__vfscanf_internal+0x78bf>
         : 3245  ./stdio-common/vfscanf-internal.c:1019 (discriminator 14)
    0.00 :   6541c:  mov    $0x64,%edi
    0.00 :   65421:  call   28380 <malloc@plt>
    0.00 :   65426:  mov    %rax,-0x6c0(%rbp)
    0.00 :   6542d:  mov    %rax,(%r12)
    0.00 :   65431:  test   %rax,%rax
    0.00 :   65434:  je     694d9 <__vfscanf_internal+0x6af9>
         : 3252  ./stdio-common/vfscanf-internal.c:1019 (discriminator 15)
    0.00 :   6543a:  mov    -0x6d0(%rbp),%rax
    0.00 :   65441:  mov    -0x630(%rbp),%r10
    0.00 :   65448:  test   %rax,%rax
    0.00 :   6544b:  je     67351 <__vfscanf_internal+0x4971>
         : 3257  ./stdio-common/vfscanf-internal.c:1019 (discriminator 18)
    0.00 :   65451:  mov    (%rax),%rax
         : 3259  ./stdio-common/vfscanf-internal.c:1209 (discriminator 18)
    0.00 :   65454:  lea    0x1(%rax),%rdx
         : 3261  ./stdio-common/vfscanf-internal.c:1019 (discriminator 18)
    0.00 :   65458:  cmp    $0x20,%rax
    0.00 :   6545c:  je     67351 <__vfscanf_internal+0x4971>
         : 3264  ./stdio-common/vfscanf-internal.c:1019 (discriminator 21)
    0.00 :   65462:  mov    -0x6d0(%rbp),%rdi
    0.00 :   65469:  mov    -0x670(%rbp),%rsi
    0.00 :   65470:  movq   $0x64,-0x698(%rbp)
    0.00 :   6547b:  mov    %rdx,(%rdi)
    0.00 :   6547e:  mov    %rsi,0x10(%rdi,%rax,8)
         : 3270  ./stdio-common/vfscanf-internal.c:1021 (discriminator 33)
    0.00 :   65483:  cmp    $0xffffffff,%r13d
    0.00 :   65487:  je     676d3 <__vfscanf_internal+0x4cf3>
         : 3273  ./stdio-common/vfscanf-internal.c:1021 (discriminator 2)
    0.00 :   6548d:  mov    0x8(%r15),%rax
    0.00 :   65491:  cmp    0x10(%r15),%rax
    0.00 :   65495:  jae    67693 <__vfscanf_internal+0x4cb3>
         : 3277  ./stdio-common/vfscanf-internal.c:1021 (discriminator 5)
    0.00 :   6549b:  lea    0x1(%rax),%rdx
    0.00 :   6549f:  mov    %rdx,0x8(%r15)
    0.00 :   654a3:  movzbl (%rax),%r13d
         : 3281  ./stdio-common/vfscanf-internal.c:1031 (discriminator 8)
    0.00 :   654a7:  mov    -0x658(%rbp),%rdi
    0.00 :   654ae:  movslq %r13d,%rax
         : 3284  ./stdio-common/vfscanf-internal.c:1021 (discriminator 8)
    0.00 :   654b1:  lea    0x1(%r14),%rdx
         : 3286  ./stdio-common/vfscanf-internal.c:1031 (discriminator 8)
    0.00 :   654b5:  mov    0x68(%rdi),%rcx
    0.00 :   654b9:  testb  $0x20,0x1(%rcx,%rax,2)
    0.00 :   654be:  jne    67340 <__vfscanf_internal+0x4960>
         : 3290  ./stdio-common/vfscanf-internal.c:1102
    0.00 :   654c4:  mov    -0x63c(%rbp),%r12d
         : 3292  ./stdio-common/vfscanf-internal.c:1021
    0.00 :   654cb:  mov    %ebx,%r11d
    0.00 :   654ce:  mov    %r15,%rcx
    0.00 :   654d1:  mov    %r10,-0x648(%rbp)
    0.00 :   654d8:  mov    %r13d,%r15d
    0.00 :   654db:  mov    -0x658(%rbp),%rbx
    0.00 :   654e2:  mov    %rdx,%r13
    0.00 :   654e5:  mov    -0x638(%rbp),%r14d
         : 3300  ./stdio-common/vfscanf-internal.c:1102
    0.00 :   654ec:  and    $0x2100,%r12d
         : 3302  ./stdio-common/vfscanf-internal.c:1021
    0.00 :   654f3:  mov    %r12d,-0x620(%rbp)
    0.00 :   654fa:  mov    -0x6c0(%rbp),%r12
    0.00 :   65501:  jmp    65568 <__vfscanf_internal+0x2b88>
         : 3306  ./stdio-common/vfscanf-internal.c:1103
    0.00 :   65503:  mov    -0x670(%rbp),%rsi
    0.00 :   6550a:  mov    %rax,%r12
    0.00 :   6550d:  mov    (%rsi),%rdi
    0.00 :   65510:  mov    -0x698(%rbp),%rsi
    0.00 :   65517:  mov    %rsi,-0x630(%rbp)
    0.00 :   6551e:  add    %rdi,%rsi
    0.00 :   65521:  cmp    %rsi,%rax
    0.00 :   65524:  je     666f1 <__vfscanf_internal+0x3d11>
         : 3315  ./stdio-common/vfscanf-internal.c:1144
    0.00 :   6552a:  test   %r14d,%r14d
    0.00 :   6552d:  jle    65539 <__vfscanf_internal+0x2b59>
         : 3318  ./stdio-common/vfscanf-internal.c:1144 (discriminator 2)
    0.00 :   6552f:  sub    $0x1,%r14d
    0.00 :   65533:  je     684f4 <__vfscanf_internal+0x5b14>
         : 3321  ./stdio-common/vfscanf-internal.c:1144
    0.00 :   65539:  mov    0x8(%rcx),%rax
    0.00 :   6553d:  cmp    0x10(%rcx),%rax
    0.00 :   65541:  jae    65585 <__vfscanf_internal+0x2ba5>
         : 3325  ./stdio-common/vfscanf-internal.c:1144 (discriminator 7)
    0.00 :   65543:  lea    0x1(%rax),%rdx
    0.00 :   65547:  mov    %rdx,0x8(%rcx)
    0.00 :   6554b:  movzbl (%rax),%r15d
         : 3329  ./stdio-common/vfscanf-internal.c:1031 (discriminator 10)
    0.00 :   6554f:  mov    0x68(%rbx),%rdi
    0.00 :   65553:  movslq %r15d,%rax
         : 3332  ./stdio-common/vfscanf-internal.c:1144 (discriminator 10)
    0.00 :   65556:  lea    0x1(%r13),%rsi
         : 3334  ./stdio-common/vfscanf-internal.c:1031 (discriminator 10)
    0.00 :   6555a:  testb  $0x20,0x1(%rdi,%rax,2)
    0.00 :   6555f:  jne    6732d <__vfscanf_internal+0x494d>
         : 3337  ./stdio-common/vfscanf-internal.c:1144
    0.00 :   65565:  mov    %rsi,%r13
         : 3339  ./stdio-common/vfscanf-internal.c:1099
    0.00 :   65568:  test   %r11d,%r11d
    0.00 :   6556b:  jne    6552a <__vfscanf_internal+0x2b4a>
         : 3342  ./stdio-common/vfscanf-internal.c:1102
    0.00 :   6556d:  mov    -0x620(%rbp),%edi
         : 3344  ./stdio-common/vfscanf-internal.c:1101
    0.00 :   65573:  mov    %r15b,(%r12)
    0.00 :   65577:  lea    0x1(%r12),%rax
         : 3347  ./stdio-common/vfscanf-internal.c:1102
    0.00 :   6557c:  test   %edi,%edi
    0.00 :   6557e:  jne    65503 <__vfscanf_internal+0x2b23>
         : 3350  ./stdio-common/vfscanf-internal.c:1101
    0.00 :   65580:  mov    %rax,%r12
    0.00 :   65583:  jmp    6552a <__vfscanf_internal+0x2b4a>
         : 3353  ./stdio-common/vfscanf-internal.c:1144 (discriminator 6)
    0.00 :   65585:  mov    %rcx,%rdi
    0.00 :   65588:  mov    %r11d,-0x638(%rbp)
    0.00 :   6558f:  mov    %rcx,-0x630(%rbp)
    0.00 :   65596:  call   8da40 <__uflow>
    0.00 :   6559b:  mov    -0x630(%rbp),%rcx
    0.00 :   655a2:  mov    -0x638(%rbp),%r11d
    0.00 :   655a9:  cmp    $0xffffffff,%eax
    0.00 :   655ac:  mov    %eax,%r15d
    0.00 :   655af:  jne    6554f <__vfscanf_internal+0x2b6f>
         : 3363  ./stdio-common/vfscanf-internal.c:1144 (discriminator 11)
    0.00 :   655b1:  mov    -0x648(%rbp),%r10
    0.00 :   655b8:  mov    %r13,%r14
    0.00 :   655bb:  mov    %eax,%r13d
    0.00 :   655be:  mov    %r11d,%ebx
    0.00 :   655c1:  mov    %r12,-0x6c0(%rbp)
    0.00 :   655c8:  mov    %rcx,%r15
    0.00 :   655cb:  mov    %fs:(%r10),%eax
    0.00 :   655cf:  mov    %eax,-0x600(%rbp)
         : 3372  ./stdio-common/vfscanf-internal.c:2943
    0.00 :   655d5:  test   %ebx,%ebx
    0.00 :   655d7:  jne    62c3e <__vfscanf_internal+0x25e>
         : 3375  ./stdio-common/vfscanf-internal.c:2983
    0.00 :   655dd:  mov    -0x6c0(%rbp),%rax
    0.00 :   655e4:  movb   $0x0,(%rax)
    0.00 :   655e7:  lea    0x1(%rax),%rbx
         : 3379  ./stdio-common/vfscanf-internal.c:2985
    0.00 :   655eb:  testl  $0x2100,-0x63c(%rbp)
    0.00 :   655f5:  je     6561f <__vfscanf_internal+0x2c3f>
         : 3382  ./stdio-common/vfscanf-internal.c:2985 (discriminator 1)
    0.00 :   655f7:  mov    -0x670(%rbp),%r12
    0.00 :   655fe:  mov    %rbx,%rsi
    0.00 :   65601:  mov    (%r12),%rdi
    0.00 :   65605:  sub    %rdi,%rsi
    0.00 :   65608:  cmp    -0x698(%rbp),%rsi
    0.00 :   6560f:  je     6561f <__vfscanf_internal+0x2c3f>
         : 3389  ./stdio-common/vfscanf-internal.c:2987
    0.00 :   65611:  call   283b0 <realloc@plt>
         : 3391  ./stdio-common/vfscanf-internal.c:2988
    0.00 :   65616:  test   %rax,%rax
    0.00 :   65619:  je     6561f <__vfscanf_internal+0x2c3f>
         : 3394  ./stdio-common/vfscanf-internal.c:2989
    0.00 :   6561b:  mov    %rax,(%r12)
         : 3396  ./stdio-common/vfscanf-internal.c:2993
    0.00 :   6561f:  addl   $0x1,-0x640(%rbp)
    0.00 :   65626:  movl   $0x0,-0x610(%rbp)
         : 3399  ./stdio-common/vfscanf-internal.c:2983
    0.00 :   65630:  mov    %rbx,-0x6c0(%rbp)
         : 3401  ./stdio-common/vfscanf-internal.c:2991
    0.00 :   65637:  movq   $0x0,-0x670(%rbp)
    0.00 :   65642:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 3404  ./stdio-common/vfscanf-internal.c:1418 (discriminator 4)
    0.00 :   65647:  mov    %r15,%rdi
    0.00 :   6564a:  call   8da40 <__uflow>
    0.00 :   6564f:  mov    %eax,%r13d
    0.00 :   65652:  cmp    $0xffffffff,%eax
    0.00 :   65655:  jne    63f00 <__vfscanf_internal+0x1520>
         : 3410  ./stdio-common/vfscanf-internal.c:1418 (discriminator 9)
    0.00 :   6565b:  mov    0x1b47ae(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   65662:  mov    %fs:(%r10),%eax
    0.00 :   65666:  mov    %eax,-0x600(%rbp)
    0.00 :   6566c:  jmp    63f04 <__vfscanf_internal+0x1524>
         : 3415  char_buffer_add():
         : 3416  ./stdio-common/vfscanf-internal.c:260
    0.00 :   65671:  cmp    %rsi,-0x468(%rbp)
    0.00 :   65678:  jne    640a4 <__vfscanf_internal+0x16c4>
         : 3419  char_buffer_add_slow():
         : 3420  ./stdio-common/vfscanf-internal.c:240
    0.00 :   6567e:  sub    %rax,%rsi
         : 3422  scratch_buffer_grow_preserve():
         : 3423  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   65681:  lea    -0x460(%rbp),%rdi
         : 3425  char_buffer_add_slow():
         : 3426  ./stdio-common/vfscanf-internal.c:240
    0.00 :   65688:  mov    %rsi,%rbx
         : 3428  scratch_buffer_grow_preserve():
         : 3429  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6568b:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 3431  char_buffer_add_slow():
         : 3432  ./stdio-common/vfscanf-internal.c:241
    0.00 :   65690:  test   %al,%al
    0.00 :   65692:  je     67e51 <__vfscanf_internal+0x5471>
         : 3435  char_buffer_start():
         : 3436  ./stdio-common/vfscanf-internal.c:206
    0.00 :   65698:  mov    -0x460(%rbp),%rax
         : 3438  char_buffer_add_slow():
         : 3439  ./stdio-common/vfscanf-internal.c:248
    0.00 :   6569f:  add    %rax,%rbx
         : 3441  char_buffer_rewind():
         : 3442  ./stdio-common/vfscanf-internal.c:223
    0.00 :   656a2:  add    -0x458(%rbp),%rax
         : 3444  char_buffer_add_slow():
         : 3445  ./stdio-common/vfscanf-internal.c:249
    0.00 :   656a9:  lea    0x1(%rbx),%rsi
    0.00 :   656ad:  movq   %rax,%xmm5
    0.00 :   656b2:  movq   %rsi,%xmm0
    0.00 :   656b7:  punpcklqdq %xmm5,%xmm0
    0.00 :   656bb:  movaps %xmm0,-0x470(%rbp)
    0.00 :   656c2:  movb   $0x0,(%rbx)
    0.00 :   656c5:  jmp    640b2 <__vfscanf_internal+0x16d2>
         : 3453  __vfscanf_internal():
         : 3454  ./stdio-common/vfscanf-internal.c:2999
    0.00 :   656ca:  movl   $0x10,-0x610(%rbp)
         : 3456  ./stdio-common/vfscanf-internal.c:3001
    0.00 :   656d4:  mov    -0x63c(%rbp),%eax
    0.00 :   656da:  and    $0xfffffff9,%eax
         : 3459  ./stdio-common/vfscanf-internal.c:3004
    0.00 :   656dd:  or     $0x1001,%eax
    0.00 :   656e2:  mov    %eax,-0x63c(%rbp)
         : 3462  ./stdio-common/vfscanf-internal.c:3005
    0.00 :   656e8:  jmp    63dfc <__vfscanf_internal+0x141c>
         : 3464  ./stdio-common/vfscanf-internal.c:612
    0.00 :   656ed:  movzbl 0x2(%r12),%ebx
         : 3466  ./stdio-common/vfscanf-internal.c:583
    0.00 :   656f3:  add    $0x2,%r12
         : 3468  ./stdio-common/vfscanf-internal.c:584
    0.00 :   656f7:  orl    $0x2001,-0x63c(%rbp)
    0.00 :   65701:  jmp    62f57 <__vfscanf_internal+0x577>
         : 3471  ./stdio-common/vfscanf-internal.c:612
    0.00 :   65706:  movzbl 0x2(%r12),%ebx
         : 3473  ./stdio-common/vfscanf-internal.c:538
    0.00 :   6570c:  add    $0x2,%r12
         : 3475  ./stdio-common/vfscanf-internal.c:539
    0.00 :   65710:  orl    $0x200,-0x63c(%rbp)
    0.00 :   6571a:  jmp    62f57 <__vfscanf_internal+0x577>
         : 3478  ./stdio-common/vfscanf-internal.c:612
    0.00 :   6571f:  movzbl 0x2(%r12),%ebx
         : 3480  ./stdio-common/vfscanf-internal.c:549
    0.00 :   65725:  orl    $0x3,-0x63c(%rbp)
         : 3482  ./stdio-common/vfscanf-internal.c:548
    0.00 :   6572c:  add    $0x2,%r12
    0.00 :   65730:  jmp    62f57 <__vfscanf_internal+0x577>
         : 3485  ./stdio-common/vfscanf-internal.c:1725
    0.00 :   65735:  mov    -0x688(%rbp),%eax
    0.00 :   6573b:  mov    %eax,-0x6e8(%rbp)
         : 3488  char_buffer_add_slow():
         : 3489  ./stdio-common/vfscanf-internal.c:238
    0.00 :   65741:  test   %rbx,%rbx
    0.00 :   65744:  jne    650d9 <__vfscanf_internal+0x26f9>
         : 3492  __vfscanf_internal():
         : 3493  ./stdio-common/vfscanf-internal.c:1725
    0.00 :   6574a:  mov    -0x638(%rbp),%ebx
    0.00 :   65750:  test   %ebx,%ebx
    0.00 :   65752:  jg     64ec1 <__vfscanf_internal+0x24e1>
    0.00 :   65758:  jmp    64ed2 <__vfscanf_internal+0x24f2>
    0.00 :   6575d:  nopl   (%rax)
         : 3499  ./stdio-common/vfscanf-internal.c:3020
    0.00 :   65760:  cmp    $0xffffffff,%r15d
    0.00 :   65764:  je     63108 <__vfscanf_internal+0x728>
         : 3502  ./stdio-common/vfscanf-internal.c:3020 (discriminator 2)
    0.00 :   6576a:  movzbl %r15b,%esi
    0.00 :   6576e:  mov    %r14,%rdi
    0.00 :   65771:  call   8e7b0 <_IO_sputbackc>
    0.00 :   65776:  jmp    63108 <__vfscanf_internal+0x728>
         : 3507  ./stdio-common/vfscanf-internal.c:1813
    0.00 :   6577b:  movzbl (%rax),%edi
    0.00 :   6577e:  lea    -0x2b(%rdi),%edx
         : 3510  ./stdio-common/vfscanf-internal.c:1814
    0.00 :   65781:  and    $0xfd,%edx
    0.00 :   65787:  jne    64076 <__vfscanf_internal+0x1696>
         : 3513  ./stdio-common/vfscanf-internal.c:1833
    0.00 :   6578d:  mov    %r15,%r14
    0.00 :   65790:  mov    %r13d,%r15d
    0.00 :   65793:  cmp    $0xffffffff,%r13d
    0.00 :   65797:  je     63108 <__vfscanf_internal+0x728>
         : 3518  ./stdio-common/vfscanf-internal.c:1833 (discriminator 2)
    0.00 :   6579d:  movzbl %r15b,%esi
    0.00 :   657a1:  mov    %r14,%rdi
    0.00 :   657a4:  call   8e7b0 <_IO_sputbackc>
    0.00 :   657a9:  jmp    63108 <__vfscanf_internal+0x728>
         : 3523  ./stdio-common/vfscanf-internal.c:1300
    0.00 :   657ae:  cmp    $0x1,%rax
    0.00 :   657b2:  jne    67f20 <__vfscanf_internal+0x5540>
         : 3526  ./stdio-common/vfscanf-internal.c:1308
    0.00 :   657b8:  mov    -0x610(%rbp),%eax
         : 3528  ./stdio-common/vfscanf-internal.c:1304
    0.00 :   657be:  addq   $0x4,-0x6b8(%rbp)
    0.00 :   657c6:  mov    -0x6b8(%rbp),%rsi
         : 3531  ./stdio-common/vfscanf-internal.c:1308
    0.00 :   657cd:  test   %eax,%eax
    0.00 :   657cf:  jne    65801 <__vfscanf_internal+0x2e21>
         : 3534  ./stdio-common/vfscanf-internal.c:1308 (discriminator 1)
    0.00 :   657d1:  mov    -0x620(%rbp),%ebx
    0.00 :   657d7:  test   %ebx,%ebx
    0.00 :   657d9:  je     65801 <__vfscanf_internal+0x2e21>
         : 3538  ./stdio-common/vfscanf-internal.c:1309
    0.00 :   657db:  mov    -0x670(%rbp),%rax
    0.00 :   657e2:  mov    (%rax),%rdi
    0.00 :   657e5:  mov    -0x698(%rbp),%rax
    0.00 :   657ec:  lea    0x0(,%rax,4),%rbx
    0.00 :   657f4:  lea    (%rdi,%rbx,1),%rax
    0.00 :   657f8:  cmp    %rax,%rsi
    0.00 :   657fb:  je     69687 <__vfscanf_internal+0x6ca7>
         : 3546  ./stdio-common/vfscanf-internal.c:1353
    0.00 :   65801:  mov    -0x638(%rbp),%r11d
    0.00 :   65808:  test   %r11d,%r11d
    0.00 :   6580b:  jle    65816 <__vfscanf_internal+0x2e36>
         : 3550  ./stdio-common/vfscanf-internal.c:1353 (discriminator 2)
    0.00 :   6580d:  subl   $0x1,-0x638(%rbp)
    0.00 :   65814:  je     6585d <__vfscanf_internal+0x2e7d>
         : 3553  ./stdio-common/vfscanf-internal.c:1353
    0.00 :   65816:  mov    0x8(%r15),%rax
    0.00 :   6581a:  cmp    0x10(%r15),%rax
    0.00 :   6581e:  jae    66e4a <__vfscanf_internal+0x446a>
         : 3557  ./stdio-common/vfscanf-internal.c:1353 (discriminator 7)
    0.00 :   65824:  lea    0x1(%rax),%rdx
    0.00 :   65828:  mov    %rdx,0x8(%r15)
    0.00 :   6582c:  movzbl (%rax),%r13d
         : 3561  ./stdio-common/vfscanf-internal.c:1221 (discriminator 10)
    0.00 :   65830:  mov    -0x658(%rbp),%rsi
    0.00 :   65837:  movslq %r13d,%rax
         : 3564  ./stdio-common/vfscanf-internal.c:1353 (discriminator 10)
    0.00 :   6583a:  add    $0x1,%r14
         : 3566  ./stdio-common/vfscanf-internal.c:1221 (discriminator 10)
    0.00 :   6583e:  mov    0x68(%rsi),%rdx
    0.00 :   65842:  testb  $0x20,0x1(%rdx,%rax,2)
    0.00 :   65847:  je     6357b <__vfscanf_internal+0xb9b>
         : 3570  ./stdio-common/vfscanf-internal.c:1223
    0.00 :   6584d:  movzbl %r13b,%esi
    0.00 :   65851:  mov    %r15,%rdi
    0.00 :   65854:  sub    $0x1,%r14
    0.00 :   65858:  call   8e7b0 <_IO_sputbackc>
         : 3575  ./stdio-common/vfscanf-internal.c:1355
    0.00 :   6585d:  mov    -0x610(%rbp),%r10d
    0.00 :   65864:  test   %r10d,%r10d
    0.00 :   65867:  jne    64918 <__vfscanf_internal+0x1f38>
         : 3579  ./stdio-common/vfscanf-internal.c:2747
    0.00 :   6586d:  mov    -0x6b8(%rbp),%rax
    0.00 :   65874:  movl   $0x0,(%rax)
    0.00 :   6587a:  lea    0x4(%rax),%rbx
         : 3583  ./stdio-common/vfscanf-internal.c:2749
    0.00 :   6587e:  testl  $0x2100,-0x63c(%rbp)
    0.00 :   65888:  je     658b9 <__vfscanf_internal+0x2ed9>
         : 3586  ./stdio-common/vfscanf-internal.c:2750
    0.00 :   6588a:  mov    -0x670(%rbp),%r12
    0.00 :   65891:  mov    %rbx,%rsi
    0.00 :   65894:  mov    (%r12),%rdi
    0.00 :   65898:  sub    %rdi,%rsi
    0.00 :   6589b:  mov    %rsi,%rax
    0.00 :   6589e:  sar    $0x2,%rax
    0.00 :   658a2:  cmp    -0x698(%rbp),%rax
    0.00 :   658a9:  je     658b9 <__vfscanf_internal+0x2ed9>
         : 3595  ./stdio-common/vfscanf-internal.c:2753
    0.00 :   658ab:  call   283b0 <realloc@plt>
         : 3597  ./stdio-common/vfscanf-internal.c:2755
    0.00 :   658b0:  test   %rax,%rax
    0.00 :   658b3:  je     658b9 <__vfscanf_internal+0x2ed9>
         : 3600  ./stdio-common/vfscanf-internal.c:2756
    0.00 :   658b5:  mov    %rax,(%r12)
         : 3602  ./stdio-common/vfscanf-internal.c:2760
    0.00 :   658b9:  addl   $0x1,-0x640(%rbp)
         : 3604  ./stdio-common/vfscanf-internal.c:2747
    0.00 :   658c0:  mov    %rbx,-0x6b8(%rbp)
         : 3606  ./stdio-common/vfscanf-internal.c:2758
    0.00 :   658c7:  movq   $0x0,-0x670(%rbp)
    0.00 :   658d2:  jmp    64918 <__vfscanf_internal+0x1f38>
         : 3609  ./stdio-common/vfscanf-internal.c:984
    0.00 :   658d7:  cmp    $0x1,%rax
    0.00 :   658db:  jne    67da4 <__vfscanf_internal+0x53c4>
         : 3612  ./stdio-common/vfscanf-internal.c:994
    0.00 :   658e1:  mov    -0x620(%rbp),%r11d
         : 3614  ./stdio-common/vfscanf-internal.c:992
    0.00 :   658e8:  addq   $0x4,-0x6b8(%rbp)
         : 3616  ./stdio-common/vfscanf-internal.c:994
    0.00 :   658f0:  test   %r11d,%r11d
    0.00 :   658f3:  jle    66832 <__vfscanf_internal+0x3e52>
         : 3619  ./stdio-common/vfscanf-internal.c:994 (discriminator 3)
    0.00 :   658f9:  mov    0x8(%r15),%rax
    0.00 :   658fd:  cmp    0x10(%r15),%rax
    0.00 :   65901:  jae    6680d <__vfscanf_internal+0x3e2d>
         : 3623  ./stdio-common/vfscanf-internal.c:994 (discriminator 5)
    0.00 :   65907:  lea    0x1(%rax),%rdx
    0.00 :   6590b:  mov    %rdx,0x8(%r15)
    0.00 :   6590f:  movzbl (%rax),%r13d
    0.00 :   65913:  subl   $0x1,-0x620(%rbp)
         : 3628  ./stdio-common/vfscanf-internal.c:994 (discriminator 8)
    0.00 :   6591a:  add    $0x1,%r14
    0.00 :   6591e:  subq   $0x1,-0x638(%rbp)
    0.00 :   65926:  jmp    63755 <__vfscanf_internal+0xd75>
         : 3632  ./stdio-common/vfscanf-internal.c:372 (discriminator 11)
    0.00 :   6592b:  call   91230 <__lll_lock_wait_private>
    0.00 :   65930:  jmp    62e35 <__vfscanf_internal+0x455>
         : 3635  ./stdio-common/vfscanf-internal.c:640 (discriminator 2)
    0.00 :   65935:  mov    0x8(%r15),%rax
    0.00 :   65939:  cmp    0x10(%r15),%rax
    0.00 :   6593d:  jae    66e74 <__vfscanf_internal+0x4494>
         : 3639  ./stdio-common/vfscanf-internal.c:640 (discriminator 5)
    0.00 :   65943:  lea    0x1(%rax),%rdx
    0.00 :   65947:  mov    %rdx,0x8(%r15)
    0.00 :   6594b:  movzbl (%rax),%r13d
         : 3643  ./stdio-common/vfscanf-internal.c:643 (discriminator 8)
    0.00 :   6594f:  cmp    $0x25,%r13d
    0.00 :   65953:  je     64918 <__vfscanf_internal+0x1f38>
         : 3646  ./stdio-common/vfscanf-internal.c:645
    0.00 :   65959:  movzbl %r13b,%esi
    0.00 :   6595d:  mov    %r15,%rdi
    0.00 :   65960:  mov    %r15,%r14
    0.00 :   65963:  call   8e7b0 <_IO_sputbackc>
         : 3651  ./stdio-common/vfscanf-internal.c:646
    0.00 :   65968:  jmp    63108 <__vfscanf_internal+0x728>
         : 3653  ./stdio-common/vfscanf-internal.c:432
    0.00 :   6596d:  movzbl %r13b,%esi
    0.00 :   65971:  mov    %r15,%rdi
    0.00 :   65974:  mov    %r15,%r14
    0.00 :   65977:  call   8e7b0 <_IO_sputbackc>
         : 3658  ./stdio-common/vfscanf-internal.c:433
    0.00 :   6597c:  jmp    63108 <__vfscanf_internal+0x728>
         : 3660  ./stdio-common/vfscanf-internal.c:3025 (discriminator 20)
    0.00 :   65981:  call   91300 <__lll_lock_wake_private>
    0.00 :   65986:  jmp    63136 <__vfscanf_internal+0x756>
         : 3663  ./stdio-common/vfscanf-internal.c:282
    0.00 :   6598b:  movl   $0x0,-0x640(%rbp)
         : 3665  ./stdio-common/vfscanf-internal.c:327
    0.00 :   65995:  movq   $0x0,-0x670(%rbp)
         : 3667  ./stdio-common/vfscanf-internal.c:313
    0.00 :   659a0:  movq   $0x0,-0x6d0(%rbp)
    0.00 :   659ab:  jmp    63108 <__vfscanf_internal+0x728>
         : 3670  char_buffer_add_slow():
         : 3671  ./stdio-common/vfscanf-internal.c:243
    0.00 :   659b0:  pxor   %xmm0,%xmm0
    0.00 :   659b4:  movaps %xmm0,-0x470(%rbp)
         : 3674  ./stdio-common/vfscanf-internal.c:245
    0.00 :   659bb:  jmp    63fd5 <__vfscanf_internal+0x15f5>
         : 3676  __vfscanf_internal():
         : 3677  ./stdio-common/vfscanf-internal.c:1890
    0.00 :   659c0:  test   %eax,%eax
    0.00 :   659c2:  je     66582 <__vfscanf_internal+0x3ba2>
         : 3680  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   659c8:  mov    -0x68c(%rbp),%r12d
    0.00 :   659cf:  test   %r12d,%r12d
    0.00 :   659d2:  je     64141 <__vfscanf_internal+0x1761>
         : 3684  ./stdio-common/vfscanf-internal.c:1891 (discriminator 2)
    0.00 :   659d8:  mov    -0x6c8(%rbp),%rax
    0.00 :   659df:  mov    -0x68c(%rbp),%edi
    0.00 :   659e5:  movdqu (%rax),%xmm5
    0.00 :   659e9:  movups %xmm5,-0x540(%rbp)
    0.00 :   659f0:  mov    0x10(%rax),%rax
    0.00 :   659f4:  movaps %xmm5,-0x630(%rbp)
    0.00 :   659fb:  mov    %rax,-0x530(%rbp)
    0.00 :   65a02:  mov    -0x540(%rbp),%eax
    0.00 :   65a08:  sub    $0x1,%edi
    0.00 :   65a0b:  je     65a38 <__vfscanf_internal+0x3058>
    0.00 :   65a0d:  mov    -0x538(%rbp),%rcx
         : 3696  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   65a14:  mov    %eax,%esi
    0.00 :   65a16:  xor    %r11d,%r11d
    0.00 :   65a19:  cmp    $0x2f,%esi
    0.00 :   65a1c:  ja     66558 <__vfscanf_internal+0x3b78>
    0.00 :   65a22:  add    $0x8,%esi
    0.00 :   65a25:  mov    $0x1,%r11d
    0.00 :   65a2b:  sub    $0x1,%edi
    0.00 :   65a2e:  jne    65a19 <__vfscanf_internal+0x3039>
    0.00 :   65a30:  mov    %esi,-0x540(%rbp)
    0.00 :   65a36:  mov    %esi,%eax
    0.00 :   65a38:  cmp    $0x2f,%eax
    0.00 :   65a3b:  ja     6793f <__vfscanf_internal+0x4f5f>
    0.00 :   65a41:  mov    %eax,%ecx
    0.00 :   65a43:  add    $0x8,%eax
    0.00 :   65a46:  add    -0x530(%rbp),%rcx
    0.00 :   65a4d:  mov    %eax,-0x540(%rbp)
    0.00 :   65a53:  mov    (%rcx),%rax
    0.00 :   65a56:  jmp    64165 <__vfscanf_internal+0x1785>
         : 3715  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   65a5b:  test   %ebx,%ebx
    0.00 :   65a5d:  jne    64481 <__vfscanf_internal+0x1aa1>
         : 3718  ./stdio-common/vfscanf-internal.c:2472 (discriminator 1)
    0.00 :   65a63:  testl  $0x2100,-0x63c(%rbp)
    0.00 :   65a6d:  je     687bf <__vfscanf_internal+0x5ddf>
         : 3721  ./stdio-common/vfscanf-internal.c:2472 (discriminator 3)
    0.00 :   65a73:  mov    -0x68c(%rbp),%r8d
    0.00 :   65a7a:  test   %r8d,%r8d
    0.00 :   65a7d:  jne    67c19 <__vfscanf_internal+0x5239>
         : 3725  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   65a83:  mov    -0x5a8(%rbp),%edx
    0.00 :   65a89:  cmp    $0x2f,%edx
    0.00 :   65a8c:  ja     67bee <__vfscanf_internal+0x520e>
    0.00 :   65a92:  mov    %edx,%eax
    0.00 :   65a94:  add    $0x8,%edx
    0.00 :   65a97:  add    -0x598(%rbp),%rax
    0.00 :   65a9e:  mov    %edx,-0x5a8(%rbp)
    0.00 :   65aa4:  mov    (%rax),%rax
    0.00 :   65aa7:  mov    %rax,-0x670(%rbp)
    0.00 :   65aae:  mov    %rax,%r14
         : 3736  ./stdio-common/vfscanf-internal.c:2472 (discriminator 12)
    0.00 :   65ab1:  test   %r14,%r14
    0.00 :   65ab4:  je     69709 <__vfscanf_internal+0x6d29>
         : 3739  ./stdio-common/vfscanf-internal.c:2472 (discriminator 14)
    0.00 :   65aba:  mov    $0x64,%edi
    0.00 :   65abf:  call   28380 <malloc@plt>
    0.00 :   65ac4:  mov    %rax,-0x6c0(%rbp)
    0.00 :   65acb:  mov    %rax,(%r14)
    0.00 :   65ace:  test   %rax,%rax
    0.00 :   65ad1:  je     696e5 <__vfscanf_internal+0x6d05>
         : 3746  ./stdio-common/vfscanf-internal.c:2472 (discriminator 15)
    0.00 :   65ad7:  mov    -0x6d0(%rbp),%rax
    0.00 :   65ade:  test   %rax,%rax
    0.00 :   65ae1:  je     65af0 <__vfscanf_internal+0x3110>
         : 3750  ./stdio-common/vfscanf-internal.c:2472 (discriminator 18)
    0.00 :   65ae3:  mov    (%rax),%rax
    0.00 :   65ae6:  cmp    $0x20,%rax
    0.00 :   65aea:  jne    6445c <__vfscanf_internal+0x1a7c>
         : 3754  ./stdio-common/vfscanf-internal.c:2472 (discriminator 19)
    0.00 :   65af0:  mov    %rsp,%rax
    0.00 :   65af3:  cmp    %rax,%rsp
    0.00 :   65af6:  je     65b0d <__vfscanf_internal+0x312d>
    0.00 :   65af8:  sub    $0x1000,%rsp
    0.00 :   65aff:  orq    $0x0,0xff8(%rsp)
    0.00 :   65b08:  cmp    %rax,%rsp
    0.00 :   65b0b:  jne    65af8 <__vfscanf_internal+0x3118>
    0.00 :   65b0d:  sub    $0x120,%rsp
    0.00 :   65b14:  orq    $0x0,0x118(%rsp)
    0.00 :   65b1d:  mov    $0x1,%edx
    0.00 :   65b22:  mov    -0x6d0(%rbp),%rsi
    0.00 :   65b29:  lea    0xf(%rsp),%rax
    0.00 :   65b2e:  and    $0xfffffffffffffff0,%rax
    0.00 :   65b32:  movq   $0x0,(%rax)
    0.00 :   65b39:  mov    %rsi,0x8(%rax)
    0.00 :   65b3d:  mov    %rax,-0x6d0(%rbp)
    0.00 :   65b44:  xor    %eax,%eax
    0.00 :   65b46:  jmp    64460 <__vfscanf_internal+0x1a80>
         : 3773  ./stdio-common/vfscanf-internal.c:864 (discriminator 19)
    0.00 :   65b4b:  mov    %rsp,%rax
    0.00 :   65b4e:  cmp    %rax,%rsp
    0.00 :   65b51:  je     65b68 <__vfscanf_internal+0x3188>
    0.00 :   65b53:  sub    $0x1000,%rsp
    0.00 :   65b5a:  orq    $0x0,0xff8(%rsp)
    0.00 :   65b63:  cmp    %rax,%rsp
    0.00 :   65b66:  jne    65b53 <__vfscanf_internal+0x3173>
    0.00 :   65b68:  sub    $0x120,%rsp
    0.00 :   65b6f:  orq    $0x0,0x118(%rsp)
    0.00 :   65b78:  mov    $0x1,%edx
    0.00 :   65b7d:  mov    -0x6d0(%rbp),%rsi
    0.00 :   65b84:  lea    0xf(%rsp),%rax
    0.00 :   65b89:  and    $0xfffffffffffffff0,%rax
    0.00 :   65b8d:  movq   $0x0,(%rax)
    0.00 :   65b94:  mov    %rsi,0x8(%rax)
    0.00 :   65b98:  mov    %rax,-0x6d0(%rbp)
    0.00 :   65b9f:  xor    %eax,%eax
    0.00 :   65ba1:  jmp    636d6 <__vfscanf_internal+0xcf6>
         : 3792  ./stdio-common/vfscanf-internal.c:1209 (discriminator 20)
    0.00 :   65ba6:  mov    %rsp,%rax
    0.00 :   65ba9:  cmp    %rax,%rsp
    0.00 :   65bac:  je     65bc3 <__vfscanf_internal+0x31e3>
    0.00 :   65bae:  sub    $0x1000,%rsp
    0.00 :   65bb5:  orq    $0x0,0xff8(%rsp)
    0.00 :   65bbe:  cmp    %rax,%rsp
    0.00 :   65bc1:  jne    65bae <__vfscanf_internal+0x31ce>
    0.00 :   65bc3:  sub    $0x120,%rsp
    0.00 :   65bca:  orq    $0x0,0x118(%rsp)
    0.00 :   65bd3:  mov    $0x1,%edx
    0.00 :   65bd8:  mov    -0x6d0(%rbp),%rdi
    0.00 :   65bdf:  lea    0xf(%rsp),%rax
    0.00 :   65be4:  and    $0xfffffffffffffff0,%rax
    0.00 :   65be8:  movq   $0x0,(%rax)
    0.00 :   65bef:  mov    %rdi,0x8(%rax)
    0.00 :   65bf3:  mov    %rax,-0x6d0(%rbp)
    0.00 :   65bfa:  xor    %eax,%eax
    0.00 :   65bfc:  jmp    634eb <__vfscanf_internal+0xb0b>
         : 3811  ./stdio-common/vfscanf-internal.c:1733
    0.00 :   65c01:  cmp    $0xffffffff,%r13d
    0.00 :   65c05:  setne  %cl
         : 3814  ./stdio-common/vfscanf-internal.c:1424
    0.00 :   65c08:  testb  $0xa,-0x610(%rbp)
    0.00 :   65c0f:  jne    6518a <__vfscanf_internal+0x27aa>
         : 3817  ./stdio-common/vfscanf-internal.c:1427
    0.00 :   65c15:  mov    -0x638(%rbp),%edi
    0.00 :   65c1b:  xor    %eax,%eax
    0.00 :   65c1d:  test   %edi,%edi
    0.00 :   65c1f:  setg   %al
    0.00 :   65c22:  sub    %eax,%edi
    0.00 :   65c24:  mov    %edi,-0x638(%rbp)
         : 3824  ./stdio-common/vfscanf-internal.c:1428
    0.00 :   65c2a:  cmp    $0xffffffff,%r13d
    0.00 :   65c2e:  je     68465 <__vfscanf_internal+0x5a85>
         : 3827  ./stdio-common/vfscanf-internal.c:1428 (discriminator 2)
    0.00 :   65c34:  mov    0x8(%r15),%rax
    0.00 :   65c38:  cmp    0x10(%r15),%rax
    0.00 :   65c3c:  jae    68365 <__vfscanf_internal+0x5985>
         : 3831  ./stdio-common/vfscanf-internal.c:1428 (discriminator 5)
    0.00 :   65c42:  lea    0x1(%rax),%rdx
    0.00 :   65c46:  mov    %rdx,0x8(%r15)
    0.00 :   65c4a:  movzbl (%rax),%r13d
         : 3835  ./stdio-common/vfscanf-internal.c:1733 (discriminator 8)
    0.00 :   65c4e:  mov    -0x638(%rbp),%r8d
         : 3837  ./stdio-common/vfscanf-internal.c:1428 (discriminator 8)
    0.00 :   65c55:  add    $0x1,%r14
         : 3839  ./stdio-common/vfscanf-internal.c:1733 (discriminator 8)
    0.00 :   65c59:  movl   $0x10,-0x610(%rbp)
    0.00 :   65c63:  test   %r8d,%r8d
    0.00 :   65c66:  jne    63f54 <__vfscanf_internal+0x1574>
    0.00 :   65c6c:  mov    -0x470(%rbp),%rsi
    0.00 :   65c73:  jmp    6404d <__vfscanf_internal+0x166d>
    0.00 :   65c78:  mov    %r14d,-0x638(%rbp)
    0.00 :   65c7f:  mov    -0x470(%rbp),%rsi
    0.00 :   65c86:  mov    %r13,%r14
    0.00 :   65c89:  mov    %r15d,%r13d
    0.00 :   65c8c:  movl   $0x8,-0x610(%rbp)
    0.00 :   65c96:  mov    %r12,%r15
    0.00 :   65c99:  jmp    6404d <__vfscanf_internal+0x166d>
         : 3852  ./stdio-common/vfscanf-internal.c:1933
    0.00 :   65c9e:  movq   $0x0,-0x620(%rbp)
    0.00 :   65ca9:  movzbl %r13b,%eax
         : 3855  ./stdio-common/vfscanf-internal.c:1918
    0.00 :   65cad:  movb   $0x0,-0x668(%rbp)
    0.00 :   65cb4:  jmp    63b14 <__vfscanf_internal+0x1134>
         : 3858  read_int():
         : 3859  ./stdio-common/printf-parse.h:78
    0.00 :   65cb9:  mov    %esi,-0x638(%rbp)
    0.00 :   65cbf:  cmp    $0x9,%ecx
    0.00 :   65cc2:  ja     62ee7 <__vfscanf_internal+0x507>
    0.00 :   65cc8:  jmp    28c5d <__vfscanf_internal.cold+0x2f2>
    0.00 :   65ccd:  nopl   (%rax)
         : 3865  __vfscanf_internal():
         : 3866  ./stdio-common/vfscanf-internal.c:2536
    0.00 :   65cd0:  mov    -0x610(%rbp),%eax
    0.00 :   65cd6:  mov    %rdx,-0x618(%rbp)
    0.00 :   65cdd:  test   %eax,%eax
    0.00 :   65cdf:  je     65f50 <__vfscanf_internal+0x3570>
         : 3871  ./stdio-common/vfscanf-internal.c:2652
    0.00 :   65ce5:  cmp    $0xffffffff,%r13d
    0.00 :   65ce9:  je     6729b <__vfscanf_internal+0x48bb>
         : 3874  ./stdio-common/vfscanf-internal.c:2652 (discriminator 2)
    0.00 :   65cef:  mov    0x8(%r15),%rax
    0.00 :   65cf3:  cmp    0x10(%r15),%rax
    0.00 :   65cf7:  jae    67a99 <__vfscanf_internal+0x50b9>
         : 3878  ./stdio-common/vfscanf-internal.c:2652 (discriminator 5)
    0.00 :   65cfd:  lea    0x1(%rax),%rdx
    0.00 :   65d01:  mov    %rdx,0x8(%r15)
    0.00 :   65d05:  movzbl (%rax),%r13d
         : 3882  ./stdio-common/vfscanf-internal.c:2652 (discriminator 8)
    0.00 :   65d09:  mov    -0x620(%rbp),%rax
         : 3884  ./stdio-common/vfscanf-internal.c:2659 (discriminator 8)
    0.00 :   65d10:  mov    -0x460(%rbp),%rdx
         : 3886  ./stdio-common/vfscanf-internal.c:2655 (discriminator 8)
    0.00 :   65d17:  movq   $0x0,-0x540(%rbp)
         : 3888  ./stdio-common/vfscanf-internal.c:2659 (discriminator 8)
    0.00 :   65d22:  movzbl -0x648(%rbp),%esi
         : 3890  ./stdio-common/vfscanf-internal.c:2652 (discriminator 8)
    0.00 :   65d29:  lea    0x1(%rax),%r14
         : 3892  ./stdio-common/vfscanf-internal.c:2655 (discriminator 8)
    0.00 :   65d2d:  lea    -0x540(%rbp),%rax
    0.00 :   65d34:  mov    %rax,-0x630(%rbp)
         : 3895  ./stdio-common/vfscanf-internal.c:2659 (discriminator 8)
    0.00 :   65d3b:  movslq %r13d,%rax
    0.00 :   65d3e:  cmp    (%rdx,%rax,1),%sil
    0.00 :   65d42:  je     68a58 <__vfscanf_internal+0x6078>
         : 3899  ./stdio-common/vfscanf-internal.c:2685
    0.00 :   65d48:  mov    -0x63c(%rbp),%eax
         : 3901  ./stdio-common/vfscanf-internal.c:2649
    0.00 :   65d4e:  xor    %r12d,%r12d
         : 3903  ./stdio-common/vfscanf-internal.c:2672
    0.00 :   65d51:  mov    %ebx,-0x610(%rbp)
    0.00 :   65d57:  mov    %r12,-0x650(%rbp)
    0.00 :   65d5e:  mov    -0x6b8(%rbp),%rbx
    0.00 :   65d65:  mov    %r15,%r12
    0.00 :   65d68:  mov    %r14,%r15
         : 3909  ./stdio-common/vfscanf-internal.c:2685
    0.00 :   65d6b:  and    $0x2100,%eax
         : 3911  ./stdio-common/vfscanf-internal.c:2672
    0.00 :   65d70:  mov    -0x638(%rbp),%r14d
         : 3913  ./stdio-common/vfscanf-internal.c:2685
    0.00 :   65d77:  mov    %eax,-0x668(%rbp)
         : 3915  ./stdio-common/vfscanf-internal.c:2672
    0.00 :   65d7d:  lea    -0x50(%rbp),%rax
    0.00 :   65d81:  mov    %rax,-0x660(%rbp)
    0.00 :   65d88:  jmp    65de1 <__vfscanf_internal+0x3401>
    0.00 :   65d8a:  nopw   0x0(%rax,%rax,1)
         : 3920  ./stdio-common/vfscanf-internal.c:2730
    0.00 :   65d90:  test   %r14d,%r14d
    0.00 :   65d93:  js     65da2 <__vfscanf_internal+0x33c2>
         : 3923  ./stdio-common/vfscanf-internal.c:2730 (discriminator 1)
    0.00 :   65d95:  sub    $0x1,%r14d
    0.00 :   65d99:  test   %r14d,%r14d
    0.00 :   65d9c:  jle    68717 <__vfscanf_internal+0x5d37>
         : 3927  ./stdio-common/vfscanf-internal.c:2733
    0.00 :   65da2:  mov    0x8(%r12),%rax
    0.00 :   65da7:  cmp    0x10(%r12),%rax
    0.00 :   65dac:  jae    65ea0 <__vfscanf_internal+0x34c0>
         : 3931  ./stdio-common/vfscanf-internal.c:2733 (discriminator 5)
    0.00 :   65db2:  lea    0x1(%rax),%rdx
    0.00 :   65db6:  mov    %rdx,0x8(%r12)
    0.00 :   65dbb:  movzbl (%rax),%r13d
         : 3935  ./stdio-common/vfscanf-internal.c:2659 (discriminator 8)
    0.00 :   65dbf:  mov    -0x460(%rbp),%rcx
    0.00 :   65dc6:  movslq %r13d,%rax
    0.00 :   65dc9:  movzbl -0x648(%rbp),%edi
         : 3939  ./stdio-common/vfscanf-internal.c:2733 (discriminator 8)
    0.00 :   65dd0:  lea    0x1(%r15),%rdx
         : 3941  ./stdio-common/vfscanf-internal.c:2659 (discriminator 8)
    0.00 :   65dd4:  cmp    %dil,(%rcx,%rax,1)
    0.00 :   65dd8:  je     67750 <__vfscanf_internal+0x4d70>
         : 3944  ./stdio-common/vfscanf-internal.c:2733
    0.00 :   65dde:  mov    %rdx,%r15
         : 3946  ./stdio-common/vfscanf-internal.c:2666
    0.00 :   65de1:  mov    -0x610(%rbp),%esi
    0.00 :   65de7:  test   %esi,%esi
    0.00 :   65de9:  jne    65d90 <__vfscanf_internal+0x33b0>
         : 3950  ./stdio-common/vfscanf-internal.c:2672
    0.00 :   65deb:  mov    -0x630(%rbp),%rcx
    0.00 :   65df2:  mov    $0x1,%edx
    0.00 :   65df7:  mov    %rbx,%rdi
         : 3954  ./stdio-common/vfscanf-internal.c:2671
    0.00 :   65dfa:  mov    %r13b,-0x50(%rbp)
         : 3956  ./stdio-common/vfscanf-internal.c:2672
    0.00 :   65dfe:  mov    -0x660(%rbp),%rsi
    0.00 :   65e05:  call   c5fb0 <__mbrtowc>
         : 3959  ./stdio-common/vfscanf-internal.c:2674
    0.00 :   65e0a:  cmp    $0xfffffffffffffffe,%rax
    0.00 :   65e0e:  je     65f12 <__vfscanf_internal+0x3532>
         : 3962  ./stdio-common/vfscanf-internal.c:2685
    0.00 :   65e14:  mov    -0x668(%rbp),%ecx
         : 3964  ./stdio-common/vfscanf-internal.c:2684
    0.00 :   65e1a:  add    $0x4,%rbx
         : 3966  ./stdio-common/vfscanf-internal.c:2685
    0.00 :   65e1e:  test   %ecx,%ecx
    0.00 :   65e20:  je     65f02 <__vfscanf_internal+0x3522>
         : 3969  ./stdio-common/vfscanf-internal.c:2686
    0.00 :   65e26:  mov    -0x670(%rbp),%rax
         : 3971  ./stdio-common/vfscanf-internal.c:2682
    0.00 :   65e2d:  movq   $0x0,-0x650(%rbp)
         : 3973  ./stdio-common/vfscanf-internal.c:2686
    0.00 :   65e38:  mov    (%rax),%rdi
    0.00 :   65e3b:  mov    -0x698(%rbp),%rax
    0.00 :   65e42:  lea    0x0(,%rax,4),%rdx
    0.00 :   65e4a:  lea    (%rdi,%rdx,1),%rax
    0.00 :   65e4e:  cmp    %rax,%rbx
    0.00 :   65e51:  jne    65d90 <__vfscanf_internal+0x33b0>
         : 3980  ./stdio-common/vfscanf-internal.c:2689
    0.00 :   65e57:  mov    -0x698(%rbp),%rax
    0.00 :   65e5e:  mov    %rdx,-0x638(%rbp)
    0.00 :   65e65:  lea    0x0(,%rax,8),%rsi
    0.00 :   65e6d:  call   283b0 <realloc@plt>
         : 3985  ./stdio-common/vfscanf-internal.c:2692
    0.00 :   65e72:  mov    -0x638(%rbp),%rdx
    0.00 :   65e79:  test   %rax,%rax
         : 3988  ./stdio-common/vfscanf-internal.c:2689
    0.00 :   65e7c:  mov    %rax,%rbx
         : 3990  ./stdio-common/vfscanf-internal.c:2692
    0.00 :   65e7f:  je     6910b <__vfscanf_internal+0x672b>
         : 3992  ./stdio-common/vfscanf-internal.c:2723
    0.00 :   65e85:  mov    -0x670(%rbp),%rax
         : 3994  ./stdio-common/vfscanf-internal.c:2725
    0.00 :   65e8c:  shlq   -0x698(%rbp)
         : 3996  ./stdio-common/vfscanf-internal.c:2723
    0.00 :   65e93:  mov    %rbx,(%rax)
         : 3998  ./stdio-common/vfscanf-internal.c:2724
    0.00 :   65e96:  add    %rdx,%rbx
         : 4000  ./stdio-common/vfscanf-internal.c:2725
    0.00 :   65e99:  jmp    65d90 <__vfscanf_internal+0x33b0>
    0.00 :   65e9e:  xchg   %ax,%ax
         : 4003  ./stdio-common/vfscanf-internal.c:2733 (discriminator 4)
    0.00 :   65ea0:  mov    %r12,%rdi
    0.00 :   65ea3:  call   8da40 <__uflow>
    0.00 :   65ea8:  mov    %eax,%r13d
    0.00 :   65eab:  cmp    $0xffffffff,%eax
    0.00 :   65eae:  jne    65dbf <__vfscanf_internal+0x33df>
         : 4009  ./stdio-common/vfscanf-internal.c:2733 (discriminator 9)
    0.00 :   65eb4:  mov    0x1b3f55(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   65ebb:  mov    %rbx,-0x6b8(%rbp)
    0.00 :   65ec2:  mov    %r15,%r14
    0.00 :   65ec5:  mov    %r12,%r15
    0.00 :   65ec8:  mov    -0x610(%rbp),%ebx
    0.00 :   65ece:  mov    -0x650(%rbp),%r12
    0.00 :   65ed5:  mov    %fs:(%r10),%eax
    0.00 :   65ed9:  mov    %eax,-0x600(%rbp)
         : 4018  ./stdio-common/vfscanf-internal.c:2735
    0.00 :   65edf:  test   %r12,%r12
    0.00 :   65ee2:  jne    6789f <__vfscanf_internal+0x4ebf>
         : 4021  ./stdio-common/vfscanf-internal.c:2741
    0.00 :   65ee8:  cmp    -0x620(%rbp),%r14
    0.00 :   65eef:  je     68f93 <__vfscanf_internal+0x65b3>
         : 4024  ./stdio-common/vfscanf-internal.c:2745
    0.00 :   65ef5:  test   %ebx,%ebx
    0.00 :   65ef7:  jne    64918 <__vfscanf_internal+0x1f38>
    0.00 :   65efd:  jmp    6586d <__vfscanf_internal+0x2e8d>
         : 4028  ./stdio-common/vfscanf-internal.c:2682
    0.00 :   65f02:  movq   $0x0,-0x650(%rbp)
    0.00 :   65f0d:  jmp    65d90 <__vfscanf_internal+0x33b0>
         : 4031  ./stdio-common/vfscanf-internal.c:2678
    0.00 :   65f12:  addq   $0x1,-0x650(%rbp)
    0.00 :   65f1a:  mov    -0x650(%rbp),%rax
         : 4034  ./stdio-common/vfscanf-internal.c:2679
    0.00 :   65f21:  cmp    $0xf,%rax
    0.00 :   65f25:  jbe    65da2 <__vfscanf_internal+0x33c2>
         : 4037  ./stdio-common/vfscanf-internal.c:2679 (discriminator 1)
    0.00 :   65f2b:  lea    0x17b73e(%rip),%rcx        # 1e1670 <__PRETTY_FUNCTION__.0>
    0.00 :   65f32:  mov    $0xa77,%edx
    0.00 :   65f37:  lea    0x1728ef(%rip),%rsi        # 1d882d <not_available+0x2cf>
    0.00 :   65f3e:  lea    0x1728fb(%rip),%rdi        # 1d8840 <not_available+0x2e2>
    0.00 :   65f45:  call   39e50 <__assert_fail>
    0.00 :   65f4a:  nopw   0x0(%rax,%rax,1)
         : 4044  ./stdio-common/vfscanf-internal.c:2767
    0.00 :   65f50:  cmp    $0xffffffff,%r13d
    0.00 :   65f54:  je     674d5 <__vfscanf_internal+0x4af5>
         : 4047  ./stdio-common/vfscanf-internal.c:2767 (discriminator 2)
    0.00 :   65f5a:  mov    0x8(%r15),%rax
    0.00 :   65f5e:  cmp    0x10(%r15),%rax
    0.00 :   65f62:  jae    67883 <__vfscanf_internal+0x4ea3>
         : 4051  ./stdio-common/vfscanf-internal.c:2767 (discriminator 5)
    0.00 :   65f68:  lea    0x1(%rax),%rdx
    0.00 :   65f6c:  mov    %rdx,0x8(%r15)
    0.00 :   65f70:  movzbl (%rax),%r13d
         : 4055  ./stdio-common/vfscanf-internal.c:2767 (discriminator 8)
    0.00 :   65f74:  mov    -0x620(%rbp),%rax
         : 4057  ./stdio-common/vfscanf-internal.c:2887 (discriminator 8)
    0.00 :   65f7b:  mov    -0x460(%rbp),%rdx
    0.00 :   65f82:  movzbl -0x648(%rbp),%esi
         : 4060  ./stdio-common/vfscanf-internal.c:2767 (discriminator 8)
    0.00 :   65f89:  lea    0x1(%rax),%r14
         : 4062  ./stdio-common/vfscanf-internal.c:2887 (discriminator 8)
    0.00 :   65f8d:  movslq %r13d,%rax
    0.00 :   65f90:  cmp    (%rdx,%rax,1),%sil
    0.00 :   65f94:  je     68f87 <__vfscanf_internal+0x65a7>
         : 4066  ./stdio-common/vfscanf-internal.c:2897
    0.00 :   65f9a:  mov    -0x63c(%rbp),%r12d
    0.00 :   65fa1:  mov    %ebx,%eax
    0.00 :   65fa3:  mov    -0x6c0(%rbp),%rsi
    0.00 :   65faa:  mov    %r14,%rbx
    0.00 :   65fad:  mov    %r13d,%r14d
    0.00 :   65fb0:  mov    %eax,%r13d
    0.00 :   65fb3:  and    $0x2100,%r12d
    0.00 :   65fba:  mov    %r12d,-0x630(%rbp)
    0.00 :   65fc1:  mov    -0x638(%rbp),%r12d
    0.00 :   65fc8:  jmp    66032 <__vfscanf_internal+0x3652>
         : 4077  ./stdio-common/vfscanf-internal.c:2898
    0.00 :   65fca:  mov    -0x670(%rbp),%rdi
    0.00 :   65fd1:  mov    -0x698(%rbp),%rsi
    0.00 :   65fd8:  mov    (%rdi),%rdi
    0.00 :   65fdb:  lea    (%rdi,%rsi,1),%r9
    0.00 :   65fdf:  mov    %rax,%rsi
    0.00 :   65fe2:  cmp    %r9,%rax
    0.00 :   65fe5:  je     67464 <__vfscanf_internal+0x4a84>
         : 4085  ./stdio-common/vfscanf-internal.c:2936
    0.00 :   65feb:  test   %r12d,%r12d
    0.00 :   65fee:  js     65ffa <__vfscanf_internal+0x361a>
         : 4088  ./stdio-common/vfscanf-internal.c:2936 (discriminator 2)
    0.00 :   65ff0:  sub    $0x1,%r12d
    0.00 :   65ff4:  je     67956 <__vfscanf_internal+0x4f76>
         : 4091  ./stdio-common/vfscanf-internal.c:2936
    0.00 :   65ffa:  mov    0x8(%r15),%rax
    0.00 :   65ffe:  cmp    0x10(%r15),%rax
    0.00 :   66002:  jae    6604d <__vfscanf_internal+0x366d>
         : 4095  ./stdio-common/vfscanf-internal.c:2936 (discriminator 7)
    0.00 :   66004:  lea    0x1(%rax),%rdi
    0.00 :   66008:  mov    %rdi,0x8(%r15)
    0.00 :   6600c:  movzbl (%rax),%r14d
         : 4099  ./stdio-common/vfscanf-internal.c:2887 (discriminator 10)
    0.00 :   66010:  mov    -0x460(%rbp),%r9
    0.00 :   66017:  movslq %r14d,%rax
    0.00 :   6601a:  movzbl -0x648(%rbp),%edx
         : 4103  ./stdio-common/vfscanf-internal.c:2936 (discriminator 10)
    0.00 :   66021:  lea    0x1(%rbx),%rdi
         : 4105  ./stdio-common/vfscanf-internal.c:2887 (discriminator 10)
    0.00 :   66025:  cmp    %dl,(%r9,%rax,1)
    0.00 :   66029:  je     67860 <__vfscanf_internal+0x4e80>
         : 4108  ./stdio-common/vfscanf-internal.c:2936
    0.00 :   6602f:  mov    %rdi,%rbx
         : 4110  ./stdio-common/vfscanf-internal.c:2894
    0.00 :   66032:  test   %r13d,%r13d
    0.00 :   66035:  jne    65feb <__vfscanf_internal+0x360b>
         : 4113  ./stdio-common/vfscanf-internal.c:2897
    0.00 :   66037:  mov    -0x630(%rbp),%edx
         : 4115  ./stdio-common/vfscanf-internal.c:2896
    0.00 :   6603d:  mov    %r14b,(%rsi)
    0.00 :   66040:  lea    0x1(%rsi),%rax
         : 4118  ./stdio-common/vfscanf-internal.c:2897
    0.00 :   66044:  test   %edx,%edx
    0.00 :   66046:  jne    65fca <__vfscanf_internal+0x35ea>
         : 4121  ./stdio-common/vfscanf-internal.c:2896
    0.00 :   66048:  mov    %rax,%rsi
    0.00 :   6604b:  jmp    65feb <__vfscanf_internal+0x360b>
         : 4124  ./stdio-common/vfscanf-internal.c:2936 (discriminator 6)
    0.00 :   6604d:  mov    %r15,%rdi
    0.00 :   66050:  mov    %rsi,-0x638(%rbp)
    0.00 :   66057:  call   8da40 <__uflow>
    0.00 :   6605c:  mov    -0x638(%rbp),%rsi
    0.00 :   66063:  cmp    $0xffffffff,%eax
    0.00 :   66066:  mov    %eax,%r14d
    0.00 :   66069:  jne    66010 <__vfscanf_internal+0x3630>
         : 4132  ./stdio-common/vfscanf-internal.c:2936 (discriminator 11)
    0.00 :   6606b:  mov    0x1b3d9e(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66072:  mov    %r13d,%eax
    0.00 :   66075:  mov    %rsi,-0x6c0(%rbp)
    0.00 :   6607c:  mov    %r14d,%r13d
    0.00 :   6607f:  mov    %rbx,%r14
    0.00 :   66082:  mov    %eax,%ebx
    0.00 :   66084:  mov    %fs:(%r10),%eax
    0.00 :   66088:  mov    %eax,-0x600(%rbp)
         : 4141  ./stdio-common/vfscanf-internal.c:2939
    0.00 :   6608e:  cmp    -0x620(%rbp),%r14
    0.00 :   66095:  jne    655d5 <__vfscanf_internal+0x2bf5>
    0.00 :   6609b:  mov    %r15,%r14
    0.00 :   6609e:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   660a3:  nopl   0x0(%rax,%rax,1)
         : 4147  ./stdio-common/vfscanf-internal.c:2520
    0.00 :   660a8:  mov    -0x618(%rbp),%rdi
         : 4149  ./stdio-common/vfscanf-internal.c:2516
    0.00 :   660af:  mov    -0x460(%rbp),%rdx
         : 4151  ./stdio-common/vfscanf-internal.c:2517
    0.00 :   660b6:  lea    0x1(%rdi),%rsi
         : 4153  ./stdio-common/vfscanf-internal.c:2516
    0.00 :   660ba:  movb   $0x1,(%rdx,%rax,1)
         : 4155  ./stdio-common/vfscanf-internal.c:2520
    0.00 :   660be:  movzbl 0x1(%rdi),%eax
         : 4157  ./stdio-common/vfscanf-internal.c:2517
    0.00 :   660c2:  mov    %rsi,-0x618(%rbp)
    0.00 :   660c9:  jmp    64510 <__vfscanf_internal+0x1b30>
    0.00 :   660ce:  mov    %r15,%r14
    0.00 :   660d1:  jmp    63108 <__vfscanf_internal+0x728>
         : 4162  char_buffer_error():
         : 4163  ./stdio-common/vfscanf-internal.c:231
    0.00 :   660d6:  mov    -0x470(%rbp),%rcx
    0.00 :   660dd:  mov    %ebx,%r10d
         : 4166  __vfscanf_internal():
         : 4167  ./stdio-common/vfscanf-internal.c:1692
    0.00 :   660e0:  test   %rcx,%rcx
    0.00 :   660e3:  jne    650ab <__vfscanf_internal+0x26cb>
    0.00 :   660e9:  jmp    66f52 <__vfscanf_internal+0x4572>
    0.00 :   660ee:  xchg   %ax,%ax
         : 4172  ./stdio-common/vfscanf-internal.c:1211 (discriminator 4)
    0.00 :   660f0:  mov    %r15,%rdi
    0.00 :   660f3:  call   8da40 <__uflow>
    0.00 :   660f8:  mov    %eax,%r13d
    0.00 :   660fb:  cmp    $0xffffffff,%eax
    0.00 :   660fe:  jne    63530 <__vfscanf_internal+0xb50>
    0.00 :   66104:  mov    %r15,%r14
    0.00 :   66107:  jmp    63da2 <__vfscanf_internal+0x13c2>
         : 4180  ./stdio-common/vfscanf-internal.c:866 (discriminator 4)
    0.00 :   6610c:  mov    %r15,%rdi
    0.00 :   6610f:  call   8da40 <__uflow>
    0.00 :   66114:  mov    %eax,%r13d
    0.00 :   66117:  cmp    $0xffffffff,%eax
    0.00 :   6611a:  jne    63710 <__vfscanf_internal+0xd30>
    0.00 :   66120:  mov    %r15,%r14
    0.00 :   66123:  jmp    63dd0 <__vfscanf_internal+0x13f0>
         : 4188  ./stdio-common/vfscanf-internal.c:1806
    0.00 :   66128:  mov    0x1b3ce1(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6612f:  mov    %r15,%r14
    0.00 :   66132:  movl   $0xc,%fs:(%rax)
         : 4192  ./stdio-common/vfscanf-internal.c:1807
    0.00 :   66139:  movl   $0xffffffff,-0x640(%rbp)
         : 4194  ./stdio-common/vfscanf-internal.c:1808
    0.00 :   66143:  jmp    63108 <__vfscanf_internal+0x728>
         : 4196  ./stdio-common/vfscanf-internal.c:1775
    0.00 :   66148:  cmp    %r12,-0x680(%rbp)
    0.00 :   6614f:  jae    64056 <__vfscanf_internal+0x1676>
         : 4199  ./stdio-common/vfscanf-internal.c:1777
    0.00 :   66155:  mov    %r12,%rax
    0.00 :   66158:  sub    -0x680(%rbp),%rax
    0.00 :   6615f:  sub    %rax,%rsi
    0.00 :   66162:  mov    %rsi,-0x470(%rbp)
         : 4204  ./stdio-common/vfscanf-internal.c:1778 (discriminator 2)
    0.00 :   66169:  movzbl %r13b,%esi
    0.00 :   6616d:  mov    %r15,%rdi
    0.00 :   66170:  sub    $0x1,%r14
    0.00 :   66174:  call   8e7b0 <_IO_sputbackc>
         : 4209  ./stdio-common/vfscanf-internal.c:1779
    0.00 :   66179:  lea    -0x1(%r12),%r13
    0.00 :   6617e:  cmp    %r13,-0x680(%rbp)
    0.00 :   66185:  jae    661b6 <__vfscanf_internal+0x37d6>
    0.00 :   66187:  mov    %r13,%rbx
         : 4214  ./stdio-common/vfscanf-internal.c:1780
    0.00 :   6618a:  movzbl (%rbx),%esi
    0.00 :   6618d:  mov    %r15,%rdi
         : 4217  ./stdio-common/vfscanf-internal.c:1779
    0.00 :   66190:  sub    $0x1,%rbx
         : 4219  ./stdio-common/vfscanf-internal.c:1780
    0.00 :   66194:  call   8e7b0 <_IO_sputbackc>
         : 4221  ./stdio-common/vfscanf-internal.c:1779
    0.00 :   66199:  cmp    %rbx,-0x680(%rbp)
    0.00 :   661a0:  jne    6618a <__vfscanf_internal+0x37aa>
    0.00 :   661a2:  mov    -0x680(%rbp),%rax
    0.00 :   661a9:  add    $0x1,%rax
    0.00 :   661ad:  sub    %r12,%rax
         : 4227  ./stdio-common/vfscanf-internal.c:1780
    0.00 :   661b0:  add    %rax,%r14
         : 4229  ./stdio-common/vfscanf-internal.c:1779
    0.00 :   661b3:  add    %rax,%r13
         : 4231  ./stdio-common/vfscanf-internal.c:1781
    0.00 :   661b6:  movzbl 0x0(%r13),%r13d
    0.00 :   661bb:  mov    -0x470(%rbp),%rsi
    0.00 :   661c2:  jmp    6404d <__vfscanf_internal+0x166d>
         : 4235  ./stdio-common/vfscanf-internal.c:640 (discriminator 1)
    0.00 :   661c7:  mov    -0x600(%rbp),%eax
    0.00 :   661cd:  mov    %r15,%r14
    0.00 :   661d0:  mov    %eax,%fs:(%r10)
         : 4239  ./stdio-common/vfscanf-internal.c:642
    0.00 :   661d4:  mov    -0x640(%rbp),%edi
    0.00 :   661da:  mov    $0xffffffff,%eax
    0.00 :   661df:  test   %edi,%edi
    0.00 :   661e1:  cmovne %edi,%eax
    0.00 :   661e4:  mov    %eax,-0x640(%rbp)
    0.00 :   661ea:  jmp    63108 <__vfscanf_internal+0x728>
         : 4246  char_buffer_error():
         : 4247  ./stdio-common/vfscanf-internal.c:231
    0.00 :   661ef:  mov    -0x470(%rbp),%rsi
    0.00 :   661f6:  mov    %r12,%rax
    0.00 :   661f9:  mov    %r15,%r12
    0.00 :   661fc:  mov    %rax,%r15
         : 4252  __vfscanf_internal():
         : 4253  ./stdio-common/vfscanf-internal.c:1692
    0.00 :   661ff:  test   %rsi,%rsi
    0.00 :   66202:  jne    692a8 <__vfscanf_internal+0x68c8>
    0.00 :   66208:  mov    %r15,%r14
         : 4257  ./stdio-common/vfscanf-internal.c:1694
    0.00 :   6620b:  mov    0x1b3bfe(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66212:  movl   $0xc,%fs:(%rax)
         : 4260  ./stdio-common/vfscanf-internal.c:1695
    0.00 :   66219:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   66223:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   66228:  mov    %ebx,%r10d
    0.00 :   6622b:  jmp    6508b <__vfscanf_internal+0x26ab>
         : 4265  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   66230:  mov    -0x5a0(%rbp),%rax
    0.00 :   66237:  lea    0x8(%rax),%rdx
    0.00 :   6623b:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   66242:  jmp    63497 <__vfscanf_internal+0xab7>
         : 4270  ./stdio-common/vfscanf-internal.c:1209 (discriminator 4)
    0.00 :   66247:  mov    -0x68c(%rbp),%ecx
    0.00 :   6624d:  test   %ecx,%ecx
    0.00 :   6624f:  jne    68582 <__vfscanf_internal+0x5ba2>
         : 4274  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   66255:  mov    -0x5a8(%rbp),%edx
    0.00 :   6625b:  cmp    $0x2f,%edx
    0.00 :   6625e:  ja     67656 <__vfscanf_internal+0x4c76>
    0.00 :   66264:  mov    %edx,%eax
    0.00 :   66266:  add    $0x8,%edx
    0.00 :   66269:  add    -0x598(%rbp),%rax
    0.00 :   66270:  mov    %edx,-0x5a8(%rbp)
    0.00 :   66276:  mov    (%rax),%rax
    0.00 :   66279:  mov    %rax,-0x6b8(%rbp)
         : 4284  ./stdio-common/vfscanf-internal.c:1209 (discriminator 33)
    0.00 :   66280:  cmpq   $0x0,-0x6b8(%rbp)
    0.00 :   66288:  jne    6350c <__vfscanf_internal+0xb2c>
    0.00 :   6628e:  mov    %r15,%r14
    0.00 :   66291:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   66296:  cs nopw 0x0(%rax,%rax,1)
         : 4290  ./stdio-common/vfscanf-internal.c:864
    0.00 :   662a0:  mov    -0x5a0(%rbp),%rax
    0.00 :   662a7:  lea    0x8(%rax),%rdx
    0.00 :   662ab:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   662b2:  jmp    63666 <__vfscanf_internal+0xc86>
         : 4295  char_buffer_add_slow():
         : 4296  ./stdio-common/vfscanf-internal.c:238
    0.00 :   662b7:  test   %rax,%rax
    0.00 :   662ba:  je     63e59 <__vfscanf_internal+0x1479>
         : 4299  ./stdio-common/vfscanf-internal.c:240
    0.00 :   662c0:  sub    -0x460(%rbp),%rax
         : 4301  scratch_buffer_grow_preserve():
         : 4302  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   662c7:  lea    -0x460(%rbp),%rdi
         : 4304  char_buffer_add_slow():
         : 4305  ./stdio-common/vfscanf-internal.c:240
    0.00 :   662ce:  mov    %rax,%rbx
         : 4307  scratch_buffer_grow_preserve():
         : 4308  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   662d1:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 4310  char_buffer_add_slow():
         : 4311  ./stdio-common/vfscanf-internal.c:241
    0.00 :   662d6:  test   %al,%al
    0.00 :   662d8:  je     68c5a <__vfscanf_internal+0x627a>
         : 4314  char_buffer_start():
         : 4315  ./stdio-common/vfscanf-internal.c:206
    0.00 :   662de:  mov    -0x460(%rbp),%rax
         : 4317  char_buffer_add_slow():
         : 4318  ./stdio-common/vfscanf-internal.c:248
    0.00 :   662e5:  add    %rax,%rbx
         : 4320  char_buffer_rewind():
         : 4321  ./stdio-common/vfscanf-internal.c:223
    0.00 :   662e8:  add    -0x458(%rbp),%rax
         : 4323  char_buffer_add_slow():
         : 4324  ./stdio-common/vfscanf-internal.c:249
    0.00 :   662ef:  lea    0x1(%rbx),%rdi
    0.00 :   662f3:  movq   %rax,%xmm6
    0.00 :   662f8:  movq   %rdi,%xmm0
    0.00 :   662fd:  punpcklqdq %xmm6,%xmm0
    0.00 :   66301:  movaps %xmm0,-0x470(%rbp)
    0.00 :   66308:  mov    %r13b,(%rbx)
    0.00 :   6630b:  jmp    63e59 <__vfscanf_internal+0x1479>
    0.00 :   66310:  mov    %r15,%r14
         : 4333  __vfscanf_internal():
         : 4334  ./stdio-common/vfscanf-internal.c:1846
    0.00 :   66313:  mov    0x1b3af6(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6631a:  movl   $0xc,%fs:(%rax)
         : 4337  ./stdio-common/vfscanf-internal.c:1847
    0.00 :   66321:  movl   $0xffffffff,-0x640(%rbp)
         : 4339  ./stdio-common/vfscanf-internal.c:1848
    0.00 :   6632b:  jmp    63108 <__vfscanf_internal+0x728>
         : 4341  ./stdio-common/vfscanf-internal.c:1879
    0.00 :   66330:  testb  $0x4,-0x63c(%rbp)
    0.00 :   66337:  je     673d2 <__vfscanf_internal+0x49f2>
         : 4344  ./stdio-common/vfscanf-internal.c:1880
    0.00 :   6633d:  mov    -0x68c(%rbp),%eax
    0.00 :   66343:  test   %eax,%eax
    0.00 :   66345:  jne    6850c <__vfscanf_internal+0x5b2c>
         : 4348  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   6634b:  mov    -0x5a8(%rbp),%ecx
    0.00 :   66351:  cmp    $0x2f,%ecx
    0.00 :   66354:  ja     67d58 <__vfscanf_internal+0x5378>
    0.00 :   6635a:  mov    %ecx,%eax
    0.00 :   6635c:  add    $0x8,%ecx
    0.00 :   6635f:  add    -0x598(%rbp),%rax
    0.00 :   66366:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   6636c:  mov    (%rax),%rax
         : 4357  ./stdio-common/vfscanf-internal.c:1894
    0.00 :   6636f:  mov    %dx,(%rax)
    0.00 :   66372:  jmp    64168 <__vfscanf_internal+0x1788>
         : 4360  char_buffer_add():
         : 4361  ./stdio-common/vfscanf-internal.c:260
    0.00 :   66377:  cmp    %rsi,-0x468(%rbp)
    0.00 :   6637e:  je     69443 <__vfscanf_internal+0x6a63>
         : 4364  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66384:  lea    0x1(%rsi),%rax
    0.00 :   66388:  mov    %rax,-0x470(%rbp)
    0.00 :   6638f:  mov    %r13b,(%rsi)
         : 4368  __vfscanf_internal():
         : 4369  ./stdio-common/vfscanf-internal.c:1937
    0.00 :   66392:  mov    -0x638(%rbp),%r9d
    0.00 :   66399:  test   %r9d,%r9d
    0.00 :   6639c:  je     673ac <__vfscanf_internal+0x49cc>
         : 4373  ./stdio-common/vfscanf-internal.c:1938
    0.00 :   663a2:  mov    0x8(%r15),%rax
    0.00 :   663a6:  cmp    0x10(%r15),%rax
    0.00 :   663aa:  jae    68247 <__vfscanf_internal+0x5867>
         : 4377  ./stdio-common/vfscanf-internal.c:1938 (discriminator 2)
    0.00 :   663b0:  lea    0x1(%rax),%rdx
    0.00 :   663b4:  mov    %rdx,0x8(%r15)
    0.00 :   663b8:  movzbl (%rax),%eax
    0.00 :   663bb:  mov    %rax,%rdx
         : 4382  ./stdio-common/vfscanf-internal.c:1939 (discriminator 5)
    0.00 :   663be:  mov    -0x658(%rbp),%rsi
    0.00 :   663c5:  mov    0x70(%rsi),%rcx
         : 4385  ./stdio-common/vfscanf-internal.c:1937 (discriminator 5)
    0.00 :   663c9:  cmpl   $0x61,(%rcx,%rdx,4)
    0.00 :   663cd:  jne    6943b <__vfscanf_internal+0x6a5b>
         : 4388  ./stdio-common/vfscanf-internal.c:1942
    0.00 :   663d3:  mov    -0x638(%rbp),%edi
    0.00 :   663d9:  xor    %edx,%edx
    0.00 :   663db:  test   %edi,%edi
    0.00 :   663dd:  setg   %dl
    0.00 :   663e0:  sub    %edx,%edi
         : 4394  char_buffer_add():
         : 4395  ./stdio-common/vfscanf-internal.c:260
    0.00 :   663e2:  mov    -0x470(%rbp),%rdx
         : 4397  __vfscanf_internal():
         : 4398  ./stdio-common/vfscanf-internal.c:1942
    0.00 :   663e9:  mov    %edi,-0x638(%rbp)
         : 4400  char_buffer_add():
         : 4401  ./stdio-common/vfscanf-internal.c:260
    0.00 :   663ef:  cmp    -0x468(%rbp),%rdx
    0.00 :   663f6:  je     68c1e <__vfscanf_internal+0x623e>
         : 4404  ./stdio-common/vfscanf-internal.c:263
    0.00 :   663fc:  lea    0x1(%rdx),%rcx
    0.00 :   66400:  mov    %rcx,-0x470(%rbp)
    0.00 :   66407:  mov    %al,(%rdx)
         : 4408  __vfscanf_internal():
         : 4409  ./stdio-common/vfscanf-internal.c:1944
    0.00 :   66409:  mov    -0x638(%rbp),%r10d
    0.00 :   66410:  test   %r10d,%r10d
    0.00 :   66413:  je     6823f <__vfscanf_internal+0x585f>
         : 4413  ./stdio-common/vfscanf-internal.c:1945
    0.00 :   66419:  mov    0x8(%r15),%rax
    0.00 :   6641d:  cmp    0x10(%r15),%rax
    0.00 :   66421:  jae    68223 <__vfscanf_internal+0x5843>
         : 4417  ./stdio-common/vfscanf-internal.c:1945 (discriminator 2)
    0.00 :   66427:  lea    0x1(%rax),%rdx
    0.00 :   6642b:  mov    %rdx,0x8(%r15)
    0.00 :   6642f:  movzbl (%rax),%r13d
    0.00 :   66433:  mov    %r13,%rax
         : 4422  ./stdio-common/vfscanf-internal.c:1946 (discriminator 5)
    0.00 :   66436:  mov    -0x658(%rbp),%rsi
         : 4424  ./stdio-common/vfscanf-internal.c:1945 (discriminator 5)
    0.00 :   6643d:  lea    0x2(%r12),%r14
         : 4426  ./stdio-common/vfscanf-internal.c:1946 (discriminator 5)
    0.00 :   66442:  mov    0x70(%rsi),%rdx
         : 4428  ./stdio-common/vfscanf-internal.c:1944 (discriminator 5)
    0.00 :   66446:  cmpl   $0x6e,(%rdx,%rax,4)
    0.00 :   6644a:  jne    69433 <__vfscanf_internal+0x6a53>
         : 4431  char_buffer_add():
         : 4432  ./stdio-common/vfscanf-internal.c:260
    0.00 :   66450:  mov    -0x470(%rbp),%rax
    0.00 :   66457:  cmp    -0x468(%rbp),%rax
    0.00 :   6645e:  je     699c7 <__vfscanf_internal+0x6fe7>
         : 4436  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66464:  lea    0x1(%rax),%rdx
    0.00 :   66468:  mov    %rdx,-0x470(%rbp)
    0.00 :   6646f:  mov    %r13b,(%rax)
    0.00 :   66472:  jmp    63c4e <__vfscanf_internal+0x126e>
         : 4441  __vfscanf_internal():
         : 4442  ./stdio-common/vfscanf-internal.c:1825 (discriminator 1)
    0.00 :   66477:  mov    %r15,%rdi
    0.00 :   6647a:  call   8da40 <__uflow>
    0.00 :   6647f:  mov    %eax,%r13d
    0.00 :   66482:  cmp    $0xffffffff,%eax
    0.00 :   66485:  jne    65358 <__vfscanf_internal+0x2978>
    0.00 :   6648b:  mov    %r15,%r14
    0.00 :   6648e:  jmp    63108 <__vfscanf_internal+0x728>
         : 4450  ./stdio-common/vfscanf-internal.c:348 (discriminator 1)
    0.00 :   66493:  mov    0x1b3976(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6649a:  movl   $0x9,%fs:(%rax)
    0.00 :   664a1:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   664ab:  jmp    63172 <__vfscanf_internal+0x792>
         : 4455  ./stdio-common/vfscanf-internal.c:660
    0.00 :   664b0:  testb  $0x4,-0x63c(%rbp)
    0.00 :   664b7:  je     67250 <__vfscanf_internal+0x4870>
         : 4458  ./stdio-common/vfscanf-internal.c:661
    0.00 :   664bd:  mov    -0x68c(%rbp),%esi
    0.00 :   664c3:  test   %esi,%esi
    0.00 :   664c5:  jne    68eb8 <__vfscanf_internal+0x64d8>
    0.00 :   664cb:  mov    -0x5a8(%rbp),%edx
    0.00 :   664d1:  cmp    $0x2f,%edx
    0.00 :   664d4:  ja     67e64 <__vfscanf_internal+0x5484>
    0.00 :   664da:  mov    %edx,%eax
    0.00 :   664dc:  add    $0x8,%edx
    0.00 :   664df:  add    -0x598(%rbp),%rax
    0.00 :   664e6:  mov    %edx,-0x5a8(%rbp)
    0.00 :   664ec:  mov    (%rax),%rax
         : 4470  ./stdio-common/vfscanf-internal.c:661 (discriminator 8)
    0.00 :   664ef:  mov    %r14w,(%rax)
    0.00 :   664f3:  movl   $0x0,-0x610(%rbp)
    0.00 :   664fd:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 4474  ./stdio-common/vfscanf-internal.c:864 (discriminator 4)
    0.00 :   66502:  mov    -0x68c(%rbp),%eax
    0.00 :   66508:  test   %eax,%eax
    0.00 :   6650a:  jne    67b51 <__vfscanf_internal+0x5171>
         : 4478  ./stdio-common/vfscanf-internal.c:864
    0.00 :   66510:  mov    -0x5a8(%rbp),%edx
    0.00 :   66516:  cmp    $0x2f,%edx
    0.00 :   66519:  ja     676e2 <__vfscanf_internal+0x4d02>
    0.00 :   6651f:  mov    %edx,%eax
    0.00 :   66521:  add    $0x8,%edx
    0.00 :   66524:  add    -0x598(%rbp),%rax
    0.00 :   6652b:  mov    %edx,-0x5a8(%rbp)
    0.00 :   66531:  mov    (%rax),%rax
    0.00 :   66534:  mov    %rax,-0x6b8(%rbp)
         : 4488  ./stdio-common/vfscanf-internal.c:864 (discriminator 31)
    0.00 :   6653b:  cmpq   $0x0,-0x6b8(%rbp)
    0.00 :   66543:  jne    636ec <__vfscanf_internal+0xd0c>
    0.00 :   66549:  mov    %r15,%r14
    0.00 :   6654c:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   66551:  nopl   0x0(%rax)
         : 4494  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   66558:  lea    0x8(%rcx),%r10
    0.00 :   6655c:  cmp    $0x1,%edi
    0.00 :   6655f:  jne    28b92 <__vfscanf_internal.cold+0x227>
    0.00 :   66565:  mov    %r10,-0x538(%rbp)
    0.00 :   6656c:  test   %r11b,%r11b
    0.00 :   6656f:  jne    65a30 <__vfscanf_internal+0x3050>
    0.00 :   66575:  jmp    65a38 <__vfscanf_internal+0x3058>
    0.00 :   6657a:  mov    %r15,%r14
    0.00 :   6657d:  jmp    63108 <__vfscanf_internal+0x728>
         : 4504  ./stdio-common/vfscanf-internal.c:1892
    0.00 :   66582:  testb  $0x4,-0x63c(%rbp)
    0.00 :   66589:  je     67105 <__vfscanf_internal+0x4725>
         : 4507  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   6658f:  mov    -0x68c(%rbp),%ebx
    0.00 :   66595:  test   %ebx,%ebx
    0.00 :   66597:  je     6634b <__vfscanf_internal+0x396b>
         : 4511  ./stdio-common/vfscanf-internal.c:1893 (discriminator 2)
    0.00 :   6659d:  mov    -0x6c8(%rbp),%rax
    0.00 :   665a4:  mov    -0x68c(%rbp),%edi
    0.00 :   665aa:  movdqu (%rax),%xmm7
    0.00 :   665ae:  movups %xmm7,-0x540(%rbp)
    0.00 :   665b5:  mov    0x10(%rax),%rax
    0.00 :   665b9:  movaps %xmm7,-0x630(%rbp)
    0.00 :   665c0:  mov    %rax,-0x530(%rbp)
    0.00 :   665c7:  mov    -0x540(%rbp),%eax
    0.00 :   665cd:  sub    $0x1,%edi
    0.00 :   665d0:  je     672ea <__vfscanf_internal+0x490a>
    0.00 :   665d6:  mov    -0x538(%rbp),%rcx
    0.00 :   665dd:  mov    %eax,%esi
         : 4524  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   665df:  xor    %r11d,%r11d
    0.00 :   665e2:  cmp    $0x2f,%esi
    0.00 :   665e5:  ja     672c9 <__vfscanf_internal+0x48e9>
    0.00 :   665eb:  add    $0x8,%esi
    0.00 :   665ee:  mov    $0x1,%r11d
    0.00 :   665f4:  sub    $0x1,%edi
    0.00 :   665f7:  jne    665e2 <__vfscanf_internal+0x3c02>
    0.00 :   665f9:  jmp    672e2 <__vfscanf_internal+0x4902>
    0.00 :   665fe:  xchg   %ax,%ax
         : 4534  char_buffer_add_slow():
         : 4535  ./stdio-common/vfscanf-internal.c:238
    0.00 :   66600:  test   %rax,%rax
    0.00 :   66603:  je     63ee6 <__vfscanf_internal+0x1506>
         : 4538  ./stdio-common/vfscanf-internal.c:240
    0.00 :   66609:  sub    -0x460(%rbp),%rax
         : 4540  scratch_buffer_grow_preserve():
         : 4541  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   66610:  lea    -0x460(%rbp),%rdi
         : 4543  char_buffer_add_slow():
         : 4544  ./stdio-common/vfscanf-internal.c:240
    0.00 :   66617:  mov    %rax,%rbx
         : 4546  scratch_buffer_grow_preserve():
         : 4547  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6661a:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 4549  char_buffer_add_slow():
         : 4550  ./stdio-common/vfscanf-internal.c:241
    0.00 :   6661f:  test   %al,%al
    0.00 :   66621:  je     699b7 <__vfscanf_internal+0x6fd7>
         : 4553  char_buffer_start():
         : 4554  ./stdio-common/vfscanf-internal.c:206
    0.00 :   66627:  mov    -0x460(%rbp),%rax
         : 4556  char_buffer_add_slow():
         : 4557  ./stdio-common/vfscanf-internal.c:248
    0.00 :   6662e:  add    %rax,%rbx
         : 4559  char_buffer_rewind():
         : 4560  ./stdio-common/vfscanf-internal.c:223
    0.00 :   66631:  add    -0x458(%rbp),%rax
         : 4562  char_buffer_add_slow():
         : 4563  ./stdio-common/vfscanf-internal.c:249
    0.00 :   66638:  lea    0x1(%rbx),%rsi
    0.00 :   6663c:  movq   %rax,%xmm7
    0.00 :   66641:  movq   %rsi,%xmm0
    0.00 :   66646:  punpcklqdq %xmm7,%xmm0
    0.00 :   6664a:  movaps %xmm0,-0x470(%rbp)
    0.00 :   66651:  movb   $0x30,(%rbx)
    0.00 :   66654:  jmp    63ee6 <__vfscanf_internal+0x1506>
         : 4571  __vfscanf_internal():
         : 4572  ./stdio-common/vfscanf-internal.c:842
    0.00 :   66659:  mov    -0x638(%rbp),%eax
    0.00 :   6665f:  cmp    $0x1,%eax
    0.00 :   66662:  jle    6a5fc <__vfscanf_internal+0x7c1c>
    0.00 :   66668:  sub    $0x2,%eax
    0.00 :   6666b:  lea    0x2(%r14,%rax,1),%rbx
         : 4578  ./stdio-common/vfscanf-internal.c:740
    0.00 :   66670:  mov    %r12,%r14
    0.00 :   66673:  jmp    6668e <__vfscanf_internal+0x3cae>
         : 4581  ./stdio-common/vfscanf-internal.c:842 (discriminator 6)
    0.00 :   66675:  lea    0x1(%rax),%rdx
    0.00 :   66679:  mov    %rdx,0x8(%r15)
    0.00 :   6667d:  movzbl (%rax),%r13d
         : 4585  ./stdio-common/vfscanf-internal.c:842 (discriminator 9)
    0.00 :   66681:  add    $0x1,%r14
    0.00 :   66685:  cmp    %rbx,%r14
    0.00 :   66688:  je     62c3e <__vfscanf_internal+0x25e>
         : 4589  ./stdio-common/vfscanf-internal.c:842 (discriminator 3)
    0.00 :   6668e:  mov    0x8(%r15),%rax
    0.00 :   66692:  cmp    0x10(%r15),%rax
    0.00 :   66696:  jb     66675 <__vfscanf_internal+0x3c95>
         : 4593  ./stdio-common/vfscanf-internal.c:842 (discriminator 5)
    0.00 :   66698:  mov    %r15,%rdi
    0.00 :   6669b:  call   8da40 <__uflow>
    0.00 :   666a0:  mov    %eax,%r13d
    0.00 :   666a3:  cmp    $0xffffffff,%eax
    0.00 :   666a6:  jne    66681 <__vfscanf_internal+0x3ca1>
         : 4599  ./stdio-common/vfscanf-internal.c:842 (discriminator 10)
    0.00 :   666a8:  mov    0x1b3761(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   666af:  mov    %fs:(%r10),%eax
    0.00 :   666b3:  mov    %eax,-0x600(%rbp)
    0.00 :   666b9:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 4604  ./stdio-common/vfscanf-internal.c:1822 (discriminator 36)
    0.00 :   666be:  mov    %r15,%rdi
    0.00 :   666c1:  call   8da40 <__uflow>
    0.00 :   666c6:  mov    %eax,%r13d
    0.00 :   666c9:  cmp    $0xffffffff,%eax
    0.00 :   666cc:  jne    68dd2 <__vfscanf_internal+0x63f2>
    0.00 :   666d2:  mov    %r15,%r14
    0.00 :   666d5:  jmp    63108 <__vfscanf_internal+0x728>
         : 4612  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   666da:  mov    -0x5a0(%rbp),%rax
    0.00 :   666e1:  lea    0x8(%rax),%rcx
    0.00 :   666e5:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   666ec:  jmp    64162 <__vfscanf_internal+0x1782>
         : 4617  ./stdio-common/vfscanf-internal.c:1106
    0.00 :   666f1:  mov    -0x698(%rbp),%rax
    0.00 :   666f8:  mov    %rcx,-0x660(%rbp)
    0.00 :   666ff:  mov    %r11d,-0x650(%rbp)
    0.00 :   66706:  lea    (%rax,%rax,1),%rsi
    0.00 :   6670a:  mov    %rsi,-0x638(%rbp)
    0.00 :   66711:  call   283b0 <realloc@plt>
         : 4624  ./stdio-common/vfscanf-internal.c:1107
    0.00 :   66716:  mov    -0x638(%rbp),%rsi
    0.00 :   6671d:  mov    -0x650(%rbp),%r11d
    0.00 :   66724:  test   %rax,%rax
    0.00 :   66727:  mov    -0x660(%rbp),%rcx
         : 4629  ./stdio-common/vfscanf-internal.c:1106
    0.00 :   6672e:  mov    %rax,%r12
         : 4631  ./stdio-common/vfscanf-internal.c:1107
    0.00 :   66731:  je     68c6a <__vfscanf_internal+0x628a>
         : 4633  ./stdio-common/vfscanf-internal.c:1136
    0.00 :   66737:  mov    -0x670(%rbp),%rax
    0.00 :   6673e:  mov    %r12,(%rax)
         : 4636  ./stdio-common/vfscanf-internal.c:1137
    0.00 :   66741:  add    -0x698(%rbp),%r12
         : 4638  ./stdio-common/vfscanf-internal.c:1138
    0.00 :   66748:  mov    %rsi,-0x698(%rbp)
    0.00 :   6674f:  jmp    6552a <__vfscanf_internal+0x2b4a>
         : 4641  char_buffer_add_slow():
         : 4642  ./stdio-common/vfscanf-internal.c:238
    0.00 :   66754:  test   %rsi,%rsi
    0.00 :   66757:  je     66310 <__vfscanf_internal+0x3930>
         : 4645  ./stdio-common/vfscanf-internal.c:240
    0.00 :   6675d:  mov    -0x460(%rbp),%rax
    0.00 :   66764:  jmp    6567e <__vfscanf_internal+0x2c9e>
         : 4648  __vfscanf_internal():
         : 4649  ./stdio-common/vfscanf-internal.c:1209 (discriminator 6)
    0.00 :   66769:  mov    -0x6c8(%rbp),%rax
    0.00 :   66770:  mov    -0x68c(%rbp),%edx
    0.00 :   66776:  movdqu (%rax),%xmm5
    0.00 :   6677a:  movups %xmm5,-0x540(%rbp)
    0.00 :   66781:  mov    0x10(%rax),%rax
    0.00 :   66785:  movaps %xmm5,-0x630(%rbp)
    0.00 :   6678c:  mov    %rax,-0x530(%rbp)
    0.00 :   66793:  mov    -0x540(%rbp),%eax
    0.00 :   66799:  sub    $0x1,%edx
    0.00 :   6679c:  je     667c5 <__vfscanf_internal+0x3de5>
    0.00 :   6679e:  mov    -0x538(%rbp),%rcx
         : 4661  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   667a5:  mov    %eax,%esi
    0.00 :   667a7:  xor    %r10d,%r10d
    0.00 :   667aa:  cmp    $0x2f,%esi
    0.00 :   667ad:  ja     667f2 <__vfscanf_internal+0x3e12>
    0.00 :   667af:  add    $0x8,%esi
    0.00 :   667b2:  mov    $0x1,%r10d
    0.00 :   667b8:  sub    $0x1,%edx
    0.00 :   667bb:  jne    667aa <__vfscanf_internal+0x3dca>
    0.00 :   667bd:  mov    %esi,-0x540(%rbp)
    0.00 :   667c3:  mov    %esi,%eax
    0.00 :   667c5:  cmp    $0x2f,%eax
    0.00 :   667c8:  ja     671ec <__vfscanf_internal+0x480c>
    0.00 :   667ce:  mov    %eax,%edx
    0.00 :   667d0:  add    $0x8,%eax
    0.00 :   667d3:  add    -0x530(%rbp),%rdx
    0.00 :   667da:  mov    %eax,-0x540(%rbp)
    0.00 :   667e0:  mov    (%rdx),%rax
    0.00 :   667e3:  mov    %rax,-0x670(%rbp)
    0.00 :   667ea:  mov    %rax,%rbx
    0.00 :   667ed:  jmp    634a4 <__vfscanf_internal+0xac4>
    0.00 :   667f2:  lea    0x8(%rcx),%rdi
    0.00 :   667f6:  cmp    $0x1,%edx
    0.00 :   667f9:  jne    289c2 <__vfscanf_internal.cold+0x57>
    0.00 :   667ff:  mov    %rdi,-0x538(%rbp)
    0.00 :   66806:  test   %r10b,%r10b
    0.00 :   66809:  jne    667bd <__vfscanf_internal+0x3ddd>
    0.00 :   6680b:  jmp    667c5 <__vfscanf_internal+0x3de5>
         : 4689  ./stdio-common/vfscanf-internal.c:994 (discriminator 4)
    0.00 :   6680d:  mov    %r15,%rdi
    0.00 :   66810:  call   8da40 <__uflow>
    0.00 :   66815:  mov    %eax,%r13d
    0.00 :   66818:  cmp    $0xffffffff,%eax
    0.00 :   6681b:  jne    65913 <__vfscanf_internal+0x2f33>
         : 4695  ./stdio-common/vfscanf-internal.c:994 (discriminator 9)
    0.00 :   66821:  mov    0x1b35e8(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66828:  mov    %fs:(%r10),%eax
    0.00 :   6682c:  mov    %eax,-0x600(%rbp)
         : 4699  ./stdio-common/vfscanf-internal.c:998
    0.00 :   66832:  mov    -0x610(%rbp),%r10d
    0.00 :   66839:  test   %r10d,%r10d
    0.00 :   6683c:  jne    64918 <__vfscanf_internal+0x1f38>
         : 4703  ./stdio-common/vfscanf-internal.c:1000
    0.00 :   66842:  cmpl   $0x0,-0x63c(%rbp)
    0.00 :   66849:  je     6687c <__vfscanf_internal+0x3e9c>
         : 4706  ./stdio-common/vfscanf-internal.c:1000 (discriminator 1)
    0.00 :   6684b:  mov    -0x670(%rbp),%rbx
    0.00 :   66852:  mov    -0x6b8(%rbp),%rsi
    0.00 :   66859:  mov    (%rbx),%rdi
    0.00 :   6685c:  sub    %rdi,%rsi
    0.00 :   6685f:  mov    %rsi,%rax
    0.00 :   66862:  sar    $0x2,%rax
    0.00 :   66866:  cmp    -0x698(%rbp),%rax
    0.00 :   6686d:  je     6687c <__vfscanf_internal+0x3e9c>
         : 4715  ./stdio-common/vfscanf-internal.c:1002
    0.00 :   6686f:  call   283b0 <realloc@plt>
         : 4717  ./stdio-common/vfscanf-internal.c:1006
    0.00 :   66874:  test   %rax,%rax
    0.00 :   66877:  je     6687c <__vfscanf_internal+0x3e9c>
         : 4720  ./stdio-common/vfscanf-internal.c:1007
    0.00 :   66879:  mov    %rax,(%rbx)
         : 4722  ./stdio-common/vfscanf-internal.c:1011
    0.00 :   6687c:  addl   $0x1,-0x640(%rbp)
         : 4724  ./stdio-common/vfscanf-internal.c:1009
    0.00 :   66883:  movq   $0x0,-0x670(%rbp)
    0.00 :   6688e:  jmp    62c3e <__vfscanf_internal+0x25e>
    0.00 :   66893:  nopl   0x0(%rax,%rax,1)
         : 4728  ./stdio-common/vfscanf-internal.c:2018
    0.00 :   66898:  mov    -0x638(%rbp),%r8d
    0.00 :   6689f:  test   %r8d,%r8d
    0.00 :   668a2:  je     671de <__vfscanf_internal+0x47fe>
    0.00 :   668a8:  cmp    $0x30,%r13d
    0.00 :   668ac:  jne    671de <__vfscanf_internal+0x47fe>
         : 4734  char_buffer_add():
         : 4735  ./stdio-common/vfscanf-internal.c:260
    0.00 :   668b2:  cmp    %rsi,-0x468(%rbp)
    0.00 :   668b9:  je     69380 <__vfscanf_internal+0x69a0>
         : 4738  ./stdio-common/vfscanf-internal.c:263
    0.00 :   668bf:  lea    0x1(%rsi),%rax
    0.00 :   668c3:  mov    %rax,-0x470(%rbp)
    0.00 :   668ca:  movb   $0x30,(%rsi)
         : 4742  __vfscanf_internal():
         : 4743  ./stdio-common/vfscanf-internal.c:2021
    0.00 :   668cd:  mov    0x8(%r15),%rax
    0.00 :   668d1:  cmp    0x10(%r15),%rax
    0.00 :   668d5:  jae    67e27 <__vfscanf_internal+0x5447>
         : 4747  ./stdio-common/vfscanf-internal.c:2021 (discriminator 5)
    0.00 :   668db:  lea    0x1(%rax),%rdx
    0.00 :   668df:  mov    %rdx,0x8(%r15)
    0.00 :   668e3:  movzbl (%rax),%r13d
         : 4751  ./stdio-common/vfscanf-internal.c:2021 (discriminator 8)
    0.00 :   668e7:  add    $0x1,%r12
         : 4753  ./stdio-common/vfscanf-internal.c:2022 (discriminator 11)
    0.00 :   668eb:  mov    -0x638(%rbp),%eax
    0.00 :   668f1:  test   %eax,%eax
    0.00 :   668f3:  jle    68660 <__vfscanf_internal+0x5c80>
         : 4757  ./stdio-common/vfscanf-internal.c:2024
    0.00 :   668f9:  sub    $0x1,%eax
    0.00 :   668fc:  mov    %eax,-0x638(%rbp)
    0.00 :   66902:  jne    68660 <__vfscanf_internal+0x5c80>
         : 4761  ./stdio-common/vfscanf-internal.c:2017
    0.00 :   66908:  movb   $0x65,-0x610(%rbp)
    0.00 :   6690f:  mov    -0x470(%rbp),%rsi
         : 4764  ./stdio-common/vfscanf-internal.c:2039
    0.00 :   66916:  mov    $0x1,%edx
         : 4766  ./stdio-common/vfscanf-internal.c:2044
    0.00 :   6691b:  test   %rsi,%rsi
    0.00 :   6691e:  je     6730d <__vfscanf_internal+0x492d>
         : 4769  ./stdio-common/vfscanf-internal.c:2055
    0.00 :   66924:  mov    -0x63c(%rbp),%eax
         : 4771  ./stdio-common/vfscanf-internal.c:2066
    0.00 :   6692a:  mov    %r12,-0x648(%rbp)
    0.00 :   66931:  mov    %edx,%r12d
         : 4774  ./stdio-common/vfscanf-internal.c:2121
    0.00 :   66934:  movb   $0x0,-0x660(%rbp)
         : 4776  ./stdio-common/vfscanf-internal.c:2055
    0.00 :   6693b:  mov    %eax,%edi
    0.00 :   6693d:  and    $0x800,%edi
         : 4779  ./stdio-common/vfscanf-internal.c:2121
    0.00 :   66943:  and    $0x80,%eax
    0.00 :   66948:  mov    %eax,-0x6a0(%rbp)
         : 4782  ./stdio-common/vfscanf-internal.c:2066
    0.00 :   6694e:  movsbl -0x610(%rbp),%eax
         : 4784  ./stdio-common/vfscanf-internal.c:2121
    0.00 :   66955:  setne  -0x688(%rbp)
    0.00 :   6695c:  xor    %r14d,%r14d
         : 4787  ./stdio-common/vfscanf-internal.c:2066
    0.00 :   6695f:  mov    %r14b,-0x630(%rbp)
    0.00 :   66966:  mov    -0x638(%rbp),%r14d
         : 4790  ./stdio-common/vfscanf-internal.c:2055
    0.00 :   6696d:  mov    %edi,-0x650(%rbp)
         : 4792  ./stdio-common/vfscanf-internal.c:2066
    0.00 :   66973:  mov    %eax,-0x6e8(%rbp)
    0.00 :   66979:  jmp    669e2 <__vfscanf_internal+0x4002>
         : 4795  char_buffer_add():
         : 4796  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6697b:  cmp    -0x468(%rbp),%rsi
    0.00 :   66982:  je     67af9 <__vfscanf_internal+0x5119>
         : 4799  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66988:  lea    0x1(%rsi),%rax
    0.00 :   6698c:  mov    %rax,-0x470(%rbp)
    0.00 :   66993:  mov    %r13b,(%rsi)
         : 4803  __vfscanf_internal():
         : 4804  ./stdio-common/vfscanf-internal.c:2159
    0.00 :   66996:  test   %r14d,%r14d
    0.00 :   66999:  je     68bd8 <__vfscanf_internal+0x61f8>
         : 4807  ./stdio-common/vfscanf-internal.c:2053
    0.00 :   6699f:  mov    $0x1,%r12d
         : 4809  ./stdio-common/vfscanf-internal.c:2159 (discriminator 3)
    0.00 :   669a5:  mov    0x8(%r15),%rax
    0.00 :   669a9:  cmp    0x10(%r15),%rax
    0.00 :   669ad:  jae    66bb0 <__vfscanf_internal+0x41d0>
         : 4813  ./stdio-common/vfscanf-internal.c:2159 (discriminator 5)
    0.00 :   669b3:  lea    0x1(%rax),%rdx
    0.00 :   669b7:  mov    %rdx,0x8(%r15)
    0.00 :   669bb:  movzbl (%rax),%r13d
         : 4817  ./stdio-common/vfscanf-internal.c:2163 (discriminator 8)
    0.00 :   669bf:  xor    %eax,%eax
         : 4819  ./stdio-common/vfscanf-internal.c:2159 (discriminator 8)
    0.00 :   669c1:  addq   $0x1,-0x648(%rbp)
         : 4821  char_buffer_error():
         : 4822  ./stdio-common/vfscanf-internal.c:231 (discriminator 8)
    0.00 :   669c9:  mov    -0x470(%rbp),%rsi
         : 4824  __vfscanf_internal():
         : 4825  ./stdio-common/vfscanf-internal.c:2163 (discriminator 8)
    0.00 :   669d0:  test   %r14d,%r14d
    0.00 :   669d3:  setg   %al
    0.00 :   669d6:  sub    %eax,%r14d
         : 4829  ./stdio-common/vfscanf-internal.c:2044 (discriminator 8)
    0.00 :   669d9:  test   %rsi,%rsi
    0.00 :   669dc:  je     6730d <__vfscanf_internal+0x492d>
         : 4832  ./stdio-common/vfscanf-internal.c:2050
    0.00 :   669e2:  lea    -0x30(%r13),%eax
    0.00 :   669e6:  cmp    $0x9,%eax
    0.00 :   669e9:  jbe    6697b <__vfscanf_internal+0x3f9b>
         : 4836  ./stdio-common/vfscanf-internal.c:2055
    0.00 :   669eb:  cmpb   $0x0,-0x660(%rbp)
    0.00 :   669f2:  je     66bf0 <__vfscanf_internal+0x4210>
         : 4839  ./stdio-common/vfscanf-internal.c:2060 (discriminator 1)
    0.00 :   669f8:  movzbl -0x610(%rbp),%eax
    0.00 :   669ff:  cmp    %al,-0x1(%rsi)
    0.00 :   66a02:  je     68633 <__vfscanf_internal+0x5c53>
         : 4843  ./stdio-common/vfscanf-internal.c:2088
    0.00 :   66a08:  test   %r14d,%r14d
         : 4845  ./stdio-common/vfscanf-internal.c:2092
    0.00 :   66a0b:  mov    -0x6d8(%rbp),%rax
         : 4847  ./stdio-common/vfscanf-internal.c:2088
    0.00 :   66a12:  mov    $0x7fffffff,%ecx
    0.00 :   66a17:  cmovg  %r14d,%ecx
         : 4850  ./stdio-common/vfscanf-internal.c:2090
    0.00 :   66a1b:  cmpb   $0x0,-0x630(%rbp)
         : 4852  ./stdio-common/vfscanf-internal.c:2092
    0.00 :   66a22:  movzbl (%rax),%eax
         : 4854  ./stdio-common/vfscanf-internal.c:2090
    0.00 :   66a25:  je     66c92 <__vfscanf_internal+0x42b2>
         : 4856  ./stdio-common/vfscanf-internal.c:2103
    0.00 :   66a2b:  test   %al,%al
    0.00 :   66a2d:  je     66d95 <__vfscanf_internal+0x43b5>
         : 4859  ./stdio-common/vfscanf-internal.c:2140
    0.00 :   66a33:  mov    -0x680(%rbp),%rax
    0.00 :   66a3a:  test   %rax,%rax
    0.00 :   66a3d:  je     6a6dd <__vfscanf_internal+0x7cfd>
    0.00 :   66a43:  mov    %rax,%rbx
         : 4864  ./stdio-common/vfscanf-internal.c:2140 (discriminator 1)
    0.00 :   66a46:  cmpb   $0x0,(%rbx)
    0.00 :   66a49:  jne    6a6dd <__vfscanf_internal+0x7cfd>
         : 4867  ./stdio-common/vfscanf-internal.c:2143
    0.00 :   66a4f:  mov    -0x680(%rbp),%r8
         : 4869  scratch_buffer_grow_preserve():
         : 4870  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   66a56:  lea    -0x460(%rbp),%rdi
         : 4872  __vfscanf_internal():
         : 4873  ./stdio-common/vfscanf-internal.c:2143
    0.00 :   66a5d:  movzbl (%r8),%esi
    0.00 :   66a61:  test   %sil,%sil
    0.00 :   66a64:  je     66abc <__vfscanf_internal+0x40dc>
    0.00 :   66a66:  mov    %r15,-0x6f0(%rbp)
    0.00 :   66a6d:  mov    %r12d,%ebx
    0.00 :   66a70:  mov    %r14d,%r15d
    0.00 :   66a73:  mov    %esi,%r12d
    0.00 :   66a76:  mov    %r13d,%r14d
    0.00 :   66a79:  mov    %r8,%r13
         : 4883  char_buffer_add():
         : 4884  ./stdio-common/vfscanf-internal.c:260 (discriminator 3)
    0.00 :   66a7c:  mov    -0x470(%rbp),%rax
    0.00 :   66a83:  cmp    -0x468(%rbp),%rax
    0.00 :   66a8a:  je     67513 <__vfscanf_internal+0x4b33>
         : 4888  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66a90:  lea    0x1(%rax),%rdx
    0.00 :   66a94:  mov    %rdx,-0x470(%rbp)
    0.00 :   66a9b:  mov    %r12b,(%rax)
         : 4892  __vfscanf_internal():
         : 4893  ./stdio-common/vfscanf-internal.c:2143
    0.00 :   66a9e:  movzbl 0x1(%r13),%r12d
    0.00 :   66aa3:  add    $0x1,%r13
    0.00 :   66aa7:  test   %r12b,%r12b
    0.00 :   66aaa:  jne    66a7c <__vfscanf_internal+0x409c>
    0.00 :   66aac:  mov    %r14d,%r13d
    0.00 :   66aaf:  mov    %r15d,%r14d
    0.00 :   66ab2:  mov    -0x6f0(%rbp),%r15
    0.00 :   66ab9:  mov    %ebx,%r12d
         : 4902  ./stdio-common/vfscanf-internal.c:2145
    0.00 :   66abc:  test   %r14d,%r14d
    0.00 :   66abf:  cmovg  %ecx,%r14d
         : 4905  ./stdio-common/vfscanf-internal.c:2159
    0.00 :   66ac3:  test   %r14d,%r14d
    0.00 :   66ac6:  je     68bd8 <__vfscanf_internal+0x61f8>
         : 4908  ./stdio-common/vfscanf-internal.c:2159 (discriminator 1)
    0.00 :   66acc:  cmp    $0xffffffff,%r13d
    0.00 :   66ad0:  jne    669a5 <__vfscanf_internal+0x3fc5>
         : 4911  ./stdio-common/vfscanf-internal.c:2159 (discriminator 2)
    0.00 :   66ad6:  mov    0x1b3333(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66add:  mov    -0x600(%rbp),%eax
    0.00 :   66ae3:  mov    %r14d,-0x638(%rbp)
    0.00 :   66aea:  mov    -0x648(%rbp),%r12
    0.00 :   66af1:  movzbl -0x630(%rbp),%r14d
    0.00 :   66af9:  mov    %eax,%fs:(%r10)
         : 4918  char_buffer_error():
         : 4919  ./stdio-common/vfscanf-internal.c:231
    0.00 :   66afd:  mov    -0x470(%rbp),%rsi
         : 4921  __vfscanf_internal():
         : 4922  ./stdio-common/vfscanf-internal.c:2166
    0.00 :   66b04:  test   %rsi,%rsi
    0.00 :   66b07:  je     693f9 <__vfscanf_internal+0x6a19>
         : 4925  char_buffer_start():
         : 4926  ./stdio-common/vfscanf-internal.c:206
    0.00 :   66b0d:  mov    -0x460(%rbp),%rdx
         : 4928  char_buffer_size():
         : 4929  ./stdio-common/vfscanf-internal.c:214
    0.00 :   66b14:  mov    %rsi,%rax
         : 4931  __vfscanf_internal():
         : 4932  ./stdio-common/vfscanf-internal.c:2174
    0.00 :   66b17:  testl  $0x400,-0x63c(%rbp)
    0.00 :   66b21:  jne    69a0e <__vfscanf_internal+0x702e>
         : 4935  char_buffer_size():
         : 4936  ./stdio-common/vfscanf-internal.c:214
    0.00 :   66b27:  sub    -0x460(%rbp),%rax
         : 4938  __vfscanf_internal():
         : 4939  ./stdio-common/vfscanf-internal.c:2412
    0.00 :   66b2e:  cmp    -0x620(%rbp),%rax
    0.00 :   66b35:  je     6a273 <__vfscanf_internal+0x7893>
         : 4942  ./stdio-common/vfscanf-internal.c:2412 (discriminator 1)
    0.00 :   66b3b:  mov    -0x650(%rbp),%edx
    0.00 :   66b41:  test   %edx,%edx
    0.00 :   66b43:  jne    699ef <__vfscanf_internal+0x700f>
         : 4946  char_buffer_add():
         : 4947  ./stdio-common/vfscanf-internal.c:260
    0.00 :   66b49:  mov    %r12,%r14
    0.00 :   66b4c:  cmp    %rsi,-0x468(%rbp)
    0.00 :   66b53:  jne    63c62 <__vfscanf_internal+0x1282>
         : 4951  char_buffer_add_slow():
         : 4952  ./stdio-common/vfscanf-internal.c:240
    0.00 :   66b59:  sub    -0x460(%rbp),%rsi
         : 4954  scratch_buffer_grow_preserve():
         : 4955  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   66b60:  lea    -0x460(%rbp),%rdi
         : 4957  char_buffer_add_slow():
         : 4958  ./stdio-common/vfscanf-internal.c:240
    0.00 :   66b67:  mov    %rsi,%rbx
         : 4960  scratch_buffer_grow_preserve():
         : 4961  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   66b6a:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 4963  char_buffer_add_slow():
         : 4964  ./stdio-common/vfscanf-internal.c:241
    0.00 :   66b6f:  test   %al,%al
    0.00 :   66b71:  je     699dc <__vfscanf_internal+0x6ffc>
         : 4967  char_buffer_start():
         : 4968  ./stdio-common/vfscanf-internal.c:206
    0.00 :   66b77:  mov    -0x460(%rbp),%rax
         : 4970  char_buffer_add_slow():
         : 4971  ./stdio-common/vfscanf-internal.c:248
    0.00 :   66b7e:  add    %rax,%rbx
         : 4973  char_buffer_rewind():
         : 4974  ./stdio-common/vfscanf-internal.c:223
    0.00 :   66b81:  add    -0x458(%rbp),%rax
         : 4976  char_buffer_add_slow():
         : 4977  ./stdio-common/vfscanf-internal.c:249
    0.00 :   66b88:  lea    0x1(%rbx),%rsi
    0.00 :   66b8c:  movq   %rax,%xmm6
    0.00 :   66b91:  movq   %rsi,%xmm0
    0.00 :   66b96:  punpcklqdq %xmm6,%xmm0
    0.00 :   66b9a:  movaps %xmm0,-0x470(%rbp)
    0.00 :   66ba1:  movb   $0x0,(%rbx)
    0.00 :   66ba4:  jmp    63c70 <__vfscanf_internal+0x1290>
    0.00 :   66ba9:  nopl   0x0(%rax)
         : 4986  __vfscanf_internal():
         : 4987  ./stdio-common/vfscanf-internal.c:2159 (discriminator 4)
    0.00 :   66bb0:  mov    %r15,%rdi
    0.00 :   66bb3:  call   8da40 <__uflow>
    0.00 :   66bb8:  mov    %eax,%r13d
    0.00 :   66bbb:  cmp    $0xffffffff,%eax
    0.00 :   66bbe:  jne    669bf <__vfscanf_internal+0x3fdf>
         : 4993  ./stdio-common/vfscanf-internal.c:2159 (discriminator 9)
    0.00 :   66bc4:  mov    0x1b3245(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66bcb:  mov    %r14d,-0x638(%rbp)
    0.00 :   66bd2:  mov    -0x648(%rbp),%r12
    0.00 :   66bd9:  movzbl -0x630(%rbp),%r14d
    0.00 :   66be1:  mov    %fs:(%r10),%eax
    0.00 :   66be5:  mov    %eax,-0x600(%rbp)
    0.00 :   66beb:  jmp    66afd <__vfscanf_internal+0x411d>
         : 5001  ./stdio-common/vfscanf-internal.c:2055 (discriminator 1)
    0.00 :   66bf0:  mov    -0x650(%rbp),%edi
    0.00 :   66bf6:  test   %edi,%edi
    0.00 :   66bf8:  je     66c35 <__vfscanf_internal+0x4255>
         : 5005  ./stdio-common/vfscanf-internal.c:2055 (discriminator 2)
    0.00 :   66bfa:  mov    -0x658(%rbp),%rdi
    0.00 :   66c01:  movslq %r13d,%rax
    0.00 :   66c04:  mov    0x68(%rdi),%rcx
    0.00 :   66c08:  testb  $0x10,0x1(%rcx,%rax,2)
    0.00 :   66c0d:  je     66c35 <__vfscanf_internal+0x4255>
         : 5011  char_buffer_add():
         : 5012  ./stdio-common/vfscanf-internal.c:260
    0.00 :   66c0f:  cmp    -0x468(%rbp),%rsi
    0.00 :   66c16:  je     6a2be <__vfscanf_internal+0x78de>
         : 5015  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66c1c:  lea    0x1(%rsi),%rax
         : 5017  __vfscanf_internal():
         : 5018  ./stdio-common/vfscanf-internal.c:2058
    0.00 :   66c20:  mov    $0x1,%r12d
         : 5020  char_buffer_add():
         : 5021  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66c26:  mov    %rax,-0x470(%rbp)
    0.00 :   66c2d:  mov    %r13b,(%rsi)
    0.00 :   66c30:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 5025  __vfscanf_internal():
         : 5026  ./stdio-common/vfscanf-internal.c:2063
    0.00 :   66c35:  test   %r12b,%r12b
    0.00 :   66c38:  je     66a08 <__vfscanf_internal+0x4028>
         : 5029  ./stdio-common/vfscanf-internal.c:2064 (discriminator 2)
    0.00 :   66c3e:  mov    -0x658(%rbp),%rdi
    0.00 :   66c45:  movzbl %r13b,%eax
    0.00 :   66c49:  mov    0x70(%rdi),%rcx
    0.00 :   66c4d:  movzbl -0x610(%rbp),%edi
    0.00 :   66c54:  cmp    (%rcx,%rax,4),%dil
    0.00 :   66c58:  jne    66a08 <__vfscanf_internal+0x4028>
         : 5036  char_buffer_add():
         : 5037  ./stdio-common/vfscanf-internal.c:260
    0.00 :   66c5e:  cmp    -0x468(%rbp),%rsi
    0.00 :   66c65:  je     68f52 <__vfscanf_internal+0x6572>
         : 5040  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66c6b:  lea    0x1(%rsi),%rax
         : 5042  __vfscanf_internal():
         : 5043  ./stdio-common/vfscanf-internal.c:2067
    0.00 :   66c6f:  mov    %r12b,-0x660(%rbp)
         : 5045  char_buffer_add():
         : 5046  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66c76:  mov    %rax,-0x470(%rbp)
    0.00 :   66c7d:  movzbl -0x610(%rbp),%eax
         : 5049  __vfscanf_internal():
         : 5050  ./stdio-common/vfscanf-internal.c:2067
    0.00 :   66c84:  mov    %r12b,-0x630(%rbp)
         : 5052  char_buffer_add():
         : 5053  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66c8b:  mov    %al,(%rsi)
    0.00 :   66c8d:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 5056  __vfscanf_internal():
         : 5057  ./stdio-common/vfscanf-internal.c:2092
    0.00 :   66c92:  mov    -0x6d8(%rbp),%rbx
    0.00 :   66c99:  cmp    %eax,%r13d
    0.00 :   66c9c:  jne    66d19 <__vfscanf_internal+0x4339>
    0.00 :   66c9e:  mov    %r12b,-0x638(%rbp)
    0.00 :   66ca5:  mov    %ecx,%r12d
    0.00 :   66ca8:  jmp    66cce <__vfscanf_internal+0x42ee>
         : 5064  ./stdio-common/vfscanf-internal.c:2097 (discriminator 5)
    0.00 :   66caa:  lea    0x1(%rax),%rdx
    0.00 :   66cae:  mov    %rdx,0x8(%r15)
    0.00 :   66cb2:  movzbl (%rax),%r13d
         : 5068  ./stdio-common/vfscanf-internal.c:2092 (discriminator 8)
    0.00 :   66cb6:  movzbl (%rbx),%eax
         : 5070  ./stdio-common/vfscanf-internal.c:2097 (discriminator 8)
    0.00 :   66cb9:  addq   $0x1,-0x648(%rbp)
         : 5072  ./stdio-common/vfscanf-internal.c:2099 (discriminator 8)
    0.00 :   66cc1:  sub    $0x1,%r12d
         : 5074  ./stdio-common/vfscanf-internal.c:2092 (discriminator 8)
    0.00 :   66cc5:  cmp    %r13d,%eax
    0.00 :   66cc8:  jne    6a702 <__vfscanf_internal+0x7d22>
         : 5077  ./stdio-common/vfscanf-internal.c:2093
    0.00 :   66cce:  add    $0x1,%rbx
    0.00 :   66cd2:  cmpb   $0x0,(%rbx)
    0.00 :   66cd5:  je     68c40 <__vfscanf_internal+0x6260>
         : 5081  ./stdio-common/vfscanf-internal.c:2097
    0.00 :   66cdb:  test   %r12d,%r12d
    0.00 :   66cde:  je     68260 <__vfscanf_internal+0x5880>
         : 5084  ./stdio-common/vfscanf-internal.c:2097 (discriminator 3)
    0.00 :   66ce4:  mov    0x8(%r15),%rax
    0.00 :   66ce8:  cmp    0x10(%r15),%rax
    0.00 :   66cec:  jb     66caa <__vfscanf_internal+0x42ca>
         : 5088  ./stdio-common/vfscanf-internal.c:2097 (discriminator 4)
    0.00 :   66cee:  mov    %r15,%rdi
    0.00 :   66cf1:  call   8da40 <__uflow>
    0.00 :   66cf6:  mov    %eax,%r13d
    0.00 :   66cf9:  cmp    $0xffffffff,%eax
    0.00 :   66cfc:  jne    66cb6 <__vfscanf_internal+0x42d6>
         : 5094  ./stdio-common/vfscanf-internal.c:2097 (discriminator 9)
    0.00 :   66cfe:  mov    0x1b310b(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66d05:  mov    %r12d,%ecx
    0.00 :   66d08:  movzbl -0x638(%rbp),%r12d
    0.00 :   66d10:  mov    %fs:(%rax),%eax
    0.00 :   66d13:  mov    %eax,-0x600(%rbp)
         : 5100  ./stdio-common/vfscanf-internal.c:2103
    0.00 :   66d19:  cmpb   $0x0,(%rbx)
    0.00 :   66d1c:  jne    6826b <__vfscanf_internal+0x588b>
         : 5103  ./stdio-common/vfscanf-internal.c:2106
    0.00 :   66d22:  mov    -0x6d8(%rbp),%rax
    0.00 :   66d29:  movzbl (%rax),%esi
    0.00 :   66d2c:  test   %sil,%sil
    0.00 :   66d2f:  je     66d95 <__vfscanf_internal+0x43b5>
    0.00 :   66d31:  mov    -0x6d8(%rbp),%r8
         : 5109  scratch_buffer_grow_preserve():
         : 5110  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   66d38:  mov    %r15,-0x638(%rbp)
    0.00 :   66d3f:  mov    %r12d,%ebx
    0.00 :   66d42:  mov    %r14d,%r15d
    0.00 :   66d45:  lea    -0x460(%rbp),%rdi
    0.00 :   66d4c:  mov    %r13d,%r14d
    0.00 :   66d4f:  mov    %esi,%r12d
    0.00 :   66d52:  mov    %r8,%r13
         : 5118  char_buffer_add():
         : 5119  ./stdio-common/vfscanf-internal.c:260 (discriminator 3)
    0.00 :   66d55:  mov    -0x470(%rbp),%rax
    0.00 :   66d5c:  cmp    -0x468(%rbp),%rax
    0.00 :   66d63:  je     6758a <__vfscanf_internal+0x4baa>
         : 5123  ./stdio-common/vfscanf-internal.c:263
    0.00 :   66d69:  lea    0x1(%rax),%rdx
    0.00 :   66d6d:  mov    %rdx,-0x470(%rbp)
    0.00 :   66d74:  mov    %r12b,(%rax)
         : 5127  __vfscanf_internal():
         : 5128  ./stdio-common/vfscanf-internal.c:2106
    0.00 :   66d77:  movzbl 0x1(%r13),%r12d
    0.00 :   66d7c:  add    $0x1,%r13
    0.00 :   66d80:  test   %r12b,%r12b
    0.00 :   66d83:  jne    66d55 <__vfscanf_internal+0x4375>
    0.00 :   66d85:  mov    %r14d,%r13d
    0.00 :   66d88:  mov    %r15d,%r14d
    0.00 :   66d8b:  mov    -0x638(%rbp),%r15
    0.00 :   66d92:  mov    %ebx,%r12d
         : 5137  ./stdio-common/vfscanf-internal.c:2108
    0.00 :   66d95:  test   %r14d,%r14d
         : 5139  ./stdio-common/vfscanf-internal.c:2110
    0.00 :   66d98:  movb   $0x1,-0x630(%rbp)
         : 5141  ./stdio-common/vfscanf-internal.c:2108
    0.00 :   66d9f:  cmovg  %ecx,%r14d
    0.00 :   66da3:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 5144  ./stdio-common/vfscanf-internal.c:1912 (discriminator 4)
    0.00 :   66da8:  mov    %r15,%rdi
    0.00 :   66dab:  call   8da40 <__uflow>
    0.00 :   66db0:  mov    %eax,%r13d
    0.00 :   66db3:  cmp    $0xffffffff,%eax
    0.00 :   66db6:  jne    63a68 <__vfscanf_internal+0x1088>
    0.00 :   66dbc:  mov    %r15,%r14
    0.00 :   66dbf:  jmp    645af <__vfscanf_internal+0x1bcf>
    0.00 :   66dc4:  mov    0x1b3045(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66dcb:  mov    %r15,%r14
    0.00 :   66dce:  jmp    645a5 <__vfscanf_internal+0x1bc5>
         : 5155  ./stdio-common/vfscanf-internal.c:2448
    0.00 :   66dd3:  lea    -0x5e8(%rbp),%rsi
         : 5157  ./stdio-common/vfscanf-internal.c:2446
    0.00 :   66dda:  testb  $0x3,-0x63c(%rbp)
    0.00 :   66de1:  je     67ebb <__vfscanf_internal+0x54db>
         : 5160  ./stdio-common/vfscanf-internal.c:2448
    0.00 :   66de7:  call   47f80 <__strtod_internal>
         : 5162  ./stdio-common/vfscanf-internal.c:2450
    0.00 :   66dec:  test   %ebx,%ebx
    0.00 :   66dee:  jne    64904 <__vfscanf_internal+0x1f24>
    0.00 :   66df4:  mov    -0x5e8(%rbp),%rdx
    0.00 :   66dfb:  cmp    -0x460(%rbp),%rdx
    0.00 :   66e02:  je     695ce <__vfscanf_internal+0x6bee>
         : 5168  ./stdio-common/vfscanf-internal.c:2451
    0.00 :   66e08:  mov    -0x68c(%rbp),%ebx
    0.00 :   66e0e:  test   %ebx,%ebx
    0.00 :   66e10:  jne    695ed <__vfscanf_internal+0x6c0d>
    0.00 :   66e16:  mov    -0x5a8(%rbp),%ecx
    0.00 :   66e1c:  cmp    $0x2f,%ecx
    0.00 :   66e1f:  ja     695d6 <__vfscanf_internal+0x6bf6>
    0.00 :   66e25:  mov    %ecx,%eax
    0.00 :   66e27:  add    $0x8,%ecx
    0.00 :   66e2a:  add    -0x598(%rbp),%rax
    0.00 :   66e31:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   66e37:  mov    (%rax),%rax
         : 5180  char_buffer_start():
         : 5181  ./stdio-common/vfscanf-internal.c:206 (discriminator 8)
    0.00 :   66e3a:  mov    -0x460(%rbp),%rsi
         : 5183  __vfscanf_internal():
         : 5184  ./stdio-common/vfscanf-internal.c:2451 (discriminator 8)
    0.00 :   66e41:  movsd  %xmm0,(%rax)
    0.00 :   66e45:  jmp    63d20 <__vfscanf_internal+0x1340>
         : 5187  ./stdio-common/vfscanf-internal.c:1353 (discriminator 6)
    0.00 :   66e4a:  mov    %r15,%rdi
    0.00 :   66e4d:  call   8da40 <__uflow>
    0.00 :   66e52:  mov    %eax,%r13d
    0.00 :   66e55:  cmp    $0xffffffff,%eax
    0.00 :   66e58:  jne    65830 <__vfscanf_internal+0x2e50>
         : 5193  ./stdio-common/vfscanf-internal.c:1353 (discriminator 11)
    0.00 :   66e5e:  mov    0x1b2fab(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66e65:  mov    %fs:(%r10),%eax
    0.00 :   66e69:  mov    %eax,-0x600(%rbp)
    0.00 :   66e6f:  jmp    6585d <__vfscanf_internal+0x2e7d>
         : 5198  ./stdio-common/vfscanf-internal.c:640 (discriminator 4)
    0.00 :   66e74:  mov    %r15,%rdi
    0.00 :   66e77:  call   8da40 <__uflow>
    0.00 :   66e7c:  mov    %eax,%r13d
    0.00 :   66e7f:  cmp    $0xffffffff,%eax
    0.00 :   66e82:  jne    6594f <__vfscanf_internal+0x2f6f>
    0.00 :   66e88:  mov    %r15,%r14
    0.00 :   66e8b:  jmp    661d4 <__vfscanf_internal+0x37f4>
         : 5206  ./stdio-common/vfscanf-internal.c:864 (discriminator 6)
    0.00 :   66e90:  mov    -0x6c8(%rbp),%rax
    0.00 :   66e97:  mov    -0x68c(%rbp),%edx
    0.00 :   66e9d:  movdqu (%rax),%xmm6
    0.00 :   66ea1:  movups %xmm6,-0x540(%rbp)
    0.00 :   66ea8:  mov    0x10(%rax),%rax
    0.00 :   66eac:  movaps %xmm6,-0x630(%rbp)
    0.00 :   66eb3:  mov    %rax,-0x530(%rbp)
    0.00 :   66eba:  mov    -0x540(%rbp),%eax
    0.00 :   66ec0:  sub    $0x1,%edx
    0.00 :   66ec3:  je     66eec <__vfscanf_internal+0x450c>
    0.00 :   66ec5:  mov    -0x538(%rbp),%rcx
         : 5218  ./stdio-common/vfscanf-internal.c:864
    0.00 :   66ecc:  mov    %eax,%esi
    0.00 :   66ece:  xor    %r10d,%r10d
    0.00 :   66ed1:  cmp    $0x2f,%esi
    0.00 :   66ed4:  ja     66f15 <__vfscanf_internal+0x4535>
    0.00 :   66ed6:  add    $0x8,%esi
    0.00 :   66ed9:  mov    $0x1,%r10d
    0.00 :   66edf:  sub    $0x1,%edx
    0.00 :   66ee2:  jne    66ed1 <__vfscanf_internal+0x44f1>
    0.00 :   66ee4:  mov    %esi,-0x540(%rbp)
    0.00 :   66eea:  mov    %esi,%eax
    0.00 :   66eec:  cmp    $0x2f,%eax
    0.00 :   66eef:  ja     66f30 <__vfscanf_internal+0x4550>
    0.00 :   66ef1:  mov    %eax,%edx
    0.00 :   66ef3:  add    $0x8,%eax
    0.00 :   66ef6:  add    -0x530(%rbp),%rdx
    0.00 :   66efd:  mov    %eax,-0x540(%rbp)
    0.00 :   66f03:  mov    (%rdx),%rax
    0.00 :   66f06:  mov    %rax,-0x670(%rbp)
    0.00 :   66f0d:  mov    %rax,%rbx
    0.00 :   66f10:  jmp    63673 <__vfscanf_internal+0xc93>
    0.00 :   66f15:  lea    0x8(%rcx),%rdi
    0.00 :   66f19:  cmp    $0x1,%edx
    0.00 :   66f1c:  jne    28b75 <__vfscanf_internal.cold+0x20a>
    0.00 :   66f22:  mov    %rdi,-0x538(%rbp)
    0.00 :   66f29:  test   %r10b,%r10b
    0.00 :   66f2c:  jne    66ee4 <__vfscanf_internal+0x4504>
    0.00 :   66f2e:  jmp    66eec <__vfscanf_internal+0x450c>
    0.00 :   66f30:  mov    -0x538(%rbp),%rdx
    0.00 :   66f37:  lea    0x8(%rdx),%rax
    0.00 :   66f3b:  mov    %rax,-0x538(%rbp)
    0.00 :   66f42:  jmp    66f03 <__vfscanf_internal+0x4523>
         : 5250  ./stdio-common/vfscanf-internal.c:1682
    0.00 :   66f44:  add    $0x1,%r15
    0.00 :   66f48:  cmpb   $0x0,(%r15)
    0.00 :   66f4c:  jne    64d8c <__vfscanf_internal+0x23ac>
    0.00 :   66f52:  mov    %r12,%r14
    0.00 :   66f55:  jmp    6620b <__vfscanf_internal+0x382b>
    0.00 :   66f5a:  nopw   0x0(%rax,%rax,1)
         : 5257  ./stdio-common/vfscanf-internal.c:740 (discriminator 4)
    0.00 :   66f60:  mov    %r15,%rdi
    0.00 :   66f63:  call   8da40 <__uflow>
    0.00 :   66f68:  mov    %eax,%r13d
    0.00 :   66f6b:  cmp    $0xffffffff,%eax
    0.00 :   66f6e:  jne    64294 <__vfscanf_internal+0x18b4>
    0.00 :   66f74:  mov    %r15,%r14
         : 5264  ./stdio-common/vfscanf-internal.c:742
    0.00 :   66f77:  mov    -0x640(%rbp),%edi
    0.00 :   66f7d:  mov    $0xffffffff,%eax
    0.00 :   66f82:  test   %edi,%edi
    0.00 :   66f84:  cmovne %edi,%eax
    0.00 :   66f87:  mov    %eax,-0x640(%rbp)
    0.00 :   66f8d:  jmp    63108 <__vfscanf_internal+0x728>
         : 5271  ./stdio-common/vfscanf-internal.c:740 (discriminator 1)
    0.00 :   66f92:  mov    0x1b2e77(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   66f99:  mov    -0x600(%rbp),%esi
    0.00 :   66f9f:  mov    %r15,%r14
    0.00 :   66fa2:  mov    %esi,%fs:(%rax)
         : 5276  ./stdio-common/vfscanf-internal.c:741 (discriminator 1)
    0.00 :   66fa5:  jmp    66f77 <__vfscanf_internal+0x4597>
    0.00 :   66fa7:  movslq -0x638(%rbp),%rax
         : 5279  ./stdio-common/vfscanf-internal.c:809
    0.00 :   66fae:  mov    -0x698(%rbp),%rbx
    0.00 :   66fb5:  mov    %r12,-0x620(%rbp)
         : 5282  ./stdio-common/vfscanf-internal.c:740
    0.00 :   66fbc:  mov    %r12,%r14
         : 5284  ./stdio-common/vfscanf-internal.c:809
    0.00 :   66fbf:  mov    %r13d,%r12d
    0.00 :   66fc2:  lea    -0x1(%rax),%edi
    0.00 :   66fc5:  mov    %rax,-0x630(%rbp)
    0.00 :   66fcc:  mov    -0x6c0(%rbp),%rax
    0.00 :   66fd3:  mov    %edi,-0x610(%rbp)
         : 5290  ./stdio-common/vfscanf-internal.c:804
    0.00 :   66fd9:  mov    -0x670(%rbp),%rsi
    0.00 :   66fe0:  mov    %rbx,%r13
    0.00 :   66fe3:  mov    (%rsi),%rdi
    0.00 :   66fe6:  lea    (%rdi,%rbx,1),%rsi
    0.00 :   66fea:  cmp    %rsi,%rax
    0.00 :   66fed:  je     67096 <__vfscanf_internal+0x46b6>
         : 5297  ./stdio-common/vfscanf-internal.c:837
    0.00 :   66ff3:  mov    %r12b,(%rax)
    0.00 :   66ff6:  lea    0x1(%rax),%r13
         : 5300  ./stdio-common/vfscanf-internal.c:839
    0.00 :   66ffa:  mov    -0x610(%rbp),%eax
    0.00 :   67000:  test   %eax,%eax
    0.00 :   67002:  jle    67e05 <__vfscanf_internal+0x5425>
         : 5304  ./stdio-common/vfscanf-internal.c:839 (discriminator 3)
    0.00 :   67008:  mov    0x8(%r15),%rax
    0.00 :   6700c:  cmp    0x10(%r15),%rax
    0.00 :   67010:  jae    6702e <__vfscanf_internal+0x464e>
         : 5308  ./stdio-common/vfscanf-internal.c:839 (discriminator 5)
    0.00 :   67012:  lea    0x1(%rax),%rcx
    0.00 :   67016:  mov    %rcx,0x8(%r15)
    0.00 :   6701a:  movzbl (%rax),%r12d
    0.00 :   6701e:  subl   $0x1,-0x610(%rbp)
         : 5313  ./stdio-common/vfscanf-internal.c:839 (discriminator 8)
    0.00 :   67025:  add    $0x1,%r14
         : 5315  ./stdio-common/vfscanf-internal.c:837 (discriminator 8)
    0.00 :   67029:  mov    %r13,%rax
    0.00 :   6702c:  jmp    66fd9 <__vfscanf_internal+0x45f9>
         : 5318  ./stdio-common/vfscanf-internal.c:839 (discriminator 4)
    0.00 :   6702e:  mov    %r15,%rdi
    0.00 :   67031:  call   8da40 <__uflow>
    0.00 :   67036:  mov    %eax,%r12d
    0.00 :   67039:  cmp    $0xffffffff,%eax
    0.00 :   6703c:  jne    6701e <__vfscanf_internal+0x463e>
         : 5324  ./stdio-common/vfscanf-internal.c:839
    0.00 :   6703e:  mov    0x1b2dcb(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67045:  mov    %rbx,-0x698(%rbp)
    0.00 :   6704c:  mov    %r13,%rbx
    0.00 :   6704f:  mov    %eax,%r13d
    0.00 :   67052:  mov    %fs:(%r10),%eax
    0.00 :   67056:  mov    %eax,-0x600(%rbp)
         : 5331  ./stdio-common/vfscanf-internal.c:847 (discriminator 1)
    0.00 :   6705c:  mov    -0x670(%rbp),%rax
    0.00 :   67063:  mov    %rbx,%rsi
    0.00 :   67066:  mov    (%rax),%rdi
    0.00 :   67069:  sub    %rdi,%rsi
    0.00 :   6706c:  cmp    -0x698(%rbp),%rsi
    0.00 :   67073:  je     6431f <__vfscanf_internal+0x193f>
         : 5338  ./stdio-common/vfscanf-internal.c:849
    0.00 :   67079:  call   283b0 <realloc@plt>
         : 5340  ./stdio-common/vfscanf-internal.c:850
    0.00 :   6707e:  test   %rax,%rax
    0.00 :   67081:  je     6431f <__vfscanf_internal+0x193f>
         : 5343  ./stdio-common/vfscanf-internal.c:851
    0.00 :   67087:  mov    -0x670(%rbp),%rdi
    0.00 :   6708e:  mov    %rax,(%rdi)
    0.00 :   67091:  jmp    6431f <__vfscanf_internal+0x193f>
         : 5347  ./stdio-common/vfscanf-internal.c:809
    0.00 :   67096:  mov    -0x630(%rbp),%rax
    0.00 :   6709d:  add    -0x620(%rbp),%rax
    0.00 :   670a4:  movslq -0x610(%rbp),%rsi
    0.00 :   670ab:  sub    %r14,%rax
    0.00 :   670ae:  cmp    %rax,%rbx
    0.00 :   670b1:  cmovl  %rbx,%rsi
    0.00 :   670b5:  add    %rbx,%rsi
         : 5355  ./stdio-common/vfscanf-internal.c:811
    0.00 :   670b8:  mov    %rsi,-0x638(%rbp)
    0.00 :   670bf:  call   283b0 <realloc@plt>
         : 5358  ./stdio-common/vfscanf-internal.c:812
    0.00 :   670c4:  mov    -0x638(%rbp),%rsi
    0.00 :   670cb:  test   %rax,%rax
    0.00 :   670ce:  je     693b8 <__vfscanf_internal+0x69d8>
         : 5362  ./stdio-common/vfscanf-internal.c:832
    0.00 :   670d4:  mov    -0x670(%rbp),%rdi
    0.00 :   670db:  mov    %rax,(%rdi)
         : 5365  ./stdio-common/vfscanf-internal.c:833
    0.00 :   670de:  add    %rbx,%rax
         : 5367  ./stdio-common/vfscanf-internal.c:809
    0.00 :   670e1:  mov    %rsi,%rbx
    0.00 :   670e4:  jmp    66ff3 <__vfscanf_internal+0x4613>
         : 5370  ./stdio-common/vfscanf-internal.c:1925 (discriminator 5)
    0.00 :   670e9:  mov    %r15,%rdi
    0.00 :   670ec:  call   8da40 <__uflow>
    0.00 :   670f1:  mov    %eax,%r13d
    0.00 :   670f4:  cmp    $0xffffffff,%eax
    0.00 :   670f7:  jne    6a297 <__vfscanf_internal+0x78b7>
    0.00 :   670fd:  mov    %r15,%r14
    0.00 :   67100:  jmp    63108 <__vfscanf_internal+0x728>
         : 5378  ./stdio-common/vfscanf-internal.c:1895
    0.00 :   67105:  testl  $0x200,-0x63c(%rbp)
    0.00 :   6710f:  jne    67dba <__vfscanf_internal+0x53da>
         : 5381  ./stdio-common/vfscanf-internal.c:1896
    0.00 :   67115:  mov    -0x68c(%rbp),%r11d
    0.00 :   6711c:  test   %r11d,%r11d
    0.00 :   6711f:  jne    68d63 <__vfscanf_internal+0x6383>
    0.00 :   67125:  mov    -0x5a8(%rbp),%ecx
    0.00 :   6712b:  cmp    $0x2f,%ecx
    0.00 :   6712e:  ja     67e7b <__vfscanf_internal+0x549b>
    0.00 :   67134:  mov    %ecx,%eax
    0.00 :   67136:  add    $0x8,%ecx
    0.00 :   67139:  add    -0x598(%rbp),%rax
    0.00 :   67140:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   67146:  mov    (%rax),%rax
    0.00 :   67149:  mov    %edx,(%rax)
    0.00 :   6714b:  jmp    64168 <__vfscanf_internal+0x1788>
         : 5395  ./stdio-common/vfscanf-internal.c:1824 (discriminator 36)
    0.00 :   67150:  mov    %r15,%rdi
    0.00 :   67153:  call   8da40 <__uflow>
    0.00 :   67158:  mov    %eax,%r13d
    0.00 :   6715b:  cmp    $0xffffffff,%eax
    0.00 :   6715e:  jne    69419 <__vfscanf_internal+0x6a39>
         : 5401  ./stdio-common/vfscanf-internal.c:1824 (discriminator 41)
    0.00 :   67164:  mov    0x1b2ca5(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
         : 5403  ./stdio-common/vfscanf-internal.c:1818 (discriminator 41)
    0.00 :   6716b:  cmpl   $0x6c,0x3fc(%rbx)
         : 5405  ./stdio-common/vfscanf-internal.c:1824 (discriminator 41)
    0.00 :   67172:  mov    %r15,%r14
    0.00 :   67175:  mov    %fs:(%r10),%eax
         : 5408  ./stdio-common/vfscanf-internal.c:1818 (discriminator 41)
    0.00 :   67179:  jne    63108 <__vfscanf_internal+0x728>
         : 5410  ./stdio-common/vfscanf-internal.c:1825 (discriminator 29)
    0.00 :   6717f:  mov    %eax,%fs:(%r10)
         : 5412  ./stdio-common/vfscanf-internal.c:1833 (discriminator 29)
    0.00 :   67183:  jmp    63108 <__vfscanf_internal+0x728>
         : 5414  char_buffer_add_slow():
         : 5415  ./stdio-common/vfscanf-internal.c:238
    0.00 :   67188:  test   %rbx,%rbx
    0.00 :   6718b:  je     66310 <__vfscanf_internal+0x3930>
         : 5418  scratch_buffer_grow_preserve():
         : 5419  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   67191:  lea    -0x460(%rbp),%rdi
         : 5421  char_buffer_add_slow():
         : 5422  ./stdio-common/vfscanf-internal.c:240
    0.00 :   67198:  sub    -0x460(%rbp),%rbx
         : 5424  scratch_buffer_grow_preserve():
         : 5425  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6719f:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 5427  char_buffer_add_slow():
         : 5428  ./stdio-common/vfscanf-internal.c:241
    0.00 :   671a4:  test   %al,%al
    0.00 :   671a6:  je     67e51 <__vfscanf_internal+0x5471>
         : 5431  char_buffer_start():
         : 5432  ./stdio-common/vfscanf-internal.c:206
    0.00 :   671ac:  mov    -0x460(%rbp),%rax
         : 5434  char_buffer_add_slow():
         : 5435  ./stdio-common/vfscanf-internal.c:248
    0.00 :   671b3:  add    %rax,%rbx
         : 5437  char_buffer_rewind():
         : 5438  ./stdio-common/vfscanf-internal.c:223
    0.00 :   671b6:  add    -0x458(%rbp),%rax
         : 5440  char_buffer_add_slow():
         : 5441  ./stdio-common/vfscanf-internal.c:249
    0.00 :   671bd:  lea    0x1(%rbx),%rsi
    0.00 :   671c1:  movq   %rax,%xmm7
    0.00 :   671c6:  movq   %rsi,%xmm0
    0.00 :   671cb:  punpcklqdq %xmm7,%xmm0
    0.00 :   671cf:  movaps %xmm0,-0x470(%rbp)
    0.00 :   671d6:  movb   $0x30,(%rbx)
    0.00 :   671d9:  jmp    64090 <__vfscanf_internal+0x16b0>
         : 5449  __vfscanf_internal():
         : 5450  ./stdio-common/vfscanf-internal.c:2017
    0.00 :   671de:  movb   $0x65,-0x610(%rbp)
         : 5452  ./stdio-common/vfscanf-internal.c:1918
    0.00 :   671e5:  xor    %edx,%edx
    0.00 :   671e7:  jmp    6691b <__vfscanf_internal+0x3f3b>
         : 5455  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   671ec:  mov    -0x538(%rbp),%rdx
    0.00 :   671f3:  lea    0x8(%rdx),%rax
    0.00 :   671f7:  mov    %rax,-0x538(%rbp)
    0.00 :   671fe:  jmp    667e0 <__vfscanf_internal+0x3e00>
         : 5460  ./stdio-common/vfscanf-internal.c:1823 (discriminator 36)
    0.00 :   67203:  mov    %r15,%rdi
    0.00 :   67206:  call   8da40 <__uflow>
    0.00 :   6720b:  mov    %eax,%r13d
    0.00 :   6720e:  cmp    $0xffffffff,%eax
    0.00 :   67211:  jne    696dd <__vfscanf_internal+0x6cfd>
         : 5466  ./stdio-common/vfscanf-internal.c:1823 (discriminator 41)
    0.00 :   67217:  mov    0x1b2bf2(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
         : 5468  ./stdio-common/vfscanf-internal.c:1818 (discriminator 41)
    0.00 :   6721e:  cmpl   $0x69,0x3fc(%rbx)
         : 5470  ./stdio-common/vfscanf-internal.c:1823 (discriminator 41)
    0.00 :   67225:  mov    %r15,%r14
    0.00 :   67228:  mov    %fs:(%r10),%eax
         : 5473  ./stdio-common/vfscanf-internal.c:1818 (discriminator 41)
    0.00 :   6722c:  jne    63108 <__vfscanf_internal+0x728>
         : 5475  ./stdio-common/vfscanf-internal.c:1824
    0.00 :   67232:  mov    -0x658(%rbp),%rsi
    0.00 :   67239:  mov    0x70(%rsi),%rdx
         : 5478  ./stdio-common/vfscanf-internal.c:1818
    0.00 :   6723d:  cmpl   $0x6c,0x3fc(%rdx)
    0.00 :   67244:  je     6717f <__vfscanf_internal+0x479f>
    0.00 :   6724a:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6724f:  nop
         : 5483  ./stdio-common/vfscanf-internal.c:662
    0.00 :   67250:  and    $0x200,%eax
    0.00 :   67255:  mov    %eax,-0x610(%rbp)
    0.00 :   6725b:  jne    67ab5 <__vfscanf_internal+0x50d5>
         : 5487  ./stdio-common/vfscanf-internal.c:663
    0.00 :   67261:  mov    -0x68c(%rbp),%ecx
    0.00 :   67267:  test   %ecx,%ecx
    0.00 :   67269:  jne    68b3c <__vfscanf_internal+0x615c>
    0.00 :   6726f:  mov    -0x5a8(%rbp),%edx
    0.00 :   67275:  cmp    $0x2f,%edx
    0.00 :   67278:  ja     68b25 <__vfscanf_internal+0x6145>
    0.00 :   6727e:  mov    %edx,%eax
    0.00 :   67280:  add    $0x8,%edx
    0.00 :   67283:  add    -0x598(%rbp),%rax
    0.00 :   6728a:  mov    %edx,-0x5a8(%rbp)
    0.00 :   67290:  mov    (%rax),%rax
         : 5499  ./stdio-common/vfscanf-internal.c:663 (discriminator 8)
    0.00 :   67293:  mov    %r14d,(%rax)
    0.00 :   67296:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 5502  ./stdio-common/vfscanf-internal.c:2652 (discriminator 1)
    0.00 :   6729b:  mov    0x1b2b6e(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   672a2:  mov    -0x600(%rbp),%edi
    0.00 :   672a8:  mov    %r15,%r14
    0.00 :   672ab:  mov    %edi,%fs:(%rax)
         : 5507  ./stdio-common/vfscanf-internal.c:2653
    0.00 :   672ae:  mov    -0x640(%rbp),%edi
    0.00 :   672b4:  mov    $0xffffffff,%eax
    0.00 :   672b9:  test   %edi,%edi
    0.00 :   672bb:  cmovne %edi,%eax
    0.00 :   672be:  mov    %eax,-0x640(%rbp)
    0.00 :   672c4:  jmp    63108 <__vfscanf_internal+0x728>
         : 5514  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   672c9:  lea    0x8(%rcx),%r10
    0.00 :   672cd:  cmp    $0x1,%edi
    0.00 :   672d0:  jne    28a19 <__vfscanf_internal.cold+0xae>
    0.00 :   672d6:  mov    %r10,-0x538(%rbp)
    0.00 :   672dd:  test   %r11b,%r11b
    0.00 :   672e0:  je     672ea <__vfscanf_internal+0x490a>
    0.00 :   672e2:  mov    %esi,-0x540(%rbp)
    0.00 :   672e8:  mov    %esi,%eax
    0.00 :   672ea:  cmp    $0x2f,%eax
    0.00 :   672ed:  ja     68700 <__vfscanf_internal+0x5d20>
    0.00 :   672f3:  mov    %eax,%ecx
    0.00 :   672f5:  add    $0x8,%eax
    0.00 :   672f8:  add    -0x530(%rbp),%rcx
    0.00 :   672ff:  mov    %eax,-0x540(%rbp)
    0.00 :   67305:  mov    (%rcx),%rax
    0.00 :   67308:  jmp    6636f <__vfscanf_internal+0x398f>
         : 5531  ./stdio-common/vfscanf-internal.c:2046
    0.00 :   6730d:  mov    0x1b2afc(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67314:  mov    %r15,%r14
    0.00 :   67317:  movl   $0xc,%fs:(%rax)
         : 5535  ./stdio-common/vfscanf-internal.c:2047
    0.00 :   6731e:  movl   $0xffffffff,-0x640(%rbp)
         : 5537  ./stdio-common/vfscanf-internal.c:2048
    0.00 :   67328:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6732d:  mov    %r12,-0x6c0(%rbp)
    0.00 :   67334:  mov    %r13,%r14
    0.00 :   67337:  mov    %r11d,%ebx
    0.00 :   6733a:  mov    %r15d,%r13d
    0.00 :   6733d:  mov    %rcx,%r15
         : 5544  ./stdio-common/vfscanf-internal.c:1033
    0.00 :   67340:  movzbl %r13b,%esi
    0.00 :   67344:  mov    %r15,%rdi
    0.00 :   67347:  call   8e7b0 <_IO_sputbackc>
         : 5548  ./stdio-common/vfscanf-internal.c:1034
    0.00 :   6734c:  jmp    655d5 <__vfscanf_internal+0x2bf5>
         : 5550  ./stdio-common/vfscanf-internal.c:1019 (discriminator 19)
    0.00 :   67351:  mov    %rsp,%rax
    0.00 :   67354:  cmp    %rax,%rsp
    0.00 :   67357:  je     6736e <__vfscanf_internal+0x498e>
    0.00 :   67359:  sub    $0x1000,%rsp
    0.00 :   67360:  orq    $0x0,0xff8(%rsp)
    0.00 :   67369:  cmp    %rax,%rsp
    0.00 :   6736c:  jne    67359 <__vfscanf_internal+0x4979>
    0.00 :   6736e:  sub    $0x120,%rsp
    0.00 :   67375:  orq    $0x0,0x118(%rsp)
    0.00 :   6737e:  mov    $0x1,%edx
    0.00 :   67383:  mov    -0x6d0(%rbp),%rdi
    0.00 :   6738a:  lea    0xf(%rsp),%rax
    0.00 :   6738f:  and    $0xfffffffffffffff0,%rax
    0.00 :   67393:  movq   $0x0,(%rax)
    0.00 :   6739a:  mov    %rdi,0x8(%rax)
    0.00 :   6739e:  mov    %rax,-0x6d0(%rbp)
    0.00 :   673a5:  xor    %eax,%eax
    0.00 :   673a7:  jmp    65462 <__vfscanf_internal+0x2a82>
    0.00 :   673ac:  mov    %r15,%r14
    0.00 :   673af:  jmp    63108 <__vfscanf_internal+0x728>
         : 5571  ./stdio-common/vfscanf-internal.c:1923
    0.00 :   673b4:  movb   $0x1,-0x668(%rbp)
    0.00 :   673bb:  mov    -0x470(%rbp),%rsi
    0.00 :   673c2:  movq   $0x1,-0x620(%rbp)
    0.00 :   673cd:  jmp    63b14 <__vfscanf_internal+0x1134>
         : 5576  ./stdio-common/vfscanf-internal.c:1881
    0.00 :   673d2:  testl  $0x200,-0x63c(%rbp)
    0.00 :   673dc:  jne    683f6 <__vfscanf_internal+0x5a16>
         : 5579  ./stdio-common/vfscanf-internal.c:1882
    0.00 :   673e2:  mov    -0x68c(%rbp),%eax
    0.00 :   673e8:  test   %eax,%eax
    0.00 :   673ea:  je     67125 <__vfscanf_internal+0x4745>
         : 5583  ./stdio-common/vfscanf-internal.c:1882 (discriminator 2)
    0.00 :   673f0:  mov    -0x6c8(%rbp),%rax
    0.00 :   673f7:  mov    -0x68c(%rbp),%edi
    0.00 :   673fd:  movdqu (%rax),%xmm7
    0.00 :   67401:  movups %xmm7,-0x540(%rbp)
    0.00 :   67408:  mov    0x10(%rax),%rax
    0.00 :   6740c:  movaps %xmm7,-0x630(%rbp)
    0.00 :   67413:  mov    %rax,-0x530(%rbp)
    0.00 :   6741a:  mov    -0x540(%rbp),%eax
    0.00 :   67420:  sub    $0x1,%edi
    0.00 :   67423:  je     683d1 <__vfscanf_internal+0x59f1>
    0.00 :   67429:  mov    -0x538(%rbp),%rcx
    0.00 :   67430:  mov    %eax,%esi
         : 5596  ./stdio-common/vfscanf-internal.c:1882
    0.00 :   67432:  xor    %r11d,%r11d
    0.00 :   67435:  cmp    $0x2f,%esi
    0.00 :   67438:  ja     683b0 <__vfscanf_internal+0x59d0>
    0.00 :   6743e:  add    $0x8,%esi
    0.00 :   67441:  mov    $0x1,%r11d
    0.00 :   67447:  sub    $0x1,%edi
    0.00 :   6744a:  jne    67435 <__vfscanf_internal+0x4a55>
    0.00 :   6744c:  jmp    683c9 <__vfscanf_internal+0x59e9>
         : 5605  ./stdio-common/vfscanf-internal.c:348 (discriminator 3)
    0.00 :   67451:  mov    0x1b29b8(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67458:  movl   $0x16,%fs:(%rax)
    0.00 :   6745f:  jmp    62e01 <__vfscanf_internal+0x421>
         : 5609  ./stdio-common/vfscanf-internal.c:2901
    0.00 :   67464:  mov    -0x698(%rbp),%rax
         : 5611  ./stdio-common/vfscanf-internal.c:2909
    0.00 :   6746b:  mov    %r13d,-0x650(%rbp)
    0.00 :   67472:  mov    %rbx,%r13
    0.00 :   67475:  mov    %r15,-0x638(%rbp)
    0.00 :   6747c:  mov    %r12d,%r15d
         : 5616  ./stdio-common/vfscanf-internal.c:2901
    0.00 :   6747f:  lea    (%rax,%rax,1),%r9
         : 5618  ./stdio-common/vfscanf-internal.c:2909
    0.00 :   67483:  lea    0x1(%rax),%r10
    0.00 :   67487:  mov    %r9,%rbx
    0.00 :   6748a:  mov    %r10,%r12
         : 5622  ./stdio-common/vfscanf-internal.c:2904
    0.00 :   6748d:  mov    %rbx,%rsi
    0.00 :   67490:  call   283b0 <realloc@plt>
    0.00 :   67495:  mov    %rax,%rsi
         : 5626  ./stdio-common/vfscanf-internal.c:2905
    0.00 :   67498:  test   %rax,%rax
    0.00 :   6749b:  je     69197 <__vfscanf_internal+0x67b7>
         : 5629  ./stdio-common/vfscanf-internal.c:2929
    0.00 :   674a1:  mov    -0x670(%rbp),%rax
    0.00 :   674a8:  mov    %rbx,%r9
    0.00 :   674ab:  mov    %r15d,%r12d
    0.00 :   674ae:  mov    %r13,%rbx
    0.00 :   674b1:  mov    -0x638(%rbp),%r15
    0.00 :   674b8:  mov    -0x650(%rbp),%r13d
    0.00 :   674bf:  mov    %rsi,(%rax)
         : 5637  ./stdio-common/vfscanf-internal.c:2930
    0.00 :   674c2:  add    -0x698(%rbp),%rsi
         : 5639  ./stdio-common/vfscanf-internal.c:2931
    0.00 :   674c9:  mov    %r9,-0x698(%rbp)
    0.00 :   674d0:  jmp    65feb <__vfscanf_internal+0x360b>
         : 5642  ./stdio-common/vfscanf-internal.c:2767 (discriminator 1)
    0.00 :   674d5:  mov    0x1b2934(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   674dc:  mov    -0x600(%rbp),%edi
    0.00 :   674e2:  mov    %r15,%r14
    0.00 :   674e5:  mov    %edi,%fs:(%rax)
         : 5647  ./stdio-common/vfscanf-internal.c:2768
    0.00 :   674e8:  mov    -0x640(%rbp),%esi
    0.00 :   674ee:  mov    $0xffffffff,%eax
    0.00 :   674f3:  test   %esi,%esi
    0.00 :   674f5:  cmovne %esi,%eax
    0.00 :   674f8:  mov    %eax,-0x640(%rbp)
    0.00 :   674fe:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   67503:  mov    %r15,%r14
    0.00 :   67506:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6750b:  mov    %r15,%r14
    0.00 :   6750e:  jmp    63108 <__vfscanf_internal+0x728>
         : 5658  char_buffer_add_slow():
         : 5659  ./stdio-common/vfscanf-internal.c:238
    0.00 :   67513:  test   %rax,%rax
    0.00 :   67516:  je     66a9e <__vfscanf_internal+0x40be>
         : 5662  ./stdio-common/vfscanf-internal.c:240
    0.00 :   6751c:  sub    -0x460(%rbp),%rax
    0.00 :   67523:  mov    %ecx,-0x6fc(%rbp)
         : 5665  scratch_buffer_grow_preserve():
         : 5666  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   67529:  mov    %rdi,-0x6f8(%rbp)
         : 5668  char_buffer_add_slow():
         : 5669  ./stdio-common/vfscanf-internal.c:240
    0.00 :   67530:  mov    %rax,-0x638(%rbp)
         : 5671  scratch_buffer_grow_preserve():
         : 5672  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   67537:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 5674  char_buffer_add_slow():
         : 5675  ./stdio-common/vfscanf-internal.c:241
    0.00 :   6753c:  mov    -0x6f8(%rbp),%rdi
    0.00 :   67543:  mov    -0x6fc(%rbp),%ecx
    0.00 :   67549:  test   %al,%al
    0.00 :   6754b:  je     6a712 <__vfscanf_internal+0x7d32>
         : 5680  char_buffer_start():
         : 5681  ./stdio-common/vfscanf-internal.c:206
    0.00 :   67551:  mov    -0x460(%rbp),%rdx
         : 5683  char_buffer_add_slow():
         : 5684  ./stdio-common/vfscanf-internal.c:248
    0.00 :   67558:  mov    -0x638(%rbp),%rax
    0.00 :   6755f:  add    %rdx,%rax
         : 5687  char_buffer_rewind():
         : 5688  ./stdio-common/vfscanf-internal.c:223
    0.00 :   67562:  add    -0x458(%rbp),%rdx
         : 5690  char_buffer_add_slow():
         : 5691  ./stdio-common/vfscanf-internal.c:249
    0.00 :   67569:  lea    0x1(%rax),%rsi
    0.00 :   6756d:  movq   %rdx,%xmm5
    0.00 :   67572:  movq   %rsi,%xmm0
    0.00 :   67577:  punpcklqdq %xmm5,%xmm0
    0.00 :   6757b:  movaps %xmm0,-0x470(%rbp)
    0.00 :   67582:  mov    %r12b,(%rax)
    0.00 :   67585:  jmp    66a9e <__vfscanf_internal+0x40be>
         : 5699  ./stdio-common/vfscanf-internal.c:238
    0.00 :   6758a:  test   %rax,%rax
    0.00 :   6758d:  je     66d77 <__vfscanf_internal+0x4397>
         : 5702  ./stdio-common/vfscanf-internal.c:240
    0.00 :   67593:  sub    -0x460(%rbp),%rax
    0.00 :   6759a:  mov    %ecx,-0x6f8(%rbp)
         : 5705  scratch_buffer_grow_preserve():
         : 5706  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   675a0:  mov    %rdi,-0x6f0(%rbp)
         : 5708  char_buffer_add_slow():
         : 5709  ./stdio-common/vfscanf-internal.c:240
    0.00 :   675a7:  mov    %rax,-0x630(%rbp)
         : 5711  scratch_buffer_grow_preserve():
         : 5712  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   675ae:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 5714  char_buffer_add_slow():
         : 5715  ./stdio-common/vfscanf-internal.c:241
    0.00 :   675b3:  mov    -0x6f0(%rbp),%rdi
    0.00 :   675ba:  mov    -0x6f8(%rbp),%ecx
    0.00 :   675c0:  test   %al,%al
    0.00 :   675c2:  je     6a27b <__vfscanf_internal+0x789b>
         : 5720  char_buffer_start():
         : 5721  ./stdio-common/vfscanf-internal.c:206
    0.00 :   675c8:  mov    -0x460(%rbp),%rdx
         : 5723  char_buffer_add_slow():
         : 5724  ./stdio-common/vfscanf-internal.c:248
    0.00 :   675cf:  mov    -0x630(%rbp),%rax
    0.00 :   675d6:  add    %rdx,%rax
         : 5727  char_buffer_rewind():
         : 5728  ./stdio-common/vfscanf-internal.c:223
    0.00 :   675d9:  add    -0x458(%rbp),%rdx
         : 5730  char_buffer_add_slow():
         : 5731  ./stdio-common/vfscanf-internal.c:249
    0.00 :   675e0:  lea    0x1(%rax),%rsi
    0.00 :   675e4:  movq   %rdx,%xmm7
    0.00 :   675e9:  movq   %rsi,%xmm0
    0.00 :   675ee:  punpcklqdq %xmm7,%xmm0
    0.00 :   675f2:  movaps %xmm0,-0x470(%rbp)
    0.00 :   675f9:  mov    %r12b,(%rax)
    0.00 :   675fc:  jmp    66d77 <__vfscanf_internal+0x4397>
         : 5739  __vfscanf_internal():
         : 5740  ./stdio-common/vfscanf-internal.c:935
    0.00 :   67601:  mov    -0x698(%rbp),%rax
    0.00 :   67608:  mov    -0x638(%rbp),%rsi
    0.00 :   6760f:  movslq -0x620(%rbp),%rbx
    0.00 :   67616:  cmp    %rsi,%rax
    0.00 :   67619:  cmovle %rax,%rbx
    0.00 :   6761d:  add    %rax,%rbx
         : 5747  ./stdio-common/vfscanf-internal.c:937
    0.00 :   67620:  lea    0x0(,%rbx,4),%rsi
    0.00 :   67628:  call   283b0 <realloc@plt>
         : 5750  ./stdio-common/vfscanf-internal.c:939
    0.00 :   6762d:  test   %rax,%rax
    0.00 :   67630:  je     6a487 <__vfscanf_internal+0x7aa7>
         : 5753  ./stdio-common/vfscanf-internal.c:960
    0.00 :   67636:  mov    -0x670(%rbp),%rdi
         : 5755  ./stdio-common/vfscanf-internal.c:962
    0.00 :   6763d:  mov    %rbx,-0x698(%rbp)
         : 5757  ./stdio-common/vfscanf-internal.c:960
    0.00 :   67644:  mov    %rax,(%rdi)
         : 5759  ./stdio-common/vfscanf-internal.c:961
    0.00 :   67647:  add    %r12,%rax
    0.00 :   6764a:  mov    %rax,-0x6b8(%rbp)
         : 5762  ./stdio-common/vfscanf-internal.c:962
    0.00 :   67651:  jmp    63799 <__vfscanf_internal+0xdb9>
         : 5764  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   67656:  mov    -0x5a0(%rbp),%rax
    0.00 :   6765d:  lea    0x8(%rax),%rdx
    0.00 :   67661:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   67668:  jmp    66276 <__vfscanf_internal+0x3896>
         : 5769  ./stdio-common/vfscanf-internal.c:2470 (discriminator 19)
    0.00 :   6766d:  mov    %rsp,%rax
    0.00 :   67670:  cmp    %rax,%rsp
    0.00 :   67673:  je     65b0d <__vfscanf_internal+0x312d>
    0.00 :   67679:  sub    $0x1000,%rsp
    0.00 :   67680:  orq    $0x0,0xff8(%rsp)
    0.00 :   67689:  cmp    %rax,%rsp
    0.00 :   6768c:  jne    67679 <__vfscanf_internal+0x4c99>
    0.00 :   6768e:  jmp    65b0d <__vfscanf_internal+0x312d>
         : 5778  ./stdio-common/vfscanf-internal.c:1021 (discriminator 4)
    0.00 :   67693:  mov    %r15,%rdi
    0.00 :   67696:  mov    %r10,-0x630(%rbp)
    0.00 :   6769d:  call   8da40 <__uflow>
    0.00 :   676a2:  mov    -0x630(%rbp),%r10
    0.00 :   676a9:  cmp    $0xffffffff,%eax
    0.00 :   676ac:  mov    %eax,%r13d
    0.00 :   676af:  jne    654a7 <__vfscanf_internal+0x2ac7>
    0.00 :   676b5:  mov    %r15,%r14
         : 5787  ./stdio-common/vfscanf-internal.c:1023
    0.00 :   676b8:  mov    -0x640(%rbp),%esi
    0.00 :   676be:  mov    $0xffffffff,%eax
    0.00 :   676c3:  test   %esi,%esi
    0.00 :   676c5:  cmovne %esi,%eax
    0.00 :   676c8:  mov    %eax,-0x640(%rbp)
    0.00 :   676ce:  jmp    63108 <__vfscanf_internal+0x728>
         : 5794  ./stdio-common/vfscanf-internal.c:1021 (discriminator 1)
    0.00 :   676d3:  mov    -0x600(%rbp),%eax
    0.00 :   676d9:  mov    %r15,%r14
    0.00 :   676dc:  mov    %eax,%fs:(%r10)
         : 5798  ./stdio-common/vfscanf-internal.c:1022 (discriminator 1)
    0.00 :   676e0:  jmp    676b8 <__vfscanf_internal+0x4cd8>
         : 5800  ./stdio-common/vfscanf-internal.c:864
    0.00 :   676e2:  mov    -0x5a0(%rbp),%rax
    0.00 :   676e9:  lea    0x8(%rax),%rdx
    0.00 :   676ed:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   676f4:  jmp    66531 <__vfscanf_internal+0x3b51>
         : 5805  ./stdio-common/vfscanf-internal.c:737 (discriminator 4)
    0.00 :   676f9:  mov    -0x68c(%rbp),%eax
    0.00 :   676ff:  test   %eax,%eax
    0.00 :   67701:  jne    68f9b <__vfscanf_internal+0x65bb>
         : 5809  ./stdio-common/vfscanf-internal.c:737
    0.00 :   67707:  mov    -0x5a8(%rbp),%edx
    0.00 :   6770d:  cmp    $0x2f,%edx
    0.00 :   67710:  ja     678b5 <__vfscanf_internal+0x4ed5>
    0.00 :   67716:  mov    %edx,%eax
    0.00 :   67718:  add    $0x8,%edx
    0.00 :   6771b:  add    -0x598(%rbp),%rax
    0.00 :   67722:  mov    %edx,-0x5a8(%rbp)
    0.00 :   67728:  mov    (%rax),%rax
    0.00 :   6772b:  mov    %rax,-0x6c0(%rbp)
         : 5819  ./stdio-common/vfscanf-internal.c:737 (discriminator 31)
    0.00 :   67732:  cmpq   $0x0,-0x6c0(%rbp)
    0.00 :   6773a:  jne    64270 <__vfscanf_internal+0x1890>
    0.00 :   67740:  mov    %r15,%r14
    0.00 :   67743:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   67748:  nopl   0x0(%rax,%rax,1)
    0.00 :   67750:  mov    %rbx,-0x6b8(%rbp)
    0.00 :   67757:  mov    %r15,%r14
    0.00 :   6775a:  mov    -0x610(%rbp),%ebx
    0.00 :   67760:  mov    %r12,%r15
    0.00 :   67763:  mov    -0x650(%rbp),%r12
         : 5830  ./stdio-common/vfscanf-internal.c:2661
    0.00 :   6776a:  movzbl %r13b,%esi
    0.00 :   6776e:  mov    %r15,%rdi
    0.00 :   67771:  call   8e7b0 <_IO_sputbackc>
         : 5834  ./stdio-common/vfscanf-internal.c:2662
    0.00 :   67776:  jmp    65edf <__vfscanf_internal+0x34ff>
         : 5836  ./stdio-common/vfscanf-internal.c:737 (discriminator 19)
    0.00 :   6777b:  mov    %rsp,%rax
    0.00 :   6777e:  cmp    %rax,%rsp
    0.00 :   67781:  je     67798 <__vfscanf_internal+0x4db8>
    0.00 :   67783:  sub    $0x1000,%rsp
    0.00 :   6778a:  orq    $0x0,0xff8(%rsp)
    0.00 :   67793:  cmp    %rax,%rsp
    0.00 :   67796:  jne    67783 <__vfscanf_internal+0x4da3>
    0.00 :   67798:  sub    $0x120,%rsp
    0.00 :   6779f:  orq    $0x0,0x118(%rsp)
    0.00 :   677a8:  mov    $0x1,%edx
    0.00 :   677ad:  mov    -0x6d0(%rbp),%rdi
    0.00 :   677b4:  lea    0xf(%rsp),%rax
    0.00 :   677b9:  and    $0xfffffffffffffff0,%rax
    0.00 :   677bd:  movq   $0x0,(%rax)
    0.00 :   677c4:  mov    %rdi,0x8(%rax)
    0.00 :   677c8:  mov    %rax,-0x6d0(%rbp)
    0.00 :   677cf:  xor    %eax,%eax
    0.00 :   677d1:  jmp    6425a <__vfscanf_internal+0x187a>
         : 5855  ./stdio-common/vfscanf-internal.c:737
    0.00 :   677d6:  mov    -0x5a0(%rbp),%rax
    0.00 :   677dd:  lea    0x8(%rax),%rdx
    0.00 :   677e1:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   677e8:  jmp    641ee <__vfscanf_internal+0x180e>
         : 5860  ./stdio-common/vfscanf-internal.c:1878 (discriminator 2)
    0.00 :   677ed:  mov    -0x6c8(%rbp),%rax
    0.00 :   677f4:  mov    -0x68c(%rbp),%edi
    0.00 :   677fa:  movdqu (%rax),%xmm6
    0.00 :   677fe:  movups %xmm6,-0x540(%rbp)
    0.00 :   67805:  mov    0x10(%rax),%rax
    0.00 :   67809:  movaps %xmm6,-0x630(%rbp)
    0.00 :   67810:  mov    %rax,-0x530(%rbp)
    0.00 :   67817:  mov    -0x540(%rbp),%eax
    0.00 :   6781d:  sub    $0x1,%edi
    0.00 :   67820:  je     65a38 <__vfscanf_internal+0x3058>
    0.00 :   67826:  mov    -0x538(%rbp),%rcx
         : 5872  ./stdio-common/vfscanf-internal.c:1878
    0.00 :   6782d:  mov    %eax,%esi
    0.00 :   6782f:  xor    %r11d,%r11d
    0.00 :   67832:  cmp    $0x2f,%esi
    0.00 :   67835:  ja     6784a <__vfscanf_internal+0x4e6a>
    0.00 :   67837:  add    $0x8,%esi
    0.00 :   6783a:  mov    $0x1,%r11d
    0.00 :   67840:  sub    $0x1,%edi
    0.00 :   67843:  jne    67832 <__vfscanf_internal+0x4e52>
    0.00 :   67845:  jmp    65a30 <__vfscanf_internal+0x3050>
    0.00 :   6784a:  lea    0x8(%rcx),%r10
    0.00 :   6784e:  cmp    $0x1,%edi
    0.00 :   67851:  jne    28c23 <__vfscanf_internal.cold+0x2b8>
    0.00 :   67857:  jmp    66565 <__vfscanf_internal+0x3b85>
    0.00 :   6785c:  nopl   0x0(%rax)
    0.00 :   67860:  mov    %rsi,-0x6c0(%rbp)
    0.00 :   67867:  mov    %r13d,%eax
    0.00 :   6786a:  mov    %r14d,%r13d
    0.00 :   6786d:  mov    %rbx,%r14
    0.00 :   67870:  mov    %eax,%ebx
         : 5892  ./stdio-common/vfscanf-internal.c:2889
    0.00 :   67872:  movzbl %r13b,%esi
    0.00 :   67876:  mov    %r15,%rdi
    0.00 :   67879:  call   8e7b0 <_IO_sputbackc>
         : 5896  ./stdio-common/vfscanf-internal.c:2890
    0.00 :   6787e:  jmp    6608e <__vfscanf_internal+0x36ae>
         : 5898  ./stdio-common/vfscanf-internal.c:2767 (discriminator 4)
    0.00 :   67883:  mov    %r15,%rdi
    0.00 :   67886:  call   8da40 <__uflow>
    0.00 :   6788b:  mov    %eax,%r13d
    0.00 :   6788e:  cmp    $0xffffffff,%eax
    0.00 :   67891:  jne    65f74 <__vfscanf_internal+0x3594>
    0.00 :   67897:  mov    %r15,%r14
    0.00 :   6789a:  jmp    674e8 <__vfscanf_internal+0x4b08>
         : 5906  ./stdio-common/vfscanf-internal.c:2738
    0.00 :   6789f:  mov    0x1b256a(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   678a6:  mov    %r15,%r14
    0.00 :   678a9:  movl   $0x54,%fs:(%rax)
    0.00 :   678b0:  jmp    63108 <__vfscanf_internal+0x728>
         : 5911  ./stdio-common/vfscanf-internal.c:737
    0.00 :   678b5:  mov    -0x5a0(%rbp),%rax
    0.00 :   678bc:  lea    0x8(%rax),%rdx
    0.00 :   678c0:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   678c7:  jmp    67728 <__vfscanf_internal+0x4d48>
         : 5916  char_buffer_add_slow():
         : 5917  ./stdio-common/vfscanf-internal.c:238
    0.00 :   678cc:  test   %rax,%rax
    0.00 :   678cf:  je     63ab3 <__vfscanf_internal+0x10d3>
         : 5920  ./stdio-common/vfscanf-internal.c:240
    0.00 :   678d5:  sub    -0x460(%rbp),%rax
         : 5922  scratch_buffer_grow_preserve():
         : 5923  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   678dc:  lea    -0x460(%rbp),%rdi
         : 5925  char_buffer_add_slow():
         : 5926  ./stdio-common/vfscanf-internal.c:240
    0.00 :   678e3:  mov    %rax,%rbx
         : 5928  scratch_buffer_grow_preserve():
         : 5929  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   678e6:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 5931  char_buffer_add_slow():
         : 5932  ./stdio-common/vfscanf-internal.c:241
    0.00 :   678eb:  test   %al,%al
    0.00 :   678ed:  je     6903f <__vfscanf_internal+0x665f>
         : 5935  char_buffer_start():
         : 5936  ./stdio-common/vfscanf-internal.c:206
    0.00 :   678f3:  mov    -0x460(%rbp),%rax
         : 5938  char_buffer_add_slow():
         : 5939  ./stdio-common/vfscanf-internal.c:248
    0.00 :   678fa:  add    %rax,%rbx
         : 5941  char_buffer_rewind():
         : 5942  ./stdio-common/vfscanf-internal.c:223
    0.00 :   678fd:  add    -0x458(%rbp),%rax
         : 5944  char_buffer_add_slow():
         : 5945  ./stdio-common/vfscanf-internal.c:249
    0.00 :   67904:  lea    0x1(%rbx),%rsi
    0.00 :   67908:  movq   %rax,%xmm7
    0.00 :   6790d:  movq   %rsi,%xmm0
    0.00 :   67912:  punpcklqdq %xmm7,%xmm0
    0.00 :   67916:  movaps %xmm0,-0x470(%rbp)
    0.00 :   6791d:  mov    %r13b,(%rbx)
    0.00 :   67920:  jmp    63ab3 <__vfscanf_internal+0x10d3>
    0.00 :   67925:  mov    %r15,%r14
    0.00 :   67928:  jmp    63108 <__vfscanf_internal+0x728>
         : 5955  __vfscanf_internal():
         : 5956  ./stdio-common/vfscanf-internal.c:2505
    0.00 :   6792d:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   67937:  mov    %r15,%r14
    0.00 :   6793a:  jmp    63108 <__vfscanf_internal+0x728>
         : 5960  ./stdio-common/vfscanf-internal.c:1891
    0.00 :   6793f:  mov    -0x538(%rbp),%rcx
    0.00 :   67946:  lea    0x8(%rcx),%rax
    0.00 :   6794a:  mov    %rax,-0x538(%rbp)
    0.00 :   67951:  jmp    65a53 <__vfscanf_internal+0x3073>
    0.00 :   67956:  mov    %r13d,%eax
    0.00 :   67959:  mov    %rsi,-0x6c0(%rbp)
    0.00 :   67960:  mov    %r14d,%r13d
    0.00 :   67963:  mov    %rbx,%r14
    0.00 :   67966:  mov    %eax,%ebx
    0.00 :   67968:  jmp    6608e <__vfscanf_internal+0x36ae>
         : 5971  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   6796d:  mov    -0x5a0(%rbp),%rax
    0.00 :   67974:  lea    0x8(%rax),%rdx
    0.00 :   67978:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   6797f:  jmp    6440c <__vfscanf_internal+0x1a2c>
         : 5976  ./stdio-common/vfscanf-internal.c:2470 (discriminator 6)
    0.00 :   67984:  mov    -0x6c8(%rbp),%rax
    0.00 :   6798b:  mov    -0x68c(%rbp),%esi
    0.00 :   67991:  movdqu (%rax),%xmm7
    0.00 :   67995:  movups %xmm7,-0x540(%rbp)
    0.00 :   6799c:  mov    0x10(%rax),%rax
    0.00 :   679a0:  movaps %xmm7,-0x630(%rbp)
    0.00 :   679a7:  mov    %rax,-0x530(%rbp)
    0.00 :   679ae:  mov    -0x540(%rbp),%eax
    0.00 :   679b4:  sub    $0x1,%esi
    0.00 :   679b7:  je     679fb <__vfscanf_internal+0x501b>
    0.00 :   679b9:  mov    -0x538(%rbp),%rdx
         : 5988  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   679c0:  mov    %eax,%ecx
    0.00 :   679c2:  xor    %r10d,%r10d
    0.00 :   679c5:  cmp    $0x2f,%ecx
    0.00 :   679c8:  ja     679da <__vfscanf_internal+0x4ffa>
    0.00 :   679ca:  add    $0x8,%ecx
    0.00 :   679cd:  mov    $0x1,%r10d
    0.00 :   679d3:  sub    $0x1,%esi
    0.00 :   679d6:  jne    679c5 <__vfscanf_internal+0x4fe5>
    0.00 :   679d8:  jmp    679f3 <__vfscanf_internal+0x5013>
    0.00 :   679da:  lea    0x8(%rdx),%rdi
    0.00 :   679de:  cmp    $0x1,%esi
    0.00 :   679e1:  jne    28c97 <__vfscanf_internal.cold+0x32c>
    0.00 :   679e7:  mov    %rdi,-0x538(%rbp)
    0.00 :   679ee:  test   %r10b,%r10b
    0.00 :   679f1:  je     679fb <__vfscanf_internal+0x501b>
    0.00 :   679f3:  mov    %ecx,-0x540(%rbp)
    0.00 :   679f9:  mov    %ecx,%eax
    0.00 :   679fb:  cmp    $0x2f,%eax
    0.00 :   679fe:  ja     67a71 <__vfscanf_internal+0x5091>
    0.00 :   67a00:  mov    %eax,%edx
    0.00 :   67a02:  add    $0x8,%eax
    0.00 :   67a05:  add    -0x530(%rbp),%rdx
    0.00 :   67a0c:  mov    %eax,-0x540(%rbp)
    0.00 :   67a12:  mov    (%rdx),%rax
    0.00 :   67a15:  mov    %rax,-0x670(%rbp)
    0.00 :   67a1c:  mov    %rax,%r14
    0.00 :   67a1f:  jmp    64419 <__vfscanf_internal+0x1a39>
         : 6016  ./stdio-common/vfscanf-internal.c:2470 (discriminator 4)
    0.00 :   67a24:  mov    -0x68c(%rbp),%r9d
    0.00 :   67a2b:  test   %r9d,%r9d
    0.00 :   67a2e:  jne    68a84 <__vfscanf_internal+0x60a4>
         : 6020  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   67a34:  mov    -0x5a8(%rbp),%edx
    0.00 :   67a3a:  cmp    $0x2f,%edx
    0.00 :   67a3d:  ja     67a85 <__vfscanf_internal+0x50a5>
    0.00 :   67a3f:  mov    %edx,%eax
    0.00 :   67a41:  add    $0x8,%edx
    0.00 :   67a44:  add    -0x598(%rbp),%rax
    0.00 :   67a4b:  mov    %edx,-0x5a8(%rbp)
    0.00 :   67a51:  mov    (%rax),%rax
    0.00 :   67a54:  mov    %rax,-0x6b8(%rbp)
         : 6030  ./stdio-common/vfscanf-internal.c:2470 (discriminator 31)
    0.00 :   67a5b:  cmpq   $0x0,-0x6b8(%rbp)
    0.00 :   67a63:  jne    64481 <__vfscanf_internal+0x1aa1>
    0.00 :   67a69:  mov    %r15,%r14
    0.00 :   67a6c:  jmp    63108 <__vfscanf_internal+0x728>
         : 6035  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   67a71:  mov    -0x538(%rbp),%rdx
    0.00 :   67a78:  lea    0x8(%rdx),%rax
    0.00 :   67a7c:  mov    %rax,-0x538(%rbp)
    0.00 :   67a83:  jmp    67a12 <__vfscanf_internal+0x5032>
    0.00 :   67a85:  mov    -0x5a0(%rbp),%rax
    0.00 :   67a8c:  lea    0x8(%rax),%rdx
    0.00 :   67a90:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   67a97:  jmp    67a51 <__vfscanf_internal+0x5071>
         : 6044  ./stdio-common/vfscanf-internal.c:2652 (discriminator 4)
    0.00 :   67a99:  mov    %r15,%rdi
    0.00 :   67a9c:  call   8da40 <__uflow>
    0.00 :   67aa1:  mov    %eax,%r13d
    0.00 :   67aa4:  cmp    $0xffffffff,%eax
    0.00 :   67aa7:  jne    65d09 <__vfscanf_internal+0x3329>
    0.00 :   67aad:  mov    %r15,%r14
    0.00 :   67ab0:  jmp    672ae <__vfscanf_internal+0x48ce>
         : 6052  ./stdio-common/vfscanf-internal.c:665
    0.00 :   67ab5:  mov    -0x68c(%rbp),%edx
    0.00 :   67abb:  test   %edx,%edx
    0.00 :   67abd:  jne    6a305 <__vfscanf_internal+0x7925>
    0.00 :   67ac3:  mov    -0x5a8(%rbp),%edx
    0.00 :   67ac9:  cmp    $0x2f,%edx
    0.00 :   67acc:  ja     6a2ee <__vfscanf_internal+0x790e>
    0.00 :   67ad2:  mov    %edx,%eax
    0.00 :   67ad4:  add    $0x8,%edx
    0.00 :   67ad7:  add    -0x598(%rbp),%rax
    0.00 :   67ade:  mov    %edx,-0x5a8(%rbp)
    0.00 :   67ae4:  mov    (%rax),%rax
         : 6064  ./stdio-common/vfscanf-internal.c:665 (discriminator 8)
    0.00 :   67ae7:  mov    %r14b,(%rax)
    0.00 :   67aea:  movl   $0x0,-0x610(%rbp)
    0.00 :   67af4:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 6068  char_buffer_add_slow():
         : 6069  ./stdio-common/vfscanf-internal.c:240
    0.00 :   67af9:  sub    -0x460(%rbp),%rsi
         : 6071  scratch_buffer_grow_preserve():
         : 6072  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   67b00:  lea    -0x460(%rbp),%rdi
         : 6074  char_buffer_add_slow():
         : 6075  ./stdio-common/vfscanf-internal.c:240
    0.00 :   67b07:  mov    %rsi,%rbx
         : 6077  scratch_buffer_grow_preserve():
         : 6078  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   67b0a:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 6080  char_buffer_add_slow():
         : 6081  ./stdio-common/vfscanf-internal.c:241
    0.00 :   67b0f:  test   %al,%al
    0.00 :   67b11:  je     693e5 <__vfscanf_internal+0x6a05>
         : 6084  char_buffer_start():
         : 6085  ./stdio-common/vfscanf-internal.c:206
    0.00 :   67b17:  mov    -0x460(%rbp),%rax
         : 6087  char_buffer_add_slow():
         : 6088  ./stdio-common/vfscanf-internal.c:248
    0.00 :   67b1e:  add    %rax,%rbx
         : 6090  char_buffer_rewind():
         : 6091  ./stdio-common/vfscanf-internal.c:223
    0.00 :   67b21:  add    -0x458(%rbp),%rax
         : 6093  char_buffer_add_slow():
         : 6094  ./stdio-common/vfscanf-internal.c:249
    0.00 :   67b28:  lea    0x1(%rbx),%rsi
    0.00 :   67b2c:  movq   %rax,%xmm6
    0.00 :   67b31:  movq   %rsi,%xmm0
    0.00 :   67b36:  punpcklqdq %xmm6,%xmm0
    0.00 :   67b3a:  movaps %xmm0,-0x470(%rbp)
    0.00 :   67b41:  mov    %r13b,(%rbx)
    0.00 :   67b44:  jmp    66996 <__vfscanf_internal+0x3fb6>
    0.00 :   67b49:  mov    %r15,%r14
    0.00 :   67b4c:  jmp    63108 <__vfscanf_internal+0x728>
         : 6104  __vfscanf_internal():
         : 6105  ./stdio-common/vfscanf-internal.c:864 (discriminator 24)
    0.00 :   67b51:  mov    -0x6c8(%rbp),%rax
    0.00 :   67b58:  mov    -0x68c(%rbp),%edx
    0.00 :   67b5e:  movdqu (%rax),%xmm5
    0.00 :   67b62:  movups %xmm5,-0x540(%rbp)
    0.00 :   67b69:  mov    0x10(%rax),%rax
    0.00 :   67b6d:  movaps %xmm5,-0x630(%rbp)
    0.00 :   67b74:  mov    %rax,-0x530(%rbp)
    0.00 :   67b7b:  mov    -0x540(%rbp),%eax
    0.00 :   67b81:  sub    $0x1,%edx
    0.00 :   67b84:  je     67bad <__vfscanf_internal+0x51cd>
    0.00 :   67b86:  mov    -0x538(%rbp),%rcx
         : 6117  ./stdio-common/vfscanf-internal.c:864
    0.00 :   67b8d:  mov    %eax,%esi
    0.00 :   67b8f:  xor    %r10d,%r10d
    0.00 :   67b92:  cmp    $0x2f,%esi
    0.00 :   67b95:  ja     67bd3 <__vfscanf_internal+0x51f3>
    0.00 :   67b97:  add    $0x8,%esi
    0.00 :   67b9a:  mov    $0x1,%r10d
    0.00 :   67ba0:  sub    $0x1,%edx
    0.00 :   67ba3:  jne    67b92 <__vfscanf_internal+0x51b2>
    0.00 :   67ba5:  mov    %esi,-0x540(%rbp)
    0.00 :   67bab:  mov    %esi,%eax
    0.00 :   67bad:  cmp    $0x2f,%eax
    0.00 :   67bb0:  ja     67c05 <__vfscanf_internal+0x5225>
    0.00 :   67bb2:  mov    %eax,%edx
    0.00 :   67bb4:  add    $0x8,%eax
    0.00 :   67bb7:  add    -0x530(%rbp),%rdx
    0.00 :   67bbe:  mov    %eax,-0x540(%rbp)
    0.00 :   67bc4:  mov    (%rdx),%rax
    0.00 :   67bc7:  mov    %rax,-0x6b8(%rbp)
    0.00 :   67bce:  jmp    6653b <__vfscanf_internal+0x3b5b>
    0.00 :   67bd3:  lea    0x8(%rcx),%rdi
    0.00 :   67bd7:  cmp    $0x1,%edx
    0.00 :   67bda:  jne    28ac7 <__vfscanf_internal.cold+0x15c>
    0.00 :   67be0:  mov    %rdi,-0x538(%rbp)
    0.00 :   67be7:  test   %r10b,%r10b
    0.00 :   67bea:  jne    67ba5 <__vfscanf_internal+0x51c5>
    0.00 :   67bec:  jmp    67bad <__vfscanf_internal+0x51cd>
         : 6144  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   67bee:  mov    -0x5a0(%rbp),%rax
    0.00 :   67bf5:  lea    0x8(%rax),%rdx
    0.00 :   67bf9:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   67c00:  jmp    65aa4 <__vfscanf_internal+0x30c4>
         : 6149  ./stdio-common/vfscanf-internal.c:864
    0.00 :   67c05:  mov    -0x538(%rbp),%rdx
    0.00 :   67c0c:  lea    0x8(%rdx),%rax
    0.00 :   67c10:  mov    %rax,-0x538(%rbp)
    0.00 :   67c17:  jmp    67bc4 <__vfscanf_internal+0x51e4>
         : 6154  ./stdio-common/vfscanf-internal.c:2472 (discriminator 6)
    0.00 :   67c19:  mov    -0x6c8(%rbp),%rax
    0.00 :   67c20:  mov    -0x68c(%rbp),%esi
    0.00 :   67c26:  movdqu (%rax),%xmm7
    0.00 :   67c2a:  movups %xmm7,-0x540(%rbp)
    0.00 :   67c31:  mov    0x10(%rax),%rax
    0.00 :   67c35:  movaps %xmm7,-0x630(%rbp)
    0.00 :   67c3c:  mov    %rax,-0x530(%rbp)
    0.00 :   67c43:  mov    -0x540(%rbp),%eax
    0.00 :   67c49:  sub    $0x1,%esi
    0.00 :   67c4c:  je     67c91 <__vfscanf_internal+0x52b1>
    0.00 :   67c4e:  mov    -0x538(%rbp),%rdx
         : 6166  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   67c55:  mov    %eax,%ecx
    0.00 :   67c57:  xor    %r10d,%r10d
    0.00 :   67c5a:  cmp    $0x2f,%ecx
    0.00 :   67c5d:  ja     67c70 <__vfscanf_internal+0x5290>
    0.00 :   67c5f:  add    $0x8,%ecx
    0.00 :   67c62:  mov    $0x1,%r10d
    0.00 :   67c68:  sub    $0x1,%esi
    0.00 :   67c6b:  jne    67c5a <__vfscanf_internal+0x527a>
    0.00 :   67c6d:  jmp    67c89 <__vfscanf_internal+0x52a9>
    0.00 :   67c6f:  nop
    0.00 :   67c70:  lea    0x8(%rdx),%rdi
    0.00 :   67c74:  cmp    $0x1,%esi
    0.00 :   67c77:  jne    2896b <__vfscanf_internal.cold>
    0.00 :   67c7d:  mov    %rdi,-0x538(%rbp)
    0.00 :   67c84:  test   %r10b,%r10b
    0.00 :   67c87:  je     67c91 <__vfscanf_internal+0x52b1>
    0.00 :   67c89:  mov    %ecx,-0x540(%rbp)
    0.00 :   67c8f:  mov    %ecx,%eax
    0.00 :   67c91:  cmp    $0x2f,%eax
    0.00 :   67c94:  ja     689f8 <__vfscanf_internal+0x6018>
    0.00 :   67c9a:  mov    %eax,%edx
    0.00 :   67c9c:  add    $0x8,%eax
    0.00 :   67c9f:  add    -0x530(%rbp),%rdx
    0.00 :   67ca6:  mov    %eax,-0x540(%rbp)
    0.00 :   67cac:  mov    (%rdx),%rax
    0.00 :   67caf:  mov    %rax,-0x670(%rbp)
    0.00 :   67cb6:  mov    %rax,%r14
    0.00 :   67cb9:  jmp    65ab1 <__vfscanf_internal+0x30d1>
         : 6195  ./stdio-common/vfscanf-internal.c:659 (discriminator 2)
    0.00 :   67cbe:  mov    -0x6c8(%rbp),%rax
    0.00 :   67cc5:  mov    -0x68c(%rbp),%edx
    0.00 :   67ccb:  movdqu (%rax),%xmm6
    0.00 :   67ccf:  movups %xmm6,-0x540(%rbp)
    0.00 :   67cd6:  mov    0x10(%rax),%rax
    0.00 :   67cda:  movaps %xmm6,-0x630(%rbp)
    0.00 :   67ce1:  mov    %rax,-0x530(%rbp)
    0.00 :   67ce8:  mov    -0x540(%rbp),%eax
    0.00 :   67cee:  sub    $0x1,%edx
    0.00 :   67cf1:  je     67d1a <__vfscanf_internal+0x533a>
    0.00 :   67cf3:  mov    -0x538(%rbp),%rcx
    0.00 :   67cfa:  mov    %eax,%esi
         : 6208  ./stdio-common/vfscanf-internal.c:659
    0.00 :   67cfc:  xor    %r10d,%r10d
    0.00 :   67cff:  cmp    $0x2f,%esi
    0.00 :   67d02:  ja     67d3d <__vfscanf_internal+0x535d>
    0.00 :   67d04:  add    $0x8,%esi
    0.00 :   67d07:  mov    $0x1,%r10d
    0.00 :   67d0d:  sub    $0x1,%edx
    0.00 :   67d10:  jne    67cff <__vfscanf_internal+0x531f>
    0.00 :   67d12:  mov    %esi,-0x540(%rbp)
    0.00 :   67d18:  mov    %esi,%eax
    0.00 :   67d1a:  cmp    $0x2f,%eax
    0.00 :   67d1d:  ja     6a604 <__vfscanf_internal+0x7c24>
    0.00 :   67d23:  mov    %eax,%edx
    0.00 :   67d25:  add    $0x8,%eax
    0.00 :   67d28:  add    -0x530(%rbp),%rdx
    0.00 :   67d2f:  mov    %eax,-0x540(%rbp)
    0.00 :   67d35:  mov    (%rdx),%rax
    0.00 :   67d38:  jmp    6439f <__vfscanf_internal+0x19bf>
    0.00 :   67d3d:  lea    0x8(%rcx),%rdi
    0.00 :   67d41:  cmp    $0x1,%edx
    0.00 :   67d44:  jne    289a5 <__vfscanf_internal.cold+0x3a>
    0.00 :   67d4a:  mov    %rdi,-0x538(%rbp)
    0.00 :   67d51:  test   %r10b,%r10b
    0.00 :   67d54:  jne    67d12 <__vfscanf_internal+0x5332>
    0.00 :   67d56:  jmp    67d1a <__vfscanf_internal+0x533a>
         : 6233  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   67d58:  mov    -0x5a0(%rbp),%rax
    0.00 :   67d5f:  lea    0x8(%rax),%rcx
    0.00 :   67d63:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   67d6a:  jmp    6636c <__vfscanf_internal+0x398c>
         : 6238  ./stdio-common/vfscanf-internal.c:1959 (discriminator 1)
    0.00 :   67d6f:  mov    %r15,%rdi
    0.00 :   67d72:  call   8da40 <__uflow>
    0.00 :   67d77:  cmp    $0xffffffff,%eax
    0.00 :   67d7a:  jne    6935c <__vfscanf_internal+0x697c>
    0.00 :   67d80:  mov    %r15,%r14
    0.00 :   67d83:  jmp    63108 <__vfscanf_internal+0x728>
         : 6245  ./stdio-common/vfscanf-internal.c:1966 (discriminator 1)
    0.00 :   67d88:  mov    %r15,%rdi
    0.00 :   67d8b:  call   8da40 <__uflow>
    0.00 :   67d90:  mov    %eax,%r13d
    0.00 :   67d93:  cmp    $0xffffffff,%eax
    0.00 :   67d96:  jne    6a6c5 <__vfscanf_internal+0x7ce5>
    0.00 :   67d9c:  mov    %r15,%r14
    0.00 :   67d9f:  jmp    63108 <__vfscanf_internal+0x728>
         : 6253  ./stdio-common/vfscanf-internal.c:985
    0.00 :   67da4:  mov    0x1b2065(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67dab:  mov    %r15,%r14
    0.00 :   67dae:  movl   $0x54,%fs:(%rax)
    0.00 :   67db5:  jmp    63108 <__vfscanf_internal+0x728>
         : 6258  ./stdio-common/vfscanf-internal.c:1898
    0.00 :   67dba:  mov    -0x68c(%rbp),%r10d
    0.00 :   67dc1:  test   %r10d,%r10d
    0.00 :   67dc4:  jne    692ed <__vfscanf_internal+0x690d>
    0.00 :   67dca:  mov    -0x5a8(%rbp),%ecx
    0.00 :   67dd0:  cmp    $0x2f,%ecx
    0.00 :   67dd3:  ja     67df1 <__vfscanf_internal+0x5411>
    0.00 :   67dd5:  mov    %ecx,%eax
    0.00 :   67dd7:  add    $0x8,%ecx
    0.00 :   67dda:  add    -0x598(%rbp),%rax
    0.00 :   67de1:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   67de7:  mov    (%rax),%rax
    0.00 :   67dea:  mov    %dl,(%rax)
    0.00 :   67dec:  jmp    64168 <__vfscanf_internal+0x1788>
    0.00 :   67df1:  mov    -0x5a0(%rbp),%rax
    0.00 :   67df8:  lea    0x8(%rax),%rcx
    0.00 :   67dfc:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   67e03:  jmp    67de7 <__vfscanf_internal+0x5407>
    0.00 :   67e05:  mov    %rbx,-0x698(%rbp)
    0.00 :   67e0c:  mov    %r13,%rbx
    0.00 :   67e0f:  mov    %r12d,%r13d
    0.00 :   67e12:  jmp    6705c <__vfscanf_internal+0x467c>
         : 6280  char_buffer_add_slow():
         : 6281  ./stdio-common/vfscanf-internal.c:243
    0.00 :   67e17:  pxor   %xmm0,%xmm0
    0.00 :   67e1b:  movaps %xmm0,-0x470(%rbp)
         : 6284  ./stdio-common/vfscanf-internal.c:245
    0.00 :   67e22:  jmp    64d7e <__vfscanf_internal+0x239e>
         : 6286  __vfscanf_internal():
         : 6287  ./stdio-common/vfscanf-internal.c:2021 (discriminator 4)
    0.00 :   67e27:  mov    %r15,%rdi
    0.00 :   67e2a:  call   8da40 <__uflow>
    0.00 :   67e2f:  mov    %eax,%r13d
    0.00 :   67e32:  cmp    $0xffffffff,%eax
    0.00 :   67e35:  jne    668e7 <__vfscanf_internal+0x3f07>
         : 6293  ./stdio-common/vfscanf-internal.c:2021 (discriminator 9)
    0.00 :   67e3b:  mov    0x1b1fce(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67e42:  mov    %fs:(%r10),%eax
    0.00 :   67e46:  mov    %eax,-0x600(%rbp)
    0.00 :   67e4c:  jmp    668eb <__vfscanf_internal+0x3f0b>
         : 6298  char_buffer_add_slow():
         : 6299  ./stdio-common/vfscanf-internal.c:243
    0.00 :   67e51:  pxor   %xmm0,%xmm0
    0.00 :   67e55:  mov    %r15,%r14
    0.00 :   67e58:  movaps %xmm0,-0x470(%rbp)
         : 6303  char_buffer_add():
         : 6304  ./stdio-common/vfscanf-internal.c:260
    0.00 :   67e5f:  jmp    66313 <__vfscanf_internal+0x3933>
         : 6306  __vfscanf_internal():
         : 6307  ./stdio-common/vfscanf-internal.c:661
    0.00 :   67e64:  mov    -0x5a0(%rbp),%rax
    0.00 :   67e6b:  lea    0x8(%rax),%rdx
    0.00 :   67e6f:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   67e76:  jmp    664ec <__vfscanf_internal+0x3b0c>
         : 6312  ./stdio-common/vfscanf-internal.c:1896
    0.00 :   67e7b:  mov    -0x5a0(%rbp),%rax
    0.00 :   67e82:  lea    0x8(%rax),%rcx
    0.00 :   67e86:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   67e8d:  jmp    67146 <__vfscanf_internal+0x4766>
         : 6317  char_buffer_add_slow():
         : 6318  ./stdio-common/vfscanf-internal.c:238
    0.00 :   67e92:  test   %rsi,%rsi
    0.00 :   67e95:  jne    66b59 <__vfscanf_internal+0x4179>
    0.00 :   67e9b:  mov    %r15,%r14
         : 6322  __vfscanf_internal():
         : 6323  ./stdio-common/vfscanf-internal.c:2423
    0.00 :   67e9e:  mov    0x1b1f6b(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67ea5:  movl   $0xc,%fs:(%rax)
         : 6326  ./stdio-common/vfscanf-internal.c:2424
    0.00 :   67eac:  movl   $0xffffffff,-0x640(%rbp)
         : 6328  ./stdio-common/vfscanf-internal.c:2425
    0.00 :   67eb6:  jmp    63108 <__vfscanf_internal+0x728>
         : 6330  ./stdio-common/vfscanf-internal.c:2455
    0.00 :   67ebb:  call   47f40 <__strtof_internal>
         : 6332  ./stdio-common/vfscanf-internal.c:2457
    0.00 :   67ec0:  test   %ebx,%ebx
    0.00 :   67ec2:  jne    64904 <__vfscanf_internal+0x1f24>
    0.00 :   67ec8:  mov    -0x5e8(%rbp),%rdx
    0.00 :   67ecf:  cmp    -0x460(%rbp),%rdx
    0.00 :   67ed6:  je     6980b <__vfscanf_internal+0x6e2b>
         : 6338  ./stdio-common/vfscanf-internal.c:2458
    0.00 :   67edc:  mov    -0x68c(%rbp),%r11d
    0.00 :   67ee3:  test   %r11d,%r11d
    0.00 :   67ee6:  jne    69753 <__vfscanf_internal+0x6d73>
    0.00 :   67eec:  mov    -0x5a8(%rbp),%ecx
    0.00 :   67ef2:  cmp    $0x2f,%ecx
    0.00 :   67ef5:  ja     697f4 <__vfscanf_internal+0x6e14>
    0.00 :   67efb:  mov    %ecx,%eax
    0.00 :   67efd:  add    $0x8,%ecx
    0.00 :   67f00:  add    -0x598(%rbp),%rax
    0.00 :   67f07:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   67f0d:  mov    (%rax),%rax
         : 6350  char_buffer_start():
         : 6351  ./stdio-common/vfscanf-internal.c:206 (discriminator 8)
    0.00 :   67f10:  mov    -0x460(%rbp),%rsi
         : 6353  __vfscanf_internal():
         : 6354  ./stdio-common/vfscanf-internal.c:2458 (discriminator 8)
    0.00 :   67f17:  movss  %xmm0,(%rax)
    0.00 :   67f1b:  jmp    63d20 <__vfscanf_internal+0x1340>
         : 6357  ./stdio-common/vfscanf-internal.c:1301
    0.00 :   67f20:  mov    0x1b1ee9(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   67f27:  mov    %r15,%r14
    0.00 :   67f2a:  movl   $0x54,%fs:(%rax)
    0.00 :   67f31:  jmp    63108 <__vfscanf_internal+0x728>
         : 6362  ./stdio-common/vfscanf-internal.c:659
    0.00 :   67f36:  mov    -0x5a0(%rbp),%rax
    0.00 :   67f3d:  lea    0x8(%rax),%rdx
    0.00 :   67f41:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   67f48:  jmp    6439c <__vfscanf_internal+0x19bc>
         : 6367  ./stdio-common/vfscanf-internal.c:1468
    0.00 :   67f4d:  mov    -0x610(%rbp),%eax
    0.00 :   67f53:  mov    %r14,-0x648(%rbp)
    0.00 :   67f5a:  lea    -0x50(%rbp),%r12
    0.00 :   67f5e:  lea    -0x5b0(%rbp),%rbx
    0.00 :   67f65:  movq   $0x0,-0x630(%rbp)
    0.00 :   67f70:  mov    %eax,-0x6e8(%rbp)
         : 6374  ./stdio-common/vfscanf-internal.c:1470
    0.00 :   67f76:  lea    -0x590(%rbp),%rax
    0.00 :   67f7d:  mov    %rax,-0x650(%rbp)
    0.00 :   67f84:  mov    %r13d,-0x660(%rbp)
    0.00 :   67f8b:  mov    %cl,-0x668(%rbp)
    0.00 :   67f91:  mov    %r15,-0x688(%rbp)
         : 6380  ./stdio-common/vfscanf-internal.c:1484
    0.00 :   67f98:  mov    -0x630(%rbp),%rax
    0.00 :   67f9f:  mov    -0x678(%rbp),%rsi
    0.00 :   67fa6:  mov    -0x650(%rbp),%rdi
    0.00 :   67fad:  mov    0xe0(%rsi,%rax,8),%r14
         : 6385  ./stdio-common/vfscanf-internal.c:1487
    0.00 :   67fb5:  mov    -0x6a0(%rbp),%rsi
         : 6387  ./stdio-common/vfscanf-internal.c:1484
    0.00 :   67fbc:  mov    %r14,(%rdi,%rax,8)
         : 6389  ./stdio-common/vfscanf-internal.c:1487
    0.00 :   67fc0:  lea    0x30(%rax),%edi
    0.00 :   67fc3:  call   12a5f0 <__towctrans>
         : 6392  ./stdio-common/vfscanf-internal.c:1491
    0.00 :   67fc8:  movq   $0x0,(%rbx)
         : 6394  ./stdio-common/vfscanf-internal.c:1495
    0.00 :   67fcf:  mov    %rbx,%rdx
    0.00 :   67fd2:  mov    %r12,%rdi
         : 6397  ./stdio-common/vfscanf-internal.c:1487
    0.00 :   67fd5:  mov    %eax,%esi
         : 6399  ./stdio-common/vfscanf-internal.c:1495
    0.00 :   67fd7:  call   c61e0 <wcrtomb>
    0.00 :   67fdc:  mov    %rax,-0x620(%rbp)
         : 6402  ./stdio-common/vfscanf-internal.c:1497
    0.00 :   67fe3:  cmp    $0xffffffffffffffff,%rax
    0.00 :   67fe7:  je     68e7b <__vfscanf_internal+0x649b>
         : 6405  ./stdio-common/vfscanf-internal.c:1506
    0.00 :   67fed:  mov    -0x610(%rbp),%esi
         : 6407  ./stdio-common/vfscanf-internal.c:1505
    0.00 :   67ff3:  mov    %r14,%r13
         : 6409  ./stdio-common/vfscanf-internal.c:1506
    0.00 :   67ff6:  xor    %r15d,%r15d
    0.00 :   67ff9:  xor    %edx,%edx
    0.00 :   67ffb:  test   %esi,%esi
    0.00 :   67ffd:  jle    6801f <__vfscanf_internal+0x563f>
         : 6414  ./stdio-common/vfscanf-internal.c:1507 (discriminator 3)
    0.00 :   67fff:  mov    %r13,%rdi
         : 6416  ./stdio-common/vfscanf-internal.c:1506 (discriminator 3)
    0.00 :   68002:  add    $0x1,%r15d
         : 6418  ./stdio-common/vfscanf-internal.c:1507 (discriminator 3)
    0.00 :   68006:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   6800b:  lea    0x1(%r13,%rax,1),%r13
         : 6421  ./stdio-common/vfscanf-internal.c:1506 (discriminator 3)
    0.00 :   68010:  cmp    %r15d,-0x610(%rbp)
    0.00 :   68017:  jne    67fff <__vfscanf_internal+0x561f>
         : 6424  ./stdio-common/vfscanf-internal.c:1509
    0.00 :   68019:  mov    %r13,%rdx
    0.00 :   6801c:  sub    %r14,%rdx
         : 6427  ./stdio-common/vfscanf-internal.c:1513
    0.00 :   6801f:  mov    -0x620(%rbp),%rax
    0.00 :   68026:  mov    %rsp,%rsi
    0.00 :   68029:  lea    0x18(%rax,%rdx,1),%rcx
    0.00 :   6802e:  mov    %rcx,%rax
    0.00 :   68031:  and    $0xfffffffffffff000,%rcx
    0.00 :   68038:  sub    %rcx,%rsi
    0.00 :   6803b:  and    $0xfffffffffffffff0,%rax
    0.00 :   6803f:  cmp    %rsi,%rsp
    0.00 :   68042:  je     68059 <__vfscanf_internal+0x5679>
    0.00 :   68044:  sub    $0x1000,%rsp
    0.00 :   6804b:  orq    $0x0,0xff8(%rsp)
    0.00 :   68054:  cmp    %rsi,%rsp
    0.00 :   68057:  jne    68044 <__vfscanf_internal+0x5664>
    0.00 :   68059:  and    $0xfff,%eax
    0.00 :   6805e:  sub    %rax,%rsp
    0.00 :   68061:  test   %rax,%rax
    0.00 :   68064:  je     6806c <__vfscanf_internal+0x568c>
    0.00 :   68066:  orq    $0x0,-0x8(%rsp,%rax,1)
    0.00 :   6806c:  lea    0xf(%rsp),%rcx
         : 6447  ./stdio-common/vfscanf-internal.c:1516
    0.00 :   68071:  mov    %r14,%rsi
         : 6449  ./stdio-common/vfscanf-internal.c:1513
    0.00 :   68074:  and    $0xfffffffffffffff0,%rcx
         : 6451  ./stdio-common/vfscanf-internal.c:1516
    0.00 :   68078:  mov    %rcx,%rdi
    0.00 :   6807b:  mov    %rcx,-0x6f0(%rbp)
    0.00 :   68082:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   68087:  mov    -0x620(%rbp),%rdx
    0.00 :   6808e:  mov    %r12,%rsi
    0.00 :   68091:  mov    %rax,%rdi
    0.00 :   68094:  call   283e0 <*ABS*+0xa97d0@plt>
         : 6459  ./stdio-common/vfscanf-internal.c:1519
    0.00 :   68099:  mov    -0x6f0(%rbp),%rcx
         : 6461  ./stdio-common/vfscanf-internal.c:1518
    0.00 :   680a0:  movb   $0x0,(%rax)
         : 6463  ./stdio-common/vfscanf-internal.c:1519
    0.00 :   680a3:  mov    -0x630(%rbp),%rax
    0.00 :   680aa:  mov    %rcx,-0x540(%rbp,%rax,8)
         : 6466  ./stdio-common/vfscanf-internal.c:1470
    0.00 :   680b2:  add    $0x1,%rax
    0.00 :   680b6:  mov    %rax,-0x630(%rbp)
    0.00 :   680bd:  cmp    $0xa,%rax
    0.00 :   680c1:  jne    67f98 <__vfscanf_internal+0x55b8>
    0.00 :   680c7:  mov    -0x648(%rbp),%r14
    0.00 :   680ce:  mov    -0x660(%rbp),%r13d
    0.00 :   680d5:  movzbl -0x668(%rbp),%ecx
    0.00 :   680dc:  mov    -0x688(%rbp),%r15
    0.00 :   680e3:  jmp    649bb <__vfscanf_internal+0x1fdb>
    0.00 :   680e8:  nopl   0x0(%rax,%rax,1)
         : 6477  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   680f0:  mov    -0x5a0(%rbp),%rax
    0.00 :   680f7:  lea    0x8(%rax),%rdx
    0.00 :   680fb:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   68102:  jmp    653ff <__vfscanf_internal+0x2a1f>
         : 6482  ./stdio-common/vfscanf-internal.c:1019 (discriminator 6)
    0.00 :   68107:  mov    -0x6c8(%rbp),%rax
    0.00 :   6810e:  mov    -0x68c(%rbp),%esi
    0.00 :   68114:  movdqu (%rax),%xmm7
    0.00 :   68118:  movups %xmm7,-0x540(%rbp)
    0.00 :   6811f:  mov    0x10(%rax),%rax
    0.00 :   68123:  movaps %xmm7,-0x630(%rbp)
    0.00 :   6812a:  mov    %rax,-0x530(%rbp)
    0.00 :   68131:  mov    -0x540(%rbp),%eax
    0.00 :   68137:  sub    $0x1,%esi
    0.00 :   6813a:  je     68163 <__vfscanf_internal+0x5783>
    0.00 :   6813c:  mov    -0x538(%rbp),%rdx
         : 6494  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   68143:  mov    %eax,%ecx
    0.00 :   68145:  xor    %r11d,%r11d
    0.00 :   68148:  cmp    $0x2f,%ecx
    0.00 :   6814b:  ja     68190 <__vfscanf_internal+0x57b0>
    0.00 :   6814d:  add    $0x8,%ecx
    0.00 :   68150:  mov    $0x1,%r11d
    0.00 :   68156:  sub    $0x1,%esi
    0.00 :   68159:  jne    68148 <__vfscanf_internal+0x5768>
    0.00 :   6815b:  mov    %ecx,-0x540(%rbp)
    0.00 :   68161:  mov    %ecx,%eax
    0.00 :   68163:  cmp    $0x2f,%eax
    0.00 :   68166:  ja     681f8 <__vfscanf_internal+0x5818>
    0.00 :   6816c:  mov    %eax,%edx
    0.00 :   6816e:  add    $0x8,%eax
    0.00 :   68171:  add    -0x530(%rbp),%rdx
    0.00 :   68178:  mov    %eax,-0x540(%rbp)
    0.00 :   6817e:  mov    (%rdx),%rax
    0.00 :   68181:  mov    %rax,-0x670(%rbp)
    0.00 :   68188:  mov    %rax,%r12
    0.00 :   6818b:  jmp    6540c <__vfscanf_internal+0x2a2c>
    0.00 :   68190:  lea    0x8(%rdx),%rdi
    0.00 :   68194:  cmp    $0x1,%esi
    0.00 :   68197:  jne    28ae4 <__vfscanf_internal.cold+0x179>
    0.00 :   6819d:  mov    %rdi,-0x538(%rbp)
    0.00 :   681a4:  test   %r11b,%r11b
    0.00 :   681a7:  jne    6815b <__vfscanf_internal+0x577b>
    0.00 :   681a9:  jmp    68163 <__vfscanf_internal+0x5783>
         : 6522  ./stdio-common/vfscanf-internal.c:1019 (discriminator 4)
    0.00 :   681ab:  mov    -0x68c(%rbp),%r8d
    0.00 :   681b2:  test   %r8d,%r8d
    0.00 :   681b5:  jne    68dda <__vfscanf_internal+0x63fa>
         : 6526  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   681bb:  mov    -0x5a8(%rbp),%edx
    0.00 :   681c1:  cmp    $0x2f,%edx
    0.00 :   681c4:  ja     6820f <__vfscanf_internal+0x582f>
    0.00 :   681c6:  mov    %edx,%eax
    0.00 :   681c8:  add    $0x8,%edx
    0.00 :   681cb:  add    -0x598(%rbp),%rax
    0.00 :   681d2:  mov    %edx,-0x5a8(%rbp)
    0.00 :   681d8:  mov    (%rax),%rax
    0.00 :   681db:  mov    %rax,-0x6c0(%rbp)
         : 6536  ./stdio-common/vfscanf-internal.c:1019 (discriminator 31)
    0.00 :   681e2:  cmpq   $0x0,-0x6c0(%rbp)
    0.00 :   681ea:  jne    65483 <__vfscanf_internal+0x2aa3>
    0.00 :   681f0:  mov    %r15,%r14
    0.00 :   681f3:  jmp    63108 <__vfscanf_internal+0x728>
         : 6541  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   681f8:  mov    -0x538(%rbp),%rdx
    0.00 :   681ff:  lea    0x8(%rdx),%rax
    0.00 :   68203:  mov    %rax,-0x538(%rbp)
    0.00 :   6820a:  jmp    6817e <__vfscanf_internal+0x579e>
    0.00 :   6820f:  mov    -0x5a0(%rbp),%rax
    0.00 :   68216:  lea    0x8(%rax),%rdx
    0.00 :   6821a:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   68221:  jmp    681d8 <__vfscanf_internal+0x57f8>
         : 6550  ./stdio-common/vfscanf-internal.c:1945 (discriminator 1)
    0.00 :   68223:  mov    %r15,%rdi
    0.00 :   68226:  call   8da40 <__uflow>
    0.00 :   6822b:  mov    %eax,%r13d
    0.00 :   6822e:  cmp    $0xffffffff,%eax
    0.00 :   68231:  jne    68c32 <__vfscanf_internal+0x6252>
    0.00 :   68237:  mov    %r15,%r14
    0.00 :   6823a:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6823f:  mov    %r15,%r14
    0.00 :   68242:  jmp    63108 <__vfscanf_internal+0x728>
         : 6560  ./stdio-common/vfscanf-internal.c:1938 (discriminator 1)
    0.00 :   68247:  mov    %r15,%rdi
    0.00 :   6824a:  call   8da40 <__uflow>
    0.00 :   6824f:  cmp    $0xffffffff,%eax
    0.00 :   68252:  jne    69458 <__vfscanf_internal+0x6a78>
    0.00 :   68258:  mov    %r15,%r14
    0.00 :   6825b:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   68260:  mov    %r12d,%ecx
    0.00 :   68263:  movzbl -0x638(%rbp),%r12d
         : 6569  ./stdio-common/vfscanf-internal.c:2121
    0.00 :   6826b:  mov    -0x6a0(%rbp),%esi
    0.00 :   68271:  test   %esi,%esi
    0.00 :   68273:  je     66a33 <__vfscanf_internal+0x4053>
         : 6573  ./stdio-common/vfscanf-internal.c:2123
    0.00 :   68279:  mov    %rbx,%rax
    0.00 :   6827c:  sub    -0x6d8(%rbp),%rax
    0.00 :   68283:  xor    %esi,%esi
         : 6577  ./stdio-common/vfscanf-internal.c:2124
    0.00 :   68285:  mov    -0x680(%rbp),%rbx
    0.00 :   6828c:  test   %rax,%rax
    0.00 :   6828f:  jle    68cc2 <__vfscanf_internal+0x62e2>
         : 6581  ./stdio-common/vfscanf-internal.c:2124 (discriminator 1)
    0.00 :   68295:  mov    -0x6d8(%rbp),%rdi
    0.00 :   6829c:  movzbl (%rdi,%rsi,1),%esi
    0.00 :   682a0:  cmp    %sil,(%rbx)
    0.00 :   682a3:  jne    66a46 <__vfscanf_internal+0x4066>
         : 6586  ./stdio-common/vfscanf-internal.c:2125
    0.00 :   682a9:  add    $0x1,%rbx
         : 6588  ./stdio-common/vfscanf-internal.c:2123
    0.00 :   682ad:  mov    %rbx,%rsi
    0.00 :   682b0:  sub    -0x680(%rbp),%rsi
         : 6591  ./stdio-common/vfscanf-internal.c:2124
    0.00 :   682b7:  cmp    %rax,%rsi
    0.00 :   682ba:  jl     68295 <__vfscanf_internal+0x58b5>
         : 6594  ./stdio-common/vfscanf-internal.c:2126
    0.00 :   682bc:  jne    66a46 <__vfscanf_internal+0x4066>
         : 6596  ./stdio-common/vfscanf-internal.c:2128
    0.00 :   682c2:  movzbl (%rbx),%eax
    0.00 :   682c5:  cmp    %r13d,%eax
    0.00 :   682c8:  jne    66a46 <__vfscanf_internal+0x4066>
    0.00 :   682ce:  mov    %r12b,-0x638(%rbp)
    0.00 :   682d5:  mov    %ecx,%r12d
    0.00 :   682d8:  jmp    682fe <__vfscanf_internal+0x591e>
         : 6603  ./stdio-common/vfscanf-internal.c:2133 (discriminator 5)
    0.00 :   682da:  lea    0x1(%rax),%rdx
    0.00 :   682de:  mov    %rdx,0x8(%r15)
    0.00 :   682e2:  movzbl (%rax),%r13d
         : 6607  ./stdio-common/vfscanf-internal.c:2128 (discriminator 8)
    0.00 :   682e6:  movzbl (%rbx),%eax
         : 6609  ./stdio-common/vfscanf-internal.c:2133 (discriminator 8)
    0.00 :   682e9:  addq   $0x1,-0x648(%rbp)
         : 6611  ./stdio-common/vfscanf-internal.c:2135 (discriminator 8)
    0.00 :   682f1:  sub    $0x1,%r12d
         : 6613  ./stdio-common/vfscanf-internal.c:2128 (discriminator 8)
    0.00 :   682f5:  cmp    %r13d,%eax
    0.00 :   682f8:  jne    68d09 <__vfscanf_internal+0x6329>
         : 6616  ./stdio-common/vfscanf-internal.c:2129
    0.00 :   682fe:  add    $0x1,%rbx
    0.00 :   68302:  cmpb   $0x0,(%rbx)
    0.00 :   68305:  je     68d44 <__vfscanf_internal+0x6364>
         : 6620  ./stdio-common/vfscanf-internal.c:2133
    0.00 :   6830b:  test   %r12d,%r12d
    0.00 :   6830e:  je     68d19 <__vfscanf_internal+0x6339>
         : 6623  ./stdio-common/vfscanf-internal.c:2133 (discriminator 3)
    0.00 :   68314:  mov    0x8(%r15),%rax
    0.00 :   68318:  cmp    0x10(%r15),%rax
    0.00 :   6831c:  jb     682da <__vfscanf_internal+0x58fa>
         : 6627  ./stdio-common/vfscanf-internal.c:2133 (discriminator 4)
    0.00 :   6831e:  mov    %r15,%rdi
    0.00 :   68321:  call   8da40 <__uflow>
    0.00 :   68326:  mov    %eax,%r13d
    0.00 :   68329:  cmp    $0xffffffff,%eax
    0.00 :   6832c:  jne    682e6 <__vfscanf_internal+0x5906>
         : 6633  ./stdio-common/vfscanf-internal.c:2133 (discriminator 9)
    0.00 :   6832e:  mov    0x1b1adb(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   68335:  mov    %r12d,%ecx
    0.00 :   68338:  movzbl -0x638(%rbp),%r12d
    0.00 :   68340:  mov    %fs:(%rax),%eax
    0.00 :   68343:  mov    %eax,-0x600(%rbp)
    0.00 :   68349:  jmp    66a46 <__vfscanf_internal+0x4066>
         : 6640  ./stdio-common/vfscanf-internal.c:1431
    0.00 :   6834e:  movl   $0x8,-0x610(%rbp)
    0.00 :   68358:  jmp    65c6c <__vfscanf_internal+0x328c>
    0.00 :   6835d:  mov    %r15,%r14
    0.00 :   68360:  jmp    63108 <__vfscanf_internal+0x728>
         : 6645  ./stdio-common/vfscanf-internal.c:1428 (discriminator 4)
    0.00 :   68365:  mov    %r15,%rdi
    0.00 :   68368:  call   8da40 <__uflow>
    0.00 :   6836d:  mov    %eax,%r13d
    0.00 :   68370:  cmp    $0xffffffff,%eax
    0.00 :   68373:  jne    65c4e <__vfscanf_internal+0x326e>
         : 6651  ./stdio-common/vfscanf-internal.c:1428 (discriminator 9)
    0.00 :   68379:  mov    0x1b1a90(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   68380:  mov    -0x470(%rbp),%rsi
    0.00 :   68387:  mov    %fs:(%r10),%eax
    0.00 :   6838b:  movl   $0x10,-0x610(%rbp)
    0.00 :   68395:  mov    %eax,-0x600(%rbp)
         : 6657  ./stdio-common/vfscanf-internal.c:1435 (discriminator 9)
    0.00 :   6839b:  jmp    6404d <__vfscanf_internal+0x166d>
         : 6659  char_buffer_add_slow():
         : 6660  ./stdio-common/vfscanf-internal.c:243
    0.00 :   683a0:  pxor   %xmm0,%xmm0
    0.00 :   683a4:  movaps %xmm0,-0x470(%rbp)
         : 6663  ./stdio-common/vfscanf-internal.c:245
    0.00 :   683ab:  jmp    64eb7 <__vfscanf_internal+0x24d7>
         : 6665  __vfscanf_internal():
         : 6666  ./stdio-common/vfscanf-internal.c:1882
    0.00 :   683b0:  lea    0x8(%rcx),%r10
    0.00 :   683b4:  cmp    $0x1,%edi
    0.00 :   683b7:  jne    28988 <__vfscanf_internal.cold+0x1d>
    0.00 :   683bd:  mov    %r10,-0x538(%rbp)
    0.00 :   683c4:  test   %r11b,%r11b
    0.00 :   683c7:  je     683d1 <__vfscanf_internal+0x59f1>
    0.00 :   683c9:  mov    %esi,-0x540(%rbp)
    0.00 :   683cf:  mov    %esi,%eax
         : 6675  ./stdio-common/vfscanf-internal.c:1896
    0.00 :   683d1:  cmp    $0x2f,%eax
    0.00 :   683d4:  ja     694a8 <__vfscanf_internal+0x6ac8>
    0.00 :   683da:  mov    %eax,%ecx
    0.00 :   683dc:  add    $0x8,%eax
    0.00 :   683df:  add    -0x530(%rbp),%rcx
    0.00 :   683e6:  mov    %eax,-0x540(%rbp)
    0.00 :   683ec:  mov    (%rcx),%rax
    0.00 :   683ef:  mov    %edx,(%rax)
    0.00 :   683f1:  jmp    64168 <__vfscanf_internal+0x1788>
         : 6685  ./stdio-common/vfscanf-internal.c:1884
    0.00 :   683f6:  mov    -0x68c(%rbp),%eax
    0.00 :   683fc:  test   %eax,%eax
    0.00 :   683fe:  je     67dca <__vfscanf_internal+0x53ea>
         : 6689  ./stdio-common/vfscanf-internal.c:1884 (discriminator 2)
    0.00 :   68404:  mov    -0x6c8(%rbp),%rax
    0.00 :   6840b:  mov    -0x68c(%rbp),%edi
    0.00 :   68411:  movdqu (%rax),%xmm6
    0.00 :   68415:  movups %xmm6,-0x540(%rbp)
    0.00 :   6841c:  mov    0x10(%rax),%rax
    0.00 :   68420:  movaps %xmm6,-0x630(%rbp)
    0.00 :   68427:  mov    %rax,-0x530(%rbp)
    0.00 :   6842e:  mov    -0x540(%rbp),%eax
    0.00 :   68434:  sub    $0x1,%edi
    0.00 :   68437:  je     6879a <__vfscanf_internal+0x5dba>
    0.00 :   6843d:  mov    -0x538(%rbp),%rcx
    0.00 :   68444:  mov    %eax,%esi
         : 6702  ./stdio-common/vfscanf-internal.c:1884
    0.00 :   68446:  xor    %r11d,%r11d
    0.00 :   68449:  cmp    $0x2f,%esi
    0.00 :   6844c:  ja     68779 <__vfscanf_internal+0x5d99>
    0.00 :   68452:  add    $0x8,%esi
    0.00 :   68455:  mov    $0x1,%r11d
    0.00 :   6845b:  sub    $0x1,%edi
    0.00 :   6845e:  jne    68449 <__vfscanf_internal+0x5a69>
    0.00 :   68460:  jmp    68792 <__vfscanf_internal+0x5db2>
         : 6711  ./stdio-common/vfscanf-internal.c:1428 (discriminator 1)
    0.00 :   68465:  mov    0x1b19a4(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6846c:  mov    -0x600(%rbp),%eax
    0.00 :   68472:  mov    %eax,%fs:(%r10)
         : 6715  ./stdio-common/vfscanf-internal.c:1435 (discriminator 1)
    0.00 :   68476:  mov    -0x470(%rbp),%rsi
         : 6717  ./stdio-common/vfscanf-internal.c:1428 (discriminator 1)
    0.00 :   6847d:  movl   $0x10,-0x610(%rbp)
    0.00 :   68487:  jmp    6404d <__vfscanf_internal+0x166d>
         : 6720  ./stdio-common/vfscanf-internal.c:2431
    0.00 :   6848c:  lea    -0x5e8(%rbp),%rsi
    0.00 :   68493:  call   56a60 <__strtof128_internal>
         : 6723  ./stdio-common/vfscanf-internal.c:2433
    0.00 :   68498:  test   %ebx,%ebx
    0.00 :   6849a:  jne    64904 <__vfscanf_internal+0x1f24>
    0.00 :   684a0:  mov    -0x5e8(%rbp),%rdx
    0.00 :   684a7:  cmp    -0x460(%rbp),%rdx
    0.00 :   684ae:  je     6958f <__vfscanf_internal+0x6baf>
         : 6729  ./stdio-common/vfscanf-internal.c:2434
    0.00 :   684b4:  cmpl   $0x0,-0x68c(%rbp)
    0.00 :   684bb:  jne    69514 <__vfscanf_internal+0x6b34>
    0.00 :   684c1:  mov    -0x5a8(%rbp),%ecx
    0.00 :   684c7:  cmp    $0x2f,%ecx
    0.00 :   684ca:  ja     694fd <__vfscanf_internal+0x6b1d>
    0.00 :   684d0:  mov    %ecx,%eax
    0.00 :   684d2:  add    $0x8,%ecx
    0.00 :   684d5:  add    -0x598(%rbp),%rax
    0.00 :   684dc:  mov    %ecx,-0x5a8(%rbp)
    0.00 :   684e2:  mov    (%rax),%rax
         : 6740  char_buffer_start():
         : 6741  ./stdio-common/vfscanf-internal.c:206 (discriminator 8)
    0.00 :   684e5:  mov    -0x460(%rbp),%rsi
         : 6743  __vfscanf_internal():
         : 6744  ./stdio-common/vfscanf-internal.c:2434 (discriminator 8)
    0.00 :   684ec:  movaps %xmm0,(%rax)
    0.00 :   684ef:  jmp    63d20 <__vfscanf_internal+0x1340>
    0.00 :   684f4:  mov    %r13,%r14
    0.00 :   684f7:  mov    %r12,-0x6c0(%rbp)
    0.00 :   684fe:  mov    %r15d,%r13d
    0.00 :   68501:  mov    %r11d,%ebx
    0.00 :   68504:  mov    %rcx,%r15
    0.00 :   68507:  jmp    655d5 <__vfscanf_internal+0x2bf5>
         : 6753  ./stdio-common/vfscanf-internal.c:1880 (discriminator 2)
    0.00 :   6850c:  mov    -0x6c8(%rbp),%rax
    0.00 :   68513:  mov    -0x68c(%rbp),%edi
    0.00 :   68519:  movdqu (%rax),%xmm5
    0.00 :   6851d:  movups %xmm5,-0x540(%rbp)
    0.00 :   68524:  mov    0x10(%rax),%rax
    0.00 :   68528:  movaps %xmm5,-0x630(%rbp)
    0.00 :   6852f:  mov    %rax,-0x530(%rbp)
    0.00 :   68536:  mov    -0x540(%rbp),%eax
    0.00 :   6853c:  sub    $0x1,%edi
    0.00 :   6853f:  je     672ea <__vfscanf_internal+0x490a>
    0.00 :   68545:  mov    -0x538(%rbp),%rcx
    0.00 :   6854c:  mov    %eax,%esi
         : 6766  ./stdio-common/vfscanf-internal.c:1880
    0.00 :   6854e:  xor    %r11d,%r11d
    0.00 :   68551:  cmp    $0x2f,%esi
    0.00 :   68554:  ja     68570 <__vfscanf_internal+0x5b90>
    0.00 :   68556:  add    $0x8,%esi
    0.00 :   68559:  mov    $0x1,%r11d
    0.00 :   6855f:  sub    $0x1,%edi
    0.00 :   68562:  jne    68551 <__vfscanf_internal+0x5b71>
    0.00 :   68564:  jmp    672e2 <__vfscanf_internal+0x4902>
    0.00 :   68569:  nopl   0x0(%rax)
    0.00 :   68570:  lea    0x8(%rcx),%r10
    0.00 :   68574:  cmp    $0x1,%edi
    0.00 :   68577:  jne    28a8d <__vfscanf_internal.cold+0x122>
    0.00 :   6857d:  jmp    672d6 <__vfscanf_internal+0x48f6>
         : 6780  ./stdio-common/vfscanf-internal.c:1209 (discriminator 26)
    0.00 :   68582:  mov    -0x6c8(%rbp),%rax
    0.00 :   68589:  mov    -0x68c(%rbp),%edx
    0.00 :   6858f:  movdqu (%rax),%xmm7
    0.00 :   68593:  movups %xmm7,-0x540(%rbp)
    0.00 :   6859a:  mov    0x10(%rax),%rax
    0.00 :   6859e:  movaps %xmm7,-0x630(%rbp)
    0.00 :   685a5:  mov    %rax,-0x530(%rbp)
    0.00 :   685ac:  mov    -0x540(%rbp),%eax
    0.00 :   685b2:  sub    $0x1,%edx
    0.00 :   685b5:  je     685de <__vfscanf_internal+0x5bfe>
    0.00 :   685b7:  mov    -0x538(%rbp),%rcx
         : 6792  ./stdio-common/vfscanf-internal.c:1209
    0.00 :   685be:  mov    %eax,%esi
    0.00 :   685c0:  xor    %r10d,%r10d
    0.00 :   685c3:  cmp    $0x2f,%esi
    0.00 :   685c6:  ja     68604 <__vfscanf_internal+0x5c24>
    0.00 :   685c8:  add    $0x8,%esi
    0.00 :   685cb:  mov    $0x1,%r10d
    0.00 :   685d1:  sub    $0x1,%edx
    0.00 :   685d4:  jne    685c3 <__vfscanf_internal+0x5be3>
    0.00 :   685d6:  mov    %esi,-0x540(%rbp)
    0.00 :   685dc:  mov    %esi,%eax
    0.00 :   685de:  cmp    $0x2f,%eax
    0.00 :   685e1:  ja     6861f <__vfscanf_internal+0x5c3f>
    0.00 :   685e3:  mov    %eax,%edx
    0.00 :   685e5:  add    $0x8,%eax
    0.00 :   685e8:  add    -0x530(%rbp),%rdx
    0.00 :   685ef:  mov    %eax,-0x540(%rbp)
    0.00 :   685f5:  mov    (%rdx),%rax
    0.00 :   685f8:  mov    %rax,-0x6b8(%rbp)
    0.00 :   685ff:  jmp    66280 <__vfscanf_internal+0x38a0>
    0.00 :   68604:  lea    0x8(%rcx),%rdi
    0.00 :   68608:  cmp    $0x1,%edx
    0.00 :   6860b:  jne    289df <__vfscanf_internal.cold+0x74>
    0.00 :   68611:  mov    %rdi,-0x538(%rbp)
    0.00 :   68618:  test   %r10b,%r10b
    0.00 :   6861b:  jne    685d6 <__vfscanf_internal+0x5bf6>
    0.00 :   6861d:  jmp    685de <__vfscanf_internal+0x5bfe>
    0.00 :   6861f:  mov    -0x538(%rbp),%rdx
    0.00 :   68626:  lea    0x8(%rdx),%rax
    0.00 :   6862a:  mov    %rax,-0x538(%rbp)
    0.00 :   68631:  jmp    685f5 <__vfscanf_internal+0x5c15>
         : 6823  ./stdio-common/vfscanf-internal.c:2061
    0.00 :   68633:  lea    -0x2b(%r13),%eax
    0.00 :   68637:  and    $0xfffffffd,%eax
    0.00 :   6863a:  jne    66a08 <__vfscanf_internal+0x4028>
         : 6827  char_buffer_add():
         : 6828  ./stdio-common/vfscanf-internal.c:260
    0.00 :   68640:  cmp    -0x468(%rbp),%rsi
    0.00 :   68647:  je     6a2d9 <__vfscanf_internal+0x78f9>
         : 6831  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6864d:  lea    0x1(%rsi),%rax
    0.00 :   68651:  mov    %rax,-0x470(%rbp)
    0.00 :   68658:  mov    %r13b,(%rsi)
    0.00 :   6865b:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 6836  __vfscanf_internal():
         : 6837  ./stdio-common/vfscanf-internal.c:2024 (discriminator 3)
    0.00 :   68660:  mov    -0x658(%rbp),%rdi
    0.00 :   68667:  movzbl %r13b,%eax
    0.00 :   6866b:  mov    0x70(%rdi),%rdx
    0.00 :   6866f:  cmpl   $0x78,(%rdx,%rax,4)
    0.00 :   68673:  jne    66908 <__vfscanf_internal+0x3f28>
         : 6843  char_buffer_add():
         : 6844  ./stdio-common/vfscanf-internal.c:260
    0.00 :   68679:  mov    -0x470(%rbp),%rax
    0.00 :   68680:  cmp    %rax,-0x468(%rbp)
    0.00 :   68687:  je     6a5d0 <__vfscanf_internal+0x7bf0>
         : 6848  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6868d:  lea    0x1(%rax),%rdx
    0.00 :   68691:  mov    %rdx,-0x470(%rbp)
    0.00 :   68698:  mov    %r13b,(%rax)
         : 6852  __vfscanf_internal():
         : 6853  ./stdio-common/vfscanf-internal.c:2033
    0.00 :   6869b:  mov    -0x63c(%rbp),%eax
    0.00 :   686a1:  and    $0x7f,%al
    0.00 :   686a3:  or     $0x8,%ah
    0.00 :   686a6:  mov    %eax,-0x63c(%rbp)
         : 6858  ./stdio-common/vfscanf-internal.c:2034
    0.00 :   686ac:  cmp    $0xffffffff,%r13d
    0.00 :   686b0:  je     6a55f <__vfscanf_internal+0x7b7f>
         : 6861  ./stdio-common/vfscanf-internal.c:2034 (discriminator 2)
    0.00 :   686b6:  mov    0x8(%r15),%rax
    0.00 :   686ba:  cmp    0x10(%r15),%rax
    0.00 :   686be:  jae    6a58f <__vfscanf_internal+0x7baf>
         : 6865  ./stdio-common/vfscanf-internal.c:2034 (discriminator 5)
    0.00 :   686c4:  lea    0x1(%rax),%rdx
    0.00 :   686c8:  mov    %rdx,0x8(%r15)
    0.00 :   686cc:  movzbl (%rax),%r13d
         : 6869  ./stdio-common/vfscanf-internal.c:2034 (discriminator 8)
    0.00 :   686d0:  add    $0x1,%r12
         : 6871  ./stdio-common/vfscanf-internal.c:2035 (discriminator 12)
    0.00 :   686d4:  mov    -0x638(%rbp),%eax
    0.00 :   686da:  test   %eax,%eax
    0.00 :   686dc:  jle    6a3a4 <__vfscanf_internal+0x79c4>
         : 6875  ./stdio-common/vfscanf-internal.c:2036
    0.00 :   686e2:  sub    $0x1,%eax
         : 6877  ./stdio-common/vfscanf-internal.c:2030
    0.00 :   686e5:  movb   $0x70,-0x610(%rbp)
    0.00 :   686ec:  mov    -0x470(%rbp),%rsi
         : 6880  ./stdio-common/vfscanf-internal.c:1918
    0.00 :   686f3:  xor    %edx,%edx
         : 6882  ./stdio-common/vfscanf-internal.c:2036
    0.00 :   686f5:  mov    %eax,-0x638(%rbp)
    0.00 :   686fb:  jmp    6691b <__vfscanf_internal+0x3f3b>
         : 6885  ./stdio-common/vfscanf-internal.c:1893
    0.00 :   68700:  mov    -0x538(%rbp),%rcx
    0.00 :   68707:  lea    0x8(%rcx),%rax
    0.00 :   6870b:  mov    %rax,-0x538(%rbp)
    0.00 :   68712:  jmp    67305 <__vfscanf_internal+0x4925>
    0.00 :   68717:  mov    %rbx,-0x6b8(%rbp)
    0.00 :   6871e:  mov    %r15,%r14
    0.00 :   68721:  mov    -0x610(%rbp),%ebx
    0.00 :   68727:  mov    %r12,%r15
    0.00 :   6872a:  mov    -0x650(%rbp),%r12
    0.00 :   68731:  jmp    65edf <__vfscanf_internal+0x34ff>
         : 6896  ./stdio-common/vfscanf-internal.c:1973 (discriminator 3)
    0.00 :   68736:  mov    0x8(%r15),%rax
    0.00 :   6873a:  cmp    0x10(%r15),%rax
    0.00 :   6873e:  jae    68a0f <__vfscanf_internal+0x602f>
         : 6900  ./stdio-common/vfscanf-internal.c:1973 (discriminator 6)
    0.00 :   68744:  lea    0x1(%rax),%rdx
    0.00 :   68748:  mov    %rdx,0x8(%r15)
    0.00 :   6874c:  movzbl (%rax),%r13d
    0.00 :   68750:  mov    %r13,%rax
         : 6905  ./stdio-common/vfscanf-internal.c:1975 (discriminator 9)
    0.00 :   68753:  mov    -0x658(%rbp),%rsi
    0.00 :   6875a:  mov    0x70(%rsi),%rdx
    0.00 :   6875e:  cmpl   $0x69,(%rdx,%rax,4)
    0.00 :   68762:  je     6880e <__vfscanf_internal+0x5e2e>
         : 6910  ./stdio-common/vfscanf-internal.c:2012 (discriminator 2)
    0.00 :   68768:  movzbl %r13b,%esi
    0.00 :   6876c:  mov    %r15,%rdi
    0.00 :   6876f:  call   8e7b0 <_IO_sputbackc>
    0.00 :   68774:  jmp    63c4e <__vfscanf_internal+0x126e>
         : 6915  ./stdio-common/vfscanf-internal.c:1884
    0.00 :   68779:  lea    0x8(%rcx),%r10
    0.00 :   6877d:  cmp    $0x1,%edi
    0.00 :   68780:  jne    28a53 <__vfscanf_internal.cold+0xe8>
    0.00 :   68786:  mov    %r10,-0x538(%rbp)
    0.00 :   6878d:  test   %r11b,%r11b
    0.00 :   68790:  je     6879a <__vfscanf_internal+0x5dba>
    0.00 :   68792:  mov    %esi,-0x540(%rbp)
    0.00 :   68798:  mov    %esi,%eax
         : 6924  ./stdio-common/vfscanf-internal.c:1898
    0.00 :   6879a:  cmp    $0x2f,%eax
    0.00 :   6879d:  ja     69888 <__vfscanf_internal+0x6ea8>
    0.00 :   687a3:  mov    %eax,%ecx
    0.00 :   687a5:  add    $0x8,%eax
    0.00 :   687a8:  add    -0x530(%rbp),%rcx
    0.00 :   687af:  mov    %eax,-0x540(%rbp)
    0.00 :   687b5:  mov    (%rcx),%rax
    0.00 :   687b8:  mov    %dl,(%rax)
    0.00 :   687ba:  jmp    64168 <__vfscanf_internal+0x1788>
         : 6934  ./stdio-common/vfscanf-internal.c:2472 (discriminator 4)
    0.00 :   687bf:  mov    -0x68c(%rbp),%edi
    0.00 :   687c5:  test   %edi,%edi
    0.00 :   687c7:  jne    6a4be <__vfscanf_internal+0x7ade>
         : 6938  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   687cd:  mov    -0x5a8(%rbp),%edx
    0.00 :   687d3:  cmp    $0x2f,%edx
    0.00 :   687d6:  ja     68a39 <__vfscanf_internal+0x6059>
    0.00 :   687dc:  mov    %edx,%eax
    0.00 :   687de:  add    $0x8,%edx
    0.00 :   687e1:  add    -0x598(%rbp),%rax
    0.00 :   687e8:  mov    %edx,-0x5a8(%rbp)
    0.00 :   687ee:  mov    (%rax),%rax
    0.00 :   687f1:  mov    %rax,-0x6c0(%rbp)
         : 6948  ./stdio-common/vfscanf-internal.c:2472 (discriminator 31)
    0.00 :   687f8:  cmpq   $0x0,-0x6c0(%rbp)
    0.00 :   68800:  jne    64481 <__vfscanf_internal+0x1aa1>
    0.00 :   68806:  mov    %r15,%r14
    0.00 :   68809:  jmp    63108 <__vfscanf_internal+0x728>
         : 6953  ./stdio-common/vfscanf-internal.c:1978
    0.00 :   6880e:  mov    -0x638(%rbp),%esi
    0.00 :   68814:  xor    %eax,%eax
    0.00 :   68816:  test   %esi,%esi
    0.00 :   68818:  setg   %al
    0.00 :   6881b:  sub    %eax,%esi
         : 6959  char_buffer_add():
         : 6960  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6881d:  mov    -0x470(%rbp),%rax
         : 6962  __vfscanf_internal():
         : 6963  ./stdio-common/vfscanf-internal.c:1978
    0.00 :   68824:  mov    %esi,-0x638(%rbp)
         : 6965  char_buffer_add():
         : 6966  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6882a:  cmp    -0x468(%rbp),%rax
    0.00 :   68831:  je     69976 <__vfscanf_internal+0x6f96>
         : 6969  ./stdio-common/vfscanf-internal.c:263
    0.00 :   68837:  lea    0x1(%rax),%rdx
    0.00 :   6883b:  mov    %rdx,-0x470(%rbp)
    0.00 :   68842:  mov    %r13b,(%rax)
         : 6973  __vfscanf_internal():
         : 6974  ./stdio-common/vfscanf-internal.c:1981
    0.00 :   68845:  mov    -0x638(%rbp),%eax
    0.00 :   6884b:  test   %eax,%eax
    0.00 :   6884d:  je     6996e <__vfscanf_internal+0x6f8e>
         : 6978  ./stdio-common/vfscanf-internal.c:1982
    0.00 :   68853:  mov    0x8(%r15),%rax
    0.00 :   68857:  cmp    0x10(%r15),%rax
    0.00 :   6885b:  jae    69959 <__vfscanf_internal+0x6f79>
         : 6982  ./stdio-common/vfscanf-internal.c:1982 (discriminator 2)
    0.00 :   68861:  lea    0x1(%rax),%rdx
    0.00 :   68865:  mov    %rdx,0x8(%r15)
    0.00 :   68869:  movzbl (%rax),%eax
    0.00 :   6886c:  mov    %rax,%rdx
         : 6987  ./stdio-common/vfscanf-internal.c:1983 (discriminator 5)
    0.00 :   6886f:  mov    -0x658(%rbp),%rdi
    0.00 :   68876:  mov    0x70(%rdi),%rcx
         : 6990  ./stdio-common/vfscanf-internal.c:1981 (discriminator 5)
    0.00 :   6887a:  cmpl   $0x6e,(%rcx,%rdx,4)
    0.00 :   6887e:  jne    69951 <__vfscanf_internal+0x6f71>
         : 6993  ./stdio-common/vfscanf-internal.c:1986
    0.00 :   68884:  mov    -0x638(%rbp),%edi
    0.00 :   6888a:  xor    %edx,%edx
    0.00 :   6888c:  test   %edi,%edi
    0.00 :   6888e:  setg   %dl
    0.00 :   68891:  sub    %edx,%edi
         : 6999  char_buffer_add():
         : 7000  ./stdio-common/vfscanf-internal.c:260
    0.00 :   68893:  mov    -0x470(%rbp),%rdx
         : 7002  __vfscanf_internal():
         : 7003  ./stdio-common/vfscanf-internal.c:1986
    0.00 :   6889a:  mov    %edi,-0x638(%rbp)
         : 7005  char_buffer_add():
         : 7006  ./stdio-common/vfscanf-internal.c:260
    0.00 :   688a0:  cmp    -0x468(%rbp),%rdx
    0.00 :   688a7:  je     6993d <__vfscanf_internal+0x6f5d>
         : 7009  ./stdio-common/vfscanf-internal.c:263
    0.00 :   688ad:  lea    0x1(%rdx),%rcx
    0.00 :   688b1:  mov    %rcx,-0x470(%rbp)
    0.00 :   688b8:  mov    %al,(%rdx)
         : 7013  __vfscanf_internal():
         : 7014  ./stdio-common/vfscanf-internal.c:1988
    0.00 :   688ba:  mov    -0x638(%rbp),%esi
    0.00 :   688c0:  test   %esi,%esi
    0.00 :   688c2:  je     69935 <__vfscanf_internal+0x6f55>
         : 7018  ./stdio-common/vfscanf-internal.c:1989
    0.00 :   688c8:  mov    0x8(%r15),%rax
    0.00 :   688cc:  cmp    0x10(%r15),%rax
    0.00 :   688d0:  jae    6991c <__vfscanf_internal+0x6f3c>
         : 7022  ./stdio-common/vfscanf-internal.c:1989 (discriminator 2)
    0.00 :   688d6:  lea    0x1(%rax),%rdx
    0.00 :   688da:  mov    %rdx,0x8(%r15)
    0.00 :   688de:  movzbl (%rax),%eax
         : 7026  ./stdio-common/vfscanf-internal.c:1990 (discriminator 5)
    0.00 :   688e1:  mov    -0x658(%rbp),%rsi
    0.00 :   688e8:  movzbl %al,%edx
    0.00 :   688eb:  mov    0x70(%rsi),%rcx
         : 7030  ./stdio-common/vfscanf-internal.c:1988 (discriminator 5)
    0.00 :   688ef:  cmpl   $0x69,(%rcx,%rdx,4)
    0.00 :   688f3:  jne    69914 <__vfscanf_internal+0x6f34>
         : 7033  ./stdio-common/vfscanf-internal.c:1993
    0.00 :   688f9:  mov    -0x638(%rbp),%esi
    0.00 :   688ff:  xor    %edx,%edx
    0.00 :   68901:  test   %esi,%esi
    0.00 :   68903:  setg   %dl
    0.00 :   68906:  sub    %edx,%esi
         : 7039  char_buffer_add():
         : 7040  ./stdio-common/vfscanf-internal.c:260
    0.00 :   68908:  mov    -0x470(%rbp),%rdx
         : 7042  __vfscanf_internal():
         : 7043  ./stdio-common/vfscanf-internal.c:1993
    0.00 :   6890f:  mov    %esi,-0x638(%rbp)
         : 7045  char_buffer_add():
         : 7046  ./stdio-common/vfscanf-internal.c:260
    0.00 :   68915:  cmp    -0x468(%rbp),%rdx
    0.00 :   6891c:  je     69900 <__vfscanf_internal+0x6f20>
         : 7049  ./stdio-common/vfscanf-internal.c:263
    0.00 :   68922:  lea    0x1(%rdx),%rcx
    0.00 :   68926:  mov    %rcx,-0x470(%rbp)
    0.00 :   6892d:  mov    %al,(%rdx)
         : 7053  __vfscanf_internal():
         : 7054  ./stdio-common/vfscanf-internal.c:1995
    0.00 :   6892f:  mov    -0x638(%rbp),%edi
    0.00 :   68935:  test   %edi,%edi
    0.00 :   68937:  je     698f8 <__vfscanf_internal+0x6f18>
         : 7058  ./stdio-common/vfscanf-internal.c:1996
    0.00 :   6893d:  mov    0x8(%r15),%rax
    0.00 :   68941:  cmp    0x10(%r15),%rax
    0.00 :   68945:  jae    698df <__vfscanf_internal+0x6eff>
         : 7062  ./stdio-common/vfscanf-internal.c:1996 (discriminator 2)
    0.00 :   6894b:  lea    0x1(%rax),%rdx
    0.00 :   6894f:  mov    %rdx,0x8(%r15)
    0.00 :   68953:  movzbl (%rax),%eax
         : 7066  ./stdio-common/vfscanf-internal.c:1997 (discriminator 5)
    0.00 :   68956:  mov    -0x658(%rbp),%rdi
    0.00 :   6895d:  movzbl %al,%edx
    0.00 :   68960:  mov    0x70(%rdi),%rcx
         : 7070  ./stdio-common/vfscanf-internal.c:1995 (discriminator 5)
    0.00 :   68964:  cmpl   $0x74,(%rcx,%rdx,4)
    0.00 :   68968:  jne    698d7 <__vfscanf_internal+0x6ef7>
         : 7073  ./stdio-common/vfscanf-internal.c:2000
    0.00 :   6896e:  mov    -0x638(%rbp),%edi
    0.00 :   68974:  xor    %edx,%edx
    0.00 :   68976:  test   %edi,%edi
    0.00 :   68978:  setg   %dl
    0.00 :   6897b:  sub    %edx,%edi
         : 7079  char_buffer_add():
         : 7080  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6897d:  mov    -0x470(%rbp),%rdx
         : 7082  __vfscanf_internal():
         : 7083  ./stdio-common/vfscanf-internal.c:2000
    0.00 :   68984:  mov    %edi,-0x638(%rbp)
         : 7085  char_buffer_add():
         : 7086  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6898a:  cmp    -0x468(%rbp),%rdx
    0.00 :   68991:  je     698c3 <__vfscanf_internal+0x6ee3>
         : 7089  ./stdio-common/vfscanf-internal.c:263
    0.00 :   68997:  lea    0x1(%rdx),%rcx
    0.00 :   6899b:  mov    %rcx,-0x470(%rbp)
    0.00 :   689a2:  mov    %al,(%rdx)
         : 7093  __vfscanf_internal():
         : 7094  ./stdio-common/vfscanf-internal.c:2002
    0.00 :   689a4:  mov    -0x638(%rbp),%r8d
    0.00 :   689ab:  test   %r8d,%r8d
    0.00 :   689ae:  je     698bb <__vfscanf_internal+0x6edb>
         : 7098  ./stdio-common/vfscanf-internal.c:2003
    0.00 :   689b4:  mov    0x8(%r15),%rax
    0.00 :   689b8:  cmp    0x10(%r15),%rax
    0.00 :   689bc:  jae    6989f <__vfscanf_internal+0x6ebf>
         : 7102  ./stdio-common/vfscanf-internal.c:2003 (discriminator 2)
    0.00 :   689c2:  lea    0x1(%rax),%rdx
    0.00 :   689c6:  mov    %rdx,0x8(%r15)
    0.00 :   689ca:  movzbl (%rax),%r13d
         : 7106  ./stdio-common/vfscanf-internal.c:2004 (discriminator 5)
    0.00 :   689ce:  mov    -0x658(%rbp),%rsi
    0.00 :   689d5:  movzbl %r13b,%eax
         : 7109  ./stdio-common/vfscanf-internal.c:2003 (discriminator 5)
    0.00 :   689d9:  lea    0x7(%r12),%r14
         : 7111  ./stdio-common/vfscanf-internal.c:2004 (discriminator 5)
    0.00 :   689de:  mov    0x70(%rsi),%rdx
         : 7113  ./stdio-common/vfscanf-internal.c:2002 (discriminator 5)
    0.00 :   689e2:  cmpl   $0x79,(%rdx,%rax,4)
    0.00 :   689e6:  je     66450 <__vfscanf_internal+0x3a70>
    0.00 :   689ec:  mov    %r15,%r14
    0.00 :   689ef:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   689f4:  nopl   0x0(%rax)
         : 7119  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   689f8:  mov    -0x538(%rbp),%rdx
    0.00 :   689ff:  lea    0x8(%rdx),%rax
    0.00 :   68a03:  mov    %rax,-0x538(%rbp)
    0.00 :   68a0a:  jmp    67cac <__vfscanf_internal+0x52cc>
         : 7124  ./stdio-common/vfscanf-internal.c:1973 (discriminator 5)
    0.00 :   68a0f:  mov    %r15,%rdi
    0.00 :   68a12:  call   8da40 <__uflow>
    0.00 :   68a17:  mov    %eax,%r13d
    0.00 :   68a1a:  cmp    $0xffffffff,%eax
    0.00 :   68a1d:  jne    6a575 <__vfscanf_internal+0x7b95>
         : 7130  ./stdio-common/vfscanf-internal.c:1973 (discriminator 10)
    0.00 :   68a23:  mov    0x1b13e6(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   68a2a:  mov    %fs:(%r10),%eax
    0.00 :   68a2e:  mov    %eax,-0x600(%rbp)
    0.00 :   68a34:  jmp    63c4e <__vfscanf_internal+0x126e>
         : 7135  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   68a39:  mov    -0x5a0(%rbp),%rax
    0.00 :   68a40:  lea    0x8(%rax),%rdx
    0.00 :   68a44:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   68a4b:  jmp    687ee <__vfscanf_internal+0x5e0e>
         : 7140  ./stdio-common/vfscanf-internal.c:2525
    0.00 :   68a50:  movzbl %cl,%eax
    0.00 :   68a53:  jmp    6453e <__vfscanf_internal+0x1b5e>
         : 7143  ./stdio-common/vfscanf-internal.c:2659
    0.00 :   68a58:  mov    -0x620(%rbp),%r14
         : 7145  ./stdio-common/vfscanf-internal.c:2649
    0.00 :   68a5f:  xor    %r12d,%r12d
    0.00 :   68a62:  jmp    6776a <__vfscanf_internal+0x4d8a>
         : 7148  ./stdio-common/vfscanf-internal.c:1971
    0.00 :   68a67:  movsbl %r13b,%esi
         : 7150  char_buffer_add():
         : 7151  ./stdio-common/vfscanf-internal.c:261
    0.00 :   68a6b:  lea    -0x470(%rbp),%rdi
    0.00 :   68a72:  call   62970 <char_buffer_add_slow>
    0.00 :   68a77:  jmp    63c40 <__vfscanf_internal+0x1260>
    0.00 :   68a7c:  mov    %r15,%r14
    0.00 :   68a7f:  jmp    63108 <__vfscanf_internal+0x728>
         : 7157  __vfscanf_internal():
         : 7158  ./stdio-common/vfscanf-internal.c:2470 (discriminator 24)
    0.00 :   68a84:  mov    -0x6c8(%rbp),%rax
    0.00 :   68a8b:  mov    -0x68c(%rbp),%esi
    0.00 :   68a91:  movdqu (%rax),%xmm5
    0.00 :   68a95:  movups %xmm5,-0x540(%rbp)
    0.00 :   68a9c:  mov    0x10(%rax),%rax
    0.00 :   68aa0:  movaps %xmm5,-0x630(%rbp)
    0.00 :   68aa7:  mov    %rax,-0x530(%rbp)
    0.00 :   68aae:  mov    -0x540(%rbp),%eax
    0.00 :   68ab4:  sub    $0x1,%esi
    0.00 :   68ab7:  je     68afb <__vfscanf_internal+0x611b>
    0.00 :   68ab9:  mov    -0x538(%rbp),%rdx
    0.00 :   68ac0:  mov    %eax,%ecx
         : 7171  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   68ac2:  xor    %r10d,%r10d
    0.00 :   68ac5:  cmp    $0x2f,%ecx
    0.00 :   68ac8:  ja     68ada <__vfscanf_internal+0x60fa>
    0.00 :   68aca:  add    $0x8,%ecx
    0.00 :   68acd:  mov    $0x1,%r10d
    0.00 :   68ad3:  sub    $0x1,%esi
    0.00 :   68ad6:  jne    68ac5 <__vfscanf_internal+0x60e5>
    0.00 :   68ad8:  jmp    68af3 <__vfscanf_internal+0x6113>
    0.00 :   68ada:  lea    0x8(%rdx),%rdi
    0.00 :   68ade:  cmp    $0x1,%esi
    0.00 :   68ae1:  jne    28b58 <__vfscanf_internal.cold+0x1ed>
    0.00 :   68ae7:  mov    %rdi,-0x538(%rbp)
    0.00 :   68aee:  test   %r10b,%r10b
    0.00 :   68af1:  je     68afb <__vfscanf_internal+0x611b>
    0.00 :   68af3:  mov    %ecx,-0x540(%rbp)
    0.00 :   68af9:  mov    %ecx,%eax
    0.00 :   68afb:  cmp    $0x2f,%eax
    0.00 :   68afe:  ja     68bf3 <__vfscanf_internal+0x6213>
    0.00 :   68b04:  mov    %eax,%edx
    0.00 :   68b06:  add    $0x8,%eax
    0.00 :   68b09:  add    -0x530(%rbp),%rdx
    0.00 :   68b10:  mov    %eax,-0x540(%rbp)
    0.00 :   68b16:  mov    (%rdx),%rax
    0.00 :   68b19:  mov    %rax,-0x6b8(%rbp)
    0.00 :   68b20:  jmp    67a5b <__vfscanf_internal+0x507b>
         : 7197  ./stdio-common/vfscanf-internal.c:663
    0.00 :   68b25:  mov    -0x5a0(%rbp),%rax
    0.00 :   68b2c:  lea    0x8(%rax),%rdx
    0.00 :   68b30:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   68b37:  jmp    67290 <__vfscanf_internal+0x48b0>
         : 7202  ./stdio-common/vfscanf-internal.c:663 (discriminator 2)
    0.00 :   68b3c:  mov    -0x6c8(%rbp),%rax
    0.00 :   68b43:  mov    -0x68c(%rbp),%edx
    0.00 :   68b49:  movdqu (%rax),%xmm6
    0.00 :   68b4d:  movups %xmm6,-0x540(%rbp)
    0.00 :   68b54:  mov    0x10(%rax),%rax
    0.00 :   68b58:  movaps %xmm6,-0x630(%rbp)
    0.00 :   68b5f:  mov    %rax,-0x530(%rbp)
    0.00 :   68b66:  mov    -0x540(%rbp),%eax
    0.00 :   68b6c:  sub    $0x1,%edx
    0.00 :   68b6f:  je     68bb9 <__vfscanf_internal+0x61d9>
    0.00 :   68b71:  mov    -0x538(%rbp),%rcx
    0.00 :   68b78:  mov    %eax,%esi
         : 7215  ./stdio-common/vfscanf-internal.c:663
    0.00 :   68b7a:  xor    %r10d,%r10d
    0.00 :   68b7d:  cmp    $0x2f,%esi
    0.00 :   68b80:  ja     68b98 <__vfscanf_internal+0x61b8>
    0.00 :   68b82:  add    $0x8,%esi
    0.00 :   68b85:  mov    $0x1,%r10d
    0.00 :   68b8b:  sub    $0x1,%edx
    0.00 :   68b8e:  jne    68b7d <__vfscanf_internal+0x619d>
    0.00 :   68b90:  jmp    68bb1 <__vfscanf_internal+0x61d1>
    0.00 :   68b92:  nopw   0x0(%rax,%rax,1)
    0.00 :   68b98:  lea    0x8(%rcx),%rdi
    0.00 :   68b9c:  cmp    $0x1,%edx
    0.00 :   68b9f:  jne    28a36 <__vfscanf_internal.cold+0xcb>
    0.00 :   68ba5:  mov    %rdi,-0x538(%rbp)
    0.00 :   68bac:  test   %r10b,%r10b
    0.00 :   68baf:  je     68bb9 <__vfscanf_internal+0x61d9>
    0.00 :   68bb1:  mov    %esi,-0x540(%rbp)
    0.00 :   68bb7:  mov    %esi,%eax
    0.00 :   68bb9:  cmp    $0x2f,%eax
    0.00 :   68bbc:  ja     68c0a <__vfscanf_internal+0x622a>
    0.00 :   68bbe:  mov    %eax,%edx
    0.00 :   68bc0:  add    $0x8,%eax
    0.00 :   68bc3:  add    -0x530(%rbp),%rdx
    0.00 :   68bca:  mov    %eax,-0x540(%rbp)
    0.00 :   68bd0:  mov    (%rdx),%rax
    0.00 :   68bd3:  jmp    67293 <__vfscanf_internal+0x48b3>
    0.00 :   68bd8:  mov    %r14d,-0x638(%rbp)
    0.00 :   68bdf:  mov    -0x648(%rbp),%r12
    0.00 :   68be6:  movzbl -0x630(%rbp),%r14d
    0.00 :   68bee:  jmp    66afd <__vfscanf_internal+0x411d>
         : 7245  ./stdio-common/vfscanf-internal.c:2470
    0.00 :   68bf3:  mov    -0x538(%rbp),%rdx
    0.00 :   68bfa:  lea    0x8(%rdx),%rax
    0.00 :   68bfe:  mov    %rax,-0x538(%rbp)
    0.00 :   68c05:  jmp    68b16 <__vfscanf_internal+0x6136>
         : 7250  ./stdio-common/vfscanf-internal.c:663
    0.00 :   68c0a:  mov    -0x538(%rbp),%rdx
    0.00 :   68c11:  lea    0x8(%rdx),%rax
    0.00 :   68c15:  mov    %rax,-0x538(%rbp)
    0.00 :   68c1c:  jmp    68bd0 <__vfscanf_internal+0x61f0>
         : 7255  ./stdio-common/vfscanf-internal.c:1943
    0.00 :   68c1e:  movsbl %al,%esi
         : 7257  char_buffer_add():
         : 7258  ./stdio-common/vfscanf-internal.c:261
    0.00 :   68c21:  lea    -0x470(%rbp),%rdi
    0.00 :   68c28:  call   62970 <char_buffer_add_slow>
    0.00 :   68c2d:  jmp    66409 <__vfscanf_internal+0x3a29>
         : 7262  __vfscanf_internal():
         : 7263  ./stdio-common/vfscanf-internal.c:1946
    0.00 :   68c32:  movzbl %al,%eax
    0.00 :   68c35:  jmp    66436 <__vfscanf_internal+0x3a56>
    0.00 :   68c3a:  nopw   0x0(%rax,%rax,1)
         : 7267  ./stdio-common/vfscanf-internal.c:2106
    0.00 :   68c40:  mov    -0x6d8(%rbp),%rax
    0.00 :   68c47:  mov    %r12d,%ecx
    0.00 :   68c4a:  movzbl -0x638(%rbp),%r12d
    0.00 :   68c52:  movzbl (%rax),%esi
    0.00 :   68c55:  jmp    66d2c <__vfscanf_internal+0x434c>
         : 7273  char_buffer_add_slow():
         : 7274  ./stdio-common/vfscanf-internal.c:243
    0.00 :   68c5a:  pxor   %xmm0,%xmm0
    0.00 :   68c5e:  movaps %xmm0,-0x470(%rbp)
         : 7277  ./stdio-common/vfscanf-internal.c:245
    0.00 :   68c65:  jmp    63e59 <__vfscanf_internal+0x1479>
         : 7279  __vfscanf_internal():
         : 7280  ./stdio-common/vfscanf-internal.c:1111
    0.00 :   68c6a:  mov    -0x670(%rbp),%rax
    0.00 :   68c71:  addq   $0x1,-0x698(%rbp)
    0.00 :   68c79:  mov    -0x698(%rbp),%rsi
    0.00 :   68c80:  mov    %rcx,-0x650(%rbp)
    0.00 :   68c87:  mov    (%rax),%rdi
    0.00 :   68c8a:  mov    %r11d,-0x638(%rbp)
    0.00 :   68c91:  call   283b0 <realloc@plt>
         : 7288  ./stdio-common/vfscanf-internal.c:1112
    0.00 :   68c96:  mov    -0x638(%rbp),%r11d
    0.00 :   68c9d:  mov    -0x650(%rbp),%rcx
    0.00 :   68ca4:  test   %rax,%rax
         : 7292  ./stdio-common/vfscanf-internal.c:1111
    0.00 :   68ca7:  mov    %rax,%r12
         : 7294  ./stdio-common/vfscanf-internal.c:1112
    0.00 :   68caa:  je     68ccd <__vfscanf_internal+0x62ed>
         : 7296  ./stdio-common/vfscanf-internal.c:1129
    0.00 :   68cac:  mov    -0x670(%rbp),%rax
    0.00 :   68cb3:  mov    %r12,(%rax)
         : 7299  ./stdio-common/vfscanf-internal.c:1130
    0.00 :   68cb6:  add    -0x630(%rbp),%r12
         : 7301  ./stdio-common/vfscanf-internal.c:1131
    0.00 :   68cbd:  jmp    6552a <__vfscanf_internal+0x2b4a>
         : 7303  ./stdio-common/vfscanf-internal.c:2126
    0.00 :   68cc2:  jne    66a33 <__vfscanf_internal+0x4053>
    0.00 :   68cc8:  jmp    682c2 <__vfscanf_internal+0x58e2>
         : 7306  ./stdio-common/vfscanf-internal.c:1114
    0.00 :   68ccd:  mov    %rcx,%r14
    0.00 :   68cd0:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   68cda:  jne    68d54 <__vfscanf_internal+0x6374>
         : 7310  ./stdio-common/vfscanf-internal.c:1122
    0.00 :   68cdc:  mov    -0x670(%rbp),%rax
    0.00 :   68ce3:  mov    -0x630(%rbp),%rsi
         : 7313  ./stdio-common/vfscanf-internal.c:1123
    0.00 :   68cea:  movq   $0x0,-0x670(%rbp)
         : 7315  ./stdio-common/vfscanf-internal.c:1124
    0.00 :   68cf5:  addl   $0x1,-0x640(%rbp)
         : 7317  ./stdio-common/vfscanf-internal.c:1122
    0.00 :   68cfc:  mov    (%rax),%rax
    0.00 :   68cff:  movb   $0x0,-0x1(%rax,%rsi,1)
         : 7320  ./stdio-common/vfscanf-internal.c:1125
    0.00 :   68d04:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   68d09:  mov    %r12d,%ecx
    0.00 :   68d0c:  movzbl -0x638(%rbp),%r12d
    0.00 :   68d14:  jmp    66a46 <__vfscanf_internal+0x4066>
    0.00 :   68d19:  mov    %r14d,-0x638(%rbp)
    0.00 :   68d20:  mov    -0x648(%rbp),%r12
    0.00 :   68d27:  movzbl -0x630(%rbp),%r14d
         : 7328  ./stdio-common/vfscanf-internal.c:2152 (discriminator 2)
    0.00 :   68d2f:  movzbl %r13b,%esi
    0.00 :   68d33:  mov    %r15,%rdi
    0.00 :   68d36:  sub    $0x1,%r12
    0.00 :   68d3a:  call   8e7b0 <_IO_sputbackc>
    0.00 :   68d3f:  jmp    66afd <__vfscanf_internal+0x411d>
    0.00 :   68d44:  mov    %r12d,%ecx
    0.00 :   68d47:  movzbl -0x638(%rbp),%r12d
    0.00 :   68d4f:  jmp    66a4f <__vfscanf_internal+0x406f>
         : 7337  ./stdio-common/vfscanf-internal.c:1116
    0.00 :   68d54:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   68d5e:  jmp    63108 <__vfscanf_internal+0x728>
         : 7340  ./stdio-common/vfscanf-internal.c:1896 (discriminator 2)
    0.00 :   68d63:  mov    -0x6c8(%rbp),%rax
    0.00 :   68d6a:  mov    -0x68c(%rbp),%edi
    0.00 :   68d70:  movdqu (%rax),%xmm6
    0.00 :   68d74:  movups %xmm6,-0x540(%rbp)
    0.00 :   68d7b:  mov    0x10(%rax),%rax
    0.00 :   68d7f:  movaps %xmm6,-0x630(%rbp)
    0.00 :   68d86:  mov    %rax,-0x530(%rbp)
    0.00 :   68d8d:  mov    -0x540(%rbp),%eax
    0.00 :   68d93:  sub    $0x1,%edi
    0.00 :   68d96:  je     683d1 <__vfscanf_internal+0x59f1>
    0.00 :   68d9c:  mov    -0x538(%rbp),%rcx
    0.00 :   68da3:  mov    %eax,%esi
         : 7353  ./stdio-common/vfscanf-internal.c:1896
    0.00 :   68da5:  xor    %r11d,%r11d
    0.00 :   68da8:  cmp    $0x2f,%esi
    0.00 :   68dab:  ja     68dc0 <__vfscanf_internal+0x63e0>
    0.00 :   68dad:  add    $0x8,%esi
    0.00 :   68db0:  mov    $0x1,%r11d
    0.00 :   68db6:  sub    $0x1,%edi
    0.00 :   68db9:  jne    68da8 <__vfscanf_internal+0x63c8>
    0.00 :   68dbb:  jmp    683c9 <__vfscanf_internal+0x59e9>
    0.00 :   68dc0:  lea    0x8(%rcx),%r10
    0.00 :   68dc4:  cmp    $0x1,%edi
    0.00 :   68dc7:  jne    28bcc <__vfscanf_internal.cold+0x261>
    0.00 :   68dcd:  jmp    683bd <__vfscanf_internal+0x59dd>
         : 7366  ./stdio-common/vfscanf-internal.c:1822
    0.00 :   68dd2:  movzbl %al,%eax
    0.00 :   68dd5:  jmp    652d0 <__vfscanf_internal+0x28f0>
         : 7369  ./stdio-common/vfscanf-internal.c:1019 (discriminator 24)
    0.00 :   68dda:  mov    -0x6c8(%rbp),%rax
    0.00 :   68de1:  mov    -0x68c(%rbp),%esi
    0.00 :   68de7:  movdqu (%rax),%xmm6
    0.00 :   68deb:  movups %xmm6,-0x540(%rbp)
    0.00 :   68df2:  mov    0x10(%rax),%rax
    0.00 :   68df6:  movaps %xmm6,-0x630(%rbp)
    0.00 :   68dfd:  mov    %rax,-0x530(%rbp)
    0.00 :   68e04:  mov    -0x540(%rbp),%eax
    0.00 :   68e0a:  sub    $0x1,%esi
    0.00 :   68e0d:  je     68e51 <__vfscanf_internal+0x6471>
    0.00 :   68e0f:  mov    -0x538(%rbp),%rdx
    0.00 :   68e16:  mov    %eax,%ecx
         : 7382  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   68e18:  xor    %r11d,%r11d
    0.00 :   68e1b:  cmp    $0x2f,%ecx
    0.00 :   68e1e:  ja     68e30 <__vfscanf_internal+0x6450>
    0.00 :   68e20:  add    $0x8,%ecx
    0.00 :   68e23:  mov    $0x1,%r11d
    0.00 :   68e29:  sub    $0x1,%esi
    0.00 :   68e2c:  jne    68e1b <__vfscanf_internal+0x643b>
    0.00 :   68e2e:  jmp    68e49 <__vfscanf_internal+0x6469>
    0.00 :   68e30:  lea    0x8(%rdx),%rdi
    0.00 :   68e34:  cmp    $0x1,%esi
    0.00 :   68e37:  jne    28b01 <__vfscanf_internal.cold+0x196>
    0.00 :   68e3d:  mov    %rdi,-0x538(%rbp)
    0.00 :   68e44:  test   %r11b,%r11b
    0.00 :   68e47:  je     68e51 <__vfscanf_internal+0x6471>
    0.00 :   68e49:  mov    %ecx,-0x540(%rbp)
    0.00 :   68e4f:  mov    %ecx,%eax
    0.00 :   68e51:  cmp    $0x2f,%eax
    0.00 :   68e54:  ja     6a2a7 <__vfscanf_internal+0x78c7>
    0.00 :   68e5a:  mov    %eax,%edx
    0.00 :   68e5c:  add    $0x8,%eax
    0.00 :   68e5f:  add    -0x530(%rbp),%rdx
    0.00 :   68e66:  mov    %eax,-0x540(%rbp)
    0.00 :   68e6c:  mov    (%rdx),%rax
    0.00 :   68e6f:  mov    %rax,-0x6c0(%rbp)
    0.00 :   68e76:  jmp    681e2 <__vfscanf_internal+0x5802>
         : 7408  ./stdio-common/vfscanf-internal.c:1500
    0.00 :   68e7b:  mov    -0x648(%rbp),%r14
    0.00 :   68e82:  mov    -0x660(%rbp),%r13d
    0.00 :   68e89:  movq   $0x0,-0x6a0(%rbp)
    0.00 :   68e94:  movzbl -0x668(%rbp),%ecx
    0.00 :   68e9b:  mov    -0x688(%rbp),%r15
         : 7414  ./stdio-common/vfscanf-internal.c:1501
    0.00 :   68ea2:  jmp    649bb <__vfscanf_internal+0x1fdb>
         : 7416  ./stdio-common/vfscanf-internal.c:3019
    0.00 :   68ea7:  movslq %eax,%rdx
    0.00 :   68eaa:  add    %rdx,%rdx
    0.00 :   68ead:  jmp    62c95 <__vfscanf_internal+0x2b5>
    0.00 :   68eb2:  nopw   0x0(%rax,%rax,1)
         : 7421  ./stdio-common/vfscanf-internal.c:661 (discriminator 2)
    0.00 :   68eb8:  mov    -0x6c8(%rbp),%rax
    0.00 :   68ebf:  mov    -0x68c(%rbp),%edx
    0.00 :   68ec5:  movdqu (%rax),%xmm6
    0.00 :   68ec9:  movups %xmm6,-0x540(%rbp)
    0.00 :   68ed0:  mov    0x10(%rax),%rax
    0.00 :   68ed4:  movaps %xmm6,-0x610(%rbp)
    0.00 :   68edb:  mov    %rax,-0x530(%rbp)
    0.00 :   68ee2:  mov    -0x540(%rbp),%eax
    0.00 :   68ee8:  sub    $0x1,%edx
    0.00 :   68eeb:  je     68f2f <__vfscanf_internal+0x654f>
    0.00 :   68eed:  mov    -0x538(%rbp),%rcx
    0.00 :   68ef4:  mov    %eax,%esi
         : 7434  ./stdio-common/vfscanf-internal.c:661
    0.00 :   68ef6:  xor    %r10d,%r10d
    0.00 :   68ef9:  cmp    $0x2f,%esi
    0.00 :   68efc:  ja     68f0e <__vfscanf_internal+0x652e>
    0.00 :   68efe:  add    $0x8,%esi
    0.00 :   68f01:  mov    $0x1,%r10d
    0.00 :   68f07:  sub    $0x1,%edx
    0.00 :   68f0a:  jne    68ef9 <__vfscanf_internal+0x6519>
    0.00 :   68f0c:  jmp    68f27 <__vfscanf_internal+0x6547>
    0.00 :   68f0e:  lea    0x8(%rcx),%rdi
    0.00 :   68f12:  cmp    $0x1,%edx
    0.00 :   68f15:  jne    28c7a <__vfscanf_internal.cold+0x30f>
    0.00 :   68f1b:  mov    %rdi,-0x538(%rbp)
    0.00 :   68f22:  test   %r10b,%r10b
    0.00 :   68f25:  je     68f2f <__vfscanf_internal+0x654f>
    0.00 :   68f27:  mov    %esi,-0x540(%rbp)
    0.00 :   68f2d:  mov    %esi,%eax
    0.00 :   68f2f:  cmp    $0x2f,%eax
    0.00 :   68f32:  ja     6a722 <__vfscanf_internal+0x7d42>
    0.00 :   68f38:  mov    %eax,%edx
    0.00 :   68f3a:  add    $0x8,%eax
    0.00 :   68f3d:  add    -0x530(%rbp),%rdx
    0.00 :   68f44:  mov    %eax,-0x540(%rbp)
    0.00 :   68f4a:  mov    (%rdx),%rax
    0.00 :   68f4d:  jmp    664ef <__vfscanf_internal+0x3b0f>
         : 7459  char_buffer_add():
         : 7460  ./stdio-common/vfscanf-internal.c:261
    0.00 :   68f52:  mov    -0x6e8(%rbp),%esi
    0.00 :   68f58:  lea    -0x470(%rbp),%rdi
    0.00 :   68f5f:  call   62970 <char_buffer_add_slow>
         : 7464  __vfscanf_internal():
         : 7465  ./stdio-common/vfscanf-internal.c:2067
    0.00 :   68f64:  mov    %r12b,-0x660(%rbp)
    0.00 :   68f6b:  mov    %r12b,-0x630(%rbp)
         : 7468  char_buffer_add():
         : 7469  ./stdio-common/vfscanf-internal.c:2067
    0.00 :   68f72:  jmp    66ac3 <__vfscanf_internal+0x40e3>
    0.00 :   68f77:  mov    %r15,%r14
    0.00 :   68f7a:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   68f7f:  mov    %r15,%r14
    0.00 :   68f82:  jmp    63108 <__vfscanf_internal+0x728>
         : 7475  __vfscanf_internal():
         : 7476  ./stdio-common/vfscanf-internal.c:2887
    0.00 :   68f87:  mov    -0x620(%rbp),%r14
    0.00 :   68f8e:  jmp    67872 <__vfscanf_internal+0x4e92>
    0.00 :   68f93:  mov    %r15,%r14
    0.00 :   68f96:  jmp    63108 <__vfscanf_internal+0x728>
         : 7481  ./stdio-common/vfscanf-internal.c:737 (discriminator 24)
    0.00 :   68f9b:  mov    -0x6c8(%rbp),%rax
    0.00 :   68fa2:  mov    -0x68c(%rbp),%edx
    0.00 :   68fa8:  movdqu (%rax),%xmm6
    0.00 :   68fac:  movups %xmm6,-0x540(%rbp)
    0.00 :   68fb3:  mov    0x10(%rax),%rax
    0.00 :   68fb7:  movaps %xmm6,-0x630(%rbp)
    0.00 :   68fbe:  mov    %rax,-0x530(%rbp)
    0.00 :   68fc5:  mov    -0x540(%rbp),%eax
    0.00 :   68fcb:  sub    $0x1,%edx
    0.00 :   68fce:  je     69019 <__vfscanf_internal+0x6639>
    0.00 :   68fd0:  mov    -0x538(%rbp),%rcx
    0.00 :   68fd7:  mov    %eax,%esi
         : 7494  ./stdio-common/vfscanf-internal.c:737
    0.00 :   68fd9:  xor    %r10d,%r10d
    0.00 :   68fdc:  cmp    $0x2f,%esi
    0.00 :   68fdf:  ja     68ff8 <__vfscanf_internal+0x6618>
    0.00 :   68fe1:  add    $0x8,%esi
    0.00 :   68fe4:  mov    $0x1,%r10d
    0.00 :   68fea:  sub    $0x1,%edx
    0.00 :   68fed:  jne    68fdc <__vfscanf_internal+0x65fc>
    0.00 :   68fef:  jmp    69011 <__vfscanf_internal+0x6631>
    0.00 :   68ff1:  nopl   0x0(%rax)
    0.00 :   68ff8:  lea    0x8(%rcx),%rdi
    0.00 :   68ffc:  cmp    $0x1,%edx
    0.00 :   68fff:  jne    28c40 <__vfscanf_internal.cold+0x2d5>
    0.00 :   69005:  mov    %rdi,-0x538(%rbp)
    0.00 :   6900c:  test   %r10b,%r10b
    0.00 :   6900f:  je     69019 <__vfscanf_internal+0x6639>
    0.00 :   69011:  mov    %esi,-0x540(%rbp)
    0.00 :   69017:  mov    %esi,%eax
    0.00 :   69019:  cmp    $0x2f,%eax
    0.00 :   6901c:  ja     6904f <__vfscanf_internal+0x666f>
    0.00 :   6901e:  mov    %eax,%edx
    0.00 :   69020:  add    $0x8,%eax
    0.00 :   69023:  add    -0x530(%rbp),%rdx
    0.00 :   6902a:  mov    %eax,-0x540(%rbp)
    0.00 :   69030:  mov    (%rdx),%rax
    0.00 :   69033:  mov    %rax,-0x6c0(%rbp)
    0.00 :   6903a:  jmp    67732 <__vfscanf_internal+0x4d52>
         : 7521  char_buffer_add_slow():
         : 7522  ./stdio-common/vfscanf-internal.c:243
    0.00 :   6903f:  pxor   %xmm0,%xmm0
    0.00 :   69043:  movaps %xmm0,-0x470(%rbp)
         : 7525  ./stdio-common/vfscanf-internal.c:245
    0.00 :   6904a:  jmp    63ab3 <__vfscanf_internal+0x10d3>
         : 7527  __vfscanf_internal():
         : 7528  ./stdio-common/vfscanf-internal.c:737
    0.00 :   6904f:  mov    -0x538(%rbp),%rdx
    0.00 :   69056:  lea    0x8(%rdx),%rax
    0.00 :   6905a:  mov    %rax,-0x538(%rbp)
    0.00 :   69061:  jmp    69030 <__vfscanf_internal+0x6650>
         : 7533  ./stdio-common/vfscanf-internal.c:737 (discriminator 6)
    0.00 :   69063:  mov    -0x6c8(%rbp),%rax
    0.00 :   6906a:  mov    -0x68c(%rbp),%edx
    0.00 :   69070:  movdqu (%rax),%xmm6
    0.00 :   69074:  movups %xmm6,-0x540(%rbp)
    0.00 :   6907b:  mov    0x10(%rax),%rax
    0.00 :   6907f:  movaps %xmm6,-0x630(%rbp)
    0.00 :   69086:  mov    %rax,-0x530(%rbp)
    0.00 :   6908d:  mov    -0x540(%rbp),%eax
    0.00 :   69093:  sub    $0x1,%edx
    0.00 :   69096:  je     690da <__vfscanf_internal+0x66fa>
    0.00 :   69098:  mov    -0x538(%rbp),%rcx
    0.00 :   6909f:  mov    %eax,%esi
         : 7546  ./stdio-common/vfscanf-internal.c:737
    0.00 :   690a1:  xor    %r10d,%r10d
    0.00 :   690a4:  cmp    $0x2f,%esi
    0.00 :   690a7:  ja     690b9 <__vfscanf_internal+0x66d9>
    0.00 :   690a9:  add    $0x8,%esi
    0.00 :   690ac:  mov    $0x1,%r10d
    0.00 :   690b2:  sub    $0x1,%edx
    0.00 :   690b5:  jne    690a4 <__vfscanf_internal+0x66c4>
    0.00 :   690b7:  jmp    690d2 <__vfscanf_internal+0x66f2>
    0.00 :   690b9:  lea    0x8(%rcx),%rdi
    0.00 :   690bd:  cmp    $0x1,%edx
    0.00 :   690c0:  jne    28c06 <__vfscanf_internal.cold+0x29b>
    0.00 :   690c6:  mov    %rdi,-0x538(%rbp)
    0.00 :   690cd:  test   %r10b,%r10b
    0.00 :   690d0:  je     690da <__vfscanf_internal+0x66fa>
    0.00 :   690d2:  mov    %esi,-0x540(%rbp)
    0.00 :   690d8:  mov    %esi,%eax
    0.00 :   690da:  cmp    $0x2f,%eax
    0.00 :   690dd:  ja     69147 <__vfscanf_internal+0x6767>
    0.00 :   690df:  mov    %eax,%edx
    0.00 :   690e1:  add    $0x8,%eax
    0.00 :   690e4:  add    -0x530(%rbp),%rdx
    0.00 :   690eb:  mov    %eax,-0x540(%rbp)
    0.00 :   690f1:  mov    (%rdx),%rax
    0.00 :   690f4:  mov    %rax,-0x670(%rbp)
    0.00 :   690fb:  mov    %rax,%r12
    0.00 :   690fe:  jmp    641fb <__vfscanf_internal+0x181b>
    0.00 :   69103:  mov    %r15,%r14
    0.00 :   69106:  jmp    63108 <__vfscanf_internal+0x728>
         : 7575  ./stdio-common/vfscanf-internal.c:2697
    0.00 :   6910b:  mov    -0x670(%rbp),%rax
    0.00 :   69112:  lea    0x4(%rdx),%rsi
    0.00 :   69116:  addq   $0x1,-0x698(%rbp)
    0.00 :   6911e:  mov    (%rax),%rdi
    0.00 :   69121:  call   283b0 <realloc@plt>
         : 7581  ./stdio-common/vfscanf-internal.c:2699
    0.00 :   69126:  mov    -0x638(%rbp),%rdx
    0.00 :   6912d:  test   %rax,%rax
         : 7584  ./stdio-common/vfscanf-internal.c:2697
    0.00 :   69130:  mov    %rax,%rbx
         : 7586  ./stdio-common/vfscanf-internal.c:2699
    0.00 :   69133:  je     6915b <__vfscanf_internal+0x677b>
         : 7588  ./stdio-common/vfscanf-internal.c:2716
    0.00 :   69135:  mov    -0x670(%rbp),%rax
    0.00 :   6913c:  mov    %rbx,(%rax)
         : 7591  ./stdio-common/vfscanf-internal.c:2717
    0.00 :   6913f:  add    %rdx,%rbx
         : 7593  ./stdio-common/vfscanf-internal.c:2718
    0.00 :   69142:  jmp    65d90 <__vfscanf_internal+0x33b0>
         : 7595  ./stdio-common/vfscanf-internal.c:737
    0.00 :   69147:  mov    -0x538(%rbp),%rdx
    0.00 :   6914e:  lea    0x8(%rdx),%rax
    0.00 :   69152:  mov    %rax,-0x538(%rbp)
    0.00 :   69159:  jmp    690f1 <__vfscanf_internal+0x6711>
         : 7600  ./stdio-common/vfscanf-internal.c:2701
    0.00 :   6915b:  mov    %r12,%r14
    0.00 :   6915e:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   69168:  jne    6922e <__vfscanf_internal+0x684e>
         : 7604  ./stdio-common/vfscanf-internal.c:2709
    0.00 :   6916e:  mov    -0x670(%rbp),%rax
         : 7606  ./stdio-common/vfscanf-internal.c:2711
    0.00 :   69175:  addl   $0x1,-0x640(%rbp)
         : 7608  ./stdio-common/vfscanf-internal.c:2710
    0.00 :   6917c:  movq   $0x0,-0x670(%rbp)
         : 7610  ./stdio-common/vfscanf-internal.c:2709
    0.00 :   69187:  mov    (%rax),%rax
    0.00 :   6918a:  movl   $0x0,-0x4(%rax,%rdx,1)
         : 7613  ./stdio-common/vfscanf-internal.c:2712
    0.00 :   69192:  jmp    63108 <__vfscanf_internal+0x728>
         : 7615  ./stdio-common/vfscanf-internal.c:2909
    0.00 :   69197:  cmp    %rbx,%r12
    0.00 :   6919a:  jae    69261 <__vfscanf_internal+0x6881>
         : 7618  ./stdio-common/vfscanf-internal.c:2922
    0.00 :   691a0:  mov    -0x670(%rbp),%rax
    0.00 :   691a7:  mov    %r12,%rbx
    0.00 :   691aa:  mov    (%rax),%rdi
    0.00 :   691ad:  jmp    6748d <__vfscanf_internal+0x4aad>
         : 7623  ./stdio-common/vfscanf-internal.c:1702
    0.00 :   691b2:  xchg   %r15,%r12
    0.00 :   691b5:  cmp    %r12,-0x680(%rbp)
    0.00 :   691bc:  jae    64f0b <__vfscanf_internal+0x252b>
         : 7627  ./stdio-common/vfscanf-internal.c:1704
    0.00 :   691c2:  mov    %r12,%rax
    0.00 :   691c5:  sub    -0x680(%rbp),%rax
    0.00 :   691cc:  sub    %rax,%rcx
    0.00 :   691cf:  mov    %rcx,-0x470(%rbp)
         : 7632  ./stdio-common/vfscanf-internal.c:1705
    0.00 :   691d6:  cmp    $0xffffffff,%r13d
    0.00 :   691da:  jne    692c9 <__vfscanf_internal+0x68e9>
         : 7635  ./stdio-common/vfscanf-internal.c:1706
    0.00 :   691e0:  lea    -0x1(%r12),%r13
    0.00 :   691e5:  cmp    %r13,-0x680(%rbp)
    0.00 :   691ec:  jae    6921d <__vfscanf_internal+0x683d>
    0.00 :   691ee:  mov    %r13,%rbx
         : 7640  ./stdio-common/vfscanf-internal.c:1707
    0.00 :   691f1:  movzbl (%rbx),%esi
    0.00 :   691f4:  mov    %r15,%rdi
         : 7643  ./stdio-common/vfscanf-internal.c:1706
    0.00 :   691f7:  sub    $0x1,%rbx
         : 7645  ./stdio-common/vfscanf-internal.c:1707
    0.00 :   691fb:  call   8e7b0 <_IO_sputbackc>
         : 7647  ./stdio-common/vfscanf-internal.c:1706
    0.00 :   69200:  cmp    %rbx,-0x680(%rbp)
    0.00 :   69207:  jne    691f1 <__vfscanf_internal+0x6811>
    0.00 :   69209:  mov    -0x680(%rbp),%rax
    0.00 :   69210:  add    $0x1,%rax
    0.00 :   69214:  sub    %r12,%rax
         : 7653  ./stdio-common/vfscanf-internal.c:1707
    0.00 :   69217:  add    %rax,%r14
         : 7655  ./stdio-common/vfscanf-internal.c:1706
    0.00 :   6921a:  add    %rax,%r13
         : 7657  ./stdio-common/vfscanf-internal.c:1708
    0.00 :   6921d:  movzbl 0x0(%r13),%r13d
    0.00 :   69222:  mov    -0x470(%rbp),%rsi
    0.00 :   69229:  jmp    64f0b <__vfscanf_internal+0x252b>
         : 7661  ./stdio-common/vfscanf-internal.c:2703
    0.00 :   6922e:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   69238:  jmp    63108 <__vfscanf_internal+0x728>
         : 7664  ./stdio-common/vfscanf-internal.c:737 (discriminator 16)
    0.00 :   6923d:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   69247:  mov    $0xffffffff,%eax
    0.00 :   6924c:  cmove  -0x640(%rbp),%eax
    0.00 :   69253:  mov    %r15,%r14
    0.00 :   69256:  mov    %eax,-0x640(%rbp)
    0.00 :   6925c:  jmp    63108 <__vfscanf_internal+0x728>
         : 7671  ./stdio-common/vfscanf-internal.c:2914
    0.00 :   69261:  mov    -0x638(%rbp),%r14
    0.00 :   69268:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   69272:  jne    692de <__vfscanf_internal+0x68fe>
         : 7675  ./stdio-common/vfscanf-internal.c:2922
    0.00 :   69274:  mov    -0x670(%rbp),%rax
    0.00 :   6927b:  mov    -0x698(%rbp),%rdi
         : 7678  ./stdio-common/vfscanf-internal.c:2923
    0.00 :   69282:  movq   $0x0,-0x670(%rbp)
         : 7680  ./stdio-common/vfscanf-internal.c:2924
    0.00 :   6928d:  addl   $0x1,-0x640(%rbp)
         : 7682  ./stdio-common/vfscanf-internal.c:2922
    0.00 :   69294:  mov    (%rax),%rax
    0.00 :   69297:  movb   $0x0,-0x1(%rax,%rdi,1)
         : 7685  ./stdio-common/vfscanf-internal.c:2925
    0.00 :   6929c:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   692a1:  nopl   0x0(%rax)
         : 7688  ./stdio-common/vfscanf-internal.c:1702
    0.00 :   692a8:  cmp    %r12,-0x680(%rbp)
    0.00 :   692af:  jae    64f0b <__vfscanf_internal+0x252b>
         : 7691  ./stdio-common/vfscanf-internal.c:1704
    0.00 :   692b5:  mov    %r12,%rax
    0.00 :   692b8:  sub    -0x680(%rbp),%rax
    0.00 :   692bf:  sub    %rax,%rsi
    0.00 :   692c2:  mov    %rsi,-0x470(%rbp)
         : 7696  ./stdio-common/vfscanf-internal.c:1705 (discriminator 2)
    0.00 :   692c9:  movzbl %r13b,%esi
    0.00 :   692cd:  mov    %r15,%rdi
    0.00 :   692d0:  sub    $0x1,%r14
    0.00 :   692d4:  call   8e7b0 <_IO_sputbackc>
    0.00 :   692d9:  jmp    691e0 <__vfscanf_internal+0x6800>
         : 7702  ./stdio-common/vfscanf-internal.c:2916
    0.00 :   692de:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   692e8:  jmp    63108 <__vfscanf_internal+0x728>
         : 7705  ./stdio-common/vfscanf-internal.c:1898 (discriminator 2)
    0.00 :   692ed:  mov    -0x6c8(%rbp),%rax
    0.00 :   692f4:  mov    -0x68c(%rbp),%edi
    0.00 :   692fa:  movdqu (%rax),%xmm5
    0.00 :   692fe:  movups %xmm5,-0x540(%rbp)
    0.00 :   69305:  mov    0x10(%rax),%rax
    0.00 :   69309:  movaps %xmm5,-0x630(%rbp)
    0.00 :   69310:  mov    %rax,-0x530(%rbp)
    0.00 :   69317:  mov    -0x540(%rbp),%eax
    0.00 :   6931d:  sub    $0x1,%edi
    0.00 :   69320:  je     6879a <__vfscanf_internal+0x5dba>
    0.00 :   69326:  mov    -0x538(%rbp),%rcx
    0.00 :   6932d:  mov    %eax,%esi
         : 7718  ./stdio-common/vfscanf-internal.c:1898
    0.00 :   6932f:  xor    %r11d,%r11d
    0.00 :   69332:  cmp    $0x2f,%esi
    0.00 :   69335:  ja     6934a <__vfscanf_internal+0x696a>
    0.00 :   69337:  add    $0x8,%esi
    0.00 :   6933a:  mov    $0x1,%r11d
    0.00 :   69340:  sub    $0x1,%edi
    0.00 :   69343:  jne    69332 <__vfscanf_internal+0x6952>
    0.00 :   69345:  jmp    68792 <__vfscanf_internal+0x5db2>
    0.00 :   6934a:  lea    0x8(%rcx),%r10
    0.00 :   6934e:  cmp    $0x1,%edi
    0.00 :   69351:  jne    28be9 <__vfscanf_internal.cold+0x27e>
    0.00 :   69357:  jmp    68786 <__vfscanf_internal+0x5da6>
         : 7731  ./stdio-common/vfscanf-internal.c:1960
    0.00 :   6935c:  movzbl %al,%edx
    0.00 :   6935f:  jmp    63b79 <__vfscanf_internal+0x1199>
         : 7734  ./stdio-common/vfscanf-internal.c:1964
    0.00 :   69364:  movsbl %al,%esi
         : 7736  char_buffer_add():
         : 7737  ./stdio-common/vfscanf-internal.c:261
    0.00 :   69367:  lea    -0x470(%rbp),%rdi
    0.00 :   6936e:  call   62970 <char_buffer_add_slow>
    0.00 :   69373:  jmp    63bc4 <__vfscanf_internal+0x11e4>
    0.00 :   69378:  mov    %r15,%r14
    0.00 :   6937b:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   69380:  lea    -0x470(%rbp),%rdi
    0.00 :   69387:  mov    $0x30,%esi
    0.00 :   6938c:  call   62970 <char_buffer_add_slow>
    0.00 :   69391:  jmp    668cd <__vfscanf_internal+0x3eed>
         : 7747  __vfscanf_internal():
         : 7748  ./stdio-common/vfscanf-internal.c:1381
    0.00 :   69396:  movl   $0x8,-0x610(%rbp)
         : 7750  ./stdio-common/vfscanf-internal.c:1398
    0.00 :   693a0:  jmp    63e06 <__vfscanf_internal+0x1426>
    0.00 :   693a5:  mov    %r15,%r14
    0.00 :   693a8:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   693ad:  mov    %r15,%r14
    0.00 :   693b0:  mov    %r13d,%r15d
    0.00 :   693b3:  jmp    6579d <__vfscanf_internal+0x2dbd>
         : 7757  ./stdio-common/vfscanf-internal.c:816
    0.00 :   693b8:  mov    -0x670(%rbp),%rax
    0.00 :   693bf:  add    $0x1,%rbx
    0.00 :   693c3:  mov    %rbx,%rsi
    0.00 :   693c6:  mov    (%rax),%rdi
    0.00 :   693c9:  call   283b0 <realloc@plt>
         : 7763  ./stdio-common/vfscanf-internal.c:817
    0.00 :   693ce:  test   %rax,%rax
    0.00 :   693d1:  je     69421 <__vfscanf_internal+0x6a41>
         : 7766  ./stdio-common/vfscanf-internal.c:825
    0.00 :   693d3:  mov    -0x670(%rbp),%rsi
    0.00 :   693da:  mov    %rax,(%rsi)
         : 7769  ./stdio-common/vfscanf-internal.c:826
    0.00 :   693dd:  add    %r13,%rax
         : 7771  ./stdio-common/vfscanf-internal.c:827
    0.00 :   693e0:  jmp    66ff3 <__vfscanf_internal+0x4613>
         : 7773  char_buffer_add_slow():
         : 7774  ./stdio-common/vfscanf-internal.c:243
    0.00 :   693e5:  pxor   %xmm0,%xmm0
    0.00 :   693e9:  movaps %xmm0,-0x470(%rbp)
         : 7777  __vfscanf_internal():
         : 7778  ./stdio-common/vfscanf-internal.c:2159
    0.00 :   693f0:  test   %r14d,%r14d
    0.00 :   693f3:  jne    6699f <__vfscanf_internal+0x3fbf>
         : 7781  ./stdio-common/vfscanf-internal.c:2168
    0.00 :   693f9:  mov    0x1b0a10(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   69400:  mov    %r15,%r14
    0.00 :   69403:  movl   $0xc,%fs:(%rax)
         : 7785  ./stdio-common/vfscanf-internal.c:2169
    0.00 :   6940a:  movl   $0xffffffff,-0x640(%rbp)
         : 7787  ./stdio-common/vfscanf-internal.c:2170
    0.00 :   69414:  jmp    63108 <__vfscanf_internal+0x728>
         : 7789  ./stdio-common/vfscanf-internal.c:1824
    0.00 :   69419:  movzbl %al,%eax
    0.00 :   6941c:  jmp    65334 <__vfscanf_internal+0x2954>
         : 7792  ./stdio-common/vfscanf-internal.c:820
    0.00 :   69421:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   6942b:  mov    %r15,%r14
    0.00 :   6942e:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   69433:  mov    %r15,%r14
    0.00 :   69436:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6943b:  mov    %r15,%r14
    0.00 :   6943e:  jmp    63108 <__vfscanf_internal+0x728>
         : 7800  ./stdio-common/vfscanf-internal.c:1936
    0.00 :   69443:  movsbl %r13b,%esi
         : 7802  char_buffer_add():
         : 7803  ./stdio-common/vfscanf-internal.c:261
    0.00 :   69447:  lea    -0x470(%rbp),%rdi
    0.00 :   6944e:  call   62970 <char_buffer_add_slow>
    0.00 :   69453:  jmp    66392 <__vfscanf_internal+0x39b2>
         : 7807  __vfscanf_internal():
         : 7808  ./stdio-common/vfscanf-internal.c:1939
    0.00 :   69458:  movzbl %al,%edx
    0.00 :   6945b:  jmp    663be <__vfscanf_internal+0x39de>
         : 7811  ./stdio-common/vfscanf-internal.c:2470 (discriminator 16)
    0.00 :   69460:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   6946a:  mov    $0xffffffff,%eax
    0.00 :   6946f:  cmove  -0x640(%rbp),%eax
    0.00 :   69476:  mov    %r15,%r14
    0.00 :   69479:  mov    %eax,-0x640(%rbp)
    0.00 :   6947f:  jmp    63108 <__vfscanf_internal+0x728>
         : 7818  ./stdio-common/vfscanf-internal.c:1209 (discriminator 17)
    0.00 :   69484:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   6948e:  mov    $0xffffffff,%eax
    0.00 :   69493:  cmove  -0x640(%rbp),%eax
    0.00 :   6949a:  mov    %r15,%r14
    0.00 :   6949d:  mov    %eax,-0x640(%rbp)
    0.00 :   694a3:  jmp    63108 <__vfscanf_internal+0x728>
         : 7825  ./stdio-common/vfscanf-internal.c:1896
    0.00 :   694a8:  mov    -0x538(%rbp),%rcx
    0.00 :   694af:  lea    0x8(%rcx),%rax
    0.00 :   694b3:  mov    %rax,-0x538(%rbp)
    0.00 :   694ba:  jmp    683ec <__vfscanf_internal+0x5a0c>
         : 7830  ./stdio-common/vfscanf-internal.c:637
    0.00 :   694bf:  movl   $0xa,-0x610(%rbp)
    0.00 :   694c9:  jmp    63e06 <__vfscanf_internal+0x1426>
    0.00 :   694ce:  mov    %r15,%r12
    0.00 :   694d1:  mov    %r10d,%r15d
    0.00 :   694d4:  jmp    64e65 <__vfscanf_internal+0x2485>
         : 7836  ./stdio-common/vfscanf-internal.c:1019 (discriminator 16)
    0.00 :   694d9:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   694e3:  mov    $0xffffffff,%eax
    0.00 :   694e8:  cmove  -0x640(%rbp),%eax
    0.00 :   694ef:  mov    %r15,%r14
    0.00 :   694f2:  mov    %eax,-0x640(%rbp)
    0.00 :   694f8:  jmp    63108 <__vfscanf_internal+0x728>
         : 7843  ./stdio-common/vfscanf-internal.c:2434
    0.00 :   694fd:  mov    -0x5a0(%rbp),%rax
    0.00 :   69504:  lea    0x8(%rax),%rcx
    0.00 :   69508:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   6950f:  jmp    684e2 <__vfscanf_internal+0x5b02>
         : 7848  ./stdio-common/vfscanf-internal.c:2434 (discriminator 2)
    0.00 :   69514:  mov    -0x6c8(%rbp),%rax
    0.00 :   6951b:  mov    -0x68c(%rbp),%edi
    0.00 :   69521:  movdqu (%rax),%xmm7
    0.00 :   69525:  movups %xmm7,-0x540(%rbp)
    0.00 :   6952c:  mov    0x10(%rax),%rax
    0.00 :   69530:  movaps %xmm7,-0x610(%rbp)
    0.00 :   69537:  mov    %rax,-0x530(%rbp)
    0.00 :   6953e:  mov    -0x540(%rbp),%eax
    0.00 :   69544:  sub    $0x1,%edi
    0.00 :   69547:  je     69570 <__vfscanf_internal+0x6b90>
    0.00 :   69549:  mov    -0x538(%rbp),%rcx
    0.00 :   69550:  mov    %eax,%esi
         : 7861  ./stdio-common/vfscanf-internal.c:2434
    0.00 :   69552:  xor    %r11d,%r11d
    0.00 :   69555:  cmp    $0x2f,%esi
    0.00 :   69558:  ja     69597 <__vfscanf_internal+0x6bb7>
    0.00 :   6955a:  add    $0x8,%esi
    0.00 :   6955d:  mov    $0x1,%r11d
    0.00 :   69563:  sub    $0x1,%edi
    0.00 :   69566:  jne    69555 <__vfscanf_internal+0x6b75>
    0.00 :   69568:  mov    %esi,-0x540(%rbp)
    0.00 :   6956e:  mov    %esi,%eax
    0.00 :   69570:  cmp    $0x2f,%eax
    0.00 :   69573:  ja     695b2 <__vfscanf_internal+0x6bd2>
    0.00 :   69575:  mov    %eax,%ecx
    0.00 :   69577:  add    $0x8,%eax
    0.00 :   6957a:  add    -0x530(%rbp),%rcx
    0.00 :   69581:  mov    %eax,-0x540(%rbp)
    0.00 :   69587:  mov    (%rcx),%rax
    0.00 :   6958a:  jmp    684e5 <__vfscanf_internal+0x5b05>
    0.00 :   6958f:  mov    %r15,%r14
    0.00 :   69592:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   69597:  lea    0x8(%rcx),%r10
    0.00 :   6959b:  cmp    $0x1,%edi
    0.00 :   6959e:  jne    28baf <__vfscanf_internal.cold+0x244>
    0.00 :   695a4:  mov    %r10,-0x538(%rbp)
    0.00 :   695ab:  test   %r11b,%r11b
    0.00 :   695ae:  jne    69568 <__vfscanf_internal+0x6b88>
    0.00 :   695b0:  jmp    69570 <__vfscanf_internal+0x6b90>
    0.00 :   695b2:  mov    -0x538(%rbp),%rcx
    0.00 :   695b9:  lea    0x8(%rcx),%rax
    0.00 :   695bd:  mov    %rax,-0x538(%rbp)
    0.00 :   695c4:  jmp    69587 <__vfscanf_internal+0x6ba7>
    0.00 :   695c6:  mov    %r15,%r14
    0.00 :   695c9:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   695ce:  mov    %r15,%r14
    0.00 :   695d1:  jmp    63108 <__vfscanf_internal+0x728>
         : 7896  ./stdio-common/vfscanf-internal.c:2451
    0.00 :   695d6:  mov    -0x5a0(%rbp),%rax
    0.00 :   695dd:  lea    0x8(%rax),%rcx
    0.00 :   695e1:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   695e8:  jmp    66e37 <__vfscanf_internal+0x4457>
         : 7901  ./stdio-common/vfscanf-internal.c:2451 (discriminator 2)
    0.00 :   695ed:  mov    -0x6c8(%rbp),%rax
    0.00 :   695f4:  mov    -0x68c(%rbp),%edi
    0.00 :   695fa:  movdqu (%rax),%xmm7
    0.00 :   695fe:  movups %xmm7,-0x540(%rbp)
    0.00 :   69605:  mov    0x10(%rax),%rax
    0.00 :   69609:  movaps %xmm7,-0x610(%rbp)
    0.00 :   69610:  mov    %rax,-0x530(%rbp)
    0.00 :   69617:  mov    -0x540(%rbp),%eax
    0.00 :   6961d:  sub    $0x1,%edi
    0.00 :   69620:  je     69664 <__vfscanf_internal+0x6c84>
    0.00 :   69622:  mov    -0x538(%rbp),%rcx
    0.00 :   69629:  mov    %eax,%esi
         : 7914  ./stdio-common/vfscanf-internal.c:2451
    0.00 :   6962b:  xor    %r11d,%r11d
    0.00 :   6962e:  cmp    $0x2f,%esi
    0.00 :   69631:  ja     69643 <__vfscanf_internal+0x6c63>
    0.00 :   69633:  add    $0x8,%esi
    0.00 :   69636:  mov    $0x1,%r11d
    0.00 :   6963c:  sub    $0x1,%edi
    0.00 :   6963f:  jne    6962e <__vfscanf_internal+0x6c4e>
    0.00 :   69641:  jmp    6965c <__vfscanf_internal+0x6c7c>
    0.00 :   69643:  lea    0x8(%rcx),%r10
    0.00 :   69647:  cmp    $0x1,%edi
    0.00 :   6964a:  jne    28b1e <__vfscanf_internal.cold+0x1b3>
    0.00 :   69650:  mov    %r10,-0x538(%rbp)
    0.00 :   69657:  test   %r11b,%r11b
    0.00 :   6965a:  je     69664 <__vfscanf_internal+0x6c84>
    0.00 :   6965c:  mov    %esi,-0x540(%rbp)
    0.00 :   69662:  mov    %esi,%eax
    0.00 :   69664:  cmp    $0x2f,%eax
    0.00 :   69667:  ja     6984b <__vfscanf_internal+0x6e6b>
    0.00 :   6966d:  mov    %eax,%ecx
    0.00 :   6966f:  add    $0x8,%eax
    0.00 :   69672:  add    -0x530(%rbp),%rcx
    0.00 :   69679:  mov    %eax,-0x540(%rbp)
    0.00 :   6967f:  mov    (%rcx),%rax
    0.00 :   69682:  jmp    66e3a <__vfscanf_internal+0x445a>
         : 7939  ./stdio-common/vfscanf-internal.c:1312
    0.00 :   69687:  mov    -0x698(%rbp),%rax
    0.00 :   6968e:  lea    0x0(,%rax,8),%rsi
    0.00 :   69696:  call   283b0 <realloc@plt>
         : 7943  ./stdio-common/vfscanf-internal.c:1315
    0.00 :   6969b:  test   %rax,%rax
    0.00 :   6969e:  je     69716 <__vfscanf_internal+0x6d36>
         : 7946  ./stdio-common/vfscanf-internal.c:1345
    0.00 :   696a0:  mov    -0x670(%rbp),%rdi
    0.00 :   696a7:  mov    %rax,(%rdi)
         : 7949  ./stdio-common/vfscanf-internal.c:1347
    0.00 :   696aa:  mov    -0x698(%rbp),%rdi
         : 7951  ./stdio-common/vfscanf-internal.c:1346
    0.00 :   696b1:  add    %rbx,%rax
    0.00 :   696b4:  mov    %rax,-0x6b8(%rbp)
         : 7954  ./stdio-common/vfscanf-internal.c:1347
    0.00 :   696bb:  mov    %rdi,%rax
    0.00 :   696be:  add    %rdi,%rax
    0.00 :   696c1:  mov    %rax,-0x698(%rbp)
    0.00 :   696c8:  jmp    65801 <__vfscanf_internal+0x2e21>
    0.00 :   696cd:  mov    -0x658(%rbp),%rax
    0.00 :   696d4:  mov    0x68(%rax),%rcx
    0.00 :   696d8:  jmp    6328c <__vfscanf_internal+0x8ac>
         : 7962  ./stdio-common/vfscanf-internal.c:1823
    0.00 :   696dd:  movzbl %al,%eax
    0.00 :   696e0:  jmp    65302 <__vfscanf_internal+0x2922>
         : 7965  ./stdio-common/vfscanf-internal.c:2472 (discriminator 16)
    0.00 :   696e5:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   696ef:  mov    $0xffffffff,%eax
    0.00 :   696f4:  cmove  -0x640(%rbp),%eax
    0.00 :   696fb:  mov    %r15,%r14
    0.00 :   696fe:  mov    %eax,-0x640(%rbp)
    0.00 :   69704:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   69709:  mov    %r15,%r14
    0.00 :   6970c:  jmp    63108 <__vfscanf_internal+0x728>
         : 7974  ./stdio-common/vfscanf-internal.c:3052
    0.00 :   69711:  call   136550 <__stack_chk_fail>
         : 7976  ./stdio-common/vfscanf-internal.c:1318
    0.00 :   69716:  mov    -0x670(%rbp),%rax
    0.00 :   6971d:  lea    0x4(%rbx),%rsi
         : 7979  ./stdio-common/vfscanf-internal.c:1319
    0.00 :   69721:  addq   $0x1,-0x698(%rbp)
         : 7981  ./stdio-common/vfscanf-internal.c:1318
    0.00 :   69729:  mov    (%rax),%rdi
    0.00 :   6972c:  call   283b0 <realloc@plt>
         : 7984  ./stdio-common/vfscanf-internal.c:1321
    0.00 :   69731:  test   %rax,%rax
    0.00 :   69734:  je     69813 <__vfscanf_internal+0x6e33>
         : 7987  ./stdio-common/vfscanf-internal.c:1338
    0.00 :   6973a:  mov    -0x670(%rbp),%rsi
    0.00 :   69741:  mov    %rax,(%rsi)
         : 7990  ./stdio-common/vfscanf-internal.c:1339
    0.00 :   69744:  add    %rbx,%rax
    0.00 :   69747:  mov    %rax,-0x6b8(%rbp)
         : 7993  ./stdio-common/vfscanf-internal.c:1340
    0.00 :   6974e:  jmp    65801 <__vfscanf_internal+0x2e21>
         : 7995  ./stdio-common/vfscanf-internal.c:2458 (discriminator 2)
    0.00 :   69753:  mov    -0x6c8(%rbp),%rax
    0.00 :   6975a:  mov    -0x68c(%rbp),%edi
    0.00 :   69760:  movdqu (%rax),%xmm5
    0.00 :   69764:  movups %xmm5,-0x540(%rbp)
    0.00 :   6976b:  mov    0x10(%rax),%rax
    0.00 :   6976f:  movaps %xmm5,-0x610(%rbp)
    0.00 :   69776:  mov    %rax,-0x530(%rbp)
    0.00 :   6977d:  mov    -0x540(%rbp),%eax
    0.00 :   69783:  sub    $0x1,%edi
    0.00 :   69786:  je     697d1 <__vfscanf_internal+0x6df1>
    0.00 :   69788:  mov    -0x538(%rbp),%rcx
    0.00 :   6978f:  mov    %eax,%esi
         : 8008  ./stdio-common/vfscanf-internal.c:2458
    0.00 :   69791:  xor    %r11d,%r11d
    0.00 :   69794:  cmp    $0x2f,%esi
    0.00 :   69797:  ja     697b0 <__vfscanf_internal+0x6dd0>
    0.00 :   69799:  add    $0x8,%esi
    0.00 :   6979c:  mov    $0x1,%r11d
    0.00 :   697a2:  sub    $0x1,%edi
    0.00 :   697a5:  jne    69794 <__vfscanf_internal+0x6db4>
    0.00 :   697a7:  jmp    697c9 <__vfscanf_internal+0x6de9>
    0.00 :   697a9:  nopl   0x0(%rax)
    0.00 :   697b0:  lea    0x8(%rcx),%r10
    0.00 :   697b4:  cmp    $0x1,%edi
    0.00 :   697b7:  jne    28b3b <__vfscanf_internal.cold+0x1d0>
    0.00 :   697bd:  mov    %r10,-0x538(%rbp)
    0.00 :   697c4:  test   %r11b,%r11b
    0.00 :   697c7:  je     697d1 <__vfscanf_internal+0x6df1>
    0.00 :   697c9:  mov    %esi,-0x540(%rbp)
    0.00 :   697cf:  mov    %esi,%eax
    0.00 :   697d1:  cmp    $0x2f,%eax
    0.00 :   697d4:  ja     69862 <__vfscanf_internal+0x6e82>
    0.00 :   697da:  mov    %eax,%ecx
    0.00 :   697dc:  add    $0x8,%eax
    0.00 :   697df:  add    -0x530(%rbp),%rcx
    0.00 :   697e6:  mov    %eax,-0x540(%rbp)
    0.00 :   697ec:  mov    (%rcx),%rax
    0.00 :   697ef:  jmp    67f10 <__vfscanf_internal+0x5530>
    0.00 :   697f4:  mov    -0x5a0(%rbp),%rax
    0.00 :   697fb:  lea    0x8(%rax),%rcx
    0.00 :   697ff:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   69806:  jmp    67f0d <__vfscanf_internal+0x552d>
    0.00 :   6980b:  mov    %r15,%r14
    0.00 :   6980e:  jmp    63108 <__vfscanf_internal+0x728>
         : 8040  ./stdio-common/vfscanf-internal.c:1323
    0.00 :   69813:  mov    %r15,%r14
    0.00 :   69816:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   69820:  jne    69879 <__vfscanf_internal+0x6e99>
         : 8044  ./stdio-common/vfscanf-internal.c:1331
    0.00 :   69822:  mov    -0x670(%rbp),%rax
         : 8046  ./stdio-common/vfscanf-internal.c:1333
    0.00 :   69829:  addl   $0x1,-0x640(%rbp)
         : 8048  ./stdio-common/vfscanf-internal.c:1332
    0.00 :   69830:  movq   $0x0,-0x670(%rbp)
         : 8050  ./stdio-common/vfscanf-internal.c:1331
    0.00 :   6983b:  mov    (%rax),%rax
    0.00 :   6983e:  movl   $0x0,-0x4(%rax,%rbx,1)
         : 8053  ./stdio-common/vfscanf-internal.c:1334
    0.00 :   69846:  jmp    63108 <__vfscanf_internal+0x728>
         : 8055  ./stdio-common/vfscanf-internal.c:2451
    0.00 :   6984b:  mov    -0x538(%rbp),%rcx
    0.00 :   69852:  lea    0x8(%rcx),%rax
    0.00 :   69856:  mov    %rax,-0x538(%rbp)
    0.00 :   6985d:  jmp    6967f <__vfscanf_internal+0x6c9f>
         : 8060  ./stdio-common/vfscanf-internal.c:2458
    0.00 :   69862:  mov    -0x538(%rbp),%rcx
    0.00 :   69869:  lea    0x8(%rcx),%rax
    0.00 :   6986d:  mov    %rax,-0x538(%rbp)
    0.00 :   69874:  jmp    697ec <__vfscanf_internal+0x6e0c>
         : 8065  ./stdio-common/vfscanf-internal.c:1325
    0.00 :   69879:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   69883:  jmp    63108 <__vfscanf_internal+0x728>
         : 8068  ./stdio-common/vfscanf-internal.c:1898
    0.00 :   69888:  mov    -0x538(%rbp),%rcx
    0.00 :   6988f:  lea    0x8(%rcx),%rax
    0.00 :   69893:  mov    %rax,-0x538(%rbp)
    0.00 :   6989a:  jmp    687b5 <__vfscanf_internal+0x5dd5>
         : 8073  ./stdio-common/vfscanf-internal.c:2003 (discriminator 1)
    0.00 :   6989f:  mov    %r15,%rdi
    0.00 :   698a2:  call   8da40 <__uflow>
    0.00 :   698a7:  mov    %eax,%r13d
    0.00 :   698aa:  cmp    $0xffffffff,%eax
    0.00 :   698ad:  jne    689ce <__vfscanf_internal+0x5fee>
    0.00 :   698b3:  mov    %r15,%r14
    0.00 :   698b6:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   698bb:  mov    %r15,%r14
    0.00 :   698be:  jmp    63108 <__vfscanf_internal+0x728>
         : 8083  ./stdio-common/vfscanf-internal.c:2001
    0.00 :   698c3:  movsbl %al,%esi
         : 8085  char_buffer_add():
         : 8086  ./stdio-common/vfscanf-internal.c:261
    0.00 :   698c6:  lea    -0x470(%rbp),%rdi
    0.00 :   698cd:  call   62970 <char_buffer_add_slow>
    0.00 :   698d2:  jmp    689a4 <__vfscanf_internal+0x5fc4>
    0.00 :   698d7:  mov    %r15,%r14
    0.00 :   698da:  jmp    63108 <__vfscanf_internal+0x728>
         : 8092  __vfscanf_internal():
         : 8093  ./stdio-common/vfscanf-internal.c:1996 (discriminator 1)
    0.00 :   698df:  mov    %r15,%rdi
    0.00 :   698e2:  call   8da40 <__uflow>
    0.00 :   698e7:  cmp    $0xffffffff,%eax
    0.00 :   698ea:  jne    68956 <__vfscanf_internal+0x5f76>
    0.00 :   698f0:  mov    %r15,%r14
    0.00 :   698f3:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   698f8:  mov    %r15,%r14
    0.00 :   698fb:  jmp    63108 <__vfscanf_internal+0x728>
         : 8102  ./stdio-common/vfscanf-internal.c:1994
    0.00 :   69900:  movsbl %al,%esi
         : 8104  char_buffer_add():
         : 8105  ./stdio-common/vfscanf-internal.c:261
    0.00 :   69903:  lea    -0x470(%rbp),%rdi
    0.00 :   6990a:  call   62970 <char_buffer_add_slow>
    0.00 :   6990f:  jmp    6892f <__vfscanf_internal+0x5f4f>
    0.00 :   69914:  mov    %r15,%r14
    0.00 :   69917:  jmp    63108 <__vfscanf_internal+0x728>
         : 8111  __vfscanf_internal():
         : 8112  ./stdio-common/vfscanf-internal.c:1989 (discriminator 1)
    0.00 :   6991c:  mov    %r15,%rdi
    0.00 :   6991f:  call   8da40 <__uflow>
    0.00 :   69924:  cmp    $0xffffffff,%eax
    0.00 :   69927:  jne    688e1 <__vfscanf_internal+0x5f01>
    0.00 :   6992d:  mov    %r15,%r14
    0.00 :   69930:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   69935:  mov    %r15,%r14
    0.00 :   69938:  jmp    63108 <__vfscanf_internal+0x728>
         : 8121  ./stdio-common/vfscanf-internal.c:1987
    0.00 :   6993d:  movsbl %al,%esi
         : 8123  char_buffer_add():
         : 8124  ./stdio-common/vfscanf-internal.c:261
    0.00 :   69940:  lea    -0x470(%rbp),%rdi
    0.00 :   69947:  call   62970 <char_buffer_add_slow>
    0.00 :   6994c:  jmp    688ba <__vfscanf_internal+0x5eda>
    0.00 :   69951:  mov    %r15,%r14
    0.00 :   69954:  jmp    63108 <__vfscanf_internal+0x728>
         : 8130  __vfscanf_internal():
         : 8131  ./stdio-common/vfscanf-internal.c:1982 (discriminator 1)
    0.00 :   69959:  mov    %r15,%rdi
    0.00 :   6995c:  call   8da40 <__uflow>
    0.00 :   69961:  cmp    $0xffffffff,%eax
    0.00 :   69964:  jne    6998b <__vfscanf_internal+0x6fab>
    0.00 :   69966:  mov    %r15,%r14
    0.00 :   69969:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6996e:  mov    %r15,%r14
    0.00 :   69971:  jmp    63108 <__vfscanf_internal+0x728>
         : 8140  ./stdio-common/vfscanf-internal.c:1980
    0.00 :   69976:  movsbl %r13b,%esi
         : 8142  char_buffer_add():
         : 8143  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6997a:  lea    -0x470(%rbp),%rdi
    0.00 :   69981:  call   62970 <char_buffer_add_slow>
    0.00 :   69986:  jmp    68845 <__vfscanf_internal+0x5e65>
         : 8147  __vfscanf_internal():
         : 8148  ./stdio-common/vfscanf-internal.c:1983
    0.00 :   6998b:  movzbl %al,%edx
    0.00 :   6998e:  jmp    6886f <__vfscanf_internal+0x5e8f>
         : 8151  ./stdio-common/vfscanf-internal.c:864 (discriminator 16)
    0.00 :   69993:  testl  $0x2000,-0x63c(%rbp)
    0.00 :   6999d:  mov    $0xffffffff,%eax
    0.00 :   699a2:  cmove  -0x640(%rbp),%eax
    0.00 :   699a9:  mov    %r15,%r14
    0.00 :   699ac:  mov    %eax,-0x640(%rbp)
    0.00 :   699b2:  jmp    63108 <__vfscanf_internal+0x728>
         : 8158  char_buffer_add_slow():
         : 8159  ./stdio-common/vfscanf-internal.c:243
    0.00 :   699b7:  pxor   %xmm0,%xmm0
    0.00 :   699bb:  movaps %xmm0,-0x470(%rbp)
         : 8162  ./stdio-common/vfscanf-internal.c:245
    0.00 :   699c2:  jmp    63ee6 <__vfscanf_internal+0x1506>
         : 8164  __vfscanf_internal():
         : 8165  ./stdio-common/vfscanf-internal.c:2008
    0.00 :   699c7:  movsbl %r13b,%esi
         : 8167  char_buffer_add():
         : 8168  ./stdio-common/vfscanf-internal.c:261
    0.00 :   699cb:  lea    -0x470(%rbp),%rdi
    0.00 :   699d2:  call   62970 <char_buffer_add_slow>
    0.00 :   699d7:  jmp    63c4e <__vfscanf_internal+0x126e>
         : 8172  char_buffer_add_slow():
         : 8173  ./stdio-common/vfscanf-internal.c:243
    0.00 :   699dc:  pxor   %xmm0,%xmm0
    0.00 :   699e0:  mov    %r15,%r14
    0.00 :   699e3:  movaps %xmm0,-0x470(%rbp)
         : 8177  ./stdio-common/vfscanf-internal.c:245
    0.00 :   699ea:  jmp    67e9e <__vfscanf_internal+0x54be>
         : 8179  __vfscanf_internal():
         : 8180  ./stdio-common/vfscanf-internal.c:2412
    0.00 :   699ef:  movzbl -0x668(%rbp),%edx
    0.00 :   699f6:  add    $0x2,%edx
    0.00 :   699f9:  movsbq %dl,%rdx
    0.00 :   699fd:  cmp    %rax,%rdx
    0.00 :   69a00:  jne    66b49 <__vfscanf_internal+0x4169>
    0.00 :   69a06:  mov    %r15,%r14
    0.00 :   69a09:  jmp    63108 <__vfscanf_internal+0x728>
         : 8188  ./stdio-common/vfscanf-internal.c:2177
    0.00 :   69a0e:  cmpl   $0x0,-0x650(%rbp)
    0.00 :   69a15:  jne    6a257 <__vfscanf_internal+0x7877>
         : 8191  char_buffer_size():
         : 8192  ./stdio-common/vfscanf-internal.c:214
    0.00 :   69a1b:  sub    %rdx,%rax
         : 8194  __vfscanf_internal():
         : 8195  ./stdio-common/vfscanf-internal.c:2179
    0.00 :   69a1e:  cmp    -0x620(%rbp),%rax
    0.00 :   69a25:  je     69a31 <__vfscanf_internal+0x7051>
    0.00 :   69a27:  test   $0x1,%r14b
    0.00 :   69a2b:  je     66b49 <__vfscanf_internal+0x4169>
         : 8200  ./stdio-common/vfscanf-internal.c:2180
    0.00 :   69a31:  lea    0x16edea(%rip),%rdi        # 1d8822 <not_available+0x2c4>
    0.00 :   69a38:  call   12a560 <wctrans>
    0.00 :   69a3d:  mov    %rax,-0x668(%rbp)
    0.00 :   69a44:  test   %rax,%rax
    0.00 :   69a47:  je     69b38 <__vfscanf_internal+0x7158>
         : 8206  ./stdio-common/vfscanf-internal.c:2183
    0.00 :   69a4d:  cmp    $0xffffffff,%r13d
    0.00 :   69a51:  je     6a1c2 <__vfscanf_internal+0x77e2>
         : 8209  ./stdio-common/vfscanf-internal.c:2183 (discriminator 2)
    0.00 :   69a57:  mov    0x8(%r15),%rax
    0.00 :   69a5b:  cmp    0x10(%r15),%rax
    0.00 :   69a5f:  jae    6a22d <__vfscanf_internal+0x784d>
         : 8213  ./stdio-common/vfscanf-internal.c:2183 (discriminator 4)
    0.00 :   69a65:  lea    0x1(%rax),%rdx
    0.00 :   69a69:  mov    %rdx,0x8(%r15)
    0.00 :   69a6d:  movzbl (%rax),%r13d
         : 8217  ./stdio-common/vfscanf-internal.c:2183 (discriminator 7)
    0.00 :   69a71:  add    $0x1,%r12
         : 8219  ./stdio-common/vfscanf-internal.c:2191
    0.00 :   69a75:  mov    -0x668(%rbp),%rsi
    0.00 :   69a7c:  mov    $0x2e,%edi
         : 8222  ./stdio-common/vfscanf-internal.c:2205
    0.00 :   69a81:  lea    -0x5b0(%rbp),%rbx
         : 8224  ./stdio-common/vfscanf-internal.c:2191
    0.00 :   69a88:  call   12a5f0 <__towctrans>
         : 8226  ./stdio-common/vfscanf-internal.c:2208
    0.00 :   69a8d:  mov    %rbx,%rdx
         : 8228  ./stdio-common/vfscanf-internal.c:2205
    0.00 :   69a90:  movq   $0x0,-0x5b0(%rbp)
         : 8230  ./stdio-common/vfscanf-internal.c:2191
    0.00 :   69a9b:  mov    %eax,-0x564(%rbp)
    0.00 :   69aa1:  mov    %eax,%esi
         : 8233  char_buffer_size():
         : 8234  ./stdio-common/vfscanf-internal.c:214
    0.00 :   69aa3:  mov    -0x470(%rbp),%rax
    0.00 :   69aaa:  sub    -0x460(%rbp),%rax
         : 8237  __vfscanf_internal():
         : 8238  ./stdio-common/vfscanf-internal.c:2207
    0.00 :   69ab1:  cmp    -0x620(%rbp),%rax
         : 8240  ./stdio-common/vfscanf-internal.c:2208
    0.00 :   69ab8:  lea    -0x485(%rbp),%rax
    0.00 :   69abf:  mov    %rax,%rdi
         : 8243  ./stdio-common/vfscanf-internal.c:2207
    0.00 :   69ac2:  sete   -0x630(%rbp)
         : 8245  ./stdio-common/vfscanf-internal.c:2208
    0.00 :   69ac9:  mov    %rax,-0x648(%rbp)
    0.00 :   69ad0:  call   c61e0 <wcrtomb>
         : 8248  ./stdio-common/vfscanf-internal.c:2209
    0.00 :   69ad5:  cmp    $0xffffffffffffffff,%rax
    0.00 :   69ad9:  je     6a1d8 <__vfscanf_internal+0x77f8>
         : 8251  ./stdio-common/vfscanf-internal.c:2213
    0.00 :   69adf:  mov    -0x6d8(%rbp),%rdi
         : 8253  ./stdio-common/vfscanf-internal.c:2211
    0.00 :   69ae6:  movb   $0x0,-0x485(%rbp,%rax,1)
         : 8255  ./stdio-common/vfscanf-internal.c:2213
    0.00 :   69aee:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   69af3:  mov    -0x620(%rbp),%rdi
         : 8258  char_buffer_size():
         : 8259  ./stdio-common/vfscanf-internal.c:214
    0.00 :   69afa:  mov    -0x470(%rbp),%rsi
    0.00 :   69b01:  sub    -0x460(%rbp),%rsi
         : 8262  __vfscanf_internal():
         : 8263  ./stdio-common/vfscanf-internal.c:2213
    0.00 :   69b08:  lea    (%rax,%rdi,1),%rdx
         : 8265  ./stdio-common/vfscanf-internal.c:2214
    0.00 :   69b0c:  xor    %eax,%eax
    0.00 :   69b0e:  cmp    %rsi,%rdx
    0.00 :   69b11:  jne    69b2e <__vfscanf_internal+0x714e>
         : 8269  ./stdio-common/vfscanf-internal.c:2214 (discriminator 1)
    0.00 :   69b13:  mov    -0x648(%rbp),%rsi
    0.00 :   69b1a:  mov    -0x6d8(%rbp),%rdi
    0.00 :   69b21:  call   28690 <*ABS*+0xa82e0@plt>
    0.00 :   69b26:  test   %eax,%eax
    0.00 :   69b28:  sete   %al
    0.00 :   69b2b:  movzbl %al,%eax
         : 8276  ./stdio-common/vfscanf-internal.c:2212 (discriminator 6)
    0.00 :   69b2e:  or     -0x630(%rbp),%eax
         : 8278  ./stdio-common/vfscanf-internal.c:2231
    0.00 :   69b34:  test   %al,%al
    0.00 :   69b36:  jne    69b68 <__vfscanf_internal+0x7188>
    0.00 :   69b38:  mov    -0x470(%rbp),%rsi
         : 8282  ./stdio-common/vfscanf-internal.c:2402
    0.00 :   69b3f:  test   %rsi,%rsi
    0.00 :   69b42:  jne    69d9b <__vfscanf_internal+0x73bb>
         : 8285  ./stdio-common/vfscanf-internal.c:2404
    0.00 :   69b48:  mov    0x1b02c1(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   69b4f:  mov    %r15,%r14
    0.00 :   69b52:  movl   $0xc,%fs:(%rax)
         : 8289  ./stdio-common/vfscanf-internal.c:2405
    0.00 :   69b59:  movl   $0xffffffff,-0x640(%rbp)
         : 8291  ./stdio-common/vfscanf-internal.c:2406
    0.00 :   69b63:  jmp    63108 <__vfscanf_internal+0x728>
         : 8293  ./stdio-common/vfscanf-internal.c:2121
    0.00 :   69b68:  movzbl -0x688(%rbp),%eax
    0.00 :   69b6f:  xor    %r10d,%r10d
    0.00 :   69b72:  mov    %al,-0x648(%rbp)
    0.00 :   69b78:  lea    -0x540(%rbp),%rax
    0.00 :   69b7f:  mov    %rax,-0x630(%rbp)
    0.00 :   69b86:  lea    -0x590(%rbp),%rax
    0.00 :   69b8d:  mov    %rax,-0x650(%rbp)
         : 8301  ./stdio-common/vfscanf-internal.c:2260
    0.00 :   69b94:  lea    -0x496(%rbp),%rax
    0.00 :   69b9b:  mov    %rax,-0x6e8(%rbp)
    0.00 :   69ba2:  imul   $0x11,%r10,%r11
    0.00 :   69ba6:  add    -0x630(%rbp),%r11
    0.00 :   69bad:  mov    %r10d,-0x6a0(%rbp)
         : 8307  ./stdio-common/vfscanf-internal.c:2239
    0.00 :   69bb4:  mov    %r11,-0x6f8(%rbp)
    0.00 :   69bbb:  cmp    $0xa,%r10
    0.00 :   69bbf:  je     69dba <__vfscanf_internal+0x73da>
         : 8311  ./stdio-common/vfscanf-internal.c:2240
    0.00 :   69bc5:  mov    -0x668(%rbp),%rsi
    0.00 :   69bcc:  lea    0x30(%r10),%edi
    0.00 :   69bd0:  mov    %r10,-0x6f0(%rbp)
    0.00 :   69bd7:  call   12a5f0 <__towctrans>
    0.00 :   69bdc:  mov    -0x6f0(%rbp),%r10
         : 8317  ./stdio-common/vfscanf-internal.c:2248
    0.00 :   69be3:  movq   $0x0,(%rbx)
         : 8319  ./stdio-common/vfscanf-internal.c:2250
    0.00 :   69bea:  mov    %rbx,%rdx
         : 8321  ./stdio-common/vfscanf-internal.c:2240
    0.00 :   69bed:  mov    %eax,%esi
    0.00 :   69bef:  mov    -0x650(%rbp),%rax
         : 8324  ./stdio-common/vfscanf-internal.c:2250
    0.00 :   69bf6:  mov    -0x6f8(%rbp),%rdi
         : 8326  ./stdio-common/vfscanf-internal.c:2240
    0.00 :   69bfd:  mov    %esi,(%rax,%r10,4)
         : 8328  ./stdio-common/vfscanf-internal.c:2250
    0.00 :   69c01:  call   c61e0 <wcrtomb>
         : 8330  ./stdio-common/vfscanf-internal.c:2252
    0.00 :   69c06:  mov    -0x6f0(%rbp),%r10
    0.00 :   69c0d:  cmp    $0xffffffffffffffff,%rax
    0.00 :   69c11:  je     69b38 <__vfscanf_internal+0x7158>
         : 8334  ./stdio-common/vfscanf-internal.c:2271
    0.00 :   69c17:  movslq -0x6a0(%rbp),%rdx
    0.00 :   69c1e:  imul   $0x11,%rdx,%rdx
    0.00 :   69c22:  lea    -0x30(%rdx),%rdi
    0.00 :   69c26:  lea    (%rdi,%rbp,1),%rdx
    0.00 :   69c2a:  movb   $0x0,-0x510(%rax,%rdx,1)
         : 8340  ./stdio-common/vfscanf-internal.c:2237 (discriminator 2)
    0.00 :   69c32:  add    $0x1,%r10
    0.00 :   69c36:  cmp    $0xb,%r10
    0.00 :   69c3a:  jne    69ba2 <__vfscanf_internal+0x71c2>
         : 8344  ./stdio-common/vfscanf-internal.c:2291
    0.00 :   69c40:  movsbl -0x610(%rbp),%eax
    0.00 :   69c47:  mov    %eax,-0x6f0(%rbp)
         : 8347  char_buffer_error():
         : 8348  ./stdio-common/vfscanf-internal.c:231
    0.00 :   69c4d:  mov    -0x470(%rbp),%rsi
         : 8350  __vfscanf_internal():
         : 8351  ./stdio-common/vfscanf-internal.c:2279
    0.00 :   69c54:  test   %rsi,%rsi
    0.00 :   69c57:  je     6a169 <__vfscanf_internal+0x7789>
         : 8354  ./stdio-common/vfscanf-internal.c:2285
    0.00 :   69c5d:  cmpb   $0x0,-0x660(%rbp)
    0.00 :   69c64:  je     6a103 <__vfscanf_internal+0x7723>
         : 8357  ./stdio-common/vfscanf-internal.c:2285 (discriminator 1)
    0.00 :   69c6a:  movzbl -0x610(%rbp),%eax
    0.00 :   69c71:  cmp    %al,-0x1(%rsi)
    0.00 :   69c74:  je     6a0d6 <__vfscanf_internal+0x76f6>
    0.00 :   69c7a:  mov    -0x638(%rbp),%esi
    0.00 :   69c80:  mov    $0x7fffffff,%eax
    0.00 :   69c85:  mov    %r15,%rcx
    0.00 :   69c88:  mov    -0x630(%rbp),%r10
    0.00 :   69c8f:  mov    %r14b,-0x668(%rbp)
    0.00 :   69c96:  mov    %r12,%r14
    0.00 :   69c99:  test   %esi,%esi
    0.00 :   69c9b:  mov    %r10,%rbx
    0.00 :   69c9e:  cmovg  %esi,%eax
    0.00 :   69ca1:  xor    %edx,%edx
    0.00 :   69ca3:  mov    %edx,-0x648(%rbp)
    0.00 :   69ca9:  mov    %eax,-0x6a0(%rbp)
         : 8373  ./stdio-common/vfscanf-internal.c:2323
    0.00 :   69caf:  sub    %rbx,%r14
    0.00 :   69cb2:  mov    %rbx,-0x650(%rbp)
         : 8376  ./stdio-common/vfscanf-internal.c:2322
    0.00 :   69cb9:  mov    %rbx,%r15
    0.00 :   69cbc:  mov    -0x6a0(%rbp),%r12d
    0.00 :   69cc3:  mov    %r14,-0x6e8(%rbp)
    0.00 :   69cca:  mov    %rcx,%rbx
    0.00 :   69ccd:  jmp    69cdf <__vfscanf_internal+0x72ff>
         : 8382  ./stdio-common/vfscanf-internal.c:2330 (discriminator 5)
    0.00 :   69ccf:  lea    0x1(%rax),%rdx
    0.00 :   69cd3:  mov    %rdx,0x8(%rbx)
    0.00 :   69cd7:  movzbl (%rax),%r13d
         : 8386  ./stdio-common/vfscanf-internal.c:2332 (discriminator 8)
    0.00 :   69cdb:  sub    $0x1,%r12d
    0.00 :   69cdf:  mov    -0x6e8(%rbp),%rax
    0.00 :   69ce6:  lea    (%r15,%rax,1),%r14
         : 8390  ./stdio-common/vfscanf-internal.c:2325
    0.00 :   69cea:  movzbl (%r15),%eax
    0.00 :   69cee:  cmp    %r13d,%eax
    0.00 :   69cf1:  jne    6a0c7 <__vfscanf_internal+0x76e7>
         : 8394  ./stdio-common/vfscanf-internal.c:2326
    0.00 :   69cf7:  add    $0x1,%r15
    0.00 :   69cfb:  cmpb   $0x0,(%r15)
    0.00 :   69cff:  je     69f79 <__vfscanf_internal+0x7599>
         : 8398  ./stdio-common/vfscanf-internal.c:2330
    0.00 :   69d05:  test   %r12d,%r12d
    0.00 :   69d08:  je     69f43 <__vfscanf_internal+0x7563>
         : 8401  ./stdio-common/vfscanf-internal.c:2330 (discriminator 3)
    0.00 :   69d0e:  mov    0x8(%rbx),%rax
    0.00 :   69d12:  cmp    0x10(%rbx),%rax
    0.00 :   69d16:  jb     69ccf <__vfscanf_internal+0x72ef>
         : 8405  ./stdio-common/vfscanf-internal.c:2330 (discriminator 4)
    0.00 :   69d18:  mov    %rbx,%rdi
    0.00 :   69d1b:  call   8da40 <__uflow>
    0.00 :   69d20:  mov    %eax,%r13d
    0.00 :   69d23:  cmp    $0xffffffff,%eax
    0.00 :   69d26:  jne    69cdb <__vfscanf_internal+0x72fb>
         : 8411  ./stdio-common/vfscanf-internal.c:2330 (discriminator 9)
    0.00 :   69d28:  mov    0x1b00e1(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   69d2f:  mov    %rbx,%rcx
    0.00 :   69d32:  mov    -0x650(%rbp),%rbx
    0.00 :   69d39:  mov    %fs:(%rax),%eax
    0.00 :   69d3c:  mov    %eax,-0x600(%rbp)
         : 8417  ./stdio-common/vfscanf-internal.c:2334
    0.00 :   69d42:  cmpb   $0x0,(%r15)
    0.00 :   69d46:  je     69ea4 <__vfscanf_internal+0x74c4>
         : 8420  ./stdio-common/vfscanf-internal.c:2369
    0.00 :   69d4c:  cmp    %rbx,%r15
    0.00 :   69d4f:  ja     69e65 <__vfscanf_internal+0x7485>
         : 8423  ./stdio-common/vfscanf-internal.c:2299 (discriminator 2)
    0.00 :   69d55:  addl   $0x1,-0x648(%rbp)
    0.00 :   69d5c:  mov    -0x648(%rbp),%eax
    0.00 :   69d62:  add    $0x11,%rbx
    0.00 :   69d66:  cmp    $0xc,%eax
    0.00 :   69d69:  jne    69caf <__vfscanf_internal+0x72cf>
    0.00 :   69d6f:  mov    %r14,%r12
    0.00 :   69d72:  mov    %rcx,%r15
         : 8431  ./stdio-common/vfscanf-internal.c:2383
    0.00 :   69d75:  cmp    $0xffffffff,%r13d
    0.00 :   69d79:  je     69b38 <__vfscanf_internal+0x7158>
         : 8434  ./stdio-common/vfscanf-internal.c:2383 (discriminator 2)
    0.00 :   69d7f:  movzbl %r13b,%esi
    0.00 :   69d83:  mov    %r15,%rdi
    0.00 :   69d86:  sub    $0x1,%r12
    0.00 :   69d8a:  call   8e7b0 <_IO_sputbackc>
    0.00 :   69d8f:  mov    -0x470(%rbp),%rsi
    0.00 :   69d96:  jmp    69b3f <__vfscanf_internal+0x715f>
         : 8441  char_buffer_size():
         : 8442  ./stdio-common/vfscanf-internal.c:214
    0.00 :   69d9b:  mov    %rsi,%rax
    0.00 :   69d9e:  sub    -0x460(%rbp),%rax
         : 8445  __vfscanf_internal():
         : 8446  ./stdio-common/vfscanf-internal.c:2412
    0.00 :   69da5:  cmp    -0x620(%rbp),%rax
    0.00 :   69dac:  jne    66b49 <__vfscanf_internal+0x4169>
    0.00 :   69db2:  mov    %r15,%r14
    0.00 :   69db5:  jmp    63108 <__vfscanf_internal+0x728>
         : 8451  ./stdio-common/vfscanf-internal.c:2243
    0.00 :   69dba:  mov    -0x668(%rbp),%rsi
    0.00 :   69dc1:  mov    $0x2c,%edi
    0.00 :   69dc6:  mov    %r10,-0x6f0(%rbp)
    0.00 :   69dcd:  call   12a5f0 <__towctrans>
         : 8456  ./stdio-common/vfscanf-internal.c:2248
    0.00 :   69dd2:  movq   $0x0,(%rbx)
         : 8458  ./stdio-common/vfscanf-internal.c:2250
    0.00 :   69dd9:  mov    -0x6f8(%rbp),%rdi
    0.00 :   69de0:  mov    %rbx,%rdx
         : 8461  ./stdio-common/vfscanf-internal.c:2244
    0.00 :   69de3:  test   %eax,%eax
         : 8463  ./stdio-common/vfscanf-internal.c:2243
    0.00 :   69de5:  mov    %eax,-0x568(%rbp)
         : 8465  ./stdio-common/vfscanf-internal.c:2244
    0.00 :   69deb:  setne  %al
    0.00 :   69dee:  and    %al,-0x648(%rbp)
         : 8468  ./stdio-common/vfscanf-internal.c:2250
    0.00 :   69df4:  mov    -0x650(%rbp),%rax
    0.00 :   69dfb:  mov    0x28(%rax),%esi
    0.00 :   69dfe:  call   c61e0 <wcrtomb>
         : 8472  ./stdio-common/vfscanf-internal.c:2252
    0.00 :   69e03:  mov    -0x6f0(%rbp),%r10
    0.00 :   69e0a:  cmp    $0xffffffffffffffff,%rax
    0.00 :   69e0e:  jne    69c17 <__vfscanf_internal+0x7237>
         : 8476  ./stdio-common/vfscanf-internal.c:2256
    0.00 :   69e14:  cmpb   $0x0,-0x648(%rbp)
    0.00 :   69e1b:  je     69c32 <__vfscanf_internal+0x7252>
         : 8479  ./stdio-common/vfscanf-internal.c:2258
    0.00 :   69e21:  mov    -0x680(%rbp),%rdi
    0.00 :   69e28:  mov    %r10,-0x6a0(%rbp)
    0.00 :   69e2f:  call   28490 <*ABS*+0xa86a0@plt>
         : 8483  ./stdio-common/vfscanf-internal.c:2259
    0.00 :   69e34:  mov    -0x6a0(%rbp),%r10
    0.00 :   69e3b:  cmp    $0x10,%rax
    0.00 :   69e3f:  jbe    69e4d <__vfscanf_internal+0x746d>
    0.00 :   69e41:  movb   $0x0,-0x648(%rbp)
    0.00 :   69e48:  jmp    69c32 <__vfscanf_internal+0x7252>
         : 8489  ./stdio-common/vfscanf-internal.c:2260
    0.00 :   69e4d:  mov    -0x6e8(%rbp),%rdi
    0.00 :   69e54:  mov    -0x680(%rbp),%rsi
    0.00 :   69e5b:  lea    0x1(%rax),%ecx
    0.00 :   69e5e:  rep movsb %ds:(%rsi),%es:(%rdi)
    0.00 :   69e60:  jmp    69c32 <__vfscanf_internal+0x7252>
         : 8495  ./stdio-common/vfscanf-internal.c:2371
    0.00 :   69e65:  cmp    $0xffffffff,%r13d
    0.00 :   69e69:  jne    69f56 <__vfscanf_internal+0x7576>
    0.00 :   69e6f:  mov    %r15,%r12
    0.00 :   69e72:  mov    %rcx,%r13
    0.00 :   69e75:  jmp    69e84 <__vfscanf_internal+0x74a4>
         : 8501  ./stdio-common/vfscanf-internal.c:2373
    0.00 :   69e77:  movzbl (%r12),%esi
    0.00 :   69e7c:  mov    %r13,%rdi
    0.00 :   69e7f:  call   8e7b0 <_IO_sputbackc>
         : 8505  ./stdio-common/vfscanf-internal.c:2372
    0.00 :   69e84:  sub    $0x1,%r12
    0.00 :   69e88:  cmp    %r12,%rbx
    0.00 :   69e8b:  jne    69e77 <__vfscanf_internal+0x7497>
    0.00 :   69e8d:  mov    %r14,%rdx
    0.00 :   69e90:  mov    %r13,%rcx
         : 8511  ./stdio-common/vfscanf-internal.c:2374
    0.00 :   69e93:  movzbl (%rbx),%r13d
    0.00 :   69e97:  sub    %r15,%rdx
    0.00 :   69e9a:  lea    0x1(%rdx,%rbx,1),%r14
    0.00 :   69e9f:  jmp    69d55 <__vfscanf_internal+0x7375>
    0.00 :   69ea4:  mov    %r12d,%ebx
    0.00 :   69ea7:  mov    -0x648(%rbp),%edx
    0.00 :   69ead:  mov    %r14,%r12
    0.00 :   69eb0:  mov    %rcx,%r15
    0.00 :   69eb3:  movzbl -0x668(%rbp),%r14d
         : 8521  ./stdio-common/vfscanf-internal.c:2336
    0.00 :   69ebb:  mov    -0x638(%rbp),%eax
    0.00 :   69ec1:  test   %eax,%eax
    0.00 :   69ec3:  cmovle %eax,%ebx
    0.00 :   69ec6:  mov    %ebx,-0x638(%rbp)
         : 8526  ./stdio-common/vfscanf-internal.c:2339
    0.00 :   69ecc:  cmp    $0x9,%edx
    0.00 :   69ecf:  jg     69fec <__vfscanf_internal+0x760c>
         : 8529  char_buffer_add():
         : 8530  ./stdio-common/vfscanf-internal.c:260
    0.00 :   69ed5:  mov    -0x470(%rbp),%rax
         : 8532  __vfscanf_internal():
         : 8533  ./stdio-common/vfscanf-internal.c:2340
    0.00 :   69edc:  add    $0x30,%edx
         : 8535  char_buffer_add():
         : 8536  ./stdio-common/vfscanf-internal.c:260
    0.00 :   69edf:  cmp    -0x468(%rbp),%rax
    0.00 :   69ee6:  je     69fd8 <__vfscanf_internal+0x75f8>
         : 8539  ./stdio-common/vfscanf-internal.c:263
    0.00 :   69eec:  lea    0x1(%rax),%rcx
    0.00 :   69ef0:  mov    %rcx,-0x470(%rbp)
    0.00 :   69ef7:  mov    %dl,(%rax)
         : 8543  __vfscanf_internal():
         : 8544  ./stdio-common/vfscanf-internal.c:2388
    0.00 :   69ef9:  cmpl   $0x0,-0x638(%rbp)
    0.00 :   69f00:  je     69b38 <__vfscanf_internal+0x7158>
         : 8547  ./stdio-common/vfscanf-internal.c:2388 (discriminator 1)
    0.00 :   69f06:  cmp    $0xffffffff,%r13d
    0.00 :   69f0a:  je     69fbb <__vfscanf_internal+0x75db>
         : 8550  ./stdio-common/vfscanf-internal.c:2388 (discriminator 3)
    0.00 :   69f10:  mov    0x8(%r15),%rax
    0.00 :   69f14:  cmp    0x10(%r15),%rax
    0.00 :   69f18:  jae    69f95 <__vfscanf_internal+0x75b5>
         : 8554  ./stdio-common/vfscanf-internal.c:2388 (discriminator 5)
    0.00 :   69f1a:  lea    0x1(%rax),%rdx
    0.00 :   69f1e:  mov    %rdx,0x8(%r15)
    0.00 :   69f22:  movzbl (%rax),%r13d
         : 8558  ./stdio-common/vfscanf-internal.c:2388 (discriminator 8)
    0.00 :   69f26:  add    $0x1,%r12
         : 8560  ./stdio-common/vfscanf-internal.c:2391 (discriminator 8)
    0.00 :   69f2a:  cmpl   $0x0,-0x638(%rbp)
    0.00 :   69f31:  jle    69c4d <__vfscanf_internal+0x726d>
         : 8563  ./stdio-common/vfscanf-internal.c:2392
    0.00 :   69f37:  subl   $0x1,-0x638(%rbp)
    0.00 :   69f3e:  jmp    69c4d <__vfscanf_internal+0x726d>
         : 8566  ./stdio-common/vfscanf-internal.c:2369
    0.00 :   69f43:  mov    %rbx,%rcx
    0.00 :   69f46:  mov    -0x650(%rbp),%rbx
    0.00 :   69f4d:  cmp    %r15,%rbx
    0.00 :   69f50:  jae    69d55 <__vfscanf_internal+0x7375>
         : 8571  ./stdio-common/vfscanf-internal.c:2371 (discriminator 2)
    0.00 :   69f56:  mov    %rcx,%rdi
    0.00 :   69f59:  movzbl %r13b,%esi
    0.00 :   69f5d:  mov    %rcx,-0x650(%rbp)
    0.00 :   69f64:  sub    $0x1,%r14
    0.00 :   69f68:  call   8e7b0 <_IO_sputbackc>
    0.00 :   69f6d:  mov    -0x650(%rbp),%rcx
    0.00 :   69f74:  jmp    69e6f <__vfscanf_internal+0x748f>
    0.00 :   69f79:  mov    %rbx,%r15
    0.00 :   69f7c:  mov    -0x648(%rbp),%edx
    0.00 :   69f82:  mov    %r12d,%ebx
    0.00 :   69f85:  mov    %r14,%r12
    0.00 :   69f88:  movzbl -0x668(%rbp),%r14d
    0.00 :   69f90:  jmp    69ebb <__vfscanf_internal+0x74db>
         : 8585  ./stdio-common/vfscanf-internal.c:2388 (discriminator 4)
    0.00 :   69f95:  mov    %r15,%rdi
    0.00 :   69f98:  call   8da40 <__uflow>
    0.00 :   69f9d:  mov    %eax,%r13d
    0.00 :   69fa0:  cmp    $0xffffffff,%eax
    0.00 :   69fa3:  jne    69f26 <__vfscanf_internal+0x7546>
         : 8591  ./stdio-common/vfscanf-internal.c:2388 (discriminator 9)
    0.00 :   69fa5:  mov    0x1afe64(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   69fac:  mov    %fs:(%r10),%eax
    0.00 :   69fb0:  mov    %eax,-0x600(%rbp)
    0.00 :   69fb6:  jmp    69b38 <__vfscanf_internal+0x7158>
         : 8596  ./stdio-common/vfscanf-internal.c:2388 (discriminator 2)
    0.00 :   69fbb:  mov    0x1afe4e(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   69fc2:  mov    -0x600(%rbp),%eax
    0.00 :   69fc8:  mov    %eax,%fs:(%r10)
    0.00 :   69fcc:  mov    -0x470(%rbp),%rsi
         : 8601  ./stdio-common/vfscanf-internal.c:2397 (discriminator 2)
    0.00 :   69fd3:  jmp    69b3f <__vfscanf_internal+0x715f>
         : 8603  ./stdio-common/vfscanf-internal.c:2340
    0.00 :   69fd8:  movzbl %dl,%esi
         : 8605  char_buffer_add():
         : 8606  ./stdio-common/vfscanf-internal.c:261
    0.00 :   69fdb:  lea    -0x470(%rbp),%rdi
    0.00 :   69fe2:  call   62970 <char_buffer_add_slow>
    0.00 :   69fe7:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8610  __vfscanf_internal():
         : 8611  ./stdio-common/vfscanf-internal.c:2341
    0.00 :   69fec:  cmp    $0xb,%edx
    0.00 :   69fef:  jne    69ff7 <__vfscanf_internal+0x7617>
    0.00 :   69ff1:  test   $0x1,%r14b
    0.00 :   69ff5:  je     6a069 <__vfscanf_internal+0x7689>
         : 8616  ./stdio-common/vfscanf-internal.c:2352 (discriminator 1)
    0.00 :   69ff7:  mov    %r14d,%eax
    0.00 :   69ffa:  xor    $0x1,%eax
    0.00 :   69ffd:  test   %al,-0x688(%rbp)
    0.00 :   6a003:  je     69d75 <__vfscanf_internal+0x7395>
    0.00 :   6a009:  cmp    $0xa,%edx
    0.00 :   6a00c:  jne    69d75 <__vfscanf_internal+0x7395>
         : 8623  char_buffer_add():
         : 8624  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a012:  lea    -0x470(%rbp),%rdx
    0.00 :   6a019:  mov    %r15,-0x648(%rbp)
         : 8627  __vfscanf_internal():
         : 8628  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a020:  mov    -0x680(%rbp),%rbx
         : 8630  char_buffer_add():
         : 8631  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a027:  mov    %r12,%r15
    0.00 :   6a02a:  mov    %rdx,%r12
    0.00 :   6a02d:  jmp    6a051 <__vfscanf_internal+0x7671>
         : 8635  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6a02f:  mov    -0x470(%rbp),%rax
    0.00 :   6a036:  cmp    -0x468(%rbp),%rax
    0.00 :   6a03d:  je     6a0ac <__vfscanf_internal+0x76cc>
         : 8639  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6a03f:  lea    0x1(%rax),%rcx
    0.00 :   6a043:  mov    %rcx,-0x470(%rbp)
    0.00 :   6a04a:  mov    %r14b,(%rax)
         : 8643  __vfscanf_internal():
         : 8644  ./stdio-common/vfscanf-internal.c:2356
    0.00 :   6a04d:  add    $0x1,%rbx
         : 8646  ./stdio-common/vfscanf-internal.c:2355 (discriminator 1)
    0.00 :   6a051:  movzbl (%rbx),%r14d
    0.00 :   6a055:  test   %r14b,%r14b
    0.00 :   6a058:  jne    6a02f <__vfscanf_internal+0x764f>
    0.00 :   6a05a:  mov    %r15,%r12
    0.00 :   6a05d:  mov    -0x648(%rbp),%r15
    0.00 :   6a064:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8653  ./stdio-common/vfscanf-internal.c:359
    0.00 :   6a069:  mov    -0x6d8(%rbp),%rbx
         : 8655  char_buffer_add():
         : 8656  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a070:  lea    -0x470(%rbp),%r14
    0.00 :   6a077:  jmp    6a09a <__vfscanf_internal+0x76ba>
         : 8659  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6a079:  mov    -0x470(%rbp),%rdx
    0.00 :   6a080:  cmp    -0x468(%rbp),%rdx
    0.00 :   6a087:  je     6a0ba <__vfscanf_internal+0x76da>
         : 8663  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6a089:  lea    0x1(%rdx),%rcx
    0.00 :   6a08d:  mov    %rcx,-0x470(%rbp)
    0.00 :   6a094:  mov    %al,(%rdx)
         : 8667  __vfscanf_internal():
         : 8668  ./stdio-common/vfscanf-internal.c:2345
    0.00 :   6a096:  add    $0x1,%rbx
         : 8670  ./stdio-common/vfscanf-internal.c:2344 (discriminator 1)
    0.00 :   6a09a:  movzbl (%rbx),%eax
    0.00 :   6a09d:  test   %al,%al
    0.00 :   6a09f:  jne    6a079 <__vfscanf_internal+0x7699>
         : 8674  ./stdio-common/vfscanf-internal.c:2349
    0.00 :   6a0a1:  mov    $0x1,%r14d
    0.00 :   6a0a7:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8677  ./stdio-common/vfscanf-internal.c:2357
    0.00 :   6a0ac:  movsbl %r14b,%esi
         : 8679  char_buffer_add():
         : 8680  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a0b0:  mov    %r12,%rdi
    0.00 :   6a0b3:  call   62970 <char_buffer_add_slow>
    0.00 :   6a0b8:  jmp    6a04d <__vfscanf_internal+0x766d>
         : 8684  __vfscanf_internal():
         : 8685  ./stdio-common/vfscanf-internal.c:2346
    0.00 :   6a0ba:  movsbl %al,%esi
         : 8687  char_buffer_add():
         : 8688  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a0bd:  mov    %r14,%rdi
    0.00 :   6a0c0:  call   62970 <char_buffer_add_slow>
    0.00 :   6a0c5:  jmp    6a096 <__vfscanf_internal+0x76b6>
    0.00 :   6a0c7:  mov    %rbx,%rcx
    0.00 :   6a0ca:  mov    -0x650(%rbp),%rbx
    0.00 :   6a0d1:  jmp    69d42 <__vfscanf_internal+0x7362>
         : 8695  __vfscanf_internal():
         : 8696  ./stdio-common/vfscanf-internal.c:2286
    0.00 :   6a0d6:  lea    -0x2b(%r13),%eax
    0.00 :   6a0da:  and    $0xfffffffd,%eax
    0.00 :   6a0dd:  jne    69c7a <__vfscanf_internal+0x729a>
         : 8700  char_buffer_add():
         : 8701  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6a0e3:  cmp    %rsi,-0x468(%rbp)
    0.00 :   6a0ea:  je     6a189 <__vfscanf_internal+0x77a9>
         : 8704  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6a0f0:  lea    0x1(%rsi),%rax
    0.00 :   6a0f4:  mov    %rax,-0x470(%rbp)
    0.00 :   6a0fb:  mov    %r13b,(%rsi)
    0.00 :   6a0fe:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8709  char_buffer_size():
         : 8710  ./stdio-common/vfscanf-internal.c:214
    0.00 :   6a103:  mov    %rsi,%rax
    0.00 :   6a106:  sub    -0x460(%rbp),%rax
         : 8713  __vfscanf_internal():
         : 8714  ./stdio-common/vfscanf-internal.c:2288
    0.00 :   6a10d:  cmp    -0x620(%rbp),%rax
    0.00 :   6a114:  jbe    69c7a <__vfscanf_internal+0x729a>
         : 8717  ./stdio-common/vfscanf-internal.c:2289 (discriminator 2)
    0.00 :   6a11a:  mov    -0x658(%rbp),%rdi
    0.00 :   6a121:  movzbl %r13b,%eax
    0.00 :   6a125:  mov    0x70(%rdi),%rdx
    0.00 :   6a129:  movzbl -0x610(%rbp),%edi
    0.00 :   6a130:  cmp    (%rdx,%rax,4),%dil
    0.00 :   6a134:  jne    69c7a <__vfscanf_internal+0x729a>
         : 8724  char_buffer_add():
         : 8725  ./stdio-common/vfscanf-internal.c:260
    0.00 :   6a13a:  cmp    %rsi,-0x468(%rbp)
    0.00 :   6a141:  je     6a19e <__vfscanf_internal+0x77be>
         : 8728  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6a143:  lea    0x1(%rsi),%rax
         : 8730  __vfscanf_internal():
         : 8731  ./stdio-common/vfscanf-internal.c:2292
    0.00 :   6a147:  movb   $0x1,-0x660(%rbp)
    0.00 :   6a14e:  mov    $0x1,%r14d
         : 8734  char_buffer_add():
         : 8735  ./stdio-common/vfscanf-internal.c:263
    0.00 :   6a154:  mov    %rax,-0x470(%rbp)
    0.00 :   6a15b:  movzbl -0x610(%rbp),%eax
    0.00 :   6a162:  mov    %al,(%rsi)
    0.00 :   6a164:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8740  __vfscanf_internal():
         : 8741  ./stdio-common/vfscanf-internal.c:2281
    0.00 :   6a169:  mov    0x1afca0(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6a170:  mov    %r15,%r14
    0.00 :   6a173:  movl   $0xc,%fs:(%rax)
         : 8745  ./stdio-common/vfscanf-internal.c:2282
    0.00 :   6a17a:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   6a184:  jmp    63108 <__vfscanf_internal+0x728>
         : 8748  ./stdio-common/vfscanf-internal.c:2287
    0.00 :   6a189:  movsbl %r13b,%esi
         : 8750  char_buffer_add():
         : 8751  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a18d:  lea    -0x470(%rbp),%rdi
    0.00 :   6a194:  call   62970 <char_buffer_add_slow>
    0.00 :   6a199:  jmp    69ef9 <__vfscanf_internal+0x7519>
    0.00 :   6a19e:  mov    -0x6f0(%rbp),%esi
    0.00 :   6a1a4:  lea    -0x470(%rbp),%rdi
         : 8757  __vfscanf_internal():
         : 8758  ./stdio-common/vfscanf-internal.c:2292
    0.00 :   6a1ab:  mov    $0x1,%r14d
         : 8760  char_buffer_add():
         : 8761  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a1b1:  call   62970 <char_buffer_add_slow>
         : 8763  __vfscanf_internal():
         : 8764  ./stdio-common/vfscanf-internal.c:2292
    0.00 :   6a1b6:  movb   $0x1,-0x660(%rbp)
         : 8766  char_buffer_add():
         : 8767  ./stdio-common/vfscanf-internal.c:2292
    0.00 :   6a1bd:  jmp    69ef9 <__vfscanf_internal+0x7519>
         : 8769  __vfscanf_internal():
         : 8770  ./stdio-common/vfscanf-internal.c:2183 (discriminator 1)
    0.00 :   6a1c2:  mov    0x1afc47(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6a1c9:  mov    -0x600(%rbp),%eax
    0.00 :   6a1cf:  mov    %eax,%fs:(%r10)
    0.00 :   6a1d3:  jmp    69a75 <__vfscanf_internal+0x7095>
         : 8775  ./stdio-common/vfscanf-internal.c:2218
    0.00 :   6a1d8:  mov    -0x6d8(%rbp),%rdi
    0.00 :   6a1df:  call   28490 <*ABS*+0xa86a0@plt>
         : 8778  char_buffer_size():
         : 8779  ./stdio-common/vfscanf-internal.c:214
    0.00 :   6a1e4:  mov    -0x470(%rbp),%rsi
         : 8781  __vfscanf_internal():
         : 8782  ./stdio-common/vfscanf-internal.c:2218
    0.00 :   6a1eb:  mov    %rax,%rdx
         : 8784  ./stdio-common/vfscanf-internal.c:2221
    0.00 :   6a1ee:  cmp    $0x10,%rax
    0.00 :   6a1f2:  ja     69b3f <__vfscanf_internal+0x715f>
         : 8787  ./stdio-common/vfscanf-internal.c:2224
    0.00 :   6a1f8:  mov    -0x620(%rbp),%rax
         : 8789  char_buffer_size():
         : 8790  ./stdio-common/vfscanf-internal.c:214
    0.00 :   6a1ff:  sub    -0x460(%rbp),%rsi
         : 8792  __vfscanf_internal():
         : 8793  ./stdio-common/vfscanf-internal.c:2225
    0.00 :   6a206:  lea    0x1(%rdx),%ecx
    0.00 :   6a209:  mov    -0x648(%rbp),%rdi
         : 8796  ./stdio-common/vfscanf-internal.c:2224
    0.00 :   6a210:  add    %rdx,%rax
    0.00 :   6a213:  cmp    %rax,%rsi
         : 8799  ./stdio-common/vfscanf-internal.c:2225
    0.00 :   6a216:  mov    -0x6d8(%rbp),%rsi
    0.00 :   6a21d:  rep movsb %ds:(%rsi),%es:(%rdi)
         : 8802  ./stdio-common/vfscanf-internal.c:2224
    0.00 :   6a21f:  sete   %al
    0.00 :   6a222:  or     -0x630(%rbp),%eax
         : 8805  ./stdio-common/vfscanf-internal.c:2225
    0.00 :   6a228:  jmp    69b34 <__vfscanf_internal+0x7154>
         : 8807  ./stdio-common/vfscanf-internal.c:2183 (discriminator 3)
    0.00 :   6a22d:  mov    %r15,%rdi
    0.00 :   6a230:  call   8da40 <__uflow>
    0.00 :   6a235:  mov    %eax,%r13d
    0.00 :   6a238:  cmp    $0xffffffff,%eax
    0.00 :   6a23b:  jne    69a71 <__vfscanf_internal+0x7091>
         : 8813  ./stdio-common/vfscanf-internal.c:2183 (discriminator 8)
    0.00 :   6a241:  mov    0x1afbc8(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6a248:  mov    %fs:(%r10),%eax
    0.00 :   6a24c:  mov    %eax,-0x600(%rbp)
    0.00 :   6a252:  jmp    69a75 <__vfscanf_internal+0x7095>
         : 8818  char_buffer_size():
         : 8819  ./stdio-common/vfscanf-internal.c:214
    0.00 :   6a257:  sub    -0x460(%rbp),%rax
         : 8821  __vfscanf_internal():
         : 8822  ./stdio-common/vfscanf-internal.c:2412
    0.00 :   6a25e:  cmp    -0x620(%rbp),%rax
    0.00 :   6a265:  jne    699ef <__vfscanf_internal+0x700f>
    0.00 :   6a26b:  mov    %r15,%r14
    0.00 :   6a26e:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6a273:  mov    %r15,%r14
    0.00 :   6a276:  jmp    63108 <__vfscanf_internal+0x728>
         : 8829  char_buffer_add_slow():
         : 8830  ./stdio-common/vfscanf-internal.c:243
    0.00 :   6a27b:  pxor   %xmm0,%xmm0
    0.00 :   6a27f:  movaps %xmm0,-0x470(%rbp)
         : 8833  ./stdio-common/vfscanf-internal.c:245
    0.00 :   6a286:  jmp    66d77 <__vfscanf_internal+0x4397>
    0.00 :   6a28b:  mov    -0x470(%rbp),%rsi
    0.00 :   6a292:  jmp    64f0b <__vfscanf_internal+0x252b>
         : 8837  __vfscanf_internal():
         : 8838  ./stdio-common/vfscanf-internal.c:1933
    0.00 :   6a297:  movzbl %al,%eax
    0.00 :   6a29a:  jmp    63ae0 <__vfscanf_internal+0x1100>
    0.00 :   6a29f:  mov    %r15,%r14
    0.00 :   6a2a2:  jmp    63108 <__vfscanf_internal+0x728>
         : 8843  ./stdio-common/vfscanf-internal.c:1019
    0.00 :   6a2a7:  mov    -0x538(%rbp),%rdx
    0.00 :   6a2ae:  lea    0x8(%rdx),%rax
    0.00 :   6a2b2:  mov    %rax,-0x538(%rbp)
    0.00 :   6a2b9:  jmp    68e6c <__vfscanf_internal+0x648c>
         : 8848  ./stdio-common/vfscanf-internal.c:2057
    0.00 :   6a2be:  movsbl %r13b,%esi
         : 8850  char_buffer_add():
         : 8851  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a2c2:  lea    -0x470(%rbp),%rdi
         : 8853  __vfscanf_internal():
         : 8854  ./stdio-common/vfscanf-internal.c:2058
    0.00 :   6a2c9:  mov    $0x1,%r12d
         : 8856  char_buffer_add():
         : 8857  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a2cf:  call   62970 <char_buffer_add_slow>
    0.00 :   6a2d4:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 8860  __vfscanf_internal():
         : 8861  ./stdio-common/vfscanf-internal.c:2062
    0.00 :   6a2d9:  movsbl %r13b,%esi
         : 8863  char_buffer_add():
         : 8864  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a2dd:  lea    -0x470(%rbp),%rdi
    0.00 :   6a2e4:  call   62970 <char_buffer_add_slow>
    0.00 :   6a2e9:  jmp    66ac3 <__vfscanf_internal+0x40e3>
         : 8868  __vfscanf_internal():
         : 8869  ./stdio-common/vfscanf-internal.c:665
    0.00 :   6a2ee:  mov    -0x5a0(%rbp),%rax
    0.00 :   6a2f5:  lea    0x8(%rax),%rdx
    0.00 :   6a2f9:  mov    %rdx,-0x5a0(%rbp)
    0.00 :   6a300:  jmp    67ae4 <__vfscanf_internal+0x5104>
         : 8874  ./stdio-common/vfscanf-internal.c:665 (discriminator 2)
    0.00 :   6a305:  mov    -0x6c8(%rbp),%rax
    0.00 :   6a30c:  mov    -0x68c(%rbp),%edx
    0.00 :   6a312:  movdqu (%rax),%xmm6
    0.00 :   6a316:  movups %xmm6,-0x540(%rbp)
    0.00 :   6a31d:  mov    0x10(%rax),%rax
    0.00 :   6a321:  movaps %xmm6,-0x610(%rbp)
    0.00 :   6a328:  mov    %rax,-0x530(%rbp)
    0.00 :   6a32f:  mov    -0x540(%rbp),%eax
    0.00 :   6a335:  sub    $0x1,%edx
    0.00 :   6a338:  je     6a381 <__vfscanf_internal+0x79a1>
    0.00 :   6a33a:  mov    -0x538(%rbp),%rcx
    0.00 :   6a341:  mov    %eax,%esi
         : 8887  ./stdio-common/vfscanf-internal.c:665
    0.00 :   6a343:  xor    %r10d,%r10d
    0.00 :   6a346:  cmp    $0x2f,%esi
    0.00 :   6a349:  ja     6a360 <__vfscanf_internal+0x7980>
    0.00 :   6a34b:  add    $0x8,%esi
    0.00 :   6a34e:  mov    $0x1,%r10d
    0.00 :   6a354:  sub    $0x1,%edx
    0.00 :   6a357:  jne    6a346 <__vfscanf_internal+0x7966>
    0.00 :   6a359:  jmp    6a379 <__vfscanf_internal+0x7999>
    0.00 :   6a35b:  nopl   0x0(%rax,%rax,1)
    0.00 :   6a360:  lea    0x8(%rcx),%rdi
    0.00 :   6a364:  cmp    $0x1,%edx
    0.00 :   6a367:  jne    289fc <__vfscanf_internal.cold+0x91>
    0.00 :   6a36d:  mov    %rdi,-0x538(%rbp)
    0.00 :   6a374:  test   %r10b,%r10b
    0.00 :   6a377:  je     6a381 <__vfscanf_internal+0x79a1>
    0.00 :   6a379:  mov    %esi,-0x540(%rbp)
    0.00 :   6a37f:  mov    %esi,%eax
    0.00 :   6a381:  cmp    $0x2f,%eax
    0.00 :   6a384:  ja     6a5b9 <__vfscanf_internal+0x7bd9>
    0.00 :   6a38a:  mov    %eax,%edx
    0.00 :   6a38c:  add    $0x8,%eax
    0.00 :   6a38f:  add    -0x530(%rbp),%rdx
    0.00 :   6a396:  mov    %eax,-0x540(%rbp)
    0.00 :   6a39c:  mov    (%rdx),%rax
    0.00 :   6a39f:  jmp    67ae7 <__vfscanf_internal+0x5107>
         : 8913  ./stdio-common/vfscanf-internal.c:2030
    0.00 :   6a3a4:  movb   $0x70,-0x610(%rbp)
    0.00 :   6a3ab:  mov    -0x470(%rbp),%rsi
         : 8916  ./stdio-common/vfscanf-internal.c:1918
    0.00 :   6a3b2:  xor    %edx,%edx
    0.00 :   6a3b4:  jmp    6691b <__vfscanf_internal+0x3f3b>
         : 8919  ./stdio-common/vfscanf-internal.c:2444
    0.00 :   6a3b9:  mov    -0x5a0(%rbp),%rax
    0.00 :   6a3c0:  lea    0x8(%rax),%rcx
    0.00 :   6a3c4:  mov    %rcx,-0x5a0(%rbp)
    0.00 :   6a3cb:  jmp    63d1b <__vfscanf_internal+0x133b>
         : 8924  ./stdio-common/vfscanf-internal.c:2444 (discriminator 2)
    0.00 :   6a3d0:  mov    -0x6c8(%rbp),%rax
    0.00 :   6a3d7:  mov    -0x68c(%rbp),%edi
    0.00 :   6a3dd:  movdqu (%rax),%xmm5
    0.00 :   6a3e1:  movups %xmm5,-0x540(%rbp)
    0.00 :   6a3e8:  mov    0x10(%rax),%rax
    0.00 :   6a3ec:  movaps %xmm5,-0x610(%rbp)
    0.00 :   6a3f3:  mov    %rax,-0x530(%rbp)
    0.00 :   6a3fa:  mov    -0x540(%rbp),%eax
    0.00 :   6a400:  sub    $0x1,%edi
    0.00 :   6a403:  je     6a447 <__vfscanf_internal+0x7a67>
    0.00 :   6a405:  mov    -0x538(%rbp),%rcx
    0.00 :   6a40c:  mov    %eax,%esi
         : 8937  ./stdio-common/vfscanf-internal.c:2444
    0.00 :   6a40e:  xor    %r11d,%r11d
    0.00 :   6a411:  cmp    $0x2f,%esi
    0.00 :   6a414:  ja     6a426 <__vfscanf_internal+0x7a46>
    0.00 :   6a416:  add    $0x8,%esi
    0.00 :   6a419:  mov    $0x1,%r11d
    0.00 :   6a41f:  sub    $0x1,%edi
    0.00 :   6a422:  jne    6a411 <__vfscanf_internal+0x7a31>
    0.00 :   6a424:  jmp    6a43f <__vfscanf_internal+0x7a5f>
    0.00 :   6a426:  lea    0x8(%rcx),%r10
    0.00 :   6a42a:  cmp    $0x1,%edi
    0.00 :   6a42d:  jne    28a70 <__vfscanf_internal.cold+0x105>
    0.00 :   6a433:  mov    %r10,-0x538(%rbp)
    0.00 :   6a43a:  test   %r11b,%r11b
    0.00 :   6a43d:  je     6a447 <__vfscanf_internal+0x7a67>
    0.00 :   6a43f:  mov    %esi,-0x540(%rbp)
    0.00 :   6a445:  mov    %esi,%eax
    0.00 :   6a447:  cmp    $0x2f,%eax
    0.00 :   6a44a:  ja     6a473 <__vfscanf_internal+0x7a93>
    0.00 :   6a44c:  mov    %eax,%ecx
    0.00 :   6a44e:  add    $0x8,%eax
    0.00 :   6a451:  add    -0x530(%rbp),%rcx
    0.00 :   6a458:  mov    %eax,-0x540(%rbp)
    0.00 :   6a45e:  mov    (%rcx),%rax
         : 8961  char_buffer_start():
         : 8962  ./stdio-common/vfscanf-internal.c:206
    0.00 :   6a461:  mov    %rbx,%rsi
    0.00 :   6a464:  jmp    63d1e <__vfscanf_internal+0x133e>
         : 8965  __vfscanf_internal():
         : 8966  ./stdio-common/vfscanf-internal.c:206
    0.00 :   6a469:  fstp   %st(0)
    0.00 :   6a46b:  mov    %r15,%r14
    0.00 :   6a46e:  jmp    63108 <__vfscanf_internal+0x728>
         : 8970  ./stdio-common/vfscanf-internal.c:2444
    0.00 :   6a473:  mov    -0x538(%rbp),%rcx
    0.00 :   6a47a:  lea    0x8(%rcx),%rax
    0.00 :   6a47e:  mov    %rax,-0x538(%rbp)
    0.00 :   6a485:  jmp    6a45e <__vfscanf_internal+0x7a7e>
         : 8975  ./stdio-common/vfscanf-internal.c:942
    0.00 :   6a487:  mov    -0x670(%rbp),%rbx
    0.00 :   6a48e:  lea    0x4(%r12),%rsi
         : 8978  ./stdio-common/vfscanf-internal.c:943
    0.00 :   6a493:  addq   $0x1,-0x698(%rbp)
         : 8980  ./stdio-common/vfscanf-internal.c:942
    0.00 :   6a49b:  mov    (%rbx),%rdi
    0.00 :   6a49e:  call   283b0 <realloc@plt>
         : 8983  ./stdio-common/vfscanf-internal.c:945
    0.00 :   6a4a3:  test   %rax,%rax
    0.00 :   6a4a6:  je     6a57d <__vfscanf_internal+0x7b9d>
         : 8986  ./stdio-common/vfscanf-internal.c:953
    0.00 :   6a4ac:  mov    %rax,(%rbx)
         : 8988  ./stdio-common/vfscanf-internal.c:954
    0.00 :   6a4af:  add    %r12,%rax
    0.00 :   6a4b2:  mov    %rax,-0x6b8(%rbp)
         : 8991  ./stdio-common/vfscanf-internal.c:955
    0.00 :   6a4b9:  jmp    63799 <__vfscanf_internal+0xdb9>
         : 8993  ./stdio-common/vfscanf-internal.c:2472 (discriminator 24)
    0.00 :   6a4be:  mov    -0x6c8(%rbp),%rax
    0.00 :   6a4c5:  mov    -0x68c(%rbp),%esi
    0.00 :   6a4cb:  movdqu (%rax),%xmm5
    0.00 :   6a4cf:  movups %xmm5,-0x540(%rbp)
    0.00 :   6a4d6:  mov    0x10(%rax),%rax
    0.00 :   6a4da:  movaps %xmm5,-0x630(%rbp)
    0.00 :   6a4e1:  mov    %rax,-0x530(%rbp)
    0.00 :   6a4e8:  mov    -0x540(%rbp),%eax
    0.00 :   6a4ee:  sub    $0x1,%esi
    0.00 :   6a4f1:  je     6a535 <__vfscanf_internal+0x7b55>
    0.00 :   6a4f3:  mov    -0x538(%rbp),%rdx
    0.00 :   6a4fa:  mov    %eax,%ecx
         : 9006  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   6a4fc:  xor    %r10d,%r10d
    0.00 :   6a4ff:  cmp    $0x2f,%ecx
    0.00 :   6a502:  ja     6a514 <__vfscanf_internal+0x7b34>
    0.00 :   6a504:  add    $0x8,%ecx
    0.00 :   6a507:  mov    $0x1,%r10d
    0.00 :   6a50d:  sub    $0x1,%esi
    0.00 :   6a510:  jne    6a4ff <__vfscanf_internal+0x7b1f>
    0.00 :   6a512:  jmp    6a52d <__vfscanf_internal+0x7b4d>
    0.00 :   6a514:  lea    0x8(%rdx),%rdi
    0.00 :   6a518:  cmp    $0x1,%esi
    0.00 :   6a51b:  jne    28aaa <__vfscanf_internal.cold+0x13f>
    0.00 :   6a521:  mov    %rdi,-0x538(%rbp)
    0.00 :   6a528:  test   %r10b,%r10b
    0.00 :   6a52b:  je     6a535 <__vfscanf_internal+0x7b55>
    0.00 :   6a52d:  mov    %ecx,-0x540(%rbp)
    0.00 :   6a533:  mov    %ecx,%eax
    0.00 :   6a535:  cmp    $0x2f,%eax
    0.00 :   6a538:  ja     6a5e5 <__vfscanf_internal+0x7c05>
    0.00 :   6a53e:  mov    %eax,%edx
    0.00 :   6a540:  add    $0x8,%eax
    0.00 :   6a543:  add    -0x530(%rbp),%rdx
    0.00 :   6a54a:  mov    %eax,-0x540(%rbp)
    0.00 :   6a550:  mov    (%rdx),%rax
    0.00 :   6a553:  mov    %rax,-0x6c0(%rbp)
    0.00 :   6a55a:  jmp    687f8 <__vfscanf_internal+0x5e18>
         : 9032  ./stdio-common/vfscanf-internal.c:2034 (discriminator 1)
    0.00 :   6a55f:  mov    0x1af8aa(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6a566:  mov    -0x600(%rbp),%eax
    0.00 :   6a56c:  mov    %eax,%fs:(%r10)
    0.00 :   6a570:  jmp    686d4 <__vfscanf_internal+0x5cf4>
         : 9037  ./stdio-common/vfscanf-internal.c:1975
    0.00 :   6a575:  movzbl %al,%eax
    0.00 :   6a578:  jmp    68753 <__vfscanf_internal+0x5d73>
         : 9040  ./stdio-common/vfscanf-internal.c:948
    0.00 :   6a57d:  movl   $0xffffffff,-0x640(%rbp)
    0.00 :   6a587:  mov    %r15,%r14
    0.00 :   6a58a:  jmp    63108 <__vfscanf_internal+0x728>
         : 9044  ./stdio-common/vfscanf-internal.c:2034 (discriminator 4)
    0.00 :   6a58f:  mov    %r15,%rdi
    0.00 :   6a592:  call   8da40 <__uflow>
    0.00 :   6a597:  mov    %eax,%r13d
    0.00 :   6a59a:  cmp    $0xffffffff,%eax
    0.00 :   6a59d:  jne    686d0 <__vfscanf_internal+0x5cf0>
         : 9050  ./stdio-common/vfscanf-internal.c:2034 (discriminator 9)
    0.00 :   6a5a3:  mov    0x1af866(%rip),%r10        # 219e10 <_DYNAMIC+0x250>
    0.00 :   6a5aa:  mov    %fs:(%r10),%eax
    0.00 :   6a5ae:  mov    %eax,-0x600(%rbp)
    0.00 :   6a5b4:  jmp    686d4 <__vfscanf_internal+0x5cf4>
         : 9055  ./stdio-common/vfscanf-internal.c:665
    0.00 :   6a5b9:  mov    -0x538(%rbp),%rdx
    0.00 :   6a5c0:  lea    0x8(%rdx),%rax
    0.00 :   6a5c4:  mov    %rax,-0x538(%rbp)
    0.00 :   6a5cb:  jmp    6a39c <__vfscanf_internal+0x79bc>
         : 9060  ./stdio-common/vfscanf-internal.c:2027
    0.00 :   6a5d0:  movsbl %r13b,%esi
         : 9062  char_buffer_add():
         : 9063  ./stdio-common/vfscanf-internal.c:261
    0.00 :   6a5d4:  lea    -0x470(%rbp),%rdi
    0.00 :   6a5db:  call   62970 <char_buffer_add_slow>
    0.00 :   6a5e0:  jmp    6869b <__vfscanf_internal+0x5cbb>
         : 9067  __vfscanf_internal():
         : 9068  ./stdio-common/vfscanf-internal.c:2472
    0.00 :   6a5e5:  mov    -0x538(%rbp),%rdx
    0.00 :   6a5ec:  lea    0x8(%rdx),%rax
    0.00 :   6a5f0:  mov    %rax,-0x538(%rbp)
    0.00 :   6a5f7:  jmp    6a550 <__vfscanf_internal+0x7b70>
         : 9073  ./stdio-common/vfscanf-internal.c:740
    0.00 :   6a5fc:  mov    %r12,%r14
    0.00 :   6a5ff:  jmp    62c3e <__vfscanf_internal+0x25e>
         : 9076  ./stdio-common/vfscanf-internal.c:659
    0.00 :   6a604:  mov    -0x538(%rbp),%rdx
    0.00 :   6a60b:  lea    0x8(%rdx),%rax
    0.00 :   6a60f:  mov    %rax,-0x538(%rbp)
    0.00 :   6a616:  jmp    67d35 <__vfscanf_internal+0x5355>
         : 9081  ./stdio-common/vfscanf-internal.c:1775
    0.00 :   6a61b:  mov    %r14d,-0x638(%rbp)
    0.00 :   6a622:  mov    %r13,%r14
    0.00 :   6a625:  mov    %r15d,%r13d
    0.00 :   6a628:  mov    %r12,%r15
    0.00 :   6a62b:  mov    %rdx,%r12
    0.00 :   6a62e:  cmp    %rdx,-0x680(%rbp)
    0.00 :   6a635:  jae    64056 <__vfscanf_internal+0x1676>
         : 9089  ./stdio-common/vfscanf-internal.c:1777
    0.00 :   6a63b:  mov    %rdx,%rax
    0.00 :   6a63e:  sub    -0x680(%rbp),%rax
    0.00 :   6a645:  sub    %rax,%rsi
    0.00 :   6a648:  mov    %rsi,-0x470(%rbp)
         : 9094  ./stdio-common/vfscanf-internal.c:1778
    0.00 :   6a64f:  cmp    $0xffffffff,%r13d
    0.00 :   6a653:  je     66179 <__vfscanf_internal+0x3799>
    0.00 :   6a659:  jmp    66169 <__vfscanf_internal+0x3789>
    0.00 :   6a65e:  mov    %r15,%r14
    0.00 :   6a661:  jmp    63108 <__vfscanf_internal+0x728>
    0.00 :   6a666:  cs nopw 0x0(%rax,%rax,1)
         : 9101  char_buffer_add_slow():
         : 9102  ./stdio-common/vfscanf-internal.c:238
    0.00 :   6a670:  test   %rsi,%rsi
    0.00 :   6a673:  je     63b4f <__vfscanf_internal+0x116f>
         : 9105  ./stdio-common/vfscanf-internal.c:240
    0.00 :   6a679:  sub    -0x460(%rbp),%rsi
         : 9107  scratch_buffer_grow_preserve():
         : 9108  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6a680:  lea    -0x460(%rbp),%rdi
         : 9110  char_buffer_add_slow():
         : 9111  ./stdio-common/vfscanf-internal.c:240
    0.00 :   6a687:  mov    %rsi,%rbx
         : 9113  scratch_buffer_grow_preserve():
         : 9114  ./stdio-common/../include/scratch_buffer.h:113
    0.00 :   6a68a:  call   a7ae0 <__libc_scratch_buffer_grow_preserve>
         : 9116  char_buffer_add_slow():
         : 9117  ./stdio-common/vfscanf-internal.c:241
    0.00 :   6a68f:  test   %al,%al
    0.00 :   6a691:  je     6a6cd <__vfscanf_internal+0x7ced>
         : 9120  char_buffer_start():
         : 9121  ./stdio-common/vfscanf-internal.c:206
    0.00 :   6a693:  mov    -0x460(%rbp),%rax
         : 9123  char_buffer_add_slow():
         : 9124  ./stdio-common/vfscanf-internal.c:248
    0.00 :   6a69a:  add    %rax,%rbx
         : 9126  char_buffer_rewind():
         : 9127  ./stdio-common/vfscanf-internal.c:223
    0.00 :   6a69d:  add    -0x458(%rbp),%rax
         : 9129  char_buffer_add_slow():
         : 9130  ./stdio-common/vfscanf-internal.c:249
    0.00 :   6a6a4:  lea    0x1(%rbx),%rdi
    0.00 :   6a6a8:  movq   %rax,%xmm5
    0.00 :   6a6ad:  movq   %rdi,%xmm0
    0.00 :   6a6b2:  punpcklqdq %xmm5,%xmm0
    0.00 :   6a6b6:  movaps %xmm0,-0x470(%rbp)
    0.00 :   6a6bd:  mov    %r13b,(%rbx)
    0.00 :   6a6c0:  jmp    63b4f <__vfscanf_internal+0x116f>
         : 9138  __vfscanf_internal():
         : 9139  ./stdio-common/vfscanf-internal.c:1967
    0.00 :   6a6c5:  movzbl %al,%eax
    0.00 :   6a6c8:  jmp    63bef <__vfscanf_internal+0x120f>
         : 9142  char_buffer_add_slow():
         : 9143  ./stdio-common/vfscanf-internal.c:243
    0.00 :   6a6cd:  pxor   %xmm0,%xmm0
    0.00 :   6a6d1:  movaps %xmm0,-0x470(%rbp)
         : 9146  ./stdio-common/vfscanf-internal.c:245
    0.00 :   6a6d8:  jmp    63b4f <__vfscanf_internal+0x116f>
         : 9148  __vfscanf_internal():
         : 9149  ./stdio-common/vfscanf-internal.c:2152
    0.00 :   6a6dd:  mov    %r14d,-0x638(%rbp)
    0.00 :   6a6e4:  mov    -0x648(%rbp),%r12
    0.00 :   6a6eb:  movzbl -0x630(%rbp),%r14d
    0.00 :   6a6f3:  cmp    $0xffffffff,%r13d
    0.00 :   6a6f7:  je     66afd <__vfscanf_internal+0x411d>
    0.00 :   6a6fd:  jmp    68d2f <__vfscanf_internal+0x634f>
    0.00 :   6a702:  mov    %r12d,%ecx
    0.00 :   6a705:  movzbl -0x638(%rbp),%r12d
    0.00 :   6a70d:  jmp    66d19 <__vfscanf_internal+0x4339>
         : 9159  char_buffer_add_slow():
         : 9160  ./stdio-common/vfscanf-internal.c:243
    0.00 :   6a712:  pxor   %xmm0,%xmm0
    0.00 :   6a716:  movaps %xmm0,-0x470(%rbp)
         : 9163  ./stdio-common/vfscanf-internal.c:245
    0.00 :   6a71d:  jmp    66a9e <__vfscanf_internal+0x40be>
         : 9165  __vfscanf_internal():
         : 9166  ./stdio-common/vfscanf-internal.c:661
    0.00 :   6a722:  mov    -0x538(%rbp),%rdx
    0.00 :   6a729:  lea    0x8(%rdx),%rax
    0.00 :   6a72d:  mov    %rax,-0x538(%rbp)
    0.00 :   6a734:  jmp    68f4a <__vfscanf_internal+0x656a>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a17f0 <malloc_consolidate>:
         : 6     malloc_consolidate():
         : 7     ./malloc/malloc.c:4715
    0.00 :   a17f0:  push   %r15
         : 9     ./malloc/malloc.c:4732
    0.00 :   a17f2:  lea    0x60(%rdi),%rax
         : 11    ./malloc/malloc.c:4715
    0.00 :   a17f6:  push   %r14
    0.00 :   a17f8:  push   %r13
    0.00 :   a17fa:  mov    %rdi,%r13
    0.00 :   a17fd:  push   %r12
         : 16    ./malloc/malloc.c:4743
    0.00 :   a17ff:  lea    0x10(%rdi),%r12
         : 18    ./malloc/malloc.c:4715
    0.00 :   a1803:  push   %rbp
    0.00 :   a1804:  push   %rbx
    0.00 :   a1805:  sub    $0x38,%rsp
         : 22    ./malloc/malloc.c:4730
    0.00 :   a1809:  movl   $0x0,0x8(%rdi)
         : 24    ./malloc/malloc.c:4732
    0.00 :   a1810:  mov    %rax,0x8(%rsp)
         : 26    ./malloc/malloc.c:4745 (discriminator 10)
    0.00 :   a1815:  xor    %ebx,%ebx
    0.00 :   a1817:  xchg   %rbx,(%r12)
         : 29    ./malloc/malloc.c:4746 (discriminator 10)
    0.00 :   a181b:  test   %rbx,%rbx
    0.00 :   a181e:  jne    a1895 <malloc_consolidate+0xa5>
         : 32    ./malloc/malloc.c:4808
    0.00 :   a1820:  add    $0x8,%r12
    0.00 :   a1824:  cmp    %r12,0x8(%rsp)
    0.00 :   a1829:  jne    a1815 <malloc_consolidate+0x25>
         : 36    ./malloc/malloc.c:4809
    0.00 :   a182b:  add    $0x38,%rsp
    0.00 :   a182f:  pop    %rbx
    0.00 :   a1830:  pop    %rbp
    0.00 :   a1831:  pop    %r12
    0.00 :   a1833:  pop    %r13
    0.00 :   a1835:  pop    %r14
    0.00 :   a1837:  pop    %r15
    0.00 :   a1839:  ret
    0.00 :   a183a:  nopw   0x0(%rax,%rax,1)
         : 46    ./malloc/malloc.c:4778
    0.00 :   a1840:  testb  $0x1,0x8(%r14,%r10,1)
    0.00 :   a1846:  je     a1950 <malloc_consolidate+0x160>
         : 49    ./malloc/malloc.c:4782
    0.00 :   a184c:  and    $0xfffffffffffffffe,%rcx
    0.00 :   a1850:  mov    %rcx,0x8(%r14)
         : 52    ./malloc/malloc.c:4784
    0.00 :   a1854:  mov    0x70(%r13),%rdx
         : 54    ./malloc/malloc.c:4785
    0.00 :   a1858:  mov    %rbx,0x70(%r13)
    0.00 :   a185c:  movq   %rdx,%xmm0
         : 57    ./malloc/malloc.c:4786
    0.00 :   a1861:  mov    %rbx,0x18(%rdx)
    0.00 :   a1865:  movhps 0x8(%rsp),%xmm0
         : 60    ./malloc/malloc.c:4788
    0.00 :   a186a:  cmp    $0x3ff,%rbp
    0.00 :   a1871:  jbe    a187b <malloc_consolidate+0x8b>
         : 63    ./malloc/malloc.c:4789
    0.00 :   a1873:  pxor   %xmm1,%xmm1
    0.00 :   a1877:  movups %xmm1,0x20(%rbx)
         : 66    ./malloc/malloc.c:4793
    0.00 :   a187b:  mov    %rbp,%rdx
         : 68    ./malloc/malloc.c:4795
    0.00 :   a187e:  movups %xmm0,0x10(%rbx)
         : 70    ./malloc/malloc.c:4793
    0.00 :   a1882:  or     $0x1,%rdx
    0.00 :   a1886:  mov    %rdx,0x8(%rbx)
         : 73    ./malloc/malloc.c:4796
    0.00 :   a188a:  mov    %rbp,(%r14)
         : 75    ./malloc/malloc.c:4805
    0.00 :   a188d:  cmp    %r15,%r8
    0.00 :   a1890:  je     a1820 <malloc_consolidate+0x30>
    0.00 :   a1892:  mov    %r9,%rbx
         : 79    ./malloc/malloc.c:4749
    0.00 :   a1895:  test   $0xf,%bl
    0.00 :   a1898:  jne    a1980 <malloc_consolidate+0x190>
         : 82    ./malloc/malloc.c:4753
    0.00 :   a189e:  mov    0x8(%rbx),%rdx
    0.00 :   a18a2:  mov    %edx,%ecx
    0.00 :   a18a4:  shr    $0x4,%ecx
         : 86    ./malloc/malloc.c:4754
    0.00 :   a18a7:  sub    $0x2,%ecx
    0.00 :   a18aa:  lea    0x10(%r13,%rcx,8),%rcx
    0.00 :   a18af:  cmp    %rcx,%r12
    0.00 :   a18b2:  jne    a199c <malloc_consolidate+0x1ac>
         : 91    ./malloc/malloc.c:4762
    0.00 :   a18b8:  mov    %rdx,%rbp
         : 93    ./malloc/malloc.c:4759
    0.00 :   a18bb:  mov    0x10(%rbx),%r8
    0.00 :   a18bf:  lea    0x10(%rbx),%r15
         : 96    ./malloc/malloc.c:4762
    0.00 :   a18c3:  and    $0xfffffffffffffff8,%rbp
         : 98    ./malloc/malloc.c:4759
    0.00 :   a18c7:  shr    $0xc,%r15
         : 100   ./malloc/malloc.c:4763
    0.00 :   a18cb:  lea    (%rbx,%rbp,1),%r14
         : 102   ./malloc/malloc.c:4759
    0.00 :   a18cf:  mov    %r8,%r9
         : 104   ./malloc/malloc.c:4764
    0.00 :   a18d2:  mov    0x8(%r14),%rcx
         : 106   ./malloc/malloc.c:4759
    0.00 :   a18d6:  xor    %r15,%r9
         : 108   ./malloc/malloc.c:4764
    0.00 :   a18d9:  mov    %rcx,%r10
    0.00 :   a18dc:  and    $0xfffffffffffffff8,%r10
         : 111   ./malloc/malloc.c:4766
    0.00 :   a18e0:  and    $0x1,%edx
    0.00 :   a18e3:  jne    a192f <malloc_consolidate+0x13f>
         : 114   ./malloc/malloc.c:4767
    0.00 :   a18e5:  mov    (%rbx),%rdx
         : 116   ./malloc/malloc.c:4769
    0.00 :   a18e8:  sub    %rdx,%rbx
         : 118   ./malloc/malloc.c:4768
    0.00 :   a18eb:  add    %rdx,%rbp
         : 120   ./malloc/malloc.c:4770
    0.00 :   a18ee:  mov    0x8(%rbx),%rdi
  100.00 :   a18f2:  and    $0xfffffffffffffff8,%rdi
    0.00 :   a18f6:  cmp    %rdx,%rdi
    0.00 :   a18f9:  jne    a1990 <malloc_consolidate+0x1a0>
         : 125   ./malloc/malloc.c:4772
    0.00 :   a18ff:  mov    %rbx,%rdi
    0.00 :   a1902:  mov    %r10,0x28(%rsp)
    0.00 :   a1907:  mov    %r9,0x20(%rsp)
    0.00 :   a190c:  mov    %rcx,0x18(%rsp)
    0.00 :   a1911:  mov    %r8,0x10(%rsp)
    0.00 :   a1916:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a191b:  mov    0x28(%rsp),%r10
    0.00 :   a1920:  mov    0x20(%rsp),%r9
    0.00 :   a1925:  mov    0x18(%rsp),%rcx
    0.00 :   a192a:  mov    0x10(%rsp),%r8
         : 136   ./malloc/malloc.c:4775
    0.00 :   a192f:  cmp    %r14,0x60(%r13)
    0.00 :   a1933:  jne    a1840 <malloc_consolidate+0x50>
         : 139   ./malloc/malloc.c:4800
    0.00 :   a1939:  add    %r10,%rbp
         : 141   ./malloc/malloc.c:4801
    0.00 :   a193c:  or     $0x1,%rbp
    0.00 :   a1940:  mov    %rbp,0x8(%rbx)
         : 144   ./malloc/malloc.c:4802
    0.00 :   a1944:  mov    %rbx,0x60(%r13)
    0.00 :   a1948:  jmp    a188d <malloc_consolidate+0x9d>
    0.00 :   a194d:  nopl   (%rax)
         : 148   ./malloc/malloc.c:4779
    0.00 :   a1950:  add    %r10,%rbp
         : 150   ./malloc/malloc.c:4780
    0.00 :   a1953:  mov    %r14,%rdi
    0.00 :   a1956:  mov    %r9,0x18(%rsp)
    0.00 :   a195b:  mov    %r8,0x10(%rsp)
         : 154   ./malloc/malloc.c:4796
    0.00 :   a1960:  lea    (%rbx,%rbp,1),%r14
         : 156   ./malloc/malloc.c:4780
    0.00 :   a1964:  call   a1710 <unlink_chunk.constprop.0>
    0.00 :   a1969:  mov    0x10(%rsp),%r8
    0.00 :   a196e:  mov    0x18(%rsp),%r9
    0.00 :   a1973:  jmp    a1854 <malloc_consolidate+0x64>
    0.00 :   a1978:  nopl   0x0(%rax,%rax,1)
         : 162   ./malloc/malloc.c:4750
    0.00 :   a1980:  lea    0x13cc31(%rip),%rdi        # 1de5b8 <__PRETTY_FUNCTION__.1+0x478>
    0.00 :   a1987:  call   a0ce0 <malloc_printerr>
    0.00 :   a198c:  nopl   0x0(%rax)
         : 166   ./malloc/malloc.c:4771
    0.00 :   a1990:  lea    0x13cc89(%rip),%rdi        # 1de620 <__PRETTY_FUNCTION__.1+0x4e0>
    0.00 :   a1997:  call   a0ce0 <malloc_printerr>
         : 169   ./malloc/malloc.c:4755
    0.00 :   a199c:  lea    0x13cc4d(%rip),%rdi        # 1de5f0 <__PRETTY_FUNCTION__.1+0x4b0>
    0.00 :   a19a3:  call   a0ce0 <malloc_printerr>
 Percent |	Source code & Disassembly of minisat for cycles:u (2 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000c170 <memReadPeak()>:
         : 6    memReadPeak():
         : 52   return value;
         : 53   }
         :
         :
         : 56   static inline int memReadPeak(void)
         : 57   {
    0.00 :   c170:   push   %rbp
    0.00 :   c171:   push   %rbx
    0.00 :   c172:   sub    $0x128,%rsp
    0.00 :   c179:   mov    %fs:0x28,%rax
    0.00 :   c182:   mov    %rax,0x118(%rsp)
    0.00 :   c18a:   xor    %eax,%eax
         :
         : 39   #ifdef __va_arg_pack
         : 40   __fortify_function int
         : 41   __NTH (sprintf (char *__restrict __s, const char *__restrict __fmt, ...))
         : 42   {
         : 43   return __builtin___sprintf_chk (__s, __USE_FORTIFY_LEVEL - 1,
    0.00 :   c18c:   lea    0x10(%rsp),%rbp
         : 54   char  name[256];
         : 55   pid_t pid = getpid();
    0.00 :   c191:   call   24c0 <getpid@plt>
         : 57   sprintf():
    0.00 :   c196:   mov    $0x1,%esi
    0.00 :   c19b:   mov    %rbp,%rdi
    0.00 :   c19e:   lea    0x86b7(%rip),%rcx        # 1485c <Minisat::lit_Undef+0x104>
         : 41   memReadPeak():
    0.00 :   c1a5:   mov    %eax,%r8d
         : 55   sprintf():
    0.00 :   c1a8:   mov    $0x100,%edx
    0.00 :   c1ad:   xor    %eax,%eax
    0.00 :   c1af:   call   2390 <__sprintf_chk@plt>
         : 41   memReadPeak():
         :
         : 58   sprintf(name, "/proc/%d/status", pid);
         : 59   FILE* in = fopen(name, "rb");
    0.00 :   c1b4:   lea    0x8610(%rip),%rsi        # 147cb <Minisat::lit_Undef+0x73>
    0.00 :   c1bb:   mov    %rbp,%rdi
    0.00 :   c1be:   call   2420 <fopen@plt>
         : 58   if (in == NULL) return 0;
    0.00 :   c1c3:   test   %rax,%rax
    0.00 :   c1c6:   je     c256 <memReadPeak()+0xe6>
         :
         : 62   // Find the correct line, beginning with "VmPeak:":
         : 63   int peak_kb = 0;
    0.00 :   c1cc:   movl   $0x0,0xc(%rsp)
    0.00 :   c1d4:   mov    %rax,%rbp
         : 62   while (!feof(in) && fscanf(in, "VmPeak: %d kB", &peak_kb) != 1)
    0.00 :   c1d7:   lea    0x868e(%rip),%rbx        # 1486c <Minisat::lit_Undef+0x114>
    0.00 :   c1de:   xchg   %ax,%ax
    0.00 :   c1e0:   mov    %rbp,%rdi
    0.00 :   c1e3:   call   24f0 <feof@plt>
    0.00 :   c1e8:   test   %eax,%eax
    0.00 :   c1ea:   jne    c22d <memReadPeak()+0xbd>
    0.00 :   c1ec:   xor    %eax,%eax
    0.00 :   c1ee:   lea    0xc(%rsp),%rdx
    0.00 :   c1f3:   mov    %rbx,%rsi
    0.00 :   c1f6:   mov    %rbp,%rdi
    0.00 :   c1f9:   call   25d0 <__isoc99_fscanf@plt>
    0.00 :   c1fe:   cmp    $0x1,%eax
    0.00 :   c201:   je     c22d <memReadPeak()+0xbd>
    0.00 :   c203:   nopl   0x0(%rax,%rax,1)
         : 63   while (!feof(in) && fgetc(in) != '\n')
    0.00 :   c208:   mov    %rbp,%rdi
    0.00 :   c20b:   call   24f0 <feof@plt>
  100.00 :   c210:   test   %eax,%eax
    0.00 :   c212:   jne    c1e0 <memReadPeak()+0x70>
    0.00 :   c214:   mov    %rbp,%rdi
    0.00 :   c217:   call   2500 <fgetc@plt>
    0.00 :   c21c:   cmp    $0xa,%eax
    0.00 :   c21f:   jne    c208 <memReadPeak()+0x98>
         : 62   while (!feof(in) && fscanf(in, "VmPeak: %d kB", &peak_kb) != 1)
    0.00 :   c221:   mov    %rbp,%rdi
    0.00 :   c224:   call   24f0 <feof@plt>
    0.00 :   c229:   test   %eax,%eax
    0.00 :   c22b:   je     c1ec <memReadPeak()+0x7c>
         : 65   ;
         : 66   fclose(in);
    0.00 :   c22d:   mov    %rbp,%rdi
    0.00 :   c230:   call   23f0 <fclose@plt>
         :
         : 68   return peak_kb;
    0.00 :   c235:   mov    0xc(%rsp),%eax
         : 68   }
    0.00 :   c239:   mov    0x118(%rsp),%rdx
    0.00 :   c241:   sub    %fs:0x28,%rdx
    0.00 :   c24a:   jne    c25a <memReadPeak()+0xea>
    0.00 :   c24c:   add    $0x128,%rsp
    0.00 :   c253:   pop    %rbx
    0.00 :   c254:   pop    %rbp
    0.00 :   c255:   ret
         : 58   if (in == NULL) return 0;
    0.00 :   c256:   xor    %eax,%eax
    0.00 :   c258:   jmp    c239 <memReadPeak()+0xc9>
         : 68   }
    0.00 :   c25a:   call   2410 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000005a230 <_itoa_word>:
         : 6     _itoa_word():
         : 7     ./stdio-common/_itoa.c:163
    0.00 :   5a230:  endbr64
    0.00 :   5a234:  mov    %rsi,%r8
         : 10    ./stdio-common/_itoa.c:166
    0.00 :   5a237:  test   %ecx,%ecx
    0.00 :   5a239:  lea    0x182980(%rip),%rsi        # 1dcbc0 <__GI__itoa_upper_digits>
    0.00 :   5a240:  lea    0x182939(%rip),%rax        # 1dcb80 <_itoa_lower_digits>
    0.00 :   5a247:  cmove  %rax,%rsi
         : 15    ./stdio-common/_itoa.c:168
    0.00 :   5a24b:  cmp    $0xa,%edx
    0.00 :   5a24e:  je     5a2c0 <_itoa_word+0x90>
    0.00 :   5a250:  cmp    $0x10,%edx
    0.00 :   5a253:  je     5a280 <_itoa_word+0x50>
         : 20    ./stdio-common/_itoa.c:182
    0.00 :   5a255:  mov    %edx,%ecx
         : 22    ./stdio-common/_itoa.c:168
    0.00 :   5a257:  cmp    $0x8,%edx
    0.00 :   5a25a:  je     5a2a0 <_itoa_word+0x70>
         : 25    ./stdio-common/_itoa.c:182 (discriminator 1)
    0.00 :   5a25c:  mov    %rdi,%rax
    0.00 :   5a25f:  xor    %edx,%edx
    0.00 :   5a261:  sub    $0x1,%r8
    0.00 :   5a265:  div    %rcx
    0.00 :   5a268:  movzbl (%rsi,%rdx,1),%edx
    0.00 :   5a26c:  mov    %dl,(%r8)
         : 32    ./stdio-common/_itoa.c:183 (discriminator 1)
    0.00 :   5a26f:  mov    %rdi,%rdx
    0.00 :   5a272:  mov    %rax,%rdi
    0.00 :   5a275:  cmp    %rcx,%rdx
    0.00 :   5a278:  jae    5a25c <_itoa_word+0x2c>
         : 37    ./stdio-common/_itoa.c:186
    0.00 :   5a27a:  mov    %r8,%rax
    0.00 :   5a27d:  ret
    0.00 :   5a27e:  xchg   %ax,%ax
         : 41    ./stdio-common/_itoa.c:178 (discriminator 1)
    0.00 :   5a280:  mov    %rdi,%rax
    0.00 :   5a283:  sub    $0x1,%r8
    0.00 :   5a287:  and    $0xf,%eax
    0.00 :   5a28a:  movzbl (%rsi,%rax,1),%eax
    0.00 :   5a28e:  mov    %al,(%r8)
    0.00 :   5a291:  mov    %rdi,%rax
    0.00 :   5a294:  shr    $0x4,%rdi
    0.00 :   5a298:  cmp    $0xf,%rax
    0.00 :   5a29c:  ja     5a280 <_itoa_word+0x50>
    0.00 :   5a29e:  jmp    5a27a <_itoa_word+0x4a>
         : 52    ./stdio-common/_itoa.c:179 (discriminator 1)
    0.00 :   5a2a0:  mov    %rdi,%rax
    0.00 :   5a2a3:  sub    $0x1,%r8
    0.00 :   5a2a7:  and    $0x7,%eax
    0.00 :   5a2aa:  movzbl (%rsi,%rax,1),%eax
    0.00 :   5a2ae:  mov    %al,(%r8)
    0.00 :   5a2b1:  mov    %rdi,%rax
    0.00 :   5a2b4:  shr    $0x3,%rdi
    0.00 :   5a2b8:  cmp    $0x7,%rax
    0.00 :   5a2bc:  ja     5a2a0 <_itoa_word+0x70>
    0.00 :   5a2be:  jmp    5a27a <_itoa_word+0x4a>
         : 63    ./stdio-common/_itoa.c:177
    0.00 :   5a2c0:  movabs $0xcccccccccccccccd,%r9
    0.00 :   5a2ca:  nopw   0x0(%rax,%rax,1)
         : 66    ./stdio-common/_itoa.c:177 (discriminator 1)
    0.00 :   5a2d0:  mov    %rdi,%rax
    0.00 :   5a2d3:  mov    %rdi,%rcx
    0.00 :   5a2d6:  sub    $0x1,%r8
    0.00 :   5a2da:  mul    %r9
    0.00 :   5a2dd:  shr    $0x3,%rdx
    0.00 :   5a2e1:  lea    (%rdx,%rdx,4),%rax
    0.00 :   5a2e5:  add    %rax,%rax
    0.00 :   5a2e8:  sub    %rax,%rcx
    0.00 :   5a2eb:  movzbl (%rsi,%rcx,1),%eax
  100.00 :   5a2ef:  mov    %al,(%r8)
    0.00 :   5a2f2:  mov    %rdi,%rax
    0.00 :   5a2f5:  mov    %rdx,%rdi
    0.00 :   5a2f8:  cmp    $0x9,%rax
    0.00 :   5a2fc:  ja     5a2d0 <_itoa_word+0xa0>
         : 81    ./stdio-common/_itoa.c:186
    0.00 :   5a2fe:  mov    %r8,%rax
    0.00 :   5a301:  ret
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (3 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000019530 <init_cpu_features.constprop.0>:
         : 6     init_cpu_features():
         : 7     ./elf/../sysdeps/x86/cpu-features.c:399
    0.00 :   19530:  push   %r15
         : 9     ./elf/../sysdeps/x86/cpu-features.c:415
    0.00 :   19532:  xor    %eax,%eax
         : 11    ./elf/../sysdeps/x86/cpu-features.c:399
    0.00 :   19534:  push   %r14
    0.00 :   19536:  push   %r13
    0.00 :   19538:  push   %r12
    0.00 :   1953a:  push   %rbp
    0.00 :   1953b:  push   %rbx
    0.00 :   1953c:  sub    $0xd8,%rsp
         : 18    ./elf/../sysdeps/x86/cpu-features.c:402
   14.40 :   19543:  movl   $0x0,0x88(%rsp)
         : 20    ./elf/../sysdeps/x86/cpu-features.c:403
    0.00 :   1954e:  movl   $0x0,0x8c(%rsp)
         : 22    ./elf/../sysdeps/x86/cpu-features.c:404
    0.00 :   19559:  movl   $0x0,0x90(%rsp)
         : 24    ./elf/../sysdeps/x86/cpu-features.c:415
    0.00 :   19564:  cpuid
    0.00 :   19566:  mov    %eax,0x205e8(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 27    ./elf/../sysdeps/x86/cpu-features.c:418
   42.80 :   1956c:  cmp    $0x756e6547,%ebx
    0.00 :   19572:  jne    196e0 <init_cpu_features.constprop.0+0x1b0>
    0.00 :   19578:  cmp    $0x6c65746e,%ecx
    0.00 :   1957e:  jne    196e0 <init_cpu_features.constprop.0+0x1b0>
    0.00 :   19584:  cmp    $0x49656e69,%edx
    0.00 :   1958a:  je     1a370 <init_cpu_features.constprop.0+0xe40>
         : 34    get_common_indices():
         : 35    ./elf/../sysdeps/x86/cpu-features.c:348
    0.00 :   19590:  cmpl   $0x6,0x205bd(%rip)        # 39b54 <_rtld_global_ro+0x74>
    0.00 :   19597:  jle    19666 <init_cpu_features.constprop.0+0x136>
         : 38    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   1959d:  mov    $0x7,%r8d
    0.00 :   195a3:  xor    %esi,%esi
    0.00 :   195a5:  mov    %r8d,%eax
    0.00 :   195a8:  mov    %esi,%ecx
    0.00 :   195aa:  cpuid
         : 44    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   195ac:  mov    $0x1,%edi
         : 46    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   195b1:  mov    %eax,0x205cd(%rip)        # 39b84 <_rtld_global_ro+0xa4>
         : 48    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   195b7:  mov    %r8d,%eax
         : 50    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   195ba:  mov    %ecx,0x205cc(%rip)        # 39b8c <_rtld_global_ro+0xac>
         : 52    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   195c0:  mov    %edi,%ecx
         : 54    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   195c2:  mov    %ebx,0x205c0(%rip)        # 39b88 <_rtld_global_ro+0xa8>
    0.00 :   195c8:  mov    %edx,0x205c2(%rip)        # 39b90 <_rtld_global_ro+0xb0>
         : 57    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   195ce:  cpuid
         : 59    ./elf/../sysdeps/x86/cpu-features.c:362
    0.00 :   195d0:  cmpl   $0xc,0x2057d(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 61    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   195d7:  mov    %eax,0x20647(%rip)        # 39c24 <_rtld_global_ro+0x144>
    0.00 :   195dd:  mov    %ebx,0x20645(%rip)        # 39c28 <_rtld_global_ro+0x148>
    0.00 :   195e3:  mov    %ecx,0x20643(%rip)        # 39c2c <_rtld_global_ro+0x14c>
    0.00 :   195e9:  mov    %edx,0x20641(%rip)        # 39c30 <_rtld_global_ro+0x150>
         : 66    ./elf/../sysdeps/x86/cpu-features.c:362
    0.00 :   195ef:  jle    19666 <init_cpu_features.constprop.0+0x136>
         : 68    ./elf/../sysdeps/x86/cpu-features.c:363
    0.00 :   195f1:  mov    $0xd,%eax
    0.00 :   195f6:  mov    %edi,%ecx
    0.00 :   195f8:  cpuid
         : 72    ./elf/../sysdeps/x86/cpu-features.c:369
    0.00 :   195fa:  cmpl   $0x13,0x20553(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 74    ./elf/../sysdeps/x86/cpu-features.c:363
    0.00 :   19601:  mov    %eax,0x205bd(%rip)        # 39bc4 <_rtld_global_ro+0xe4>
    0.00 :   19607:  mov    %ebx,0x205bb(%rip)        # 39bc8 <_rtld_global_ro+0xe8>
    0.00 :   1960d:  mov    %ecx,0x205b9(%rip)        # 39bcc <_rtld_global_ro+0xec>
    0.00 :   19613:  mov    %edx,0x205b7(%rip)        # 39bd0 <_rtld_global_ro+0xf0>
         : 79    ./elf/../sysdeps/x86/cpu-features.c:369
    0.00 :   19619:  jle    19666 <init_cpu_features.constprop.0+0x136>
         : 81    ./elf/../sysdeps/x86/cpu-features.c:370
    0.00 :   1961b:  mov    $0x14,%eax
    0.00 :   19620:  mov    %esi,%ecx
    0.00 :   19622:  cpuid
         : 85    ./elf/../sysdeps/x86/cpu-features.c:376
    0.00 :   19624:  cmpl   $0x18,0x20529(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 87    ./elf/../sysdeps/x86/cpu-features.c:370
    0.00 :   1962b:  mov    %eax,0x20633(%rip)        # 39c64 <_rtld_global_ro+0x184>
    0.00 :   19631:  mov    %ebx,0x20631(%rip)        # 39c68 <_rtld_global_ro+0x188>
    0.00 :   19637:  mov    %ecx,0x2062f(%rip)        # 39c6c <_rtld_global_ro+0x18c>
    0.00 :   1963d:  mov    %edx,0x2062d(%rip)        # 39c70 <_rtld_global_ro+0x190>
         : 92    ./elf/../sysdeps/x86/cpu-features.c:376
    0.00 :   19643:  jle    19666 <init_cpu_features.constprop.0+0x136>
         : 94    ./elf/../sysdeps/x86/cpu-features.c:377
    0.00 :   19645:  mov    $0x19,%eax
    0.00 :   1964a:  mov    %esi,%ecx
    0.00 :   1964c:  cpuid
    0.00 :   1964e:  mov    %eax,0x205f0(%rip)        # 39c44 <_rtld_global_ro+0x164>
    0.00 :   19654:  mov    %ebx,0x205ee(%rip)        # 39c48 <_rtld_global_ro+0x168>
    0.00 :   1965a:  mov    %ecx,0x205ec(%rip)        # 39c4c <_rtld_global_ro+0x16c>
    0.00 :   19660:  mov    %edx,0x205ea(%rip)        # 39c50 <_rtld_global_ro+0x170>
         : 102   dl_check_minsigstacksize():
         : 103   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:24
    0.00 :   19666:  cmpq   $0x0,0x20492(%rip)        # 39b00 <_rtld_global_ro+0x20>
    0.00 :   1966e:  jne    196a0 <init_cpu_features.constprop.0+0x170>
         : 106   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:27
    0.00 :   19670:  cmpl   $0xc,0x204dd(%rip)        # 39b54 <_rtld_global_ro+0x74>
    0.00 :   19677:  jle    1a070 <init_cpu_features.constprop.0+0xb40>
         : 109   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:28
    0.00 :   1967d:  testb  $0x8,0x204eb(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   19684:  je     1a070 <init_cpu_features.constprop.0+0xb40>
         : 112   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:65
    0.00 :   1968a:  mov    $0xd,%eax
    0.00 :   1968f:  xor    %ecx,%ecx
    0.00 :   19691:  cpuid
         : 116   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:72
    0.00 :   19693:  lea    0x204(%rbx),%eax
         : 118   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:74
    0.00 :   19699:  mov    %rax,0x20460(%rip)        # 39b00 <_rtld_global_ro+0x20>
         : 120   init_cpu_features():
         : 121   ./elf/../sysdeps/x86/cpu-features.c:683
    0.00 :   196a0:  call   19010 <update_active.constprop.0>
    0.00 :   196a5:  lea    0xb0(%rsp),%r14
         : 124   ./elf/../sysdeps/x86/cpu-features.c:699
    0.00 :   196ad:  mov    0x88(%rsp),%r10d
         : 126   ./elf/../sysdeps/x86/cpu-features.c:700
    0.00 :   196b5:  mov    0x8c(%rsp),%eax
         : 128   ./elf/../sysdeps/x86/cpu-features.c:701
    0.00 :   196bc:  mov    0x90(%rsp),%edx
         : 130   ./elf/../sysdeps/x86/cpu-features.c:681
    0.00 :   196c3:  mov    $0x4,%r8d
    0.00 :   196c9:  lea    0xa8(%rsp),%r15
    0.00 :   196d1:  jmp    197f6 <init_cpu_features.constprop.0+0x2c6>
    0.00 :   196d6:  cs nopw 0x0(%rax,%rax,1)
         : 135   ./elf/../sysdeps/x86/cpu-features.c:588
    0.00 :   196e0:  cmp    $0x68747541,%ebx
    0.00 :   196e6:  jne    19ce0 <init_cpu_features.constprop.0+0x7b0>
    0.00 :   196ec:  cmp    $0x444d4163,%ecx
    0.00 :   196f2:  jne    19ce0 <init_cpu_features.constprop.0+0x7b0>
    0.00 :   196f8:  cmp    $0x69746e65,%edx
    0.00 :   196fe:  jne    19590 <init_cpu_features.constprop.0+0x60>
         : 142   ./elf/../sysdeps/x86/cpu-features.c:595
    0.00 :   19704:  lea    0xb0(%rsp),%r14
    0.00 :   1970c:  lea    0x90(%rsp),%rcx
    0.00 :   19714:  lea    0x8c(%rsp),%rsi
    0.00 :   1971c:  lea    0x88(%rsp),%rdi
    0.00 :   19724:  mov    %r14,%rdx
    0.00 :   19727:  call   185e0 <get_common_indices.constprop.0>
         : 149   get_extended_indices():
         : 150   ./elf/../sysdeps/x86/cpu-features.c:303
    0.00 :   1972c:  mov    $0x80000000,%eax
    0.00 :   19731:  cpuid
    0.00 :   19733:  mov    %eax,%esi
         : 154   ./elf/../sysdeps/x86/cpu-features.c:304
    0.00 :   19735:  cmp    $0x80000000,%eax
    0.00 :   1973a:  jbe    197a9 <init_cpu_features.constprop.0+0x279>
         : 157   ./elf/../sysdeps/x86/cpu-features.c:305
    0.00 :   1973c:  mov    $0x80000001,%eax
    0.00 :   19741:  cpuid
    0.00 :   19743:  mov    %eax,0x2045b(%rip)        # 39ba4 <_rtld_global_ro+0xc4>
    0.00 :   19749:  mov    %ebx,0x20459(%rip)        # 39ba8 <_rtld_global_ro+0xc8>
    0.00 :   1974f:  mov    %ecx,0x20457(%rip)        # 39bac <_rtld_global_ro+0xcc>
    0.00 :   19755:  mov    %edx,0x20455(%rip)        # 39bb0 <_rtld_global_ro+0xd0>
         : 164   ./elf/../sysdeps/x86/cpu-features.c:310
    0.00 :   1975b:  cmp    $0x80000006,%esi
    0.00 :   19761:  jbe    197a9 <init_cpu_features.constprop.0+0x279>
         : 167   ./elf/../sysdeps/x86/cpu-features.c:311
    0.00 :   19763:  mov    $0x80000007,%eax
    0.00 :   19768:  cpuid
    0.00 :   1976a:  mov    %eax,0x20474(%rip)        # 39be4 <_rtld_global_ro+0x104>
    0.00 :   19770:  mov    %ebx,0x20472(%rip)        # 39be8 <_rtld_global_ro+0x108>
    0.00 :   19776:  mov    %ecx,0x20470(%rip)        # 39bec <_rtld_global_ro+0x10c>
    0.00 :   1977c:  mov    %edx,0x2046e(%rip)        # 39bf0 <_rtld_global_ro+0x110>
         : 174   ./elf/../sysdeps/x86/cpu-features.c:316
    0.00 :   19782:  cmp    $0x80000007,%esi
    0.00 :   19788:  je     197a9 <init_cpu_features.constprop.0+0x279>
         : 177   ./elf/../sysdeps/x86/cpu-features.c:317
    0.00 :   1978a:  mov    $0x80000008,%eax
    0.00 :   1978f:  cpuid
    0.00 :   19791:  mov    %eax,0x2046d(%rip)        # 39c04 <_rtld_global_ro+0x124>
   42.80 :   19797:  mov    %ebx,0x2046b(%rip)        # 39c08 <_rtld_global_ro+0x128>
    0.00 :   1979d:  mov    %ecx,0x20469(%rip)        # 39c0c <_rtld_global_ro+0x12c>
    0.00 :   197a3:  mov    %edx,0x20467(%rip)        # 39c10 <_rtld_global_ro+0x130>
         : 184   init_cpu_features():
         : 185   ./elf/../sysdeps/x86/cpu-features.c:600
    0.00 :   197a9:  call   19010 <update_active.constprop.0>
         : 187   ./elf/../sysdeps/x86/cpu-features.c:604
    0.00 :   197ae:  testb  $0x10,0x203ca(%rip)        # 39b7f <_rtld_global_ro+0x9f>
    0.00 :   197b5:  je     197c8 <init_cpu_features.constprop.0+0x298>
         : 190   ./elf/../sysdeps/x86/cpu-features.c:608
    0.00 :   197b7:  mov    0x203ef(%rip),%eax        # 39bac <_rtld_global_ro+0xcc>
    0.00 :   197bd:  and    $0x10000,%eax
    0.00 :   197c2:  or     %eax,0x203f4(%rip)        # 39bbc <_rtld_global_ro+0xdc>
         : 194   ./elf/../sysdeps/x86/cpu-features.c:611
    0.00 :   197c8:  mov    0x88(%rsp),%r10d
         : 196   ./elf/../sysdeps/x86/cpu-features.c:614
    0.00 :   197d0:  mov    0x8c(%rsp),%eax
         : 198   ./elf/../sysdeps/x86/cpu-features.c:611
    0.00 :   197d7:  cmp    $0x15,%r10d
    0.00 :   197db:  je     1a080 <init_cpu_features.constprop.0+0xb50>
         : 201   ./elf/../sysdeps/x86/cpu-features.c:701
    0.00 :   197e1:  mov    0x90(%rsp),%edx
         : 203   ./elf/../sysdeps/x86/cpu-features.c:593
    0.00 :   197e8:  mov    $0x2,%r8d
    0.00 :   197ee:  lea    0xa8(%rsp),%r15
    0.00 :   197f6:  movd   %eax,%xmm3
         : 207   ./elf/../sysdeps/x86/cpu-features.c:687
    0.00 :   197fa:  mov    0x20370(%rip),%eax        # 39b70 <_rtld_global_ro+0x90>
    0.00 :   19800:  movd   %r10d,%xmm0
    0.00 :   19805:  punpckldq %xmm3,%xmm0
    0.00 :   19809:  test   $0x1,%ah
    0.00 :   1980c:  je     19815 <init_cpu_features.constprop.0+0x2e5>
         : 213   ./elf/../sysdeps/x86/cpu-features.c:688
    0.00 :   1980e:  orl    $0x40,0x2046f(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 215   ./elf/../sysdeps/x86/cpu-features.c:691
    0.00 :   19815:  test   $0x80,%ah
    0.00 :   19818:  je     19824 <init_cpu_features.constprop.0+0x2f4>
         : 218   ./elf/../sysdeps/x86/cpu-features.c:692
    0.00 :   1981a:  orl    $0x80,0x20460(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 220   ./elf/../sysdeps/x86/cpu-features.c:698
    0.00 :   19824:  mov    %r8d,0x20325(%rip)        # 39b50 <_rtld_global_ro+0x70>
         : 222   ./elf/../sysdeps/x86/cpu-features.c:701
    0.00 :   1982b:  mov    %edx,0x2032f(%rip)        # 39b60 <_rtld_global_ro+0x80>
         : 224   dl_init_cacheinfo():
         : 225   ./elf/../sysdeps/x86/dl-cacheinfo.h:706
    0.00 :   19831:  movq   $0xffffffffffffffff,0x98(%rsp)
         : 227   ./elf/../sysdeps/x86/dl-cacheinfo.h:708
    0.00 :   1983d:  movl   $0x0,0x94(%rsp)
         : 229   init_cpu_features():
         : 230   ./elf/../sysdeps/x86/cpu-features.c:699
    0.00 :   19848:  movq   %xmm0,0x20308(%rip)        # 39b58 <_rtld_global_ro+0x78>
         : 232   dl_init_cacheinfo():
         : 233   ./elf/../sysdeps/x86/dl-cacheinfo.h:722
    0.00 :   19850:  cmp    $0x1,%r8d
    0.00 :   19854:  je     19f48 <init_cpu_features.constprop.0+0xa18>
         : 236   ./elf/../sysdeps/x86/dl-cacheinfo.h:752
    0.00 :   1985a:  cmp    $0x3,%r8d
    0.00 :   1985e:  je     1a0e0 <init_cpu_features.constprop.0+0xbb0>
         : 239   ./elf/../sysdeps/x86/dl-cacheinfo.h:772
    0.00 :   19864:  cmp    $0x2,%r8d
    0.00 :   19868:  je     1a200 <init_cpu_features.constprop.0+0xcd0>
    0.00 :   1986e:  movq   $0xffffffffffffffff,0x30(%rsp)
    0.00 :   19877:  mov    $0x4040,%r12d
         : 244   ./elf/../sysdeps/x86/dl-cacheinfo.h:719
    0.00 :   1987d:  mov    $0xffffffffffffffff,%rbp
         : 246   ./elf/../sysdeps/x86/dl-cacheinfo.h:717
    0.00 :   19884:  mov    $0xffffffffffffffff,%r13
         : 248   ./elf/../sysdeps/x86/dl-cacheinfo.h:720
    0.00 :   1988b:  movq   $0xffffffffffffffff,0x70(%rsp)
         : 250   ./elf/../sysdeps/x86/dl-cacheinfo.h:718
    0.00 :   19894:  movq   $0xffffffffffffffff,0x68(%rsp)
         : 252   ./elf/../sysdeps/x86/dl-cacheinfo.h:716
    0.00 :   1989d:  movq   $0xffffffffffffffff,0x60(%rsp)
         : 254   ./elf/../sysdeps/x86/dl-cacheinfo.h:715
    0.00 :   198a6:  movq   $0xffffffffffffffff,0x58(%rsp)
         : 256   ./elf/../sysdeps/x86/dl-cacheinfo.h:714
    0.00 :   198af:  movq   $0xffffffffffffffff,(%rsp)
         : 258   ./elf/../sysdeps/x86/dl-cacheinfo.h:713
    0.00 :   198b7:  movq   $0xffffffffffffffff,0x50(%rsp)
         : 260   ./elf/../sysdeps/x86/dl-cacheinfo.h:712
    0.00 :   198c0:  movq   $0xffffffffffffffff,0x48(%rsp)
         : 262   ./elf/../sysdeps/x86/dl-cacheinfo.h:711
    0.00 :   198c9:  movq   $0xffffffffffffffff,0x18(%rsp)
         : 264   ./elf/../sysdeps/x86/dl-cacheinfo.h:710
    0.00 :   198d2:  movq   $0xffffffffffffffff,0x40(%rsp)
         : 266   ./elf/../sysdeps/x86/dl-cacheinfo.h:709
    0.00 :   198db:  movq   $0xffffffffffffffff,0x20(%rsp)
         : 268   ./elf/../sysdeps/x86/dl-cacheinfo.h:705
    0.00 :   198e4:  movq   $0xffffffffffffffff,0x38(%rsp)
         : 270   ./elf/../sysdeps/x86/dl-cacheinfo.h:840
    0.00 :   198ed:  movq   0x20(%rsp),%xmm0
         : 272   ./elf/../sysdeps/x86/dl-cacheinfo.h:886
    0.00 :   198f3:  mov    0x2038b(%rip),%eax        # 39c84 <_rtld_global_ro+0x1a4>
         : 274   ./elf/../sysdeps/x86/dl-cacheinfo.h:840
    0.00 :   198f9:  movhps 0x40(%rsp),%xmm0
    0.00 :   198fe:  movups %xmm0,0x203cb(%rip)        # 39cd0 <_rtld_global_ro+0x1f0>
    0.00 :   19905:  movq   0x18(%rsp),%xmm0
    0.00 :   1990b:  movhps 0x48(%rsp),%xmm0
    0.00 :   19910:  movups %xmm0,0x203c9(%rip)        # 39ce0 <_rtld_global_ro+0x200>
    0.00 :   19917:  movq   0x50(%rsp),%xmm0
    0.00 :   1991d:  movhps (%rsp),%xmm0
    0.00 :   19921:  movups %xmm0,0x203c8(%rip)        # 39cf0 <_rtld_global_ro+0x210>
    0.00 :   19928:  movq   0x58(%rsp),%xmm0
    0.00 :   1992e:  movhps 0x60(%rsp),%xmm0
    0.00 :   19933:  movups %xmm0,0x203c6(%rip)        # 39d00 <_rtld_global_ro+0x220>
    0.00 :   1993a:  movq   %r13,%xmm0
    0.00 :   1993f:  movhps 0x68(%rsp),%xmm0
    0.00 :   19944:  movups %xmm0,0x203c5(%rip)        # 39d10 <_rtld_global_ro+0x230>
    0.00 :   1994b:  movq   %rbp,%xmm0
    0.00 :   19950:  movhps 0x70(%rsp),%xmm0
    0.00 :   19955:  movups %xmm0,0x203c4(%rip)        # 39d20 <_rtld_global_ro+0x240>
         : 292   ./elf/../sysdeps/x86/dl-cacheinfo.h:885
    0.00 :   1995c:  testb  $0x1,0x20237(%rip)        # 39b9a <_rtld_global_ro+0xba>
    0.00 :   19963:  je     19d10 <init_cpu_features.constprop.0+0x7e0>
         : 295   ./elf/../sysdeps/x86/dl-cacheinfo.h:886
    0.00 :   19969:  test   $0x10,%ah
    0.00 :   1996c:  jne    19d10 <init_cpu_features.constprop.0+0x7e0>
    0.00 :   19972:  mov    $0x4000,%ebp
    0.00 :   19977:  mov    $0x4000,%ebx
    0.00 :   1997c:  mov    $0x200,%r13d
         : 301   ./elf/../sysdeps/x86/dl-cacheinfo.h:910
    0.00 :   19982:  testb  $0x10,0x20217(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
    0.00 :   19989:  mov    $0x840,%eax
         : 304   ./elf/../sysdeps/x86/dl-cacheinfo.h:931
    0.00 :   1998e:  mov    %r14,%rsi
    0.00 :   19991:  mov    $0x1c,%edi
         : 307   ./elf/../sysdeps/x86/dl-cacheinfo.h:910
    0.00 :   19996:  cmovne %rax,%rbp
    0.00 :   1999a:  cmovne %rax,%rbx
         : 310   ./elf/../sysdeps/x86/dl-cacheinfo.h:923
    0.00 :   1999e:  mov    (%rsp),%rax
    0.00 :   199a2:  cmp    $0x2,%r8d
    0.00 :   199a6:  cmovne %r12,%rax
         : 314   ./elf/../sysdeps/x86/dl-cacheinfo.h:931
    0.00 :   199aa:  xor    %edx,%edx
         : 316   ./elf/../sysdeps/x86/dl-cacheinfo.h:923
    0.00 :   199ac:  mov    %rax,(%rsp)
         : 318   ./elf/../sysdeps/x86/dl-cacheinfo.h:931
    0.00 :   199b0:  call   17d70 <__tunable_get_val>
    0.00 :   199b5:  mov    0xb0(%rsp),%rax
         : 321   ./elf/../sysdeps/x86/dl-cacheinfo.h:933
    0.00 :   199bd:  test   %rax,%rax
    0.00 :   199c0:  je     199cc <init_cpu_features.constprop.0+0x49c>
         : 324   ./elf/../sysdeps/x86/dl-cacheinfo.h:967
    0.00 :   199c2:  mov    %rax,0x18(%rsp)
    0.00 :   199c7:  mov    %rax,0x38(%rsp)
         : 327   ./elf/../sysdeps/x86/dl-cacheinfo.h:936
    0.00 :   199cc:  xor    %edx,%edx
    0.00 :   199ce:  mov    %r14,%rsi
    0.00 :   199d1:  mov    $0x4,%edi
    0.00 :   199d6:  call   17d70 <__tunable_get_val>
    0.00 :   199db:  mov    0xb0(%rsp),%rax
         : 333   ./elf/../sysdeps/x86/dl-cacheinfo.h:938
    0.00 :   199e3:  mov    0x30(%rsp),%rcx
         : 335   ./elf/../sysdeps/x86/dl-cacheinfo.h:941
    0.00 :   199e8:  mov    %r14,%rsi
    0.00 :   199eb:  mov    $0x10,%edi
         : 338   ./elf/../sysdeps/x86/dl-cacheinfo.h:938
    0.00 :   199f0:  test   %rax,%rax
    0.00 :   199f3:  cmovne %rax,%rcx
         : 341   ./elf/../sysdeps/x86/dl-cacheinfo.h:941
    0.00 :   199f7:  xor    %edx,%edx
         : 343   ./elf/../sysdeps/x86/dl-cacheinfo.h:938
    0.00 :   199f9:  mov    %rcx,0x30(%rsp)
         : 345   ./elf/../sysdeps/x86/dl-cacheinfo.h:941
    0.00 :   199fe:  call   17d70 <__tunable_get_val>
    0.00 :   19a03:  mov    0xb0(%rsp),%rax
         : 348   ./elf/../sysdeps/x86/dl-cacheinfo.h:942
    0.00 :   19a0b:  movabs $0xfffffffffffbfbe,%rdx
    0.00 :   19a15:  lea    -0x4041(%rax),%rcx
    0.00 :   19a1c:  mov    %rax,0x20(%rsp)
    0.00 :   19a21:  cmp    %rdx,%rcx
    0.00 :   19a24:  jbe    19a2e <init_cpu_features.constprop.0+0x4fe>
         : 354   ./elf/../sysdeps/x86/dl-cacheinfo.h:958
    0.00 :   19a26:  mov    %r12,0x20(%rsp)
    0.00 :   19a2b:  mov    %r12,%rax
         : 357   ./elf/../sysdeps/x86/dl-cacheinfo.h:946
    0.00 :   19a2e:  xor    %edx,%edx
    0.00 :   19a30:  mov    %r14,%rsi
    0.00 :   19a33:  mov    $0xa,%edi
    0.00 :   19a38:  mov    %rax,0x40(%rsp)
    0.00 :   19a3d:  call   17d70 <__tunable_get_val>
    0.00 :   19a42:  mov    0xb0(%rsp),%rdx
         : 364   ./elf/../sysdeps/x86/dl-cacheinfo.h:947
    0.00 :   19a4a:  mov    0x40(%rsp),%rax
    0.00 :   19a4f:  cmp    %r13,%rdx
    0.00 :   19a52:  jle    19a59 <init_cpu_features.constprop.0+0x529>
         : 368   ./elf/../sysdeps/x86/dl-cacheinfo.h:948
    0.00 :   19a54:  mov    %edx,%ebx
         : 370   ./elf/../sysdeps/x86/dl-cacheinfo.h:970
    0.00 :   19a56:  mov    %rbx,%rbp
    0.00 :   19a59:  movq   %rbp,%xmm4
         : 373   ./elf/../sysdeps/x86/dl-cacheinfo.h:953
    0.00 :   19a5e:  xor    %edx,%edx
    0.00 :   19a60:  mov    %r14,%rsi
    0.00 :   19a63:  mov    $0xf,%edi
    0.00 :   19a68:  movq   0x20(%rsp),%xmm0
    0.00 :   19a6e:  mov    %rax,0x40(%rsp)
         : 379   ./elf/../sysdeps/x86/dl-cacheinfo.h:956
    0.00 :   19a73:  lea    0xa0(%rsp),%rbp
    0.00 :   19a7b:  punpcklqdq %xmm4,%xmm0
    0.00 :   19a7f:  movaps %xmm0,0x20(%rsp)
         : 383   ./elf/../sysdeps/x86/dl-cacheinfo.h:953
    0.00 :   19a84:  call   17d70 <__tunable_get_val>
         : 385   ./elf/../sysdeps/x86/dl-cacheinfo.h:956
    0.00 :   19a89:  mov    0x38(%rsp),%rax
    0.00 :   19a8e:  mov    %r14,%rcx
    0.00 :   19a91:  mov    %r15,%rdx
         : 389   ./elf/../sysdeps/x86/dl-cacheinfo.h:953
    0.00 :   19a94:  mov    0xb0(%rsp),%r12
    0.00 :   19a9c:  movq   (%rsp),%xmm1
         : 392   ./elf/../sysdeps/x86/dl-cacheinfo.h:956
    0.00 :   19aa1:  mov    %rbp,%rsi
    0.00 :   19aa4:  mov    $0x1c,%edi
    0.00 :   19aa9:  mov    %rax,0xa0(%rsp)
    0.00 :   19ab1:  movq   %r12,%xmm5
    0.00 :   19ab6:  movq   $0xffffffffffffffff,0xb0(%rsp)
    0.00 :   19ac2:  movq   $0x0,0xa8(%rsp)
    0.00 :   19ace:  punpcklqdq %xmm5,%xmm1
    0.00 :   19ad2:  movaps %xmm1,(%rsp)
    0.00 :   19ad6:  call   17820 <__GI___tunable_set_val>
         : 402   ./elf/../sysdeps/x86/dl-cacheinfo.h:957
    0.00 :   19adb:  mov    0x30(%rsp),%rax
    0.00 :   19ae0:  mov    %r14,%rcx
    0.00 :   19ae3:  mov    %r15,%rdx
    0.00 :   19ae6:  mov    %rbp,%rsi
    0.00 :   19ae9:  mov    $0x4,%edi
    0.00 :   19aee:  movq   $0xffffffffffffffff,0xb0(%rsp)
    0.00 :   19afa:  mov    %rax,0xa0(%rsp)
    0.00 :   19b02:  movq   $0x0,0xa8(%rsp)
    0.00 :   19b0e:  call   17820 <__GI___tunable_set_val>
         : 412   ./elf/../sysdeps/x86/dl-cacheinfo.h:958
    0.00 :   19b13:  mov    %r14,%rcx
    0.00 :   19b16:  mov    %r15,%rdx
    0.00 :   19b19:  mov    %rbp,%rsi
    0.00 :   19b1c:  movabs $0xfffffffffffffff,%rax
    0.00 :   19b26:  mov    $0x10,%edi
    0.00 :   19b2b:  movq   $0x4040,0xa8(%rsp)
    0.00 :   19b37:  mov    %rax,0xb0(%rsp)
    0.00 :   19b3f:  mov    0x40(%rsp),%rax
    0.00 :   19b44:  mov    %rax,0xa0(%rsp)
    0.00 :   19b4c:  call   17820 <__GI___tunable_set_val>
         : 423   ./elf/../sysdeps/x86/dl-cacheinfo.h:961
    0.00 :   19b51:  mov    %r14,%rcx
    0.00 :   19b54:  mov    %r15,%rdx
    0.00 :   19b57:  mov    %rbp,%rsi
    0.00 :   19b5a:  mov    $0xa,%edi
    0.00 :   19b5f:  mov    %r13,0xa8(%rsp)
    0.00 :   19b67:  movq   $0xffffffffffffffff,0xb0(%rsp)
    0.00 :   19b73:  mov    %rbx,0xa0(%rsp)
    0.00 :   19b7b:  call   17820 <__GI___tunable_set_val>
         : 432   ./elf/../sysdeps/x86/dl-cacheinfo.h:963
    0.00 :   19b80:  mov    %r14,%rcx
    0.00 :   19b83:  mov    %r15,%rdx
    0.00 :   19b86:  mov    %rbp,%rsi
    0.00 :   19b89:  mov    $0xf,%edi
    0.00 :   19b8e:  mov    %r12,0xa0(%rsp)
    0.00 :   19b96:  movq   $0xffffffffffffffff,0xb0(%rsp)
    0.00 :   19ba2:  movq   $0x1,0xa8(%rsp)
    0.00 :   19bae:  call   17820 <__GI___tunable_set_val>
         : 441   ./elf/../sysdeps/x86/dl-cacheinfo.h:967
    0.00 :   19bb3:  movq   0x18(%rsp),%xmm2
         : 443   init_cpu_features():
         : 444   ./elf/../sysdeps/x86/cpu-features.c:706
    0.00 :   19bb9:  mov    %r14,%rsi
         : 446   dl_init_cacheinfo():
         : 447   ./elf/../sysdeps/x86/dl-cacheinfo.h:967
    0.00 :   19bbc:  movdqa 0x20(%rsp),%xmm0
    0.00 :   19bc2:  movdqa (%rsp),%xmm1
         : 450   init_cpu_features():
         : 451   ./elf/../sysdeps/x86/cpu-features.c:706
    0.00 :   19bc7:  lea    0x4d12(%rip),%rdx        # 1e8e0 <_dl_tunable_set_hwcaps>
    0.00 :   19bce:  mov    $0x18,%edi
         : 454   dl_init_cacheinfo():
         : 455   ./elf/../sysdeps/x86/dl-cacheinfo.h:967
    0.00 :   19bd3:  movhps 0x30(%rsp),%xmm2
    0.00 :   19bd8:  movups %xmm0,0x200d1(%rip)        # 39cb0 <_rtld_global_ro+0x1d0>
    0.00 :   19bdf:  movups %xmm2,0x200ba(%rip)        # 39ca0 <_rtld_global_ro+0x1c0>
    0.00 :   19be6:  movups %xmm1,0x200d3(%rip)        # 39cc0 <_rtld_global_ro+0x1e0>
         : 460   init_cpu_features():
         : 461   ./elf/../sysdeps/x86/cpu-features.c:706
    0.00 :   19bed:  call   17d70 <__tunable_get_val>
         : 463   ./elf/../sysdeps/x86/cpu-features.c:710
    0.00 :   19bf2:  mov    0x1ff84(%rip),%eax        # 39b7c <_rtld_global_ro+0x9c>
    0.00 :   19bf8:  test   $0x8000000,%eax
    0.00 :   19bfd:  je     19d48 <init_cpu_features.constprop.0+0x818>
         : 467   ./elf/../sysdeps/x86/cpu-features.c:724
    0.00 :   19c03:  mov    0x1ffcb(%rip),%edx        # 39bd4 <_rtld_global_ro+0xf4>
         : 469   ./elf/../sysdeps/x86/cpu-features.c:723
    0.00 :   19c09:  mov    %eax,%ecx
    0.00 :   19c0b:  and    $0x4000000,%ecx
         : 472   ./elf/../sysdeps/x86/cpu-features.c:724
    0.00 :   19c11:  and    $0x2,%edx
    0.00 :   19c14:  or     %ecx,%edx
    0.00 :   19c16:  jne    19c65 <init_cpu_features.constprop.0+0x735>
         : 476   ./elf/../sysdeps/x86/cpu-features.c:747
    0.00 :   19c18:  movq   0x1ff78(%rip),%xmm0        # 39b98 <_rtld_global_ro+0xb8>
         : 478   ./elf/../sysdeps/x86/cpu-features.c:736
    0.00 :   19c20:  and    $0xcfffefff,%eax
         : 480   ./elf/../sysdeps/x86/cpu-features.c:747
    0.00 :   19c25:  movq   0x1938b(%rip),%xmm1        # 32fb8 <__rseq_flags+0x8>
         : 482   ./elf/../sysdeps/x86/cpu-features.c:727
    0.00 :   19c2d:  movq   $0x0,0x20058(%rip)        # 39c90 <_rtld_global_ro+0x1b0>
         : 484   ./elf/../sysdeps/x86/cpu-features.c:753
    0.00 :   19c38:  andl   $0xffffffcf,0x1fff5(%rip)        # 39c34 <_rtld_global_ro+0x154>
         : 486   ./elf/../sysdeps/x86/cpu-features.c:757
    0.00 :   19c3f:  andl   $0xfc3ffef3,0x1ff57(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
         : 488   ./elf/../sysdeps/x86/cpu-features.c:747
    0.00 :   19c49:  pand   %xmm1,%xmm0
         : 490   ./elf/../sysdeps/x86/cpu-features.c:759
    0.00 :   19c4d:  andl   $0xfffef7ff,0x1ff65(%rip)        # 39bbc <_rtld_global_ro+0xdc>
         : 492   ./elf/../sysdeps/x86/cpu-features.c:736
    0.00 :   19c57:  mov    %eax,0x1ff1f(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 494   ./elf/../sysdeps/x86/cpu-features.c:747
    0.00 :   19c5d:  movq   %xmm0,0x1ff33(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 496   ./elf/../sysdeps/x86/cpu-features.c:771
    0.00 :   19c65:  cmpl   $0x1,0x1fee4(%rip)        # 39b50 <_rtld_global_ro+0x70>
         : 498   ./elf/../sysdeps/x86/cpu-features.c:770
    0.00 :   19c6c:  movq   $0x2,0x1fec9(%rip)        # 39b40 <_rtld_global_ro+0x60>
         : 500   ./elf/../sysdeps/x86/cpu-features.c:771
    0.00 :   19c77:  je     19d90 <init_cpu_features.constprop.0+0x860>
         : 502   ./elf/../sysdeps/x86/cpu-features.c:817
    0.00 :   19c7d:  mov    %r14,%rsi
    0.00 :   19c80:  lea    0x56b9(%rip),%rdx        # 1f340 <_dl_tunable_set_x86_ibt>
    0.00 :   19c87:  mov    $0x17,%edi
    0.00 :   19c8c:  call   17d70 <__tunable_get_val>
         : 507   ./elf/../sysdeps/x86/cpu-features.c:819
    0.00 :   19c91:  mov    %r14,%rsi
    0.00 :   19c94:  mov    $0x11,%edi
    0.00 :   19c99:  lea    0x5720(%rip),%rdx        # 1f3c0 <_dl_tunable_set_x86_shstk>
    0.00 :   19ca0:  call   17d70 <__tunable_get_val>
         : 512   get_cet_status():
         : 513   ./elf/../sysdeps/unix/sysv/linux/x86/cpu-features.c:27
    0.00 :   19ca5:  mov    %r14,%rsi
    0.00 :   19ca8:  mov    $0x3001,%edi
    0.00 :   19cad:  mov    $0x9e,%eax
    0.00 :   19cb2:  syscall
    0.00 :   19cb4:  test   %rax,%rax
    0.00 :   19cb7:  je     19d60 <init_cpu_features.constprop.0+0x830>
         : 520   init_cpu_features():
         : 521   ./elf/../sysdeps/x86/cpu-features.c:829
    0.00 :   19cbd:  movabs $0xffefffffffffff7f,%rax
    0.00 :   19cc7:  and    %rax,0x1fece(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 524   ./elf/../sysdeps/x86/cpu-features.c:874
    0.00 :   19cce:  add    $0xd8,%rsp
    0.00 :   19cd5:  pop    %rbx
    0.00 :   19cd6:  pop    %rbp
    0.00 :   19cd7:  pop    %r12
    0.00 :   19cd9:  pop    %r13
    0.00 :   19cdb:  pop    %r14
    0.00 :   19cdd:  pop    %r15
    0.00 :   19cdf:  ret
         : 533   ./elf/../sysdeps/x86/cpu-features.c:589
    0.00 :   19ce0:  cmp    $0x6f677948,%ebx
    0.00 :   19ce6:  jne    19e30 <init_cpu_features.constprop.0+0x900>
    0.00 :   19cec:  cmp    $0x656e6975,%ecx
    0.00 :   19cf2:  jne    19e30 <init_cpu_features.constprop.0+0x900>
    0.00 :   19cf8:  cmp    $0x6e65476e,%edx
    0.00 :   19cfe:  jne    19590 <init_cpu_features.constprop.0+0x60>
    0.00 :   19d04:  jmp    19704 <init_cpu_features.constprop.0+0x1d4>
    0.00 :   19d09:  nopl   0x0(%rax)
         : 542   dl_init_cacheinfo():
         : 543   ./elf/../sysdeps/x86/dl-cacheinfo.h:893
    0.00 :   19d10:  and    $0x200,%eax
    0.00 :   19d15:  cmp    $0x1,%eax
    0.00 :   19d18:  sbb    %rbp,%rbp
    0.00 :   19d1b:  and    $0xffffffffffffe800,%rbp
    0.00 :   19d22:  add    $0x2000,%rbp
    0.00 :   19d29:  cmp    $0x1,%eax
    0.00 :   19d2c:  sbb    %r13,%r13
    0.00 :   19d2f:  mov    %rbp,%rbx
    0.00 :   19d32:  and    $0xffffffffffffff80,%r13
    0.00 :   19d36:  add    $0x100,%r13
    0.00 :   19d3d:  jmp    19982 <init_cpu_features.constprop.0+0x452>
    0.00 :   19d42:  nopw   0x0(%rax,%rax,1)
         : 556   init_cpu_features():
         : 557   ./elf/../sysdeps/x86/cpu-features.c:717
    0.00 :   19d48:  andl   $0xffffffe8,0x1fe85(%rip)        # 39bd4 <_rtld_global_ro+0xf4>
         : 559   ./elf/../sysdeps/x86/cpu-features.c:713
    0.00 :   19d4f:  and    $0xfbffffff,%eax
         : 561   ./elf/../sysdeps/x86/cpu-features.c:722
    0.00 :   19d54:  jmp    19c18 <init_cpu_features.constprop.0+0x6e8>
    0.00 :   19d59:  nopl   0x0(%rax)
         : 564   get_cet_status():
         : 565   ./elf/../sysdeps/unix/sysv/linux/x86/cpu-features.c:28
    0.00 :   19d60:  mov    0xb0(%rsp),%rax
         : 567   init_cpu_features():
         : 568   ./elf/../sysdeps/x86/cpu-features.c:828
    0.00 :   19d68:  mov    %eax,%edx
    0.00 :   19d6a:  and    $0x2,%edx
         : 571   ./elf/../sysdeps/x86/cpu-features.c:826
    0.00 :   19d6d:  test   $0x1,%al
    0.00 :   19d6f:  je     1a764 <init_cpu_features.constprop.0+0x1234>
         : 574   ./elf/../sysdeps/x86/cpu-features.c:828
    0.00 :   19d75:  test   %edx,%edx
    0.00 :   19d77:  je     1a74d <init_cpu_features.constprop.0+0x121d>
         : 577   ./elf/../sysdeps/x86/cpu-features.c:833
    0.00 :   19d7d:  mov    %eax,0x212f5(%rip)        # 3b078 <_rtld_global+0x1038>
    0.00 :   19d83:  jmp    19cce <init_cpu_features.constprop.0+0x79e>
    0.00 :   19d88:  nopl   0x0(%rax,%rax,1)
         : 581   ./elf/../sysdeps/x86/cpu-features.c:775
    0.00 :   19d90:  mov    0x1fe02(%rip),%edx        # 39b98 <_rtld_global_ro+0xb8>
    0.00 :   19d96:  test   $0x10000000,%edx
    0.00 :   19d9c:  je     19de0 <init_cpu_features.constprop.0+0x8b0>
         : 585   ./elf/../sysdeps/x86/cpu-features.c:777
    0.00 :   19d9e:  test   $0x8000000,%edx
    0.00 :   19da4:  je     19dc8 <init_cpu_features.constprop.0+0x898>
         : 588   ./elf/../sysdeps/x86/cpu-features.c:779
    0.00 :   19da6:  test   $0x4000000,%edx
    0.00 :   19dac:  je     19de0 <init_cpu_features.constprop.0+0x8b0>
         : 591   ./elf/../sysdeps/x86/cpu-features.c:780
    0.00 :   19dae:  lea    0x14530(%rip),%rax        # 2e2e5 <_sys_errnameidx+0x9e5>
         : 593   ./elf/../sysdeps/x86/cpu-features.c:802
    0.00 :   19db5:  mov    %rax,0x1fd2c(%rip)        # 39ae8 <_rtld_global_ro+0x8>
    0.00 :   19dbc:  jmp    19c7d <init_cpu_features.constprop.0+0x74d>
    0.00 :   19dc1:  nopl   0x0(%rax)
         : 597   ./elf/../sysdeps/x86/cpu-features.c:785
    0.00 :   19dc8:  mov    %edx,%ecx
    0.00 :   19dca:  and    $0x40020000,%ecx
         : 600   ./elf/../sysdeps/x86/cpu-features.c:784
    0.00 :   19dd0:  cmp    $0x40020000,%ecx
    0.00 :   19dd6:  je     1a530 <init_cpu_features.constprop.0+0x1000>
    0.00 :   19ddc:  nopl   0x0(%rax)
         : 604   ./elf/../sysdeps/x86/cpu-features.c:792
    0.00 :   19de0:  test   $0x20,%dl
    0.00 :   19de3:  je     19c7d <init_cpu_features.constprop.0+0x74d>
         : 607   ./elf/../sysdeps/x86/cpu-features.c:793
    0.00 :   19de9:  test   $0x10,%ah
    0.00 :   19dec:  je     19c7d <init_cpu_features.constprop.0+0x74d>
         : 610   ./elf/../sysdeps/x86/cpu-features.c:795
    0.00 :   19df2:  and    $0x108,%edx
    0.00 :   19df8:  cmp    $0x108,%edx
    0.00 :   19dfe:  jne    19c7d <init_cpu_features.constprop.0+0x74d>
         : 614   ./elf/../sysdeps/x86/cpu-features.c:796
    0.00 :   19e04:  testb  $0x20,0x1fdb1(%rip)        # 39bbc <_rtld_global_ro+0xdc>
    0.00 :   19e0b:  je     19c7d <init_cpu_features.constprop.0+0x74d>
         : 617   ./elf/../sysdeps/x86/cpu-features.c:798
    0.00 :   19e11:  and    $0xc00000,%eax
    0.00 :   19e16:  cmp    $0xc00000,%eax
    0.00 :   19e1b:  jne    19c7d <init_cpu_features.constprop.0+0x74d>
         : 621   ./elf/../sysdeps/x86/cpu-features.c:799
    0.00 :   19e21:  lea    0x144b5(%rip),%rax        # 2e2dd <_sys_errnameidx+0x9dd>
    0.00 :   19e28:  jmp    19db5 <init_cpu_features.constprop.0+0x885>
    0.00 :   19e2a:  nopw   0x0(%rax,%rax,1)
         : 625   ./elf/../sysdeps/x86/cpu-features.c:627
    0.00 :   19e30:  cmp    $0x746e6543,%ebx
    0.00 :   19e36:  jne    1a341 <init_cpu_features.constprop.0+0xe11>
    0.00 :   19e3c:  cmp    $0x736c7561,%ecx
    0.00 :   19e42:  jne    1a341 <init_cpu_features.constprop.0+0xe11>
    0.00 :   19e48:  cmp    $0x48727561,%edx
    0.00 :   19e4e:  jne    19590 <init_cpu_features.constprop.0+0x60>
         : 632   ./elf/../sysdeps/x86/cpu-features.c:634
    0.00 :   19e54:  lea    0xb0(%rsp),%r14
    0.00 :   19e5c:  lea    0xa8(%rsp),%r15
    0.00 :   19e64:  lea    0x8c(%rsp),%rsi
    0.00 :   19e6c:  lea    0x88(%rsp),%rdi
    0.00 :   19e74:  mov    %r14,%rcx
    0.00 :   19e77:  mov    %r15,%rdx
    0.00 :   19e7a:  call   185e0 <get_common_indices.constprop.0>
         : 640   get_extended_indices():
         : 641   ./elf/../sysdeps/x86/cpu-features.c:303
    0.00 :   19e7f:  mov    $0x80000000,%eax
    0.00 :   19e84:  cpuid
    0.00 :   19e86:  mov    %eax,%esi
         : 645   ./elf/../sysdeps/x86/cpu-features.c:304
    0.00 :   19e88:  cmp    $0x80000000,%eax
    0.00 :   19e8d:  jbe    19efc <init_cpu_features.constprop.0+0x9cc>
         : 648   ./elf/../sysdeps/x86/cpu-features.c:305
    0.00 :   19e8f:  mov    $0x80000001,%eax
    0.00 :   19e94:  cpuid
    0.00 :   19e96:  mov    %eax,0x1fd08(%rip)        # 39ba4 <_rtld_global_ro+0xc4>
    0.00 :   19e9c:  mov    %ebx,0x1fd06(%rip)        # 39ba8 <_rtld_global_ro+0xc8>
    0.00 :   19ea2:  mov    %ecx,0x1fd04(%rip)        # 39bac <_rtld_global_ro+0xcc>
    0.00 :   19ea8:  mov    %edx,0x1fd02(%rip)        # 39bb0 <_rtld_global_ro+0xd0>
         : 655   ./elf/../sysdeps/x86/cpu-features.c:310
    0.00 :   19eae:  cmp    $0x80000006,%esi
    0.00 :   19eb4:  jbe    19efc <init_cpu_features.constprop.0+0x9cc>
         : 658   ./elf/../sysdeps/x86/cpu-features.c:311
    0.00 :   19eb6:  mov    $0x80000007,%eax
    0.00 :   19ebb:  cpuid
    0.00 :   19ebd:  mov    %eax,0x1fd21(%rip)        # 39be4 <_rtld_global_ro+0x104>
    0.00 :   19ec3:  mov    %ebx,0x1fd1f(%rip)        # 39be8 <_rtld_global_ro+0x108>
    0.00 :   19ec9:  mov    %ecx,0x1fd1d(%rip)        # 39bec <_rtld_global_ro+0x10c>
    0.00 :   19ecf:  mov    %edx,0x1fd1b(%rip)        # 39bf0 <_rtld_global_ro+0x110>
         : 665   ./elf/../sysdeps/x86/cpu-features.c:316
    0.00 :   19ed5:  cmp    $0x80000007,%esi
    0.00 :   19edb:  je     19efc <init_cpu_features.constprop.0+0x9cc>
         : 668   ./elf/../sysdeps/x86/cpu-features.c:317
    0.00 :   19edd:  mov    $0x80000008,%eax
    0.00 :   19ee2:  cpuid
    0.00 :   19ee4:  mov    %eax,0x1fd1a(%rip)        # 39c04 <_rtld_global_ro+0x124>
    0.00 :   19eea:  mov    %ebx,0x1fd18(%rip)        # 39c08 <_rtld_global_ro+0x128>
    0.00 :   19ef0:  mov    %ecx,0x1fd16(%rip)        # 39c0c <_rtld_global_ro+0x12c>
    0.00 :   19ef6:  mov    %edx,0x1fd14(%rip)        # 39c10 <_rtld_global_ro+0x130>
         : 675   init_cpu_features():
         : 676   ./elf/../sysdeps/x86/cpu-features.c:639
    0.00 :   19efc:  call   19010 <update_active.constprop.0>
         : 678   ./elf/../sysdeps/x86/cpu-features.c:642
    0.00 :   19f01:  mov    0x88(%rsp),%r10d
         : 680   ./elf/../sysdeps/x86/cpu-features.c:641
    0.00 :   19f09:  mov    0xa8(%rsp),%eax
    0.00 :   19f10:  add    0x8c(%rsp),%eax
    0.00 :   19f17:  mov    %eax,0x8c(%rsp)
         : 684   ./elf/../sysdeps/x86/cpu-features.c:642
    0.00 :   19f1e:  cmp    $0x6,%r10d
    0.00 :   19f22:  je     1a0a8 <init_cpu_features.constprop.0+0xb78>
         : 687   ./elf/../sysdeps/x86/cpu-features.c:656
    0.00 :   19f28:  cmp    $0x7,%r10d
    0.00 :   19f2c:  je     1a550 <init_cpu_features.constprop.0+0x1020>
         : 690   ./elf/../sysdeps/x86/cpu-features.c:701
    0.00 :   19f32:  mov    0x90(%rsp),%edx
         : 692   ./elf/../sysdeps/x86/cpu-features.c:632
    0.00 :   19f39:  mov    $0x3,%r8d
         : 694   ./elf/../sysdeps/x86/cpu-features.c:629
    0.00 :   19f3f:  jmp    197f6 <init_cpu_features.constprop.0+0x2c6>
    0.00 :   19f44:  nopl   0x0(%rax)
         : 697   dl_init_cacheinfo():
         : 698   ./elf/../sysdeps/x86/dl-cacheinfo.h:724
    0.00 :   19f48:  mov    $0xbc,%edi
    0.00 :   19f4d:  mov    %r8d,0x7c(%rsp)
    0.00 :   19f52:  call   18f10 <handle_intel.constprop.0>
         : 702   ./elf/../sysdeps/x86/dl-cacheinfo.h:725
    0.00 :   19f57:  mov    $0xbf,%edi
         : 704   ./elf/../sysdeps/x86/dl-cacheinfo.h:724
    0.00 :   19f5c:  mov    %rax,%rbp
    0.00 :   19f5f:  mov    %rax,0x38(%rsp)
         : 707   ./elf/../sysdeps/x86/dl-cacheinfo.h:725
    0.00 :   19f64:  call   18f10 <handle_intel.constprop.0>
         : 709   ./elf/../sysdeps/x86/dl-cacheinfo.h:726
    0.00 :   19f69:  mov    $0xc2,%edi
         : 711   ./elf/../sysdeps/x86/dl-cacheinfo.h:725
    0.00 :   19f6e:  mov    %rax,%rbx
         : 713   ./elf/../sysdeps/x86/dl-cacheinfo.h:726
    0.00 :   19f71:  call   18f10 <handle_intel.constprop.0>
         : 715   ./elf/../sysdeps/x86/dl-cacheinfo.h:729
    0.00 :   19f76:  mov    $0xb9,%edi
         : 717   ./elf/../sysdeps/x86/dl-cacheinfo.h:726
    0.00 :   19f7b:  mov    %rax,0x98(%rsp)
    0.00 :   19f83:  mov    %rax,%r13
         : 720   ./elf/../sysdeps/x86/dl-cacheinfo.h:729
    0.00 :   19f86:  call   18f10 <handle_intel.constprop.0>
         : 722   ./elf/../sysdeps/x86/dl-cacheinfo.h:731
    0.00 :   19f8b:  mov    $0xbb,%edi
         : 724   ./elf/../sysdeps/x86/dl-cacheinfo.h:729
    0.00 :   19f90:  mov    %rax,0x20(%rsp)
         : 726   ./elf/../sysdeps/x86/dl-cacheinfo.h:731
    0.00 :   19f95:  call   18f10 <handle_intel.constprop.0>
         : 728   ./elf/../sysdeps/x86/dl-cacheinfo.h:734
    0.00 :   19f9a:  mov    $0xbd,%edi
         : 730   ./elf/../sysdeps/x86/dl-cacheinfo.h:732
    0.00 :   19f9f:  mov    %rbp,0x18(%rsp)
         : 732   ./elf/../sysdeps/x86/dl-cacheinfo.h:731
    0.00 :   19fa4:  mov    %rax,0x40(%rsp)
         : 734   ./elf/../sysdeps/x86/dl-cacheinfo.h:734
    0.00 :   19fa9:  call   18f10 <handle_intel.constprop.0>
         : 736   ./elf/../sysdeps/x86/dl-cacheinfo.h:736
    0.00 :   19fae:  mov    $0xbe,%edi
         : 738   ./elf/../sysdeps/x86/dl-cacheinfo.h:734
    0.00 :   19fb3:  mov    %rax,0x48(%rsp)
         : 740   ./elf/../sysdeps/x86/dl-cacheinfo.h:736
    0.00 :   19fb8:  call   18f10 <handle_intel.constprop.0>
         : 742   ./elf/../sysdeps/x86/dl-cacheinfo.h:739
    0.00 :   19fbd:  mov    $0xc0,%edi
         : 744   ./elf/../sysdeps/x86/dl-cacheinfo.h:737
    0.00 :   19fc2:  mov    %rbx,(%rsp)
         : 746   ./elf/../sysdeps/x86/dl-cacheinfo.h:736
    0.00 :   19fc6:  mov    %rax,0x50(%rsp)
         : 748   ./elf/../sysdeps/x86/dl-cacheinfo.h:739
    0.00 :   19fcb:  call   18f10 <handle_intel.constprop.0>
         : 750   ./elf/../sysdeps/x86/dl-cacheinfo.h:741
    0.00 :   19fd0:  mov    $0xc1,%edi
         : 752   ./elf/../sysdeps/x86/dl-cacheinfo.h:739
    0.00 :   19fd5:  mov    %rax,0x58(%rsp)
         : 754   ./elf/../sysdeps/x86/dl-cacheinfo.h:741
    0.00 :   19fda:  call   18f10 <handle_intel.constprop.0>
         : 756   ./elf/../sysdeps/x86/dl-cacheinfo.h:744
    0.00 :   19fdf:  mov    $0xc3,%edi
         : 758   ./elf/../sysdeps/x86/dl-cacheinfo.h:741
    0.00 :   19fe4:  mov    %rax,0x60(%rsp)
         : 760   ./elf/../sysdeps/x86/dl-cacheinfo.h:744
    0.00 :   19fe9:  call   18f10 <handle_intel.constprop.0>
         : 762   ./elf/../sysdeps/x86/dl-cacheinfo.h:746
    0.00 :   19fee:  mov    $0xc4,%edi
         : 764   ./elf/../sysdeps/x86/dl-cacheinfo.h:744
    0.00 :   19ff3:  mov    %rax,0x68(%rsp)
         : 766   ./elf/../sysdeps/x86/dl-cacheinfo.h:746
    0.00 :   19ff8:  call   18f10 <handle_intel.constprop.0>
         : 768   ./elf/../sysdeps/x86/dl-cacheinfo.h:748
    0.00 :   19ffd:  mov    $0xc5,%edi
         : 770   ./elf/../sysdeps/x86/dl-cacheinfo.h:746
    0.00 :   1a002:  mov    %rax,%rbp
         : 772   ./elf/../sysdeps/x86/dl-cacheinfo.h:748
    0.00 :   1a005:  call   18f10 <handle_intel.constprop.0>
         : 774   ./elf/../sysdeps/x86/dl-cacheinfo.h:750
    0.00 :   1a00a:  lea    0x94(%rsp),%rsi
    0.00 :   1a012:  lea    0x98(%rsp),%rdi
    0.00 :   1a01a:  mov    %rbx,%rdx
         : 778   ./elf/../sysdeps/x86/dl-cacheinfo.h:748
    0.00 :   1a01d:  mov    %rax,0x70(%rsp)
         : 780   ./elf/../sysdeps/x86/dl-cacheinfo.h:750
    0.00 :   1a022:  call   18780 <get_common_cache_info.constprop.0>
         : 782   ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a027:  mov    0x98(%rsp),%rax
    0.00 :   1a02f:  mov    0x7c(%rsp),%r8d
    0.00 :   1a034:  mov    %rax,0x30(%rsp)
    0.00 :   1a039:  lea    (%rax,%rax,2),%rax
    0.00 :   1a03d:  test   %rax,%rax
    0.00 :   1a040:  lea    0x3(%rax),%r12
    0.00 :   1a044:  cmovns %rax,%r12
    0.00 :   1a048:  movabs $0xfffffffffffffff,%rax
    0.00 :   1a052:  sar    $0x2,%r12
    0.00 :   1a056:  cmp    %rax,%r12
    0.00 :   1a059:  cmova  %rax,%r12
    0.00 :   1a05d:  mov    $0x4040,%eax
    0.00 :   1a062:  cmp    %rax,%r12
    0.00 :   1a065:  cmovb  %rax,%r12
    0.00 :   1a069:  jmp    198ed <init_cpu_features.constprop.0+0x3bd>
    0.00 :   1a06e:  xchg   %ax,%ax
         : 799   dl_check_minsigstacksize():
         : 800   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:81
    0.00 :   1a070:  movq   $0x800,0x1fa85(%rip)        # 39b00 <_rtld_global_ro+0x20>
    0.00 :   1a07b:  jmp    196a0 <init_cpu_features.constprop.0+0x170>
         : 803   init_cpu_features():
         : 804   ./elf/../sysdeps/x86/cpu-features.c:614
    0.00 :   1a080:  lea    -0x60(%rax),%edx
    0.00 :   1a083:  cmp    $0x1f,%edx
    0.00 :   1a086:  ja     197e1 <init_cpu_features.constprop.0+0x2b1>
         : 808   ./elf/../sysdeps/x86/cpu-features.c:622
    0.00 :   1a08c:  mov    0x1fbf2(%rip),%edx        # 39c84 <_rtld_global_ro+0x1a4>
    0.00 :   1a092:  and    $0xfd,%dh
    0.00 :   1a095:  or     $0xa,%edx
    0.00 :   1a098:  mov    %edx,0x1fbe6(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
    0.00 :   1a09e:  jmp    197e1 <init_cpu_features.constprop.0+0x2b1>
    0.00 :   1a0a3:  nopl   0x0(%rax,%rax,1)
         : 815   ./elf/../sysdeps/x86/cpu-features.c:644
    0.00 :   1a0a8:  cmp    $0xf,%eax
    0.00 :   1a0ab:  je     1a0b6 <init_cpu_features.constprop.0+0xb86>
    0.00 :   1a0ad:  cmp    $0x19,%eax
    0.00 :   1a0b0:  jne    19f32 <init_cpu_features.constprop.0+0xa02>
         : 820   ./elf/../sysdeps/x86/cpu-features.c:653
    0.00 :   1a0b6:  mov    0x1fbc8(%rip),%edx        # 39c84 <_rtld_global_ro+0x1a4>
         : 822   ./elf/../sysdeps/x86/cpu-features.c:647
    0.00 :   1a0bc:  andl   $0xffffffdf,0x1fad5(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 824   ./elf/../sysdeps/x86/cpu-features.c:646
    0.00 :   1a0c3:  andl   $0xefffffff,0x1faaf(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 826   ./elf/../sysdeps/x86/cpu-features.c:653
    0.00 :   1a0cd:  and    $0xfd,%dh
    0.00 :   1a0d0:  or     $0x1,%dh
    0.00 :   1a0d3:  mov    %edx,0x1fbab(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
    0.00 :   1a0d9:  jmp    19f32 <init_cpu_features.constprop.0+0xa02>
    0.00 :   1a0de:  xchg   %ax,%ax
         : 832   dl_init_cacheinfo():
         : 833   ./elf/../sysdeps/x86/dl-cacheinfo.h:754
    0.00 :   1a0e0:  mov    $0xbc,%edi
    0.00 :   1a0e5:  mov    %r8d,0x7c(%rsp)
    0.00 :   1a0ea:  call   18220 <handle_zhaoxin>
         : 837   ./elf/../sysdeps/x86/dl-cacheinfo.h:755
    0.00 :   1a0ef:  mov    $0xbf,%edi
         : 839   ./elf/../sysdeps/x86/dl-cacheinfo.h:754
    0.00 :   1a0f4:  mov    %rax,%rbp
    0.00 :   1a0f7:  mov    %rax,0x38(%rsp)
         : 842   ./elf/../sysdeps/x86/dl-cacheinfo.h:755
    0.00 :   1a0fc:  call   18220 <handle_zhaoxin>
         : 844   ./elf/../sysdeps/x86/dl-cacheinfo.h:756
    0.00 :   1a101:  mov    $0xc2,%edi
         : 846   ./elf/../sysdeps/x86/dl-cacheinfo.h:755
    0.00 :   1a106:  mov    %rax,%rbx
         : 848   ./elf/../sysdeps/x86/dl-cacheinfo.h:756
    0.00 :   1a109:  call   18220 <handle_zhaoxin>
         : 850   ./elf/../sysdeps/x86/dl-cacheinfo.h:758
    0.00 :   1a10e:  mov    $0xb9,%edi
         : 852   ./elf/../sysdeps/x86/dl-cacheinfo.h:756
    0.00 :   1a113:  mov    %rax,0x98(%rsp)
    0.00 :   1a11b:  mov    %rax,%r13
         : 855   ./elf/../sysdeps/x86/dl-cacheinfo.h:758
    0.00 :   1a11e:  call   18220 <handle_zhaoxin>
         : 857   ./elf/../sysdeps/x86/dl-cacheinfo.h:759
    0.00 :   1a123:  mov    $0xbb,%edi
         : 859   ./elf/../sysdeps/x86/dl-cacheinfo.h:758
    0.00 :   1a128:  mov    %rax,0x20(%rsp)
         : 861   ./elf/../sysdeps/x86/dl-cacheinfo.h:759
    0.00 :   1a12d:  call   18220 <handle_zhaoxin>
         : 863   ./elf/../sysdeps/x86/dl-cacheinfo.h:761
    0.00 :   1a132:  mov    $0xbd,%edi
         : 865   ./elf/../sysdeps/x86/dl-cacheinfo.h:760
    0.00 :   1a137:  mov    %rbp,0x18(%rsp)
         : 867   ./elf/../sysdeps/x86/dl-cacheinfo.h:759
    0.00 :   1a13c:  mov    %rax,0x40(%rsp)
         : 869   ./elf/../sysdeps/x86/dl-cacheinfo.h:761
    0.00 :   1a141:  call   18220 <handle_zhaoxin>
         : 871   ./elf/../sysdeps/x86/dl-cacheinfo.h:762
    0.00 :   1a146:  mov    $0xbe,%edi
         : 873   ./elf/../sysdeps/x86/dl-cacheinfo.h:761
    0.00 :   1a14b:  mov    %rax,0x48(%rsp)
         : 875   ./elf/../sysdeps/x86/dl-cacheinfo.h:762
    0.00 :   1a150:  call   18220 <handle_zhaoxin>
         : 877   ./elf/../sysdeps/x86/dl-cacheinfo.h:764
    0.00 :   1a155:  mov    $0xc0,%edi
         : 879   ./elf/../sysdeps/x86/dl-cacheinfo.h:763
    0.00 :   1a15a:  mov    %rbx,(%rsp)
         : 881   ./elf/../sysdeps/x86/dl-cacheinfo.h:762
    0.00 :   1a15e:  mov    %rax,0x50(%rsp)
         : 883   ./elf/../sysdeps/x86/dl-cacheinfo.h:764
    0.00 :   1a163:  call   18220 <handle_zhaoxin>
         : 885   ./elf/../sysdeps/x86/dl-cacheinfo.h:765
    0.00 :   1a168:  mov    $0xc1,%edi
         : 887   ./elf/../sysdeps/x86/dl-cacheinfo.h:764
    0.00 :   1a16d:  mov    %rax,0x58(%rsp)
         : 889   ./elf/../sysdeps/x86/dl-cacheinfo.h:765
    0.00 :   1a172:  call   18220 <handle_zhaoxin>
         : 891   ./elf/../sysdeps/x86/dl-cacheinfo.h:767
    0.00 :   1a177:  mov    $0xc3,%edi
         : 893   ./elf/../sysdeps/x86/dl-cacheinfo.h:765
    0.00 :   1a17c:  mov    %rax,0x60(%rsp)
         : 895   ./elf/../sysdeps/x86/dl-cacheinfo.h:767
    0.00 :   1a181:  call   18220 <handle_zhaoxin>
         : 897   ./elf/../sysdeps/x86/dl-cacheinfo.h:768
    0.00 :   1a186:  mov    $0xc4,%edi
         : 899   ./elf/../sysdeps/x86/dl-cacheinfo.h:767
    0.00 :   1a18b:  mov    %rax,0x68(%rsp)
         : 901   ./elf/../sysdeps/x86/dl-cacheinfo.h:768
    0.00 :   1a190:  call   18220 <handle_zhaoxin>
         : 903   ./elf/../sysdeps/x86/dl-cacheinfo.h:770
    0.00 :   1a195:  lea    0x94(%rsp),%rsi
    0.00 :   1a19d:  lea    0x98(%rsp),%rdi
    0.00 :   1a1a5:  mov    %rbx,%rdx
         : 907   ./elf/../sysdeps/x86/dl-cacheinfo.h:768
    0.00 :   1a1a8:  mov    %rax,%rbp
         : 909   ./elf/../sysdeps/x86/dl-cacheinfo.h:770
    0.00 :   1a1ab:  call   18780 <get_common_cache_info.constprop.0>
         : 911   ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a1b0:  mov    0x98(%rsp),%rax
    0.00 :   1a1b8:  mov    0x7c(%rsp),%r8d
         : 914   ./elf/../sysdeps/x86/dl-cacheinfo.h:720
    0.00 :   1a1bd:  movq   $0xffffffffffffffff,0x70(%rsp)
         : 916   ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a1c6:  mov    %rax,0x30(%rsp)
    0.00 :   1a1cb:  lea    (%rax,%rax,2),%rax
    0.00 :   1a1cf:  test   %rax,%rax
    0.00 :   1a1d2:  lea    0x3(%rax),%r12
    0.00 :   1a1d6:  cmovns %rax,%r12
    0.00 :   1a1da:  movabs $0xfffffffffffffff,%rax
    0.00 :   1a1e4:  sar    $0x2,%r12
    0.00 :   1a1e8:  cmp    %rax,%r12
    0.00 :   1a1eb:  cmova  %rax,%r12
    0.00 :   1a1ef:  mov    $0x4040,%eax
    0.00 :   1a1f4:  cmp    %rax,%r12
    0.00 :   1a1f7:  cmovb  %rax,%r12
    0.00 :   1a1fb:  jmp    198ed <init_cpu_features.constprop.0+0x3bd>
         : 930   ./elf/../sysdeps/x86/dl-cacheinfo.h:774
    0.00 :   1a200:  mov    $0xbc,%edi
    0.00 :   1a205:  mov    %r8d,0x70(%rsp)
    0.00 :   1a20a:  call   18400 <handle_amd>
         : 934   ./elf/../sysdeps/x86/dl-cacheinfo.h:775
    0.00 :   1a20f:  mov    $0xbf,%edi
         : 936   ./elf/../sysdeps/x86/dl-cacheinfo.h:774
    0.00 :   1a214:  mov    %rax,%rbx
    0.00 :   1a217:  mov    %rax,0x38(%rsp)
         : 939   ./elf/../sysdeps/x86/dl-cacheinfo.h:775
    0.00 :   1a21c:  call   18400 <handle_amd>
         : 941   ./elf/../sysdeps/x86/dl-cacheinfo.h:776
    0.00 :   1a221:  mov    $0xc2,%edi
         : 943   ./elf/../sysdeps/x86/dl-cacheinfo.h:775
    0.00 :   1a226:  mov    %rax,%r11
    0.00 :   1a229:  mov    %rax,0x30(%rsp)
         : 946   ./elf/../sysdeps/x86/dl-cacheinfo.h:776
    0.00 :   1a22e:  call   18400 <handle_amd>
         : 948   ./elf/../sysdeps/x86/dl-cacheinfo.h:778
    0.00 :   1a233:  mov    $0xb9,%edi
         : 950   ./elf/../sysdeps/x86/dl-cacheinfo.h:776
    0.00 :   1a238:  mov    %rax,%r9
    0.00 :   1a23b:  mov    %rax,0x98(%rsp)
         : 953   ./elf/../sysdeps/x86/dl-cacheinfo.h:778
    0.00 :   1a243:  call   18400 <handle_amd>
         : 955   ./elf/../sysdeps/x86/dl-cacheinfo.h:779
    0.00 :   1a248:  mov    $0xbb,%edi
         : 957   ./elf/../sysdeps/x86/dl-cacheinfo.h:786
    0.00 :   1a24d:  mov    %r9,%r13
         : 959   ./elf/../sysdeps/x86/dl-cacheinfo.h:778
    0.00 :   1a250:  mov    %rax,0x20(%rsp)
         : 961   ./elf/../sysdeps/x86/dl-cacheinfo.h:779
    0.00 :   1a255:  call   18400 <handle_amd>
         : 963   ./elf/../sysdeps/x86/dl-cacheinfo.h:781
    0.00 :   1a25a:  mov    $0xbd,%edi
         : 965   ./elf/../sysdeps/x86/dl-cacheinfo.h:780
    0.00 :   1a25f:  mov    %rbx,0x18(%rsp)
         : 967   ./elf/../sysdeps/x86/dl-cacheinfo.h:779
    0.00 :   1a264:  mov    %rax,0x40(%rsp)
         : 969   ./elf/../sysdeps/x86/dl-cacheinfo.h:781
    0.00 :   1a269:  call   18400 <handle_amd>
         : 971   ./elf/../sysdeps/x86/dl-cacheinfo.h:782
    0.00 :   1a26e:  mov    $0xbe,%edi
         : 973   ./elf/../sysdeps/x86/dl-cacheinfo.h:781
    0.00 :   1a273:  mov    %rax,0x48(%rsp)
         : 975   ./elf/../sysdeps/x86/dl-cacheinfo.h:782
    0.00 :   1a278:  call   18400 <handle_amd>
         : 977   ./elf/../sysdeps/x86/dl-cacheinfo.h:784
    0.00 :   1a27d:  mov    $0xc0,%edi
         : 979   ./elf/../sysdeps/x86/dl-cacheinfo.h:783
    0.00 :   1a282:  mov    %r11,(%rsp)
         : 981   ./elf/../sysdeps/x86/dl-cacheinfo.h:782
    0.00 :   1a286:  mov    %rax,0x50(%rsp)
         : 983   ./elf/../sysdeps/x86/dl-cacheinfo.h:784
    0.00 :   1a28b:  call   18400 <handle_amd>
         : 985   ./elf/../sysdeps/x86/dl-cacheinfo.h:785
    0.00 :   1a290:  mov    $0xc1,%edi
         : 987   ./elf/../sysdeps/x86/dl-cacheinfo.h:784
    0.00 :   1a295:  mov    %rax,0x58(%rsp)
         : 989   ./elf/../sysdeps/x86/dl-cacheinfo.h:785
    0.00 :   1a29a:  call   18400 <handle_amd>
         : 991   ./elf/../sysdeps/x86/dl-cacheinfo.h:787
    0.00 :   1a29f:  mov    $0xc3,%edi
         : 993   ./elf/../sysdeps/x86/dl-cacheinfo.h:785
    0.00 :   1a2a4:  mov    %rax,0x60(%rsp)
         : 995   ./elf/../sysdeps/x86/dl-cacheinfo.h:787
    0.00 :   1a2a9:  call   18400 <handle_amd>
         : 997   ./elf/../sysdeps/x86/dl-cacheinfo.h:788
    0.00 :   1a2ae:  mov    $0xc4,%edi
         : 999   ./elf/../sysdeps/x86/dl-cacheinfo.h:787
    0.00 :   1a2b3:  mov    %rax,0x68(%rsp)
         : 1001  ./elf/../sysdeps/x86/dl-cacheinfo.h:788
    0.00 :   1a2b8:  call   18400 <handle_amd>
    0.00 :   1a2bd:  mov    %rax,%rbp
         : 1004  ./elf/../sysdeps/x86/dl-cacheinfo.h:791
    0.00 :   1a2c0:  mov    $0x80000000,%eax
    0.00 :   1a2c5:  cpuid
         : 1007  ./elf/../sysdeps/x86/dl-cacheinfo.h:793
    0.00 :   1a2c7:  test   %r9,%r9
    0.00 :   1a2ca:  mov    0x70(%rsp),%r8d
    0.00 :   1a2cf:  jle    1a498 <init_cpu_features.constprop.0+0xf68>
         : 1011  ./elf/../sysdeps/x86/dl-cacheinfo.h:799
    0.00 :   1a2d5:  cmp    $0x80000007,%eax
    0.00 :   1a2da:  ja     1a4e0 <init_cpu_features.constprop.0+0xfb0>
         : 1014  ./elf/../sysdeps/x86/dl-cacheinfo.h:810
    0.00 :   1a2e0:  mov    $0x1,%eax
    0.00 :   1a2e5:  cpuid
         : 1017  ./elf/../sysdeps/x86/dl-cacheinfo.h:812
    0.00 :   1a2e7:  and    $0x10000000,%edx
    0.00 :   1a2ed:  je     1a30d <init_cpu_features.constprop.0+0xddd>
         : 1020  ./elf/../sysdeps/x86/dl-cacheinfo.h:813
    0.00 :   1a2ef:  shr    $0x10,%ebx
    0.00 :   1a2f2:  movzbl %bl,%esi
    0.00 :   1a2f5:  mov    %esi,0x94(%rsp)
         : 1024  ./elf/../sysdeps/x86/dl-cacheinfo.h:818
    0.00 :   1a2fc:  test   %esi,%esi
    0.00 :   1a2fe:  je     1a30d <init_cpu_features.constprop.0+0xddd>
         : 1027  ./elf/../sysdeps/x86/dl-cacheinfo.h:819
    0.00 :   1a300:  mov    %r9,%rax
    0.00 :   1a303:  mov    %esi,%ecx
    0.00 :   1a305:  cqto
    0.00 :   1a307:  idiv   %rcx
    0.00 :   1a30a:  mov    %rax,%r9
         : 1033  ./elf/../sysdeps/x86/dl-cacheinfo.h:822
    0.00 :   1a30d:  cmp    $0x16,%r10d
    0.00 :   1a311:  jbe    1a588 <init_cpu_features.constprop.0+0x1058>
         : 1036  ./elf/../sysdeps/x86/dl-cacheinfo.h:827
    0.00 :   1a317:  mov    $0x8000001d,%eax
    0.00 :   1a31c:  mov    $0x3,%ecx
    0.00 :   1a321:  cpuid
         : 1040  ./elf/../sysdeps/x86/dl-cacheinfo.h:829
    0.00 :   1a323:  shr    $0xe,%eax
    0.00 :   1a326:  and    $0xfff,%eax
         : 1043  ./elf/../sysdeps/x86/dl-cacheinfo.h:830
    0.00 :   1a32b:  add    $0x1,%rax
    0.00 :   1a32f:  imul   %r9,%rax
    0.00 :   1a333:  mov    %rax,0x30(%rsp)
         : 1047  ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a338:  lea    (%rax,%rax,2),%r12
    0.00 :   1a33c:  jmp    1a4a7 <init_cpu_features.constprop.0+0xf77>
         : 1050  init_cpu_features():
         : 1051  ./elf/../sysdeps/x86/cpu-features.c:628
    0.00 :   1a341:  cmp    $0x68532020,%ebx
    0.00 :   1a347:  sete   %sil
    0.00 :   1a34b:  cmp    $0x20206961,%ecx
    0.00 :   1a351:  sete   %al
    0.00 :   1a354:  test   %al,%sil
    0.00 :   1a357:  je     19590 <init_cpu_features.constprop.0+0x60>
    0.00 :   1a35d:  cmp    $0x68676e61,%edx
    0.00 :   1a363:  je     19e54 <init_cpu_features.constprop.0+0x924>
    0.00 :   1a369:  jmp    19590 <init_cpu_features.constprop.0+0x60>
    0.00 :   1a36e:  xchg   %ax,%ax
         : 1062  ./elf/../sysdeps/x86/cpu-features.c:424
    0.00 :   1a370:  lea    0xb0(%rsp),%r14
    0.00 :   1a378:  lea    0x90(%rsp),%rcx
    0.00 :   1a380:  lea    0x8c(%rsp),%rsi
    0.00 :   1a388:  lea    0x88(%rsp),%rdi
    0.00 :   1a390:  mov    %r14,%rdx
    0.00 :   1a393:  call   185e0 <get_common_indices.constprop.0>
         : 1069  get_extended_indices():
         : 1070  ./elf/../sysdeps/x86/cpu-features.c:303
    0.00 :   1a398:  mov    $0x80000000,%eax
    0.00 :   1a39d:  cpuid
    0.00 :   1a39f:  mov    %eax,%esi
         : 1074  ./elf/../sysdeps/x86/cpu-features.c:304
    0.00 :   1a3a1:  cmp    $0x80000000,%eax
    0.00 :   1a3a6:  jbe    1a415 <init_cpu_features.constprop.0+0xee5>
         : 1077  ./elf/../sysdeps/x86/cpu-features.c:305
    0.00 :   1a3a8:  mov    $0x80000001,%eax
    0.00 :   1a3ad:  cpuid
    0.00 :   1a3af:  mov    %eax,0x1f7ef(%rip)        # 39ba4 <_rtld_global_ro+0xc4>
    0.00 :   1a3b5:  mov    %ebx,0x1f7ed(%rip)        # 39ba8 <_rtld_global_ro+0xc8>
    0.00 :   1a3bb:  mov    %ecx,0x1f7eb(%rip)        # 39bac <_rtld_global_ro+0xcc>
    0.00 :   1a3c1:  mov    %edx,0x1f7e9(%rip)        # 39bb0 <_rtld_global_ro+0xd0>
         : 1084  ./elf/../sysdeps/x86/cpu-features.c:310
    0.00 :   1a3c7:  cmp    $0x80000006,%esi
    0.00 :   1a3cd:  jbe    1a415 <init_cpu_features.constprop.0+0xee5>
         : 1087  ./elf/../sysdeps/x86/cpu-features.c:311
    0.00 :   1a3cf:  mov    $0x80000007,%eax
    0.00 :   1a3d4:  cpuid
    0.00 :   1a3d6:  mov    %eax,0x1f808(%rip)        # 39be4 <_rtld_global_ro+0x104>
    0.00 :   1a3dc:  mov    %ebx,0x1f806(%rip)        # 39be8 <_rtld_global_ro+0x108>
    0.00 :   1a3e2:  mov    %ecx,0x1f804(%rip)        # 39bec <_rtld_global_ro+0x10c>
    0.00 :   1a3e8:  mov    %edx,0x1f802(%rip)        # 39bf0 <_rtld_global_ro+0x110>
         : 1094  ./elf/../sysdeps/x86/cpu-features.c:316
    0.00 :   1a3ee:  cmp    $0x80000007,%esi
    0.00 :   1a3f4:  je     1a415 <init_cpu_features.constprop.0+0xee5>
         : 1097  ./elf/../sysdeps/x86/cpu-features.c:317
    0.00 :   1a3f6:  mov    $0x80000008,%eax
    0.00 :   1a3fb:  cpuid
    0.00 :   1a3fd:  mov    %eax,0x1f801(%rip)        # 39c04 <_rtld_global_ro+0x124>
    0.00 :   1a403:  mov    %ebx,0x1f7ff(%rip)        # 39c08 <_rtld_global_ro+0x128>
    0.00 :   1a409:  mov    %ecx,0x1f7fd(%rip)        # 39c0c <_rtld_global_ro+0x12c>
    0.00 :   1a40f:  mov    %edx,0x1f7fb(%rip)        # 39c10 <_rtld_global_ro+0x130>
         : 1104  init_cpu_features():
         : 1105  ./elf/../sysdeps/x86/cpu-features.c:429
    0.00 :   1a415:  call   19010 <update_active.constprop.0>
         : 1107  ./elf/../sysdeps/x86/cpu-features.c:431
    0.00 :   1a41a:  mov    0x88(%rsp),%r10d
         : 1109  ./elf/../sysdeps/x86/cpu-features.c:433
    0.00 :   1a422:  mov    0x8c(%rsp),%eax
         : 1111  ./elf/../sysdeps/x86/cpu-features.c:516
    0.00 :   1a429:  mov    0x90(%rsp),%edx
         : 1113  ./elf/../sysdeps/x86/cpu-features.c:431
    0.00 :   1a430:  cmp    $0x6,%r10d
    0.00 :   1a434:  je     1a5a0 <init_cpu_features.constprop.0+0x1070>
         : 1116  ./elf/../sysdeps/x86/cpu-features.c:564
    0.00 :   1a43a:  testb  $0x8,0x1f74a(%rip)        # 39b8b <_rtld_global_ro+0xab>
    0.00 :   1a441:  jne    1a488 <init_cpu_features.constprop.0+0xf58>
         : 1119  ./elf/../sysdeps/x86/cpu-features.c:571
    0.00 :   1a443:  testb  $0x10,0x1f7da(%rip)        # 39c24 <_rtld_global_ro+0x144>
    0.00 :   1a44a:  jne    1a456 <init_cpu_features.constprop.0+0xf26>
         : 1122  ./elf/../sysdeps/x86/cpu-features.c:573
    0.00 :   1a44c:  orl    $0x1000,0x1f82e(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1124  ./elf/../sysdeps/x86/cpu-features.c:577
    0.00 :   1a456:  testb  $0x8,0x1f73c(%rip)        # 39b99 <_rtld_global_ro+0xb9>
    0.00 :   1a45d:  jne    1a488 <init_cpu_features.constprop.0+0xf58>
         : 1127  ./elf/../sysdeps/x86/cpu-features.c:583
    0.00 :   1a45f:  testb  $0x10,0x1f72a(%rip)        # 39b90 <_rtld_global_ro+0xb0>
    0.00 :   1a466:  je     1a472 <init_cpu_features.constprop.0+0xf42>
         : 1130  ./elf/../sysdeps/x86/cpu-features.c:585
    0.00 :   1a468:  orl    $0x8000,0x1f812(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1132  ./elf/../sysdeps/x86/cpu-features.c:422
    0.00 :   1a472:  mov    $0x1,%r8d
    0.00 :   1a478:  lea    0xa8(%rsp),%r15
         : 1135  ./elf/../sysdeps/x86/cpu-features.c:419
    0.00 :   1a480:  jmp    197f6 <init_cpu_features.constprop.0+0x2c6>
    0.00 :   1a485:  nopl   (%rax)
         : 1138  ./elf/../sysdeps/x86/cpu-features.c:579
    0.00 :   1a488:  orl    $0x400,0x1f7f2(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
    0.00 :   1a492:  jmp    1a45f <init_cpu_features.constprop.0+0xf2f>
    0.00 :   1a494:  nopl   0x0(%rax)
         : 1142  dl_init_cacheinfo():
         : 1143  ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a498:  lea    (%r11,%r11,2),%rax
    0.00 :   1a49c:  lea    0x3(%rax),%r12
    0.00 :   1a4a0:  test   %rax,%rax
    0.00 :   1a4a3:  cmovns %rax,%r12
    0.00 :   1a4a7:  movabs $0xfffffffffffffff,%rax
    0.00 :   1a4b1:  sar    $0x2,%r12
         : 1150  ./elf/../sysdeps/x86/dl-cacheinfo.h:720
    0.00 :   1a4b5:  movq   $0xffffffffffffffff,0x70(%rsp)
    0.00 :   1a4be:  cmp    %rax,%r12
    0.00 :   1a4c1:  cmova  %rax,%r12
    0.00 :   1a4c5:  mov    $0x4040,%eax
    0.00 :   1a4ca:  cmp    %rax,%r12
    0.00 :   1a4cd:  cmovb  %rax,%r12
    0.00 :   1a4d1:  jmp    198ed <init_cpu_features.constprop.0+0x3bd>
    0.00 :   1a4d6:  cs nopw 0x0(%rax,%rax,1)
         : 1159  ./elf/../sysdeps/x86/dl-cacheinfo.h:802
    0.00 :   1a4e0:  mov    $0x80000008,%eax
    0.00 :   1a4e5:  cpuid
         : 1162  ./elf/../sysdeps/x86/dl-cacheinfo.h:803
    0.00 :   1a4e7:  mov    $0x1,%eax
    0.00 :   1a4ec:  shr    $0xc,%ecx
    0.00 :   1a4ef:  and    $0xf,%ecx
    0.00 :   1a4f2:  mov    %eax,%esi
    0.00 :   1a4f4:  shl    %cl,%esi
    0.00 :   1a4f6:  mov    %esi,0x94(%rsp)
         : 1169  ./elf/../sysdeps/x86/dl-cacheinfo.h:806
    0.00 :   1a4fd:  cmp    $0x16,%r10d
    0.00 :   1a501:  jbe    1a300 <init_cpu_features.constprop.0+0xdd0>
         : 1172  ./elf/../sysdeps/x86/dl-cacheinfo.h:810
    0.00 :   1a507:  cpuid
         : 1174  ./elf/../sysdeps/x86/dl-cacheinfo.h:812
    0.00 :   1a509:  and    $0x10000000,%edx
    0.00 :   1a50f:  je     1a300 <init_cpu_features.constprop.0+0xdd0>
         : 1177  ./elf/../sysdeps/x86/dl-cacheinfo.h:813
    0.00 :   1a515:  shr    $0x10,%ebx
    0.00 :   1a518:  movzbl %bl,%esi
    0.00 :   1a51b:  mov    %esi,0x94(%rsp)
         : 1181  ./elf/../sysdeps/x86/dl-cacheinfo.h:818
    0.00 :   1a522:  test   %esi,%esi
    0.00 :   1a524:  jne    1a300 <init_cpu_features.constprop.0+0xdd0>
    0.00 :   1a52a:  jmp    1a317 <init_cpu_features.constprop.0+0xde7>
    0.00 :   1a52f:  nop
         : 1186  init_cpu_features():
         : 1187  ./elf/../sysdeps/x86/cpu-features.c:786
    0.00 :   1a530:  test   %edx,%edx
    0.00 :   1a532:  jns    19de0 <init_cpu_features.constprop.0+0x8b0>
         : 1190  ./elf/../sysdeps/x86/cpu-features.c:787
    0.00 :   1a538:  movq   $0x6,0x1f5fd(%rip)        # 39b40 <_rtld_global_ro+0x60>
         : 1192  ./elf/../sysdeps/x86/cpu-features.c:791
    0.00 :   1a543:  jmp    19de0 <init_cpu_features.constprop.0+0x8b0>
    0.00 :   1a548:  nopl   0x0(%rax,%rax,1)
         : 1195  ./elf/../sysdeps/x86/cpu-features.c:658
    0.00 :   1a550:  cmp    $0x1b,%eax
    0.00 :   1a553:  je     1a0b6 <init_cpu_features.constprop.0+0xb86>
         : 1198  ./elf/../sysdeps/x86/cpu-features.c:669
    0.00 :   1a559:  cmp    $0x3b,%eax
    0.00 :   1a55c:  jne    19f32 <init_cpu_features.constprop.0+0xa02>
         : 1201  ./elf/../sysdeps/x86/cpu-features.c:671
    0.00 :   1a562:  andl   $0xefffffff,0x1f610(%rip)        # 39b7c <_rtld_global_ro+0x9c>
         : 1203  ./elf/../sysdeps/x86/cpu-features.c:672
    0.00 :   1a56c:  andl   $0xffffffdf,0x1f625(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 1205  ./elf/../sysdeps/x86/cpu-features.c:675
    0.00 :   1a573:  andl   $0xfffffdff,0x1f707(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
    0.00 :   1a57d:  jmp    19f32 <init_cpu_features.constprop.0+0xa02>
    0.00 :   1a582:  nopw   0x0(%rax,%rax,1)
         : 1209  dl_init_cacheinfo():
         : 1210  ./elf/../sysdeps/x86/dl-cacheinfo.h:835
    0.00 :   1a588:  add    %r9,0x30(%rsp)
    0.00 :   1a58d:  mov    0x30(%rsp),%rax
         : 1213  ./elf/../sysdeps/x86/dl-cacheinfo.h:863
    0.00 :   1a592:  lea    (%rax,%rax,2),%rax
    0.00 :   1a596:  jmp    1a49c <init_cpu_features.constprop.0+0xf6c>
    0.00 :   1a59b:  nopl   0x0(%rax,%rax,1)
         : 1217  init_cpu_features():
         : 1218  ./elf/../sysdeps/x86/cpu-features.c:433
    0.00 :   1a5a0:  add    0xb0(%rsp),%eax
    0.00 :   1a5a7:  mov    %eax,0x8c(%rsp)
    0.00 :   1a5ae:  mov    %eax,%esi
         : 1222  ./elf/../sysdeps/x86/cpu-features.c:434
    0.00 :   1a5b0:  cmp    $0x5d,%eax
    0.00 :   1a5b3:  ja     1a640 <init_cpu_features.constprop.0+0x1110>
    0.00 :   1a5b9:  cmp    $0x24,%eax
    0.00 :   1a5bc:  ja     1a6d0 <init_cpu_features.constprop.0+0x11a0>
    0.00 :   1a5c2:  cmp    $0x1c,%eax
    0.00 :   1a5c5:  je     1a720 <init_cpu_features.constprop.0+0x11f0>
    0.00 :   1a5cb:  jbe    1a6c0 <init_cpu_features.constprop.0+0x1190>
    0.00 :   1a5d1:  lea    -0x1e(%rax),%ecx
    0.00 :   1a5d4:  cmp    $0x1,%ecx
    0.00 :   1a5d7:  jbe    1a5f0 <init_cpu_features.constprop.0+0x10c0>
         : 1233  ./elf/../sysdeps/x86/cpu-features.c:489
    0.00 :   1a5d9:  testb  $0x10,0x1f58f(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   1a5e0:  je     1a43a <init_cpu_features.constprop.0+0xf0a>
    0.00 :   1a5e6:  cs nopw 0x0(%rax,%rax,1)
         : 1237  ./elf/../sysdeps/x86/cpu-features.c:503
    0.00 :   1a5f0:  orl    $0x39,0x1f68d(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1239  ./elf/../sysdeps/x86/cpu-features.c:513
    0.00 :   1a5f7:  cmp    $0x5e,%esi
    0.00 :   1a5fa:  ja     1a683 <init_cpu_features.constprop.0+0x1153>
    0.00 :   1a600:  cmp    $0x3b,%esi
    0.00 :   1a603:  jbe    1a43a <init_cpu_features.constprop.0+0xf0a>
    0.00 :   1a609:  sub    $0x3c,%esi
    0.00 :   1a60c:  cmp    $0x22,%esi
    0.00 :   1a60f:  ja     1a43a <init_cpu_features.constprop.0+0xf0a>
    0.00 :   1a615:  lea    0x11dc4(%rip),%rdi        # 2c3e0 <msg.0+0x100>
    0.00 :   1a61c:  movslq (%rdi,%rsi,4),%rcx
    0.00 :   1a620:  add    %rdi,%rcx
    0.00 :   1a623:  notrack jmp *%rcx
         : 1251  ./elf/../sysdeps/x86/cpu-features.c:545
    0.00 :   1a626:  cmp    $0x3,%edx
    0.00 :   1a629:  ja     1a43a <init_cpu_features.constprop.0+0xf0a>
         : 1254  ./elf/../sysdeps/x86/cpu-features.c:555
    0.00 :   1a62f:  andl   $0xfffff7ff,0x1f55f(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 1256  ./elf/../sysdeps/x86/cpu-features.c:556
    0.00 :   1a639:  jmp    1a43a <init_cpu_features.constprop.0+0xf0a>
    0.00 :   1a63e:  xchg   %ax,%ax
         : 1259  ./elf/../sysdeps/x86/cpu-features.c:434
    0.00 :   1a640:  lea    -0x5f(%rax),%ecx
    0.00 :   1a643:  cmp    $0x3d,%ecx
    0.00 :   1a646:  ja     1a73b <init_cpu_features.constprop.0+0x120b>
    0.00 :   1a64c:  mov    $0x1,%edi
    0.00 :   1a651:  shl    %cl,%rdi
    0.00 :   1a654:  mov    %rdi,%rcx
    0.00 :   1a657:  movabs $0x2080008000000000,%rdi
    0.00 :   1a661:  test   %rdi,%rcx
    0.00 :   1a664:  jne    1a72c <init_cpu_features.constprop.0+0x11fc>
    0.00 :   1a66a:  test   $0x8400001,%ecx
    0.00 :   1a670:  jne    1a710 <init_cpu_features.constprop.0+0x11e0>
         : 1271  ./elf/../sysdeps/x86/cpu-features.c:489
    0.00 :   1a676:  testb  $0x10,0x1f4f2(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   1a67d:  jne    1a5f0 <init_cpu_features.constprop.0+0x10c0>
         : 1274  ./elf/../sysdeps/x86/cpu-features.c:513
    0.00 :   1a683:  and    $0xffffffef,%esi
    0.00 :   1a686:  cmp    $0x8e,%esi
    0.00 :   1a68c:  jne    1a43a <init_cpu_features.constprop.0+0xf0a>
         : 1278  ./elf/../sysdeps/x86/cpu-features.c:526
    0.00 :   1a692:  cmp    $0xc,%edx
    0.00 :   1a695:  ja     1a43a <init_cpu_features.constprop.0+0xf0a>
         : 1281  ./elf/../sysdeps/x86/cpu-features.c:539
    0.00 :   1a69b:  andl   $0xfffff7ef,0x1f4f3(%rip)        # 39b98 <_rtld_global_ro+0xb8>
         : 1283  ./elf/../sysdeps/x86/cpu-features.c:540
    0.00 :   1a6a5:  orl    $0x800,0x1f4f1(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
         : 1285  ./elf/../sysdeps/x86/cpu-features.c:542
    0.00 :   1a6af:  jmp    1a43a <init_cpu_features.constprop.0+0xf0a>
         : 1287  ./elf/../sysdeps/x86/cpu-features.c:516
    0.00 :   1a6b4:  cmp    $0x5,%edx
    0.00 :   1a6b7:  ja     1a43a <init_cpu_features.constprop.0+0xf0a>
    0.00 :   1a6bd:  jmp    1a69b <init_cpu_features.constprop.0+0x116b>
    0.00 :   1a6bf:  nop
         : 1292  ./elf/../sysdeps/x86/cpu-features.c:434
    0.00 :   1a6c0:  cmp    $0x1a,%eax
    0.00 :   1a6c3:  jne    1a5d9 <init_cpu_features.constprop.0+0x10a9>
    0.00 :   1a6c9:  jmp    1a5f0 <init_cpu_features.constprop.0+0x10c0>
    0.00 :   1a6ce:  xchg   %ax,%ax
    0.00 :   1a6d0:  lea    -0x25(%rax),%ecx
    0.00 :   1a6d3:  mov    $0x1,%edi
    0.00 :   1a6d8:  shl    %cl,%rdi
    0.00 :   1a6db:  mov    %rdi,%rcx
    0.00 :   1a6de:  movabs $0x1a401a000040000,%rdi
    0.00 :   1a6e8:  test   %rdi,%rcx
    0.00 :   1a6eb:  jne    1a710 <init_cpu_features.constprop.0+0x11e0>
    0.00 :   1a6ed:  test   $0x681,%ecx
    0.00 :   1a6f3:  jne    1a5f0 <init_cpu_features.constprop.0+0x10c0>
    0.00 :   1a6f9:  cmp    $0x26,%eax
    0.00 :   1a6fc:  je     1a720 <init_cpu_features.constprop.0+0x11f0>
         : 1308  ./elf/../sysdeps/x86/cpu-features.c:489
    0.00 :   1a6fe:  testb  $0x10,0x1f46a(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   1a705:  je     1a600 <init_cpu_features.constprop.0+0x10d0>
    0.00 :   1a70b:  jmp    1a5f0 <init_cpu_features.constprop.0+0x10c0>
         : 1312  ./elf/../sysdeps/x86/cpu-features.c:467
    0.00 :   1a710:  orl    $0x138,0x1f56a(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1314  ./elf/../sysdeps/x86/cpu-features.c:471
    0.00 :   1a71a:  jmp    1a5f7 <init_cpu_features.constprop.0+0x10c7>
    0.00 :   1a71f:  nop
         : 1317  ./elf/../sysdeps/x86/cpu-features.c:440
    0.00 :   1a720:  orl    $0x4,0x1f55d(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1319  ./elf/../sysdeps/x86/cpu-features.c:513
    0.00 :   1a727:  jmp    1a43a <init_cpu_features.constprop.0+0xf0a>
         : 1321  ./elf/../sysdeps/x86/cpu-features.c:479
    0.00 :   1a72c:  orl    $0x139,0x1f54e(%rip)        # 39c84 <_rtld_global_ro+0x1a4>
         : 1323  ./elf/../sysdeps/x86/cpu-features.c:513
    0.00 :   1a736:  jmp    1a683 <init_cpu_features.constprop.0+0x1153>
         : 1325  ./elf/../sysdeps/x86/cpu-features.c:489
    0.00 :   1a73b:  testb  $0x10,0x1f42d(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   1a742:  je     1a5f7 <init_cpu_features.constprop.0+0x10c7>
    0.00 :   1a748:  jmp    1a5f0 <init_cpu_features.constprop.0+0x10c0>
         : 1329  ./elf/../sysdeps/x86/cpu-features.c:829
    0.00 :   1a74d:  andl   $0xffffff7f,0x1f445(%rip)        # 39b9c <_rtld_global_ro+0xbc>
         : 1331  ./elf/../sysdeps/x86/cpu-features.c:831
    0.00 :   1a757:  test   %eax,%eax
    0.00 :   1a759:  je     19cce <init_cpu_features.constprop.0+0x79e>
    0.00 :   1a75f:  jmp    19d7d <init_cpu_features.constprop.0+0x84d>
         : 1335  ./elf/../sysdeps/x86/cpu-features.c:827
    0.00 :   1a764:  andl   $0xffefffff,0x1f432(%rip)        # 39ba0 <_rtld_global_ro+0xc0>
    0.00 :   1a76e:  jmp    19d75 <init_cpu_features.constprop.0+0x845>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000019d400 <__strchrnul_avx2>:
         : 6      __strchrnul_avx2():
         : 7      ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:51
   51.58 :   19d400: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:53
   48.42 :   19d404: vmovd  %esi,%xmm0
         : 11     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:54
    0.00 :   19d408: mov    %edi,%eax
         : 13     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:55
    0.00 :   19d40a: and    $0xfff,%eax
         : 15     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:56
    0.00 :   19d40f: vpbroadcastb %xmm0,%ymm0
         : 17     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:57
    0.00 :   19d414: vpxor  %xmm9,%xmm9,%xmm9
         : 19     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:60
    0.00 :   19d419: cmp    $0xfe0,%eax
         : 21     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:61
    0.00 :   19d41e: ja     19d5d0 <__strchrnul_avx2+0x1d0>
         : 23     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:65
    0.00 :   19d424: vmovdqu (%rdi),%ymm8
         : 25     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:66
    0.00 :   19d428: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 27     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:67
    0.00 :   19d42d: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 29     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:68
    0.00 :   19d432: vpor   %ymm1,%ymm2,%ymm1
         : 31     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:69
    0.00 :   19d436: vpmovmskb %ymm1,%eax
         : 33     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:70
    0.00 :   19d43a: test   %eax,%eax
         : 35     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:71
    0.00 :   19d43c: je     19d4a0 <__strchrnul_avx2+0xa0>
         : 37     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:72
    0.00 :   19d43e: tzcnt  %eax,%eax
         : 39     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:78
    0.00 :   19d442: add    %rdi,%rax
         : 41     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:79
    0.00 :   19d445: vzeroupper
    0.00 :   19d448: ret
    0.00 :   19d449: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d454: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d45f: nop
         : 47     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:87
    0.00 :   19d460: tzcnt  %eax,%eax
         : 49     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:88
    0.00 :   19d464: add    $0x61,%rdi
         : 51     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:94
    0.00 :   19d468: add    %rdi,%rax
         : 53     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:95
    0.00 :   19d46b: vzeroupper
    0.00 :   19d46e: ret
    0.00 :   19d46f: nop
         : 57     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:106
    0.00 :   19d470: tzcnt  %eax,%eax
         : 59     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:107
    0.00 :   19d474: inc    %rdi
         : 61     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:113
    0.00 :   19d477: add    %rdi,%rax
         : 63     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:114
    0.00 :   19d47a: vzeroupper
    0.00 :   19d47d: ret
    0.00 :   19d47e: xchg   %ax,%ax
         : 67     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:118
    0.00 :   19d480: tzcnt  %eax,%eax
         : 69     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:119
    0.00 :   19d484: add    $0x21,%rdi
         : 71     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:125
    0.00 :   19d488: add    %rdi,%rax
         : 73     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:126
    0.00 :   19d48b: vzeroupper
    0.00 :   19d48e: ret
    0.00 :   19d48f: nop
         : 77     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:130
    0.00 :   19d490: tzcnt  %eax,%eax
         : 79     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:131
    0.00 :   19d494: add    $0x41,%rdi
         : 81     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:137
    0.00 :   19d498: add    %rdi,%rax
         : 83     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:138
    0.00 :   19d49b: vzeroupper
    0.00 :   19d49e: ret
    0.00 :   19d49f: nop
         : 87     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:145
    0.00 :   19d4a0: or     $0x1f,%rdi
         : 89     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:149
    0.00 :   19d4a4: vmovdqa 0x1(%rdi),%ymm8
         : 91     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:150
    0.00 :   19d4a9: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 93     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:151
    0.00 :   19d4ae: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 95     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:152
    0.00 :   19d4b3: vpor   %ymm1,%ymm2,%ymm1
         : 97     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:153
    0.00 :   19d4b7: vpmovmskb %ymm1,%eax
         : 99     ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:154
    0.00 :   19d4bb: test   %eax,%eax
         : 101    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:155
    0.00 :   19d4bd: jne    19d470 <__strchrnul_avx2+0x70>
         : 103    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:157
    0.00 :   19d4bf: vmovdqa 0x21(%rdi),%ymm8
         : 105    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:158
    0.00 :   19d4c4: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 107    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:159
    0.00 :   19d4c9: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 109    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:160
    0.00 :   19d4ce: vpor   %ymm1,%ymm2,%ymm1
         : 111    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:161
    0.00 :   19d4d2: vpmovmskb %ymm1,%eax
         : 113    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:162
    0.00 :   19d4d6: test   %eax,%eax
         : 115    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:163
    0.00 :   19d4d8: jne    19d480 <__strchrnul_avx2+0x80>
         : 117    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:165
    0.00 :   19d4da: vmovdqa 0x41(%rdi),%ymm8
         : 119    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:166
    0.00 :   19d4df: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 121    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:167
    0.00 :   19d4e4: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 123    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:168
    0.00 :   19d4e9: vpor   %ymm1,%ymm2,%ymm1
         : 125    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:169
    0.00 :   19d4ed: vpmovmskb %ymm1,%eax
         : 127    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:170
    0.00 :   19d4f1: test   %eax,%eax
         : 129    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:171
    0.00 :   19d4f3: jne    19d490 <__strchrnul_avx2+0x90>
         : 131    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:173
    0.00 :   19d4f5: vmovdqa 0x61(%rdi),%ymm8
         : 133    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:174
    0.00 :   19d4fa: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 135    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:175
    0.00 :   19d4ff: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 137    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:176
    0.00 :   19d504: vpor   %ymm1,%ymm2,%ymm1
         : 139    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:177
    0.00 :   19d508: vpmovmskb %ymm1,%eax
         : 141    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:178
    0.00 :   19d50c: test   %eax,%eax
         : 143    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:179
    0.00 :   19d50e: jne    19d460 <__strchrnul_avx2+0x60>
         : 145    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:181
    0.00 :   19d514: add    $0x81,%rdi
         : 147    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:182
    0.00 :   19d51b: and    $0xffffffffffffff80,%rdi
    0.00 :   19d51f: nop
         : 150    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:186
    0.00 :   19d520: vmovdqa (%rdi),%ymm5
         : 152    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:187
    0.00 :   19d524: vmovdqa 0x20(%rdi),%ymm6
         : 154    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:188
    0.00 :   19d529: vmovdqa 0x40(%rdi),%ymm7
         : 156    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:189
    0.00 :   19d52e: vmovdqa 0x60(%rdi),%ymm8
         : 158    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:192
    0.00 :   19d533: vpxor  %ymm5,%ymm0,%ymm1
         : 160    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:193
    0.00 :   19d537: vpxor  %ymm6,%ymm0,%ymm2
         : 162    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:194
    0.00 :   19d53b: vpxor  %ymm7,%ymm0,%ymm3
         : 164    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:195
    0.00 :   19d53f: vpxor  %ymm8,%ymm0,%ymm4
         : 166    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:197
    0.00 :   19d544: vpminub %ymm1,%ymm5,%ymm1
         : 168    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:198
    0.00 :   19d548: vpminub %ymm2,%ymm6,%ymm2
         : 170    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:199
    0.00 :   19d54c: vpminub %ymm3,%ymm7,%ymm3
         : 172    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:200
    0.00 :   19d550: vpminub %ymm4,%ymm8,%ymm4
         : 174    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:202
    0.00 :   19d554: vpminub %ymm1,%ymm2,%ymm5
         : 176    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:203
    0.00 :   19d558: vpminub %ymm3,%ymm4,%ymm6
         : 178    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:205
    0.00 :   19d55c: vpminub %ymm5,%ymm6,%ymm6
         : 180    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:207
    0.00 :   19d560: vpcmpeqb %ymm6,%ymm9,%ymm6
         : 182    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:208
    0.00 :   19d564: vpmovmskb %ymm6,%ecx
         : 184    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:209
    0.00 :   19d568: sub    $0xffffffffffffff80,%rdi
         : 186    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:210
    0.00 :   19d56c: test   %ecx,%ecx
         : 188    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:211
    0.00 :   19d56e: je     19d520 <__strchrnul_avx2+0x120>
         : 190    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:214
    0.00 :   19d570: vpcmpeqb %ymm1,%ymm9,%ymm1
         : 192    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:215
    0.00 :   19d574: vpmovmskb %ymm1,%eax
         : 194    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:216
    0.00 :   19d578: test   %eax,%eax
         : 196    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:217
    0.00 :   19d57a: jne    19d5b0 <__strchrnul_avx2+0x1b0>
         : 198    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:220
    0.00 :   19d57c: vpcmpeqb %ymm5,%ymm9,%ymm2
         : 200    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:221
    0.00 :   19d580: vpmovmskb %ymm2,%eax
         : 202    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:222
    0.00 :   19d584: test   %eax,%eax
         : 204    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:223
    0.00 :   19d586: jne    19d5c0 <__strchrnul_avx2+0x1c0>
         : 206    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:225
    0.00 :   19d588: vpcmpeqb %ymm3,%ymm9,%ymm3
         : 208    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:226
    0.00 :   19d58c: vpmovmskb %ymm3,%eax
         : 210    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:229
    0.00 :   19d590: shl    $0x20,%rcx
         : 212    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:230
    0.00 :   19d594: or     %rcx,%rax
         : 214    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:231
    0.00 :   19d597: tzcnt  %rax,%rax
         : 216    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:232
    0.00 :   19d59c: sub    $0x40,%rdi
         : 218    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:238
    0.00 :   19d5a0: add    %rdi,%rax
         : 220    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:239
    0.00 :   19d5a3: vzeroupper
    0.00 :   19d5a6: ret
    0.00 :   19d5a7: nopw   0x0(%rax,%rax,1)
         : 224    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:244
    0.00 :   19d5b0: tzcnt  %eax,%eax
         : 226    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:245
    0.00 :   19d5b4: add    $0xffffffffffffff80,%rdi
         : 228    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:251
    0.00 :   19d5b8: add    %rdi,%rax
         : 230    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:252
    0.00 :   19d5bb: vzeroupper
    0.00 :   19d5be: ret
    0.00 :   19d5bf: nop
         : 234    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:262
    0.00 :   19d5c0: tzcnt  %eax,%eax
         : 236    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:263
    0.00 :   19d5c4: sub    $0x60,%rdi
         : 238    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:269
    0.00 :   19d5c8: add    %rdi,%rax
         : 240    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:270
    0.00 :   19d5cb: vzeroupper
    0.00 :   19d5ce: ret
    0.00 :   19d5cf: nop
         : 244    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:276
    0.00 :   19d5d0: mov    %rdi,%rdx
         : 246    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:278
    0.00 :   19d5d3: or     $0x1f,%rdi
         : 248    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:279
    0.00 :   19d5d7: vmovdqa -0x1f(%rdi),%ymm8
         : 250    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:280
    0.00 :   19d5dc: vpcmpeqb %ymm8,%ymm0,%ymm1
         : 252    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:281
    0.00 :   19d5e1: vpcmpeqb %ymm8,%ymm9,%ymm2
         : 254    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:282
    0.00 :   19d5e6: vpor   %ymm1,%ymm2,%ymm1
         : 256    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:283
    0.00 :   19d5ea: vpmovmskb %ymm1,%eax
         : 258    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:286
    0.00 :   19d5ee: sarx   %edx,%eax,%eax
         : 260    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:287
    0.00 :   19d5f3: test   %eax,%eax
         : 262    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:288
    0.00 :   19d5f5: je     19d4a4 <__strchrnul_avx2+0xa4>
         : 264    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:289
    0.00 :   19d5fb: tzcnt  %eax,%eax
         : 266    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:297
    0.00 :   19d5ff: add    %rdx,%rax
         : 268    ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:300
    0.00 :   19d602: vzeroupper
    0.00 :   19d605: ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      000000000019d7e0 <__strlen_avx2>:
         : 6      __strlen_avx2():
         : 7      ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:50
    0.00 :   19d7e0: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:63
    0.00 :   19d7e4: mov    %edi,%eax
         : 11     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:64
    0.00 :   19d7e6: mov    %rdi,%rdx
         : 13     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:65
    0.00 :   19d7e9: vpxor  %xmm0,%xmm0,%xmm0
         : 15     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:68
    0.00 :   19d7ed: and    $0xfff,%eax
         : 17     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:70
    0.00 :   19d7f2: cmp    $0xfe0,%eax
         : 19     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:71
    0.00 :   19d7f7: ja     19d930 <__strlen_avx2+0x150>
         : 21     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:74
    0.00 :   19d7fd: vpcmpeqb (%rdi),%ymm0,%ymm1
         : 23     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:75
  100.00 :   19d801: vpmovmskb %ymm1,%eax
         : 25     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:83
    0.00 :   19d805: test   %eax,%eax
         : 27     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:84
    0.00 :   19d807: je     19d860 <__strlen_avx2+0x80>
         : 29     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:85
    0.00 :   19d809: tzcnt  %eax,%eax
         : 31     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:90
    0.00 :   19d80d: vzeroupper
    0.00 :   19d810: ret
    0.00 :   19d811: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d81c: nopl   0x0(%rax)
         : 36     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:116
    0.00 :   19d820: tzcnt  %eax,%eax
         : 38     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:129
    0.00 :   19d824: sub    %edx,%edi
         : 40     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:130
    0.00 :   19d826: inc    %edi
         : 42     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:131
    0.00 :   19d828: add    %edi,%eax
         : 44     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:137
    0.00 :   19d82a: vzeroupper
    0.00 :   19d82d: ret
    0.00 :   19d82e: xchg   %ax,%ax
         : 48     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:141
    0.00 :   19d830: tzcnt  %eax,%eax
         : 50     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:154
    0.00 :   19d834: sub    %edx,%edi
         : 52     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:155
    0.00 :   19d836: add    $0x21,%edi
         : 54     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:156
    0.00 :   19d839: add    %edi,%eax
         : 56     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:162
    0.00 :   19d83b: vzeroupper
    0.00 :   19d83e: ret
    0.00 :   19d83f: nop
         : 60     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:166
    0.00 :   19d840: tzcnt  %eax,%eax
         : 62     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:179
    0.00 :   19d844: sub    %edx,%edi
         : 64     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:180
    0.00 :   19d846: add    $0x41,%edi
         : 66     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:181
    0.00 :   19d849: add    %edi,%eax
         : 68     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:187
    0.00 :   19d84b: vzeroupper
    0.00 :   19d84e: ret
    0.00 :   19d84f: nop
         : 72     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:191
    0.00 :   19d850: tzcnt  %eax,%eax
         : 74     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:204
    0.00 :   19d854: sub    %edx,%edi
         : 76     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:205
    0.00 :   19d856: add    $0x61,%edi
         : 78     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:206
    0.00 :   19d859: add    %edi,%eax
         : 80     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:212
    0.00 :   19d85b: vzeroupper
    0.00 :   19d85e: ret
    0.00 :   19d85f: nop
         : 84     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:219
    0.00 :   19d860: or     $0x1f,%rdi
         : 86     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:234
    0.00 :   19d864: vpcmpeqb 0x1(%rdi),%ymm0,%ymm1
         : 88     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:240
    0.00 :   19d869: vpmovmskb %ymm1,%eax
         : 90     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:241
    0.00 :   19d86d: test   %eax,%eax
         : 92     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:242
    0.00 :   19d86f: jne    19d820 <__strlen_avx2+0x40>
         : 94     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:244
    0.00 :   19d871: vpcmpeqb 0x21(%rdi),%ymm0,%ymm1
         : 96     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:245
    0.00 :   19d876: vpmovmskb %ymm1,%eax
         : 98     ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:246
    0.00 :   19d87a: test   %eax,%eax
         : 100    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:247
    0.00 :   19d87c: jne    19d830 <__strlen_avx2+0x50>
         : 102    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:249
    0.00 :   19d87e: vpcmpeqb 0x41(%rdi),%ymm0,%ymm1
         : 104    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:250
    0.00 :   19d883: vpmovmskb %ymm1,%eax
         : 106    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:251
    0.00 :   19d887: test   %eax,%eax
         : 108    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:252
    0.00 :   19d889: jne    19d840 <__strlen_avx2+0x60>
         : 110    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:254
    0.00 :   19d88b: vpcmpeqb 0x61(%rdi),%ymm0,%ymm1
         : 112    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:255
    0.00 :   19d890: vpmovmskb %ymm1,%eax
         : 114    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:256
    0.00 :   19d894: test   %eax,%eax
         : 116    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:257
    0.00 :   19d896: jne    19d850 <__strlen_avx2+0x70>
         : 118    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:275
    0.00 :   19d898: inc    %rdi
         : 120    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:276
    0.00 :   19d89b: or     $0x7f,%rdi
    0.00 :   19d89f: nop
         : 123    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:290
    0.00 :   19d8a0: vmovdqa 0x1(%rdi),%ymm1
         : 125    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:291
    0.00 :   19d8a5: vpminub 0x21(%rdi),%ymm1,%ymm2
         : 127    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:292
    0.00 :   19d8aa: vmovdqa 0x41(%rdi),%ymm3
         : 129    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:293
    0.00 :   19d8af: vpminub 0x61(%rdi),%ymm3,%ymm4
         : 131    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:295
    0.00 :   19d8b4: vpminub %ymm2,%ymm4,%ymm5
         : 133    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:296
    0.00 :   19d8b8: vpcmpeqb %ymm5,%ymm0,%ymm5
         : 135    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:297
    0.00 :   19d8bc: vpmovmskb %ymm5,%ecx
         : 137    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:299
    0.00 :   19d8c0: sub    $0xffffffffffffff80,%rdi
         : 139    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:300
    0.00 :   19d8c4: test   %ecx,%ecx
         : 141    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:301
    0.00 :   19d8c6: je     19d8a0 <__strlen_avx2+0xc0>
         : 143    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:304
    0.00 :   19d8c8: vpcmpeqb %ymm1,%ymm0,%ymm1
         : 145    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:305
    0.00 :   19d8cc: vpmovmskb %ymm1,%eax
         : 147    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:306
    0.00 :   19d8d0: sub    %rdx,%rdi
         : 149    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:307
    0.00 :   19d8d3: test   %eax,%eax
         : 151    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:308
    0.00 :   19d8d5: jne    19d910 <__strlen_avx2+0x130>
         : 153    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:310
    0.00 :   19d8d7: vpcmpeqb %ymm2,%ymm0,%ymm2
         : 155    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:311
    0.00 :   19d8db: vpmovmskb %ymm2,%eax
         : 157    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:312
    0.00 :   19d8df: test   %eax,%eax
         : 159    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:313
    0.00 :   19d8e1: jne    19d920 <__strlen_avx2+0x140>
         : 161    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:316
    0.00 :   19d8e3: vpcmpeqb %ymm3,%ymm0,%ymm3
         : 163    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:317
    0.00 :   19d8e7: vpmovmskb %ymm3,%eax
         : 165    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:320
    0.00 :   19d8eb: shl    $0x20,%rcx
         : 167    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:321
    0.00 :   19d8ef: or     %rcx,%rax
         : 169    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:322
    0.00 :   19d8f2: tzcnt  %rax,%rax
         : 171    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:323
    0.00 :   19d8f7: sub    $0x3f,%rdi
         : 173    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:324
    0.00 :   19d8fb: add    %rdi,%rax
         : 175    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:329
    0.00 :   19d8fe: vzeroupper
    0.00 :   19d901: ret
    0.00 :   19d902: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   19d90d: nopl   (%rax)
         : 180    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:379
    0.00 :   19d910: tzcnt  %eax,%eax
         : 182    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:380
    0.00 :   19d914: sub    $0x7f,%rdi
         : 184    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:381
    0.00 :   19d918: add    %rdi,%rax
         : 186    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:386
    0.00 :   19d91b: vzeroupper
    0.00 :   19d91e: ret
    0.00 :   19d91f: nop
         : 190    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:390
    0.00 :   19d920: tzcnt  %eax,%eax
         : 192    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:391
    0.00 :   19d924: sub    $0x5f,%rdi
         : 194    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:392
    0.00 :   19d928: add    %rdi,%rax
         : 196    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:397
    0.00 :   19d92b: vzeroupper
    0.00 :   19d92e: ret
    0.00 :   19d92f: nop
         : 200    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:509
    0.00 :   19d930: or     $0x1f,%rdi
         : 202    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:510
    0.00 :   19d934: vpcmpeqb -0x1f(%rdi),%ymm0,%ymm1
         : 204    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:511
    0.00 :   19d939: vpmovmskb %ymm1,%eax
         : 206    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:514
    0.00 :   19d93d: sarx   %edx,%eax,%eax
         : 208    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:529
    0.00 :   19d942: test   %eax,%eax
         : 210    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:530
    0.00 :   19d944: je     19d864 <__strlen_avx2+0x84>
         : 212    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:531
    0.00 :   19d94a: tzcnt  %eax,%eax
         : 214    ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:538
    0.00 :   19d94e: vzeroupper
    0.00 :   19d951: ret
 Percent |	Source code & Disassembly of bash for cycles:u (2 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000007f410 <hash_search@@Base>:
    0.00 :   7f410:  endbr64
    0.00 :   7f414:  push   %r15
    0.00 :   7f416:  push   %r14
    0.00 :   7f418:  push   %r13
    0.00 :   7f41a:  push   %r12
    0.00 :   7f41c:  push   %rbp
    0.00 :   7f41d:  push   %rbx
    0.00 :   7f41e:  sub    $0x18,%rsp
    0.00 :   7f422:  test   %rsi,%rsi
    0.00 :   7f425:  je     7f568 <hash_search@@Base+0x158>
    0.00 :   7f42b:  mov    %edx,%ebp
    0.00 :   7f42d:  mov    %rdi,%r14
    0.00 :   7f430:  mov    %rsi,%r15
    0.00 :   7f433:  and    $0x2,%ebp
    0.00 :   7f436:  mov    %ebp,0x4(%rsp)
    0.00 :   7f43a:  jne    7f447 <hash_search@@Base+0x37>
    0.00 :   7f43c:  mov    0xc(%rsi),%edx
    0.00 :   7f43f:  test   %edx,%edx
    0.00 :   7f441:  je     7f568 <hash_search@@Base+0x158>
    0.00 :   7f447:  movzbl (%r14),%ebp
    0.00 :   7f44b:  mov    %r14,%r9
    0.00 :   7f44e:  mov    $0x811c9dc5,%ebx
    0.00 :   7f453:  mov    $0x811c9dc5,%r13d
    0.00 :   7f459:  movsbl %bpl,%esi
    0.00 :   7f45d:  test   %bpl,%bpl
    0.00 :   7f460:  je     7f498 <hash_search@@Base+0x88>
    0.00 :   7f462:  nopw   0x0(%rax,%rax,1)
    0.00 :   7f468:  mov    %ebx,%eax
    0.00 :   7f46a:  lea    (%rbx,%rbx,8),%r10d
    0.00 :   7f46e:  mov    %ebx,%edi
    0.00 :   7f470:  add    $0x1,%r9
    0.00 :   7f474:  shl    $0x7,%eax
    0.00 :   7f477:  shl    $0x18,%edi
    0.00 :   7f47a:  lea    (%rax,%r10,2),%eax
    0.00 :   7f47e:  add    %ebx,%eax
    0.00 :   7f480:  shl    $0x8,%ebx
    0.00 :   7f483:  add    %eax,%ebx
    0.00 :   7f485:  lea    (%rdi,%rbx,1),%eax
    0.00 :   7f488:  xor    %eax,%esi
   38.93 :   7f48a:  mov    %esi,%ebx
    0.00 :   7f48c:  movsbl (%r9),%esi
    0.00 :   7f490:  test   %sil,%sil
    0.00 :   7f493:  jne    7f468 <hash_search@@Base+0x58>
    0.00 :   7f495:  mov    %ebx,%r13d
    0.00 :   7f498:  mov    0x8(%r15),%eax
    0.00 :   7f49c:  mov    %eax,0x8(%rsp)
    0.00 :   7f4a0:  sub    $0x1,%eax
    0.00 :   7f4a3:  mov    %eax,0xc(%rsp)
    0.00 :   7f4a7:  and    %eax,%r13d
    0.00 :   7f4aa:  mov    (%r15),%rax
    0.00 :   7f4ad:  test   %rax,%rax
    0.00 :   7f4b0:  je     7f500 <hash_search@@Base+0xf0>
    0.00 :   7f4b2:  movslq %r13d,%rsi
    0.00 :   7f4b5:  mov    (%rax,%rsi,8),%r12
    0.00 :   7f4b9:  test   %r12,%r12
    0.00 :   7f4bc:  jne    7f4c9 <hash_search@@Base+0xb9>
    0.00 :   7f4be:  jmp    7f500 <hash_search@@Base+0xf0>
    0.00 :   7f4c0:  mov    (%r12),%r12
    0.00 :   7f4c4:  test   %r12,%r12
    0.00 :   7f4c7:  je     7f500 <hash_search@@Base+0xf0>
    0.00 :   7f4c9:  cmp    %ebx,0x18(%r12)
   61.07 :   7f4ce:  jne    7f4c0 <hash_search@@Base+0xb0>
    0.00 :   7f4d0:  mov    0x8(%r12),%rdi
    0.00 :   7f4d5:  cmp    %bpl,(%rdi)
    0.00 :   7f4d8:  jne    7f4c0 <hash_search@@Base+0xb0>
    0.00 :   7f4da:  mov    %r14,%rsi
    0.00 :   7f4dd:  call   30460 <strcmp@plt>
    0.00 :   7f4e2:  test   %eax,%eax
    0.00 :   7f4e4:  jne    7f4c0 <hash_search@@Base+0xb0>
    0.00 :   7f4e6:  addl   $0x1,0x1c(%r12)
    0.00 :   7f4ec:  add    $0x18,%rsp
    0.00 :   7f4f0:  mov    %r12,%rax
    0.00 :   7f4f3:  pop    %rbx
    0.00 :   7f4f4:  pop    %rbp
    0.00 :   7f4f5:  pop    %r12
    0.00 :   7f4f7:  pop    %r13
    0.00 :   7f4f9:  pop    %r14
    0.00 :   7f4fb:  pop    %r15
    0.00 :   7f4fd:  ret
    0.00 :   7f4fe:  xchg   %ax,%ax
    0.00 :   7f500:  mov    0x4(%rsp),%eax
    0.00 :   7f504:  xor    %r12d,%r12d
    0.00 :   7f507:  test   %eax,%eax
    0.00 :   7f509:  je     7f4ec <hash_search@@Base+0xdc>
    0.00 :   7f50b:  mov    0x8(%rsp),%eax
    0.00 :   7f50f:  add    %eax,%eax
    0.00 :   7f511:  cmp    %eax,0xc(%r15)
    0.00 :   7f515:  jge    7f570 <hash_search@@Base+0x160>
    0.00 :   7f517:  mov    $0x20,%edi
    0.00 :   7f51c:  call   30610 <malloc@plt>
    0.00 :   7f521:  mov    %rax,%r12
    0.00 :   7f524:  test   %rax,%rax
    0.00 :   7f527:  je     7f5e7 <hash_search@@Base+0x1d7>
    0.00 :   7f52d:  mov    (%r15),%rax
    0.00 :   7f530:  movslq %r13d,%r13
    0.00 :   7f533:  lea    (%rax,%r13,8),%rax
    0.00 :   7f537:  mov    (%rax),%rdx
    0.00 :   7f53a:  mov    %rdx,(%r12)
    0.00 :   7f53e:  mov    %r12,(%rax)
    0.00 :   7f541:  addl   $0x1,0xc(%r15)
    0.00 :   7f546:  movq   $0x0,0x10(%r12)
    0.00 :   7f54f:  mov    %r14,0x8(%r12)
    0.00 :   7f554:  mov    %ebx,0x18(%r12)
    0.00 :   7f559:  movl   $0x0,0x1c(%r12)
    0.00 :   7f562:  jmp    7f4ec <hash_search@@Base+0xdc>
    0.00 :   7f564:  nopl   0x0(%rax)
    0.00 :   7f568:  xor    %r12d,%r12d
    0.00 :   7f56b:  jmp    7f4ec <hash_search@@Base+0xdc>
    0.00 :   7f570:  mov    0x8(%rsp),%esi
    0.00 :   7f574:  shl    $0x2,%esi
    0.00 :   7f577:  test   %esi,%esi
    0.00 :   7f579:  jle    7f592 <hash_search@@Base+0x182>
    0.00 :   7f57b:  mov    %r15,%rdi
    0.00 :   7f57e:  call   7e600 <buffered_ungetchar@@Base+0x70>
    0.00 :   7f583:  mov    0x8(%r15),%eax
    0.00 :   7f587:  movzbl (%r14),%ebp
    0.00 :   7f58b:  sub    $0x1,%eax
    0.00 :   7f58e:  mov    %eax,0xc(%rsp)
    0.00 :   7f592:  test   %bpl,%bpl
    0.00 :   7f595:  je     7f5da <hash_search@@Base+0x1ca>
    0.00 :   7f597:  mov    %r14,%rsi
    0.00 :   7f59a:  mov    $0x811c9dc5,%ebx
    0.00 :   7f59f:  nop
    0.00 :   7f5a0:  mov    %ebx,%eax
    0.00 :   7f5a2:  lea    (%rbx,%rbx,8),%r9d
    0.00 :   7f5a6:  mov    %ebx,%edi
    0.00 :   7f5a8:  add    $0x1,%rsi
    0.00 :   7f5ac:  shl    $0x7,%eax
    0.00 :   7f5af:  shl    $0x18,%edi
    0.00 :   7f5b2:  lea    (%rax,%r9,2),%eax
    0.00 :   7f5b6:  add    %ebx,%eax
    0.00 :   7f5b8:  shl    $0x8,%ebx
    0.00 :   7f5bb:  add    %ebx,%eax
    0.00 :   7f5bd:  movsbl %bpl,%ebx
    0.00 :   7f5c1:  movzbl (%rsi),%ebp
    0.00 :   7f5c4:  add    %edi,%eax
    0.00 :   7f5c6:  xor    %eax,%ebx
    0.00 :   7f5c8:  test   %bpl,%bpl
    0.00 :   7f5cb:  jne    7f5a0 <hash_search@@Base+0x190>
    0.00 :   7f5cd:  mov    %ebx,%r13d
    0.00 :   7f5d0:  and    0xc(%rsp),%r13d
    0.00 :   7f5d5:  jmp    7f517 <hash_search@@Base+0x107>
    0.00 :   7f5da:  mov    $0x811c9dc5,%r13d
    0.00 :   7f5e0:  mov    $0x811c9dc5,%ebx
    0.00 :   7f5e5:  jmp    7f5d0 <hash_search@@Base+0x1c0>
    0.00 :   7f5e7:  mov    $0x20,%esi
    0.00 :   7f5ec:  lea    0x8ea17(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   7f5f3:  xor    %eax,%eax
    0.00 :   7f5f5:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   7f5fa:  jmp    7f52d <hash_search@@Base+0x11d>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (2 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000003dd70 <_nl_make_l10nflist>:
         : 6     _nl_make_l10nflist():
         : 7     ./intl/../intl/l10nflist.c:157
    0.00 :   3dd70:  endbr64
    0.00 :   3dd74:  push   %r15
    0.00 :   3dd76:  push   %r14
    0.00 :   3dd78:  mov    %r8,%r14
    0.00 :   3dd7b:  push   %r13
    0.00 :   3dd7d:  mov    %ecx,%r13d
    0.00 :   3dd80:  push   %r12
    0.00 :   3dd82:  mov    %rdx,%r12
    0.00 :   3dd85:  push   %rbp
    0.00 :   3dd86:  lea    0x2(%r12),%rbp
    0.00 :   3dd8b:  push   %rbx
    0.00 :   3dd8c:  sub    $0x48,%rsp
    0.00 :   3dd90:  mov    %rdi,0x10(%rsp)
         : 21    ./intl/../intl/l10nflist.c:167
    0.00 :   3dd95:  mov    %r8,%rdi
         : 23    ./intl/../intl/l10nflist.c:157
    0.00 :   3dd98:  mov    %rsi,0x8(%rsp)
    0.00 :   3dd9d:  mov    %ecx,(%rsp)
    0.00 :   3dda0:  mov    %r9,0x18(%rsp)
         : 27    ./intl/../intl/l10nflist.c:167
    0.00 :   3dda5:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3ddaa:  mov    %rax,%r15
         : 30    ./intl/../intl/l10nflist.c:169
    0.00 :   3ddad:  and    $0x4,%r13d
    0.00 :   3ddb1:  je     3e120 <_nl_make_l10nflist+0x3b0>
         : 33    ./intl/../intl/l10nflist.c:169 (discriminator 1)
    0.00 :   3ddb7:  mov    0x18(%rsp),%rdi
    0.00 :   3ddbc:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3ddc1:  lea    0x1(%rax),%rbx
         : 37    ./intl/../intl/l10nflist.c:171
    0.00 :   3ddc5:  mov    (%rsp),%eax
    0.00 :   3ddc8:  add    %rbp,%r15
    0.00 :   3ddcb:  xor    %ebp,%ebp
    0.00 :   3ddcd:  and    $0x2,%eax
    0.00 :   3ddd0:  mov    %eax,0x20(%rsp)
    0.00 :   3ddd4:  je     3dde7 <_nl_make_l10nflist+0x77>
         : 44    ./intl/../intl/l10nflist.c:171 (discriminator 1)
    0.00 :   3ddd6:  mov    0x80(%rsp),%rdi
    0.00 :   3ddde:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3dde3:  lea    0x1(%rax),%rbp
         : 48    ./intl/../intl/l10nflist.c:173
    0.00 :   3dde7:  mov    (%rsp),%eax
    0.00 :   3ddea:  add    %rbx,%r15
    0.00 :   3dded:  xor    %ebx,%ebx
    0.00 :   3ddef:  and    $0x1,%eax
    0.00 :   3ddf2:  mov    %eax,0x28(%rsp)
    0.00 :   3ddf6:  je     3de09 <_nl_make_l10nflist+0x99>
         : 55    ./intl/../intl/l10nflist.c:173 (discriminator 1)
    0.00 :   3ddf8:  mov    0x88(%rsp),%rdi
    0.00 :   3de00:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3de05:  lea    0x1(%rax),%rbx
         : 59    ./intl/../intl/l10nflist.c:175
    0.00 :   3de09:  mov    (%rsp),%eax
    0.00 :   3de0c:  add    %r15,%rbp
    0.00 :   3de0f:  xor    %r15d,%r15d
    0.00 :   3de12:  and    $0x8,%eax
    0.00 :   3de15:  mov    %eax,0x30(%rsp)
    0.00 :   3de19:  je     3de2c <_nl_make_l10nflist+0xbc>
         : 66    ./intl/../intl/l10nflist.c:175 (discriminator 1)
    0.00 :   3de1b:  mov    0x90(%rsp),%rdi
    0.00 :   3de23:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3de28:  lea    0x1(%rax),%r15
         : 70    ./intl/../intl/l10nflist.c:176
    0.00 :   3de2c:  mov    0x98(%rsp),%rdi
    0.00 :   3de34:  call   28490 <*ABS*+0xa86a0@plt>
         : 73    ./intl/../intl/l10nflist.c:166
    0.00 :   3de39:  lea    (%rbx,%rbp,1),%rdi
    0.00 :   3de3d:  add    %r15,%rdi
         : 76    ./intl/../intl/l10nflist.c:176
    0.00 :   3de40:  mov    %rax,0x38(%rsp)
         : 78    ./intl/../intl/l10nflist.c:166
    0.00 :   3de45:  add    %rax,%rdi
    0.00 :   3de48:  call   28380 <malloc@plt>
    0.00 :   3de4d:  mov    %rax,%rbp
         : 82    ./intl/../intl/l10nflist.c:178
    0.00 :   3de50:  test   %rax,%rax
    0.00 :   3de53:  je     3e344 <_nl_make_l10nflist+0x5d4>
         : 85    ./intl/../intl/l10nflist.c:185
    0.00 :   3de59:  mov    0x8(%rsp),%rsi
    0.00 :   3de5e:  mov    %r12,%rdx
    0.00 :   3de61:  mov    %rax,%rdi
    0.00 :   3de64:  call   28620 <*ABS*+0xa9c10@plt>
         : 90    argz_stringify__():
         : 91    ./intl/../intl/l10nflist.c:96
    0.00 :   3de69:  test   %r12,%r12
    0.00 :   3de6c:  je     3de98 <_nl_make_l10nflist+0x128>
    0.00 :   3de6e:  mov    %r12,%rbx
    0.00 :   3de71:  mov    %rbp,%r15
    0.00 :   3de74:  nopl   0x0(%rax)
         : 97    ./intl/../intl/l10nflist.c:98
    0.00 :   3de78:  mov    %r15,%rdi
    0.00 :   3de7b:  call   28490 <*ABS*+0xa86a0@plt>
         : 100   ./intl/../intl/l10nflist.c:100
    0.00 :   3de80:  sub    %rax,%rbx
         : 102   ./intl/../intl/l10nflist.c:101
    0.00 :   3de83:  sub    $0x1,%rbx
    0.00 :   3de87:  je     3de98 <_nl_make_l10nflist+0x128>
         : 105   ./intl/../intl/l10nflist.c:99
    0.00 :   3de89:  add    %r15,%rax
         : 107   ./intl/../intl/l10nflist.c:102
    0.00 :   3de8c:  movb   $0x3a,(%rax)
    0.00 :   3de8f:  lea    0x1(%rax),%r15
         : 110   ./intl/../intl/l10nflist.c:96
    0.00 :   3de93:  jmp    3de78 <_nl_make_l10nflist+0x108>
    0.00 :   3de95:  nopl   (%rax)
         : 113   _nl_make_l10nflist():
         : 114   ./intl/../intl/l10nflist.c:188
    0.00 :   3de98:  movb   $0x2f,-0x1(%rbp,%r12,1)
    0.00 :   3de9e:  lea    0x0(%rbp,%r12,1),%rdi
         : 117   ./intl/../intl/l10nflist.c:189
    0.00 :   3dea3:  mov    %r14,%rsi
    0.00 :   3dea6:  call   28450 <*ABS*+0xa9950@plt>
         : 120   ./intl/../intl/l10nflist.c:191
    0.00 :   3deab:  test   %r13d,%r13d
    0.00 :   3deae:  jne    3e2b0 <_nl_make_l10nflist+0x540>
         : 123   ./intl/../intl/l10nflist.c:196
    0.00 :   3deb4:  mov    0x20(%rsp),%esi
    0.00 :   3deb8:  test   %esi,%esi
    0.00 :   3deba:  jne    3e290 <_nl_make_l10nflist+0x520>
         : 127   ./intl/../intl/l10nflist.c:201
    0.00 :   3dec0:  mov    0x28(%rsp),%ecx
    0.00 :   3dec4:  test   %ecx,%ecx
    0.00 :   3dec6:  jne    3e270 <_nl_make_l10nflist+0x500>
         : 131   ./intl/../intl/l10nflist.c:206
    0.00 :   3decc:  mov    0x30(%rsp),%edx
    0.00 :   3ded0:  test   %edx,%edx
    0.00 :   3ded2:  jne    3e250 <_nl_make_l10nflist+0x4e0>
         : 135   ./intl/../intl/l10nflist.c:213
    0.00 :   3ded8:  mov    0x38(%rsp),%rdx
         : 137   ./intl/../intl/l10nflist.c:212
    0.00 :   3dedd:  movb   $0x2f,(%rax)
    0.00 :   3dee0:  lea    0x1(%rax),%rdi
         : 140   ./intl/../intl/l10nflist.c:213
    0.00 :   3dee4:  mov    0x98(%rsp),%rsi
    0.00 :   3deec:  add    $0x1,%rdx
    0.00 :   3def0:  call   28620 <*ABS*+0xa9c10@plt>
         : 144   ./intl/../intl/l10nflist.c:218
    0.00 :   3def5:  mov    0x10(%rsp),%rax
    0.00 :   3defa:  mov    (%rax),%rax
    0.00 :   3defd:  mov    %rax,0x30(%rsp)
    0.00 :   3df02:  test   %rax,%rax
    0.00 :   3df05:  je     3e326 <_nl_make_l10nflist+0x5b6>
    0.00 :   3df0b:  mov    %rax,%r13
         : 151   ./intl/../intl/l10nflist.c:217
    0.00 :   3df0e:  xor    %ebx,%ebx
         : 153   ./intl/../intl/l10nflist.c:219
    0.00 :   3df10:  mov    0x0(%r13),%rdi
    0.00 :   3df14:  test   %rdi,%rdi
    0.00 :   3df17:  je     3df2e <_nl_make_l10nflist+0x1be>
         : 157   ./intl/../intl/l10nflist.c:221
    0.00 :   3df19:  mov    %rbp,%rsi
    0.00 :   3df1c:  call   28690 <*ABS*+0xa82e0@plt>
         : 160   ./intl/../intl/l10nflist.c:222
    0.00 :   3df21:  test   %eax,%eax
    0.00 :   3df23:  je     3e2f0 <_nl_make_l10nflist+0x580>
         : 163   ./intl/../intl/l10nflist.c:225
    0.00 :   3df29:  js     3df37 <_nl_make_l10nflist+0x1c7>
    0.00 :   3df2b:  mov    %r13,%rbx
         : 166   ./intl/../intl/l10nflist.c:218 (discriminator 2)
    0.00 :   3df2e:  mov    0x18(%r13),%r13
    0.00 :   3df32:  test   %r13,%r13
   50.36 :   3df35:  jne    3df10 <_nl_make_l10nflist+0x1a0>
    0.00 :   3df37:  mov    %rbx,0x20(%rsp)
         : 171   ./intl/../intl/l10nflist.c:235
    0.00 :   3df3c:  mov    0xa0(%rsp),%eax
    0.00 :   3df43:  test   %eax,%eax
    0.00 :   3df45:  je     3e2e6 <_nl_make_l10nflist+0x576>
         : 175   pop():
         : 176   ./intl/../intl/l10nflist.c:140
    0.00 :   3df4b:  mov    (%rsp),%ecx
         : 178   argz_count__():
         : 179   ./intl/../intl/l10nflist.c:74
    0.00 :   3df4e:  mov    0x8(%rsp),%r15
    0.00 :   3df53:  mov    %r12,%rbx
         : 182   ./intl/../intl/l10nflist.c:73
    0.00 :   3df56:  xor    %r13d,%r13d
         : 184   pop():
         : 185   ./intl/../intl/l10nflist.c:140
    0.00 :   3df59:  mov    %ecx,%eax
    0.00 :   3df5b:  and    $0x5555,%ecx
    0.00 :   3df61:  sar    %eax
    0.00 :   3df63:  and    $0xffffd555,%eax
    0.00 :   3df68:  add    %ecx,%eax
         : 191   ./intl/../intl/l10nflist.c:141
    0.00 :   3df6a:  mov    %eax,%edx
    0.00 :   3df6c:  and    $0x3333,%eax
    0.00 :   3df71:  sar    $0x2,%edx
    0.00 :   3df74:  and    $0xfffff333,%edx
    0.00 :   3df7a:  add    %eax,%edx
         : 197   ./intl/../intl/l10nflist.c:142
    0.00 :   3df7c:  mov    %edx,%eax
    0.00 :   3df7e:  sar    $0x4,%eax
    0.00 :   3df81:  add    %edx,%eax
    0.00 :   3df83:  and    $0xf0f,%eax
         : 202   ./intl/../intl/l10nflist.c:143
    0.00 :   3df88:  mov    %eax,%ecx
    0.00 :   3df8a:  sar    $0x8,%ecx
    0.00 :   3df8d:  add    %eax,%ecx
         : 206   _nl_make_l10nflist():
         : 207   ./intl/../intl/l10nflist.c:243
    0.00 :   3df8f:  mov    $0x1,%eax
    0.00 :   3df94:  shl    %cl,%eax
    0.00 :   3df96:  cltq
    0.00 :   3df98:  mov    %rax,0x28(%rsp)
         : 212   argz_count__():
         : 213   ./intl/../intl/l10nflist.c:74
    0.00 :   3df9d:  test   %r12,%r12
    0.00 :   3dfa0:  je     3e306 <_nl_make_l10nflist+0x596>
    0.00 :   3dfa6:  cs nopw 0x0(%rax,%rax,1)
         : 217   ./intl/../intl/l10nflist.c:76
    0.00 :   3dfb0:  mov    %r15,%rdi
         : 219   ./intl/../intl/l10nflist.c:79
    0.00 :   3dfb3:  add    $0x1,%r13
         : 221   ./intl/../intl/l10nflist.c:76
    0.00 :   3dfb7:  call   28490 <*ABS*+0xa86a0@plt>
         : 223   ./intl/../intl/l10nflist.c:77
    0.00 :   3dfbc:  sub    %rax,%rbx
    0.00 :   3dfbf:  lea    0x1(%r15,%rax,1),%r15
         : 226   ./intl/../intl/l10nflist.c:74
    0.00 :   3dfc4:  sub    $0x1,%rbx
    0.00 :   3dfc8:  jne    3dfb0 <_nl_make_l10nflist+0x240>
         : 229   _nl_make_l10nflist():
         : 230   ./intl/../intl/l10nflist.c:244
    0.00 :   3dfca:  imul   0x28(%rsp),%r13
    0.00 :   3dfd0:  shl    $0x4,%r13
         : 233   ./intl/../intl/l10nflist.c:242
    0.00 :   3dfd4:  lea    0x28(%r13),%rdi
    0.00 :   3dfd8:  call   28380 <malloc@plt>
    0.00 :   3dfdd:  mov    %rax,%r13
         : 237   ./intl/../intl/l10nflist.c:245
    0.00 :   3dfe0:  test   %rax,%rax
    0.00 :   3dfe3:  je     3e334 <_nl_make_l10nflist+0x5c4>
         : 240   ./intl/../intl/l10nflist.c:251
    0.00 :   3dfe9:  mov    0x8(%rsp),%r15
    0.00 :   3dfee:  mov    %rbp,(%rax)
    0.00 :   3dff1:  mov    %r12,%rbp
    0.00 :   3dff4:  nopl   0x0(%rax)
         : 245   argz_count__():
         : 246   ./intl/../intl/l10nflist.c:76
    0.00 :   3dff8:  mov    %r15,%rdi
         : 248   ./intl/../intl/l10nflist.c:79
    0.00 :   3dffb:  add    $0x1,%rbx
         : 250   ./intl/../intl/l10nflist.c:76
    0.00 :   3dfff:  call   28490 <*ABS*+0xa86a0@plt>
         : 252   ./intl/../intl/l10nflist.c:77
    0.00 :   3e004:  sub    %rax,%rbp
    0.00 :   3e007:  lea    0x1(%r15,%rax,1),%r15
         : 255   ./intl/../intl/l10nflist.c:74
    0.00 :   3e00c:  sub    $0x1,%rbp
    0.00 :   3e010:  jne    3dff8 <_nl_make_l10nflist+0x288>
         : 258   _nl_make_l10nflist():
         : 259   ./intl/../intl/l10nflist.c:256
    0.00 :   3e012:  mov    $0x1,%eax
    0.00 :   3e017:  cmp    $0x1,%rbx
    0.00 :   3e01b:  je     3e130 <_nl_make_l10nflist+0x3c0>
         : 263   ./intl/../intl/l10nflist.c:260
    0.00 :   3e021:  cmpq   $0x0,0x20(%rsp)
         : 265   ./intl/../intl/l10nflist.c:255
    0.00 :   3e027:  mov    %eax,0x8(%r13)
         : 267   ./intl/../intl/l10nflist.c:258
    0.00 :   3e02b:  movq   $0x0,0x10(%r13)
         : 269   ./intl/../intl/l10nflist.c:260
    0.00 :   3e033:  je     3e2d0 <_nl_make_l10nflist+0x560>
         : 271   ./intl/../intl/l10nflist.c:267
    0.00 :   3e039:  mov    0x20(%rsp),%rcx
    0.00 :   3e03e:  mov    0x18(%rcx),%rax
    0.00 :   3e042:  mov    %rax,0x18(%r13)
         : 275   ./intl/../intl/l10nflist.c:268
    0.00 :   3e046:  mov    %r13,0x18(%rcx)
         : 277   argz_count__():
         : 278   ./intl/../intl/l10nflist.c:74
    0.00 :   3e04a:  test   %r12,%r12
    0.00 :   3e04d:  je     3e2fd <_nl_make_l10nflist+0x58d>
    0.00 :   3e053:  mov    0x8(%rsp),%r15
    0.00 :   3e058:  mov    %r12,%rbx
         : 283   ./intl/../intl/l10nflist.c:73
    0.00 :   3e05b:  xor    %ebp,%ebp
    0.00 :   3e05d:  nopl   (%rax)
         : 286   ./intl/../intl/l10nflist.c:76
    0.00 :   3e060:  mov    %r15,%rdi
         : 288   ./intl/../intl/l10nflist.c:79
    0.00 :   3e063:  add    $0x1,%rbp
         : 290   ./intl/../intl/l10nflist.c:76
    0.00 :   3e067:  call   28490 <*ABS*+0xa86a0@plt>
         : 292   ./intl/../intl/l10nflist.c:77
    0.00 :   3e06c:  sub    %rax,%rbx
    0.00 :   3e06f:  lea    0x1(%r15,%rax,1),%r15
         : 295   ./intl/../intl/l10nflist.c:74
    0.00 :   3e074:  sub    $0x1,%rbx
    0.00 :   3e078:  jne    3e060 <_nl_make_l10nflist+0x2f0>
         : 298   _nl_make_l10nflist():
         : 299   ./intl/../intl/l10nflist.c:275
    0.00 :   3e07a:  xor    %eax,%eax
    0.00 :   3e07c:  mov    (%rsp),%r15d
    0.00 :   3e080:  cmp    $0x1,%rbp
    0.00 :   3e084:  sete   %al
    0.00 :   3e087:  sub    %eax,%r15d
         : 305   ./intl/../intl/l10nflist.c:292 (discriminator 1)
    0.00 :   3e08a:  mov    (%rsp),%ebp
    0.00 :   3e08d:  mov    0x8(%rsp),%rax
    0.00 :   3e092:  xor    %ebx,%ebx
    0.00 :   3e094:  not    %ebp
    0.00 :   3e096:  lea    (%rax,%r12,1),%r10
         : 311   ./intl/../intl/l10nflist.c:276 (discriminator 1)
    0.00 :   3e09a:  test   %r15d,%r15d
    0.00 :   3e09d:  js     3e0c0 <_nl_make_l10nflist+0x350>
    0.00 :   3e09f:  mov    %r10,%r11
    0.00 :   3e0a2:  mov    %r13,%r10
    0.00 :   3e0a5:  mov    %r14,%r13
    0.00 :   3e0a8:  mov    %r12,%r14
         : 318   ./intl/../intl/l10nflist.c:277
    0.00 :   3e0ab:  test   %ebp,%r15d
    0.00 :   3e0ae:  je     3e1a8 <_nl_make_l10nflist+0x438>
         : 321   ./intl/../intl/l10nflist.c:276
    0.00 :   3e0b4:  sub    $0x1,%r15d
    0.00 :   3e0b8:  jae    3e0ab <_nl_make_l10nflist+0x33b>
    0.00 :   3e0ba:  mov    %r13,%r14
   49.64 :   3e0bd:  mov    %r10,%r13
         : 326   ./intl/../intl/l10nflist.c:290
    0.00 :   3e0c0:  mov    0x98(%rsp),%rdi
    0.00 :   3e0c8:  mov    $0xb,%edx
    0.00 :   3e0cd:  lea    0x19a461(%rip),%rsi        # 1d8535 <_nl_POSIX_name+0x46>
    0.00 :   3e0d4:  call   28590 <*ABS*+0xa8830@plt>
    0.00 :   3e0d9:  test   %eax,%eax
    0.00 :   3e0db:  jne    3e102 <_nl_make_l10nflist+0x392>
         : 333   ./intl/../intl/l10nflist.c:291
    0.00 :   3e0dd:  mov    (%rsp),%eax
    0.00 :   3e0e0:  test   %eax,%eax
    0.00 :   3e0e2:  js     3e102 <_nl_make_l10nflist+0x392>
         : 337   ./intl/../intl/l10nflist.c:292
    0.00 :   3e0e4:  mov    %eax,%r12d
         : 339   ./intl/../intl/l10nflist.c:295
    0.00 :   3e0e7:  mov    %r14,%rbp
    0.00 :   3e0ea:  lea    0x19a450(%rip),%r15        # 1d8541 <_nl_POSIX_name+0x52>
    0.00 :   3e0f1:  mov    %eax,%r14d
         : 343   ./intl/../intl/l10nflist.c:292
    0.00 :   3e0f4:  not    %r12d
    0.00 :   3e0f7:  test   %r12d,%r14d
    0.00 :   3e0fa:  je     3e148 <_nl_make_l10nflist+0x3d8>
         : 347   ./intl/../intl/l10nflist.c:291 (discriminator 2)
    0.00 :   3e0fc:  sub    $0x1,%r14d
    0.00 :   3e100:  jae    3e0f7 <_nl_make_l10nflist+0x387>
         : 350   ./intl/../intl/l10nflist.c:300
    0.00 :   3e102:  movq   $0x0,0x20(%r13,%rbx,8)
         : 352   ./intl/../intl/l10nflist.c:303
    0.00 :   3e10b:  add    $0x48,%rsp
    0.00 :   3e10f:  mov    %r13,%rax
    0.00 :   3e112:  pop    %rbx
    0.00 :   3e113:  pop    %rbp
    0.00 :   3e114:  pop    %r12
    0.00 :   3e116:  pop    %r13
    0.00 :   3e118:  pop    %r14
    0.00 :   3e11a:  pop    %r15
    0.00 :   3e11c:  ret
    0.00 :   3e11d:  nopl   (%rax)
    0.00 :   3e120:  xor    %ebx,%ebx
    0.00 :   3e122:  jmp    3ddc5 <_nl_make_l10nflist+0x55>
    0.00 :   3e127:  nopw   0x0(%rax,%rax,1)
         : 366   ./intl/../intl/l10nflist.c:257 (discriminator 2)
    0.00 :   3e130:  mov    (%rsp),%eax
    0.00 :   3e133:  and    $0x3,%eax
         : 369   ./intl/../intl/l10nflist.c:256 (discriminator 2)
    0.00 :   3e136:  cmp    $0x3,%eax
    0.00 :   3e139:  sete   %al
    0.00 :   3e13c:  movzbl %al,%eax
    0.00 :   3e13f:  jmp    3e021 <_nl_make_l10nflist+0x2b1>
    0.00 :   3e144:  nopl   0x0(%rax)
         : 375   ./intl/../intl/l10nflist.c:294
    0.00 :   3e148:  lea    0x1(%rbx),%rax
         : 377   ./intl/../intl/l10nflist.c:295
    0.00 :   3e14c:  sub    $0x8,%rsp
    0.00 :   3e150:  mov    %rbp,%r8
    0.00 :   3e153:  mov    %r14d,%ecx
         : 381   ./intl/../intl/l10nflist.c:294
    0.00 :   3e156:  mov    %rax,0x8(%rsp)
         : 383   ./intl/../intl/l10nflist.c:295
    0.00 :   3e15b:  mov    $0x1b,%edx
    0.00 :   3e160:  mov    %r15,%rsi
    0.00 :   3e163:  push   $0x1
    0.00 :   3e165:  push   0xa8(%rsp)
    0.00 :   3e16c:  push   0xa8(%rsp)
    0.00 :   3e173:  push   0xa8(%rsp)
    0.00 :   3e17a:  push   0xa8(%rsp)
    0.00 :   3e181:  mov    0x48(%rsp),%r9
    0.00 :   3e186:  mov    0x40(%rsp),%rdi
    0.00 :   3e18b:  call   3dd70 <_nl_make_l10nflist>
    0.00 :   3e190:  add    $0x30,%rsp
    0.00 :   3e194:  mov    %rax,0x20(%r13,%rbx,8)
         : 396   ./intl/../intl/l10nflist.c:294
    0.00 :   3e199:  mov    (%rsp),%rbx
    0.00 :   3e19d:  jmp    3e0fc <_nl_make_l10nflist+0x38c>
    0.00 :   3e1a2:  nopw   0x0(%rax,%rax,1)
    0.00 :   3e1a8:  test   %r14,%r14
    0.00 :   3e1ab:  je     3e0b4 <_nl_make_l10nflist+0x344>
         : 402   ./intl/../intl/l10nflist.c:277
    0.00 :   3e1b1:  mov    0x8(%rsp),%r12
    0.00 :   3e1b6:  mov    %ebp,0x20(%rsp)
    0.00 :   3e1ba:  mov    %r11,%rbp
    0.00 :   3e1bd:  mov    %r14,0x28(%rsp)
    0.00 :   3e1c2:  mov    %r12,%r14
    0.00 :   3e1c5:  mov    %r10,%r12
         : 409   ./intl/../intl/l10nflist.c:285
    0.00 :   3e1c8:  mov    %r14,%rdi
         : 411   ./intl/../intl/l10nflist.c:284
    0.00 :   3e1cb:  add    $0x1,%rbx
         : 413   ./intl/../intl/l10nflist.c:285
    0.00 :   3e1cf:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3e1d4:  sub    $0x8,%rsp
    0.00 :   3e1d8:  mov    %r13,%r8
    0.00 :   3e1db:  mov    %r15d,%ecx
    0.00 :   3e1de:  push   $0x1
    0.00 :   3e1e0:  lea    0x1(%rax),%rdx
    0.00 :   3e1e4:  mov    %r14,%rsi
    0.00 :   3e1e7:  push   0xa8(%rsp)
    0.00 :   3e1ee:  push   0xa8(%rsp)
    0.00 :   3e1f5:  push   0xa8(%rsp)
    0.00 :   3e1fc:  push   0xa8(%rsp)
    0.00 :   3e203:  mov    0x48(%rsp),%r9
    0.00 :   3e208:  mov    0x40(%rsp),%rdi
    0.00 :   3e20d:  call   3dd70 <_nl_make_l10nflist>
         : 428   __GI___argz_next():
         : 429   ./intl/../string/argz.h:138
    0.00 :   3e212:  add    $0x30,%rsp
         : 431   _nl_make_l10nflist():
         : 432   ./intl/../intl/l10nflist.c:285
    0.00 :   3e216:  mov    %rax,0x18(%r12,%rbx,8)
         : 434   __GI___argz_next():
         : 435   ./intl/../string/argz.h:138
    0.00 :   3e21b:  cmp    %r14,%rbp
    0.00 :   3e21e:  jbe    3e232 <_nl_make_l10nflist+0x4c2>
         : 438   ./intl/../string/argz.h:139
    0.00 :   3e220:  mov    %r14,%rdi
    0.00 :   3e223:  call   28490 <*ABS*+0xa86a0@plt>
    0.00 :   3e228:  lea    0x1(%r14,%rax,1),%r14
         : 442   ./intl/../string/argz.h:141
    0.00 :   3e22d:  cmp    %rbp,%r14
    0.00 :   3e230:  jb     3e1c8 <_nl_make_l10nflist+0x458>
    0.00 :   3e232:  mov    %rbp,%r11
    0.00 :   3e235:  mov    0x28(%rsp),%r14
    0.00 :   3e23a:  mov    0x20(%rsp),%ebp
    0.00 :   3e23e:  mov    %r12,%r10
    0.00 :   3e241:  jmp    3e0b4 <_nl_make_l10nflist+0x344>
    0.00 :   3e246:  cs nopw 0x0(%rax,%rax,1)
         : 451   _nl_make_l10nflist():
         : 452   ./intl/../intl/l10nflist.c:208
    0.00 :   3e250:  movb   $0x40,(%rax)
         : 454   ./intl/../intl/l10nflist.c:209
    0.00 :   3e253:  mov    0x90(%rsp),%rsi
         : 456   ./intl/../intl/l10nflist.c:208
    0.00 :   3e25b:  lea    0x1(%rax),%rdi
         : 458   ./intl/../intl/l10nflist.c:209
    0.00 :   3e25f:  call   28450 <*ABS*+0xa9950@plt>
    0.00 :   3e264:  jmp    3ded8 <_nl_make_l10nflist+0x168>
    0.00 :   3e269:  nopl   0x0(%rax)
         : 462   ./intl/../intl/l10nflist.c:203
    0.00 :   3e270:  movb   $0x2e,(%rax)
         : 464   ./intl/../intl/l10nflist.c:204
    0.00 :   3e273:  mov    0x88(%rsp),%rsi
         : 466   ./intl/../intl/l10nflist.c:203
    0.00 :   3e27b:  lea    0x1(%rax),%rdi
         : 468   ./intl/../intl/l10nflist.c:204
    0.00 :   3e27f:  call   28450 <*ABS*+0xa9950@plt>
    0.00 :   3e284:  jmp    3decc <_nl_make_l10nflist+0x15c>
    0.00 :   3e289:  nopl   0x0(%rax)
         : 472   ./intl/../intl/l10nflist.c:198
    0.00 :   3e290:  movb   $0x2e,(%rax)
         : 474   ./intl/../intl/l10nflist.c:199
    0.00 :   3e293:  mov    0x80(%rsp),%rsi
         : 476   ./intl/../intl/l10nflist.c:198
    0.00 :   3e29b:  lea    0x1(%rax),%rdi
         : 478   ./intl/../intl/l10nflist.c:199
    0.00 :   3e29f:  call   28450 <*ABS*+0xa9950@plt>
    0.00 :   3e2a4:  jmp    3dec0 <_nl_make_l10nflist+0x150>
    0.00 :   3e2a9:  nopl   0x0(%rax)
         : 482   ./intl/../intl/l10nflist.c:193
    0.00 :   3e2b0:  movb   $0x5f,(%rax)
         : 484   ./intl/../intl/l10nflist.c:194
    0.00 :   3e2b3:  mov    0x18(%rsp),%rsi
         : 486   ./intl/../intl/l10nflist.c:193
    0.00 :   3e2b8:  lea    0x1(%rax),%rdi
         : 488   ./intl/../intl/l10nflist.c:194
    0.00 :   3e2bc:  call   28450 <*ABS*+0xa9950@plt>
    0.00 :   3e2c1:  jmp    3deb4 <_nl_make_l10nflist+0x144>
    0.00 :   3e2c6:  cs nopw 0x0(%rax,%rax,1)
         : 492   ./intl/../intl/l10nflist.c:262
    0.00 :   3e2d0:  mov    0x30(%rsp),%rax
    0.00 :   3e2d5:  mov    %rax,0x18(%r13)
         : 495   ./intl/../intl/l10nflist.c:263
    0.00 :   3e2d9:  mov    0x10(%rsp),%rax
    0.00 :   3e2de:  mov    %r13,(%rax)
    0.00 :   3e2e1:  jmp    3e04a <_nl_make_l10nflist+0x2da>
    0.00 :   3e2e6:  xor    %r13d,%r13d
    0.00 :   3e2e9:  nopl   0x0(%rax)
         : 501   ./intl/../intl/l10nflist.c:237
    0.00 :   3e2f0:  mov    %rbp,%rdi
    0.00 :   3e2f3:  call   28370 <free@plt>
         : 504   ./intl/../intl/l10nflist.c:238
    0.00 :   3e2f8:  jmp    3e10b <_nl_make_l10nflist+0x39b>
         : 506   argz_count__():
         : 507   ./intl/../intl/l10nflist.c:74
    0.00 :   3e2fd:  mov    (%rsp),%r15d
    0.00 :   3e301:  jmp    3e08a <_nl_make_l10nflist+0x31a>
         : 510   _nl_make_l10nflist():
         : 511   ./intl/../intl/l10nflist.c:242
    0.00 :   3e306:  mov    $0x28,%edi
    0.00 :   3e30b:  call   28380 <malloc@plt>
    0.00 :   3e310:  mov    %rax,%r13
         : 515   ./intl/../intl/l10nflist.c:245
    0.00 :   3e313:  test   %rax,%rax
    0.00 :   3e316:  je     3e334 <_nl_make_l10nflist+0x5c4>
         : 518   ./intl/../intl/l10nflist.c:251
    0.00 :   3e318:  mov    %rbp,0x0(%r13)
         : 520   ./intl/../intl/l10nflist.c:256
    0.00 :   3e31c:  mov    $0x1,%eax
    0.00 :   3e321:  jmp    3e021 <_nl_make_l10nflist+0x2b1>
         : 523   ./intl/../intl/l10nflist.c:217
    0.00 :   3e326:  movq   $0x0,0x20(%rsp)
    0.00 :   3e32f:  jmp    3df3c <_nl_make_l10nflist+0x1cc>
         : 526   ./intl/../intl/l10nflist.c:247
    0.00 :   3e334:  mov    %rbp,%rdi
         : 528   ./intl/../intl/l10nflist.c:248
    0.00 :   3e337:  xor    %r13d,%r13d
         : 530   ./intl/../intl/l10nflist.c:247
    0.00 :   3e33a:  call   28370 <free@plt>
         : 532   ./intl/../intl/l10nflist.c:248
    0.00 :   3e33f:  jmp    3e10b <_nl_make_l10nflist+0x39b>
         : 534   ./intl/../intl/l10nflist.c:179
    0.00 :   3e344:  xor    %r13d,%r13d
    0.00 :   3e347:  jmp    3e10b <_nl_make_l10nflist+0x39b>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000134ba0 <__printf_chk>:
         : 6      ___printf_chk():
         : 7      ./debug/printf_chk.c:25
    0.00 :   134ba0: endbr64
    0.00 :   134ba4: sub    $0xd8,%rsp
    0.00 :   134bab: mov    %rdx,0x30(%rsp)
    0.00 :   134bb0: mov    %rcx,0x38(%rsp)
    0.00 :   134bb5: mov    %r8,0x40(%rsp)
    0.00 :   134bba: mov    %r9,0x48(%rsp)
    0.00 :   134bbf: test   %al,%al
    0.00 :   134bc1: je     134bfa <__printf_chk+0x5a>
    0.00 :   134bc3: movaps %xmm0,0x50(%rsp)
    0.00 :   134bc8: movaps %xmm1,0x60(%rsp)
    0.00 :   134bcd: movaps %xmm2,0x70(%rsp)
    0.00 :   134bd2: movaps %xmm3,0x80(%rsp)
    0.00 :   134bda: movaps %xmm4,0x90(%rsp)
    0.00 :   134be2: movaps %xmm5,0xa0(%rsp)
    0.00 :   134bea: movaps %xmm6,0xb0(%rsp)
    0.00 :   134bf2: movaps %xmm7,0xc0(%rsp)
    0.00 :   134bfa: mov    %fs:0x28,%rax
  100.00 :   134c03: mov    %rax,0x18(%rsp)
    0.00 :   134c08: xor    %eax,%eax
         : 27     ./debug/printf_chk.c:32
    0.00 :   134c0a: lea    0xe0(%rsp),%rax
         : 29     ./debug/printf_chk.c:28
    0.00 :   134c12: xor    %ecx,%ecx
    0.00 :   134c14: test   %edi,%edi
         : 32     ./debug/printf_chk.c:32
    0.00 :   134c16: mov    %rax,0x8(%rsp)
    0.00 :   134c1b: lea    0x20(%rsp),%rax
         : 35     ./debug/printf_chk.c:28
    0.00 :   134c20: setg   %cl
         : 37     ./debug/printf_chk.c:33
    0.00 :   134c23: mov    %rsp,%rdx
         : 39     ./debug/printf_chk.c:32
    0.00 :   134c26: mov    %rax,0x10(%rsp)
         : 41     ./debug/printf_chk.c:33
    0.00 :   134c2b: mov    0xe5206(%rip),%rax        # 219e38 <stdout@@GLIBC_2.2.5-0x1a30>
         : 43     ./debug/printf_chk.c:28
    0.00 :   134c32: add    %ecx,%ecx
         : 45     ./debug/printf_chk.c:32
    0.00 :   134c34: movl   $0x10,(%rsp)
         : 47     ./debug/printf_chk.c:33
    0.00 :   134c3b: mov    (%rax),%rdi
         : 49     ./debug/printf_chk.c:32
    0.00 :   134c3e: movl   $0x30,0x4(%rsp)
         : 51     ./debug/printf_chk.c:33
    0.00 :   134c46: call   75030 <__vfprintf_internal>
         : 53     ./debug/printf_chk.c:37
    0.00 :   134c4b: mov    0x18(%rsp),%rdx
    0.00 :   134c50: sub    %fs:0x28,%rdx
    0.00 :   134c59: jne    134c63 <__printf_chk+0xc3>
    0.00 :   134c5b: add    $0xd8,%rsp
    0.00 :   134c62: ret
    0.00 :   134c63: call   136550 <__stack_chk_fail>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .plt.sec:
         :
         : 5    0000000000002440 <free@plt>:
    0.00 :   2440:   endbr64
  100.00 :   2444:   bnd jmp *0x16aad(%rip)        # 18ef8 <free@GLIBC_2.2.5>
    0.00 :   244b:   nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     0000000000028620 <*ABS*+0xa9c10@plt>:
  100.00 :   28620:  endbr64
    0.00 :   28624:  bnd jmp *0x1f1b35(%rip)        # 21a160 <_GLOBAL_OFFSET_TABLE_+0x160>
    0.00 :   2862b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008c930 <_IO_do_write@@GLIBC_2.2.5>:
         : 6     _IO_new_do_write():
         : 7     ./libio/fileops.c:423
    0.00 :   8c930:  endbr64
         : 9     ./libio/fileops.c:425
    0.00 :   8c934:  xor    %eax,%eax
    0.00 :   8c936:  test   %rdx,%rdx
    0.00 :   8c939:  jne    8c940 <_IO_do_write@@GLIBC_2.2.5+0x10>
         : 13    ./libio/fileops.c:426
    0.00 :   8c93b:  ret
    0.00 :   8c93c:  nopl   0x0(%rax)
         : 16    ./libio/fileops.c:423
    0.00 :   8c940:  push   %r15
         : 18    IO_validate_vtable():
         : 19    ./libio/libioP.h:940
    0.00 :   8c942:  lea    0x18a0b7(%rip),%r15        # 216a00 <_IO_helper_jumps>
         : 21    _IO_new_do_write():
         : 22    ./libio/fileops.c:423
    0.00 :   8c949:  push   %r14
    0.00 :   8c94b:  push   %r13
         : 25    IO_validate_vtable():
         : 26    ./libio/libioP.h:940
    0.00 :   8c94d:  lea    0x18ae14(%rip),%r13        # 217768 <__stop___libc_IO_vtables>
         : 28    _IO_new_do_write():
         : 29    ./libio/fileops.c:423
    0.00 :   8c954:  push   %r12
         : 31    IO_validate_vtable():
         : 32    ./libio/libioP.h:940
    0.00 :   8c956:  sub    %r15,%r13
    0.00 :   8c959:  mov    %rsi,%r12
         : 35    _IO_new_do_write():
         : 36    ./libio/fileops.c:423
    0.00 :   8c95c:  push   %rbp
    0.00 :   8c95d:  mov    %rdx,%rbp
    0.00 :   8c960:  push   %rbx
    0.00 :   8c961:  mov    %rdi,%rbx
    0.00 :   8c964:  sub    $0x8,%rsp
         : 42    new_do_write():
         : 43    ./libio/fileops.c:443
    0.00 :   8c968:  mov    0xd8(%rdi),%r14
         : 45    ./libio/fileops.c:433
    0.00 :   8c96f:  testl  $0x1000,(%rdi)
    0.00 :   8c975:  jne    8ca40 <_IO_do_write@@GLIBC_2.2.5+0x110>
         : 48    ./libio/fileops.c:440
    0.00 :   8c97b:  mov    0x10(%rdi),%rax
    0.00 :   8c97f:  mov    0x20(%rdi),%rsi
    0.00 :   8c983:  cmp    %rsi,%rax
    0.00 :   8c986:  je     8c9c5 <_IO_do_write@@GLIBC_2.2.5+0x95>
         : 53    IO_validate_vtable():
         : 54    ./libio/libioP.h:942
    0.00 :   8c988:  mov    %r14,%rdx
    0.00 :   8c98b:  sub    %r15,%rdx
         : 57    ./libio/libioP.h:943
    0.00 :   8c98e:  cmp    %rdx,%r13
    0.00 :   8c991:  jbe    8ca90 <_IO_do_write@@GLIBC_2.2.5+0x160>
         : 60    new_do_write():
         : 61    ./libio/fileops.c:443
    0.00 :   8c997:  mov    $0x1,%edx
    0.00 :   8c99c:  sub    %rax,%rsi
    0.00 :   8c99f:  mov    %rbx,%rdi
    0.00 :   8c9a2:  call   *0x80(%r14)
    0.00 :   8c9a9:  mov    %rax,%rdx
         : 67    _IO_new_do_write():
         : 68    ./libio/fileops.c:425
    0.00 :   8c9ac:  mov    $0xffffffff,%eax
         : 70    new_do_write():
         : 71    ./libio/fileops.c:444
    0.00 :   8c9b1:  cmp    $0xffffffffffffffff,%rdx
    0.00 :   8c9b5:  je     8ca2a <_IO_do_write@@GLIBC_2.2.5+0xfa>
         : 74    ./libio/fileops.c:446
    0.00 :   8c9b7:  mov    %rdx,0x90(%rbx)
    0.00 :   8c9be:  mov    0xd8(%rbx),%r14
         : 77    IO_validate_vtable():
         : 78    ./libio/libioP.h:942
    0.00 :   8c9c5:  mov    %r14,%rax
  100.00 :   8c9c8:  sub    %r15,%rax
         : 81    ./libio/libioP.h:943
    0.00 :   8c9cb:  cmp    %r13,%rax
    0.00 :   8c9ce:  jae    8ca80 <_IO_do_write@@GLIBC_2.2.5+0x150>
         : 84    new_do_write():
         : 85    ./libio/fileops.c:448
    0.00 :   8c9d4:  mov    %rbp,%rdx
    0.00 :   8c9d7:  mov    %r12,%rsi
    0.00 :   8c9da:  mov    %rbx,%rdi
    0.00 :   8c9dd:  call   *0x78(%r14)
    0.00 :   8c9e1:  mov    %rax,%r13
         : 91    ./libio/fileops.c:449
    0.00 :   8c9e4:  movzwl 0x80(%rbx),%eax
    0.00 :   8c9eb:  test   %r13,%r13
    0.00 :   8c9ee:  je     8c9f5 <_IO_do_write@@GLIBC_2.2.5+0xc5>
    0.00 :   8c9f0:  test   %ax,%ax
    0.00 :   8c9f3:  jne    8ca60 <_IO_do_write@@GLIBC_2.2.5+0x130>
         : 97    ./libio/fileops.c:451
    0.00 :   8c9f5:  mov    0x38(%rbx),%rax
         : 99    ./libio/fileops.c:455
    0.00 :   8c9f9:  mov    0xc0(%rbx),%edx
    0.00 :   8c9ff:  movq   %rax,%xmm0
         : 102   ./libio/fileops.c:452
    0.00 :   8ca04:  mov    %rax,0x28(%rbx)
    0.00 :   8ca08:  punpcklqdq %xmm0,%xmm0
         : 105   ./libio/fileops.c:451
    0.00 :   8ca0c:  movups %xmm0,0x8(%rbx)
    0.00 :   8ca10:  movups %xmm0,0x18(%rbx)
         : 108   ./libio/fileops.c:455
    0.00 :   8ca14:  test   %edx,%edx
    0.00 :   8ca16:  jle    8ca50 <_IO_do_write@@GLIBC_2.2.5+0x120>
    0.00 :   8ca18:  mov    0x40(%rbx),%rax
         : 112   ./libio/fileops.c:453
    0.00 :   8ca1c:  mov    %rax,0x30(%rbx)
         : 114   _IO_new_do_write():
         : 115   ./libio/fileops.c:425
    0.00 :   8ca20:  xor    %eax,%eax
    0.00 :   8ca22:  cmp    %r13,%rbp
    0.00 :   8ca25:  setne  %al
    0.00 :   8ca28:  neg    %eax
         : 120   ./libio/fileops.c:426
    0.00 :   8ca2a:  add    $0x8,%rsp
    0.00 :   8ca2e:  pop    %rbx
    0.00 :   8ca2f:  pop    %rbp
    0.00 :   8ca30:  pop    %r12
    0.00 :   8ca32:  pop    %r13
    0.00 :   8ca34:  pop    %r14
    0.00 :   8ca36:  pop    %r15
    0.00 :   8ca38:  ret
    0.00 :   8ca39:  nopl   0x0(%rax)
         : 130   new_do_write():
         : 131   ./libio/fileops.c:439
    0.00 :   8ca40:  movq   $0xffffffffffffffff,0x90(%rdi)
    0.00 :   8ca4b:  jmp    8c9c5 <_IO_do_write@@GLIBC_2.2.5+0x95>
         : 134   ./libio/fileops.c:454
    0.00 :   8ca50:  testl  $0x202,(%rbx)
    0.00 :   8ca56:  jne    8ca1c <_IO_do_write@@GLIBC_2.2.5+0xec>
    0.00 :   8ca58:  jmp    8ca18 <_IO_do_write@@GLIBC_2.2.5+0xe8>
    0.00 :   8ca5a:  nopw   0x0(%rax,%rax,1)
         : 139   ./libio/fileops.c:450
    0.00 :   8ca60:  lea    -0x1(%rax),%edi
    0.00 :   8ca63:  mov    %r13d,%edx
    0.00 :   8ca66:  mov    %r12,%rsi
    0.00 :   8ca69:  call   8e8b0 <_IO_adjust_column>
    0.00 :   8ca6e:  add    $0x1,%eax
    0.00 :   8ca71:  mov    %ax,0x80(%rbx)
    0.00 :   8ca78:  jmp    8c9f5 <_IO_do_write@@GLIBC_2.2.5+0xc5>
    0.00 :   8ca7d:  nopl   (%rax)
         : 148   IO_validate_vtable():
         : 149   ./libio/libioP.h:946
    0.00 :   8ca80:  call   89ef0 <_IO_vtable_check>
    0.00 :   8ca85:  jmp    8c9d4 <_IO_do_write@@GLIBC_2.2.5+0xa4>
    0.00 :   8ca8a:  nopw   0x0(%rax,%rax,1)
    0.00 :   8ca90:  call   89ef0 <_IO_vtable_check>
         : 154   new_do_write():
         : 155   ./libio/fileops.c:443
    0.00 :   8ca95:  mov    0x20(%rbx),%rsi
    0.00 :   8ca99:  mov    0x10(%rbx),%rax
    0.00 :   8ca9d:  jmp    8c997 <_IO_do_write@@GLIBC_2.2.5+0x67>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000e620 <Minisat::Solver::rebuildOrderHeap()>:
         : 6    Minisat::Solver::rebuildOrderHeap():
         : 560  cs.shrink(i - j);
         : 561  }
         :
         :
         : 564  void Solver::rebuildOrderHeap()
         : 565  {
    0.00 :   e620:   endbr64
    0.00 :   e624:   push   %r15
    0.00 :   e626:   push   %r14
    0.00 :   e628:   push   %r13
    0.00 :   e62a:   push   %r12
         : 562  vec<Var> vs;
         : 563  for (Var v = 0; v < nVars(); v++)
    0.00 :   e62c:   xor    %r12d,%r12d
         : 560  {
    0.00 :   e62f:   push   %rbp
    0.00 :   e630:   xor    %ebp,%ebp
    0.00 :   e632:   push   %rbx
    0.00 :   e633:   mov    %rdi,%rbx
    0.00 :   e636:   sub    $0x48,%rsp
         : 566  Minisat::vec<Minisat::Solver::VarData>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   e63a:   mov    0x1c8(%rdi),%edx
         : 70   Minisat::Solver::rebuildOrderHeap():
    0.00 :   e640:   mov    %fs:0x28,%rax
    0.00 :   e649:   mov    %rax,0x38(%rsp)
    0.00 :   e64e:   xor    %eax,%eax
         : 563  Minisat::vec<int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   e650:   lea    0x20(%rsp),%r14
    0.00 :   e655:   movq   $0x0,0x20(%rsp)
    0.00 :   e65e:   movq   $0x0,0x28(%rsp)
         : 58   Minisat::Solver::rebuildOrderHeap():
         : 562  for (Var v = 0; v < nVars(); v++)
    0.00 :   e667:   test   %edx,%edx
    0.00 :   e669:   jg     e678 <Minisat::Solver::rebuildOrderHeap()+0x58>
    0.00 :   e66b:   jmp    e96f <Minisat::Solver::rebuildOrderHeap()+0x34f>
    0.00 :   e670:   add    $0x1,%rbp
    0.00 :   e674:   cmp    %ebp,%edx
    0.00 :   e676:   jle    e6c8 <Minisat::Solver::rebuildOrderHeap()+0xa8>
         : 563  if (decision[v] && value(v) == l_Undef)
    0.00 :   e678:   mov    0x190(%rbx),%rax
    0.00 :   e67f:   mov    %ebp,%r13d
    0.00 :   e682:   cmpb   $0x0,(%rax,%rbp,1)
    0.00 :   e686:   je     e670 <Minisat::Solver::rebuildOrderHeap()+0x50>
         : 568  Minisat::Solver::value(int) const:
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
         : 326  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   e688:   mov    0x170(%rbx),%rax
         : 328  Minisat::Solver::rebuildOrderHeap():
    0.00 :   e68f:   testb  $0x2,(%rax,%rbp,1)
    0.00 :   e693:   je     e670 <Minisat::Solver::rebuildOrderHeap()+0x50>
         : 565  Minisat::vec<int>::push(int const&):
         : 74   void     growTo   (int size, const T& pad);
         : 75   void     clear    (bool dealloc = false);
         :
         : 77   // Stack interface:
         : 78   void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
         : 79   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   e695:   cmp    %r12d,0x2c(%rsp)
    0.00 :   e69a:   je     e958 <Minisat::Solver::rebuildOrderHeap()+0x338>
    0.00 :   e6a0:   mov    0x20(%rsp),%rdx
    0.00 :   e6a5:   lea    0x1(%r12),%eax
         : 84   Minisat::Solver::rebuildOrderHeap():
         : 562  for (Var v = 0; v < nVars(); v++)
    0.00 :   e6aa:   add    $0x1,%rbp
         : 564  Minisat::vec<int>::push(int const&):
    0.00 :   e6ae:   mov    %eax,0x28(%rsp)
    0.00 :   e6b2:   mov    %r13d,(%rdx,%r12,4)
         : 76   Minisat::vec<Minisat::Solver::VarData>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e6b6:   mov    0x1c8(%rbx),%edx
         : 65   Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   e6bc:   movslq %eax,%r12
         : 76   Minisat::Solver::rebuildOrderHeap():
    0.00 :   e6bf:   cmp    %ebp,%edx
    0.00 :   e6c1:   jg     e678 <Minisat::Solver::rebuildOrderHeap()+0x58>
    0.00 :   e6c3:   nopl   0x0(%rax,%rax,1)
         : 565  Minisat::vec<int>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   e6c8:   mov    0x20(%rsp),%rax
    0.00 :   e6cd:   mov    0x1f8(%rbx),%r8
    0.00 :   e6d4:   mov    %rax,0x8(%rsp)
         : 131  Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 124  }
         :
         :
         : 127  // Rebuild the heap from scratch, using the elements in 'ns':
         : 128  void build(vec<int>& ns) {
         : 129  for (int i = 0; i < heap.size(); i++)
    0.00 :   e6d9:   mov    0x200(%rbx),%eax
    0.00 :   e6df:   test   %eax,%eax
    0.00 :   e6e1:   jle    e919 <Minisat::Solver::rebuildOrderHeap()+0x2f9>
         : 133  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e6e7:   mov    0x208(%rbx),%rcx
    0.00 :   e6ee:   xor    %eax,%eax
    0.00 :   e6f0:   movslq (%r8,%rax,4),%rdx
         : 91   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
    0.00 :   e6f4:   add    $0x1,%rax
         : 125  indices[heap[i]] = -1;
    0.00 :   e6f8:   movl   $0xffffffff,(%rcx,%rdx,4)
         : 124  for (int i = 0; i < heap.size(); i++)
    0.00 :   e6ff:   cmp    %eax,0x200(%rbx)
    0.00 :   e705:   jg     e6f0 <Minisat::Solver::rebuildOrderHeap()+0xd0>
         : 126  heap.clear();
    0.00 :   e707:   lea    0x1f8(%rbx),%r13
         : 128  Minisat::vec<int>::clear(bool):
         : 124  for (int i = 0; i < sz; i++) data[i].~T();
         : 125  sz = 0;
    0.00 :   e70e:   movl   $0x0,0x200(%rbx)
         : 127  Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         :
         : 129  for (int i = 0; i < ns.size(); i++){
    0.00 :   e718:   test   %r12d,%r12d
    0.00 :   e71b:   jle    e788 <Minisat::Solver::rebuildOrderHeap()+0x168>
         : 132  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e71d:   xor    %ebp,%ebp
    0.00 :   e71f:   jmp    e746 <Minisat::Solver::rebuildOrderHeap()+0x126>
    0.00 :   e721:   nopl   0x0(%rax)
         : 91   Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   e728:   mov    0x8(%rsp),%rax
    0.00 :   e72d:   lea    0x1(%rsi),%edx
    0.00 :   e730:   mov    (%rax,%rbp,4),%eax
         : 78   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
    0.00 :   e733:   add    $0x1,%rbp
         : 129  Minisat::vec<int>::push(int const&):
    0.00 :   e737:   mov    %edx,0x200(%rbx)
    0.00 :   e73d:   mov    %eax,(%r8,%rsi,4)
         : 76   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
    0.00 :   e741:   cmp    %r12,%rbp
    0.00 :   e744:   je     e7c0 <Minisat::Solver::rebuildOrderHeap()+0x1a0>
         : 130  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e746:   mov    0x8(%rsp),%rax
    0.00 :   e74b:   movslq (%rax,%rbp,4),%rdx
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 129  indices[ns[i]] = i;
    0.00 :   e74f:   mov    0x208(%rbx),%rax
    0.00 :   e756:   mov    %ebp,(%rax,%rdx,4)
         : 132  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   e759:   movslq 0x200(%rbx),%rsi
    0.00 :   e760:   cmp    0x204(%rbx),%esi
    0.00 :   e766:   jne    e728 <Minisat::Solver::rebuildOrderHeap()+0x108>
    0.00 :   e768:   add    $0x1,%esi
    0.00 :   e76b:   mov    %r13,%rdi
    0.00 :   e76e:   call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   e773:   mov    0x1f8(%rbx),%r8
    0.00 :   e77a:   movslq 0x200(%rbx),%rsi
    0.00 :   e781:   jmp    e728 <Minisat::Solver::rebuildOrderHeap()+0x108>
    0.00 :   e783:   nopl   0x0(%rax,%rax,1)
         : 85   Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   e788:   cmpq   $0x0,0x8(%rsp)
    0.00 :   e78e:   je     e8f6 <Minisat::Solver::rebuildOrderHeap()+0x2d6>
         : 125  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   e794:   mov    0x38(%rsp),%rax
    0.00 :   e799:   sub    %fs:0x28,%rax
    0.00 :   e7a2:   jne    e9b5 <Minisat::Solver::rebuildOrderHeap()+0x395>
    0.00 :   e7a8:   mov    0x8(%rsp),%rdi
         : 130  Minisat::Solver::rebuildOrderHeap():
         : 566  vs.push(v);
         : 567  order_heap.build(vs);
         : 568  }
    0.00 :   e7ad:   add    $0x48,%rsp
    0.00 :   e7b1:   pop    %rbx
    0.00 :   e7b2:   pop    %rbp
    0.00 :   e7b3:   pop    %r12
    0.00 :   e7b5:   pop    %r13
    0.00 :   e7b7:   pop    %r14
    0.00 :   e7b9:   pop    %r15
         : 576  Minisat::vec<int>::clear(bool):
    0.00 :   e7bb:   jmp    2440 <free@plt>
         : 126  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e7c0:   mov    0x200(%rbx),%r11d
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 132  heap.push(ns[i]); }
         :
         : 134  for (int i = heap.size() / 2 - 1; i >= 0; i--)
    0.00 :   e7c7:   mov    %r11d,%eax
    0.00 :   e7ca:   shr    $0x1f,%eax
    0.00 :   e7cd:   add    %r11d,%eax
    0.00 :   e7d0:   sar    %eax
    0.00 :   e7d2:   sub    $0x1,%eax
    0.00 :   e7d5:   mov    %eax,%r14d
    0.00 :   e7d8:   js     e794 <Minisat::Solver::rebuildOrderHeap()+0x174>
    0.00 :   e7da:   movslq %r14d,%rax
         : 143  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e7dd:   mov    0x208(%rbx),%r13
    0.00 :   e7e4:   lea    (%r8,%rax,4),%r15
    0.00 :   e7e8:   lea    0x1(%r14,%r14,1),%eax
    0.00 :   e7ed:   mov    %eax,0x10(%rsp)
    0.00 :   e7f1:   nopl   0x0(%rax)
         : 93   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.00 :   e7f8:   movslq (%r15),%rdx
         : 64   Minisat::Heap<Minisat::Solver::VarOrderLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   e7fb:   mov    0x10(%rsp),%edi
         : 41   Minisat::vec<int>::operator[](int):
    0.00 :   e7ff:   mov    %r15,%rbp
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.00 :   e802:   mov    %edx,0x14(%rsp)
         : 64   Minisat::Heap<Minisat::Solver::VarOrderLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   e806:   mov    %edi,%ecx
         : 41   Minisat::vec<int>::operator[](int):
    0.00 :   e808:   mov    %rdx,0x18(%rsp)
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 63   while (left(i) < heap.size()){
    0.00 :   e80d:   cmp    %r11d,%edi
    0.00 :   e810:   jge    e8e7 <Minisat::Solver::rebuildOrderHeap()+0x2c7>
         : 66   Minisat::vec<double>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   e816:   mov    0x1f0(%rbx),%rax
    0.00 :   e81d:   mov    (%rax),%r10
         : 89   Minisat::Solver::VarOrderLt::operator()(int, int) const:
         : 165  bool operator () (Var x, Var y) const { return activity[x] > activity[y]; }
    0.00 :   e820:   movsd  (%r10,%rdx,8),%xmm2
    0.00 :   e826:   mov    %r14d,%edx
    0.00 :   e829:   jmp    e87a <Minisat::Solver::rebuildOrderHeap()+0x25a>
    0.00 :   e82b:   nopl   0x0(%rax,%rax,1)
         : 170  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e830:   movslq %eax,%r11
    0.00 :   e833:   lea    (%r8,%r11,4),%r11
         : 90   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   e837:   movslq (%r11),%r12
         : 66   Minisat::Solver::VarOrderLt::operator()(int, int) const:
    0.00 :   e83a:   movsd  (%r10,%r12,8),%xmm1
         : 166  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e840:   comisd %xmm0,%xmm1
    0.00 :   e844:   jbe    e896 <Minisat::Solver::rebuildOrderHeap()+0x276>
    0.00 :   e846:   movapd %xmm1,%xmm0
         : 67   Minisat::vec<int>::operator[](int):
    0.00 :   e84a:   movslq %edx,%rcx
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e84d:   mov    %r12,%rsi
    0.00 :   e850:   mov    %r12d,%edi
         : 65   if (!lt(heap[child], x)) break;
    0.00 :   e853:   comisd %xmm2,%xmm0
    0.00 :   e857:   mov    %r11,%r9
         : 68   Minisat::vec<int>::operator[](int):
    0.00 :   e85a:   lea    (%r8,%rcx,4),%rbp
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e85e:   jbe    e8a5 <Minisat::Solver::rebuildOrderHeap()+0x285>
         : 66   heap[i]          = heap[child];
    0.00 :   e860:   mov    %edi,0x0(%rbp)
         : 68   Minisat::Heap<Minisat::Solver::VarOrderLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   e863:   lea    0x1(%rax,%rax,1),%ecx
         : 41   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 67   indices[heap[i]] = i;
    0.00 :   e867:   mov    %edx,0x0(%r13,%rsi,4)
         : 69   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e86c:   mov    0x200(%rbx),%r11d
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 63   while (left(i) < heap.size()){
    0.00 :   e873:   cmp    %ecx,%r11d
    0.00 :   e876:   jle    e8e0 <Minisat::Solver::rebuildOrderHeap()+0x2c0>
    0.00 :   e878:   mov    %eax,%edx
         : 67   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   e87a:   movslq %ecx,%rsi
         : 89   Minisat::Heap<Minisat::Solver::VarOrderLt>::right(int):
         : 40   static inline int right (int i) { return (i+1)*2; }
    0.00 :   e87d:   lea    0x2(%rdx,%rdx,1),%eax
         : 42   Minisat::vec<int>::operator[](int):
    0.00 :   e881:   lea    (%r8,%rsi,4),%r9
         : 88   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   e885:   movslq (%r9),%rsi
         : 66   Minisat::Solver::VarOrderLt::operator()(int, int) const:
    0.00 :   e888:   movsd  (%r10,%rsi,8),%xmm0
         : 166  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e88e:   mov    %rsi,%rdi
    0.00 :   e891:   cmp    %r11d,%eax
    0.00 :   e894:   jl     e830 <Minisat::Solver::rebuildOrderHeap()+0x210>
         : 65   if (!lt(heap[child], x)) break;
    0.00 :   e896:   comisd %xmm2,%xmm0
    0.00 :   e89a:   mov    %ecx,%eax
         : 68   Minisat::vec<int>::operator[](int):
    0.00 :   e89c:   movslq %edx,%rcx
    0.00 :   e89f:   lea    (%r8,%rcx,4),%rbp
         : 89   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e8a3:   ja     e860 <Minisat::Solver::rebuildOrderHeap()+0x240>
         : 70   heap   [i] = x;
    0.00 :   e8a5:   mov    0x14(%rsp),%eax
         : 72   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 132  for (int i = heap.size() / 2 - 1; i >= 0; i--)
    0.00 :   e8a9:   sub    $0x1,%r14d
    0.00 :   e8ad:   subl   $0x2,0x10(%rsp)
    0.00 :   e8b2:   sub    $0x4,%r15
         : 136  Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
         : 70   heap   [i] = x;
    0.00 :   e8b6:   mov    %eax,0x0(%rbp)
         : 71   indices[x] = i;
    0.00 :   e8b9:   mov    0x18(%rsp),%rax
    0.00 :   e8be:   mov    %edx,0x0(%r13,%rax,4)
         : 74   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 132  for (int i = heap.size() / 2 - 1; i >= 0; i--)
    0.00 :   e8c3:   cmp    $0xffffffff,%r14d
    0.00 :   e8c7:   je     e788 <Minisat::Solver::rebuildOrderHeap()+0x168>
         : 135  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e8cd:   mov    0x200(%rbx),%r11d
    0.00 :   e8d4:   jmp    e7f8 <Minisat::Solver::rebuildOrderHeap()+0x1d8>
    0.00 :   e8d9:   nopl   0x0(%rax)
         : 67   Minisat::Heap<Minisat::Solver::VarOrderLt>::percolateDown(int):
    0.00 :   e8e0:   mov    %r9,%rbp
    0.00 :   e8e3:   mov    %eax,%edx
    0.00 :   e8e5:   jmp    e8a5 <Minisat::Solver::rebuildOrderHeap()+0x285>
         : 66   while (left(i) < heap.size()){
    0.00 :   e8e7:   mov    %r14d,%edx
    0.00 :   e8ea:   jmp    e8a5 <Minisat::Solver::rebuildOrderHeap()+0x285>
         : 69   Minisat::vec<int>::clear(bool):
         : 124  sz = 0;
    0.00 :   e8ec:   movl   $0x0,0x200(%rdi)
         : 126  Minisat::Solver::rebuildOrderHeap():
    0.00 :   e8f6:   mov    0x38(%rsp),%rax
    0.00 :   e8fb:   sub    %fs:0x28,%rax
    0.00 :   e904:   jne    e9b5 <Minisat::Solver::rebuildOrderHeap()+0x395>
    0.00 :   e90a:   add    $0x48,%rsp
    0.00 :   e90e:   pop    %rbx
    0.00 :   e90f:   pop    %rbp
    0.00 :   e910:   pop    %r12
    0.00 :   e912:   pop    %r13
    0.00 :   e914:   pop    %r14
    0.00 :   e916:   pop    %r15
    0.00 :   e918:   ret
         : 577  Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 126  heap.clear();
    0.00 :   e919:   lea    0x1f8(%rbx),%r13
         : 128  Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   e920:   test   %r8,%r8
    0.00 :   e923:   jne    e70e <Minisat::Solver::rebuildOrderHeap()+0xee>
         : 125  Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 128  for (int i = 0; i < ns.size(); i++){
    0.00 :   e929:   test   %r12d,%r12d
    0.00 :   e92c:   jg     e71d <Minisat::Solver::rebuildOrderHeap()+0xfd>
         : 131  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e932:   mov    0x200(%rbx),%r11d
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 132  for (int i = heap.size() / 2 - 1; i >= 0; i--)
    0.00 :   e939:   mov    %r11d,%eax
    0.00 :   e93c:   shr    $0x1f,%eax
    0.00 :   e93f:   add    %r11d,%eax
    0.00 :   e942:   sar    %eax
    0.00 :   e944:   sub    $0x1,%eax
    0.00 :   e947:   mov    %eax,%r14d
    0.00 :   e94a:   js     e788 <Minisat::Solver::rebuildOrderHeap()+0x168>
    0.00 :   e950:   xor    %r8d,%r8d
    0.00 :   e953:   jmp    e7da <Minisat::Solver::rebuildOrderHeap()+0x1ba>
         : 142  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   e958:   lea    0x1(%r12),%esi
  100.00 :   e95d:   mov    %r14,%rdi
    0.00 :   e960:   call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   e965:   movslq 0x28(%rsp),%r12
    0.00 :   e96a:   jmp    e6a0 <Minisat::Solver::rebuildOrderHeap()+0x80>
         : 80   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 124  for (int i = 0; i < heap.size(); i++)
    0.00 :   e96f:   mov    0x200(%rdi),%edx
         : 126  Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   e975:   mov    0x1f8(%rdi),%r8
         : 124  Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
    0.00 :   e97c:   movq   $0x0,0x8(%rsp)
    0.00 :   e985:   test   %edx,%edx
    0.00 :   e987:   jg     e6e7 <Minisat::Solver::rebuildOrderHeap()+0xc7>
         : 127  Minisat::vec<int>::clear(bool):
    0.00 :   e98d:   test   %r8,%r8
    0.00 :   e990:   jne    e8ec <Minisat::Solver::rebuildOrderHeap()+0x2cc>
         : 124  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   e996:   mov    0x200(%rdi),%r11d
         : 65   Minisat::Heap<Minisat::Solver::VarOrderLt>::build(Minisat::vec<int>&):
         : 132  for (int i = heap.size() / 2 - 1; i >= 0; i--)
    0.00 :   e99d:   mov    %r11d,%eax
    0.00 :   e9a0:   shr    $0x1f,%eax
    0.00 :   e9a3:   add    %r11d,%eax
    0.00 :   e9a6:   sar    %eax
    0.00 :   e9a8:   sub    $0x1,%eax
    0.00 :   e9ab:   mov    %eax,%r14d
    0.00 :   e9ae:   jns    e950 <Minisat::Solver::rebuildOrderHeap()+0x330>
    0.00 :   e9b0:   jmp    e8f6 <Minisat::Solver::rebuildOrderHeap()+0x2d6>
         : 141  Minisat::Solver::rebuildOrderHeap():
    0.00 :   e9b5:   call   2410 <__stack_chk_fail@plt>
    0.00 :   e9ba:   endbr64
         : 568  Minisat::vec<int>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   e9be:   mov    %rax,%rbp
    0.00 :   e9c1:   jmp    297e <Minisat::Solver::rebuildOrderHeap() [clone .cold]>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .plt.sec:
         :
         : 5    0000000000002510 <memmove@plt>:
  100.00 :   2510:   endbr64
    0.00 :   2514:   bnd jmp *0x16a45(%rip)        # 18f60 <memmove@GLIBC_2.2.5>
    0.00 :   251b:   nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt:
         :
         : 5     000000000009a020 <.plt>:
    0.00 :   9a020:  push   0x18bfe2(%rip)        # 226008 <vtable for std::filesystem::filesystem_error@@GLIBCXX_3.4.26+0x13d8>
    0.00 :   9a026:  bnd jmp *0x18bfe3(%rip)        # 226010 <vtable for std::filesystem::filesystem_error@@GLIBCXX_3.4.26+0x13e0>
    0.00 :   9a02d:  nopl   (%rax)
    0.00 :   9a030:  endbr64
    0.00 :   9a034:  push   $0x0
    0.00 :   9a039:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a03f:  nop
    0.00 :   9a040:  endbr64
    0.00 :   9a044:  push   $0x1
    0.00 :   9a049:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a04f:  nop
    0.00 :   9a050:  endbr64
    0.00 :   9a054:  push   $0x2
    0.00 :   9a059:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a05f:  nop
    0.00 :   9a060:  endbr64
    0.00 :   9a064:  push   $0x3
    0.00 :   9a069:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a06f:  nop
    0.00 :   9a070:  endbr64
    0.00 :   9a074:  push   $0x4
    0.00 :   9a079:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a07f:  nop
    0.00 :   9a080:  endbr64
    0.00 :   9a084:  push   $0x5
    0.00 :   9a089:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a08f:  nop
    0.00 :   9a090:  endbr64
    0.00 :   9a094:  push   $0x6
    0.00 :   9a099:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a09f:  nop
    0.00 :   9a0a0:  endbr64
    0.00 :   9a0a4:  push   $0x7
    0.00 :   9a0a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0af:  nop
    0.00 :   9a0b0:  endbr64
    0.00 :   9a0b4:  push   $0x8
    0.00 :   9a0b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0bf:  nop
    0.00 :   9a0c0:  endbr64
    0.00 :   9a0c4:  push   $0x9
    0.00 :   9a0c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0cf:  nop
    0.00 :   9a0d0:  endbr64
    0.00 :   9a0d4:  push   $0xa
    0.00 :   9a0d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0df:  nop
    0.00 :   9a0e0:  endbr64
    0.00 :   9a0e4:  push   $0xb
    0.00 :   9a0e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0ef:  nop
    0.00 :   9a0f0:  endbr64
    0.00 :   9a0f4:  push   $0xc
    0.00 :   9a0f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a0ff:  nop
    0.00 :   9a100:  endbr64
    0.00 :   9a104:  push   $0xd
    0.00 :   9a109:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a10f:  nop
    0.00 :   9a110:  endbr64
    0.00 :   9a114:  push   $0xe
    0.00 :   9a119:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a11f:  nop
    0.00 :   9a120:  endbr64
    0.00 :   9a124:  push   $0xf
    0.00 :   9a129:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a12f:  nop
    0.00 :   9a130:  endbr64
    0.00 :   9a134:  push   $0x10
    0.00 :   9a139:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a13f:  nop
    0.00 :   9a140:  endbr64
    0.00 :   9a144:  push   $0x11
    0.00 :   9a149:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a14f:  nop
    0.00 :   9a150:  endbr64
    0.00 :   9a154:  push   $0x12
    0.00 :   9a159:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a15f:  nop
    0.00 :   9a160:  endbr64
    0.00 :   9a164:  push   $0x13
    0.00 :   9a169:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a16f:  nop
    0.00 :   9a170:  endbr64
    0.00 :   9a174:  push   $0x14
    0.00 :   9a179:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a17f:  nop
    0.00 :   9a180:  endbr64
    0.00 :   9a184:  push   $0x15
    0.00 :   9a189:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a18f:  nop
    0.00 :   9a190:  endbr64
    0.00 :   9a194:  push   $0x16
    0.00 :   9a199:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a19f:  nop
    0.00 :   9a1a0:  endbr64
    0.00 :   9a1a4:  push   $0x17
    0.00 :   9a1a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1af:  nop
    0.00 :   9a1b0:  endbr64
    0.00 :   9a1b4:  push   $0x18
    0.00 :   9a1b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1bf:  nop
    0.00 :   9a1c0:  endbr64
    0.00 :   9a1c4:  push   $0x19
    0.00 :   9a1c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1cf:  nop
    0.00 :   9a1d0:  endbr64
    0.00 :   9a1d4:  push   $0x1a
    0.00 :   9a1d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1df:  nop
    0.00 :   9a1e0:  endbr64
    0.00 :   9a1e4:  push   $0x1b
    0.00 :   9a1e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1ef:  nop
    0.00 :   9a1f0:  endbr64
    0.00 :   9a1f4:  push   $0x1c
    0.00 :   9a1f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a1ff:  nop
    0.00 :   9a200:  endbr64
    0.00 :   9a204:  push   $0x1d
    0.00 :   9a209:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a20f:  nop
    0.00 :   9a210:  endbr64
    0.00 :   9a214:  push   $0x1e
    0.00 :   9a219:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a21f:  nop
    0.00 :   9a220:  endbr64
    0.00 :   9a224:  push   $0x1f
    0.00 :   9a229:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a22f:  nop
    0.00 :   9a230:  endbr64
    0.00 :   9a234:  push   $0x20
    0.00 :   9a239:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a23f:  nop
    0.00 :   9a240:  endbr64
    0.00 :   9a244:  push   $0x21
    0.00 :   9a249:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a24f:  nop
    0.00 :   9a250:  endbr64
    0.00 :   9a254:  push   $0x22
    0.00 :   9a259:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a25f:  nop
    0.00 :   9a260:  endbr64
    0.00 :   9a264:  push   $0x23
    0.00 :   9a269:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a26f:  nop
    0.00 :   9a270:  endbr64
    0.00 :   9a274:  push   $0x24
    0.00 :   9a279:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a27f:  nop
    0.00 :   9a280:  endbr64
    0.00 :   9a284:  push   $0x25
    0.00 :   9a289:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a28f:  nop
    0.00 :   9a290:  endbr64
    0.00 :   9a294:  push   $0x26
    0.00 :   9a299:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a29f:  nop
    0.00 :   9a2a0:  endbr64
    0.00 :   9a2a4:  push   $0x27
    0.00 :   9a2a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2af:  nop
    0.00 :   9a2b0:  endbr64
    0.00 :   9a2b4:  push   $0x28
    0.00 :   9a2b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2bf:  nop
    0.00 :   9a2c0:  endbr64
    0.00 :   9a2c4:  push   $0x29
    0.00 :   9a2c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2cf:  nop
    0.00 :   9a2d0:  endbr64
    0.00 :   9a2d4:  push   $0x2a
    0.00 :   9a2d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2df:  nop
    0.00 :   9a2e0:  endbr64
    0.00 :   9a2e4:  push   $0x2b
    0.00 :   9a2e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2ef:  nop
    0.00 :   9a2f0:  endbr64
    0.00 :   9a2f4:  push   $0x2c
    0.00 :   9a2f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a2ff:  nop
    0.00 :   9a300:  endbr64
    0.00 :   9a304:  push   $0x2d
    0.00 :   9a309:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a30f:  nop
    0.00 :   9a310:  endbr64
    0.00 :   9a314:  push   $0x2e
    0.00 :   9a319:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a31f:  nop
    0.00 :   9a320:  endbr64
    0.00 :   9a324:  push   $0x2f
    0.00 :   9a329:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a32f:  nop
    0.00 :   9a330:  endbr64
    0.00 :   9a334:  push   $0x30
    0.00 :   9a339:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a33f:  nop
    0.00 :   9a340:  endbr64
    0.00 :   9a344:  push   $0x31
    0.00 :   9a349:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a34f:  nop
    0.00 :   9a350:  endbr64
    0.00 :   9a354:  push   $0x32
    0.00 :   9a359:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a35f:  nop
    0.00 :   9a360:  endbr64
    0.00 :   9a364:  push   $0x33
    0.00 :   9a369:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a36f:  nop
    0.00 :   9a370:  endbr64
    0.00 :   9a374:  push   $0x34
    0.00 :   9a379:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a37f:  nop
    0.00 :   9a380:  endbr64
    0.00 :   9a384:  push   $0x35
    0.00 :   9a389:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a38f:  nop
    0.00 :   9a390:  endbr64
    0.00 :   9a394:  push   $0x36
    0.00 :   9a399:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a39f:  nop
    0.00 :   9a3a0:  endbr64
    0.00 :   9a3a4:  push   $0x37
    0.00 :   9a3a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3af:  nop
    0.00 :   9a3b0:  endbr64
    0.00 :   9a3b4:  push   $0x38
    0.00 :   9a3b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3bf:  nop
    0.00 :   9a3c0:  endbr64
    0.00 :   9a3c4:  push   $0x39
    0.00 :   9a3c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3cf:  nop
    0.00 :   9a3d0:  endbr64
    0.00 :   9a3d4:  push   $0x3a
    0.00 :   9a3d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3df:  nop
    0.00 :   9a3e0:  endbr64
    0.00 :   9a3e4:  push   $0x3b
    0.00 :   9a3e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3ef:  nop
    0.00 :   9a3f0:  endbr64
    0.00 :   9a3f4:  push   $0x3c
    0.00 :   9a3f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a3ff:  nop
    0.00 :   9a400:  endbr64
    0.00 :   9a404:  push   $0x3d
    0.00 :   9a409:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a40f:  nop
    0.00 :   9a410:  endbr64
    0.00 :   9a414:  push   $0x3e
    0.00 :   9a419:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a41f:  nop
    0.00 :   9a420:  endbr64
    0.00 :   9a424:  push   $0x3f
    0.00 :   9a429:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a42f:  nop
    0.00 :   9a430:  endbr64
    0.00 :   9a434:  push   $0x40
    0.00 :   9a439:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a43f:  nop
    0.00 :   9a440:  endbr64
    0.00 :   9a444:  push   $0x41
    0.00 :   9a449:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a44f:  nop
    0.00 :   9a450:  endbr64
    0.00 :   9a454:  push   $0x42
    0.00 :   9a459:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a45f:  nop
    0.00 :   9a460:  endbr64
    0.00 :   9a464:  push   $0x43
    0.00 :   9a469:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a46f:  nop
    0.00 :   9a470:  endbr64
    0.00 :   9a474:  push   $0x44
    0.00 :   9a479:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a47f:  nop
    0.00 :   9a480:  endbr64
    0.00 :   9a484:  push   $0x45
    0.00 :   9a489:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a48f:  nop
    0.00 :   9a490:  endbr64
    0.00 :   9a494:  push   $0x46
    0.00 :   9a499:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a49f:  nop
    0.00 :   9a4a0:  endbr64
    0.00 :   9a4a4:  push   $0x47
    0.00 :   9a4a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4af:  nop
    0.00 :   9a4b0:  endbr64
    0.00 :   9a4b4:  push   $0x48
    0.00 :   9a4b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4bf:  nop
    0.00 :   9a4c0:  endbr64
    0.00 :   9a4c4:  push   $0x49
    0.00 :   9a4c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4cf:  nop
    0.00 :   9a4d0:  endbr64
    0.00 :   9a4d4:  push   $0x4a
    0.00 :   9a4d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4df:  nop
    0.00 :   9a4e0:  endbr64
    0.00 :   9a4e4:  push   $0x4b
    0.00 :   9a4e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4ef:  nop
    0.00 :   9a4f0:  endbr64
    0.00 :   9a4f4:  push   $0x4c
    0.00 :   9a4f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a4ff:  nop
    0.00 :   9a500:  endbr64
    0.00 :   9a504:  push   $0x4d
    0.00 :   9a509:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a50f:  nop
    0.00 :   9a510:  endbr64
    0.00 :   9a514:  push   $0x4e
    0.00 :   9a519:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a51f:  nop
    0.00 :   9a520:  endbr64
    0.00 :   9a524:  push   $0x4f
    0.00 :   9a529:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a52f:  nop
    0.00 :   9a530:  endbr64
    0.00 :   9a534:  push   $0x50
    0.00 :   9a539:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a53f:  nop
    0.00 :   9a540:  endbr64
    0.00 :   9a544:  push   $0x51
    0.00 :   9a549:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a54f:  nop
    0.00 :   9a550:  endbr64
    0.00 :   9a554:  push   $0x52
    0.00 :   9a559:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a55f:  nop
    0.00 :   9a560:  endbr64
    0.00 :   9a564:  push   $0x53
    0.00 :   9a569:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a56f:  nop
    0.00 :   9a570:  endbr64
    0.00 :   9a574:  push   $0x54
    0.00 :   9a579:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a57f:  nop
    0.00 :   9a580:  endbr64
    0.00 :   9a584:  push   $0x55
    0.00 :   9a589:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a58f:  nop
    0.00 :   9a590:  endbr64
    0.00 :   9a594:  push   $0x56
    0.00 :   9a599:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a59f:  nop
    0.00 :   9a5a0:  endbr64
    0.00 :   9a5a4:  push   $0x57
    0.00 :   9a5a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5af:  nop
    0.00 :   9a5b0:  endbr64
    0.00 :   9a5b4:  push   $0x58
    0.00 :   9a5b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5bf:  nop
    0.00 :   9a5c0:  endbr64
    0.00 :   9a5c4:  push   $0x59
    0.00 :   9a5c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5cf:  nop
    0.00 :   9a5d0:  endbr64
    0.00 :   9a5d4:  push   $0x5a
    0.00 :   9a5d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5df:  nop
    0.00 :   9a5e0:  endbr64
    0.00 :   9a5e4:  push   $0x5b
    0.00 :   9a5e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5ef:  nop
    0.00 :   9a5f0:  endbr64
    0.00 :   9a5f4:  push   $0x5c
    0.00 :   9a5f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a5ff:  nop
    0.00 :   9a600:  endbr64
    0.00 :   9a604:  push   $0x5d
    0.00 :   9a609:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a60f:  nop
    0.00 :   9a610:  endbr64
    0.00 :   9a614:  push   $0x5e
    0.00 :   9a619:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a61f:  nop
    0.00 :   9a620:  endbr64
    0.00 :   9a624:  push   $0x5f
    0.00 :   9a629:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a62f:  nop
    0.00 :   9a630:  endbr64
    0.00 :   9a634:  push   $0x60
    0.00 :   9a639:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a63f:  nop
    0.00 :   9a640:  endbr64
    0.00 :   9a644:  push   $0x61
    0.00 :   9a649:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a64f:  nop
    0.00 :   9a650:  endbr64
    0.00 :   9a654:  push   $0x62
    0.00 :   9a659:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a65f:  nop
    0.00 :   9a660:  endbr64
    0.00 :   9a664:  push   $0x63
    0.00 :   9a669:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a66f:  nop
    0.00 :   9a670:  endbr64
    0.00 :   9a674:  push   $0x64
    0.00 :   9a679:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a67f:  nop
    0.00 :   9a680:  endbr64
    0.00 :   9a684:  push   $0x65
    0.00 :   9a689:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a68f:  nop
    0.00 :   9a690:  endbr64
    0.00 :   9a694:  push   $0x66
    0.00 :   9a699:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a69f:  nop
    0.00 :   9a6a0:  endbr64
    0.00 :   9a6a4:  push   $0x67
    0.00 :   9a6a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6af:  nop
    0.00 :   9a6b0:  endbr64
    0.00 :   9a6b4:  push   $0x68
    0.00 :   9a6b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6bf:  nop
    0.00 :   9a6c0:  endbr64
    0.00 :   9a6c4:  push   $0x69
    0.00 :   9a6c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6cf:  nop
    0.00 :   9a6d0:  endbr64
    0.00 :   9a6d4:  push   $0x6a
    0.00 :   9a6d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6df:  nop
    0.00 :   9a6e0:  endbr64
    0.00 :   9a6e4:  push   $0x6b
    0.00 :   9a6e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6ef:  nop
    0.00 :   9a6f0:  endbr64
    0.00 :   9a6f4:  push   $0x6c
    0.00 :   9a6f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a6ff:  nop
    0.00 :   9a700:  endbr64
    0.00 :   9a704:  push   $0x6d
    0.00 :   9a709:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a70f:  nop
    0.00 :   9a710:  endbr64
    0.00 :   9a714:  push   $0x6e
    0.00 :   9a719:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a71f:  nop
    0.00 :   9a720:  endbr64
    0.00 :   9a724:  push   $0x6f
    0.00 :   9a729:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a72f:  nop
    0.00 :   9a730:  endbr64
    0.00 :   9a734:  push   $0x70
    0.00 :   9a739:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a73f:  nop
    0.00 :   9a740:  endbr64
    0.00 :   9a744:  push   $0x71
    0.00 :   9a749:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a74f:  nop
    0.00 :   9a750:  endbr64
    0.00 :   9a754:  push   $0x72
    0.00 :   9a759:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a75f:  nop
    0.00 :   9a760:  endbr64
    0.00 :   9a764:  push   $0x73
    0.00 :   9a769:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a76f:  nop
    0.00 :   9a770:  endbr64
    0.00 :   9a774:  push   $0x74
    0.00 :   9a779:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a77f:  nop
    0.00 :   9a780:  endbr64
    0.00 :   9a784:  push   $0x75
    0.00 :   9a789:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a78f:  nop
    0.00 :   9a790:  endbr64
    0.00 :   9a794:  push   $0x76
    0.00 :   9a799:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a79f:  nop
    0.00 :   9a7a0:  endbr64
    0.00 :   9a7a4:  push   $0x77
    0.00 :   9a7a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7af:  nop
    0.00 :   9a7b0:  endbr64
    0.00 :   9a7b4:  push   $0x78
    0.00 :   9a7b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7bf:  nop
    0.00 :   9a7c0:  endbr64
    0.00 :   9a7c4:  push   $0x79
    0.00 :   9a7c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7cf:  nop
    0.00 :   9a7d0:  endbr64
    0.00 :   9a7d4:  push   $0x7a
    0.00 :   9a7d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7df:  nop
    0.00 :   9a7e0:  endbr64
    0.00 :   9a7e4:  push   $0x7b
    0.00 :   9a7e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7ef:  nop
    0.00 :   9a7f0:  endbr64
    0.00 :   9a7f4:  push   $0x7c
    0.00 :   9a7f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a7ff:  nop
    0.00 :   9a800:  endbr64
    0.00 :   9a804:  push   $0x7d
    0.00 :   9a809:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a80f:  nop
    0.00 :   9a810:  endbr64
    0.00 :   9a814:  push   $0x7e
    0.00 :   9a819:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a81f:  nop
    0.00 :   9a820:  endbr64
    0.00 :   9a824:  push   $0x7f
    0.00 :   9a829:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a82f:  nop
    0.00 :   9a830:  endbr64
    0.00 :   9a834:  push   $0x80
    0.00 :   9a839:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a83f:  nop
    0.00 :   9a840:  endbr64
    0.00 :   9a844:  push   $0x81
    0.00 :   9a849:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a84f:  nop
    0.00 :   9a850:  endbr64
    0.00 :   9a854:  push   $0x82
    0.00 :   9a859:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a85f:  nop
    0.00 :   9a860:  endbr64
    0.00 :   9a864:  push   $0x83
    0.00 :   9a869:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a86f:  nop
    0.00 :   9a870:  endbr64
    0.00 :   9a874:  push   $0x84
    0.00 :   9a879:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a87f:  nop
    0.00 :   9a880:  endbr64
    0.00 :   9a884:  push   $0x85
    0.00 :   9a889:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a88f:  nop
    0.00 :   9a890:  endbr64
    0.00 :   9a894:  push   $0x86
    0.00 :   9a899:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a89f:  nop
    0.00 :   9a8a0:  endbr64
    0.00 :   9a8a4:  push   $0x87
    0.00 :   9a8a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8af:  nop
    0.00 :   9a8b0:  endbr64
    0.00 :   9a8b4:  push   $0x88
    0.00 :   9a8b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8bf:  nop
    0.00 :   9a8c0:  endbr64
    0.00 :   9a8c4:  push   $0x89
    0.00 :   9a8c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8cf:  nop
    0.00 :   9a8d0:  endbr64
    0.00 :   9a8d4:  push   $0x8a
    0.00 :   9a8d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8df:  nop
    0.00 :   9a8e0:  endbr64
    0.00 :   9a8e4:  push   $0x8b
    0.00 :   9a8e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8ef:  nop
    0.00 :   9a8f0:  endbr64
    0.00 :   9a8f4:  push   $0x8c
    0.00 :   9a8f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a8ff:  nop
    0.00 :   9a900:  endbr64
    0.00 :   9a904:  push   $0x8d
    0.00 :   9a909:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a90f:  nop
    0.00 :   9a910:  endbr64
    0.00 :   9a914:  push   $0x8e
    0.00 :   9a919:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a91f:  nop
    0.00 :   9a920:  endbr64
    0.00 :   9a924:  push   $0x8f
    0.00 :   9a929:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a92f:  nop
    0.00 :   9a930:  endbr64
    0.00 :   9a934:  push   $0x90
    0.00 :   9a939:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a93f:  nop
    0.00 :   9a940:  endbr64
    0.00 :   9a944:  push   $0x91
    0.00 :   9a949:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a94f:  nop
    0.00 :   9a950:  endbr64
    0.00 :   9a954:  push   $0x92
    0.00 :   9a959:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a95f:  nop
    0.00 :   9a960:  endbr64
    0.00 :   9a964:  push   $0x93
    0.00 :   9a969:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a96f:  nop
    0.00 :   9a970:  endbr64
    0.00 :   9a974:  push   $0x94
    0.00 :   9a979:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a97f:  nop
    0.00 :   9a980:  endbr64
    0.00 :   9a984:  push   $0x95
    0.00 :   9a989:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a98f:  nop
    0.00 :   9a990:  endbr64
    0.00 :   9a994:  push   $0x96
    0.00 :   9a999:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a99f:  nop
    0.00 :   9a9a0:  endbr64
    0.00 :   9a9a4:  push   $0x97
    0.00 :   9a9a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9af:  nop
    0.00 :   9a9b0:  endbr64
    0.00 :   9a9b4:  push   $0x98
    0.00 :   9a9b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9bf:  nop
    0.00 :   9a9c0:  endbr64
    0.00 :   9a9c4:  push   $0x99
    0.00 :   9a9c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9cf:  nop
    0.00 :   9a9d0:  endbr64
    0.00 :   9a9d4:  push   $0x9a
    0.00 :   9a9d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9df:  nop
    0.00 :   9a9e0:  endbr64
    0.00 :   9a9e4:  push   $0x9b
    0.00 :   9a9e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9ef:  nop
    0.00 :   9a9f0:  endbr64
    0.00 :   9a9f4:  push   $0x9c
    0.00 :   9a9f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9a9ff:  nop
    0.00 :   9aa00:  endbr64
    0.00 :   9aa04:  push   $0x9d
    0.00 :   9aa09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa0f:  nop
    0.00 :   9aa10:  endbr64
    0.00 :   9aa14:  push   $0x9e
    0.00 :   9aa19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa1f:  nop
    0.00 :   9aa20:  endbr64
    0.00 :   9aa24:  push   $0x9f
    0.00 :   9aa29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa2f:  nop
    0.00 :   9aa30:  endbr64
    0.00 :   9aa34:  push   $0xa0
    0.00 :   9aa39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa3f:  nop
    0.00 :   9aa40:  endbr64
    0.00 :   9aa44:  push   $0xa1
    0.00 :   9aa49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa4f:  nop
    0.00 :   9aa50:  endbr64
    0.00 :   9aa54:  push   $0xa2
    0.00 :   9aa59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa5f:  nop
    0.00 :   9aa60:  endbr64
    0.00 :   9aa64:  push   $0xa3
    0.00 :   9aa69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa6f:  nop
    0.00 :   9aa70:  endbr64
    0.00 :   9aa74:  push   $0xa4
    0.00 :   9aa79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa7f:  nop
    0.00 :   9aa80:  endbr64
    0.00 :   9aa84:  push   $0xa5
    0.00 :   9aa89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa8f:  nop
    0.00 :   9aa90:  endbr64
    0.00 :   9aa94:  push   $0xa6
    0.00 :   9aa99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aa9f:  nop
    0.00 :   9aaa0:  endbr64
    0.00 :   9aaa4:  push   $0xa7
    0.00 :   9aaa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aaaf:  nop
    0.00 :   9aab0:  endbr64
    0.00 :   9aab4:  push   $0xa8
    0.00 :   9aab9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aabf:  nop
    0.00 :   9aac0:  endbr64
    0.00 :   9aac4:  push   $0xa9
    0.00 :   9aac9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aacf:  nop
    0.00 :   9aad0:  endbr64
    0.00 :   9aad4:  push   $0xaa
    0.00 :   9aad9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aadf:  nop
    0.00 :   9aae0:  endbr64
    0.00 :   9aae4:  push   $0xab
    0.00 :   9aae9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aaef:  nop
    0.00 :   9aaf0:  endbr64
    0.00 :   9aaf4:  push   $0xac
    0.00 :   9aaf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aaff:  nop
    0.00 :   9ab00:  endbr64
    0.00 :   9ab04:  push   $0xad
    0.00 :   9ab09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab0f:  nop
    0.00 :   9ab10:  endbr64
    0.00 :   9ab14:  push   $0xae
    0.00 :   9ab19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab1f:  nop
    0.00 :   9ab20:  endbr64
    0.00 :   9ab24:  push   $0xaf
    0.00 :   9ab29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab2f:  nop
    0.00 :   9ab30:  endbr64
    0.00 :   9ab34:  push   $0xb0
    0.00 :   9ab39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab3f:  nop
    0.00 :   9ab40:  endbr64
    0.00 :   9ab44:  push   $0xb1
    0.00 :   9ab49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab4f:  nop
    0.00 :   9ab50:  endbr64
    0.00 :   9ab54:  push   $0xb2
    0.00 :   9ab59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab5f:  nop
    0.00 :   9ab60:  endbr64
    0.00 :   9ab64:  push   $0xb3
    0.00 :   9ab69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab6f:  nop
    0.00 :   9ab70:  endbr64
    0.00 :   9ab74:  push   $0xb4
    0.00 :   9ab79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab7f:  nop
    0.00 :   9ab80:  endbr64
    0.00 :   9ab84:  push   $0xb5
    0.00 :   9ab89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab8f:  nop
    0.00 :   9ab90:  endbr64
    0.00 :   9ab94:  push   $0xb6
    0.00 :   9ab99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ab9f:  nop
    0.00 :   9aba0:  endbr64
    0.00 :   9aba4:  push   $0xb7
    0.00 :   9aba9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abaf:  nop
    0.00 :   9abb0:  endbr64
    0.00 :   9abb4:  push   $0xb8
    0.00 :   9abb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abbf:  nop
    0.00 :   9abc0:  endbr64
    0.00 :   9abc4:  push   $0xb9
    0.00 :   9abc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abcf:  nop
    0.00 :   9abd0:  endbr64
    0.00 :   9abd4:  push   $0xba
    0.00 :   9abd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abdf:  nop
    0.00 :   9abe0:  endbr64
    0.00 :   9abe4:  push   $0xbb
    0.00 :   9abe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abef:  nop
    0.00 :   9abf0:  endbr64
    0.00 :   9abf4:  push   $0xbc
    0.00 :   9abf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9abff:  nop
    0.00 :   9ac00:  endbr64
    0.00 :   9ac04:  push   $0xbd
    0.00 :   9ac09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac0f:  nop
    0.00 :   9ac10:  endbr64
    0.00 :   9ac14:  push   $0xbe
    0.00 :   9ac19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac1f:  nop
    0.00 :   9ac20:  endbr64
    0.00 :   9ac24:  push   $0xbf
    0.00 :   9ac29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac2f:  nop
    0.00 :   9ac30:  endbr64
    0.00 :   9ac34:  push   $0xc0
    0.00 :   9ac39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac3f:  nop
    0.00 :   9ac40:  endbr64
    0.00 :   9ac44:  push   $0xc1
    0.00 :   9ac49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac4f:  nop
    0.00 :   9ac50:  endbr64
    0.00 :   9ac54:  push   $0xc2
    0.00 :   9ac59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac5f:  nop
    0.00 :   9ac60:  endbr64
    0.00 :   9ac64:  push   $0xc3
    0.00 :   9ac69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac6f:  nop
    0.00 :   9ac70:  endbr64
    0.00 :   9ac74:  push   $0xc4
    0.00 :   9ac79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac7f:  nop
    0.00 :   9ac80:  endbr64
    0.00 :   9ac84:  push   $0xc5
    0.00 :   9ac89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac8f:  nop
    0.00 :   9ac90:  endbr64
    0.00 :   9ac94:  push   $0xc6
    0.00 :   9ac99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ac9f:  nop
    0.00 :   9aca0:  endbr64
    0.00 :   9aca4:  push   $0xc7
    0.00 :   9aca9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9acaf:  nop
    0.00 :   9acb0:  endbr64
    0.00 :   9acb4:  push   $0xc8
    0.00 :   9acb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9acbf:  nop
    0.00 :   9acc0:  endbr64
    0.00 :   9acc4:  push   $0xc9
    0.00 :   9acc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9accf:  nop
    0.00 :   9acd0:  endbr64
    0.00 :   9acd4:  push   $0xca
    0.00 :   9acd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9acdf:  nop
    0.00 :   9ace0:  endbr64
    0.00 :   9ace4:  push   $0xcb
    0.00 :   9ace9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9acef:  nop
    0.00 :   9acf0:  endbr64
    0.00 :   9acf4:  push   $0xcc
    0.00 :   9acf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9acff:  nop
    0.00 :   9ad00:  endbr64
    0.00 :   9ad04:  push   $0xcd
    0.00 :   9ad09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad0f:  nop
    0.00 :   9ad10:  endbr64
    0.00 :   9ad14:  push   $0xce
    0.00 :   9ad19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad1f:  nop
    0.00 :   9ad20:  endbr64
    0.00 :   9ad24:  push   $0xcf
    0.00 :   9ad29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad2f:  nop
    0.00 :   9ad30:  endbr64
    0.00 :   9ad34:  push   $0xd0
    0.00 :   9ad39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad3f:  nop
    0.00 :   9ad40:  endbr64
    0.00 :   9ad44:  push   $0xd1
    0.00 :   9ad49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad4f:  nop
    0.00 :   9ad50:  endbr64
    0.00 :   9ad54:  push   $0xd2
    0.00 :   9ad59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad5f:  nop
    0.00 :   9ad60:  endbr64
    0.00 :   9ad64:  push   $0xd3
    0.00 :   9ad69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad6f:  nop
    0.00 :   9ad70:  endbr64
    0.00 :   9ad74:  push   $0xd4
    0.00 :   9ad79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad7f:  nop
    0.00 :   9ad80:  endbr64
    0.00 :   9ad84:  push   $0xd5
    0.00 :   9ad89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad8f:  nop
    0.00 :   9ad90:  endbr64
    0.00 :   9ad94:  push   $0xd6
    0.00 :   9ad99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ad9f:  nop
    0.00 :   9ada0:  endbr64
    0.00 :   9ada4:  push   $0xd7
    0.00 :   9ada9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9adaf:  nop
    0.00 :   9adb0:  endbr64
    0.00 :   9adb4:  push   $0xd8
    0.00 :   9adb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9adbf:  nop
    0.00 :   9adc0:  endbr64
    0.00 :   9adc4:  push   $0xd9
    0.00 :   9adc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9adcf:  nop
    0.00 :   9add0:  endbr64
    0.00 :   9add4:  push   $0xda
    0.00 :   9add9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9addf:  nop
    0.00 :   9ade0:  endbr64
    0.00 :   9ade4:  push   $0xdb
    0.00 :   9ade9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9adef:  nop
    0.00 :   9adf0:  endbr64
    0.00 :   9adf4:  push   $0xdc
    0.00 :   9adf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9adff:  nop
    0.00 :   9ae00:  endbr64
    0.00 :   9ae04:  push   $0xdd
    0.00 :   9ae09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae0f:  nop
    0.00 :   9ae10:  endbr64
    0.00 :   9ae14:  push   $0xde
    0.00 :   9ae19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae1f:  nop
    0.00 :   9ae20:  endbr64
    0.00 :   9ae24:  push   $0xdf
    0.00 :   9ae29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae2f:  nop
    0.00 :   9ae30:  endbr64
    0.00 :   9ae34:  push   $0xe0
    0.00 :   9ae39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae3f:  nop
    0.00 :   9ae40:  endbr64
    0.00 :   9ae44:  push   $0xe1
    0.00 :   9ae49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae4f:  nop
    0.00 :   9ae50:  endbr64
    0.00 :   9ae54:  push   $0xe2
    0.00 :   9ae59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae5f:  nop
    0.00 :   9ae60:  endbr64
    0.00 :   9ae64:  push   $0xe3
    0.00 :   9ae69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae6f:  nop
    0.00 :   9ae70:  endbr64
    0.00 :   9ae74:  push   $0xe4
    0.00 :   9ae79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae7f:  nop
    0.00 :   9ae80:  endbr64
    0.00 :   9ae84:  push   $0xe5
    0.00 :   9ae89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae8f:  nop
    0.00 :   9ae90:  endbr64
    0.00 :   9ae94:  push   $0xe6
    0.00 :   9ae99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ae9f:  nop
    0.00 :   9aea0:  endbr64
    0.00 :   9aea4:  push   $0xe7
    0.00 :   9aea9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aeaf:  nop
    0.00 :   9aeb0:  endbr64
    0.00 :   9aeb4:  push   $0xe8
    0.00 :   9aeb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aebf:  nop
    0.00 :   9aec0:  endbr64
    0.00 :   9aec4:  push   $0xe9
    0.00 :   9aec9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aecf:  nop
    0.00 :   9aed0:  endbr64
    0.00 :   9aed4:  push   $0xea
    0.00 :   9aed9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aedf:  nop
    0.00 :   9aee0:  endbr64
    0.00 :   9aee4:  push   $0xeb
    0.00 :   9aee9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aeef:  nop
    0.00 :   9aef0:  endbr64
    0.00 :   9aef4:  push   $0xec
    0.00 :   9aef9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9aeff:  nop
    0.00 :   9af00:  endbr64
    0.00 :   9af04:  push   $0xed
    0.00 :   9af09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af0f:  nop
    0.00 :   9af10:  endbr64
    0.00 :   9af14:  push   $0xee
    0.00 :   9af19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af1f:  nop
    0.00 :   9af20:  endbr64
    0.00 :   9af24:  push   $0xef
    0.00 :   9af29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af2f:  nop
    0.00 :   9af30:  endbr64
    0.00 :   9af34:  push   $0xf0
    0.00 :   9af39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af3f:  nop
    0.00 :   9af40:  endbr64
    0.00 :   9af44:  push   $0xf1
    0.00 :   9af49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af4f:  nop
    0.00 :   9af50:  endbr64
    0.00 :   9af54:  push   $0xf2
    0.00 :   9af59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af5f:  nop
    0.00 :   9af60:  endbr64
    0.00 :   9af64:  push   $0xf3
    0.00 :   9af69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af6f:  nop
    0.00 :   9af70:  endbr64
    0.00 :   9af74:  push   $0xf4
    0.00 :   9af79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af7f:  nop
    0.00 :   9af80:  endbr64
    0.00 :   9af84:  push   $0xf5
    0.00 :   9af89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af8f:  nop
    0.00 :   9af90:  endbr64
    0.00 :   9af94:  push   $0xf6
    0.00 :   9af99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9af9f:  nop
    0.00 :   9afa0:  endbr64
    0.00 :   9afa4:  push   $0xf7
    0.00 :   9afa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afaf:  nop
    0.00 :   9afb0:  endbr64
    0.00 :   9afb4:  push   $0xf8
    0.00 :   9afb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afbf:  nop
    0.00 :   9afc0:  endbr64
    0.00 :   9afc4:  push   $0xf9
    0.00 :   9afc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afcf:  nop
    0.00 :   9afd0:  endbr64
    0.00 :   9afd4:  push   $0xfa
    0.00 :   9afd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afdf:  nop
    0.00 :   9afe0:  endbr64
    0.00 :   9afe4:  push   $0xfb
    0.00 :   9afe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afef:  nop
    0.00 :   9aff0:  endbr64
    0.00 :   9aff4:  push   $0xfc
    0.00 :   9aff9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9afff:  nop
    0.00 :   9b000:  endbr64
    0.00 :   9b004:  push   $0xfd
    0.00 :   9b009:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b00f:  nop
    0.00 :   9b010:  endbr64
    0.00 :   9b014:  push   $0xfe
    0.00 :   9b019:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b01f:  nop
    0.00 :   9b020:  endbr64
    0.00 :   9b024:  push   $0xff
    0.00 :   9b029:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b02f:  nop
    0.00 :   9b030:  endbr64
    0.00 :   9b034:  push   $0x100
    0.00 :   9b039:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b03f:  nop
    0.00 :   9b040:  endbr64
    0.00 :   9b044:  push   $0x101
    0.00 :   9b049:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b04f:  nop
    0.00 :   9b050:  endbr64
    0.00 :   9b054:  push   $0x102
    0.00 :   9b059:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b05f:  nop
    0.00 :   9b060:  endbr64
    0.00 :   9b064:  push   $0x103
    0.00 :   9b069:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b06f:  nop
    0.00 :   9b070:  endbr64
    0.00 :   9b074:  push   $0x104
    0.00 :   9b079:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b07f:  nop
    0.00 :   9b080:  endbr64
    0.00 :   9b084:  push   $0x105
    0.00 :   9b089:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b08f:  nop
    0.00 :   9b090:  endbr64
    0.00 :   9b094:  push   $0x106
    0.00 :   9b099:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b09f:  nop
    0.00 :   9b0a0:  endbr64
    0.00 :   9b0a4:  push   $0x107
    0.00 :   9b0a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0af:  nop
    0.00 :   9b0b0:  endbr64
    0.00 :   9b0b4:  push   $0x108
    0.00 :   9b0b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0bf:  nop
    0.00 :   9b0c0:  endbr64
    0.00 :   9b0c4:  push   $0x109
    0.00 :   9b0c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0cf:  nop
    0.00 :   9b0d0:  endbr64
    0.00 :   9b0d4:  push   $0x10a
    0.00 :   9b0d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0df:  nop
    0.00 :   9b0e0:  endbr64
    0.00 :   9b0e4:  push   $0x10b
    0.00 :   9b0e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0ef:  nop
    0.00 :   9b0f0:  endbr64
    0.00 :   9b0f4:  push   $0x10c
    0.00 :   9b0f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b0ff:  nop
    0.00 :   9b100:  endbr64
    0.00 :   9b104:  push   $0x10d
    0.00 :   9b109:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b10f:  nop
    0.00 :   9b110:  endbr64
    0.00 :   9b114:  push   $0x10e
    0.00 :   9b119:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b11f:  nop
    0.00 :   9b120:  endbr64
    0.00 :   9b124:  push   $0x10f
    0.00 :   9b129:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b12f:  nop
    0.00 :   9b130:  endbr64
    0.00 :   9b134:  push   $0x110
    0.00 :   9b139:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b13f:  nop
    0.00 :   9b140:  endbr64
    0.00 :   9b144:  push   $0x111
    0.00 :   9b149:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b14f:  nop
    0.00 :   9b150:  endbr64
    0.00 :   9b154:  push   $0x112
    0.00 :   9b159:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b15f:  nop
    0.00 :   9b160:  endbr64
    0.00 :   9b164:  push   $0x113
    0.00 :   9b169:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b16f:  nop
    0.00 :   9b170:  endbr64
    0.00 :   9b174:  push   $0x114
    0.00 :   9b179:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b17f:  nop
    0.00 :   9b180:  endbr64
    0.00 :   9b184:  push   $0x115
    0.00 :   9b189:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b18f:  nop
    0.00 :   9b190:  endbr64
    0.00 :   9b194:  push   $0x116
    0.00 :   9b199:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b19f:  nop
    0.00 :   9b1a0:  endbr64
    0.00 :   9b1a4:  push   $0x117
    0.00 :   9b1a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1af:  nop
    0.00 :   9b1b0:  endbr64
    0.00 :   9b1b4:  push   $0x118
    0.00 :   9b1b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1bf:  nop
    0.00 :   9b1c0:  endbr64
    0.00 :   9b1c4:  push   $0x119
    0.00 :   9b1c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1cf:  nop
    0.00 :   9b1d0:  endbr64
    0.00 :   9b1d4:  push   $0x11a
    0.00 :   9b1d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1df:  nop
    0.00 :   9b1e0:  endbr64
    0.00 :   9b1e4:  push   $0x11b
    0.00 :   9b1e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1ef:  nop
    0.00 :   9b1f0:  endbr64
    0.00 :   9b1f4:  push   $0x11c
    0.00 :   9b1f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b1ff:  nop
    0.00 :   9b200:  endbr64
    0.00 :   9b204:  push   $0x11d
    0.00 :   9b209:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b20f:  nop
    0.00 :   9b210:  endbr64
    0.00 :   9b214:  push   $0x11e
    0.00 :   9b219:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b21f:  nop
    0.00 :   9b220:  endbr64
    0.00 :   9b224:  push   $0x11f
    0.00 :   9b229:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b22f:  nop
    0.00 :   9b230:  endbr64
    0.00 :   9b234:  push   $0x120
    0.00 :   9b239:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b23f:  nop
    0.00 :   9b240:  endbr64
    0.00 :   9b244:  push   $0x121
    0.00 :   9b249:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b24f:  nop
    0.00 :   9b250:  endbr64
    0.00 :   9b254:  push   $0x122
    0.00 :   9b259:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b25f:  nop
    0.00 :   9b260:  endbr64
    0.00 :   9b264:  push   $0x123
    0.00 :   9b269:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b26f:  nop
    0.00 :   9b270:  endbr64
    0.00 :   9b274:  push   $0x124
    0.00 :   9b279:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b27f:  nop
    0.00 :   9b280:  endbr64
    0.00 :   9b284:  push   $0x125
    0.00 :   9b289:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b28f:  nop
    0.00 :   9b290:  endbr64
    0.00 :   9b294:  push   $0x126
    0.00 :   9b299:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b29f:  nop
    0.00 :   9b2a0:  endbr64
    0.00 :   9b2a4:  push   $0x127
    0.00 :   9b2a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2af:  nop
    0.00 :   9b2b0:  endbr64
    0.00 :   9b2b4:  push   $0x128
    0.00 :   9b2b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2bf:  nop
    0.00 :   9b2c0:  endbr64
    0.00 :   9b2c4:  push   $0x129
    0.00 :   9b2c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2cf:  nop
    0.00 :   9b2d0:  endbr64
    0.00 :   9b2d4:  push   $0x12a
    0.00 :   9b2d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2df:  nop
    0.00 :   9b2e0:  endbr64
    0.00 :   9b2e4:  push   $0x12b
    0.00 :   9b2e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2ef:  nop
    0.00 :   9b2f0:  endbr64
    0.00 :   9b2f4:  push   $0x12c
    0.00 :   9b2f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b2ff:  nop
    0.00 :   9b300:  endbr64
    0.00 :   9b304:  push   $0x12d
    0.00 :   9b309:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b30f:  nop
    0.00 :   9b310:  endbr64
    0.00 :   9b314:  push   $0x12e
    0.00 :   9b319:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b31f:  nop
    0.00 :   9b320:  endbr64
    0.00 :   9b324:  push   $0x12f
    0.00 :   9b329:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b32f:  nop
    0.00 :   9b330:  endbr64
    0.00 :   9b334:  push   $0x130
    0.00 :   9b339:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b33f:  nop
    0.00 :   9b340:  endbr64
    0.00 :   9b344:  push   $0x131
    0.00 :   9b349:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b34f:  nop
    0.00 :   9b350:  endbr64
    0.00 :   9b354:  push   $0x132
    0.00 :   9b359:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b35f:  nop
    0.00 :   9b360:  endbr64
    0.00 :   9b364:  push   $0x133
    0.00 :   9b369:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b36f:  nop
    0.00 :   9b370:  endbr64
    0.00 :   9b374:  push   $0x134
    0.00 :   9b379:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b37f:  nop
    0.00 :   9b380:  endbr64
    0.00 :   9b384:  push   $0x135
    0.00 :   9b389:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b38f:  nop
    0.00 :   9b390:  endbr64
    0.00 :   9b394:  push   $0x136
    0.00 :   9b399:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b39f:  nop
    0.00 :   9b3a0:  endbr64
    0.00 :   9b3a4:  push   $0x137
    0.00 :   9b3a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3af:  nop
    0.00 :   9b3b0:  endbr64
    0.00 :   9b3b4:  push   $0x138
    0.00 :   9b3b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3bf:  nop
    0.00 :   9b3c0:  endbr64
    0.00 :   9b3c4:  push   $0x139
    0.00 :   9b3c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3cf:  nop
    0.00 :   9b3d0:  endbr64
    0.00 :   9b3d4:  push   $0x13a
    0.00 :   9b3d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3df:  nop
    0.00 :   9b3e0:  endbr64
    0.00 :   9b3e4:  push   $0x13b
    0.00 :   9b3e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3ef:  nop
    0.00 :   9b3f0:  endbr64
    0.00 :   9b3f4:  push   $0x13c
    0.00 :   9b3f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b3ff:  nop
    0.00 :   9b400:  endbr64
    0.00 :   9b404:  push   $0x13d
    0.00 :   9b409:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b40f:  nop
    0.00 :   9b410:  endbr64
    0.00 :   9b414:  push   $0x13e
    0.00 :   9b419:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b41f:  nop
    0.00 :   9b420:  endbr64
    0.00 :   9b424:  push   $0x13f
    0.00 :   9b429:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b42f:  nop
    0.00 :   9b430:  endbr64
    0.00 :   9b434:  push   $0x140
    0.00 :   9b439:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b43f:  nop
    0.00 :   9b440:  endbr64
    0.00 :   9b444:  push   $0x141
    0.00 :   9b449:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b44f:  nop
    0.00 :   9b450:  endbr64
    0.00 :   9b454:  push   $0x142
    0.00 :   9b459:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b45f:  nop
    0.00 :   9b460:  endbr64
    0.00 :   9b464:  push   $0x143
    0.00 :   9b469:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b46f:  nop
    0.00 :   9b470:  endbr64
    0.00 :   9b474:  push   $0x144
    0.00 :   9b479:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b47f:  nop
    0.00 :   9b480:  endbr64
    0.00 :   9b484:  push   $0x145
    0.00 :   9b489:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b48f:  nop
    0.00 :   9b490:  endbr64
    0.00 :   9b494:  push   $0x146
    0.00 :   9b499:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b49f:  nop
    0.00 :   9b4a0:  endbr64
    0.00 :   9b4a4:  push   $0x147
    0.00 :   9b4a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4af:  nop
    0.00 :   9b4b0:  endbr64
    0.00 :   9b4b4:  push   $0x148
    0.00 :   9b4b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4bf:  nop
    0.00 :   9b4c0:  endbr64
    0.00 :   9b4c4:  push   $0x149
    0.00 :   9b4c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4cf:  nop
    0.00 :   9b4d0:  endbr64
    0.00 :   9b4d4:  push   $0x14a
    0.00 :   9b4d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4df:  nop
    0.00 :   9b4e0:  endbr64
    0.00 :   9b4e4:  push   $0x14b
    0.00 :   9b4e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4ef:  nop
    0.00 :   9b4f0:  endbr64
    0.00 :   9b4f4:  push   $0x14c
    0.00 :   9b4f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b4ff:  nop
    0.00 :   9b500:  endbr64
    0.00 :   9b504:  push   $0x14d
    0.00 :   9b509:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b50f:  nop
    0.00 :   9b510:  endbr64
    0.00 :   9b514:  push   $0x14e
    0.00 :   9b519:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b51f:  nop
    0.00 :   9b520:  endbr64
    0.00 :   9b524:  push   $0x14f
    0.00 :   9b529:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b52f:  nop
    0.00 :   9b530:  endbr64
    0.00 :   9b534:  push   $0x150
    0.00 :   9b539:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b53f:  nop
    0.00 :   9b540:  endbr64
    0.00 :   9b544:  push   $0x151
    0.00 :   9b549:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b54f:  nop
    0.00 :   9b550:  endbr64
    0.00 :   9b554:  push   $0x152
    0.00 :   9b559:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b55f:  nop
    0.00 :   9b560:  endbr64
    0.00 :   9b564:  push   $0x153
    0.00 :   9b569:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b56f:  nop
    0.00 :   9b570:  endbr64
    0.00 :   9b574:  push   $0x154
    0.00 :   9b579:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b57f:  nop
    0.00 :   9b580:  endbr64
    0.00 :   9b584:  push   $0x155
    0.00 :   9b589:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b58f:  nop
    0.00 :   9b590:  endbr64
    0.00 :   9b594:  push   $0x156
    0.00 :   9b599:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b59f:  nop
    0.00 :   9b5a0:  endbr64
    0.00 :   9b5a4:  push   $0x157
    0.00 :   9b5a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5af:  nop
    0.00 :   9b5b0:  endbr64
    0.00 :   9b5b4:  push   $0x158
    0.00 :   9b5b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5bf:  nop
    0.00 :   9b5c0:  endbr64
    0.00 :   9b5c4:  push   $0x159
    0.00 :   9b5c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5cf:  nop
    0.00 :   9b5d0:  endbr64
    0.00 :   9b5d4:  push   $0x15a
    0.00 :   9b5d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5df:  nop
    0.00 :   9b5e0:  endbr64
    0.00 :   9b5e4:  push   $0x15b
    0.00 :   9b5e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5ef:  nop
    0.00 :   9b5f0:  endbr64
    0.00 :   9b5f4:  push   $0x15c
    0.00 :   9b5f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b5ff:  nop
    0.00 :   9b600:  endbr64
    0.00 :   9b604:  push   $0x15d
    0.00 :   9b609:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b60f:  nop
    0.00 :   9b610:  endbr64
    0.00 :   9b614:  push   $0x15e
    0.00 :   9b619:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b61f:  nop
    0.00 :   9b620:  endbr64
    0.00 :   9b624:  push   $0x15f
    0.00 :   9b629:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b62f:  nop
    0.00 :   9b630:  endbr64
    0.00 :   9b634:  push   $0x160
    0.00 :   9b639:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b63f:  nop
    0.00 :   9b640:  endbr64
    0.00 :   9b644:  push   $0x161
    0.00 :   9b649:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b64f:  nop
    0.00 :   9b650:  endbr64
    0.00 :   9b654:  push   $0x162
    0.00 :   9b659:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b65f:  nop
    0.00 :   9b660:  endbr64
    0.00 :   9b664:  push   $0x163
    0.00 :   9b669:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b66f:  nop
    0.00 :   9b670:  endbr64
    0.00 :   9b674:  push   $0x164
    0.00 :   9b679:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b67f:  nop
    0.00 :   9b680:  endbr64
    0.00 :   9b684:  push   $0x165
    0.00 :   9b689:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b68f:  nop
    0.00 :   9b690:  endbr64
    0.00 :   9b694:  push   $0x166
    0.00 :   9b699:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b69f:  nop
    0.00 :   9b6a0:  endbr64
    0.00 :   9b6a4:  push   $0x167
    0.00 :   9b6a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6af:  nop
    0.00 :   9b6b0:  endbr64
    0.00 :   9b6b4:  push   $0x168
    0.00 :   9b6b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6bf:  nop
    0.00 :   9b6c0:  endbr64
    0.00 :   9b6c4:  push   $0x169
    0.00 :   9b6c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6cf:  nop
    0.00 :   9b6d0:  endbr64
    0.00 :   9b6d4:  push   $0x16a
    0.00 :   9b6d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6df:  nop
    0.00 :   9b6e0:  endbr64
    0.00 :   9b6e4:  push   $0x16b
    0.00 :   9b6e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6ef:  nop
    0.00 :   9b6f0:  endbr64
    0.00 :   9b6f4:  push   $0x16c
    0.00 :   9b6f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b6ff:  nop
    0.00 :   9b700:  endbr64
    0.00 :   9b704:  push   $0x16d
    0.00 :   9b709:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b70f:  nop
    0.00 :   9b710:  endbr64
    0.00 :   9b714:  push   $0x16e
    0.00 :   9b719:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b71f:  nop
    0.00 :   9b720:  endbr64
    0.00 :   9b724:  push   $0x16f
    0.00 :   9b729:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b72f:  nop
    0.00 :   9b730:  endbr64
    0.00 :   9b734:  push   $0x170
    0.00 :   9b739:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b73f:  nop
    0.00 :   9b740:  endbr64
    0.00 :   9b744:  push   $0x171
    0.00 :   9b749:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b74f:  nop
    0.00 :   9b750:  endbr64
    0.00 :   9b754:  push   $0x172
    0.00 :   9b759:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b75f:  nop
    0.00 :   9b760:  endbr64
    0.00 :   9b764:  push   $0x173
    0.00 :   9b769:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b76f:  nop
    0.00 :   9b770:  endbr64
    0.00 :   9b774:  push   $0x174
    0.00 :   9b779:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b77f:  nop
    0.00 :   9b780:  endbr64
    0.00 :   9b784:  push   $0x175
    0.00 :   9b789:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b78f:  nop
    0.00 :   9b790:  endbr64
    0.00 :   9b794:  push   $0x176
    0.00 :   9b799:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b79f:  nop
    0.00 :   9b7a0:  endbr64
    0.00 :   9b7a4:  push   $0x177
    0.00 :   9b7a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7af:  nop
    0.00 :   9b7b0:  endbr64
    0.00 :   9b7b4:  push   $0x178
    0.00 :   9b7b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7bf:  nop
    0.00 :   9b7c0:  endbr64
    0.00 :   9b7c4:  push   $0x179
    0.00 :   9b7c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7cf:  nop
    0.00 :   9b7d0:  endbr64
    0.00 :   9b7d4:  push   $0x17a
    0.00 :   9b7d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7df:  nop
    0.00 :   9b7e0:  endbr64
    0.00 :   9b7e4:  push   $0x17b
    0.00 :   9b7e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7ef:  nop
    0.00 :   9b7f0:  endbr64
    0.00 :   9b7f4:  push   $0x17c
    0.00 :   9b7f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b7ff:  nop
    0.00 :   9b800:  endbr64
    0.00 :   9b804:  push   $0x17d
    0.00 :   9b809:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b80f:  nop
    0.00 :   9b810:  endbr64
    0.00 :   9b814:  push   $0x17e
    0.00 :   9b819:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b81f:  nop
    0.00 :   9b820:  endbr64
    0.00 :   9b824:  push   $0x17f
    0.00 :   9b829:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b82f:  nop
    0.00 :   9b830:  endbr64
    0.00 :   9b834:  push   $0x180
    0.00 :   9b839:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b83f:  nop
    0.00 :   9b840:  endbr64
    0.00 :   9b844:  push   $0x181
    0.00 :   9b849:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b84f:  nop
    0.00 :   9b850:  endbr64
    0.00 :   9b854:  push   $0x182
    0.00 :   9b859:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b85f:  nop
    0.00 :   9b860:  endbr64
    0.00 :   9b864:  push   $0x183
    0.00 :   9b869:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b86f:  nop
    0.00 :   9b870:  endbr64
    0.00 :   9b874:  push   $0x184
    0.00 :   9b879:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b87f:  nop
    0.00 :   9b880:  endbr64
    0.00 :   9b884:  push   $0x185
    0.00 :   9b889:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b88f:  nop
    0.00 :   9b890:  endbr64
    0.00 :   9b894:  push   $0x186
    0.00 :   9b899:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b89f:  nop
    0.00 :   9b8a0:  endbr64
    0.00 :   9b8a4:  push   $0x187
    0.00 :   9b8a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8af:  nop
    0.00 :   9b8b0:  endbr64
    0.00 :   9b8b4:  push   $0x188
    0.00 :   9b8b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8bf:  nop
    0.00 :   9b8c0:  endbr64
    0.00 :   9b8c4:  push   $0x189
    0.00 :   9b8c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8cf:  nop
    0.00 :   9b8d0:  endbr64
    0.00 :   9b8d4:  push   $0x18a
    0.00 :   9b8d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8df:  nop
    0.00 :   9b8e0:  endbr64
    0.00 :   9b8e4:  push   $0x18b
    0.00 :   9b8e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8ef:  nop
    0.00 :   9b8f0:  endbr64
    0.00 :   9b8f4:  push   $0x18c
    0.00 :   9b8f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b8ff:  nop
    0.00 :   9b900:  endbr64
    0.00 :   9b904:  push   $0x18d
    0.00 :   9b909:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b90f:  nop
    0.00 :   9b910:  endbr64
    0.00 :   9b914:  push   $0x18e
    0.00 :   9b919:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b91f:  nop
    0.00 :   9b920:  endbr64
    0.00 :   9b924:  push   $0x18f
    0.00 :   9b929:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b92f:  nop
    0.00 :   9b930:  endbr64
    0.00 :   9b934:  push   $0x190
    0.00 :   9b939:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b93f:  nop
    0.00 :   9b940:  endbr64
    0.00 :   9b944:  push   $0x191
    0.00 :   9b949:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b94f:  nop
    0.00 :   9b950:  endbr64
    0.00 :   9b954:  push   $0x192
    0.00 :   9b959:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b95f:  nop
    0.00 :   9b960:  endbr64
    0.00 :   9b964:  push   $0x193
    0.00 :   9b969:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b96f:  nop
    0.00 :   9b970:  endbr64
    0.00 :   9b974:  push   $0x194
    0.00 :   9b979:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b97f:  nop
    0.00 :   9b980:  endbr64
    0.00 :   9b984:  push   $0x195
    0.00 :   9b989:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b98f:  nop
    0.00 :   9b990:  endbr64
    0.00 :   9b994:  push   $0x196
    0.00 :   9b999:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b99f:  nop
    0.00 :   9b9a0:  endbr64
    0.00 :   9b9a4:  push   $0x197
    0.00 :   9b9a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9af:  nop
    0.00 :   9b9b0:  endbr64
    0.00 :   9b9b4:  push   $0x198
    0.00 :   9b9b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9bf:  nop
    0.00 :   9b9c0:  endbr64
    0.00 :   9b9c4:  push   $0x199
    0.00 :   9b9c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9cf:  nop
    0.00 :   9b9d0:  endbr64
    0.00 :   9b9d4:  push   $0x19a
    0.00 :   9b9d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9df:  nop
    0.00 :   9b9e0:  endbr64
    0.00 :   9b9e4:  push   $0x19b
    0.00 :   9b9e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9ef:  nop
    0.00 :   9b9f0:  endbr64
    0.00 :   9b9f4:  push   $0x19c
    0.00 :   9b9f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9b9ff:  nop
    0.00 :   9ba00:  endbr64
    0.00 :   9ba04:  push   $0x19d
    0.00 :   9ba09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba0f:  nop
    0.00 :   9ba10:  endbr64
    0.00 :   9ba14:  push   $0x19e
    0.00 :   9ba19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba1f:  nop
    0.00 :   9ba20:  endbr64
    0.00 :   9ba24:  push   $0x19f
    0.00 :   9ba29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba2f:  nop
    0.00 :   9ba30:  endbr64
    0.00 :   9ba34:  push   $0x1a0
    0.00 :   9ba39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba3f:  nop
    0.00 :   9ba40:  endbr64
    0.00 :   9ba44:  push   $0x1a1
    0.00 :   9ba49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba4f:  nop
    0.00 :   9ba50:  endbr64
    0.00 :   9ba54:  push   $0x1a2
    0.00 :   9ba59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba5f:  nop
    0.00 :   9ba60:  endbr64
    0.00 :   9ba64:  push   $0x1a3
    0.00 :   9ba69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba6f:  nop
    0.00 :   9ba70:  endbr64
    0.00 :   9ba74:  push   $0x1a4
    0.00 :   9ba79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba7f:  nop
    0.00 :   9ba80:  endbr64
    0.00 :   9ba84:  push   $0x1a5
    0.00 :   9ba89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba8f:  nop
    0.00 :   9ba90:  endbr64
    0.00 :   9ba94:  push   $0x1a6
    0.00 :   9ba99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ba9f:  nop
    0.00 :   9baa0:  endbr64
    0.00 :   9baa4:  push   $0x1a7
    0.00 :   9baa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9baaf:  nop
    0.00 :   9bab0:  endbr64
    0.00 :   9bab4:  push   $0x1a8
    0.00 :   9bab9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9babf:  nop
    0.00 :   9bac0:  endbr64
    0.00 :   9bac4:  push   $0x1a9
    0.00 :   9bac9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bacf:  nop
    0.00 :   9bad0:  endbr64
    0.00 :   9bad4:  push   $0x1aa
    0.00 :   9bad9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9badf:  nop
    0.00 :   9bae0:  endbr64
    0.00 :   9bae4:  push   $0x1ab
    0.00 :   9bae9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9baef:  nop
    0.00 :   9baf0:  endbr64
    0.00 :   9baf4:  push   $0x1ac
    0.00 :   9baf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9baff:  nop
    0.00 :   9bb00:  endbr64
    0.00 :   9bb04:  push   $0x1ad
    0.00 :   9bb09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb0f:  nop
    0.00 :   9bb10:  endbr64
    0.00 :   9bb14:  push   $0x1ae
    0.00 :   9bb19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb1f:  nop
    0.00 :   9bb20:  endbr64
    0.00 :   9bb24:  push   $0x1af
    0.00 :   9bb29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb2f:  nop
    0.00 :   9bb30:  endbr64
    0.00 :   9bb34:  push   $0x1b0
    0.00 :   9bb39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb3f:  nop
    0.00 :   9bb40:  endbr64
    0.00 :   9bb44:  push   $0x1b1
    0.00 :   9bb49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb4f:  nop
    0.00 :   9bb50:  endbr64
    0.00 :   9bb54:  push   $0x1b2
    0.00 :   9bb59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb5f:  nop
    0.00 :   9bb60:  endbr64
    0.00 :   9bb64:  push   $0x1b3
    0.00 :   9bb69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb6f:  nop
    0.00 :   9bb70:  endbr64
    0.00 :   9bb74:  push   $0x1b4
    0.00 :   9bb79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb7f:  nop
    0.00 :   9bb80:  endbr64
    0.00 :   9bb84:  push   $0x1b5
    0.00 :   9bb89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb8f:  nop
    0.00 :   9bb90:  endbr64
    0.00 :   9bb94:  push   $0x1b6
    0.00 :   9bb99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bb9f:  nop
    0.00 :   9bba0:  endbr64
    0.00 :   9bba4:  push   $0x1b7
    0.00 :   9bba9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbaf:  nop
    0.00 :   9bbb0:  endbr64
    0.00 :   9bbb4:  push   $0x1b8
    0.00 :   9bbb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbbf:  nop
    0.00 :   9bbc0:  endbr64
    0.00 :   9bbc4:  push   $0x1b9
    0.00 :   9bbc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbcf:  nop
    0.00 :   9bbd0:  endbr64
    0.00 :   9bbd4:  push   $0x1ba
    0.00 :   9bbd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbdf:  nop
    0.00 :   9bbe0:  endbr64
    0.00 :   9bbe4:  push   $0x1bb
    0.00 :   9bbe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbef:  nop
    0.00 :   9bbf0:  endbr64
    0.00 :   9bbf4:  push   $0x1bc
    0.00 :   9bbf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bbff:  nop
    0.00 :   9bc00:  endbr64
    0.00 :   9bc04:  push   $0x1bd
    0.00 :   9bc09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc0f:  nop
    0.00 :   9bc10:  endbr64
    0.00 :   9bc14:  push   $0x1be
    0.00 :   9bc19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc1f:  nop
    0.00 :   9bc20:  endbr64
    0.00 :   9bc24:  push   $0x1bf
    0.00 :   9bc29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc2f:  nop
    0.00 :   9bc30:  endbr64
    0.00 :   9bc34:  push   $0x1c0
    0.00 :   9bc39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc3f:  nop
    0.00 :   9bc40:  endbr64
    0.00 :   9bc44:  push   $0x1c1
    0.00 :   9bc49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc4f:  nop
    0.00 :   9bc50:  endbr64
    0.00 :   9bc54:  push   $0x1c2
    0.00 :   9bc59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc5f:  nop
    0.00 :   9bc60:  endbr64
    0.00 :   9bc64:  push   $0x1c3
    0.00 :   9bc69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc6f:  nop
    0.00 :   9bc70:  endbr64
    0.00 :   9bc74:  push   $0x1c4
    0.00 :   9bc79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc7f:  nop
    0.00 :   9bc80:  endbr64
    0.00 :   9bc84:  push   $0x1c5
    0.00 :   9bc89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc8f:  nop
    0.00 :   9bc90:  endbr64
    0.00 :   9bc94:  push   $0x1c6
    0.00 :   9bc99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bc9f:  nop
    0.00 :   9bca0:  endbr64
    0.00 :   9bca4:  push   $0x1c7
    0.00 :   9bca9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bcaf:  nop
    0.00 :   9bcb0:  endbr64
    0.00 :   9bcb4:  push   $0x1c8
    0.00 :   9bcb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bcbf:  nop
    0.00 :   9bcc0:  endbr64
    0.00 :   9bcc4:  push   $0x1c9
    0.00 :   9bcc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bccf:  nop
    0.00 :   9bcd0:  endbr64
    0.00 :   9bcd4:  push   $0x1ca
    0.00 :   9bcd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bcdf:  nop
    0.00 :   9bce0:  endbr64
    0.00 :   9bce4:  push   $0x1cb
    0.00 :   9bce9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bcef:  nop
    0.00 :   9bcf0:  endbr64
    0.00 :   9bcf4:  push   $0x1cc
    0.00 :   9bcf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bcff:  nop
    0.00 :   9bd00:  endbr64
    0.00 :   9bd04:  push   $0x1cd
    0.00 :   9bd09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd0f:  nop
    0.00 :   9bd10:  endbr64
    0.00 :   9bd14:  push   $0x1ce
    0.00 :   9bd19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd1f:  nop
    0.00 :   9bd20:  endbr64
    0.00 :   9bd24:  push   $0x1cf
    0.00 :   9bd29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd2f:  nop
    0.00 :   9bd30:  endbr64
    0.00 :   9bd34:  push   $0x1d0
    0.00 :   9bd39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd3f:  nop
    0.00 :   9bd40:  endbr64
    0.00 :   9bd44:  push   $0x1d1
    0.00 :   9bd49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd4f:  nop
    0.00 :   9bd50:  endbr64
    0.00 :   9bd54:  push   $0x1d2
    0.00 :   9bd59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd5f:  nop
    0.00 :   9bd60:  endbr64
    0.00 :   9bd64:  push   $0x1d3
    0.00 :   9bd69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd6f:  nop
    0.00 :   9bd70:  endbr64
    0.00 :   9bd74:  push   $0x1d4
    0.00 :   9bd79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd7f:  nop
    0.00 :   9bd80:  endbr64
    0.00 :   9bd84:  push   $0x1d5
    0.00 :   9bd89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd8f:  nop
    0.00 :   9bd90:  endbr64
    0.00 :   9bd94:  push   $0x1d6
    0.00 :   9bd99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bd9f:  nop
    0.00 :   9bda0:  endbr64
    0.00 :   9bda4:  push   $0x1d7
    0.00 :   9bda9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bdaf:  nop
    0.00 :   9bdb0:  endbr64
    0.00 :   9bdb4:  push   $0x1d8
    0.00 :   9bdb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bdbf:  nop
    0.00 :   9bdc0:  endbr64
    0.00 :   9bdc4:  push   $0x1d9
    0.00 :   9bdc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bdcf:  nop
    0.00 :   9bdd0:  endbr64
    0.00 :   9bdd4:  push   $0x1da
    0.00 :   9bdd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bddf:  nop
    0.00 :   9bde0:  endbr64
    0.00 :   9bde4:  push   $0x1db
    0.00 :   9bde9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bdef:  nop
    0.00 :   9bdf0:  endbr64
    0.00 :   9bdf4:  push   $0x1dc
    0.00 :   9bdf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bdff:  nop
    0.00 :   9be00:  endbr64
    0.00 :   9be04:  push   $0x1dd
    0.00 :   9be09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be0f:  nop
    0.00 :   9be10:  endbr64
    0.00 :   9be14:  push   $0x1de
    0.00 :   9be19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be1f:  nop
    0.00 :   9be20:  endbr64
    0.00 :   9be24:  push   $0x1df
    0.00 :   9be29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be2f:  nop
    0.00 :   9be30:  endbr64
    0.00 :   9be34:  push   $0x1e0
    0.00 :   9be39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be3f:  nop
    0.00 :   9be40:  endbr64
    0.00 :   9be44:  push   $0x1e1
    0.00 :   9be49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be4f:  nop
    0.00 :   9be50:  endbr64
    0.00 :   9be54:  push   $0x1e2
    0.00 :   9be59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be5f:  nop
    0.00 :   9be60:  endbr64
    0.00 :   9be64:  push   $0x1e3
    0.00 :   9be69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be6f:  nop
    0.00 :   9be70:  endbr64
    0.00 :   9be74:  push   $0x1e4
    0.00 :   9be79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be7f:  nop
    0.00 :   9be80:  endbr64
    0.00 :   9be84:  push   $0x1e5
    0.00 :   9be89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be8f:  nop
    0.00 :   9be90:  endbr64
    0.00 :   9be94:  push   $0x1e6
    0.00 :   9be99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9be9f:  nop
    0.00 :   9bea0:  endbr64
    0.00 :   9bea4:  push   $0x1e7
    0.00 :   9bea9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9beaf:  nop
    0.00 :   9beb0:  endbr64
    0.00 :   9beb4:  push   $0x1e8
    0.00 :   9beb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bebf:  nop
    0.00 :   9bec0:  endbr64
    0.00 :   9bec4:  push   $0x1e9
    0.00 :   9bec9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9becf:  nop
    0.00 :   9bed0:  endbr64
    0.00 :   9bed4:  push   $0x1ea
    0.00 :   9bed9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bedf:  nop
    0.00 :   9bee0:  endbr64
    0.00 :   9bee4:  push   $0x1eb
    0.00 :   9bee9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9beef:  nop
    0.00 :   9bef0:  endbr64
    0.00 :   9bef4:  push   $0x1ec
    0.00 :   9bef9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9beff:  nop
    0.00 :   9bf00:  endbr64
    0.00 :   9bf04:  push   $0x1ed
    0.00 :   9bf09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf0f:  nop
    0.00 :   9bf10:  endbr64
    0.00 :   9bf14:  push   $0x1ee
    0.00 :   9bf19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf1f:  nop
    0.00 :   9bf20:  endbr64
    0.00 :   9bf24:  push   $0x1ef
    0.00 :   9bf29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf2f:  nop
    0.00 :   9bf30:  endbr64
    0.00 :   9bf34:  push   $0x1f0
    0.00 :   9bf39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf3f:  nop
    0.00 :   9bf40:  endbr64
    0.00 :   9bf44:  push   $0x1f1
    0.00 :   9bf49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf4f:  nop
  100.00 :   9bf50:  endbr64
    0.00 :   9bf54:  push   $0x1f2
    0.00 :   9bf59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf5f:  nop
    0.00 :   9bf60:  endbr64
    0.00 :   9bf64:  push   $0x1f3
    0.00 :   9bf69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf6f:  nop
    0.00 :   9bf70:  endbr64
    0.00 :   9bf74:  push   $0x1f4
    0.00 :   9bf79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf7f:  nop
    0.00 :   9bf80:  endbr64
    0.00 :   9bf84:  push   $0x1f5
    0.00 :   9bf89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf8f:  nop
    0.00 :   9bf90:  endbr64
    0.00 :   9bf94:  push   $0x1f6
    0.00 :   9bf99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bf9f:  nop
    0.00 :   9bfa0:  endbr64
    0.00 :   9bfa4:  push   $0x1f7
    0.00 :   9bfa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfaf:  nop
    0.00 :   9bfb0:  endbr64
    0.00 :   9bfb4:  push   $0x1f8
    0.00 :   9bfb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfbf:  nop
    0.00 :   9bfc0:  endbr64
    0.00 :   9bfc4:  push   $0x1f9
    0.00 :   9bfc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfcf:  nop
    0.00 :   9bfd0:  endbr64
    0.00 :   9bfd4:  push   $0x1fa
    0.00 :   9bfd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfdf:  nop
    0.00 :   9bfe0:  endbr64
    0.00 :   9bfe4:  push   $0x1fb
    0.00 :   9bfe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfef:  nop
    0.00 :   9bff0:  endbr64
    0.00 :   9bff4:  push   $0x1fc
    0.00 :   9bff9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9bfff:  nop
    0.00 :   9c000:  endbr64
    0.00 :   9c004:  push   $0x1fd
    0.00 :   9c009:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c00f:  nop
    0.00 :   9c010:  endbr64
    0.00 :   9c014:  push   $0x1fe
    0.00 :   9c019:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c01f:  nop
    0.00 :   9c020:  endbr64
    0.00 :   9c024:  push   $0x1ff
    0.00 :   9c029:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c02f:  nop
    0.00 :   9c030:  endbr64
    0.00 :   9c034:  push   $0x200
    0.00 :   9c039:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c03f:  nop
    0.00 :   9c040:  endbr64
    0.00 :   9c044:  push   $0x201
    0.00 :   9c049:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c04f:  nop
    0.00 :   9c050:  endbr64
    0.00 :   9c054:  push   $0x202
    0.00 :   9c059:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c05f:  nop
    0.00 :   9c060:  endbr64
    0.00 :   9c064:  push   $0x203
    0.00 :   9c069:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c06f:  nop
    0.00 :   9c070:  endbr64
    0.00 :   9c074:  push   $0x204
    0.00 :   9c079:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c07f:  nop
    0.00 :   9c080:  endbr64
    0.00 :   9c084:  push   $0x205
    0.00 :   9c089:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c08f:  nop
    0.00 :   9c090:  endbr64
    0.00 :   9c094:  push   $0x206
    0.00 :   9c099:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c09f:  nop
    0.00 :   9c0a0:  endbr64
    0.00 :   9c0a4:  push   $0x207
    0.00 :   9c0a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0af:  nop
    0.00 :   9c0b0:  endbr64
    0.00 :   9c0b4:  push   $0x208
    0.00 :   9c0b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0bf:  nop
    0.00 :   9c0c0:  endbr64
    0.00 :   9c0c4:  push   $0x209
    0.00 :   9c0c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0cf:  nop
    0.00 :   9c0d0:  endbr64
    0.00 :   9c0d4:  push   $0x20a
    0.00 :   9c0d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0df:  nop
    0.00 :   9c0e0:  endbr64
    0.00 :   9c0e4:  push   $0x20b
    0.00 :   9c0e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0ef:  nop
    0.00 :   9c0f0:  endbr64
    0.00 :   9c0f4:  push   $0x20c
    0.00 :   9c0f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c0ff:  nop
    0.00 :   9c100:  endbr64
    0.00 :   9c104:  push   $0x20d
    0.00 :   9c109:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c10f:  nop
    0.00 :   9c110:  endbr64
    0.00 :   9c114:  push   $0x20e
    0.00 :   9c119:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c11f:  nop
    0.00 :   9c120:  endbr64
    0.00 :   9c124:  push   $0x20f
    0.00 :   9c129:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c12f:  nop
    0.00 :   9c130:  endbr64
    0.00 :   9c134:  push   $0x210
    0.00 :   9c139:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c13f:  nop
    0.00 :   9c140:  endbr64
    0.00 :   9c144:  push   $0x211
    0.00 :   9c149:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c14f:  nop
    0.00 :   9c150:  endbr64
    0.00 :   9c154:  push   $0x212
    0.00 :   9c159:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c15f:  nop
    0.00 :   9c160:  endbr64
    0.00 :   9c164:  push   $0x213
    0.00 :   9c169:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c16f:  nop
    0.00 :   9c170:  endbr64
    0.00 :   9c174:  push   $0x214
    0.00 :   9c179:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c17f:  nop
    0.00 :   9c180:  endbr64
    0.00 :   9c184:  push   $0x215
    0.00 :   9c189:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c18f:  nop
    0.00 :   9c190:  endbr64
    0.00 :   9c194:  push   $0x216
    0.00 :   9c199:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c19f:  nop
    0.00 :   9c1a0:  endbr64
    0.00 :   9c1a4:  push   $0x217
    0.00 :   9c1a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1af:  nop
    0.00 :   9c1b0:  endbr64
    0.00 :   9c1b4:  push   $0x218
    0.00 :   9c1b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1bf:  nop
    0.00 :   9c1c0:  endbr64
    0.00 :   9c1c4:  push   $0x219
    0.00 :   9c1c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1cf:  nop
    0.00 :   9c1d0:  endbr64
    0.00 :   9c1d4:  push   $0x21a
    0.00 :   9c1d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1df:  nop
    0.00 :   9c1e0:  endbr64
    0.00 :   9c1e4:  push   $0x21b
    0.00 :   9c1e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1ef:  nop
    0.00 :   9c1f0:  endbr64
    0.00 :   9c1f4:  push   $0x21c
    0.00 :   9c1f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c1ff:  nop
    0.00 :   9c200:  endbr64
    0.00 :   9c204:  push   $0x21d
    0.00 :   9c209:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c20f:  nop
    0.00 :   9c210:  endbr64
    0.00 :   9c214:  push   $0x21e
    0.00 :   9c219:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c21f:  nop
    0.00 :   9c220:  endbr64
    0.00 :   9c224:  push   $0x21f
    0.00 :   9c229:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c22f:  nop
    0.00 :   9c230:  endbr64
    0.00 :   9c234:  push   $0x220
    0.00 :   9c239:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c23f:  nop
    0.00 :   9c240:  endbr64
    0.00 :   9c244:  push   $0x221
    0.00 :   9c249:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c24f:  nop
    0.00 :   9c250:  endbr64
    0.00 :   9c254:  push   $0x222
    0.00 :   9c259:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c25f:  nop
    0.00 :   9c260:  endbr64
    0.00 :   9c264:  push   $0x223
    0.00 :   9c269:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c26f:  nop
    0.00 :   9c270:  endbr64
    0.00 :   9c274:  push   $0x224
    0.00 :   9c279:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c27f:  nop
    0.00 :   9c280:  endbr64
    0.00 :   9c284:  push   $0x225
    0.00 :   9c289:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c28f:  nop
    0.00 :   9c290:  endbr64
    0.00 :   9c294:  push   $0x226
    0.00 :   9c299:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c29f:  nop
    0.00 :   9c2a0:  endbr64
    0.00 :   9c2a4:  push   $0x227
    0.00 :   9c2a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2af:  nop
    0.00 :   9c2b0:  endbr64
    0.00 :   9c2b4:  push   $0x228
    0.00 :   9c2b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2bf:  nop
    0.00 :   9c2c0:  endbr64
    0.00 :   9c2c4:  push   $0x229
    0.00 :   9c2c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2cf:  nop
    0.00 :   9c2d0:  endbr64
    0.00 :   9c2d4:  push   $0x22a
    0.00 :   9c2d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2df:  nop
    0.00 :   9c2e0:  endbr64
    0.00 :   9c2e4:  push   $0x22b
    0.00 :   9c2e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2ef:  nop
    0.00 :   9c2f0:  endbr64
    0.00 :   9c2f4:  push   $0x22c
    0.00 :   9c2f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c2ff:  nop
    0.00 :   9c300:  endbr64
    0.00 :   9c304:  push   $0x22d
    0.00 :   9c309:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c30f:  nop
    0.00 :   9c310:  endbr64
    0.00 :   9c314:  push   $0x22e
    0.00 :   9c319:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c31f:  nop
    0.00 :   9c320:  endbr64
    0.00 :   9c324:  push   $0x22f
    0.00 :   9c329:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c32f:  nop
    0.00 :   9c330:  endbr64
    0.00 :   9c334:  push   $0x230
    0.00 :   9c339:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c33f:  nop
    0.00 :   9c340:  endbr64
    0.00 :   9c344:  push   $0x231
    0.00 :   9c349:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c34f:  nop
    0.00 :   9c350:  endbr64
    0.00 :   9c354:  push   $0x232
    0.00 :   9c359:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c35f:  nop
    0.00 :   9c360:  endbr64
    0.00 :   9c364:  push   $0x233
    0.00 :   9c369:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c36f:  nop
    0.00 :   9c370:  endbr64
    0.00 :   9c374:  push   $0x234
    0.00 :   9c379:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c37f:  nop
    0.00 :   9c380:  endbr64
    0.00 :   9c384:  push   $0x235
    0.00 :   9c389:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c38f:  nop
    0.00 :   9c390:  endbr64
    0.00 :   9c394:  push   $0x236
    0.00 :   9c399:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c39f:  nop
    0.00 :   9c3a0:  endbr64
    0.00 :   9c3a4:  push   $0x237
    0.00 :   9c3a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3af:  nop
    0.00 :   9c3b0:  endbr64
    0.00 :   9c3b4:  push   $0x238
    0.00 :   9c3b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3bf:  nop
    0.00 :   9c3c0:  endbr64
    0.00 :   9c3c4:  push   $0x239
    0.00 :   9c3c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3cf:  nop
    0.00 :   9c3d0:  endbr64
    0.00 :   9c3d4:  push   $0x23a
    0.00 :   9c3d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3df:  nop
    0.00 :   9c3e0:  endbr64
    0.00 :   9c3e4:  push   $0x23b
    0.00 :   9c3e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3ef:  nop
    0.00 :   9c3f0:  endbr64
    0.00 :   9c3f4:  push   $0x23c
    0.00 :   9c3f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c3ff:  nop
    0.00 :   9c400:  endbr64
    0.00 :   9c404:  push   $0x23d
    0.00 :   9c409:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c40f:  nop
    0.00 :   9c410:  endbr64
    0.00 :   9c414:  push   $0x23e
    0.00 :   9c419:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c41f:  nop
    0.00 :   9c420:  endbr64
    0.00 :   9c424:  push   $0x23f
    0.00 :   9c429:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c42f:  nop
    0.00 :   9c430:  endbr64
    0.00 :   9c434:  push   $0x240
    0.00 :   9c439:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c43f:  nop
    0.00 :   9c440:  endbr64
    0.00 :   9c444:  push   $0x241
    0.00 :   9c449:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c44f:  nop
    0.00 :   9c450:  endbr64
    0.00 :   9c454:  push   $0x242
    0.00 :   9c459:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c45f:  nop
    0.00 :   9c460:  endbr64
    0.00 :   9c464:  push   $0x243
    0.00 :   9c469:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c46f:  nop
    0.00 :   9c470:  endbr64
    0.00 :   9c474:  push   $0x244
    0.00 :   9c479:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c47f:  nop
    0.00 :   9c480:  endbr64
    0.00 :   9c484:  push   $0x245
    0.00 :   9c489:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c48f:  nop
    0.00 :   9c490:  endbr64
    0.00 :   9c494:  push   $0x246
    0.00 :   9c499:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c49f:  nop
    0.00 :   9c4a0:  endbr64
    0.00 :   9c4a4:  push   $0x247
    0.00 :   9c4a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4af:  nop
    0.00 :   9c4b0:  endbr64
    0.00 :   9c4b4:  push   $0x248
    0.00 :   9c4b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4bf:  nop
    0.00 :   9c4c0:  endbr64
    0.00 :   9c4c4:  push   $0x249
    0.00 :   9c4c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4cf:  nop
    0.00 :   9c4d0:  endbr64
    0.00 :   9c4d4:  push   $0x24a
    0.00 :   9c4d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4df:  nop
    0.00 :   9c4e0:  endbr64
    0.00 :   9c4e4:  push   $0x24b
    0.00 :   9c4e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4ef:  nop
    0.00 :   9c4f0:  endbr64
    0.00 :   9c4f4:  push   $0x24c
    0.00 :   9c4f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c4ff:  nop
    0.00 :   9c500:  endbr64
    0.00 :   9c504:  push   $0x24d
    0.00 :   9c509:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c50f:  nop
    0.00 :   9c510:  endbr64
    0.00 :   9c514:  push   $0x24e
    0.00 :   9c519:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c51f:  nop
    0.00 :   9c520:  endbr64
    0.00 :   9c524:  push   $0x24f
    0.00 :   9c529:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c52f:  nop
    0.00 :   9c530:  endbr64
    0.00 :   9c534:  push   $0x250
    0.00 :   9c539:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c53f:  nop
    0.00 :   9c540:  endbr64
    0.00 :   9c544:  push   $0x251
    0.00 :   9c549:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c54f:  nop
    0.00 :   9c550:  endbr64
    0.00 :   9c554:  push   $0x252
    0.00 :   9c559:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c55f:  nop
    0.00 :   9c560:  endbr64
    0.00 :   9c564:  push   $0x253
    0.00 :   9c569:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c56f:  nop
    0.00 :   9c570:  endbr64
    0.00 :   9c574:  push   $0x254
    0.00 :   9c579:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c57f:  nop
    0.00 :   9c580:  endbr64
    0.00 :   9c584:  push   $0x255
    0.00 :   9c589:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c58f:  nop
    0.00 :   9c590:  endbr64
    0.00 :   9c594:  push   $0x256
    0.00 :   9c599:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c59f:  nop
    0.00 :   9c5a0:  endbr64
    0.00 :   9c5a4:  push   $0x257
    0.00 :   9c5a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5af:  nop
    0.00 :   9c5b0:  endbr64
    0.00 :   9c5b4:  push   $0x258
    0.00 :   9c5b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5bf:  nop
    0.00 :   9c5c0:  endbr64
    0.00 :   9c5c4:  push   $0x259
    0.00 :   9c5c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5cf:  nop
    0.00 :   9c5d0:  endbr64
    0.00 :   9c5d4:  push   $0x25a
    0.00 :   9c5d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5df:  nop
    0.00 :   9c5e0:  endbr64
    0.00 :   9c5e4:  push   $0x25b
    0.00 :   9c5e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5ef:  nop
    0.00 :   9c5f0:  endbr64
    0.00 :   9c5f4:  push   $0x25c
    0.00 :   9c5f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c5ff:  nop
    0.00 :   9c600:  endbr64
    0.00 :   9c604:  push   $0x25d
    0.00 :   9c609:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c60f:  nop
    0.00 :   9c610:  endbr64
    0.00 :   9c614:  push   $0x25e
    0.00 :   9c619:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c61f:  nop
    0.00 :   9c620:  endbr64
    0.00 :   9c624:  push   $0x25f
    0.00 :   9c629:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c62f:  nop
    0.00 :   9c630:  endbr64
    0.00 :   9c634:  push   $0x260
    0.00 :   9c639:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c63f:  nop
    0.00 :   9c640:  endbr64
    0.00 :   9c644:  push   $0x261
    0.00 :   9c649:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c64f:  nop
    0.00 :   9c650:  endbr64
    0.00 :   9c654:  push   $0x262
    0.00 :   9c659:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c65f:  nop
    0.00 :   9c660:  endbr64
    0.00 :   9c664:  push   $0x263
    0.00 :   9c669:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c66f:  nop
    0.00 :   9c670:  endbr64
    0.00 :   9c674:  push   $0x264
    0.00 :   9c679:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c67f:  nop
    0.00 :   9c680:  endbr64
    0.00 :   9c684:  push   $0x265
    0.00 :   9c689:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c68f:  nop
    0.00 :   9c690:  endbr64
    0.00 :   9c694:  push   $0x266
    0.00 :   9c699:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c69f:  nop
    0.00 :   9c6a0:  endbr64
    0.00 :   9c6a4:  push   $0x267
    0.00 :   9c6a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6af:  nop
    0.00 :   9c6b0:  endbr64
    0.00 :   9c6b4:  push   $0x268
    0.00 :   9c6b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6bf:  nop
    0.00 :   9c6c0:  endbr64
    0.00 :   9c6c4:  push   $0x269
    0.00 :   9c6c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6cf:  nop
    0.00 :   9c6d0:  endbr64
    0.00 :   9c6d4:  push   $0x26a
    0.00 :   9c6d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6df:  nop
    0.00 :   9c6e0:  endbr64
    0.00 :   9c6e4:  push   $0x26b
    0.00 :   9c6e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6ef:  nop
    0.00 :   9c6f0:  endbr64
    0.00 :   9c6f4:  push   $0x26c
    0.00 :   9c6f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c6ff:  nop
    0.00 :   9c700:  endbr64
    0.00 :   9c704:  push   $0x26d
    0.00 :   9c709:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c70f:  nop
    0.00 :   9c710:  endbr64
    0.00 :   9c714:  push   $0x26e
    0.00 :   9c719:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c71f:  nop
    0.00 :   9c720:  endbr64
    0.00 :   9c724:  push   $0x26f
    0.00 :   9c729:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c72f:  nop
    0.00 :   9c730:  endbr64
    0.00 :   9c734:  push   $0x270
    0.00 :   9c739:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c73f:  nop
    0.00 :   9c740:  endbr64
    0.00 :   9c744:  push   $0x271
    0.00 :   9c749:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c74f:  nop
    0.00 :   9c750:  endbr64
    0.00 :   9c754:  push   $0x272
    0.00 :   9c759:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c75f:  nop
    0.00 :   9c760:  endbr64
    0.00 :   9c764:  push   $0x273
    0.00 :   9c769:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c76f:  nop
    0.00 :   9c770:  endbr64
    0.00 :   9c774:  push   $0x274
    0.00 :   9c779:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c77f:  nop
    0.00 :   9c780:  endbr64
    0.00 :   9c784:  push   $0x275
    0.00 :   9c789:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c78f:  nop
    0.00 :   9c790:  endbr64
    0.00 :   9c794:  push   $0x276
    0.00 :   9c799:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c79f:  nop
    0.00 :   9c7a0:  endbr64
    0.00 :   9c7a4:  push   $0x277
    0.00 :   9c7a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7af:  nop
    0.00 :   9c7b0:  endbr64
    0.00 :   9c7b4:  push   $0x278
    0.00 :   9c7b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7bf:  nop
    0.00 :   9c7c0:  endbr64
    0.00 :   9c7c4:  push   $0x279
    0.00 :   9c7c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7cf:  nop
    0.00 :   9c7d0:  endbr64
    0.00 :   9c7d4:  push   $0x27a
    0.00 :   9c7d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7df:  nop
    0.00 :   9c7e0:  endbr64
    0.00 :   9c7e4:  push   $0x27b
    0.00 :   9c7e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7ef:  nop
    0.00 :   9c7f0:  endbr64
    0.00 :   9c7f4:  push   $0x27c
    0.00 :   9c7f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c7ff:  nop
    0.00 :   9c800:  endbr64
    0.00 :   9c804:  push   $0x27d
    0.00 :   9c809:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c80f:  nop
    0.00 :   9c810:  endbr64
    0.00 :   9c814:  push   $0x27e
    0.00 :   9c819:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c81f:  nop
    0.00 :   9c820:  endbr64
    0.00 :   9c824:  push   $0x27f
    0.00 :   9c829:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c82f:  nop
    0.00 :   9c830:  endbr64
    0.00 :   9c834:  push   $0x280
    0.00 :   9c839:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c83f:  nop
    0.00 :   9c840:  endbr64
    0.00 :   9c844:  push   $0x281
    0.00 :   9c849:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c84f:  nop
    0.00 :   9c850:  endbr64
    0.00 :   9c854:  push   $0x282
    0.00 :   9c859:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c85f:  nop
    0.00 :   9c860:  endbr64
    0.00 :   9c864:  push   $0x283
    0.00 :   9c869:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c86f:  nop
    0.00 :   9c870:  endbr64
    0.00 :   9c874:  push   $0x284
    0.00 :   9c879:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c87f:  nop
    0.00 :   9c880:  endbr64
    0.00 :   9c884:  push   $0x285
    0.00 :   9c889:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c88f:  nop
    0.00 :   9c890:  endbr64
    0.00 :   9c894:  push   $0x286
    0.00 :   9c899:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c89f:  nop
    0.00 :   9c8a0:  endbr64
    0.00 :   9c8a4:  push   $0x287
    0.00 :   9c8a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8af:  nop
    0.00 :   9c8b0:  endbr64
    0.00 :   9c8b4:  push   $0x288
    0.00 :   9c8b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8bf:  nop
    0.00 :   9c8c0:  endbr64
    0.00 :   9c8c4:  push   $0x289
    0.00 :   9c8c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8cf:  nop
    0.00 :   9c8d0:  endbr64
    0.00 :   9c8d4:  push   $0x28a
    0.00 :   9c8d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8df:  nop
    0.00 :   9c8e0:  endbr64
    0.00 :   9c8e4:  push   $0x28b
    0.00 :   9c8e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8ef:  nop
    0.00 :   9c8f0:  endbr64
    0.00 :   9c8f4:  push   $0x28c
    0.00 :   9c8f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c8ff:  nop
    0.00 :   9c900:  endbr64
    0.00 :   9c904:  push   $0x28d
    0.00 :   9c909:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c90f:  nop
    0.00 :   9c910:  endbr64
    0.00 :   9c914:  push   $0x28e
    0.00 :   9c919:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c91f:  nop
    0.00 :   9c920:  endbr64
    0.00 :   9c924:  push   $0x28f
    0.00 :   9c929:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c92f:  nop
    0.00 :   9c930:  endbr64
    0.00 :   9c934:  push   $0x290
    0.00 :   9c939:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c93f:  nop
    0.00 :   9c940:  endbr64
    0.00 :   9c944:  push   $0x291
    0.00 :   9c949:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c94f:  nop
    0.00 :   9c950:  endbr64
    0.00 :   9c954:  push   $0x292
    0.00 :   9c959:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c95f:  nop
    0.00 :   9c960:  endbr64
    0.00 :   9c964:  push   $0x293
    0.00 :   9c969:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c96f:  nop
    0.00 :   9c970:  endbr64
    0.00 :   9c974:  push   $0x294
    0.00 :   9c979:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c97f:  nop
    0.00 :   9c980:  endbr64
    0.00 :   9c984:  push   $0x295
    0.00 :   9c989:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c98f:  nop
    0.00 :   9c990:  endbr64
    0.00 :   9c994:  push   $0x296
    0.00 :   9c999:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c99f:  nop
    0.00 :   9c9a0:  endbr64
    0.00 :   9c9a4:  push   $0x297
    0.00 :   9c9a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9af:  nop
    0.00 :   9c9b0:  endbr64
    0.00 :   9c9b4:  push   $0x298
    0.00 :   9c9b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9bf:  nop
    0.00 :   9c9c0:  endbr64
    0.00 :   9c9c4:  push   $0x299
    0.00 :   9c9c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9cf:  nop
    0.00 :   9c9d0:  endbr64
    0.00 :   9c9d4:  push   $0x29a
    0.00 :   9c9d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9df:  nop
    0.00 :   9c9e0:  endbr64
    0.00 :   9c9e4:  push   $0x29b
    0.00 :   9c9e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9ef:  nop
    0.00 :   9c9f0:  endbr64
    0.00 :   9c9f4:  push   $0x29c
    0.00 :   9c9f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9c9ff:  nop
    0.00 :   9ca00:  endbr64
    0.00 :   9ca04:  push   $0x29d
    0.00 :   9ca09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca0f:  nop
    0.00 :   9ca10:  endbr64
    0.00 :   9ca14:  push   $0x29e
    0.00 :   9ca19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca1f:  nop
    0.00 :   9ca20:  endbr64
    0.00 :   9ca24:  push   $0x29f
    0.00 :   9ca29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca2f:  nop
    0.00 :   9ca30:  endbr64
    0.00 :   9ca34:  push   $0x2a0
    0.00 :   9ca39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca3f:  nop
    0.00 :   9ca40:  endbr64
    0.00 :   9ca44:  push   $0x2a1
    0.00 :   9ca49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca4f:  nop
    0.00 :   9ca50:  endbr64
    0.00 :   9ca54:  push   $0x2a2
    0.00 :   9ca59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca5f:  nop
    0.00 :   9ca60:  endbr64
    0.00 :   9ca64:  push   $0x2a3
    0.00 :   9ca69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca6f:  nop
    0.00 :   9ca70:  endbr64
    0.00 :   9ca74:  push   $0x2a4
    0.00 :   9ca79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca7f:  nop
    0.00 :   9ca80:  endbr64
    0.00 :   9ca84:  push   $0x2a5
    0.00 :   9ca89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca8f:  nop
    0.00 :   9ca90:  endbr64
    0.00 :   9ca94:  push   $0x2a6
    0.00 :   9ca99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ca9f:  nop
    0.00 :   9caa0:  endbr64
    0.00 :   9caa4:  push   $0x2a7
    0.00 :   9caa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9caaf:  nop
    0.00 :   9cab0:  endbr64
    0.00 :   9cab4:  push   $0x2a8
    0.00 :   9cab9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cabf:  nop
    0.00 :   9cac0:  endbr64
    0.00 :   9cac4:  push   $0x2a9
    0.00 :   9cac9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cacf:  nop
    0.00 :   9cad0:  endbr64
    0.00 :   9cad4:  push   $0x2aa
    0.00 :   9cad9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cadf:  nop
    0.00 :   9cae0:  endbr64
    0.00 :   9cae4:  push   $0x2ab
    0.00 :   9cae9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9caef:  nop
    0.00 :   9caf0:  endbr64
    0.00 :   9caf4:  push   $0x2ac
    0.00 :   9caf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9caff:  nop
    0.00 :   9cb00:  endbr64
    0.00 :   9cb04:  push   $0x2ad
    0.00 :   9cb09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb0f:  nop
    0.00 :   9cb10:  endbr64
    0.00 :   9cb14:  push   $0x2ae
    0.00 :   9cb19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb1f:  nop
    0.00 :   9cb20:  endbr64
    0.00 :   9cb24:  push   $0x2af
    0.00 :   9cb29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb2f:  nop
    0.00 :   9cb30:  endbr64
    0.00 :   9cb34:  push   $0x2b0
    0.00 :   9cb39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb3f:  nop
    0.00 :   9cb40:  endbr64
    0.00 :   9cb44:  push   $0x2b1
    0.00 :   9cb49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb4f:  nop
    0.00 :   9cb50:  endbr64
    0.00 :   9cb54:  push   $0x2b2
    0.00 :   9cb59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb5f:  nop
    0.00 :   9cb60:  endbr64
    0.00 :   9cb64:  push   $0x2b3
    0.00 :   9cb69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb6f:  nop
    0.00 :   9cb70:  endbr64
    0.00 :   9cb74:  push   $0x2b4
    0.00 :   9cb79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb7f:  nop
    0.00 :   9cb80:  endbr64
    0.00 :   9cb84:  push   $0x2b5
    0.00 :   9cb89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb8f:  nop
    0.00 :   9cb90:  endbr64
    0.00 :   9cb94:  push   $0x2b6
    0.00 :   9cb99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cb9f:  nop
    0.00 :   9cba0:  endbr64
    0.00 :   9cba4:  push   $0x2b7
    0.00 :   9cba9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbaf:  nop
    0.00 :   9cbb0:  endbr64
    0.00 :   9cbb4:  push   $0x2b8
    0.00 :   9cbb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbbf:  nop
    0.00 :   9cbc0:  endbr64
    0.00 :   9cbc4:  push   $0x2b9
    0.00 :   9cbc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbcf:  nop
    0.00 :   9cbd0:  endbr64
    0.00 :   9cbd4:  push   $0x2ba
    0.00 :   9cbd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbdf:  nop
    0.00 :   9cbe0:  endbr64
    0.00 :   9cbe4:  push   $0x2bb
    0.00 :   9cbe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbef:  nop
    0.00 :   9cbf0:  endbr64
    0.00 :   9cbf4:  push   $0x2bc
    0.00 :   9cbf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cbff:  nop
    0.00 :   9cc00:  endbr64
    0.00 :   9cc04:  push   $0x2bd
    0.00 :   9cc09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc0f:  nop
    0.00 :   9cc10:  endbr64
    0.00 :   9cc14:  push   $0x2be
    0.00 :   9cc19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc1f:  nop
    0.00 :   9cc20:  endbr64
    0.00 :   9cc24:  push   $0x2bf
    0.00 :   9cc29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc2f:  nop
    0.00 :   9cc30:  endbr64
    0.00 :   9cc34:  push   $0x2c0
    0.00 :   9cc39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc3f:  nop
    0.00 :   9cc40:  endbr64
    0.00 :   9cc44:  push   $0x2c1
    0.00 :   9cc49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc4f:  nop
    0.00 :   9cc50:  endbr64
    0.00 :   9cc54:  push   $0x2c2
    0.00 :   9cc59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc5f:  nop
    0.00 :   9cc60:  endbr64
    0.00 :   9cc64:  push   $0x2c3
    0.00 :   9cc69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc6f:  nop
    0.00 :   9cc70:  endbr64
    0.00 :   9cc74:  push   $0x2c4
    0.00 :   9cc79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc7f:  nop
    0.00 :   9cc80:  endbr64
    0.00 :   9cc84:  push   $0x2c5
    0.00 :   9cc89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc8f:  nop
    0.00 :   9cc90:  endbr64
    0.00 :   9cc94:  push   $0x2c6
    0.00 :   9cc99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cc9f:  nop
    0.00 :   9cca0:  endbr64
    0.00 :   9cca4:  push   $0x2c7
    0.00 :   9cca9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ccaf:  nop
    0.00 :   9ccb0:  endbr64
    0.00 :   9ccb4:  push   $0x2c8
    0.00 :   9ccb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ccbf:  nop
    0.00 :   9ccc0:  endbr64
    0.00 :   9ccc4:  push   $0x2c9
    0.00 :   9ccc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cccf:  nop
    0.00 :   9ccd0:  endbr64
    0.00 :   9ccd4:  push   $0x2ca
    0.00 :   9ccd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ccdf:  nop
    0.00 :   9cce0:  endbr64
    0.00 :   9cce4:  push   $0x2cb
    0.00 :   9cce9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ccef:  nop
    0.00 :   9ccf0:  endbr64
    0.00 :   9ccf4:  push   $0x2cc
    0.00 :   9ccf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ccff:  nop
    0.00 :   9cd00:  endbr64
    0.00 :   9cd04:  push   $0x2cd
    0.00 :   9cd09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd0f:  nop
    0.00 :   9cd10:  endbr64
    0.00 :   9cd14:  push   $0x2ce
    0.00 :   9cd19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd1f:  nop
    0.00 :   9cd20:  endbr64
    0.00 :   9cd24:  push   $0x2cf
    0.00 :   9cd29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd2f:  nop
    0.00 :   9cd30:  endbr64
    0.00 :   9cd34:  push   $0x2d0
    0.00 :   9cd39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd3f:  nop
    0.00 :   9cd40:  endbr64
    0.00 :   9cd44:  push   $0x2d1
    0.00 :   9cd49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd4f:  nop
    0.00 :   9cd50:  endbr64
    0.00 :   9cd54:  push   $0x2d2
    0.00 :   9cd59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd5f:  nop
    0.00 :   9cd60:  endbr64
    0.00 :   9cd64:  push   $0x2d3
    0.00 :   9cd69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd6f:  nop
    0.00 :   9cd70:  endbr64
    0.00 :   9cd74:  push   $0x2d4
    0.00 :   9cd79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd7f:  nop
    0.00 :   9cd80:  endbr64
    0.00 :   9cd84:  push   $0x2d5
    0.00 :   9cd89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd8f:  nop
    0.00 :   9cd90:  endbr64
    0.00 :   9cd94:  push   $0x2d6
    0.00 :   9cd99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cd9f:  nop
    0.00 :   9cda0:  endbr64
    0.00 :   9cda4:  push   $0x2d7
    0.00 :   9cda9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cdaf:  nop
    0.00 :   9cdb0:  endbr64
    0.00 :   9cdb4:  push   $0x2d8
    0.00 :   9cdb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cdbf:  nop
    0.00 :   9cdc0:  endbr64
    0.00 :   9cdc4:  push   $0x2d9
    0.00 :   9cdc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cdcf:  nop
    0.00 :   9cdd0:  endbr64
    0.00 :   9cdd4:  push   $0x2da
    0.00 :   9cdd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cddf:  nop
    0.00 :   9cde0:  endbr64
    0.00 :   9cde4:  push   $0x2db
    0.00 :   9cde9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cdef:  nop
    0.00 :   9cdf0:  endbr64
    0.00 :   9cdf4:  push   $0x2dc
    0.00 :   9cdf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cdff:  nop
    0.00 :   9ce00:  endbr64
    0.00 :   9ce04:  push   $0x2dd
    0.00 :   9ce09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce0f:  nop
    0.00 :   9ce10:  endbr64
    0.00 :   9ce14:  push   $0x2de
    0.00 :   9ce19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce1f:  nop
    0.00 :   9ce20:  endbr64
    0.00 :   9ce24:  push   $0x2df
    0.00 :   9ce29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce2f:  nop
    0.00 :   9ce30:  endbr64
    0.00 :   9ce34:  push   $0x2e0
    0.00 :   9ce39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce3f:  nop
    0.00 :   9ce40:  endbr64
    0.00 :   9ce44:  push   $0x2e1
    0.00 :   9ce49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce4f:  nop
    0.00 :   9ce50:  endbr64
    0.00 :   9ce54:  push   $0x2e2
    0.00 :   9ce59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce5f:  nop
    0.00 :   9ce60:  endbr64
    0.00 :   9ce64:  push   $0x2e3
    0.00 :   9ce69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce6f:  nop
    0.00 :   9ce70:  endbr64
    0.00 :   9ce74:  push   $0x2e4
    0.00 :   9ce79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce7f:  nop
    0.00 :   9ce80:  endbr64
    0.00 :   9ce84:  push   $0x2e5
    0.00 :   9ce89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce8f:  nop
    0.00 :   9ce90:  endbr64
    0.00 :   9ce94:  push   $0x2e6
    0.00 :   9ce99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ce9f:  nop
    0.00 :   9cea0:  endbr64
    0.00 :   9cea4:  push   $0x2e7
    0.00 :   9cea9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ceaf:  nop
    0.00 :   9ceb0:  endbr64
    0.00 :   9ceb4:  push   $0x2e8
    0.00 :   9ceb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cebf:  nop
    0.00 :   9cec0:  endbr64
    0.00 :   9cec4:  push   $0x2e9
    0.00 :   9cec9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cecf:  nop
    0.00 :   9ced0:  endbr64
    0.00 :   9ced4:  push   $0x2ea
    0.00 :   9ced9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cedf:  nop
    0.00 :   9cee0:  endbr64
    0.00 :   9cee4:  push   $0x2eb
    0.00 :   9cee9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ceef:  nop
    0.00 :   9cef0:  endbr64
    0.00 :   9cef4:  push   $0x2ec
    0.00 :   9cef9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ceff:  nop
    0.00 :   9cf00:  endbr64
    0.00 :   9cf04:  push   $0x2ed
    0.00 :   9cf09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf0f:  nop
    0.00 :   9cf10:  endbr64
    0.00 :   9cf14:  push   $0x2ee
    0.00 :   9cf19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf1f:  nop
    0.00 :   9cf20:  endbr64
    0.00 :   9cf24:  push   $0x2ef
    0.00 :   9cf29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf2f:  nop
    0.00 :   9cf30:  endbr64
    0.00 :   9cf34:  push   $0x2f0
    0.00 :   9cf39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf3f:  nop
    0.00 :   9cf40:  endbr64
    0.00 :   9cf44:  push   $0x2f1
    0.00 :   9cf49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf4f:  nop
    0.00 :   9cf50:  endbr64
    0.00 :   9cf54:  push   $0x2f2
    0.00 :   9cf59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf5f:  nop
    0.00 :   9cf60:  endbr64
    0.00 :   9cf64:  push   $0x2f3
    0.00 :   9cf69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf6f:  nop
    0.00 :   9cf70:  endbr64
    0.00 :   9cf74:  push   $0x2f4
    0.00 :   9cf79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf7f:  nop
    0.00 :   9cf80:  endbr64
    0.00 :   9cf84:  push   $0x2f5
    0.00 :   9cf89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf8f:  nop
    0.00 :   9cf90:  endbr64
    0.00 :   9cf94:  push   $0x2f6
    0.00 :   9cf99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cf9f:  nop
    0.00 :   9cfa0:  endbr64
    0.00 :   9cfa4:  push   $0x2f7
    0.00 :   9cfa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfaf:  nop
    0.00 :   9cfb0:  endbr64
    0.00 :   9cfb4:  push   $0x2f8
    0.00 :   9cfb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfbf:  nop
    0.00 :   9cfc0:  endbr64
    0.00 :   9cfc4:  push   $0x2f9
    0.00 :   9cfc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfcf:  nop
    0.00 :   9cfd0:  endbr64
    0.00 :   9cfd4:  push   $0x2fa
    0.00 :   9cfd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfdf:  nop
    0.00 :   9cfe0:  endbr64
    0.00 :   9cfe4:  push   $0x2fb
    0.00 :   9cfe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfef:  nop
    0.00 :   9cff0:  endbr64
    0.00 :   9cff4:  push   $0x2fc
    0.00 :   9cff9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9cfff:  nop
    0.00 :   9d000:  endbr64
    0.00 :   9d004:  push   $0x2fd
    0.00 :   9d009:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d00f:  nop
    0.00 :   9d010:  endbr64
    0.00 :   9d014:  push   $0x2fe
    0.00 :   9d019:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d01f:  nop
    0.00 :   9d020:  endbr64
    0.00 :   9d024:  push   $0x2ff
    0.00 :   9d029:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d02f:  nop
    0.00 :   9d030:  endbr64
    0.00 :   9d034:  push   $0x300
    0.00 :   9d039:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d03f:  nop
    0.00 :   9d040:  endbr64
    0.00 :   9d044:  push   $0x301
    0.00 :   9d049:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d04f:  nop
    0.00 :   9d050:  endbr64
    0.00 :   9d054:  push   $0x302
    0.00 :   9d059:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d05f:  nop
    0.00 :   9d060:  endbr64
    0.00 :   9d064:  push   $0x303
    0.00 :   9d069:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d06f:  nop
    0.00 :   9d070:  endbr64
    0.00 :   9d074:  push   $0x304
    0.00 :   9d079:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d07f:  nop
    0.00 :   9d080:  endbr64
    0.00 :   9d084:  push   $0x305
    0.00 :   9d089:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d08f:  nop
    0.00 :   9d090:  endbr64
    0.00 :   9d094:  push   $0x306
    0.00 :   9d099:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d09f:  nop
    0.00 :   9d0a0:  endbr64
    0.00 :   9d0a4:  push   $0x307
    0.00 :   9d0a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0af:  nop
    0.00 :   9d0b0:  endbr64
    0.00 :   9d0b4:  push   $0x308
    0.00 :   9d0b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0bf:  nop
    0.00 :   9d0c0:  endbr64
    0.00 :   9d0c4:  push   $0x309
    0.00 :   9d0c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0cf:  nop
    0.00 :   9d0d0:  endbr64
    0.00 :   9d0d4:  push   $0x30a
    0.00 :   9d0d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0df:  nop
    0.00 :   9d0e0:  endbr64
    0.00 :   9d0e4:  push   $0x30b
    0.00 :   9d0e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0ef:  nop
    0.00 :   9d0f0:  endbr64
    0.00 :   9d0f4:  push   $0x30c
    0.00 :   9d0f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d0ff:  nop
    0.00 :   9d100:  endbr64
    0.00 :   9d104:  push   $0x30d
    0.00 :   9d109:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d10f:  nop
    0.00 :   9d110:  endbr64
    0.00 :   9d114:  push   $0x30e
    0.00 :   9d119:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d11f:  nop
    0.00 :   9d120:  endbr64
    0.00 :   9d124:  push   $0x30f
    0.00 :   9d129:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d12f:  nop
    0.00 :   9d130:  endbr64
    0.00 :   9d134:  push   $0x310
    0.00 :   9d139:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d13f:  nop
    0.00 :   9d140:  endbr64
    0.00 :   9d144:  push   $0x311
    0.00 :   9d149:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d14f:  nop
    0.00 :   9d150:  endbr64
    0.00 :   9d154:  push   $0x312
    0.00 :   9d159:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d15f:  nop
    0.00 :   9d160:  endbr64
    0.00 :   9d164:  push   $0x313
    0.00 :   9d169:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d16f:  nop
    0.00 :   9d170:  endbr64
    0.00 :   9d174:  push   $0x314
    0.00 :   9d179:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d17f:  nop
    0.00 :   9d180:  endbr64
    0.00 :   9d184:  push   $0x315
    0.00 :   9d189:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d18f:  nop
    0.00 :   9d190:  endbr64
    0.00 :   9d194:  push   $0x316
    0.00 :   9d199:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d19f:  nop
    0.00 :   9d1a0:  endbr64
    0.00 :   9d1a4:  push   $0x317
    0.00 :   9d1a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1af:  nop
    0.00 :   9d1b0:  endbr64
    0.00 :   9d1b4:  push   $0x318
    0.00 :   9d1b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1bf:  nop
    0.00 :   9d1c0:  endbr64
    0.00 :   9d1c4:  push   $0x319
    0.00 :   9d1c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1cf:  nop
    0.00 :   9d1d0:  endbr64
    0.00 :   9d1d4:  push   $0x31a
    0.00 :   9d1d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1df:  nop
    0.00 :   9d1e0:  endbr64
    0.00 :   9d1e4:  push   $0x31b
    0.00 :   9d1e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1ef:  nop
    0.00 :   9d1f0:  endbr64
    0.00 :   9d1f4:  push   $0x31c
    0.00 :   9d1f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d1ff:  nop
    0.00 :   9d200:  endbr64
    0.00 :   9d204:  push   $0x31d
    0.00 :   9d209:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d20f:  nop
    0.00 :   9d210:  endbr64
    0.00 :   9d214:  push   $0x31e
    0.00 :   9d219:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d21f:  nop
    0.00 :   9d220:  endbr64
    0.00 :   9d224:  push   $0x31f
    0.00 :   9d229:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d22f:  nop
    0.00 :   9d230:  endbr64
    0.00 :   9d234:  push   $0x320
    0.00 :   9d239:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d23f:  nop
    0.00 :   9d240:  endbr64
    0.00 :   9d244:  push   $0x321
    0.00 :   9d249:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d24f:  nop
    0.00 :   9d250:  endbr64
    0.00 :   9d254:  push   $0x322
    0.00 :   9d259:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d25f:  nop
    0.00 :   9d260:  endbr64
    0.00 :   9d264:  push   $0x323
    0.00 :   9d269:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d26f:  nop
    0.00 :   9d270:  endbr64
    0.00 :   9d274:  push   $0x324
    0.00 :   9d279:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d27f:  nop
    0.00 :   9d280:  endbr64
    0.00 :   9d284:  push   $0x325
    0.00 :   9d289:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d28f:  nop
    0.00 :   9d290:  endbr64
    0.00 :   9d294:  push   $0x326
    0.00 :   9d299:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d29f:  nop
    0.00 :   9d2a0:  endbr64
    0.00 :   9d2a4:  push   $0x327
    0.00 :   9d2a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2af:  nop
    0.00 :   9d2b0:  endbr64
    0.00 :   9d2b4:  push   $0x328
    0.00 :   9d2b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2bf:  nop
    0.00 :   9d2c0:  endbr64
    0.00 :   9d2c4:  push   $0x329
    0.00 :   9d2c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2cf:  nop
    0.00 :   9d2d0:  endbr64
    0.00 :   9d2d4:  push   $0x32a
    0.00 :   9d2d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2df:  nop
    0.00 :   9d2e0:  endbr64
    0.00 :   9d2e4:  push   $0x32b
    0.00 :   9d2e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2ef:  nop
    0.00 :   9d2f0:  endbr64
    0.00 :   9d2f4:  push   $0x32c
    0.00 :   9d2f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d2ff:  nop
    0.00 :   9d300:  endbr64
    0.00 :   9d304:  push   $0x32d
    0.00 :   9d309:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d30f:  nop
    0.00 :   9d310:  endbr64
    0.00 :   9d314:  push   $0x32e
    0.00 :   9d319:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d31f:  nop
    0.00 :   9d320:  endbr64
    0.00 :   9d324:  push   $0x32f
    0.00 :   9d329:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d32f:  nop
    0.00 :   9d330:  endbr64
    0.00 :   9d334:  push   $0x330
    0.00 :   9d339:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d33f:  nop
    0.00 :   9d340:  endbr64
    0.00 :   9d344:  push   $0x331
    0.00 :   9d349:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d34f:  nop
    0.00 :   9d350:  endbr64
    0.00 :   9d354:  push   $0x332
    0.00 :   9d359:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d35f:  nop
    0.00 :   9d360:  endbr64
    0.00 :   9d364:  push   $0x333
    0.00 :   9d369:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d36f:  nop
    0.00 :   9d370:  endbr64
    0.00 :   9d374:  push   $0x334
    0.00 :   9d379:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d37f:  nop
    0.00 :   9d380:  endbr64
    0.00 :   9d384:  push   $0x335
    0.00 :   9d389:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d38f:  nop
    0.00 :   9d390:  endbr64
    0.00 :   9d394:  push   $0x336
    0.00 :   9d399:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d39f:  nop
    0.00 :   9d3a0:  endbr64
    0.00 :   9d3a4:  push   $0x337
    0.00 :   9d3a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3af:  nop
    0.00 :   9d3b0:  endbr64
    0.00 :   9d3b4:  push   $0x338
    0.00 :   9d3b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3bf:  nop
    0.00 :   9d3c0:  endbr64
    0.00 :   9d3c4:  push   $0x339
    0.00 :   9d3c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3cf:  nop
    0.00 :   9d3d0:  endbr64
    0.00 :   9d3d4:  push   $0x33a
    0.00 :   9d3d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3df:  nop
    0.00 :   9d3e0:  endbr64
    0.00 :   9d3e4:  push   $0x33b
    0.00 :   9d3e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3ef:  nop
    0.00 :   9d3f0:  endbr64
    0.00 :   9d3f4:  push   $0x33c
    0.00 :   9d3f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d3ff:  nop
    0.00 :   9d400:  endbr64
    0.00 :   9d404:  push   $0x33d
    0.00 :   9d409:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d40f:  nop
    0.00 :   9d410:  endbr64
    0.00 :   9d414:  push   $0x33e
    0.00 :   9d419:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d41f:  nop
    0.00 :   9d420:  endbr64
    0.00 :   9d424:  push   $0x33f
    0.00 :   9d429:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d42f:  nop
    0.00 :   9d430:  endbr64
    0.00 :   9d434:  push   $0x340
    0.00 :   9d439:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d43f:  nop
    0.00 :   9d440:  endbr64
    0.00 :   9d444:  push   $0x341
    0.00 :   9d449:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d44f:  nop
    0.00 :   9d450:  endbr64
    0.00 :   9d454:  push   $0x342
    0.00 :   9d459:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d45f:  nop
    0.00 :   9d460:  endbr64
    0.00 :   9d464:  push   $0x343
    0.00 :   9d469:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d46f:  nop
    0.00 :   9d470:  endbr64
    0.00 :   9d474:  push   $0x344
    0.00 :   9d479:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d47f:  nop
    0.00 :   9d480:  endbr64
    0.00 :   9d484:  push   $0x345
    0.00 :   9d489:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d48f:  nop
    0.00 :   9d490:  endbr64
    0.00 :   9d494:  push   $0x346
    0.00 :   9d499:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d49f:  nop
    0.00 :   9d4a0:  endbr64
    0.00 :   9d4a4:  push   $0x347
    0.00 :   9d4a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4af:  nop
    0.00 :   9d4b0:  endbr64
    0.00 :   9d4b4:  push   $0x348
    0.00 :   9d4b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4bf:  nop
    0.00 :   9d4c0:  endbr64
    0.00 :   9d4c4:  push   $0x349
    0.00 :   9d4c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4cf:  nop
    0.00 :   9d4d0:  endbr64
    0.00 :   9d4d4:  push   $0x34a
    0.00 :   9d4d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4df:  nop
    0.00 :   9d4e0:  endbr64
    0.00 :   9d4e4:  push   $0x34b
    0.00 :   9d4e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4ef:  nop
    0.00 :   9d4f0:  endbr64
    0.00 :   9d4f4:  push   $0x34c
    0.00 :   9d4f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d4ff:  nop
    0.00 :   9d500:  endbr64
    0.00 :   9d504:  push   $0x34d
    0.00 :   9d509:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d50f:  nop
    0.00 :   9d510:  endbr64
    0.00 :   9d514:  push   $0x34e
    0.00 :   9d519:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d51f:  nop
    0.00 :   9d520:  endbr64
    0.00 :   9d524:  push   $0x34f
    0.00 :   9d529:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d52f:  nop
    0.00 :   9d530:  endbr64
    0.00 :   9d534:  push   $0x350
    0.00 :   9d539:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d53f:  nop
    0.00 :   9d540:  endbr64
    0.00 :   9d544:  push   $0x351
    0.00 :   9d549:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d54f:  nop
    0.00 :   9d550:  endbr64
    0.00 :   9d554:  push   $0x352
    0.00 :   9d559:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d55f:  nop
    0.00 :   9d560:  endbr64
    0.00 :   9d564:  push   $0x353
    0.00 :   9d569:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d56f:  nop
    0.00 :   9d570:  endbr64
    0.00 :   9d574:  push   $0x354
    0.00 :   9d579:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d57f:  nop
    0.00 :   9d580:  endbr64
    0.00 :   9d584:  push   $0x355
    0.00 :   9d589:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d58f:  nop
    0.00 :   9d590:  endbr64
    0.00 :   9d594:  push   $0x356
    0.00 :   9d599:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d59f:  nop
    0.00 :   9d5a0:  endbr64
    0.00 :   9d5a4:  push   $0x357
    0.00 :   9d5a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5af:  nop
    0.00 :   9d5b0:  endbr64
    0.00 :   9d5b4:  push   $0x358
    0.00 :   9d5b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5bf:  nop
    0.00 :   9d5c0:  endbr64
    0.00 :   9d5c4:  push   $0x359
    0.00 :   9d5c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5cf:  nop
    0.00 :   9d5d0:  endbr64
    0.00 :   9d5d4:  push   $0x35a
    0.00 :   9d5d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5df:  nop
    0.00 :   9d5e0:  endbr64
    0.00 :   9d5e4:  push   $0x35b
    0.00 :   9d5e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5ef:  nop
    0.00 :   9d5f0:  endbr64
    0.00 :   9d5f4:  push   $0x35c
    0.00 :   9d5f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d5ff:  nop
    0.00 :   9d600:  endbr64
    0.00 :   9d604:  push   $0x35d
    0.00 :   9d609:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d60f:  nop
    0.00 :   9d610:  endbr64
    0.00 :   9d614:  push   $0x35e
    0.00 :   9d619:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d61f:  nop
    0.00 :   9d620:  endbr64
    0.00 :   9d624:  push   $0x35f
    0.00 :   9d629:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d62f:  nop
    0.00 :   9d630:  endbr64
    0.00 :   9d634:  push   $0x360
    0.00 :   9d639:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d63f:  nop
    0.00 :   9d640:  endbr64
    0.00 :   9d644:  push   $0x361
    0.00 :   9d649:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d64f:  nop
    0.00 :   9d650:  endbr64
    0.00 :   9d654:  push   $0x362
    0.00 :   9d659:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d65f:  nop
    0.00 :   9d660:  endbr64
    0.00 :   9d664:  push   $0x363
    0.00 :   9d669:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d66f:  nop
    0.00 :   9d670:  endbr64
    0.00 :   9d674:  push   $0x364
    0.00 :   9d679:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d67f:  nop
    0.00 :   9d680:  endbr64
    0.00 :   9d684:  push   $0x365
    0.00 :   9d689:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d68f:  nop
    0.00 :   9d690:  endbr64
    0.00 :   9d694:  push   $0x366
    0.00 :   9d699:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d69f:  nop
    0.00 :   9d6a0:  endbr64
    0.00 :   9d6a4:  push   $0x367
    0.00 :   9d6a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6af:  nop
    0.00 :   9d6b0:  endbr64
    0.00 :   9d6b4:  push   $0x368
    0.00 :   9d6b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6bf:  nop
    0.00 :   9d6c0:  endbr64
    0.00 :   9d6c4:  push   $0x369
    0.00 :   9d6c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6cf:  nop
    0.00 :   9d6d0:  endbr64
    0.00 :   9d6d4:  push   $0x36a
    0.00 :   9d6d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6df:  nop
    0.00 :   9d6e0:  endbr64
    0.00 :   9d6e4:  push   $0x36b
    0.00 :   9d6e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6ef:  nop
    0.00 :   9d6f0:  endbr64
    0.00 :   9d6f4:  push   $0x36c
    0.00 :   9d6f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d6ff:  nop
    0.00 :   9d700:  endbr64
    0.00 :   9d704:  push   $0x36d
    0.00 :   9d709:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d70f:  nop
    0.00 :   9d710:  endbr64
    0.00 :   9d714:  push   $0x36e
    0.00 :   9d719:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d71f:  nop
    0.00 :   9d720:  endbr64
    0.00 :   9d724:  push   $0x36f
    0.00 :   9d729:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d72f:  nop
    0.00 :   9d730:  endbr64
    0.00 :   9d734:  push   $0x370
    0.00 :   9d739:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d73f:  nop
    0.00 :   9d740:  endbr64
    0.00 :   9d744:  push   $0x371
    0.00 :   9d749:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d74f:  nop
    0.00 :   9d750:  endbr64
    0.00 :   9d754:  push   $0x372
    0.00 :   9d759:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d75f:  nop
    0.00 :   9d760:  endbr64
    0.00 :   9d764:  push   $0x373
    0.00 :   9d769:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d76f:  nop
    0.00 :   9d770:  endbr64
    0.00 :   9d774:  push   $0x374
    0.00 :   9d779:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d77f:  nop
    0.00 :   9d780:  endbr64
    0.00 :   9d784:  push   $0x375
    0.00 :   9d789:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d78f:  nop
    0.00 :   9d790:  endbr64
    0.00 :   9d794:  push   $0x376
    0.00 :   9d799:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d79f:  nop
    0.00 :   9d7a0:  endbr64
    0.00 :   9d7a4:  push   $0x377
    0.00 :   9d7a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7af:  nop
    0.00 :   9d7b0:  endbr64
    0.00 :   9d7b4:  push   $0x378
    0.00 :   9d7b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7bf:  nop
    0.00 :   9d7c0:  endbr64
    0.00 :   9d7c4:  push   $0x379
    0.00 :   9d7c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7cf:  nop
    0.00 :   9d7d0:  endbr64
    0.00 :   9d7d4:  push   $0x37a
    0.00 :   9d7d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7df:  nop
    0.00 :   9d7e0:  endbr64
    0.00 :   9d7e4:  push   $0x37b
    0.00 :   9d7e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7ef:  nop
    0.00 :   9d7f0:  endbr64
    0.00 :   9d7f4:  push   $0x37c
    0.00 :   9d7f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d7ff:  nop
    0.00 :   9d800:  endbr64
    0.00 :   9d804:  push   $0x37d
    0.00 :   9d809:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d80f:  nop
    0.00 :   9d810:  endbr64
    0.00 :   9d814:  push   $0x37e
    0.00 :   9d819:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d81f:  nop
    0.00 :   9d820:  endbr64
    0.00 :   9d824:  push   $0x37f
    0.00 :   9d829:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d82f:  nop
    0.00 :   9d830:  endbr64
    0.00 :   9d834:  push   $0x380
    0.00 :   9d839:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d83f:  nop
    0.00 :   9d840:  endbr64
    0.00 :   9d844:  push   $0x381
    0.00 :   9d849:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d84f:  nop
    0.00 :   9d850:  endbr64
    0.00 :   9d854:  push   $0x382
    0.00 :   9d859:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d85f:  nop
    0.00 :   9d860:  endbr64
    0.00 :   9d864:  push   $0x383
    0.00 :   9d869:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d86f:  nop
    0.00 :   9d870:  endbr64
    0.00 :   9d874:  push   $0x384
    0.00 :   9d879:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d87f:  nop
    0.00 :   9d880:  endbr64
    0.00 :   9d884:  push   $0x385
    0.00 :   9d889:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d88f:  nop
    0.00 :   9d890:  endbr64
    0.00 :   9d894:  push   $0x386
    0.00 :   9d899:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d89f:  nop
    0.00 :   9d8a0:  endbr64
    0.00 :   9d8a4:  push   $0x387
    0.00 :   9d8a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8af:  nop
    0.00 :   9d8b0:  endbr64
    0.00 :   9d8b4:  push   $0x388
    0.00 :   9d8b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8bf:  nop
    0.00 :   9d8c0:  endbr64
    0.00 :   9d8c4:  push   $0x389
    0.00 :   9d8c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8cf:  nop
    0.00 :   9d8d0:  endbr64
    0.00 :   9d8d4:  push   $0x38a
    0.00 :   9d8d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8df:  nop
    0.00 :   9d8e0:  endbr64
    0.00 :   9d8e4:  push   $0x38b
    0.00 :   9d8e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8ef:  nop
    0.00 :   9d8f0:  endbr64
    0.00 :   9d8f4:  push   $0x38c
    0.00 :   9d8f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d8ff:  nop
    0.00 :   9d900:  endbr64
    0.00 :   9d904:  push   $0x38d
    0.00 :   9d909:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d90f:  nop
    0.00 :   9d910:  endbr64
    0.00 :   9d914:  push   $0x38e
    0.00 :   9d919:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d91f:  nop
    0.00 :   9d920:  endbr64
    0.00 :   9d924:  push   $0x38f
    0.00 :   9d929:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d92f:  nop
    0.00 :   9d930:  endbr64
    0.00 :   9d934:  push   $0x390
    0.00 :   9d939:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d93f:  nop
    0.00 :   9d940:  endbr64
    0.00 :   9d944:  push   $0x391
    0.00 :   9d949:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d94f:  nop
    0.00 :   9d950:  endbr64
    0.00 :   9d954:  push   $0x392
    0.00 :   9d959:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d95f:  nop
    0.00 :   9d960:  endbr64
    0.00 :   9d964:  push   $0x393
    0.00 :   9d969:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d96f:  nop
    0.00 :   9d970:  endbr64
    0.00 :   9d974:  push   $0x394
    0.00 :   9d979:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d97f:  nop
    0.00 :   9d980:  endbr64
    0.00 :   9d984:  push   $0x395
    0.00 :   9d989:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d98f:  nop
    0.00 :   9d990:  endbr64
    0.00 :   9d994:  push   $0x396
    0.00 :   9d999:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d99f:  nop
    0.00 :   9d9a0:  endbr64
    0.00 :   9d9a4:  push   $0x397
    0.00 :   9d9a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9af:  nop
    0.00 :   9d9b0:  endbr64
    0.00 :   9d9b4:  push   $0x398
    0.00 :   9d9b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9bf:  nop
    0.00 :   9d9c0:  endbr64
    0.00 :   9d9c4:  push   $0x399
    0.00 :   9d9c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9cf:  nop
    0.00 :   9d9d0:  endbr64
    0.00 :   9d9d4:  push   $0x39a
    0.00 :   9d9d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9df:  nop
    0.00 :   9d9e0:  endbr64
    0.00 :   9d9e4:  push   $0x39b
    0.00 :   9d9e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9ef:  nop
    0.00 :   9d9f0:  endbr64
    0.00 :   9d9f4:  push   $0x39c
    0.00 :   9d9f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9d9ff:  nop
    0.00 :   9da00:  endbr64
    0.00 :   9da04:  push   $0x39d
    0.00 :   9da09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da0f:  nop
    0.00 :   9da10:  endbr64
    0.00 :   9da14:  push   $0x39e
    0.00 :   9da19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da1f:  nop
    0.00 :   9da20:  endbr64
    0.00 :   9da24:  push   $0x39f
    0.00 :   9da29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da2f:  nop
    0.00 :   9da30:  endbr64
    0.00 :   9da34:  push   $0x3a0
    0.00 :   9da39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da3f:  nop
    0.00 :   9da40:  endbr64
    0.00 :   9da44:  push   $0x3a1
    0.00 :   9da49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da4f:  nop
    0.00 :   9da50:  endbr64
    0.00 :   9da54:  push   $0x3a2
    0.00 :   9da59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da5f:  nop
    0.00 :   9da60:  endbr64
    0.00 :   9da64:  push   $0x3a3
    0.00 :   9da69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da6f:  nop
    0.00 :   9da70:  endbr64
    0.00 :   9da74:  push   $0x3a4
    0.00 :   9da79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da7f:  nop
    0.00 :   9da80:  endbr64
    0.00 :   9da84:  push   $0x3a5
    0.00 :   9da89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da8f:  nop
    0.00 :   9da90:  endbr64
    0.00 :   9da94:  push   $0x3a6
    0.00 :   9da99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9da9f:  nop
    0.00 :   9daa0:  endbr64
    0.00 :   9daa4:  push   $0x3a7
    0.00 :   9daa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9daaf:  nop
    0.00 :   9dab0:  endbr64
    0.00 :   9dab4:  push   $0x3a8
    0.00 :   9dab9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dabf:  nop
    0.00 :   9dac0:  endbr64
    0.00 :   9dac4:  push   $0x3a9
    0.00 :   9dac9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dacf:  nop
    0.00 :   9dad0:  endbr64
    0.00 :   9dad4:  push   $0x3aa
    0.00 :   9dad9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dadf:  nop
    0.00 :   9dae0:  endbr64
    0.00 :   9dae4:  push   $0x3ab
    0.00 :   9dae9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9daef:  nop
    0.00 :   9daf0:  endbr64
    0.00 :   9daf4:  push   $0x3ac
    0.00 :   9daf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9daff:  nop
    0.00 :   9db00:  endbr64
    0.00 :   9db04:  push   $0x3ad
    0.00 :   9db09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db0f:  nop
    0.00 :   9db10:  endbr64
    0.00 :   9db14:  push   $0x3ae
    0.00 :   9db19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db1f:  nop
    0.00 :   9db20:  endbr64
    0.00 :   9db24:  push   $0x3af
    0.00 :   9db29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db2f:  nop
    0.00 :   9db30:  endbr64
    0.00 :   9db34:  push   $0x3b0
    0.00 :   9db39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db3f:  nop
    0.00 :   9db40:  endbr64
    0.00 :   9db44:  push   $0x3b1
    0.00 :   9db49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db4f:  nop
    0.00 :   9db50:  endbr64
    0.00 :   9db54:  push   $0x3b2
    0.00 :   9db59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db5f:  nop
    0.00 :   9db60:  endbr64
    0.00 :   9db64:  push   $0x3b3
    0.00 :   9db69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db6f:  nop
    0.00 :   9db70:  endbr64
    0.00 :   9db74:  push   $0x3b4
    0.00 :   9db79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db7f:  nop
    0.00 :   9db80:  endbr64
    0.00 :   9db84:  push   $0x3b5
    0.00 :   9db89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db8f:  nop
    0.00 :   9db90:  endbr64
    0.00 :   9db94:  push   $0x3b6
    0.00 :   9db99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9db9f:  nop
    0.00 :   9dba0:  endbr64
    0.00 :   9dba4:  push   $0x3b7
    0.00 :   9dba9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbaf:  nop
    0.00 :   9dbb0:  endbr64
    0.00 :   9dbb4:  push   $0x3b8
    0.00 :   9dbb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbbf:  nop
    0.00 :   9dbc0:  endbr64
    0.00 :   9dbc4:  push   $0x3b9
    0.00 :   9dbc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbcf:  nop
    0.00 :   9dbd0:  endbr64
    0.00 :   9dbd4:  push   $0x3ba
    0.00 :   9dbd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbdf:  nop
    0.00 :   9dbe0:  endbr64
    0.00 :   9dbe4:  push   $0x3bb
    0.00 :   9dbe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbef:  nop
    0.00 :   9dbf0:  endbr64
    0.00 :   9dbf4:  push   $0x3bc
    0.00 :   9dbf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dbff:  nop
    0.00 :   9dc00:  endbr64
    0.00 :   9dc04:  push   $0x3bd
    0.00 :   9dc09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc0f:  nop
    0.00 :   9dc10:  endbr64
    0.00 :   9dc14:  push   $0x3be
    0.00 :   9dc19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc1f:  nop
    0.00 :   9dc20:  endbr64
    0.00 :   9dc24:  push   $0x3bf
    0.00 :   9dc29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc2f:  nop
    0.00 :   9dc30:  endbr64
    0.00 :   9dc34:  push   $0x3c0
    0.00 :   9dc39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc3f:  nop
    0.00 :   9dc40:  endbr64
    0.00 :   9dc44:  push   $0x3c1
    0.00 :   9dc49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc4f:  nop
    0.00 :   9dc50:  endbr64
    0.00 :   9dc54:  push   $0x3c2
    0.00 :   9dc59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc5f:  nop
    0.00 :   9dc60:  endbr64
    0.00 :   9dc64:  push   $0x3c3
    0.00 :   9dc69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc6f:  nop
    0.00 :   9dc70:  endbr64
    0.00 :   9dc74:  push   $0x3c4
    0.00 :   9dc79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc7f:  nop
    0.00 :   9dc80:  endbr64
    0.00 :   9dc84:  push   $0x3c5
    0.00 :   9dc89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc8f:  nop
    0.00 :   9dc90:  endbr64
    0.00 :   9dc94:  push   $0x3c6
    0.00 :   9dc99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dc9f:  nop
    0.00 :   9dca0:  endbr64
    0.00 :   9dca4:  push   $0x3c7
    0.00 :   9dca9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dcaf:  nop
    0.00 :   9dcb0:  endbr64
    0.00 :   9dcb4:  push   $0x3c8
    0.00 :   9dcb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dcbf:  nop
    0.00 :   9dcc0:  endbr64
    0.00 :   9dcc4:  push   $0x3c9
    0.00 :   9dcc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dccf:  nop
    0.00 :   9dcd0:  endbr64
    0.00 :   9dcd4:  push   $0x3ca
    0.00 :   9dcd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dcdf:  nop
    0.00 :   9dce0:  endbr64
    0.00 :   9dce4:  push   $0x3cb
    0.00 :   9dce9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dcef:  nop
    0.00 :   9dcf0:  endbr64
    0.00 :   9dcf4:  push   $0x3cc
    0.00 :   9dcf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dcff:  nop
    0.00 :   9dd00:  endbr64
    0.00 :   9dd04:  push   $0x3cd
    0.00 :   9dd09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd0f:  nop
    0.00 :   9dd10:  endbr64
    0.00 :   9dd14:  push   $0x3ce
    0.00 :   9dd19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd1f:  nop
    0.00 :   9dd20:  endbr64
    0.00 :   9dd24:  push   $0x3cf
    0.00 :   9dd29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd2f:  nop
    0.00 :   9dd30:  endbr64
    0.00 :   9dd34:  push   $0x3d0
    0.00 :   9dd39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd3f:  nop
    0.00 :   9dd40:  endbr64
    0.00 :   9dd44:  push   $0x3d1
    0.00 :   9dd49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd4f:  nop
    0.00 :   9dd50:  endbr64
    0.00 :   9dd54:  push   $0x3d2
    0.00 :   9dd59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd5f:  nop
    0.00 :   9dd60:  endbr64
    0.00 :   9dd64:  push   $0x3d3
    0.00 :   9dd69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd6f:  nop
    0.00 :   9dd70:  endbr64
    0.00 :   9dd74:  push   $0x3d4
    0.00 :   9dd79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd7f:  nop
    0.00 :   9dd80:  endbr64
    0.00 :   9dd84:  push   $0x3d5
    0.00 :   9dd89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd8f:  nop
    0.00 :   9dd90:  endbr64
    0.00 :   9dd94:  push   $0x3d6
    0.00 :   9dd99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dd9f:  nop
    0.00 :   9dda0:  endbr64
    0.00 :   9dda4:  push   $0x3d7
    0.00 :   9dda9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ddaf:  nop
    0.00 :   9ddb0:  endbr64
    0.00 :   9ddb4:  push   $0x3d8
    0.00 :   9ddb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ddbf:  nop
    0.00 :   9ddc0:  endbr64
    0.00 :   9ddc4:  push   $0x3d9
    0.00 :   9ddc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ddcf:  nop
    0.00 :   9ddd0:  endbr64
    0.00 :   9ddd4:  push   $0x3da
    0.00 :   9ddd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dddf:  nop
    0.00 :   9dde0:  endbr64
    0.00 :   9dde4:  push   $0x3db
    0.00 :   9dde9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ddef:  nop
    0.00 :   9ddf0:  endbr64
    0.00 :   9ddf4:  push   $0x3dc
    0.00 :   9ddf9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9ddff:  nop
    0.00 :   9de00:  endbr64
    0.00 :   9de04:  push   $0x3dd
    0.00 :   9de09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de0f:  nop
    0.00 :   9de10:  endbr64
    0.00 :   9de14:  push   $0x3de
    0.00 :   9de19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de1f:  nop
    0.00 :   9de20:  endbr64
    0.00 :   9de24:  push   $0x3df
    0.00 :   9de29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de2f:  nop
    0.00 :   9de30:  endbr64
    0.00 :   9de34:  push   $0x3e0
    0.00 :   9de39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de3f:  nop
    0.00 :   9de40:  endbr64
    0.00 :   9de44:  push   $0x3e1
    0.00 :   9de49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de4f:  nop
    0.00 :   9de50:  endbr64
    0.00 :   9de54:  push   $0x3e2
    0.00 :   9de59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de5f:  nop
    0.00 :   9de60:  endbr64
    0.00 :   9de64:  push   $0x3e3
    0.00 :   9de69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de6f:  nop
    0.00 :   9de70:  endbr64
    0.00 :   9de74:  push   $0x3e4
    0.00 :   9de79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de7f:  nop
    0.00 :   9de80:  endbr64
    0.00 :   9de84:  push   $0x3e5
    0.00 :   9de89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de8f:  nop
    0.00 :   9de90:  endbr64
    0.00 :   9de94:  push   $0x3e6
    0.00 :   9de99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9de9f:  nop
    0.00 :   9dea0:  endbr64
    0.00 :   9dea4:  push   $0x3e7
    0.00 :   9dea9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9deaf:  nop
    0.00 :   9deb0:  endbr64
    0.00 :   9deb4:  push   $0x3e8
    0.00 :   9deb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9debf:  nop
    0.00 :   9dec0:  endbr64
    0.00 :   9dec4:  push   $0x3e9
    0.00 :   9dec9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9decf:  nop
    0.00 :   9ded0:  endbr64
    0.00 :   9ded4:  push   $0x3ea
    0.00 :   9ded9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dedf:  nop
    0.00 :   9dee0:  endbr64
    0.00 :   9dee4:  push   $0x3eb
    0.00 :   9dee9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9deef:  nop
    0.00 :   9def0:  endbr64
    0.00 :   9def4:  push   $0x3ec
    0.00 :   9def9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9deff:  nop
    0.00 :   9df00:  endbr64
    0.00 :   9df04:  push   $0x3ed
    0.00 :   9df09:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df0f:  nop
    0.00 :   9df10:  endbr64
    0.00 :   9df14:  push   $0x3ee
    0.00 :   9df19:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df1f:  nop
    0.00 :   9df20:  endbr64
    0.00 :   9df24:  push   $0x3ef
    0.00 :   9df29:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df2f:  nop
    0.00 :   9df30:  endbr64
    0.00 :   9df34:  push   $0x3f0
    0.00 :   9df39:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df3f:  nop
    0.00 :   9df40:  endbr64
    0.00 :   9df44:  push   $0x3f1
    0.00 :   9df49:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df4f:  nop
    0.00 :   9df50:  endbr64
    0.00 :   9df54:  push   $0x3f2
    0.00 :   9df59:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df5f:  nop
    0.00 :   9df60:  endbr64
    0.00 :   9df64:  push   $0x3f3
    0.00 :   9df69:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df6f:  nop
    0.00 :   9df70:  endbr64
    0.00 :   9df74:  push   $0x3f4
    0.00 :   9df79:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df7f:  nop
    0.00 :   9df80:  endbr64
    0.00 :   9df84:  push   $0x3f5
    0.00 :   9df89:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df8f:  nop
    0.00 :   9df90:  endbr64
    0.00 :   9df94:  push   $0x3f6
    0.00 :   9df99:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9df9f:  nop
    0.00 :   9dfa0:  endbr64
    0.00 :   9dfa4:  push   $0x3f7
    0.00 :   9dfa9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfaf:  nop
    0.00 :   9dfb0:  endbr64
    0.00 :   9dfb4:  push   $0x3f8
    0.00 :   9dfb9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfbf:  nop
    0.00 :   9dfc0:  endbr64
    0.00 :   9dfc4:  push   $0x3f9
    0.00 :   9dfc9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfcf:  nop
    0.00 :   9dfd0:  endbr64
    0.00 :   9dfd4:  push   $0x3fa
    0.00 :   9dfd9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfdf:  nop
    0.00 :   9dfe0:  endbr64
    0.00 :   9dfe4:  push   $0x3fb
    0.00 :   9dfe9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfef:  nop
    0.00 :   9dff0:  endbr64
    0.00 :   9dff4:  push   $0x3fc
    0.00 :   9dff9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9dfff:  nop
    0.00 :   9e000:  endbr64
    0.00 :   9e004:  push   $0x3fd
    0.00 :   9e009:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e00f:  nop
    0.00 :   9e010:  endbr64
    0.00 :   9e014:  push   $0x3fe
    0.00 :   9e019:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e01f:  nop
    0.00 :   9e020:  endbr64
    0.00 :   9e024:  push   $0x3ff
    0.00 :   9e029:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e02f:  nop
    0.00 :   9e030:  endbr64
    0.00 :   9e034:  push   $0x400
    0.00 :   9e039:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e03f:  nop
    0.00 :   9e040:  endbr64
    0.00 :   9e044:  push   $0x401
    0.00 :   9e049:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e04f:  nop
    0.00 :   9e050:  endbr64
    0.00 :   9e054:  push   $0x402
    0.00 :   9e059:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e05f:  nop
    0.00 :   9e060:  endbr64
    0.00 :   9e064:  push   $0x403
    0.00 :   9e069:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e06f:  nop
    0.00 :   9e070:  endbr64
    0.00 :   9e074:  push   $0x404
    0.00 :   9e079:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e07f:  nop
    0.00 :   9e080:  endbr64
    0.00 :   9e084:  push   $0x405
    0.00 :   9e089:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e08f:  nop
    0.00 :   9e090:  endbr64
    0.00 :   9e094:  push   $0x406
    0.00 :   9e099:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e09f:  nop
    0.00 :   9e0a0:  endbr64
    0.00 :   9e0a4:  push   $0x407
    0.00 :   9e0a9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0af:  nop
    0.00 :   9e0b0:  endbr64
    0.00 :   9e0b4:  push   $0x408
    0.00 :   9e0b9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0bf:  nop
    0.00 :   9e0c0:  endbr64
    0.00 :   9e0c4:  push   $0x409
    0.00 :   9e0c9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0cf:  nop
    0.00 :   9e0d0:  endbr64
    0.00 :   9e0d4:  push   $0x40a
    0.00 :   9e0d9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0df:  nop
    0.00 :   9e0e0:  endbr64
    0.00 :   9e0e4:  push   $0x40b
    0.00 :   9e0e9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0ef:  nop
    0.00 :   9e0f0:  endbr64
    0.00 :   9e0f4:  push   $0x40c
    0.00 :   9e0f9:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e0ff:  nop
    0.00 :   9e100:  endbr64
    0.00 :   9e104:  push   $0x40d
    0.00 :   9e109:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e10f:  nop
    0.00 :   9e110:  endbr64
    0.00 :   9e114:  push   $0x40e
    0.00 :   9e119:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e11f:  nop
    0.00 :   9e120:  endbr64
    0.00 :   9e124:  push   $0x40f
    0.00 :   9e129:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e12f:  nop
    0.00 :   9e130:  endbr64
    0.00 :   9e134:  push   $0x410
    0.00 :   9e139:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e13f:  nop
    0.00 :   9e140:  endbr64
    0.00 :   9e144:  push   $0x411
    0.00 :   9e149:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e14f:  nop
    0.00 :   9e150:  endbr64
    0.00 :   9e154:  push   $0x412
    0.00 :   9e159:  bnd jmp 9a020 <std::__once_callable@@GLIBCXX_3.4.11+0x9a008>
    0.00 :   9e15f:  nop
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000080e50 <_IO_puts>:
         : 6     __GI__IO_puts():
         : 7     ./libio/ioputs.c:33
    0.00 :   80e50:  endbr64
    0.00 :   80e54:  push   %r14
    0.00 :   80e56:  push   %r13
    0.00 :   80e58:  push   %r12
    0.00 :   80e5a:  mov    %rdi,%r12
    0.00 :   80e5d:  push   %rbp
    0.00 :   80e5e:  push   %rbx
    0.00 :   80e5f:  sub    $0x10,%rsp
         : 16    ./libio/ioputs.c:35
    0.00 :   80e63:  call   28490 <*ABS*+0xa86a0@plt>
         : 18    ./libio/ioputs.c:36
  100.00 :   80e68:  mov    0x198fc9(%rip),%r13        # 219e38 <stdout@@GLIBC_2.2.5-0x1a30>
         : 20    ./libio/ioputs.c:35
    0.00 :   80e6f:  mov    %rax,%rbx
         : 22    ./libio/ioputs.c:36
    0.00 :   80e72:  mov    0x0(%r13),%rbp
    0.00 :   80e76:  mov    0x0(%rbp),%eax
    0.00 :   80e79:  and    $0x8000,%eax
    0.00 :   80e7e:  jne    80ed8 <_IO_puts+0x88>
         : 27    ./libio/ioputs.c:36 (discriminator 1)
    0.00 :   80e80:  mov    %fs:0x10,%r14
    0.00 :   80e89:  mov    0x88(%rbp),%r8
    0.00 :   80e90:  cmp    %r14,0x8(%r8)
    0.00 :   80e94:  je     80f88 <_IO_puts+0x138>
         : 32    ./libio/ioputs.c:36 (discriminator 3)
    0.00 :   80e9a:  mov    $0x1,%edx
    0.00 :   80e9f:  lock cmpxchg %edx,(%r8)
    0.00 :   80ea4:  jne    80fd0 <_IO_puts+0x180>
         : 36    ./libio/ioputs.c:36
    0.00 :   80eaa:  mov    0x88(%rbp),%r8
         : 38    ./libio/ioputs.c:39
    0.00 :   80eb1:  mov    0x0(%r13),%rdi
         : 40    ./libio/ioputs.c:36
    0.00 :   80eb5:  mov    %r14,0x8(%r8)
         : 42    ./libio/ioputs.c:39 (discriminator 12)
    0.00 :   80eb9:  mov    0xc0(%rdi),%eax
         : 44    ./libio/ioputs.c:36 (discriminator 12)
    0.00 :   80ebf:  addl   $0x1,0x4(%r8)
         : 46    ./libio/ioputs.c:39 (discriminator 12)
    0.00 :   80ec4:  test   %eax,%eax
    0.00 :   80ec6:  je     80ee5 <_IO_puts+0x95>
         : 49    ./libio/ioputs.c:38 (discriminator 5)
    0.00 :   80ec8:  cmp    $0xffffffff,%eax
    0.00 :   80ecb:  je     80eef <_IO_puts+0x9f>
         : 52    ./libio/ioputs.c:34
    0.00 :   80ecd:  mov    $0xffffffff,%eax
    0.00 :   80ed2:  jmp    80f4a <_IO_puts+0xfa>
    0.00 :   80ed4:  nopl   0x0(%rax)
    0.00 :   80ed8:  mov    %rbp,%rdi
         : 57    ./libio/ioputs.c:39
    0.00 :   80edb:  mov    0xc0(%rdi),%eax
    0.00 :   80ee1:  test   %eax,%eax
    0.00 :   80ee3:  jne    80ec8 <_IO_puts+0x78>
         : 61    ./libio/ioputs.c:39 (discriminator 3)
    0.00 :   80ee5:  movl   $0xffffffff,0xc0(%rdi)
         : 63    ./libio/ioputs.c:40
    0.00 :   80eef:  mov    0xd8(%rdi),%r14
         : 65    IO_validate_vtable():
         : 66    ./libio/libioP.h:940
    0.00 :   80ef6:  lea    0x195b03(%rip),%rdx        # 216a00 <_IO_helper_jumps>
    0.00 :   80efd:  lea    0x196864(%rip),%rax        # 217768 <__stop___libc_IO_vtables>
    0.00 :   80f04:  sub    %rdx,%rax
         : 70    ./libio/libioP.h:942
    0.00 :   80f07:  mov    %r14,%rcx
    0.00 :   80f0a:  sub    %rdx,%rcx
         : 73    ./libio/libioP.h:943
    0.00 :   80f0d:  cmp    %rcx,%rax
    0.00 :   80f10:  jbe    80f90 <_IO_puts+0x140>
         : 76    __GI__IO_puts():
         : 77    ./libio/ioputs.c:40
    0.00 :   80f12:  mov    %rbx,%rdx
    0.00 :   80f15:  mov    %r12,%rsi
    0.00 :   80f18:  call   *0x38(%r14)
    0.00 :   80f1c:  cmp    %rax,%rbx
    0.00 :   80f1f:  jne    80ecd <_IO_puts+0x7d>
         : 83    ./libio/ioputs.c:41
    0.00 :   80f21:  mov    0x0(%r13),%rdi
    0.00 :   80f25:  mov    0x28(%rdi),%rax
    0.00 :   80f29:  cmp    0x30(%rdi),%rax
    0.00 :   80f2d:  jae    80fa0 <_IO_puts+0x150>
         : 88    ./libio/ioputs.c:41 (discriminator 2)
    0.00 :   80f2f:  lea    0x1(%rax),%rdx
    0.00 :   80f33:  mov    %rdx,0x28(%rdi)
    0.00 :   80f37:  movb   $0xa,(%rax)
         : 92    ./libio/ioputs.c:42
    0.00 :   80f3a:  add    $0x1,%rbx
    0.00 :   80f3e:  mov    $0x7fffffff,%eax
    0.00 :   80f43:  cmp    %rax,%rbx
    0.00 :   80f46:  cmovbe %rbx,%rax
         : 97    _IO_acquire_lock_fct():
         : 98    ./libio/libioP.h:883
    0.00 :   80f4a:  testl  $0x8000,0x0(%rbp)
    0.00 :   80f51:  jne    80f76 <_IO_puts+0x126>
         : 101   ./libio/libioP.h:884
    0.00 :   80f53:  mov    0x88(%rbp),%rdi
    0.00 :   80f5a:  mov    0x4(%rdi),%esi
    0.00 :   80f5d:  lea    -0x1(%rsi),%edx
    0.00 :   80f60:  mov    %edx,0x4(%rdi)
    0.00 :   80f63:  test   %edx,%edx
    0.00 :   80f65:  jne    80f76 <_IO_puts+0x126>
    0.00 :   80f67:  movq   $0x0,0x8(%rdi)
    0.00 :   80f6f:  xchg   %edx,(%rdi)
    0.00 :   80f71:  cmp    $0x1,%edx
    0.00 :   80f74:  jg     80fb8 <_IO_puts+0x168>
         : 112   __GI__IO_puts():
         : 113   ./libio/ioputs.c:46
    0.00 :   80f76:  add    $0x10,%rsp
    0.00 :   80f7a:  pop    %rbx
    0.00 :   80f7b:  pop    %rbp
    0.00 :   80f7c:  pop    %r12
    0.00 :   80f7e:  pop    %r13
    0.00 :   80f80:  pop    %r14
    0.00 :   80f82:  ret
    0.00 :   80f83:  nopl   0x0(%rax,%rax,1)
    0.00 :   80f88:  mov    %rbp,%rdi
    0.00 :   80f8b:  jmp    80eb9 <_IO_puts+0x69>
         : 124   IO_validate_vtable():
         : 125   ./libio/libioP.h:946
    0.00 :   80f90:  call   89ef0 <_IO_vtable_check>
         : 127   __GI__IO_puts():
         : 128   ./libio/ioputs.c:40
    0.00 :   80f95:  mov    0x0(%r13),%rdi
    0.00 :   80f99:  jmp    80f12 <_IO_puts+0xc2>
    0.00 :   80f9e:  xchg   %ax,%ax
         : 132   ./libio/ioputs.c:41 (discriminator 1)
    0.00 :   80fa0:  mov    $0xa,%esi
    0.00 :   80fa5:  call   8d800 <__overflow>
    0.00 :   80faa:  cmp    $0xffffffff,%eax
    0.00 :   80fad:  jne    80f3a <_IO_puts+0xea>
    0.00 :   80faf:  jmp    80ecd <_IO_puts+0x7d>
    0.00 :   80fb4:  nopl   0x0(%rax)
    0.00 :   80fb8:  mov    %eax,0xc(%rsp)
         : 140   _IO_acquire_lock_fct():
         : 141   ./libio/libioP.h:884
    0.00 :   80fbc:  call   91300 <__lll_lock_wake_private>
         : 143   __GI__IO_puts():
         : 144   ./libio/ioputs.c:45
    0.00 :   80fc1:  mov    0xc(%rsp),%eax
    0.00 :   80fc5:  jmp    80f76 <_IO_puts+0x126>
    0.00 :   80fc7:  nopw   0x0(%rax,%rax,1)
         : 148   ./libio/ioputs.c:36 (discriminator 7)
    0.00 :   80fd0:  mov    %r8,%rdi
    0.00 :   80fd3:  call   91230 <__lll_lock_wait_private>
    0.00 :   80fd8:  jmp    80eaa <_IO_puts+0x5a>
    0.00 :   80fdd:  endbr64
         : 153   _IO_acquire_lock_fct():
         : 154   ./libio/libioP.h:883
    0.00 :   80fe1:  mov    %rax,%r12
    0.00 :   80fe4:  jmp    29254 <__GI__IO_puts.cold>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000015d30 <_dl_runtime_resolve_xsavec>:
         : 6     _dl_runtime_resolve_xsavec():
         : 7     ./elf/../sysdeps/x86_64/dl-trampoline.h:67
    0.00 :   15d30:  endbr64
         : 9     ./elf/../sysdeps/x86_64/dl-trampoline.h:72
    0.00 :   15d34:  push   %rbx
         : 11    ./elf/../sysdeps/x86_64/dl-trampoline.h:75
    0.00 :   15d35:  mov    %rsp,%rbx
         : 13    ./elf/../sysdeps/x86_64/dl-trampoline.h:77
    0.00 :   15d38:  and    $0xffffffffffffffc0,%rsp
         : 15    ./elf/../sysdeps/x86_64/dl-trampoline.h:87
    0.00 :   15d3c:  sub    0x23f4d(%rip),%rsp        # 39c90 <_rtld_global_ro+0x1b0>
         : 17    ./elf/../sysdeps/x86_64/dl-trampoline.h:93
    0.00 :   15d43:  mov    %rax,(%rsp)
         : 19    ./elf/../sysdeps/x86_64/dl-trampoline.h:94
    0.00 :   15d47:  mov    %rcx,0x8(%rsp)
         : 21    ./elf/../sysdeps/x86_64/dl-trampoline.h:95
    0.00 :   15d4c:  mov    %rdx,0x10(%rsp)
         : 23    ./elf/../sysdeps/x86_64/dl-trampoline.h:96
    0.00 :   15d51:  mov    %rsi,0x18(%rsp)
         : 25    ./elf/../sysdeps/x86_64/dl-trampoline.h:97
    0.00 :   15d56:  mov    %rdi,0x20(%rsp)
         : 27    ./elf/../sysdeps/x86_64/dl-trampoline.h:98
    0.00 :   15d5b:  mov    %r8,0x28(%rsp)
         : 29    ./elf/../sysdeps/x86_64/dl-trampoline.h:99
    0.00 :   15d60:  mov    %r9,0x30(%rsp)
         : 31    ./elf/../sysdeps/x86_64/dl-trampoline.h:103
    0.00 :   15d65:  mov    $0xee,%eax
         : 33    ./elf/../sysdeps/x86_64/dl-trampoline.h:104
    0.00 :   15d6a:  xor    %edx,%edx
         : 35    ./elf/../sysdeps/x86_64/dl-trampoline.h:110
    0.00 :   15d6c:  mov    %rdx,0x250(%rsp)
         : 37    ./elf/../sysdeps/x86_64/dl-trampoline.h:111
    0.00 :   15d74:  mov    %rdx,0x258(%rsp)
         : 39    ./elf/../sysdeps/x86_64/dl-trampoline.h:112
    0.00 :   15d7c:  mov    %rdx,0x260(%rsp)
         : 41    ./elf/../sysdeps/x86_64/dl-trampoline.h:113
    0.00 :   15d84:  mov    %rdx,0x268(%rsp)
         : 43    ./elf/../sysdeps/x86_64/dl-trampoline.h:114
    0.00 :   15d8c:  mov    %rdx,0x270(%rsp)
         : 45    ./elf/../sysdeps/x86_64/dl-trampoline.h:115
    0.00 :   15d94:  mov    %rdx,0x278(%rsp)
         : 47    ./elf/../sysdeps/x86_64/dl-trampoline.h:119
    0.00 :   15d9c:  xsavec 0x40(%rsp)
         : 49    ./elf/../sysdeps/x86_64/dl-trampoline.h:124
    0.00 :   15da1:  mov    0x10(%rbx),%rsi
         : 51    ./elf/../sysdeps/x86_64/dl-trampoline.h:125
    0.00 :   15da5:  mov    0x8(%rbx),%rdi
         : 53    ./elf/../sysdeps/x86_64/dl-trampoline.h:126
    0.00 :   15da9:  call   12e70 <_dl_fixup>
         : 55    ./elf/../sysdeps/x86_64/dl-trampoline.h:127
    0.00 :   15dae:  mov    %rax,%r11
         : 57    ./elf/../sysdeps/x86_64/dl-trampoline.h:132
    0.00 :   15db1:  mov    $0xee,%eax
         : 59    ./elf/../sysdeps/x86_64/dl-trampoline.h:133
    0.00 :   15db6:  xor    %edx,%edx
         : 61    ./elf/../sysdeps/x86_64/dl-trampoline.h:134
    0.00 :   15db8:  xrstor 0x40(%rsp)
         : 63    ./elf/../sysdeps/x86_64/dl-trampoline.h:136
  100.00 :   15dbd:  mov    0x30(%rsp),%r9
         : 65    ./elf/../sysdeps/x86_64/dl-trampoline.h:137
    0.00 :   15dc2:  mov    0x28(%rsp),%r8
         : 67    ./elf/../sysdeps/x86_64/dl-trampoline.h:138
    0.00 :   15dc7:  mov    0x20(%rsp),%rdi
         : 69    ./elf/../sysdeps/x86_64/dl-trampoline.h:139
    0.00 :   15dcc:  mov    0x18(%rsp),%rsi
         : 71    ./elf/../sysdeps/x86_64/dl-trampoline.h:140
    0.00 :   15dd1:  mov    0x10(%rsp),%rdx
         : 73    ./elf/../sysdeps/x86_64/dl-trampoline.h:141
    0.00 :   15dd6:  mov    0x8(%rsp),%rcx
         : 75    ./elf/../sysdeps/x86_64/dl-trampoline.h:142
    0.00 :   15ddb:  mov    (%rsp),%rax
         : 77    ./elf/../sysdeps/x86_64/dl-trampoline.h:144
    0.00 :   15ddf:  mov    %rbx,%rsp
         : 79    ./elf/../sysdeps/x86_64/dl-trampoline.h:146
    0.00 :   15de2:  mov    (%rsp),%rbx
         : 81    ./elf/../sysdeps/x86_64/dl-trampoline.h:150
    0.00 :   15de6:  add    $0x18,%rsp
         : 83    ./elf/../sysdeps/x86_64/dl-trampoline.h:152
    0.00 :   15dea:  jmp    *%r11
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008ddc0 <_IO_default_xsputn>:
         : 6     __GI__IO_default_xsputn():
         : 7     ./libio/genops.c:371
  100.00 :   8ddc0:  endbr64
         : 9     ./libio/genops.c:374
    0.00 :   8ddc4:  test   %rdx,%rdx
    0.00 :   8ddc7:  je     8dfa0 <_IO_default_xsputn+0x1e0>
         : 12    ./libio/genops.c:371
    0.00 :   8ddcd:  push   %r15
    0.00 :   8ddcf:  mov    %rsi,%rcx
    0.00 :   8ddd2:  mov    %rdi,%r15
    0.00 :   8ddd5:  push   %r14
    0.00 :   8ddd7:  mov    %rdx,%r14
    0.00 :   8ddda:  push   %r13
    0.00 :   8dddc:  mov    %rdx,%r13
    0.00 :   8dddf:  push   %r12
         : 21    IO_validate_vtable():
         : 22    ./libio/libioP.h:940
    0.00 :   8dde1:  lea    0x188c18(%rip),%r12        # 216a00 <_IO_helper_jumps>
         : 24    __GI__IO_default_xsputn():
         : 25    ./libio/genops.c:371
    0.00 :   8dde8:  push   %rbp
         : 27    IO_validate_vtable():
         : 28    ./libio/libioP.h:940
    0.00 :   8dde9:  lea    0x189978(%rip),%rbp        # 217768 <__stop___libc_IO_vtables>
         : 30    __GI__IO_default_xsputn():
         : 31    ./libio/genops.c:371
    0.00 :   8ddf0:  push   %rbx
         : 33    IO_validate_vtable():
         : 34    ./libio/libioP.h:940
    0.00 :   8ddf1:  sub    %r12,%rbp
         : 36    __GI__IO_default_xsputn():
         : 37    ./libio/genops.c:371
    0.00 :   8ddf4:  sub    $0x18,%rsp
    0.00 :   8ddf8:  jmp    8de40 <_IO_default_xsputn+0x80>
    0.00 :   8ddfa:  nopw   0x0(%rax,%rax,1)
         : 41    ./libio/genops.c:389
    0.00 :   8de00:  test   %rbx,%rbx
    0.00 :   8de03:  jne    8dec8 <_IO_default_xsputn+0x108>
         : 44    ./libio/genops.c:397
    0.00 :   8de09:  sub    %rbx,%r14
         : 46    ./libio/genops.c:399
    0.00 :   8de0c:  test   %r14,%r14
    0.00 :   8de0f:  je     8deb3 <_IO_default_xsputn+0xf3>
    0.00 :   8de15:  mov    0xd8(%r15),%rax
         : 50    IO_validate_vtable():
         : 51    ./libio/libioP.h:942
    0.00 :   8de1c:  mov    %rax,%rdx
    0.00 :   8de1f:  sub    %r12,%rdx
         : 54    ./libio/libioP.h:943
    0.00 :   8de22:  cmp    %rdx,%rbp
    0.00 :   8de25:  jbe    8de80 <_IO_default_xsputn+0xc0>
         : 57    __GI__IO_default_xsputn():
         : 58    ./libio/genops.c:399
    0.00 :   8de27:  movzbl (%rcx),%esi
    0.00 :   8de2a:  lea    0x1(%rcx),%rbx
    0.00 :   8de2e:  mov    %r15,%rdi
    0.00 :   8de31:  call   *0x18(%rax)
    0.00 :   8de34:  cmp    $0xffffffff,%eax
    0.00 :   8de37:  je     8deb0 <_IO_default_xsputn+0xf0>
         : 65    ./libio/genops.c:401
    0.00 :   8de39:  sub    $0x1,%r14
         : 67    ./libio/genops.c:379
    0.00 :   8de3d:  mov    %rbx,%rcx
    0.00 :   8de40:  mov    0x28(%r15),%rdi
    0.00 :   8de44:  mov    0x30(%r15),%rbx
    0.00 :   8de48:  cmp    %rbx,%rdi
    0.00 :   8de4b:  jae    8de0c <_IO_default_xsputn+0x4c>
         : 73    ./libio/genops.c:381
    0.00 :   8de4d:  sub    %rdi,%rbx
    0.00 :   8de50:  cmp    %r14,%rbx
    0.00 :   8de53:  cmova  %r14,%rbx
         : 77    ./libio/genops.c:384
    0.00 :   8de57:  cmp    $0x14,%rbx
    0.00 :   8de5b:  jbe    8de00 <_IO_default_xsputn+0x40>
         : 80    ./libio/genops.c:386
    0.00 :   8de5d:  mov    %rcx,%rsi
    0.00 :   8de60:  mov    %rbx,%rdx
    0.00 :   8de63:  mov    %rcx,(%rsp)
    0.00 :   8de67:  call   283e0 <*ABS*+0xa97d0@plt>
         : 85    ./libio/genops.c:387
    0.00 :   8de6c:  mov    (%rsp),%rcx
         : 87    ./libio/genops.c:386
    0.00 :   8de70:  mov    %rax,0x28(%r15)
         : 89    ./libio/genops.c:387
    0.00 :   8de74:  add    %rbx,%rcx
    0.00 :   8de77:  jmp    8de09 <_IO_default_xsputn+0x49>
    0.00 :   8de79:  nopl   0x0(%rax)
    0.00 :   8de80:  mov    %rcx,0x8(%rsp)
    0.00 :   8de85:  mov    %rax,(%rsp)
         : 95    IO_validate_vtable():
         : 96    ./libio/libioP.h:946
    0.00 :   8de89:  call   89ef0 <_IO_vtable_check>
         : 98    __GI__IO_default_xsputn():
         : 99    ./libio/genops.c:399
    0.00 :   8de8e:  mov    0x8(%rsp),%rcx
    0.00 :   8de93:  mov    (%rsp),%rax
    0.00 :   8de97:  mov    %r15,%rdi
    0.00 :   8de9a:  movzbl (%rcx),%esi
    0.00 :   8de9d:  lea    0x1(%rcx),%rbx
    0.00 :   8dea1:  call   *0x18(%rax)
    0.00 :   8dea4:  cmp    $0xffffffff,%eax
    0.00 :   8dea7:  jne    8de39 <_IO_default_xsputn+0x79>
    0.00 :   8dea9:  nopl   0x0(%rax)
         : 109   ./libio/genops.c:403
    0.00 :   8deb0:  sub    %r14,%r13
         : 111   ./libio/genops.c:404
    0.00 :   8deb3:  add    $0x18,%rsp
         : 113   ./libio/genops.c:375
    0.00 :   8deb7:  mov    %r13,%rax
         : 115   ./libio/genops.c:404
    0.00 :   8deba:  pop    %rbx
    0.00 :   8debb:  pop    %rbp
    0.00 :   8debc:  pop    %r12
    0.00 :   8debe:  pop    %r13
    0.00 :   8dec0:  pop    %r14
    0.00 :   8dec2:  pop    %r15
    0.00 :   8dec4:  ret
    0.00 :   8dec5:  nopl   (%rax)
         : 124   ./libio/genops.c:393
    0.00 :   8dec8:  lea    0x1(%rcx),%rsi
    0.00 :   8decc:  mov    %rdi,%rdx
    0.00 :   8decf:  lea    -0x1(%rbx),%rax
    0.00 :   8ded3:  sub    %rsi,%rdx
    0.00 :   8ded6:  cmp    $0xe,%rdx
    0.00 :   8deda:  jbe    8dfa8 <_IO_default_xsputn+0x1e8>
    0.00 :   8dee0:  cmp    $0x6,%rax
    0.00 :   8dee4:  jbe    8dfa8 <_IO_default_xsputn+0x1e8>
    0.00 :   8deea:  cmp    $0xe,%rax
    0.00 :   8deee:  jbe    8df7a <_IO_default_xsputn+0x1ba>
         : 135   ./libio/genops.c:394
    0.00 :   8def4:  movdqu (%rcx),%xmm0
         : 137   ./libio/genops.c:393
    0.00 :   8def8:  lea    0x10(%rcx),%rdx
    0.00 :   8defc:  lea    0x10(%rdi),%rax
    0.00 :   8df00:  lea    -0x11(%rbx),%rsi
         : 141   ./libio/genops.c:394
    0.00 :   8df04:  movups %xmm0,(%rdi)
         : 143   ./libio/genops.c:393
    0.00 :   8df07:  cmp    $0x10,%rbx
    0.00 :   8df0b:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 146   ./libio/genops.c:394
    0.00 :   8df0d:  movzbl (%rdx),%r8d
    0.00 :   8df11:  mov    %r8b,(%rax)
         : 149   ./libio/genops.c:393
    0.00 :   8df14:  test   %rsi,%rsi
    0.00 :   8df17:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 152   ./libio/genops.c:394
    0.00 :   8df19:  movzbl 0x1(%rdx),%r8d
    0.00 :   8df1e:  mov    %r8b,0x1(%rax)
         : 155   ./libio/genops.c:393
    0.00 :   8df22:  cmp    $0x1,%rsi
    0.00 :   8df26:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 158   ./libio/genops.c:394
    0.00 :   8df28:  movzbl 0x2(%rdx),%r8d
    0.00 :   8df2d:  mov    %r8b,0x2(%rax)
         : 161   ./libio/genops.c:393
    0.00 :   8df31:  cmp    $0x2,%rsi
    0.00 :   8df35:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 164   ./libio/genops.c:394
    0.00 :   8df37:  movzbl 0x3(%rdx),%r8d
    0.00 :   8df3c:  mov    %r8b,0x3(%rax)
         : 167   ./libio/genops.c:393
    0.00 :   8df40:  cmp    $0x3,%rsi
    0.00 :   8df44:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 170   ./libio/genops.c:394
    0.00 :   8df46:  movzbl 0x4(%rdx),%r8d
    0.00 :   8df4b:  mov    %r8b,0x4(%rax)
         : 173   ./libio/genops.c:393
    0.00 :   8df4f:  cmp    $0x4,%rsi
    0.00 :   8df53:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 176   ./libio/genops.c:394
    0.00 :   8df55:  movzbl 0x5(%rdx),%r8d
    0.00 :   8df5a:  mov    %r8b,0x5(%rax)
         : 179   ./libio/genops.c:393
    0.00 :   8df5e:  cmp    $0x5,%rsi
    0.00 :   8df62:  je     8df6b <_IO_default_xsputn+0x1ab>
         : 182   ./libio/genops.c:394
    0.00 :   8df64:  movzbl 0x6(%rdx),%edx
    0.00 :   8df68:  mov    %dl,0x6(%rax)
    0.00 :   8df6b:  add    %rbx,%rdi
    0.00 :   8df6e:  add    %rbx,%rcx
    0.00 :   8df71:  mov    %rdi,0x28(%r15)
    0.00 :   8df75:  jmp    8de09 <_IO_default_xsputn+0x49>
    0.00 :   8df7a:  mov    (%rcx),%rax
    0.00 :   8df7d:  lea    0x8(%rcx),%rdx
    0.00 :   8df81:  lea    -0x9(%rbx),%rsi
    0.00 :   8df85:  mov    %rax,(%rdi)
         : 193   ./libio/genops.c:393
    0.00 :   8df88:  lea    0x8(%rdi),%rax
    0.00 :   8df8c:  cmp    $0x8,%rbx
    0.00 :   8df90:  jne    8df0d <_IO_default_xsputn+0x14d>
    0.00 :   8df96:  jmp    8df6b <_IO_default_xsputn+0x1ab>
    0.00 :   8df98:  nopl   0x0(%rax,%rax,1)
    0.00 :   8dfa0:  xor    %eax,%eax
         : 200   ./libio/genops.c:404
    0.00 :   8dfa2:  ret
    0.00 :   8dfa3:  nopl   0x0(%rax,%rax,1)
         : 203   ./libio/genops.c:393
    0.00 :   8dfa8:  xor    %eax,%eax
    0.00 :   8dfaa:  nopw   0x0(%rax,%rax,1)
         : 206   ./libio/genops.c:394
    0.00 :   8dfb0:  movzbl (%rcx,%rax,1),%edx
    0.00 :   8dfb4:  mov    %dl,(%rdi,%rax,1)
         : 209   ./libio/genops.c:393
    0.00 :   8dfb7:  add    $0x1,%rax
    0.00 :   8dfbb:  cmp    %rbx,%rax
    0.00 :   8dfbe:  jne    8dfb0 <_IO_default_xsputn+0x1f0>
    0.00 :   8dfc0:  jmp    8df6b <_IO_default_xsputn+0x1ab>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000017d70 <__tunable_get_val>:
         : 6     __GI___tunable_get_val():
         : 7     ./elf/dl-tunables.c:405
    0.00 :   17d70:  endbr64
         : 9     ./elf/dl-tunables.c:408
    0.00 :   17d74:  mov    %edi,%edi
    0.00 :   17d76:  lea    0x20d83(%rip),%rcx        # 38b00 <tunable_list>
    0.00 :   17d7d:  lea    0x0(,%rdi,8),%rax
    0.00 :   17d85:  sub    %rdi,%rax
    0.00 :   17d88:  shl    $0x4,%rax
    0.00 :   17d8c:  add    %rcx,%rax
    0.00 :   17d8f:  mov    0x30(%rax),%r8d
         : 17    ./elf/dl-tunables.c:417
  100.00 :   17d93:  mov    0x48(%rax),%rax
         : 19    ./elf/dl-tunables.c:408
    0.00 :   17d97:  cmp    $0x2,%r8d
    0.00 :   17d9b:  ja     17dd8 <__tunable_get_val+0x68>
    0.00 :   17d9d:  test   %r8d,%r8d
    0.00 :   17da0:  jne    17dd8 <__tunable_get_val+0x68>
         : 24    ./elf/dl-tunables.c:417
    0.00 :   17da2:  mov    %eax,(%rsi)
         : 26    ./elf/dl-tunables.c:434
    0.00 :   17da4:  lea    0x0(,%rdi,8),%rax
    0.00 :   17dac:  sub    %rdi,%rax
    0.00 :   17daf:  shl    $0x4,%rax
    0.00 :   17db3:  cmpb   $0x0,0x50(%rcx,%rax,1)
    0.00 :   17db8:  je     17dd0 <__tunable_get_val+0x60>
    0.00 :   17dba:  test   %rdx,%rdx
    0.00 :   17dbd:  je     17dd0 <__tunable_get_val+0x60>
         : 34    ./elf/dl-tunables.c:435
    0.00 :   17dbf:  lea    0x48(%rcx,%rax,1),%rdi
    0.00 :   17dc4:  jmp    *%rdx
    0.00 :   17dc6:  cs nopw 0x0(%rax,%rax,1)
         : 38    ./elf/dl-tunables.c:436
    0.00 :   17dd0:  ret
    0.00 :   17dd1:  nopl   0x0(%rax)
         : 41    ./elf/dl-tunables.c:427
    0.00 :   17dd8:  mov    %rax,(%rsi)
         : 43    ./elf/dl-tunables.c:428
    0.00 :   17ddb:  jmp    17da4 <__tunable_get_val+0x34>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000e0b0 <Minisat::Solver::Solver()>:
         : 6    Minisat::Solver::Solver():
         :
         : 52   //=================================================================================================
         : 53   // Constructor/Destructor:
         :
         :
         : 56   Solver::Solver() :
    0.00 :   e0b0:   endbr64
    0.00 :   e0b4:   movsd  0xb444(%rip),%xmm0        # 19500 <opt_random_var_freq+0x40>
    0.00 :   e0bc:   push   %r12
         :
         : 99   // Resource constraints:
         : 100  //
         : 101  , conflict_budget    (-1)
         : 102  , propagation_budget (-1)
         : 103  , asynch_interrupt   (false)
    0.00 :   e0be:   lea    0xaa6b(%rip),%rax        # 18b30 <vtable for Minisat::Solver+0x10>
         : 105  Minisat::RegionAllocator<unsigned int>::RegionAllocator(unsigned int):
         : 48   // TODO: make this a class for better type-checking?
         : 49   typedef uint32_t Ref;
         : 50   enum { Ref_Undef = UINT32_MAX };
         : 51   enum { Unit_Size = sizeof(uint32_t) };
         :
         : 53   explicit RegionAllocator(uint32_t start_cap = 1024*1024) : memory(NULL), sz(0), cap(0), wasted_(0){ capacity(start_cap); }
    0.00 :   e0c5:   mov    $0x100000,%esi
         : 55   Minisat::Solver::Solver():
         : 51   Solver::Solver() :
    0.00 :   e0ca:   push   %rbp
         : 61   , ccmin_mode       (opt_ccmin_mode)
    0.00 :   e0cb:   movd   0xb33d(%rip),%xmm2        # 19410 <opt_phase_saving+0x30>
         : 51   Solver::Solver() :
    0.00 :   e0d3:   push   %rbx
    0.00 :   e0d4:   movhpd 0xb3c4(%rip),%xmm0        # 194a0 <opt_random_seed+0x40>
    0.00 :   e0dc:   mov    %rdi,%rbx
         : 56   , var_decay        (opt_var_decay)
    0.00 :   e0df:   movsd  0xb4d9(%rip),%xmm1        # 195c0 <opt_var_decay+0x40>
         : 98   , asynch_interrupt   (false)
    0.00 :   e0e7:   mov    %rax,(%rdi)
         : 60   , luby_restart     (opt_luby_restart)
    0.00 :   e0ea:   movzbl 0xb297(%rip),%eax        # 19388 <opt_luby_restart+0x28>
         : 86   , watches            (WatcherDeleted(ca))
    0.00 :   e0f1:   lea    0x228(%rdi),%rdi
         : 56   , var_decay        (opt_var_decay)
    0.00 :   e0f8:   movups %xmm0,-0x1e8(%rdi)
         : 61   , ccmin_mode       (opt_ccmin_mode)
    0.00 :   e0ff:   movd   0xb349(%rip),%xmm0        # 19450 <opt_ccmin_mode+0x30>
         : 56   , var_decay        (opt_var_decay)
    0.00 :   e107:   movhpd 0xb451(%rip),%xmm1        # 19560 <opt_clause_decay+0x40>
         : 60   , luby_restart     (opt_luby_restart)
    0.00 :   e10f:   mov    %al,-0x1d8(%rdi)
         : 64   , rnd_init_act     (opt_rnd_init_act)
    0.00 :   e115:   movzbl 0xb2ac(%rip),%eax        # 193c8 <opt_rnd_init_act+0x28>
         : 61   , ccmin_mode       (opt_ccmin_mode)
    0.00 :   e11c:   punpckldq %xmm2,%xmm0
         : 63   Minisat::vec<Minisat::lbool>::vec():
         : 54   //static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         : 55   static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         :
         : 57   public:
         : 58   // Constructors:
         : 59   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   e120:   movq   $0x0,-0x220(%rdi)
         : 61   Minisat::Solver::Solver():
         : 64   , rnd_init_act     (opt_rnd_init_act)
    0.00 :   e12b:   mov    %al,-0x1cb(%rdi)
         : 66   , restart_first    (opt_restart_first)
    0.00 :   e131:   mov    0xb219(%rip),%eax        # 19350 <opt_restart_first+0x30>
         : 61   , ccmin_mode       (opt_ccmin_mode)
    0.00 :   e137:   movq   %xmm0,-0x1d4(%rdi)
         : 65   , garbage_frac     (opt_garbage_frac)
    0.00 :   e13f:   movsd  0xb159(%rip),%xmm0        # 192a0 <opt_garbage_frac+0x40>
         : 66   , restart_first    (opt_restart_first)
    0.00 :   e147:   mov    %eax,-0x1c0(%rdi)
         : 71   , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
    0.00 :   e14d:   mov    0x71cc(%rip),%rax        # 15320 <typeinfo name for Minisat::Solver+0x40>
         : 65   , garbage_frac     (opt_garbage_frac)
  100.00 :   e154:   movsd  %xmm0,-0x1c8(%rdi)
         : 67   , restart_inc      (opt_restart_inc)
    0.00 :   e15c:   movsd  0xb19c(%rip),%xmm0        # 19300 <opt_restart_inc+0x40>
         : 71   , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
    0.00 :   e164:   mov    %rax,-0x1b0(%rdi)
    0.00 :   e16b:   mov    0x71b6(%rip),%rax        # 15328 <typeinfo name for Minisat::Solver+0x48>
         : 67   , restart_inc      (opt_restart_inc)
    0.00 :   e172:   movsd  %xmm0,-0x1b8(%rdi)
         : 80   , solves(0), starts(0), decisions(0), rnd_decisions(0), propagations(0), conflicts(0)
    0.00 :   e17a:   pxor   %xmm0,%xmm0
         : 82   Minisat::vec<Minisat::lbool>::vec():
    0.00 :   e17e:   movq   $0x0,-0x218(%rdi)
         : 55   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e189:   movq   $0x0,-0x210(%rdi)
    0.00 :   e194:   movq   $0x0,-0x208(%rdi)
         : 56   Minisat::Solver::Solver():
         : 55   verbosity        (0)
    0.00 :   e19f:   movl   $0x0,-0x200(%rdi)
         : 56   , var_decay        (opt_var_decay)
    0.00 :   e1a9:   movups %xmm1,-0x1f8(%rdi)
         : 63   , rnd_pol          (false)
    0.00 :   e1b0:   movb   $0x0,-0x1cc(%rdi)
         : 71   , learntsize_factor((double)1/(double)3), learntsize_inc(1.1)
    0.00 :   e1b7:   mov    %rax,-0x1a8(%rdi)
         : 76   , learntsize_adjust_inc         (1.5)
    0.00 :   e1be:   mov    0x716b(%rip),%rax        # 15330 <typeinfo name for Minisat::Solver+0x50>
         : 80   , solves(0), starts(0), decisions(0), rnd_decisions(0), propagations(0), conflicts(0)
    0.00 :   e1c5:   movups %xmm0,-0x190(%rdi)
    0.00 :   e1cc:   movups %xmm0,-0x180(%rdi)
    0.00 :   e1d3:   movups %xmm0,-0x170(%rdi)
    0.00 :   e1da:   movups %xmm0,-0x160(%rdi)
    0.00 :   e1e1:   movups %xmm0,-0x150(%rdi)
         : 84   , cla_inc            (1)
    0.00 :   e1e8:   movsd  0x71b8(%rip),%xmm0        # 153a8 <typeinfo name for Minisat::Solver+0xc8>
         : 76   , learntsize_adjust_inc         (1.5)
    0.00 :   e1f0:   mov    %rax,-0x198(%rdi)
         : 98   , asynch_interrupt   (false)
    0.00 :   e1f7:   lea    0x120(%rbx),%rax
         : 84   , cla_inc            (1)
    0.00 :   e1fe:   movsd  %xmm0,-0x110(%rdi)
         : 85   , var_inc            (1)
    0.00 :   e206:   movsd  %xmm0,-0xf8(%rdi)
         : 75   , learntsize_adjust_start_confl (100)
    0.00 :   e20e:   movl   $0x64,-0x1a0(%rdi)
         : 81   , dec_vars(0), clauses_literals(0), learnts_literals(0), max_literals(0), tot_literals(0)
    0.00 :   e218:   movq   $0x0,-0x140(%rdi)
         : 83   , ok                 (true)
    0.00 :   e223:   movb   $0x1,-0x138(%rdi)
         : 85   Minisat::vec<unsigned int>::vec():
    0.00 :   e22a:   movq   $0x0,-0x130(%rdi)
    0.00 :   e235:   movq   $0x0,-0x128(%rdi)
    0.00 :   e240:   movq   $0x0,-0x120(%rdi)
    0.00 :   e24b:   movq   $0x0,-0x118(%rdi)
         : 58   Minisat::vec<double>::vec():
    0.00 :   e256:   movq   $0x0,-0x108(%rdi)
    0.00 :   e261:   movq   $0x0,-0x100(%rdi)
         : 56   Minisat::vec<Minisat::vec<Minisat::Solver::Watcher> >::vec():
    0.00 :   e26c:   movq   $0x0,0x138(%rbx)
    0.00 :   e277:   movq   $0x0,0x140(%rbx)
         : 56   Minisat::vec<char>::vec():
    0.00 :   e282:   movq   $0x0,0x148(%rbx)
    0.00 :   e28d:   movq   $0x0,0x150(%rbx)
         : 56   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e298:   movq   $0x0,0x158(%rbx)
    0.00 :   e2a3:   movq   $0x0,0x160(%rbx)
         : 56   Minisat::OccLists<Minisat::Lit, Minisat::vec<Minisat::Solver::Watcher>, Minisat::Solver::WatcherDeleted>::OccLists(Minisat::Solver::WatcherDeleted const&):
         : 264  vec<char> dirty;
         : 265  vec<Idx>  dirties;
         : 266  Deleted   deleted;
         :
         : 268  public:
         : 269  OccLists(const Deleted& d) : deleted(d) {}
    0.00 :   e2ae:   mov    %rdi,0x168(%rbx)
         : 271  Minisat::vec<Minisat::lbool>::vec():
    0.00 :   e2b5:   movq   $0x0,0x170(%rbx)
    0.00 :   e2c0:   movq   $0x0,0x178(%rbx)
         : 56   Minisat::vec<char>::vec():
    0.00 :   e2cb:   movq   $0x0,0x180(%rbx)
    0.00 :   e2d6:   movq   $0x0,0x188(%rbx)
    0.00 :   e2e1:   movq   $0x0,0x190(%rbx)
    0.00 :   e2ec:   movq   $0x0,0x198(%rbx)
         : 58   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e2f7:   movq   $0x0,0x1a0(%rbx)
         : 55   Minisat::vec<Minisat::Solver::VarData>::vec():
    0.00 :   e302:   movdqa 0x7086(%rip),%xmm0        # 15390 <typeinfo name for Minisat::Solver+0xb0>
         : 55   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e30a:   movq   $0x0,0x1a8(%rbx)
         : 55   Minisat::vec<int>::vec():
    0.00 :   e315:   movq   $0x0,0x1b0(%rbx)
    0.00 :   e320:   movq   $0x0,0x1b8(%rbx)
         : 56   Minisat::vec<Minisat::Solver::VarData>::vec():
    0.00 :   e32b:   movq   $0x0,0x1c0(%rbx)
         : 55   Minisat::Solver::Solver():
         : 89   , simpDB_props       (0)
    0.00 :   e336:   movq   $0x0,0x1d8(%rbx)
         : 91   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e341:   movq   $0x0,0x1e0(%rbx)
    0.00 :   e34c:   movq   $0x0,0x1e8(%rbx)
         : 56   Minisat::Solver::Solver():
         : 98   , asynch_interrupt   (false)
    0.00 :   e357:   mov    %rax,0x1f0(%rbx)
         : 100  Minisat::vec<int>::vec():
    0.00 :   e35e:   movq   $0x0,0x1f8(%rbx)
    0.00 :   e369:   movq   $0x0,0x200(%rbx)
    0.00 :   e374:   movq   $0x0,0x208(%rbx)
    0.00 :   e37f:   movq   $0x0,0x210(%rbx)
         : 58   Minisat::Solver::Solver():
         : 91   , progress_estimate  (0)
    0.00 :   e38a:   movq   $0x0,0x218(%rbx)
         : 92   , remove_satisfied   (true)
    0.00 :   e395:   movb   $0x1,0x220(%rbx)
         : 94   Minisat::RegionAllocator<unsigned int>::RegionAllocator(unsigned int):
    0.00 :   e39c:   movq   $0x0,0x228(%rbx)
    0.00 :   e3a7:   movq   $0x0,0x230(%rbx)
    0.00 :   e3b2:   movl   $0x0,0x238(%rbx)
         : 51   Minisat::vec<Minisat::Solver::VarData>::vec():
    0.00 :   e3bc:   movups %xmm0,0x1c8(%rbx)
         : 55   Minisat::RegionAllocator<unsigned int>::RegionAllocator(unsigned int):
    0.00 :   e3c3:   call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         : 49   Minisat::Solver::Solver():
         : 96   , conflict_budget    (-1)
    0.00 :   e3c8:   pcmpeqd %xmm0,%xmm0
         : 98   Minisat::ClauseAllocator::ClauseAllocator():
         : 202  ClauseAllocator() : extra_clause_field(false){}
    0.00 :   e3cc:   movb   $0x0,0x23c(%rbx)
         : 204  Minisat::vec<char>::vec():
    0.00 :   e3d3:   movq   $0x0,0x240(%rbx)
    0.00 :   e3de:   movq   $0x0,0x248(%rbx)
         : 56   Minisat::vec<Minisat::Lit>::vec():
    0.00 :   e3e9:   movq   $0x0,0x250(%rbx)
    0.00 :   e3f4:   movq   $0x0,0x258(%rbx)
    0.00 :   e3ff:   movq   $0x0,0x260(%rbx)
    0.00 :   e40a:   movq   $0x0,0x268(%rbx)
    0.00 :   e415:   movq   $0x0,0x270(%rbx)
    0.00 :   e420:   movq   $0x0,0x278(%rbx)
         : 60   Minisat::Solver::Solver():
         : 98   , asynch_interrupt   (false)
    0.00 :   e42b:   movb   $0x0,0x2a8(%rbx)
         : 96   , conflict_budget    (-1)
    0.00 :   e432:   movups %xmm0,0x298(%rbx)
         : 99   {}
    0.00 :   e439:   pop    %rbx
    0.00 :   e43a:   pop    %rbp
    0.00 :   e43b:   pop    %r12
    0.00 :   e43d:   ret
    0.00 :   e43e:   endbr64
         : 105  Minisat::vec<int>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   e442:   mov    %rax,%r12
    0.00 :   e445:   jmp    2826 <Minisat::Solver::Solver() [clone .cold]>
 Percent |	Source code & Disassembly of libstdc++.so.6.0.30 for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000ae760 <__cxa_guard_release@@CXXABI_1.3>:
    0.00 :   ae760:  endbr64
  100.00 :   ae764:  mov    0x176b75(%rip),%rax        # 2252e0 <__libc_single_threaded@GLIBC_2.32>
    0.00 :   ae76b:  cmpb   $0x0,(%rax)
    0.00 :   ae76e:  je     ae780 <__cxa_guard_release@@CXXABI_1.3+0x20>
    0.00 :   ae770:  movl   $0x1,(%rdi)
    0.00 :   ae776:  ret
    0.00 :   ae777:  nopw   0x0(%rax,%rax,1)
    0.00 :   ae780:  mov    $0x1,%eax
    0.00 :   ae785:  xchg   %eax,(%rdi)
    0.00 :   ae787:  test   $0x10000,%eax
    0.00 :   ae78c:  jne    ae790 <__cxa_guard_release@@CXXABI_1.3+0x30>
    0.00 :   ae78e:  ret
    0.00 :   ae78f:  nop
    0.00 :   ae790:  mov    %rdi,%rsi
    0.00 :   ae793:  mov    $0x7fffffff,%ecx
    0.00 :   ae798:  mov    $0x1,%edx
    0.00 :   ae79d:  xor    %eax,%eax
    0.00 :   ae79f:  mov    $0xca,%edi
    0.00 :   ae7a4:  jmp    a01b0 <syscall@plt>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000455f0 <exit>:
         : 6     __GI_exit():
         : 7     ./stdlib/exit.c:142
    0.00 :   455f0:  endbr64
  100.00 :   455f4:  push   %rax
    0.00 :   455f5:  pop    %rax
         : 11    ./stdlib/exit.c:143
    0.00 :   455f6:  mov    $0x1,%ecx
    0.00 :   455fb:  mov    $0x1,%edx
    0.00 :   45600:  lea    0x1d5231(%rip),%rsi        # 21a838 <__exit_funcs>
         : 15    ./stdlib/exit.c:142
    0.00 :   45607:  sub    $0x8,%rsp
         : 17    ./stdlib/exit.c:143
    0.00 :   4560b:  call   45390 <__run_exit_handlers>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000ac20 <Minisat::SimpSolver::newVar(bool, bool)>:
         : 6    Minisat::SimpSolver::newVar(bool, bool):
         : 76   SimpSolver::~SimpSolver()
         : 77   {
         : 78   }
         :
         :
         : 81   Var SimpSolver::newVar(bool sign, bool dvar) {
    0.00 :   ac20:   endbr64
    0.00 :   ac24:   push   %r14
         : 77   Var v = Solver::newVar(sign, dvar);
    0.00 :   ac26:   movzbl %sil,%esi
    0.00 :   ac2a:   movzbl %dl,%edx
         : 76   Var SimpSolver::newVar(bool sign, bool dvar) {
    0.00 :   ac2d:   push   %r13
    0.00 :   ac2f:   push   %r12
    0.00 :   ac31:   push   %rbp
    0.00 :   ac32:   push   %rbx
    0.00 :   ac33:   mov    %rdi,%rbx
         : 77   Var v = Solver::newVar(sign, dvar);
    0.00 :   ac36:   call   11a60 <Minisat::Solver::newVar(bool, bool)>
         : 79   Minisat::vec<char>::push(char const&):
         : 74   void     growTo   (int size, const T& pad);
         : 75   void     clear    (bool dealloc = false);
         :
         : 77   // Stack interface:
         : 78   void     push  (void)              { if (sz == cap) capacity(sz+1); new (&data[sz]) T(); sz++; }
         : 79   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   ac3b:   movslq 0x388(%rbx),%rsi
         : 81   Minisat::SimpSolver::newVar(bool, bool):
    0.00 :   ac42:   mov    %eax,%r12d
         : 78   Minisat::vec<char>::push(char const&):
    0.00 :   ac45:   cmp    0x38c(%rbx),%esi
    0.00 :   ac4b:   je     adc0 <Minisat::SimpSolver::newVar(bool, bool)+0x1a0>
    0.00 :   ac51:   mov    0x380(%rbx),%rax
    0.00 :   ac58:   lea    0x1(%rsi),%edx
    0.00 :   ac5b:   mov    %edx,0x388(%rbx)
    0.00 :   ac61:   movb   $0x0,(%rax,%rsi,1)
    0.00 :   ac65:   movslq 0x398(%rbx),%rsi
    0.00 :   ac6c:   cmp    0x39c(%rbx),%esi
    0.00 :   ac72:   je     ada0 <Minisat::SimpSolver::newVar(bool, bool)+0x180>
    0.00 :   ac78:   mov    0x390(%rbx),%rax
    0.00 :   ac7f:   lea    0x1(%rsi),%edx
    0.00 :   ac82:   mov    %edx,0x398(%rbx)
    0.00 :   ac88:   movb   $0x0,(%rax,%rsi,1)
         : 87   Minisat::SimpSolver::newVar(bool, bool):
         :
         : 83   frozen    .push((char)false);
         : 84   eliminated.push((char)false);
         :
         : 86   if (use_simplification){
    0.00 :   ac8c:   cmpb   $0x0,0x2d4(%rbx)
    0.00 :   ac93:   jne    aca8 <Minisat::SimpSolver::newVar(bool, bool)+0x88>
         : 89   n_occ     .push(0);
         : 90   occurs    .init(v);
         : 91   touched   .push(0);
         : 92   elim_heap .insert(v);
         : 93   }
         : 94   return v; }
    0.00 :   ac95:   pop    %rbx
    0.00 :   ac96:   mov    %r12d,%eax
    0.00 :   ac99:   pop    %rbp
    0.00 :   ac9a:   pop    %r12
    0.00 :   ac9c:   pop    %r13
    0.00 :   ac9e:   pop    %r14
    0.00 :   aca0:   ret
    0.00 :   aca1:   nopl   0x0(%rax)
         : 103  Minisat::vec<int>::push(int const&):
    0.00 :   aca8:   movslq 0x338(%rbx),%rsi
         : 75   Minisat::SimpSolver::newVar(bool, bool):
         : 83   n_occ     .push(0);
    0.00 :   acaf:   lea    0x330(%rbx),%rbp
         : 85   Minisat::vec<int>::push(int const&):
    0.00 :   acb6:   cmp    0x33c(%rbx),%esi
    0.00 :   acbc:   je     b0b0 <Minisat::SimpSolver::newVar(bool, bool)+0x490>
    0.00 :   acc2:   mov    0x330(%rbx),%rax
    0.00 :   acc9:   lea    0x1(%rsi),%edx
    0.00 :   accc:   mov    %edx,0x338(%rbx)
    0.00 :   acd2:   movl   $0x0,(%rax,%rsi,4)
    0.00 :   acd9:   movslq 0x338(%rbx),%rsi
    0.00 :   ace0:   cmp    0x33c(%rbx),%esi
    0.00 :   ace6:   je     b090 <Minisat::SimpSolver::newVar(bool, bool)+0x470>
    0.00 :   acec:   lea    0x1(%rsi),%edx
         : 84   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::init(int const&):
         : 266  Deleted   deleted;
         :
         : 268  public:
         : 269  OccLists(const Deleted& d) : deleted(d) {}
         :
         : 271  void  init      (const Idx& idx){ occs.growTo(toInt(idx)+1); dirty.growTo(toInt(idx)+1, 0); }
    0.00 :   acef:   lea    0x1(%r12),%r13d
         : 273  Minisat::vec<int>::push(int const&):
    0.00 :   acf4:   mov    %edx,0x338(%rbx)
    0.00 :   acfa:   movl   $0x0,(%rax,%rsi,4)
         : 76   Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 114  sz = size; }
         :
         :
         : 117  template<class T>
         : 118  void vec<T>::growTo(int size) {
         : 119  if (sz >= size) return;
    0.00 :   ad01:   cmp    0x300(%rbx),%r13d
    0.00 :   ad08:   jg     ae38 <Minisat::SimpSolver::newVar(bool, bool)+0x218>
         : 122  Minisat::vec<char>::growTo(int, char const&):
         : 106  if (sz >= size) return;
    0.00 :   ad0e:   cmp    0x310(%rbx),%r13d
    0.00 :   ad15:   jg     ade0 <Minisat::SimpSolver::newVar(bool, bool)+0x1c0>
         : 109  Minisat::vec<char>::push(char const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   ad1b:   movslq 0x2f0(%rbx),%rsi
    0.00 :   ad22:   cmp    0x2f4(%rbx),%esi
    0.00 :   ad28:   je     b070 <Minisat::SimpSolver::newVar(bool, bool)+0x450>
    0.00 :   ad2e:   mov    0x2e8(%rbx),%rax
    0.00 :   ad35:   lea    0x1(%rsi),%edx
    0.00 :   ad38:   mov    %edx,0x2f0(%rbx)
    0.00 :   ad3e:   movb   $0x0,(%rax,%rsi,1)
         : 82   Minisat::vec<int>::growTo(int, int const&):
         : 106  if (sz >= size) return;
    0.00 :   ad42:   mov    0x360(%rbx),%eax
    0.00 :   ad48:   cmp    %r13d,%eax
    0.00 :   ad4b:   jl     af50 <Minisat::SimpSolver::newVar(bool, bool)+0x330>
         : 110  Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   ad51:   mov    0x358(%rbx),%rbp
    0.00 :   ad58:   movslq %r12d,%r13
    0.00 :   ad5b:   shl    $0x2,%r13
    0.00 :   ad5f:   lea    0x0(%rbp,%r13,1),%rdx
         : 91   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   public:
         : 81   Heap(const Comp& c) : lt(c) { }
         :
         : 83   int  size      ()          const { return heap.size(); }
         : 84   bool empty     ()          const { return heap.size() == 0; }
         : 85   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   ad64:   cmp    %eax,%r12d
    0.00 :   ad67:   jge    afa0 <Minisat::SimpSolver::newVar(bool, bool)+0x380>
    0.00 :   ad6d:   mov    (%rdx),%eax
    0.00 :   ad6f:   test   %eax,%eax
    0.00 :   ad71:   js     afa0 <Minisat::SimpSolver::newVar(bool, bool)+0x380>
         : 91   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         :
         :
         : 104  void insert(int n)
         : 105  {
         : 106  indices.growTo(n+1, -1);
         : 107  assert(!inHeap(n));
    0.00 :   ad77:   lea    0x8ec2(%rip),%rcx        # 13c40 <typeinfo name for Minisat::BoolOption+0x330>
    0.00 :   ad7e:   mov    $0x66,%edx
    0.00 :   ad83:   lea    0x9709(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   ad8a:   lea    0x9710(%rip),%rdi        # 144a1 <typeinfo name for Minisat::BoolOption+0xb91>
    0.00 :   ad91:   call   23b0 <__assert_fail@plt>
    0.00 :   ad96:   cs nopw 0x0(%rax,%rax,1)
         : 114  Minisat::vec<char>::push(char const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   ada0:   add    $0x1,%esi
         : 76   Minisat::SimpSolver::newVar(bool, bool):
         : 80   eliminated.push((char)false);
    0.00 :   ada3:   lea    0x390(%rbx),%rdi
         : 82   Minisat::vec<char>::push(char const&):
    0.00 :   adaa:   call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   adaf:   movslq 0x398(%rbx),%rsi
    0.00 :   adb6:   jmp    ac78 <Minisat::SimpSolver::newVar(bool, bool)+0x58>
    0.00 :   adbb:   nopl   0x0(%rax,%rax,1)
    0.00 :   adc0:   add    $0x1,%esi
         : 79   Minisat::SimpSolver::newVar(bool, bool):
         : 79   frozen    .push((char)false);
    0.00 :   adc3:   lea    0x380(%rbx),%rdi
         : 81   Minisat::vec<char>::push(char const&):
    0.00 :   adca:   call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   adcf:   movslq 0x388(%rbx),%rsi
    0.00 :   add6:   jmp    ac51 <Minisat::SimpSolver::newVar(bool, bool)+0x31>
    0.00 :   addb:   nopl   0x0(%rax,%rax,1)
         : 78   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::init(int const&):
    0.00 :   ade0:   lea    0x308(%rbx),%rdi
         : 267  Minisat::vec<char>::growTo(int, char const&):
         : 107  capacity(size);
    0.00 :   ade7:   mov    %r13d,%esi
    0.00 :   adea:   call   b4c0 <Minisat::vec<char>::capacity(int)>
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   adef:   mov    0x310(%rbx),%ecx
    0.00 :   adf5:   cmp    %ecx,%r13d
    0.00 :   adf8:   jle    ae27 <Minisat::SimpSolver::newVar(bool, bool)+0x207>
    0.00 :   adfa:   movslq %ecx,%rdx
    0.00 :   adfd:   mov    %r12d,%esi
    0.00 :   ae00:   lea    0x1(%rdx),%rax
    0.00 :   ae04:   sub    %ecx,%esi
    0.00 :   ae06:   add    %rax,%rsi
    0.00 :   ae09:   jmp    ae14 <Minisat::SimpSolver::newVar(bool, bool)+0x1f4>
    0.00 :   ae0b:   nopl   0x0(%rax,%rax,1)
    0.00 :   ae10:   add    $0x1,%rax
    0.00 :   ae14:   mov    0x308(%rbx),%rcx
    0.00 :   ae1b:   movb   $0x0,(%rcx,%rdx,1)
    0.00 :   ae1f:   mov    %rax,%rdx
    0.00 :   ae22:   cmp    %rsi,%rax
    0.00 :   ae25:   jne    ae10 <Minisat::SimpSolver::newVar(bool, bool)+0x1f0>
         : 109  sz = size; }
    0.00 :   ae27:   mov    %r13d,0x310(%rbx)
    0.00 :   ae2e:   jmp    ad1b <Minisat::SimpSolver::newVar(bool, bool)+0xfb>
    0.00 :   ae33:   nopl   0x0(%rax,%rax,1)
         : 113  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::init(int const&):
    0.00 :   ae38:   lea    0x2f8(%rbx),%rdi
         : 267  Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 115  capacity(size);
    0.00 :   ae3f:   mov    %r13d,%esi
    0.00 :   ae42:   call   b6e0 <Minisat::vec<Minisat::vec<unsigned int> >::capacity(int)>
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   ae47:   mov    0x300(%rbx),%edi
    0.00 :   ae4d:   cmp    %edi,%r13d
    0.00 :   ae50:   jle    af37 <Minisat::SimpSolver::newVar(bool, bool)+0x317>
    0.00 :   ae56:   mov    %r12d,%eax
    0.00 :   ae59:   mov    0x2f8(%rbx),%r8
    0.00 :   ae60:   sub    %edi,%eax
    0.00 :   ae62:   lea    0x1(%rax),%r9d
    0.00 :   ae66:   cmp    $0x2,%eax
    0.00 :   ae69:   jbe    aee8 <Minisat::SimpSolver::newVar(bool, bool)+0x2c8>
    0.00 :   ae6b:   sub    $0x3,%eax
    0.00 :   ae6e:   xor    %esi,%esi
    0.00 :   ae70:   shr    $0x2,%eax
    0.00 :   ae73:   lea    0x1(%rax),%ecx
    0.00 :   ae76:   movslq %edi,%rax
    0.00 :   ae79:   shl    $0x4,%rax
    0.00 :   ae7d:   lea    (%r8,%rax,1),%rdx
    0.00 :   ae81:   lea    0x8(%r8,%rax,1),%rax
    0.00 :   ae86:   cs nopw 0x0(%rax,%rax,1)
         : 135  Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   ae90:   add    $0x1,%esi
    0.00 :   ae93:   movq   $0x0,(%rdx)
    0.00 :   ae9a:   add    $0x40,%rax
    0.00 :   ae9e:   add    $0x40,%rdx
    0.00 :   aea2:   movq   $0x0,-0x30(%rdx)
    0.00 :   aeaa:   movq   $0x0,-0x20(%rdx)
    0.00 :   aeb2:   movq   $0x0,-0x10(%rdx)
    0.00 :   aeba:   movq   $0x0,-0x40(%rax)
    0.00 :   aec2:   movq   $0x0,-0x30(%rax)
    0.00 :   aeca:   movq   $0x0,-0x20(%rax)
    0.00 :   aed2:   movq   $0x0,-0x10(%rax)
         : 66   Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   aeda:   cmp    %ecx,%esi
    0.00 :   aedc:   jb     ae90 <Minisat::SimpSolver::newVar(bool, bool)+0x270>
    0.00 :   aede:   shl    $0x2,%ecx
    0.00 :   aee1:   add    %ecx,%edi
    0.00 :   aee3:   cmp    %ecx,%r9d
    0.00 :   aee6:   je     af37 <Minisat::SimpSolver::newVar(bool, bool)+0x317>
    0.00 :   aee8:   movslq %edi,%rax
    0.00 :   aeeb:   lea    0x1(%rdi),%ecx
    0.00 :   aeee:   shl    $0x4,%rax
    0.00 :   aef2:   lea    (%r8,%rax,1),%rdx
         : 127  Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   aef6:   movq   $0x0,(%rdx)
    0.00 :   aefd:   movq   $0x0,0x8(%rdx)
         : 57   Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   af05:   cmp    %edi,%r12d
    0.00 :   af08:   jle    af37 <Minisat::SimpSolver::newVar(bool, bool)+0x317>
    0.00 :   af0a:   lea    0x10(%r8,%rax,1),%rdx
         : 120  Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   af0f:   movq   $0x0,(%rdx)
    0.00 :   af16:   movq   $0x0,0x8(%rdx)
         : 57   Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 116  for (int i = sz; i < size; i++) new (&data[i]) T();
    0.00 :   af1e:   cmp    %ecx,%r12d
    0.00 :   af21:   jle    af37 <Minisat::SimpSolver::newVar(bool, bool)+0x317>
    0.00 :   af23:   lea    0x20(%r8,%rax,1),%rax
         : 120  Minisat::vec<unsigned int>::vec():
         : 54   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   af28:   movq   $0x0,(%rax)
    0.00 :   af2f:   movq   $0x0,0x8(%rax)
         : 57   Minisat::vec<Minisat::vec<unsigned int> >::growTo(int):
         : 117  sz = size; }
    0.00 :   af37:   mov    %r13d,0x300(%rbx)
         : 119  Minisat::vec<char>::growTo(int, char const&):
         : 106  if (sz >= size) return;
    0.00 :   af3e:   cmp    0x310(%rbx),%r13d
    0.00 :   af45:   jle    ad1b <Minisat::SimpSolver::newVar(bool, bool)+0xfb>
    0.00 :   af4b:   jmp    ade0 <Minisat::SimpSolver::newVar(bool, bool)+0x1c0>
         : 110  Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   af50:   lea    0x358(%rbx),%rdi
         : 103  Minisat::vec<int>::growTo(int, int const&):
         : 107  capacity(size);
    0.00 :   af57:   mov    %r13d,%esi
    0.00 :   af5a:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   af5f:   movslq 0x360(%rbx),%rax
    0.00 :   af66:   mov    0x358(%rbx),%rbp
    0.00 :   af6d:   cmp    %eax,%r13d
    0.00 :   af70:   jle    af8e <Minisat::SimpSolver::newVar(bool, bool)+0x36e>
    0.00 :   af72:   mov    %r12d,%edx
    0.00 :   af75:   lea    0x0(%rbp,%rax,4),%rdi
    0.00 :   af7a:   mov    $0xff,%esi
    0.00 :   af7f:   sub    %eax,%edx
    0.00 :   af81:   lea    0x4(,%rdx,4),%rdx
    0.00 :   af89:   call   2370 <memset@plt>
         : 109  sz = size; }
    0.00 :   af8e:   mov    %r13d,0x360(%rbx)
    0.00 :   af95:   mov    %r13d,%eax
    0.00 :   af98:   jmp    ad58 <Minisat::SimpSolver::newVar(bool, bool)+0x138>
    0.00 :   af9d:   nopl   (%rax)
         : 114  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   afa0:   mov    0x350(%rbx),%esi
         : 65   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         :
         : 105  indices[n] = heap.size();
    0.00 :   afa6:   mov    %esi,(%rdx)
         : 107  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   afa8:   cmp    0x354(%rbx),%esi
    0.00 :   afae:   je     b0d0 <Minisat::SimpSolver::newVar(bool, bool)+0x4b0>
    0.00 :   afb4:   movslq 0x350(%rbx),%rax
    0.00 :   afbb:   mov    0x348(%rbx),%r8
    0.00 :   afc2:   lea    0x1(%rax),%ecx
    0.00 :   afc5:   mov    %ecx,0x350(%rbx)
    0.00 :   afcb:   mov    %r12d,(%r8,%rax,4)
         : 82   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 106  heap.push(n);
         : 107  percolateUp(indices[n]);
    0.00 :   afcf:   movslq (%rdx),%rdi
         : 109  Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   afd2:   lea    -0x1(%rdi),%esi
         : 43   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.00 :   afd5:   movslq (%r8,%rdi,4),%r11
         : 48   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 106  percolateUp(indices[n]);
    0.00 :   afd9:   mov    %rdi,%rcx
         : 108  Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   afdc:   sar    %esi
         : 43   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   afde:   test   %edi,%edi
    0.00 :   afe0:   je     b059 <Minisat::SimpSolver::newVar(bool, bool)+0x439>
         : 52   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   afe2:   mov    0x340(%rbx),%rdx
         : 88   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   afe9:   lea    (%r11,%r11,1),%eax
         : 60   Minisat::vec<int>::operator[](int) const:
    0.00 :   afed:   mov    (%rdx),%r9
    0.00 :   aff0:   movslq %eax,%rdx
         : 88   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   aff3:   xor    $0x1,%eax
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   aff6:   cltq
    0.00 :   aff8:   lea    (%r9,%rdx,4),%rbx
    0.00 :   affc:   lea    (%r9,%rax,4),%r10
  100.00 :   b000:   jmp    b020 <Minisat::SimpSolver::newVar(bool, bool)+0x400>
    0.00 :   b002:   nopw   0x0(%rax,%rax,1)
         : 91   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    0.00 :   b008:   mov    %eax,0x0(%r13)
         : 51   indices[heap[p]] = i;
    0.00 :   b00c:   mov    %ecx,0x0(%rbp,%rax,4)
         : 53   Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   b010:   lea    -0x1(%rsi),%eax
    0.00 :   b013:   mov    %esi,%ecx
    0.00 :   b015:   sar    %eax
         : 45   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   b017:   test   %esi,%esi
    0.00 :   b019:   je     b059 <Minisat::SimpSolver::newVar(bool, bool)+0x439>
         : 53   p                = parent(p);
    0.00 :   b01b:   mov    %eax,%esi
    0.00 :   b01d:   movslq %ecx,%rdi
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   b020:   movslq %esi,%rax
         : 89   Minisat::SimpSolver::ElimLt::cost(int) const:
         : 109  const vec<int>& n_occ;
         : 110  explicit ElimLt(const vec<int>& no) : n_occ(no) {}
         :
         : 112  // TODO: are 64-bit operations here noticably bad on 32-bit platforms? Could use a saturating
         : 113  // 32-bit implementation instead then, but this will have to do for now.
         : 114  uint64_t cost  (Var x)        const { return (uint64_t)n_occ[toInt(mkLit(x))] * (uint64_t)n_occ[toInt(~mkLit(x))]; }
    0.00 :   b023:   movslq (%r10),%r14
         : 116  Minisat::vec<int>::operator[](int):
    0.00 :   b026:   lea    (%r8,%rdi,4),%r13
         : 88   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   b02a:   movslq (%rbx),%rdi
         : 110  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   b02d:   movslq (%r8,%rax,4),%rax
         : 51   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   b031:   imul   %r14,%rdi
         : 110  Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   b035:   lea    (%rax,%rax,1),%edx
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   b038:   mov    %edx,%r14d
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   b03b:   movslq %edx,%rdx
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   b03e:   xor    $0x1,%r14d
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   b042:   movslq (%r9,%rdx,4),%rdx
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   b046:   movslq %r14d,%r14
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   b049:   movslq (%r9,%r14,4),%r14
    0.00 :   b04d:   imul   %r14,%rdx
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
    0.00 :   b051:   cmp    %rdx,%rdi
    0.00 :   b054:   jb     b008 <Minisat::SimpSolver::newVar(bool, bool)+0x3e8>
         : 51   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   b056:   mov    %r13,%r8
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 55   heap   [i] = x;
    0.00 :   b059:   mov    %r11d,(%r8)
         : 57   Minisat::SimpSolver::newVar(bool, bool):
         : 89   return v; }
    0.00 :   b05c:   mov    %r12d,%eax
         : 91   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 56   indices[x] = i;
    0.00 :   b05f:   mov    %ecx,0x0(%rbp,%r11,4)
         : 58   Minisat::SimpSolver::newVar(bool, bool):
    0.00 :   b064:   pop    %rbx
    0.00 :   b065:   pop    %rbp
    0.00 :   b066:   pop    %r12
    0.00 :   b068:   pop    %r13
    0.00 :   b06a:   pop    %r14
    0.00 :   b06c:   ret
    0.00 :   b06d:   nopl   (%rax)
         : 96   Minisat::vec<char>::push(char const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   b070:   add    $0x1,%esi
         : 76   Minisat::SimpSolver::newVar(bool, bool):
         : 86   touched   .push(0);
    0.00 :   b073:   lea    0x2e8(%rbx),%rdi
         : 88   Minisat::vec<char>::push(char const&):
    0.00 :   b07a:   call   b4c0 <Minisat::vec<char>::capacity(int)>
    0.00 :   b07f:   movslq 0x2f0(%rbx),%rsi
    0.00 :   b086:   jmp    ad2e <Minisat::SimpSolver::newVar(bool, bool)+0x10e>
    0.00 :   b08b:   nopl   0x0(%rax,%rax,1)
         : 78   Minisat::vec<int>::push(int const&):
    0.00 :   b090:   add    $0x1,%esi
    0.00 :   b093:   mov    %rbp,%rdi
    0.00 :   b096:   call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   b09b:   mov    0x330(%rbx),%rax
    0.00 :   b0a2:   movslq 0x338(%rbx),%rsi
    0.00 :   b0a9:   jmp    acec <Minisat::SimpSolver::newVar(bool, bool)+0xcc>
    0.00 :   b0ae:   xchg   %ax,%ax
    0.00 :   b0b0:   add    $0x1,%esi
    0.00 :   b0b3:   mov    %rbp,%rdi
    0.00 :   b0b6:   call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   b0bb:   movslq 0x338(%rbx),%rsi
    0.00 :   b0c2:   jmp    acc2 <Minisat::SimpSolver::newVar(bool, bool)+0xa2>
    0.00 :   b0c7:   nopw   0x0(%rax,%rax,1)
    0.00 :   b0d0:   add    $0x1,%esi
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 105  heap.push(n);
    0.00 :   b0d3:   lea    0x348(%rbx),%rdi
         : 107  Minisat::vec<int>::push(int const&):
    0.00 :   b0da:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 75   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   b0df:   mov    0x358(%rbx),%rbp
    0.00 :   b0e6:   lea    0x0(%rbp,%r13,1),%rdx
         : 90   Minisat::vec<int>::push(int const&):
    0.00 :   b0eb:   jmp    afb4 <Minisat::SimpSolver::newVar(bool, bool)+0x394>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000039d0 <_GLOBAL__sub_I__ZN7Minisat6SolverC2Ev>:
         : 6    _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
         : 923  relocAll(to);
         : 924  if (verbosity >= 2)
         : 925  printf("|  Garbage collection:   %12d bytes => %12d bytes             |\n",
         : 926  ca.size()*ClauseAllocator::Unit_Size, to.size()*ClauseAllocator::Unit_Size);
         : 927  to.moveTo(ca);
         : 928  }
    0.00 :   39d0:   endbr64
    0.00 :   39d4:   push   %r15
    0.00 :   39d6:   lea    0x11573(%rip),%rdx        # 14f50 <Minisat::lit_Undef+0x7f8>
         : 932  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   const char* cate_,
         : 75   const char* type_) :
         : 76   name       (name_)
         : 77   , description(desc_)
         : 78   , category   (cate_)
         : 79   , type_name  (type_)
    0.00 :   39dd:   lea    0x15b3c(%rip),%r15        # 19520 <opt_clause_decay>
         : 81   _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
    0.00 :   39e4:   push   %r14
    0.00 :   39e6:   movq   %rdx,%xmm3
    0.00 :   39eb:   lea    0x11816(%rip),%rdx        # 15208 <Minisat::lit_Undef+0xab0>
         : 926  Minisat::Option::Option(char const*, char const*, char const*, char const*):
    0.00 :   39f2:   lea    0x15b87(%rip),%r14        # 19580 <opt_var_decay>
         : 75   _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
    0.00 :   39f9:   push   %r13
         : 924  Minisat::Option::Option(char const*, char const*, char const*, char const*):
    0.00 :   39fb:   lea    0x10c21(%rip),%r13        # 14623 <typeinfo name for Minisat::BoolOption+0xd13>
         : 75   _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
    0.00 :   3a02:   push   %r12
         : 34   static DoubleOption  opt_var_decay         (_cat, "var-decay",   "The variable activity decay factor",            0.95,     DoubleRange(0, false, 1, false));
    0.00 :   3a04:   lea    0x155fd(%rip),%r12        # 19008 <__dso_handle>
         : 923  }
    0.00 :   3a0b:   push   %rbp
    0.00 :   3a0c:   push   %rbx
         : 926  Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  DoubleRange range;
         : 130  double      value;
         :
         : 132  public:
         : 133  DoubleOption(const char* c, const char* n, const char* d, double def = double(), DoubleRange r = DoubleRange(-HUGE_VAL, false, HUGE_VAL, false))
         : 134  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3a0d:   lea    0x150c4(%rip),%rbx        # 18ad8 <vtable for Minisat::DoubleOption+0x10>
         : 136  _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
    0.00 :   3a14:   sub    $0x158,%rsp
    0.00 :   3a1b:   mov    %fs:0x28,%rax
    0.00 :   3a24:   mov    %rax,0x148(%rsp)
    0.00 :   3a2c:   lea    0x1518d(%rip),%rax        # 18bc0 <vtable for Minisat::Option+0x10>
         : 927  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 76   getOptionList().push(this);
    0.00 :   3a33:   lea    0x140(%rsp),%rbp
         : 74   , type_name  (type_)
    0.00 :   3a3b:   mov    %r13,0x15b5e(%rip)        # 195a0 <opt_var_decay+0x20>
    0.00 :   3a42:   movq   %rax,%xmm0
    0.00 :   3a47:   lea    0x10b84(%rip),%rax        # 145d2 <typeinfo name for Minisat::BoolOption+0xcc2>
    0.00 :   3a4e:   movq   %rax,%xmm1
    0.00 :   3a53:   movdqa %xmm0,%xmm2
    0.00 :   3a57:   movdqa %xmm0,%xmm4
    0.00 :   3a5b:   punpcklqdq %xmm1,%xmm2
    0.00 :   3a5f:   movq   %rdx,%xmm1
    0.00 :   3a64:   movdqa %xmm0,%xmm6
    0.00 :   3a68:   lea    0x11531(%rip),%rdx        # 14fa0 <Minisat::lit_Undef+0x848>
    0.00 :   3a6f:   punpcklqdq %xmm1,%xmm4
    0.00 :   3a73:   movdqa %xmm0,%xmm9
    0.00 :   3a78:   movaps %xmm2,(%rsp)
    0.00 :   3a7c:   movq   %rdx,%xmm5
    0.00 :   3a81:   movdqa %xmm0,%xmm10
    0.00 :   3a86:   movdqa %xmm0,%xmm11
    0.00 :   3a8b:   movaps %xmm4,0x20(%rsp)
    0.00 :   3a90:   movdqa %xmm0,%xmm12
    0.00 :   3a95:   movdqa %xmm0,%xmm13
    0.00 :   3a9a:   movdqa %xmm0,%xmm14
    0.00 :   3a9f:   lea    0x11767(%rip),%rdx        # 1520d <Minisat::lit_Undef+0xab5>
    0.00 :   3aa6:   lea    0x11756(%rip),%rax        # 15203 <Minisat::lit_Undef+0xaab>
    0.00 :   3aad:   movdqa %xmm0,%xmm15
    0.00 :   3ab2:   movq   %rdx,%xmm1
    0.00 :   3ab7:   lea    0x11756(%rip),%rdx        # 15214 <Minisat::lit_Undef+0xabc>
    0.00 :   3abe:   movq   %rax,%xmm8
    0.00 :   3ac3:   movq   %rdx,%xmm7
    0.00 :   3ac8:   lea    0x1175f(%rip),%rdx        # 1522e <Minisat::lit_Undef+0xad6>
    0.00 :   3acf:   punpcklqdq %xmm1,%xmm6
    0.00 :   3ad3:   movq   %rdx,%xmm1
    0.00 :   3ad8:   punpcklqdq %xmm8,%xmm3
    0.00 :   3add:   punpcklqdq %xmm8,%xmm5
    0.00 :   3ae2:   movaps %xmm6,0x40(%rsp)
    0.00 :   3ae7:   punpcklqdq %xmm1,%xmm9
    0.00 :   3aec:   movaps %xmm3,0x10(%rsp)
    0.00 :   3af1:   punpcklqdq %xmm8,%xmm7
    0.00 :   3af6:   lea    0x11736(%rip),%rax        # 15233 <Minisat::lit_Undef+0xadb>
    0.00 :   3afd:   movq   %rax,%xmm1
    0.00 :   3b02:   lea    0x11748(%rip),%rdx        # 15251 <Minisat::lit_Undef+0xaf9>
    0.00 :   3b09:   movaps %xmm5,0x30(%rsp)
    0.00 :   3b0e:   lea    0x114b3(%rip),%rax        # 14fc8 <Minisat::lit_Undef+0x870>
    0.00 :   3b15:   punpcklqdq %xmm8,%xmm1
    0.00 :   3b1a:   movq   %rax,%xmm2
    0.00 :   3b1f:   lea    0x114c2(%rip),%rax        # 14fe8 <Minisat::lit_Undef+0x890>
    0.00 :   3b26:   movaps %xmm7,0x50(%rsp)
    0.00 :   3b2b:   movaps %xmm1,0x120(%rsp)
    0.00 :   3b33:   movq   %rdx,%xmm1
    0.00 :   3b38:   lea    0x1171b(%rip),%rdx        # 1525a <Minisat::lit_Undef+0xb02>
    0.00 :   3b3f:   movq   %rax,%xmm3
    0.00 :   3b44:   punpcklqdq %xmm1,%xmm10
    0.00 :   3b49:   movq   %rdx,%xmm1
    0.00 :   3b4e:   punpcklqdq %xmm8,%xmm2
    0.00 :   3b53:   movaps %xmm9,0x130(%rsp)
    0.00 :   3b5c:   lea    0x11704(%rip),%rdx        # 15267 <Minisat::lit_Undef+0xb0f>
    0.00 :   3b63:   punpcklqdq %xmm1,%xmm11
    0.00 :   3b68:   lea    0x114b9(%rip),%rax        # 15028 <Minisat::lit_Undef+0x8d0>
    0.00 :   3b6f:   movaps %xmm10,0x110(%rsp)
    0.00 :   3b78:   movq   %rdx,%xmm1
    0.00 :   3b7d:   lea    0x116ee(%rip),%rdx        # 15272 <Minisat::lit_Undef+0xb1a>
    0.00 :   3b84:   movq   %rax,%xmm4
    0.00 :   3b89:   movaps %xmm2,0x100(%rsp)
    0.00 :   3b91:   punpcklqdq %xmm1,%xmm12
    0.00 :   3b96:   movq   %rdx,%xmm1
    0.00 :   3b9b:   punpcklqdq %xmm8,%xmm3
    0.00 :   3ba0:   movaps %xmm11,0xf0(%rsp)
    0.00 :   3ba9:   lea    0x116cb(%rip),%rdx        # 1527b <Minisat::lit_Undef+0xb23>
    0.00 :   3bb0:   punpcklqdq %xmm1,%xmm13
    0.00 :   3bb5:   lea    0x114ac(%rip),%rax        # 15068 <Minisat::lit_Undef+0x910>
    0.00 :   3bbc:   movaps %xmm3,0xe0(%rsp)
    0.00 :   3bc4:   movq   %rdx,%xmm1
    0.00 :   3bc9:   lea    0x116b4(%rip),%rdx        # 15284 <Minisat::lit_Undef+0xb2c>
    0.00 :   3bd0:   movq   %rax,%xmm5
    0.00 :   3bd5:   movaps %xmm12,0xd0(%rsp)
    0.00 :   3bde:   punpcklqdq %xmm1,%xmm14
    0.00 :   3be3:   movq   %rdx,%xmm1
    0.00 :   3be8:   punpcklqdq %xmm8,%xmm4
    0.00 :   3bed:   movaps %xmm13,0xb0(%rsp)
    0.00 :   3bf6:   lea    0x11691(%rip),%rdx        # 1528e <Minisat::lit_Undef+0xb36>
    0.00 :   3bfd:   punpcklqdq %xmm1,%xmm15
    0.00 :   3c02:   lea    0x11487(%rip),%rax        # 15090 <Minisat::lit_Undef+0x938>
    0.00 :   3c09:   movaps %xmm4,0xc0(%rsp)
    0.00 :   3c11:   movq   %rdx,%xmm1
    0.00 :   3c16:   movq   %rax,%xmm6
    0.00 :   3c1b:   lea    0x114c6(%rip),%rax        # 150e8 <Minisat::lit_Undef+0x990>
    0.00 :   3c22:   movaps %xmm14,0x90(%rsp)
    0.00 :   3c2b:   punpcklqdq %xmm1,%xmm0
    0.00 :   3c2f:   movq   %rax,%xmm7
    0.00 :   3c34:   punpcklqdq %xmm8,%xmm5
    0.00 :   3c39:   movaps %xmm15,0x70(%rsp)
    0.00 :   3c3f:   lea    0x114ca(%rip),%rax        # 15110 <Minisat::lit_Undef+0x9b8>
    0.00 :   3c46:   punpcklqdq %xmm8,%xmm6
    0.00 :   3c4b:   movaps %xmm0,0x1592e(%rip)        # 19580 <opt_var_decay>
    0.00 :   3c52:   punpcklqdq %xmm8,%xmm7
    0.00 :   3c57:   movq   %rax,%xmm0
    0.00 :   3c5c:   movaps %xmm5,0xa0(%rsp)
    0.00 :   3c64:   punpcklqdq %xmm8,%xmm0
    0.00 :   3c69:   movaps %xmm6,0x80(%rsp)
    0.00 :   3c71:   movaps %xmm7,0x60(%rsp)
    0.00 :   3c76:   movaps %xmm0,0x15913(%rip)        # 19590 <opt_var_decay+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3c7d:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3c82:   mov    %rbp,%rsi
    0.00 :   3c85:   mov    %r14,0x140(%rsp)
    0.00 :   3c8d:   mov    %rax,%rdi
    0.00 :   3c90:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3c95:   xor    %eax,%eax
         : 131  __static_initialization_and_destruction_0():
         : 34   static DoubleOption  opt_var_decay         (_cat, "var-decay",   "The variable activity decay factor",            0.95,     DoubleRange(0, false, 1, false));
    0.00 :   3c97:   mov    %r14,%rsi
    0.00 :   3c9a:   mov    %r12,%rdx
         : 37   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3c9d:   movapd 0x116fb(%rip),%xmm0        # 153a0 <typeinfo name for Minisat::Solver+0xc0>
         : 130  __static_initialization_and_destruction_0():
    0.00 :   3ca5:   lea    0x7444(%rip),%r14        # b0f0 <Minisat::DoubleOption::~DoubleOption()>
         : 35   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3cac:   mov    %ax,0x15905(%rip)        # 195b8 <opt_var_decay+0x38>
    0.00 :   3cb3:   mov    0x1168e(%rip),%rax        # 15348 <typeinfo name for Minisat::Solver+0x68>
         : 131  __static_initialization_and_destruction_0():
    0.00 :   3cba:   mov    %r14,%rdi
         : 35   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3cbd:   mov    %rbx,0x158bc(%rip)        # 19580 <opt_var_decay>
    0.00 :   3cc4:   movups %xmm0,0x158dd(%rip)        # 195a8 <opt_var_decay+0x28>
    0.00 :   3ccb:   mov    %rax,0x158ee(%rip)        # 195c0 <opt_var_decay+0x40>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   3cd2:   call   23d0 <__cxa_atexit@plt>
         : 35   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3cd7:   movdqa 0x70(%rsp),%xmm15
    0.00 :   3cde:   movdqa 0x60(%rsp),%xmm7
    0.00 :   3ce4:   mov    %r13,0x15855(%rip)        # 19540 <opt_clause_decay+0x20>
    0.00 :   3ceb:   movaps %xmm15,0x1582d(%rip)        # 19520 <opt_clause_decay>
    0.00 :   3cf3:   movaps %xmm7,0x15836(%rip)        # 19530 <opt_clause_decay+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3cfa:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3cff:   mov    %rbp,%rsi
    0.00 :   3d02:   mov    %r15,0x140(%rsp)
    0.00 :   3d0a:   mov    %rax,%rdi
    0.00 :   3d0d:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3d12:   xor    %edx,%edx
         : 131  __static_initialization_and_destruction_0():
         : 35   static DoubleOption  opt_clause_decay      (_cat, "cla-decay",   "The clause activity decay factor",              0.999,    DoubleRange(0, false, 1, false));
    0.00 :   3d14:   mov    %r15,%rsi
    0.00 :   3d17:   mov    %r14,%rdi
         : 38   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3d1a:   movapd 0x1167e(%rip),%xmm0        # 153a0 <typeinfo name for Minisat::Solver+0xc0>
    0.00 :   3d22:   mov    0x11627(%rip),%rax        # 15350 <typeinfo name for Minisat::Solver+0x70>
    0.00 :   3d29:   mov    %dx,0x15828(%rip)        # 19558 <opt_clause_decay+0x38>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   3d30:   mov    %r12,%rdx
         : 36   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3d33:   mov    %rbx,0x157e6(%rip)        # 19520 <opt_clause_decay>
         : 130  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3d3a:   lea    0x1577f(%rip),%r15        # 194c0 <opt_random_var_freq>
         : 76   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3d41:   movups %xmm0,0x15800(%rip)        # 19548 <opt_clause_decay+0x28>
    0.00 :   3d48:   mov    %rax,0x15811(%rip)        # 19560 <opt_clause_decay+0x40>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   3d4f:   call   23d0 <__cxa_atexit@plt>
         : 36   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3d54:   mov    %r13,0x15785(%rip)        # 194e0 <opt_random_var_freq+0x20>
    0.00 :   3d5b:   movdqa 0x90(%rsp),%xmm14
    0.00 :   3d65:   movdqa 0x80(%rsp),%xmm6
    0.00 :   3d6e:   movaps %xmm14,0x1574a(%rip)        # 194c0 <opt_random_var_freq>
    0.00 :   3d76:   movaps %xmm6,0x15753(%rip)        # 194d0 <opt_random_var_freq+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3d7d:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3d82:   mov    %rbp,%rsi
    0.00 :   3d85:   mov    %r15,0x140(%rsp)
    0.00 :   3d8d:   mov    %rax,%rdi
    0.00 :   3d90:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3d95:   mov    $0x101,%ecx
         : 131  __static_initialization_and_destruction_0():
         : 36   static DoubleOption  opt_random_var_freq   (_cat, "rnd-freq",    "The frequency with which the decision heuristic tries to choose a random variable", 0, DoubleRange(0, true, 1, true));
    0.00 :   3d9a:   mov    %r12,%rdx
    0.00 :   3d9d:   mov    %r15,%rsi
         : 39   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3da0:   movapd 0x115f8(%rip),%xmm0        # 153a0 <typeinfo name for Minisat::Solver+0xc0>
         : 130  __static_initialization_and_destruction_0():
    0.00 :   3da8:   mov    %r14,%rdi
         : 37   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3dab:   mov    %cx,0x15746(%rip)        # 194f8 <opt_random_var_freq+0x38>
         : 130  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3db2:   lea    0x156a7(%rip),%r15        # 19460 <opt_random_seed>
         : 76   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3db9:   mov    %rbx,0x15700(%rip)        # 194c0 <opt_random_var_freq>
    0.00 :   3dc0:   movups %xmm0,0x15721(%rip)        # 194e8 <opt_random_var_freq+0x28>
    0.00 :   3dc7:   movq   $0x0,0x1572e(%rip)        # 19500 <opt_random_var_freq+0x40>
         : 133  __static_initialization_and_destruction_0():
    0.00 :   3dd2:   call   23d0 <__cxa_atexit@plt>
         : 37   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3dd7:   mov    %r13,0x156a2(%rip)        # 19480 <opt_random_seed+0x20>
    0.00 :   3dde:   movdqa 0xb0(%rsp),%xmm13
    0.00 :   3de8:   movdqa 0xa0(%rsp),%xmm5
    0.00 :   3df1:   movaps %xmm13,0x15667(%rip)        # 19460 <opt_random_seed>
    0.00 :   3df9:   movaps %xmm5,0x15670(%rip)        # 19470 <opt_random_seed+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3e00:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3e05:   mov    %rbp,%rsi
    0.00 :   3e08:   mov    %r15,0x140(%rsp)
    0.00 :   3e10:   mov    %rax,%rdi
    0.00 :   3e13:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3e18:   xor    %esi,%esi
         : 131  __static_initialization_and_destruction_0():
         : 37   static DoubleOption  opt_random_seed       (_cat, "rnd-seed",    "Used by the random variable selection",         91648253, DoubleRange(0, false, HUGE_VAL, false));
    0.00 :   3e1a:   mov    %r12,%rdx
    0.00 :   3e1d:   mov    %r14,%rdi
         : 40   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3e20:   movapd 0x10948(%rip),%xmm0        # 14770 <Minisat::lit_Undef+0x18>
    0.00 :   3e28:   mov    0x11529(%rip),%rax        # 15358 <typeinfo name for Minisat::Solver+0x78>
    0.00 :   3e2f:   mov    %si,0x15662(%rip)        # 19498 <opt_random_seed+0x38>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   3e36:   mov    %r15,%rsi
         : 38   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   3e39:   mov    %rbx,0x15620(%rip)        # 19460 <opt_random_seed>
         : 130  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3e40:   lea    0x155d9(%rip),%r15        # 19420 <opt_ccmin_mode>
         : 76   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   3e47:   movups %xmm0,0x1563a(%rip)        # 19488 <opt_random_seed+0x28>
    0.00 :   3e4e:   mov    %rax,0x1564b(%rip)        # 194a0 <opt_random_seed+0x40>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   3e55:   call   23d0 <__cxa_atexit@plt>
         : 38   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3e5a:   lea    0xf9ba(%rip),%r9        # 1381b <_IO_stdin_used+0x81b>
    0.00 :   3e61:   movdqa 0xd0(%rsp),%xmm12
    0.00 :   3e6b:   movdqa 0xc0(%rsp),%xmm4
    0.00 :   3e74:   mov    %r9,0x155c5(%rip)        # 19440 <opt_ccmin_mode+0x20>
    0.00 :   3e7b:   movaps %xmm12,0x1559d(%rip)        # 19420 <opt_ccmin_mode>
    0.00 :   3e83:   movaps %xmm4,0x155a6(%rip)        # 19430 <opt_ccmin_mode+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3e8a:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3e8f:   mov    %rbp,%rsi
    0.00 :   3e92:   mov    %r15,0x140(%rsp)
    0.00 :   3e9a:   mov    %rax,%rdi
    0.00 :   3e9d:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  IntRange range;
         : 190  int32_t  value;
         :
         : 192  public:
         : 193  IntOption(const char* c, const char* n, const char* d, int32_t def = int32_t(), IntRange r = IntRange(INT32_MIN, INT32_MAX))
         : 194  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   3ea2:   mov    0xfa8f(%rip),%r10        # 13938 <typeinfo name for Minisat::BoolOption+0x28>
         : 196  __static_initialization_and_destruction_0():
         : 38   static IntOption     opt_ccmin_mode        (_cat, "ccmin-mode",  "Controls conflict clause minimization (0=none, 1=basic, 2=deep)", 2, IntRange(0, 2));
    0.00 :   3ea9:   mov    %r12,%rdx
    0.00 :   3eac:   mov    %r15,%rsi
    0.00 :   3eaf:   lea    0xe6a(%rip),%r8        # 4d20 <Minisat::IntOption::~IntOption()>
         : 42   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
    0.00 :   3eb6:   lea    0x14b8b(%rip),%rax        # 18a48 <vtable for Minisat::IntOption+0x10>
    0.00 :   3ebd:   movl   $0x2,0x15589(%rip)        # 19450 <opt_ccmin_mode+0x30>
         : 191  __static_initialization_and_destruction_0():
    0.00 :   3ec7:   mov    %r8,%rdi
         : 39   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
    0.00 :   3eca:   mov    %r10,0x15577(%rip)        # 19448 <opt_ccmin_mode+0x28>
         : 190  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3ed1:   lea    0x15508(%rip),%r15        # 193e0 <opt_phase_saving>
         : 76   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   3ed8:   mov    %rax,0x15541(%rip)        # 19420 <opt_ccmin_mode>
         : 191  __static_initialization_and_destruction_0():
    0.00 :   3edf:   call   23d0 <__cxa_atexit@plt>
         : 39   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3ee4:   lea    0xf930(%rip),%r9        # 1381b <_IO_stdin_used+0x81b>
    0.00 :   3eeb:   movdqa 0xf0(%rsp),%xmm11
    0.00 :   3ef5:   movdqa 0xe0(%rsp),%xmm3
    0.00 :   3efe:   mov    %r9,0x154fb(%rip)        # 19400 <opt_phase_saving+0x20>
    0.00 :   3f05:   movaps %xmm11,0x154d3(%rip)        # 193e0 <opt_phase_saving>
    0.00 :   3f0d:   movaps %xmm3,0x154dc(%rip)        # 193f0 <opt_phase_saving+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3f14:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3f19:   mov    %rbp,%rsi
    0.00 :   3f1c:   mov    %r15,0x140(%rsp)
    0.00 :   3f24:   mov    %rax,%rdi
    0.00 :   3f27:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   __static_initialization_and_destruction_0():
         : 39   static IntOption     opt_phase_saving      (_cat, "phase-saving", "Controls the level of phase saving (0=none, 1=limited, 2=full)", 2, IntRange(0, 2));
    0.00 :   3f2c:   lea    0xded(%rip),%r8        # 4d20 <Minisat::IntOption::~IntOption()>
    0.00 :   3f33:   mov    %r12,%rdx
    0.00 :   3f36:   mov    %r15,%rsi
         : 43   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   3f39:   mov    0xf9f8(%rip),%r10        # 13938 <typeinfo name for Minisat::BoolOption+0x28>
         : 191  __static_initialization_and_destruction_0():
    0.00 :   3f40:   mov    %r8,%rdi
         : 40   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
    0.00 :   3f43:   lea    0x14afe(%rip),%rax        # 18a48 <vtable for Minisat::IntOption+0x10>
    0.00 :   3f4a:   movl   $0x2,0x154bc(%rip)        # 19410 <opt_phase_saving+0x30>
    0.00 :   3f54:   mov    %rax,0x15485(%rip)        # 193e0 <opt_phase_saving>
         : 192  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3f5b:   lea    0x1543e(%rip),%r15        # 193a0 <opt_rnd_init_act>
         : 76   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   3f62:   mov    %r10,0x1549f(%rip)        # 19408 <opt_phase_saving+0x28>
         : 191  __static_initialization_and_destruction_0():
    0.00 :   3f69:   call   23d0 <__cxa_atexit@plt>
         : 40   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3f6e:   lea    0xf8ae(%rip),%r10        # 13823 <_IO_stdin_used+0x823>
    0.00 :   3f75:   movdqa 0x110(%rsp),%xmm10
    0.00 :   3f7f:   movdqa 0x100(%rsp),%xmm2
    0.00 :   3f88:   mov    %r10,0x15431(%rip)        # 193c0 <opt_rnd_init_act+0x20>
    0.00 :   3f8f:   movaps %xmm10,0x15409(%rip)        # 193a0 <opt_rnd_init_act>
    0.00 :   3f97:   movaps %xmm2,0x15412(%rip)        # 193b0 <opt_rnd_init_act+0x10>
         : 76   getOptionList().push(this);
    0.00 :   3f9e:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   3fa3:   mov    %rbp,%rsi
    0.00 :   3fa6:   mov    %r15,0x140(%rsp)
    0.00 :   3fae:   mov    %rax,%rdi
    0.00 :   3fb1:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   __static_initialization_and_destruction_0():
         : 40   static BoolOption    opt_rnd_init_act      (_cat, "rnd-init",    "Randomize the initial activity", false);
    0.00 :   3fb6:   lea    0xd43(%rip),%r11        # 4d00 <Minisat::BoolOption::~BoolOption()>
    0.00 :   3fbd:   mov    %r12,%rdx
    0.00 :   3fc0:   mov    %r15,%rsi
         : 44   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
         : 347  {
         : 348  bool value;
         :
         : 350  public:
         : 351  BoolOption(const char* c, const char* n, const char* d, bool v)
         : 352  : Option(n, d, c, "<bool>"), value(v) {}
    0.00 :   3fc3:   lea    0x14ade(%rip),%rcx        # 18aa8 <vtable for Minisat::BoolOption+0x10>
         : 354  __static_initialization_and_destruction_0():
    0.00 :   3fca:   mov    %r11,%rdi
         : 41   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
    0.00 :   3fcd:   movb   $0x0,0x153f4(%rip)        # 193c8 <opt_rnd_init_act+0x28>
         : 348  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3fd4:   lea    0x15385(%rip),%r15        # 19360 <opt_luby_restart>
         : 76   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
         : 347  : Option(n, d, c, "<bool>"), value(v) {}
    0.00 :   3fdb:   mov    %rcx,0x153be(%rip)        # 193a0 <opt_rnd_init_act>
         : 349  __static_initialization_and_destruction_0():
    0.00 :   3fe2:   call   23d0 <__cxa_atexit@plt>
         : 41   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   3fe7:   lea    0xf835(%rip),%r10        # 13823 <_IO_stdin_used+0x823>
    0.00 :   3fee:   movdqa 0x130(%rsp),%xmm9
    0.00 :   3ff8:   movdqa 0x120(%rsp),%xmm1
    0.00 :   4001:   mov    %r10,0x15378(%rip)        # 19380 <opt_luby_restart+0x20>
    0.00 :   4008:   movaps %xmm9,0x15350(%rip)        # 19360 <opt_luby_restart>
    0.00 :   4010:   movaps %xmm1,0x15359(%rip)        # 19370 <opt_luby_restart+0x10>
         : 76   getOptionList().push(this);
    0.00 :   4017:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   401c:   mov    %rbp,%rsi
    0.00 :   401f:   mov    %r15,0x140(%rsp)
    0.00 :   4027:   mov    %rax,%rdi
    0.00 :   402a:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   __static_initialization_and_destruction_0():
         : 41   static BoolOption    opt_luby_restart      (_cat, "luby",        "Use the Luby restart sequence", true);
    0.00 :   402f:   lea    0xcca(%rip),%r11        # 4d00 <Minisat::BoolOption::~BoolOption()>
    0.00 :   4036:   mov    %r12,%rdx
    0.00 :   4039:   mov    %r15,%rsi
         : 45   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
         : 347  : Option(n, d, c, "<bool>"), value(v) {}
    0.00 :   403c:   lea    0x14a65(%rip),%rcx        # 18aa8 <vtable for Minisat::BoolOption+0x10>
         : 349  __static_initialization_and_destruction_0():
    0.00 :   4043:   mov    %r11,%rdi
         : 42   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
    0.00 :   4046:   movb   $0x1,0x1533b(%rip)        # 19388 <opt_luby_restart+0x28>
         : 348  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   404d:   lea    0x152cc(%rip),%r15        # 19320 <opt_restart_first>
         : 76   Minisat::BoolOption::BoolOption(char const*, char const*, char const*, bool):
         : 347  : Option(n, d, c, "<bool>"), value(v) {}
    0.00 :   4054:   mov    %rcx,0x15305(%rip)        # 19360 <opt_luby_restart>
         : 349  __static_initialization_and_destruction_0():
    0.00 :   405b:   call   23d0 <__cxa_atexit@plt>
         : 42   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   4060:   movdqa 0x40(%rsp),%xmm6
    0.00 :   4066:   movdqa 0x50(%rsp),%xmm7
    0.00 :   406c:   lea    0xf7a8(%rip),%r9        # 1381b <_IO_stdin_used+0x81b>
    0.00 :   4073:   mov    %r9,0x152c6(%rip)        # 19340 <opt_restart_first+0x20>
    0.00 :   407a:   movaps %xmm6,0x1529f(%rip)        # 19320 <opt_restart_first>
    0.00 :   4081:   movaps %xmm7,0x152a8(%rip)        # 19330 <opt_restart_first+0x10>
         : 76   getOptionList().push(this);
    0.00 :   4088:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   408d:   mov    %rbp,%rsi
    0.00 :   4090:   mov    %r15,0x140(%rsp)
    0.00 :   4098:   mov    %rax,%rdi
    0.00 :   409b:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   40a0:   lea    0x149a1(%rip),%rax        # 18a48 <vtable for Minisat::IntOption+0x10>
         : 191  __static_initialization_and_destruction_0():
         : 42   static IntOption     opt_restart_first     (_cat, "rfirst",      "The base restart interval", 100, IntRange(1, INT32_MAX));
    0.00 :   40a7:   mov    %r12,%rdx
    0.00 :   40aa:   mov    %r15,%rsi
    0.00 :   40ad:   lea    0xc6c(%rip),%r8        # 4d20 <Minisat::IntOption::~IntOption()>
         : 46   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
    0.00 :   40b4:   mov    %rax,0x15265(%rip)        # 19320 <opt_restart_first>
    0.00 :   40bb:   mov    0x1129e(%rip),%rax        # 15360 <typeinfo name for Minisat::Solver+0x80>
         : 191  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   40c2:   lea    0x151f7(%rip),%r15        # 192c0 <opt_restart_inc>
         : 76   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
         : 189  : Option(n, d, c, "<int32>"), range(r), value(def) {}
    0.00 :   40c9:   movl   $0x64,0x1527d(%rip)        # 19350 <opt_restart_first+0x30>
         : 191  __static_initialization_and_destruction_0():
    0.00 :   40d3:   mov    %r8,%rdi
         : 43   Minisat::IntOption::IntOption(char const*, char const*, char const*, int, Minisat::IntRange):
    0.00 :   40d6:   mov    %rax,0x1526b(%rip)        # 19348 <opt_restart_first+0x28>
         : 190  __static_initialization_and_destruction_0():
    0.00 :   40dd:   call   23d0 <__cxa_atexit@plt>
         : 43   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   40e2:   movdqa 0x20(%rsp),%xmm4
    0.00 :   40e8:   movdqa 0x30(%rsp),%xmm5
    0.00 :   40ee:   mov    %r13,0x151eb(%rip)        # 192e0 <opt_restart_inc+0x20>
    0.00 :   40f5:   movaps %xmm4,0x151c4(%rip)        # 192c0 <opt_restart_inc>
    0.00 :   40fc:   movaps %xmm5,0x151cd(%rip)        # 192d0 <opt_restart_inc+0x10>
         : 76   getOptionList().push(this);
  100.00 :   4103:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   4108:   mov    %rbp,%rsi
    0.00 :   410b:   mov    %r15,0x140(%rsp)
    0.00 :   4113:   mov    %rax,%rdi
    0.00 :   4116:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   411b:   xor    %edi,%edi
         : 131  __static_initialization_and_destruction_0():
         : 43   static DoubleOption  opt_restart_inc       (_cat, "rinc",        "Restart interval increase factor", 2, DoubleRange(1, false, HUGE_VAL, false));
    0.00 :   411d:   mov    %r15,%rsi
    0.00 :   4120:   mov    %r12,%rdx
         : 46   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   4123:   movapd 0x11285(%rip),%xmm1        # 153b0 <typeinfo name for Minisat::Solver+0xd0>
    0.00 :   412b:   mov    0x11236(%rip),%rax        # 15368 <typeinfo name for Minisat::Solver+0x88>
    0.00 :   4132:   mov    %di,0x151bf(%rip)        # 192f8 <opt_restart_inc+0x38>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   4139:   mov    %r14,%rdi
         : 44   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
    0.00 :   413c:   mov    %rbx,0x1517d(%rip)        # 192c0 <opt_restart_inc>
         : 130  Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   4143:   lea    0x15116(%rip),%r15        # 19260 <opt_garbage_frac>
         : 76   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   414a:   movups %xmm1,0x15197(%rip)        # 192e8 <opt_restart_inc+0x28>
    0.00 :   4151:   mov    %rax,0x151a8(%rip)        # 19300 <opt_restart_inc+0x40>
         : 132  __static_initialization_and_destruction_0():
    0.00 :   4158:   call   23d0 <__cxa_atexit@plt>
         : 44   Minisat::Option::Option(char const*, char const*, char const*, char const*):
         : 74   , type_name  (type_)
    0.00 :   415d:   movdqa (%rsp),%xmm2
    0.00 :   4162:   movdqa 0x10(%rsp),%xmm3
    0.00 :   4168:   mov    %r13,0x15111(%rip)        # 19280 <opt_garbage_frac+0x20>
    0.00 :   416f:   movaps %xmm2,0x150ea(%rip)        # 19260 <opt_garbage_frac>
    0.00 :   4176:   movaps %xmm3,0x150f3(%rip)        # 19270 <opt_garbage_frac+0x10>
         : 76   getOptionList().push(this);
    0.00 :   417d:   call   51c0 <Minisat::Option::getOptionList()>
    0.00 :   4182:   mov    %rbp,%rsi
    0.00 :   4185:   mov    %r15,0x140(%rsp)
    0.00 :   418d:   mov    %rax,%rdi
    0.00 :   4190:   call   52e0 <Minisat::vec<Minisat::Option*>::push(Minisat::Option* const&)>
         : 82   Minisat::DoubleOption::DoubleOption(char const*, char const*, char const*, double, Minisat::DoubleRange):
         : 129  : Option(n, d, c, "<double>"), range(r), value(def) {
    0.00 :   4195:   mov    0x111d4(%rip),%rax        # 15370 <typeinfo name for Minisat::Solver+0x90>
    0.00 :   419c:   xor    %r8d,%r8d
    0.00 :   419f:   movapd 0x105c9(%rip),%xmm0        # 14770 <Minisat::lit_Undef+0x18>
    0.00 :   41a7:   mov    %rbx,0x150b2(%rip)        # 19260 <opt_garbage_frac>
    0.00 :   41ae:   mov    %r8w,0x150e2(%rip)        # 19298 <opt_garbage_frac+0x38>
    0.00 :   41b6:   mov    %rax,0x150e3(%rip)        # 192a0 <opt_garbage_frac+0x40>
    0.00 :   41bd:   movups %xmm0,0x150c4(%rip)        # 19288 <opt_garbage_frac+0x28>
         : 137  __static_initialization_and_destruction_0():
         : 44   static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
    0.00 :   41c4:   mov    0x148(%rsp),%rax
    0.00 :   41cc:   sub    %fs:0x28,%rax
    0.00 :   41d5:   jne    41f6 <_GLOBAL__sub_I__ZN7Minisat6SolverC2Ev+0x826>
         : 48   _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
         : 923  }
    0.00 :   41d7:   add    $0x158,%rsp
         : 925  __static_initialization_and_destruction_0():
         : 44   static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
    0.00 :   41de:   mov    %r12,%rdx
    0.00 :   41e1:   mov    %r15,%rsi
    0.00 :   41e4:   mov    %r14,%rdi
         : 48   _GLOBAL__sub_I__ZN7Minisat6SolverC2Ev():
         : 923  }
    0.00 :   41e7:   pop    %rbx
    0.00 :   41e8:   pop    %rbp
    0.00 :   41e9:   pop    %r12
    0.00 :   41eb:   pop    %r13
    0.00 :   41ed:   pop    %r14
    0.00 :   41ef:   pop    %r15
         : 930  __static_initialization_and_destruction_0():
         : 44   static DoubleOption  opt_garbage_frac      (_cat, "gc-frac",     "The fraction of wasted memory allowed before a garbage collection is triggered",  0.20, DoubleRange(0, false, HUGE_VAL, false));
    0.00 :   41f1:   jmp    23d0 <__cxa_atexit@plt>
    0.00 :   41f6:   call   2410 <__stack_chk_fail@plt>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000016710 <_dl_load_cache_lookup>:
         : 6     _dl_load_cache_lookup():
         : 7     ./elf/dl-cache.c:416
    0.00 :   16710:  endbr64
    0.00 :   16714:  push   %rbp
    0.00 :   16715:  mov    %rsp,%rbp
    0.00 :   16718:  push   %r15
    0.00 :   1671a:  mov    %rdi,%r15
    0.00 :   1671d:  push   %r14
    0.00 :   1671f:  push   %r13
    0.00 :   16721:  push   %r12
    0.00 :   16723:  push   %rbx
    0.00 :   16724:  sub    $0xc8,%rsp
         : 18    ./elf/dl-cache.c:418
    0.00 :   1672b:  testb  $0x1,0x233ae(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   16732:  jne    16d50 <_dl_load_cache_lookup+0x640>
         : 21    ./elf/dl-cache.c:421
    0.00 :   16738:  mov    0x24ac9(%rip),%r13        # 3b208 <cache>
    0.00 :   1673f:  test   %r13,%r13
    0.00 :   16742:  je     16ba0 <_dl_load_cache_lookup+0x490>
         : 25    ./elf/dl-cache.c:490
    0.00 :   16748:  cmp    $0xffffffffffffffff,%r13
    0.00 :   1674c:  je     1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   16752:  mov    0x24a9f(%rip),%rbx        # 3b1f8 <cachesize>
         : 29    ./elf/dl-cache.c:495
    0.00 :   16759:  mov    0x24aa0(%rip),%r12        # 3b200 <cache_new>
         : 31    search_cache():
         : 32    ./elf/dl-cache.c:208
    0.00 :   16760:  mov    0x23381(%rip),%rdi        # 39ae8 <_rtld_global_ro+0x8>
         : 34    _dl_load_cache_lookup():
         : 35    ./elf/dl-cache.c:495
    0.00 :   16767:  cmp    $0xffffffffffffffff,%r12
    0.00 :   1676b:  je     16ad0 <_dl_load_cache_lookup+0x3c0>
         : 38    ./elf/dl-cache.c:498
    0.00 :   16771:  mov    %ebx,-0x70(%rbp)
    0.00 :   16774:  mov    0x14(%r12),%r14d
    0.00 :   16779:  lea    0x30(%r12),%r13
         : 42    _dl_string_platform():
         : 43    ./elf/../sysdeps/x86/dl-procinfo.h:39
    0.00 :   1677e:  test   %rdi,%rdi
    0.00 :   16781:  je     16f7b <_dl_load_cache_lookup+0x86b>
         : 46    ./elf/../sysdeps/x86/dl-procinfo.h:42
    0.00 :   16787:  lea    0x235cf(%rip),%rsi        # 39d5d <_rtld_global_ro+0x27d>
    0.00 :   1678e:  mov    %rdi,-0x68(%rbp)
    0.00 :   16792:  call   27220 <strcmp>
    0.00 :   16797:  movabs $0x4000000000000,%rdx
    0.00 :   167a1:  mov    %rdx,-0x88(%rbp)
    0.00 :   167a8:  test   %eax,%eax
    0.00 :   167aa:  je     167da <_dl_load_cache_lookup+0xca>
    0.00 :   167ac:  mov    -0x68(%rbp),%rdi
    0.00 :   167b0:  lea    0x235af(%rip),%rsi        # 39d66 <_rtld_global_ro+0x286>
    0.00 :   167b7:  call   27220 <strcmp>
    0.00 :   167bc:  mov    $0xffffffffffffffff,%rdx
    0.00 :   167c3:  test   %eax,%eax
    0.00 :   167c5:  movabs $0x8000000000000,%rax
    0.00 :   167cf:  cmovne %rdx,%rax
    0.00 :   167d3:  mov    %rax,-0x88(%rbp)
         : 62    search_cache():
         : 63    ./elf/dl-cache.c:212
    0.00 :   167da:  lea    -0x60(%rbp),%rax
    0.00 :   167de:  xor    %edx,%edx
    0.00 :   167e0:  mov    $0x13,%edi
    0.00 :   167e5:  mov    %rax,%rsi
    0.00 :   167e8:  mov    %rax,-0x98(%rbp)
    0.00 :   167ef:  call   17d70 <__tunable_get_val>
    0.00 :   167f4:  mov    -0x60(%rbp),%rax
         : 71    ./elf/dl-cache.c:228
    0.00 :   167f8:  sub    $0x1,%r14d
    0.00 :   167fc:  mov    %r14d,-0x68(%rbp)
         : 74    ./elf/dl-cache.c:212
    0.00 :   16800:  mov    %rax,-0x78(%rbp)
         : 76    ./elf/dl-cache.c:218
    0.00 :   16804:  mov    0x23335(%rip),%rax        # 39b40 <_rtld_global_ro+0x60>
    0.00 :   1680b:  mov    %rax,-0x80(%rbp)
         : 79    ./elf/dl-cache.c:228
    0.00 :   1680f:  js     1685a <_dl_load_cache_lookup+0x14a>
         : 81    ./elf/dl-cache.c:221
    0.00 :   16811:  mov    %r15,%rax
    0.00 :   16814:  xor    %r14d,%r14d
    0.00 :   16817:  mov    %r12,%r15
    0.00 :   1681a:  mov    %r13,%r12
    0.00 :   1681d:  mov    %rax,%r13
         : 87    ./elf/dl-cache.c:230
    0.00 :   16820:  mov    -0x68(%rbp),%eax
    0.00 :   16823:  lea    (%r14,%rax,1),%ebx
    0.00 :   16827:  sar    %ebx
         : 91    ./elf/dl-cache.c:231
    0.00 :   16829:  movslq %ebx,%rax
         : 93    _dl_cache_file_entry():
         : 94    ./elf/dl-cache.c:194
    0.00 :   1682c:  lea    (%rax,%rax,2),%r11
    0.00 :   16830:  shl    $0x3,%r11
         : 97    search_cache():
         : 98    ./elf/dl-cache.c:231
    0.00 :   16834:  mov    0x4(%r12,%r11,1),%esi
         : 100   ./elf/dl-cache.c:235
  100.00 :   16839:  cmp    %esi,-0x70(%rbp)
    0.00 :   1683c:  jbe    1685a <_dl_load_cache_lookup+0x14a>
         : 103   ./elf/dl-cache.c:239
    0.00 :   1683e:  add    %r15,%rsi
    0.00 :   16841:  mov    %r13,%rdi
    0.00 :   16844:  call   16630 <_dl_cache_libcmp>
         : 107   ./elf/dl-cache.c:240
    0.00 :   16849:  test   %eax,%eax
    0.00 :   1684b:  je     16880 <_dl_load_cache_lookup+0x170>
         : 110   ./elf/dl-cache.c:359
    0.00 :   1684d:  js     16870 <_dl_load_cache_lookup+0x160>
         : 112   ./elf/dl-cache.c:362
    0.00 :   1684f:  lea    -0x1(%rbx),%eax
    0.00 :   16852:  mov    %eax,-0x68(%rbp)
         : 115   ./elf/dl-cache.c:228
    0.00 :   16855:  cmp    %r14d,%eax
    0.00 :   16858:  jge    16820 <_dl_load_cache_lookup+0x110>
         : 118   _dl_load_cache_lookup():
         : 119   ./elf/dl-cache.c:528
    0.00 :   1685a:  lea    -0x28(%rbp),%rsp
         : 121   ./elf/dl-cache.c:492
    0.00 :   1685e:  xor    %eax,%eax
         : 123   ./elf/dl-cache.c:528
    0.00 :   16860:  pop    %rbx
    0.00 :   16861:  pop    %r12
    0.00 :   16863:  pop    %r13
    0.00 :   16865:  pop    %r14
    0.00 :   16867:  pop    %r15
    0.00 :   16869:  pop    %rbp
    0.00 :   1686a:  ret
    0.00 :   1686b:  nopl   0x0(%rax,%rax,1)
         : 132   search_cache():
         : 133   ./elf/dl-cache.c:360
    0.00 :   16870:  lea    0x1(%rbx),%r14d
         : 135   ./elf/dl-cache.c:228
    0.00 :   16874:  cmp    -0x68(%rbp),%r14d
    0.00 :   16878:  jle    16820 <_dl_load_cache_lookup+0x110>
    0.00 :   1687a:  jmp    1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   1687c:  nopl   0x0(%rax)
    0.00 :   16880:  mov    %r15,%r12
    0.00 :   16883:  mov    %r13,%r15
    0.00 :   16886:  mov    %ebx,-0x90(%rbp)
         : 143   ./elf/dl-cache.c:230
    0.00 :   1688c:  mov    %ebx,%r14d
    0.00 :   1688f:  lea    0x1c(%r12,%r11,1),%r13
    0.00 :   16894:  mov    %r13,%rbx
    0.00 :   16897:  mov    -0x70(%rbp),%r13d
    0.00 :   1689b:  jmp    168c1 <_dl_load_cache_lookup+0x1b1>
    0.00 :   1689d:  nopl   (%rax)
         : 150   ./elf/dl-cache.c:250
    0.00 :   168a0:  mov    (%rbx),%esi
    0.00 :   168a2:  lea    -0x1(%r14),%r11d
         : 153   ./elf/dl-cache.c:253
    0.00 :   168a6:  cmp    %esi,%r13d
    0.00 :   168a9:  jbe    168c6 <_dl_load_cache_lookup+0x1b6>
         : 156   ./elf/dl-cache.c:255
    0.00 :   168ab:  add    %r12,%rsi
    0.00 :   168ae:  mov    %r15,%rdi
    0.00 :   168b1:  sub    $0x18,%rbx
    0.00 :   168b5:  call   16630 <_dl_cache_libcmp>
    0.00 :   168ba:  test   %eax,%eax
    0.00 :   168bc:  jne    168c6 <_dl_load_cache_lookup+0x1b6>
         : 163   ./elf/dl-cache.c:257
    0.00 :   168be:  mov    %r11d,%r14d
         : 165   ./elf/dl-cache.c:248
    0.00 :   168c1:  test   %r14d,%r14d
    0.00 :   168c4:  jne    168a0 <_dl_load_cache_lookup+0x190>
         : 168   ./elf/dl-cache.c:218
    0.00 :   168c6:  mov    -0x78(%rbp),%rdx
    0.00 :   168ca:  and    -0x80(%rbp),%rdx
         : 171   ./elf/dl-cache.c:219
    0.00 :   168ce:  movabs $0x800f000000000000,%rax
         : 173   ./elf/dl-cache.c:314
    0.00 :   168d8:  mov    %r12,-0x78(%rbp)
         : 175   ./elf/dl-cache.c:219
    0.00 :   168dc:  or     %rdx,%rax
         : 177   ./elf/dl-cache.c:218
    0.00 :   168df:  mov    -0x90(%rbp),%ebx
    0.00 :   168e5:  movl   $0x0,-0x9c(%rbp)
    0.00 :   168ef:  not    %rax
    0.00 :   168f2:  movq   $0x0,-0x80(%rbp)
    0.00 :   168fa:  mov    %rax,-0x90(%rbp)
    0.00 :   16901:  movslq %r14d,%rax
    0.00 :   16904:  lea    (%rax,%rax,2),%rax
    0.00 :   16908:  lea    0x30(%r12,%rax,8),%r13
         : 186   ./elf/dl-cache.c:314
    0.00 :   1690d:  mov    %r13,%r12
    0.00 :   16910:  mov    -0x70(%rbp),%r13d
    0.00 :   16914:  jmp    16932 <_dl_load_cache_lookup+0x222>
    0.00 :   16916:  cs nopw 0x0(%rax,%rax,1)
         : 191   ./elf/dl-cache.c:355
    0.00 :   16920:  add    $0x1,%r14d
    0.00 :   16924:  add    $0x18,%r12
    0.00 :   16928:  cmp    -0x68(%rbp),%r14d
    0.00 :   1692c:  jg     16aa9 <_dl_load_cache_lookup+0x399>
         : 196   ./elf/dl-cache.c:267
    0.00 :   16932:  cmp    %r14d,%ebx
    0.00 :   16935:  jge    16959 <_dl_load_cache_lookup+0x249>
         : 199   ./elf/dl-cache.c:271
    0.00 :   16937:  mov    0x4(%r12),%esi
    0.00 :   1693c:  cmp    %esi,%r13d
    0.00 :   1693f:  jbe    16aa9 <_dl_load_cache_lookup+0x399>
         : 203   ./elf/dl-cache.c:272
    0.00 :   16945:  add    -0x78(%rbp),%rsi
    0.00 :   16949:  mov    %r15,%rdi
    0.00 :   1694c:  call   16630 <_dl_cache_libcmp>
    0.00 :   16951:  test   %eax,%eax
    0.00 :   16953:  jne    16aa9 <_dl_load_cache_lookup+0x399>
         : 209   ./elf/dl-cache.c:277
    0.00 :   16959:  cmpl   $0x303,(%r12)
    0.00 :   16961:  jne    16920 <_dl_load_cache_lookup+0x210>
         : 212   ./elf/dl-cache.c:278
    0.00 :   16963:  mov    0x8(%r12),%eax
    0.00 :   16968:  cmp    %eax,%r13d
    0.00 :   1696b:  jbe    16920 <_dl_load_cache_lookup+0x210>
         : 216   dl_cache_hwcap_extension():
         : 217   ./elf/../sysdeps/generic/dl-cache.h:125
    0.00 :   1696d:  mov    0x10(%r12),%r10
    0.00 :   16972:  mov    %r10,%rcx
    0.00 :   16975:  shr    $0x20,%rcx
    0.00 :   16979:  mov    %rcx,%rdx
    0.00 :   1697c:  and    $0xfffffffffffffc00,%rdx
         : 223   search_cache():
         : 224   ./elf/dl-cache.c:294
    0.00 :   16983:  cmp    $0x40000000,%rdx
    0.00 :   1698a:  je     16a80 <_dl_load_cache_lookup+0x370>
         : 227   ./elf/dl-cache.c:303
    0.00 :   16990:  cmpq   $0x0,-0x80(%rbp)
    0.00 :   16995:  jne    169ef <_dl_load_cache_lookup+0x2df>
         : 230   ./elf/dl-cache.c:306
    0.00 :   16997:  test   %r10,-0x90(%rbp)
    0.00 :   1699e:  jne    16920 <_dl_load_cache_lookup+0x210>
         : 233   ./elf/dl-cache.c:308
    0.00 :   169a0:  mov    0x2313e(%rip),%ecx        # 39ae4 <_rtld_global_ro+0x4>
    0.00 :   169a6:  test   %ecx,%ecx
    0.00 :   169a8:  je     169b5 <_dl_load_cache_lookup+0x2a5>
         : 237   ./elf/dl-cache.c:309
    0.00 :   169aa:  cmp    0xc(%r12),%ecx
    0.00 :   169af:  jb     16920 <_dl_load_cache_lookup+0x210>
         : 240   ./elf/dl-cache.c:314
    0.00 :   169b5:  movabs $0xf000000000000,%rcx
    0.00 :   169bf:  and    %r10,%rcx
         : 243   ./elf/dl-cache.c:315
    0.00 :   169c2:  cmp    -0x88(%rbp),%rcx
    0.00 :   169c9:  je     169d4 <_dl_load_cache_lookup+0x2c4>
    0.00 :   169cb:  test   %rcx,%rcx
    0.00 :   169ce:  jne    16920 <_dl_load_cache_lookup+0x210>
         : 248   ./elf/dl-cache.c:322
    0.00 :   169d4:  cmp    $0x40000000,%rdx
    0.00 :   169db:  je     16d70 <_dl_load_cache_lookup+0x660>
         : 251   ./elf/dl-cache.c:343
    0.00 :   169e1:  mov    -0x78(%rbp),%r12
    0.00 :   169e5:  nopl   (%rax)
    0.00 :   169e8:  add    %r12,%rax
    0.00 :   169eb:  mov    %rax,-0x80(%rbp)
         : 256   _dl_load_cache_lookup():
         : 257   ./elf/dl-cache.c:513
    0.00 :   169ef:  testb  $0x1,0x230ea(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   169f6:  jne    16e79 <_dl_load_cache_lookup+0x769>
         : 260   ./elf/dl-cache.c:525
    0.00 :   169fc:  mov    -0x80(%rbp),%rdi
    0.00 :   16a00:  call   2aa40 <strlen>
    0.00 :   16a05:  mov    %rsp,%rsi
    0.00 :   16a08:  lea    0x18(%rax),%rcx
    0.00 :   16a0c:  mov    %rcx,%rdx
    0.00 :   16a0f:  and    $0xfffffffffffff000,%rcx
    0.00 :   16a16:  sub    %rcx,%rsi
    0.00 :   16a19:  and    $0xfffffffffffffff0,%rdx
    0.00 :   16a1d:  cmp    %rsi,%rsp
    0.00 :   16a20:  je     16a37 <_dl_load_cache_lookup+0x327>
    0.00 :   16a22:  sub    $0x1000,%rsp
    0.00 :   16a29:  orq    $0x0,0xff8(%rsp)
    0.00 :   16a32:  cmp    %rsi,%rsp
    0.00 :   16a35:  jne    16a22 <_dl_load_cache_lookup+0x312>
    0.00 :   16a37:  and    $0xfff,%edx
    0.00 :   16a3d:  sub    %rdx,%rsp
    0.00 :   16a40:  test   %rdx,%rdx
    0.00 :   16a43:  jne    16b90 <_dl_load_cache_lookup+0x480>
         : 279   ./elf/dl-cache.c:526
    0.00 :   16a49:  mov    -0x80(%rbp),%rsi
         : 281   ./elf/dl-cache.c:525
    0.00 :   16a4d:  lea    0xf(%rsp),%rdi
         : 283   ./elf/dl-cache.c:526
    0.00 :   16a52:  lea    0x1(%rax),%rdx
         : 285   ./elf/dl-cache.c:525
    0.00 :   16a56:  and    $0xfffffffffffffff0,%rdi
         : 287   ./elf/dl-cache.c:526
    0.00 :   16a5a:  call   2afb0 <memcpy>
    0.00 :   16a5f:  mov    %rax,%rdi
         : 290   ./elf/dl-cache.c:527
    0.00 :   16a62:  call   271c0 <__strdup>
         : 292   ./elf/dl-cache.c:528
    0.00 :   16a67:  lea    -0x28(%rbp),%rsp
    0.00 :   16a6b:  pop    %rbx
    0.00 :   16a6c:  pop    %r12
    0.00 :   16a6e:  pop    %r13
    0.00 :   16a70:  pop    %r14
    0.00 :   16a72:  pop    %r15
    0.00 :   16a74:  pop    %rbp
    0.00 :   16a75:  ret
    0.00 :   16a76:  cs nopw 0x0(%rax,%rax,1)
         : 302   dl_cache_hwcap_isa_level_compatible():
         : 303   ./elf/../sysdeps/x86/dl-isa-level.h:28
    0.00 :   16a80:  mov    $0x1,%esi
    0.00 :   16a85:  shl    %cl,%esi
    0.00 :   16a87:  mov    %esi,%ecx
         : 307   ./elf/../sysdeps/x86/dl-isa-level.h:30
    0.00 :   16a89:  and    0x231f9(%rip),%esi        # 39c88 <_rtld_global_ro+0x1a8>
         : 309   search_cache():
         : 310   ./elf/dl-cache.c:295
    0.00 :   16a8f:  cmp    %esi,%ecx
    0.00 :   16a91:  je     169a0 <_dl_load_cache_lookup+0x290>
         : 313   ./elf/dl-cache.c:355
    0.00 :   16a97:  add    $0x1,%r14d
    0.00 :   16a9b:  add    $0x18,%r12
    0.00 :   16a9f:  cmp    -0x68(%rbp),%r14d
    0.00 :   16aa3:  jle    16932 <_dl_load_cache_lookup+0x222>
         : 318   _dl_load_cache_lookup():
         : 319   ./elf/dl-cache.c:513
    0.00 :   16aa9:  testb  $0x1,0x23030(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   16ab0:  jne    16e6e <_dl_load_cache_lookup+0x75e>
         : 322   ./elf/dl-cache.c:517
    0.00 :   16ab6:  cmpq   $0x0,-0x80(%rbp)
    0.00 :   16abb:  jne    169fc <_dl_load_cache_lookup+0x2ec>
    0.00 :   16ac1:  jmp    1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   16ac6:  cs nopw 0x0(%rax,%rax,1)
         : 327   ./elf/dl-cache.c:504
    0.00 :   16ad0:  mov    0xc(%r13),%eax
         : 329   ./elf/dl-cache.c:505
    0.00 :   16ad4:  mov    %ebx,%ecx
         : 331   search_cache():
         : 332   ./elf/dl-cache.c:212
    0.00 :   16ad6:  xor    %edx,%edx
    0.00 :   16ad8:  lea    -0x60(%rbp),%rsi
    0.00 :   16adc:  mov    $0x13,%edi
         : 336   _dl_load_cache_lookup():
         : 337   ./elf/dl-cache.c:507
    0.00 :   16ae1:  lea    0x10(%r13),%r14
    0.00 :   16ae5:  mov    %eax,-0x70(%rbp)
    0.00 :   16ae8:  lea    (%rax,%rax,2),%rax
    0.00 :   16aec:  lea    0x10(,%rax,4),%rax
         : 342   ./elf/dl-cache.c:505
    0.00 :   16af4:  sub    %eax,%ecx
         : 344   ./elf/dl-cache.c:504
    0.00 :   16af6:  lea    0x0(%r13,%rax,1),%r12
         : 346   ./elf/dl-cache.c:505
    0.00 :   16afb:  mov    %ecx,-0x68(%rbp)
         : 348   search_cache():
         : 349   ./elf/dl-cache.c:212
    0.00 :   16afe:  call   17d70 <__tunable_get_val>
         : 351   ./elf/dl-cache.c:228
    0.00 :   16b03:  mov    -0x70(%rbp),%ecx
    0.00 :   16b06:  sub    $0x1,%ecx
    0.00 :   16b09:  mov    %ecx,%ebx
    0.00 :   16b0b:  js     1685a <_dl_load_cache_lookup+0x14a>
         : 356   ./elf/dl-cache.c:221
    0.00 :   16b11:  xor    %r8d,%r8d
    0.00 :   16b14:  mov    %r13,-0x78(%rbp)
    0.00 :   16b18:  mov    %r15,%rcx
    0.00 :   16b1b:  mov    %r12,%r13
    0.00 :   16b1e:  mov    %r14,%r15
    0.00 :   16b21:  mov    %r8d,%r12d
    0.00 :   16b24:  nopl   0x0(%rax)
         : 364   ./elf/dl-cache.c:230
    0.00 :   16b28:  lea    (%rbx,%r12,1),%r11d
    0.00 :   16b2c:  sar    %r11d
         : 367   ./elf/dl-cache.c:231
    0.00 :   16b2f:  movslq %r11d,%rax
         : 369   _dl_cache_file_entry():
         : 370   ./elf/dl-cache.c:194
    0.00 :   16b32:  lea    (%rax,%rax,2),%r14
    0.00 :   16b36:  shl    $0x2,%r14
         : 373   search_cache():
         : 374   ./elf/dl-cache.c:231
    0.00 :   16b3a:  mov    0x4(%r15,%r14,1),%esi
         : 376   ./elf/dl-cache.c:235
    0.00 :   16b3f:  cmp    %esi,-0x68(%rbp)
    0.00 :   16b42:  jbe    1685a <_dl_load_cache_lookup+0x14a>
         : 379   ./elf/dl-cache.c:239
    0.00 :   16b48:  add    %r13,%rsi
    0.00 :   16b4b:  mov    %rcx,%rdi
    0.00 :   16b4e:  mov    %rcx,-0x70(%rbp)
    0.00 :   16b52:  call   16630 <_dl_cache_libcmp>
         : 384   ./elf/dl-cache.c:240
    0.00 :   16b57:  mov    -0x70(%rbp),%rcx
    0.00 :   16b5b:  test   %eax,%eax
    0.00 :   16b5d:  je     16c88 <_dl_load_cache_lookup+0x578>
         : 388   ./elf/dl-cache.c:359
    0.00 :   16b63:  js     16b78 <_dl_load_cache_lookup+0x468>
         : 390   ./elf/dl-cache.c:362
    0.00 :   16b65:  lea    -0x1(%r11),%ebx
         : 392   ./elf/dl-cache.c:228
    0.00 :   16b69:  cmp    %r12d,%ebx
    0.00 :   16b6c:  jge    16b28 <_dl_load_cache_lookup+0x418>
    0.00 :   16b6e:  jmp    1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   16b73:  nopl   0x0(%rax,%rax,1)
         : 397   ./elf/dl-cache.c:360
    0.00 :   16b78:  lea    0x1(%r11),%r12d
         : 399   ./elf/dl-cache.c:228
    0.00 :   16b7c:  cmp    %r12d,%ebx
    0.00 :   16b7f:  jge    16b28 <_dl_load_cache_lookup+0x418>
    0.00 :   16b81:  jmp    1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   16b86:  cs nopw 0x0(%rax,%rax,1)
         : 404   _dl_load_cache_lookup():
         : 405   ./elf/dl-cache.c:525
    0.00 :   16b90:  orq    $0x0,-0x8(%rsp,%rdx,1)
    0.00 :   16b96:  jmp    16a49 <_dl_load_cache_lookup+0x339>
    0.00 :   16b9b:  nopl   0x0(%rax,%rax,1)
         : 409   ./elf/dl-cache.c:424
    0.00 :   16ba0:  mov    $0x1,%edx
    0.00 :   16ba5:  lea    0x2464c(%rip),%rsi        # 3b1f8 <cachesize>
    0.00 :   16bac:  lea    0x17668(%rip),%rdi        # 2e21b <_sys_errnameidx+0x91b>
    0.00 :   16bb3:  call   d600 <_dl_sysdep_read_whole_file>
    0.00 :   16bb8:  mov    %rax,%r13
         : 415   ./elf/dl-cache.c:432
    0.00 :   16bbb:  cmp    $0xffffffffffffffff,%rax
    0.00 :   16bbf:  je     16c75 <_dl_load_cache_lookup+0x565>
         : 418   ./elf/dl-cache.c:432 (discriminator 1)
    0.00 :   16bc5:  mov    0x2462c(%rip),%rbx        # 3b1f8 <cachesize>
    0.00 :   16bcc:  cmp    $0x30,%rbx
    0.00 :   16bd0:  jbe    16c50 <_dl_load_cache_lookup+0x540>
         : 422   ./elf/dl-cache.c:433
    0.00 :   16bd2:  movabs $0x686361632e6f732e,%rax
    0.00 :   16bdc:  xor    0x8(%r13),%rax
    0.00 :   16be0:  movabs $0x646c2d6362696c67,%rdx
    0.00 :   16bea:  xor    0x0(%r13),%rdx
    0.00 :   16bee:  or     %rdx,%rax
    0.00 :   16bf1:  jne    16c56 <_dl_load_cache_lookup+0x546>
    0.00 :   16bf3:  cmpl   $0x312e3165,0x10(%r13)
    0.00 :   16bfb:  jne    16c56 <_dl_load_cache_lookup+0x546>
         : 431   ./elf/dl-cache.c:436
    0.00 :   16bfd:  movabs $0xaaaaaaaaaaaaaaab,%rcx
    0.00 :   16c07:  lea    -0x30(%rbx),%rdx
    0.00 :   16c0b:  mov    %rdx,%rax
    0.00 :   16c0e:  mul    %rcx
         : 436   ./elf/dl-cache.c:437
    0.00 :   16c11:  mov    0x14(%r13),%eax
         : 438   ./elf/dl-cache.c:436
    0.00 :   16c15:  shr    $0x4,%rdx
    0.00 :   16c19:  cmp    %rax,%rdx
    0.00 :   16c1c:  jb     16c56 <_dl_load_cache_lookup+0x546>
         : 442   cache_file_new_matches_endian():
         : 443   ./elf/../sysdeps/generic/dl-cache.h:194
    0.00 :   16c1e:  movzbl 0x1c(%r13),%eax
         : 445   ./elf/../sysdeps/generic/dl-cache.h:195
    0.00 :   16c23:  test   %al,%al
    0.00 :   16c25:  je     16f63 <_dl_load_cache_lookup+0x853>
    0.00 :   16c2b:  and    $0x3,%eax
    0.00 :   16c2e:  cmp    $0x2,%al
    0.00 :   16c30:  je     16f63 <_dl_load_cache_lookup+0x853>
         : 451   _dl_load_cache_lookup():
         : 452   ./elf/dl-cache.c:441
    0.00 :   16c36:  mov    %rbx,%rsi
    0.00 :   16c39:  mov    %r13,%rdi
    0.00 :   16c3c:  call   26cf0 <__GI___munmap>
         : 456   ./elf/dl-cache.c:444
    0.00 :   16c41:  movq   $0xffffffffffffffff,0x245b4(%rip)        # 3b200 <cache_new>
    0.00 :   16c4c:  jmp    16c75 <_dl_load_cache_lookup+0x565>
    0.00 :   16c4e:  xchg   %ax,%ax
         : 460   ./elf/dl-cache.c:447 (discriminator 1)
    0.00 :   16c50:  cmp    $0x10,%rbx
    0.00 :   16c54:  jbe    16c6a <_dl_load_cache_lookup+0x55a>
         : 463   ./elf/dl-cache.c:448
    0.00 :   16c56:  movabs $0x2e312d6f732e646c,%rax
    0.00 :   16c60:  cmp    %rax,0x0(%r13)
    0.00 :   16c64:  je     16dc8 <_dl_load_cache_lookup+0x6b8>
         : 467   ./elf/dl-cache.c:483
    0.00 :   16c6a:  mov    %rbx,%rsi
    0.00 :   16c6d:  mov    %r13,%rdi
    0.00 :   16c70:  call   26cf0 <__GI___munmap>
         : 471   ./elf/dl-cache.c:445
    0.00 :   16c75:  movq   $0xffffffffffffffff,0x24588(%rip)        # 3b208 <cache>
         : 473   ./elf/dl-cache.c:490
    0.00 :   16c80:  jmp    1685a <_dl_load_cache_lookup+0x14a>
    0.00 :   16c85:  nopl   (%rax)
    0.00 :   16c88:  mov    %r13,%r12
    0.00 :   16c8b:  mov    -0x78(%rbp),%r13
    0.00 :   16c8f:  mov    %rcx,%r15
    0.00 :   16c92:  mov    %ebx,-0x78(%rbp)
    0.00 :   16c95:  mov    %r11d,-0x80(%rbp)
    0.00 :   16c99:  mov    -0x68(%rbp),%ebx
    0.00 :   16c9c:  lea    0x8(%r13,%r14,1),%rcx
    0.00 :   16ca1:  mov    %r13,-0x70(%rbp)
    0.00 :   16ca5:  mov    %r11d,%r13d
    0.00 :   16ca8:  mov    %rcx,%r14
    0.00 :   16cab:  jmp    16cd1 <_dl_load_cache_lookup+0x5c1>
    0.00 :   16cad:  nopl   (%rax)
         : 488   search_cache():
         : 489   ./elf/dl-cache.c:250
    0.00 :   16cb0:  mov    (%r14),%esi
    0.00 :   16cb3:  lea    -0x1(%r13),%r11d
         : 492   ./elf/dl-cache.c:253
    0.00 :   16cb7:  cmp    %esi,%ebx
    0.00 :   16cb9:  jbe    16cd6 <_dl_load_cache_lookup+0x5c6>
         : 495   ./elf/dl-cache.c:255
    0.00 :   16cbb:  add    %r12,%rsi
    0.00 :   16cbe:  mov    %r15,%rdi
    0.00 :   16cc1:  sub    $0xc,%r14
    0.00 :   16cc5:  call   16630 <_dl_cache_libcmp>
    0.00 :   16cca:  test   %eax,%eax
    0.00 :   16ccc:  jne    16cd6 <_dl_load_cache_lookup+0x5c6>
         : 502   ./elf/dl-cache.c:257
    0.00 :   16cce:  mov    %r11d,%r13d
         : 504   ./elf/dl-cache.c:248
    0.00 :   16cd1:  test   %r13d,%r13d
    0.00 :   16cd4:  jne    16cb0 <_dl_load_cache_lookup+0x5a0>
    0.00 :   16cd6:  movslq %r13d,%rax
    0.00 :   16cd9:  mov    -0x70(%rbp),%r13
    0.00 :   16cdd:  mov    -0x78(%rbp),%ebx
    0.00 :   16ce0:  mov    %rax,%r14
    0.00 :   16ce3:  lea    (%rax,%rax,2),%rax
    0.00 :   16ce7:  mov    -0x80(%rbp),%r11d
    0.00 :   16ceb:  lea    0x10(%r13,%rax,4),%r13
    0.00 :   16cf0:  mov    %r13,%rax
    0.00 :   16cf3:  mov    %ebx,%r13d
    0.00 :   16cf6:  mov    %rax,%rbx
    0.00 :   16cf9:  jmp    16d11 <_dl_load_cache_lookup+0x601>
    0.00 :   16cfb:  nopl   0x0(%rax,%rax,1)
         : 519   ./elf/dl-cache.c:355
    0.00 :   16d00:  add    $0x1,%r14d
    0.00 :   16d04:  add    $0xc,%rbx
    0.00 :   16d08:  cmp    %r14d,%r13d
    0.00 :   16d0b:  jl     1685a <_dl_load_cache_lookup+0x14a>
         : 524   ./elf/dl-cache.c:267
    0.00 :   16d11:  cmp    %r14d,%r11d
    0.00 :   16d14:  jge    16d35 <_dl_load_cache_lookup+0x625>
         : 527   ./elf/dl-cache.c:271
    0.00 :   16d16:  mov    0x4(%rbx),%esi
    0.00 :   16d19:  cmp    %esi,-0x68(%rbp)
    0.00 :   16d1c:  jbe    1685a <_dl_load_cache_lookup+0x14a>
         : 531   ./elf/dl-cache.c:272
    0.00 :   16d22:  add    %r12,%rsi
    0.00 :   16d25:  mov    %r15,%rdi
    0.00 :   16d28:  call   16630 <_dl_cache_libcmp>
    0.00 :   16d2d:  test   %eax,%eax
    0.00 :   16d2f:  jne    1685a <_dl_load_cache_lookup+0x14a>
         : 537   ./elf/dl-cache.c:277
    0.00 :   16d35:  cmpl   $0x303,(%rbx)
    0.00 :   16d3b:  jne    16d00 <_dl_load_cache_lookup+0x5f0>
         : 540   ./elf/dl-cache.c:278
    0.00 :   16d3d:  mov    0x8(%rbx),%eax
    0.00 :   16d40:  cmp    %eax,-0x68(%rbp)
    0.00 :   16d43:  jbe    16d00 <_dl_load_cache_lookup+0x5f0>
    0.00 :   16d45:  jmp    169e8 <_dl_load_cache_lookup+0x2d8>
    0.00 :   16d4a:  nopw   0x0(%rax,%rax,1)
         : 546   _dl_load_cache_lookup():
         : 547   ./elf/dl-cache.c:419
    0.00 :   16d50:  lea    0x174c4(%rip),%rsi        # 2e21b <_sys_errnameidx+0x91b>
    0.00 :   16d57:  lea    0x174ce(%rip),%rdi        # 2e22c <_sys_errnameidx+0x92c>
    0.00 :   16d5e:  xor    %eax,%eax
    0.00 :   16d60:  call   fbc0 <_dl_debug_printf>
    0.00 :   16d65:  jmp    16738 <_dl_load_cache_lookup+0x28>
    0.00 :   16d6a:  nopw   0x0(%rax,%rax,1)
         : 554   glibc_hwcaps_priority():
         : 555   ./elf/dl-cache.c:170
    0.00 :   16d70:  mov    0x24472(%rip),%eax        # 3b1e8 <glibc_hwcaps_priorities_length>
    0.00 :   16d76:  test   %eax,%eax
    0.00 :   16d78:  je     16e90 <_dl_load_cache_lookup+0x780>
         : 559   ./elf/dl-cache.c:173
    0.00 :   16d7e:  cmp    %eax,%r10d
    0.00 :   16d81:  jae    16920 <_dl_load_cache_lookup+0x210>
         : 562   ./elf/dl-cache.c:174
    0.00 :   16d87:  mov    0x24462(%rip),%rax        # 3b1f0 <glibc_hwcaps_priorities>
    0.00 :   16d8e:  mov    %r10d,%r10d
    0.00 :   16d91:  mov    (%rax,%r10,4),%eax
         : 566   search_cache():
         : 567   ./elf/dl-cache.c:326
    0.00 :   16d95:  test   %eax,%eax
    0.00 :   16d97:  je     16920 <_dl_load_cache_lookup+0x210>
         : 570   ./elf/dl-cache.c:329
    0.00 :   16d9d:  cmpq   $0x0,-0x80(%rbp)
    0.00 :   16da2:  je     16db0 <_dl_load_cache_lookup+0x6a0>
    0.00 :   16da4:  cmp    %eax,-0x9c(%rbp)
    0.00 :   16daa:  jbe    16920 <_dl_load_cache_lookup+0x210>
         : 575   ./elf/dl-cache.c:343
    0.00 :   16db0:  mov    0x8(%r12),%edx
    0.00 :   16db5:  add    -0x78(%rbp),%rdx
    0.00 :   16db9:  mov    %eax,-0x9c(%rbp)
    0.00 :   16dbf:  mov    %rdx,-0x80(%rbp)
         : 580   ./elf/dl-cache.c:345
    0.00 :   16dc3:  jmp    16920 <_dl_load_cache_lookup+0x210>
         : 582   _dl_load_cache_lookup():
         : 583   ./elf/dl-cache.c:448
    0.00 :   16dc8:  cmpw   $0x2e37,0x8(%r13)
    0.00 :   16dcf:  jne    16c6a <_dl_load_cache_lookup+0x55a>
    0.00 :   16dd5:  cmpb   $0x30,0xa(%r13)
    0.00 :   16dda:  jne    16c6a <_dl_load_cache_lookup+0x55a>
         : 588   ./elf/dl-cache.c:450
    0.00 :   16de0:  lea    -0x10(%rbx),%rdx
         : 590   ./elf/dl-cache.c:451
    0.00 :   16de4:  mov    0xc(%r13),%ecx
         : 592   ./elf/dl-cache.c:450
    0.00 :   16de8:  movabs $0xaaaaaaaaaaaaaaab,%rsi
    0.00 :   16df2:  mov    %rdx,%rax
    0.00 :   16df5:  mul    %rsi
    0.00 :   16df8:  shr    $0x3,%rdx
    0.00 :   16dfc:  cmp    %rcx,%rdx
    0.00 :   16dff:  jb     16c6a <_dl_load_cache_lookup+0x55a>
         : 599   ./elf/dl-cache.c:458
    0.00 :   16e05:  lea    (%rcx,%rcx,2),%rax
         : 601   ./elf/dl-cache.c:455
    0.00 :   16e09:  mov    %r13,0x243f8(%rip)        # 3b208 <cache>
         : 603   ./elf/dl-cache.c:458
    0.00 :   16e10:  lea    0x17(,%rax,4),%rax
    0.00 :   16e18:  and    $0xfffffffffffffff8,%rax
         : 606   ./elf/dl-cache.c:461
    0.00 :   16e1c:  lea    0x0(%r13,%rax,1),%rdx
         : 608   ./elf/dl-cache.c:462
    0.00 :   16e21:  add    $0x30,%rax
         : 610   ./elf/dl-cache.c:461
    0.00 :   16e25:  mov    %rdx,0x243d4(%rip)        # 3b200 <cache_new>
         : 612   ./elf/dl-cache.c:462
    0.00 :   16e2c:  cmp    %rax,%rbx
    0.00 :   16e2f:  jb     16e5e <_dl_load_cache_lookup+0x74e>
         : 615   ./elf/dl-cache.c:463
    0.00 :   16e31:  movabs $0x686361632e6f732e,%rax
    0.00 :   16e3b:  xor    0x8(%rdx),%rax
    0.00 :   16e3f:  movabs $0x646c2d6362696c67,%rcx
    0.00 :   16e49:  xor    (%rdx),%rcx
    0.00 :   16e4c:  or     %rcx,%rax
    0.00 :   16e4f:  jne    16e5e <_dl_load_cache_lookup+0x74e>
    0.00 :   16e51:  cmpl   $0x312e3165,0x10(%rdx)
    0.00 :   16e58:  je     16f8b <_dl_load_cache_lookup+0x87b>
         : 624   ./elf/dl-cache.c:465
    0.00 :   16e5e:  movq   $0xffffffffffffffff,0x24397(%rip)        # 3b200 <cache_new>
    0.00 :   16e69:  jmp    16759 <_dl_load_cache_lookup+0x49>
         : 627   ./elf/dl-cache.c:514
    0.00 :   16e6e:  cmpq   $0x0,-0x80(%rbp)
    0.00 :   16e73:  je     1685a <_dl_load_cache_lookup+0x14a>
         : 630   ./elf/dl-cache.c:515
    0.00 :   16e79:  mov    -0x80(%rbp),%rsi
    0.00 :   16e7d:  lea    0x16e7a(%rip),%rdi        # 2dcfe <_sys_errnameidx+0x3fe>
    0.00 :   16e84:  xor    %eax,%eax
    0.00 :   16e86:  call   fbc0 <_dl_debug_printf>
         : 635   ./elf/dl-cache.c:517
    0.00 :   16e8b:  jmp    169fc <_dl_load_cache_lookup+0x2ec>
         : 637   cache_extension_load():
         : 638   ./elf/../sysdeps/generic/dl-cache.h:303
    0.00 :   16e90:  mov    -0x98(%rbp),%rax
    0.00 :   16e97:  pxor   %xmm0,%xmm0
         : 641   glibc_hwcaps_priorities_init():
         : 642   ./elf/dl-cache.c:95
    0.00 :   16e9b:  mov    0x24356(%rip),%rdx        # 3b1f8 <cachesize>
    0.00 :   16ea2:  mov    0x2435f(%rip),%rdi        # 3b208 <cache>
         : 645   cache_extension_load():
         : 646   ./elf/../sysdeps/generic/dl-cache.h:303
    0.00 :   16ea9:  movaps %xmm0,0x20(%rax)
    0.00 :   16ead:  movaps %xmm0,(%rax)
    0.00 :   16eb0:  movaps %xmm0,0x10(%rax)
         : 650   ./elf/../sysdeps/generic/dl-cache.h:304
    0.00 :   16eb4:  mov    0x24345(%rip),%rax        # 3b200 <cache_new>
    0.00 :   16ebb:  mov    0x20(%rax),%eax
    0.00 :   16ebe:  mov    %eax,-0xa0(%rbp)
    0.00 :   16ec4:  test   %eax,%eax
    0.00 :   16ec6:  je     17021 <_dl_load_cache_lookup+0x911>
         : 656   ./elf/../sysdeps/generic/dl-cache.h:307
    0.00 :   16ecc:  mov    %eax,%r8d
    0.00 :   16ecf:  and    $0x3,%r8d
    0.00 :   16ed3:  jne    16f76 <_dl_load_cache_lookup+0x866>
         : 660   ./elf/../sysdeps/generic/dl-cache.h:311
    0.00 :   16ed9:  mov    %eax,%ecx
    0.00 :   16edb:  lea    0x8(%rcx),%r11
         : 663   ./elf/../sysdeps/generic/dl-cache.h:313
    0.00 :   16edf:  cmp    %r11,%rdx
    0.00 :   16ee2:  jb     16f5b <_dl_load_cache_lookup+0x84b>
         : 666   ./elf/../sysdeps/generic/dl-cache.h:316
    0.00 :   16ee4:  add    %rdi,%rcx
         : 668   ./elf/../sysdeps/generic/dl-cache.h:317
    0.00 :   16ee7:  cmpl   $0xeaa42174,(%rcx)
    0.00 :   16eed:  jne    16f5b <_dl_load_cache_lookup+0x84b>
         : 671   ./elf/../sysdeps/generic/dl-cache.h:319
    0.00 :   16eef:  mov    0x4(%rcx),%eax
    0.00 :   16ef2:  mov    %rax,%rsi
    0.00 :   16ef5:  shl    $0x4,%rax
         : 675   ./elf/../sysdeps/generic/dl-cache.h:322
    0.00 :   16ef9:  add    %r11,%rax
         : 677   ./elf/../sysdeps/generic/dl-cache.h:325
    0.00 :   16efc:  cmp    %rax,%rdx
    0.00 :   16eff:  jb     16f5b <_dl_load_cache_lookup+0x84b>
         : 680   ./elf/../sysdeps/generic/dl-cache.h:328
    0.00 :   16f01:  test   %esi,%esi
    0.00 :   16f03:  je     17032 <_dl_load_cache_lookup+0x922>
    0.00 :   16f09:  sub    $0x1,%esi
    0.00 :   16f0c:  lea    0x8(%rcx),%rax
    0.00 :   16f10:  shl    $0x4,%rsi
    0.00 :   16f14:  lea    0x18(%rcx,%rsi,1),%r9
    0.00 :   16f19:  jmp    16f4b <_dl_load_cache_lookup+0x83b>
         : 688   ./elf/../sysdeps/generic/dl-cache.h:336
    0.00 :   16f1b:  mov    (%rax),%ecx
         : 690   ./elf/../sysdeps/generic/dl-cache.h:337
    0.00 :   16f1d:  cmp    $0x1,%ecx
    0.00 :   16f20:  ja     16f3e <_dl_load_cache_lookup+0x82e>
         : 693   ./elf/../sysdeps/generic/dl-cache.h:340
    0.00 :   16f22:  lea    (%rcx,%rcx,2),%rcx
    0.00 :   16f26:  add    %rdi,%rsi
    0.00 :   16f29:  shl    $0x3,%rcx
    0.00 :   16f2d:  mov    %rsi,-0x60(%rbp,%rcx,1)
         : 698   ./elf/../sysdeps/generic/dl-cache.h:342
    0.00 :   16f32:  mov    0x4(%rax),%esi
         : 700   ./elf/../sysdeps/generic/dl-cache.h:341
    0.00 :   16f35:  mov    %r11,-0x58(%rbp,%rcx,1)
         : 702   ./elf/../sysdeps/generic/dl-cache.h:342
    0.00 :   16f3a:  mov    %esi,-0x50(%rbp,%rcx,1)
         : 704   ./elf/../sysdeps/generic/dl-cache.h:328
    0.00 :   16f3e:  add    $0x10,%rax
    0.00 :   16f42:  cmp    %rax,%r9
    0.00 :   16f45:  je     17032 <_dl_load_cache_lookup+0x922>
         : 708   ./elf/../sysdeps/generic/dl-cache.h:330
    0.00 :   16f4b:  mov    0x8(%rax),%esi
    0.00 :   16f4e:  mov    0xc(%rax),%r11d
    0.00 :   16f52:  lea    (%rsi,%r11,1),%rcx
         : 712   ./elf/../sysdeps/generic/dl-cache.h:332
    0.00 :   16f56:  cmp    %rcx,%rdx
    0.00 :   16f59:  jae    16f1b <_dl_load_cache_lookup+0x80b>
         : 715   glibc_hwcaps_priorities_init():
         : 716   ./elf/dl-cache.c:96
    0.00 :   16f5b:  mov    %r8d,%eax
    0.00 :   16f5e:  jmp    16d7e <_dl_load_cache_lookup+0x66e>
         : 719   _dl_load_cache_lookup():
         : 720   ./elf/dl-cache.c:444
    0.00 :   16f63:  mov    %r13,0x24296(%rip)        # 3b200 <cache_new>
         : 722   ./elf/dl-cache.c:445
    0.00 :   16f6a:  mov    %r13,0x24297(%rip)        # 3b208 <cache>
    0.00 :   16f71:  jmp    16759 <_dl_load_cache_lookup+0x49>
         : 725   cache_extension_load():
         : 726   ./elf/dl-cache.c:445
    0.00 :   16f76:  xor    %r8d,%r8d
    0.00 :   16f79:  jmp    16f5b <_dl_load_cache_lookup+0x84b>
         : 729   search_cache():
         : 730   ./elf/dl-cache.c:208
    0.00 :   16f7b:  movq   $0xffffffffffffffff,-0x88(%rbp)
    0.00 :   16f86:  jmp    167da <_dl_load_cache_lookup+0xca>
         : 733   cache_file_new_matches_endian():
         : 734   ./elf/../sysdeps/generic/dl-cache.h:194
    0.00 :   16f8b:  movzbl 0x1c(%rdx),%eax
         : 736   ./elf/../sysdeps/generic/dl-cache.h:195
    0.00 :   16f8f:  test   %al,%al
    0.00 :   16f91:  je     16759 <_dl_load_cache_lookup+0x49>
    0.00 :   16f97:  and    $0x3,%eax
    0.00 :   16f9a:  cmp    $0x2,%al
    0.00 :   16f9c:  je     16759 <_dl_load_cache_lookup+0x49>
         : 742   _dl_load_cache_lookup():
         : 743   ./elf/dl-cache.c:476
    0.00 :   16fa2:  mov    %r13,%rdi
    0.00 :   16fa5:  mov    %rbx,%rsi
         : 746   ./elf/dl-cache.c:474
    0.00 :   16fa8:  movq   $0xffffffffffffffff,0x24255(%rip)        # 3b208 <cache>
         : 748   ./elf/dl-cache.c:475
    0.00 :   16fb3:  movq   $0xffffffffffffffff,0x24242(%rip)        # 3b200 <cache_new>
         : 750   ./elf/dl-cache.c:476
    0.00 :   16fbe:  call   26cf0 <__GI___munmap>
         : 752   ./elf/dl-cache.c:487
    0.00 :   16fc3:  mov    0x2423e(%rip),%r13        # 3b208 <cache>
    0.00 :   16fca:  test   %r13,%r13
    0.00 :   16fcd:  jne    16748 <_dl_load_cache_lookup+0x38>
         : 756   ./elf/dl-cache.c:487 (discriminator 1)
    0.00 :   16fd3:  lea    0x18bf6(%rip),%rcx        # 2fbd0 <__PRETTY_FUNCTION__.0>
    0.00 :   16fda:  mov    $0x1e7,%edx
    0.00 :   16fdf:  lea    0x17279(%rip),%rsi        # 2e25f <_sys_errnameidx+0x95f>
    0.00 :   16fe6:  lea    0x1727d(%rip),%rdi        # 2e26a <_sys_errnameidx+0x96a>
    0.00 :   16fed:  call   1e460 <__GI___assert_fail>
    0.00 :   16ff2:  nopw   0x0(%rax,%rax,1)
    0.00 :   16ff8:  mov    -0xc4(%rbp),%r13d
    0.00 :   16fff:  mov    -0xc8(%rbp),%ebx
    0.00 :   17005:  mov    -0xcc(%rbp),%r14d
    0.00 :   1700c:  mov    -0xd8(%rbp),%r10
    0.00 :   17013:  mov    -0xe0(%rbp),%r12
    0.00 :   1701a:  mov    -0xe8(%rbp),%r15
         : 769   glibc_hwcaps_priorities_init():
         : 770   ./elf/dl-cache.c:150
    0.00 :   17021:  mov    -0xa0(%rbp),%eax
         : 772   ./elf/dl-cache.c:157
    0.00 :   17027:  mov    %eax,0x241bb(%rip)        # 3b1e8 <glibc_hwcaps_priorities_length>
    0.00 :   1702d:  jmp    16d7e <_dl_load_cache_lookup+0x66e>
         : 775   cache_extension_verify():
         : 776   ./elf/../sysdeps/generic/dl-cache.h:287
    0.00 :   17032:  mov    -0x40(%rbp),%rdx
    0.00 :   17036:  test   %rdx,%rdx
    0.00 :   17039:  je     172bd <_dl_load_cache_lookup+0xbad>
         : 780   ./elf/../sysdeps/generic/dl-cache.h:288
    0.00 :   1703f:  mov    -0x48(%rbp),%r9
         : 782   ./elf/../sysdeps/generic/dl-cache.h:289
    0.00 :   17043:  mov    %r9,%rax
    0.00 :   17046:  or     %rdx,%rax
    0.00 :   17049:  test   $0x3,%al
    0.00 :   1704b:  jne    172bd <_dl_load_cache_lookup+0xbad>
         : 787   glibc_hwcaps_priorities_init():
         : 788   ./elf/dl-cache.c:99
    0.00 :   17051:  shr    $0x2,%rdx
         : 790   ./elf/dl-cache.c:104
    0.00 :   17055:  mov    %edx,%eax
         : 792   ./elf/dl-cache.c:98
    0.00 :   17057:  mov    %edx,-0xa0(%rbp)
         : 794   ./elf/dl-cache.c:104
    0.00 :   1705d:  shl    $0x2,%rax
         : 796   ./elf/dl-cache.c:100
    0.00 :   17061:  cmp    %edx,0x2417d(%rip)        # 3b1e4 <glibc_hwcaps_priorities_allocated>
         : 798   ./elf/dl-cache.c:104
    0.00 :   17067:  mov    %rax,-0x70(%rbp)
         : 800   ./elf/dl-cache.c:100
    0.00 :   1706b:  jae    17118 <_dl_load_cache_lookup+0xa08>
         : 802   glibc_hwcaps_priorities_free():
         : 803   ./elf/dl-cache.c:59
    0.00 :   17071:  cmpb   $0x0,0x24168(%rip)        # 3b1e0 <glibc_hwcaps_priorities_malloced>
    0.00 :   17078:  je     170a3 <_dl_load_cache_lookup+0x993>
    0.00 :   1707a:  mov    %rdx,-0xb0(%rbp)
         : 807   free():
         : 808   ./elf/../include/rtld-malloc.h:50
    0.00 :   17081:  mov    0x24168(%rip),%rdi        # 3b1f0 <glibc_hwcaps_priorities>
    0.00 :   17088:  mov    %r10,-0xa8(%rbp)
    0.00 :   1708f:  call   *0x229d3(%rip)        # 39a68 <__rtld_free>
    0.00 :   17095:  mov    -0xb0(%rbp),%rdx
    0.00 :   1709c:  mov    -0xa8(%rbp),%r10
    0.00 :   170a3:  mov    %rdx,-0xb0(%rbp)
         : 815   malloc():
         : 816   ./elf/../include/rtld-malloc.h:56
    0.00 :   170aa:  mov    -0x70(%rbp),%rdi
    0.00 :   170ae:  mov    %r10,-0xa8(%rbp)
         : 819   glibc_hwcaps_priorities_free():
         : 820   ./elf/dl-cache.c:61
    0.00 :   170b5:  movq   $0x0,0x24130(%rip)        # 3b1f0 <glibc_hwcaps_priorities>
         : 822   ./elf/dl-cache.c:62
    0.00 :   170c0:  movl   $0x0,0x2411a(%rip)        # 3b1e4 <glibc_hwcaps_priorities_allocated>
         : 824   malloc():
         : 825   ./elf/../include/rtld-malloc.h:56
    0.00 :   170ca:  call   *0x22990(%rip)        # 39a60 <__rtld_malloc>
         : 827   glibc_hwcaps_priority():
         : 828   ./elf/dl-cache.c:173
    0.00 :   170d0:  mov    0x24111(%rip),%r8d        # 3b1e8 <glibc_hwcaps_priorities_length>
         : 830   glibc_hwcaps_priorities_init():
         : 831   ./elf/dl-cache.c:105
    0.00 :   170d7:  mov    -0xa8(%rbp),%r10
    0.00 :   170de:  test   %rax,%rax
    0.00 :   170e1:  mov    -0xb0(%rbp),%rdx
    0.00 :   170e8:  je     16f5b <_dl_load_cache_lookup+0x84b>
    0.00 :   170ee:  mov    %r10,-0xa8(%rbp)
         : 837   ./elf/dl-cache.c:110
    0.00 :   170f5:  mov    %rax,0x240f4(%rip)        # 3b1f0 <glibc_hwcaps_priorities>
         : 839   ./elf/dl-cache.c:111
    0.00 :   170fc:  mov    %edx,0x240e2(%rip)        # 3b1e4 <glibc_hwcaps_priorities_allocated>
         : 841   ./elf/dl-cache.c:112
    0.00 :   17102:  call   1e4a0 <__rtld_malloc_is_complete>
         : 843   ./elf/dl-cache.c:117
    0.00 :   17107:  mov    -0x48(%rbp),%r9
    0.00 :   1710b:  mov    -0xa8(%rbp),%r10
         : 846   ./elf/dl-cache.c:112
    0.00 :   17112:  mov    %al,0x240c8(%rip)        # 3b1e0 <glibc_hwcaps_priorities_malloced>
         : 848   ./elf/dl-cache.c:120
    0.00 :   17118:  mov    0x24102(%rip),%eax        # 3b220 <_dl_hwcaps_priorities_length>
         : 850   ./elf/dl-cache.c:118
    0.00 :   1711e:  mov    -0x70(%rbp),%rdx
         : 852   ./elf/dl-cache.c:119
    0.00 :   17122:  mov    0x240ff(%rip),%rcx        # 3b228 <_dl_hwcaps_priorities>
         : 854   ./elf/dl-cache.c:121
    0.00 :   17129:  mov    0x240c0(%rip),%r8        # 3b1f0 <glibc_hwcaps_priorities>
         : 856   ./elf/dl-cache.c:120
    0.00 :   17130:  shl    $0x4,%rax
         : 858   ./elf/dl-cache.c:118
    0.00 :   17134:  add    %r9,%rdx
         : 860   ./elf/dl-cache.c:120
    0.00 :   17137:  add    %rcx,%rax
         : 862   ./elf/dl-cache.c:118
    0.00 :   1713a:  mov    %rdx,-0x70(%rbp)
         : 864   ./elf/dl-cache.c:120
    0.00 :   1713e:  mov    %rax,-0xb0(%rbp)
         : 866   ./elf/dl-cache.c:123
    0.00 :   17145:  cmp    %rax,%rcx
    0.00 :   17148:  jae    17279 <_dl_load_cache_lookup+0xb69>
    0.00 :   1714e:  cmp    %r9,%rdx
    0.00 :   17151:  jbe    17021 <_dl_load_cache_lookup+0x911>
         : 871   ./elf/dl-cache.c:125
    0.00 :   17157:  mov    0x2409a(%rip),%rax        # 3b1f8 <cachesize>
         : 873   glibc_hwcaps_compare():
         : 874   ./elf/dl-cache.c:71
    0.00 :   1715e:  mov    %r14d,-0xcc(%rbp)
    0.00 :   17165:  mov    %r8,%r14
    0.00 :   17168:  mov    %r12,-0xe0(%rbp)
    0.00 :   1716f:  mov    %rcx,%r12
         : 879   glibc_hwcaps_priorities_init():
         : 880   ./elf/dl-cache.c:125
    0.00 :   17172:  mov    %rax,-0xa8(%rbp)
         : 882   glibc_hwcaps_compare():
         : 883   ./elf/dl-cache.c:71
    0.00 :   17179:  mov    0x24088(%rip),%rax        # 3b208 <cache>
    0.00 :   17180:  mov    %r15,-0xe8(%rbp)
    0.00 :   17187:  mov    %r9,%r15
    0.00 :   1718a:  mov    %rax,-0xc0(%rbp)
    0.00 :   17191:  mov    %r13d,-0xc4(%rbp)
    0.00 :   17198:  mov    %ebx,-0xc8(%rbp)
    0.00 :   1719e:  mov    %r10,-0xd8(%rbp)
    0.00 :   171a5:  jmp    17203 <_dl_load_cache_lookup+0xaf3>
    0.00 :   171a7:  add    -0xc0(%rbp),%rdi
    0.00 :   171ae:  mov    0x8(%r12),%ebx
         : 894   ./elf/dl-cache.c:72
    0.00 :   171b3:  mov    %rdi,-0xb8(%rbp)
    0.00 :   171ba:  call   2aa40 <strlen>
         : 897   ./elf/dl-cache.c:78
    0.00 :   171bf:  mov    (%r12),%rsi
    0.00 :   171c3:  mov    -0xb8(%rbp),%rdi
    0.00 :   171ca:  cmp    %eax,%ebx
         : 901   ./elf/dl-cache.c:72
    0.00 :   171cc:  mov    %rax,%r13
         : 903   ./elf/dl-cache.c:78
    0.00 :   171cf:  cmovbe %ebx,%eax
    0.00 :   171d2:  mov    %eax,%edx
    0.00 :   171d4:  call   2a410 <bcmp>
         : 907   ./elf/dl-cache.c:79
    0.00 :   171d9:  test   %eax,%eax
    0.00 :   171db:  jne    17232 <_dl_load_cache_lookup+0xb22>
         : 910   ./elf/dl-cache.c:81
    0.00 :   171dd:  cmp    %r13d,%ebx
    0.00 :   171e0:  ja     17239 <_dl_load_cache_lookup+0xb29>
         : 913   glibc_hwcaps_priorities_init():
         : 914   ./elf/dl-cache.c:133
    0.00 :   171e2:  lea    0x10(%r12),%rax
         : 916   glibc_hwcaps_compare():
         : 917   ./elf/dl-cache.c:83
    0.00 :   171e7:  jae    1721c <_dl_load_cache_lookup+0xb0c>
         : 919   glibc_hwcaps_priorities_init():
         : 920   ./elf/dl-cache.c:142
    0.00 :   171e9:  mov    %rax,%r12
    0.00 :   171ec:  nopl   0x0(%rax)
         : 923   ./elf/dl-cache.c:123
    0.00 :   171f0:  cmp    %r15,-0x70(%rbp)
    0.00 :   171f4:  jbe    16ff8 <_dl_load_cache_lookup+0x8e8>
    0.00 :   171fa:  cmp    %r12,-0xb0(%rbp)
    0.00 :   17201:  jbe    1724a <_dl_load_cache_lookup+0xb3a>
         : 928   ./elf/dl-cache.c:125
    0.00 :   17203:  mov    (%r15),%edi
    0.00 :   17206:  cmp    -0xa8(%rbp),%rdi
    0.00 :   1720d:  jb     171a7 <_dl_load_cache_lookup+0xa97>
         : 932   ./elf/dl-cache.c:146
    0.00 :   1720f:  movl   $0x0,(%r14)
         : 934   ./elf/dl-cache.c:147
    0.00 :   17216:  add    $0x4,%r14
    0.00 :   1721a:  jmp    171f0 <_dl_load_cache_lookup+0xae0>
         : 937   ./elf/dl-cache.c:130
    0.00 :   1721c:  mov    0xc(%r12),%edx
         : 939   ./elf/dl-cache.c:131
    0.00 :   17221:  add    $0x4,%r14
         : 941   ./elf/dl-cache.c:132
    0.00 :   17225:  add    $0x4,%r15
         : 943   ./elf/dl-cache.c:133
    0.00 :   17229:  mov    %rax,%r12
         : 945   ./elf/dl-cache.c:130
    0.00 :   1722c:  mov    %edx,-0x4(%r14)
         : 947   ./elf/dl-cache.c:133
    0.00 :   17230:  jmp    171f0 <_dl_load_cache_lookup+0xae0>
         : 949   ./elf/dl-cache.c:135
    0.00 :   17232:  lea    0x10(%r12),%rax
    0.00 :   17237:  jns    171e9 <_dl_load_cache_lookup+0xad9>
         : 952   ./elf/dl-cache.c:137
    0.00 :   17239:  movl   $0x0,(%r14)
         : 954   ./elf/dl-cache.c:139
    0.00 :   17240:  add    $0x4,%r15
         : 956   ./elf/dl-cache.c:138
    0.00 :   17244:  add    $0x4,%r14
         : 958   ./elf/dl-cache.c:139
    0.00 :   17248:  jmp    171f0 <_dl_load_cache_lookup+0xae0>
    0.00 :   1724a:  mov    %r15,%r9
    0.00 :   1724d:  mov    %r14,%r8
    0.00 :   17250:  mov    -0xc4(%rbp),%r13d
    0.00 :   17257:  mov    -0xc8(%rbp),%ebx
    0.00 :   1725d:  mov    -0xd8(%rbp),%r10
    0.00 :   17264:  mov    -0xcc(%rbp),%r14d
    0.00 :   1726b:  mov    -0xe0(%rbp),%r12
    0.00 :   17272:  mov    -0xe8(%rbp),%r15
         : 968   ./elf/dl-cache.c:150
    0.00 :   17279:  cmp    %r9,-0x70(%rbp)
    0.00 :   1727d:  jbe    17021 <_dl_load_cache_lookup+0x911>
         : 971   ./elf/dl-cache.c:152
    0.00 :   17283:  mov    -0x70(%rbp),%rax
    0.00 :   17287:  xor    %esi,%esi
    0.00 :   17289:  mov    %r8,%rdi
    0.00 :   1728c:  mov    %r10,-0xa8(%rbp)
    0.00 :   17293:  sub    $0x1,%rax
    0.00 :   17297:  sub    %r9,%rax
    0.00 :   1729a:  shr    $0x2,%rax
    0.00 :   1729e:  lea    0x4(,%rax,4),%rdx
    0.00 :   172a6:  call   2b1a0 <memset>
    0.00 :   172ab:  mov    -0xa0(%rbp),%eax
    0.00 :   172b1:  mov    -0xa8(%rbp),%r10
    0.00 :   172b8:  jmp    17027 <_dl_load_cache_lookup+0x917>
         : 984   ./elf/dl-cache.c:98
    0.00 :   172bd:  xor    %eax,%eax
    0.00 :   172bf:  jmp    17027 <_dl_load_cache_lookup+0x917>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000185e0 <get_common_indices.constprop.0>:
         : 6     get_common_indices():
         : 7     ./elf/../sysdeps/x86/cpu-features.c:325
    0.00 :   185e0:  push   %rbx
         : 9     ./elf/../sysdeps/x86/cpu-features.c:329
    0.00 :   185e1:  test   %rdi,%rdi
    0.00 :   185e4:  je     1863e <get_common_indices.constprop.0+0x5e>
    0.00 :   185e6:  mov    %rdx,%r8
    0.00 :   185e9:  mov    %rcx,%r9
         : 14    ./elf/../sysdeps/x86/cpu-features.c:332
    0.00 :   185ec:  mov    $0x1,%eax
    0.00 :   185f1:  cpuid
  100.00 :   185f3:  mov    %edx,0x21577(%rip)        # 39b70 <_rtld_global_ro+0x90>
         : 18    ./elf/../sysdeps/x86/cpu-features.c:337
    0.00 :   185f9:  mov    %eax,%edx
    0.00 :   185fb:  shr    $0x8,%edx
         : 21    ./elf/../sysdeps/x86/cpu-features.c:332
    0.00 :   185fe:  mov    %ebx,0x21564(%rip)        # 39b68 <_rtld_global_ro+0x88>
         : 23    ./elf/../sysdeps/x86/cpu-features.c:337
    0.00 :   18604:  and    $0xf,%edx
         : 25    ./elf/../sysdeps/x86/cpu-features.c:332
    0.00 :   18607:  mov    %ecx,0x2155f(%rip)        # 39b6c <_rtld_global_ro+0x8c>
         : 27    ./elf/../sysdeps/x86/cpu-features.c:336
    0.00 :   1860d:  mov    %eax,0x21551(%rip)        # 39b64 <_rtld_global_ro+0x84>
         : 29    ./elf/../sysdeps/x86/cpu-features.c:337
    0.00 :   18613:  mov    %edx,(%rdi)
         : 31    ./elf/../sysdeps/x86/cpu-features.c:338
    0.00 :   18615:  mov    %eax,%edx
    0.00 :   18617:  shr    $0x4,%edx
    0.00 :   1861a:  and    $0xf,%edx
    0.00 :   1861d:  mov    %edx,(%rsi)
         : 36    ./elf/../sysdeps/x86/cpu-features.c:339
    0.00 :   1861f:  mov    %eax,%edx
    0.00 :   18621:  shr    $0xc,%edx
    0.00 :   18624:  and    $0xf0,%edx
    0.00 :   1862a:  mov    %edx,(%r8)
         : 41    ./elf/../sysdeps/x86/cpu-features.c:340
    0.00 :   1862d:  mov    %eax,%edx
    0.00 :   1862f:  and    $0xf,%edx
    0.00 :   18632:  mov    %edx,(%r9)
         : 45    ./elf/../sysdeps/x86/cpu-features.c:341
    0.00 :   18635:  cmpl   $0xf,(%rdi)
    0.00 :   18638:  je     18760 <get_common_indices.constprop.0+0x180>
         : 48    ./elf/../sysdeps/x86/cpu-features.c:348
    0.00 :   1863e:  cmpl   $0x6,0x2150f(%rip)        # 39b54 <_rtld_global_ro+0x74>
    0.00 :   18645:  jle    18714 <get_common_indices.constprop.0+0x134>
         : 51    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   1864b:  mov    $0x7,%r8d
    0.00 :   18651:  xor    %esi,%esi
    0.00 :   18653:  mov    %r8d,%eax
    0.00 :   18656:  mov    %esi,%ecx
    0.00 :   18658:  cpuid
         : 57    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   1865a:  mov    $0x1,%edi
         : 59    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   1865f:  mov    %eax,0x2151f(%rip)        # 39b84 <_rtld_global_ro+0xa4>
         : 61    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   18665:  mov    %r8d,%eax
         : 63    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   18668:  mov    %ecx,0x2151e(%rip)        # 39b8c <_rtld_global_ro+0xac>
         : 65    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   1866e:  mov    %edi,%ecx
         : 67    ./elf/../sysdeps/x86/cpu-features.c:350
    0.00 :   18670:  mov    %ebx,0x21512(%rip)        # 39b88 <_rtld_global_ro+0xa8>
    0.00 :   18676:  mov    %edx,0x21514(%rip)        # 39b90 <_rtld_global_ro+0xb0>
         : 70    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   1867c:  cpuid
         : 72    ./elf/../sysdeps/x86/cpu-features.c:362
    0.00 :   1867e:  cmpl   $0xc,0x214cf(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 74    ./elf/../sysdeps/x86/cpu-features.c:355
    0.00 :   18685:  mov    %eax,0x21599(%rip)        # 39c24 <_rtld_global_ro+0x144>
    0.00 :   1868b:  mov    %ebx,0x21597(%rip)        # 39c28 <_rtld_global_ro+0x148>
    0.00 :   18691:  mov    %ecx,0x21595(%rip)        # 39c2c <_rtld_global_ro+0x14c>
    0.00 :   18697:  mov    %edx,0x21593(%rip)        # 39c30 <_rtld_global_ro+0x150>
         : 79    ./elf/../sysdeps/x86/cpu-features.c:362
    0.00 :   1869d:  jle    18714 <get_common_indices.constprop.0+0x134>
         : 81    ./elf/../sysdeps/x86/cpu-features.c:363
    0.00 :   1869f:  mov    $0xd,%eax
    0.00 :   186a4:  mov    %edi,%ecx
    0.00 :   186a6:  cpuid
         : 85    ./elf/../sysdeps/x86/cpu-features.c:369
    0.00 :   186a8:  cmpl   $0x13,0x214a5(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 87    ./elf/../sysdeps/x86/cpu-features.c:363
    0.00 :   186af:  mov    %eax,0x2150f(%rip)        # 39bc4 <_rtld_global_ro+0xe4>
    0.00 :   186b5:  mov    %ebx,0x2150d(%rip)        # 39bc8 <_rtld_global_ro+0xe8>
    0.00 :   186bb:  mov    %ecx,0x2150b(%rip)        # 39bcc <_rtld_global_ro+0xec>
    0.00 :   186c1:  mov    %edx,0x21509(%rip)        # 39bd0 <_rtld_global_ro+0xf0>
         : 92    ./elf/../sysdeps/x86/cpu-features.c:369
    0.00 :   186c7:  jle    18714 <get_common_indices.constprop.0+0x134>
         : 94    ./elf/../sysdeps/x86/cpu-features.c:370
    0.00 :   186c9:  mov    $0x14,%eax
    0.00 :   186ce:  mov    %esi,%ecx
    0.00 :   186d0:  cpuid
         : 98    ./elf/../sysdeps/x86/cpu-features.c:376
    0.00 :   186d2:  cmpl   $0x18,0x2147b(%rip)        # 39b54 <_rtld_global_ro+0x74>
         : 100   ./elf/../sysdeps/x86/cpu-features.c:370
    0.00 :   186d9:  mov    %eax,0x21585(%rip)        # 39c64 <_rtld_global_ro+0x184>
    0.00 :   186df:  mov    %ebx,0x21583(%rip)        # 39c68 <_rtld_global_ro+0x188>
    0.00 :   186e5:  mov    %ecx,0x21581(%rip)        # 39c6c <_rtld_global_ro+0x18c>
    0.00 :   186eb:  mov    %edx,0x2157f(%rip)        # 39c70 <_rtld_global_ro+0x190>
         : 105   ./elf/../sysdeps/x86/cpu-features.c:376
    0.00 :   186f1:  jle    18714 <get_common_indices.constprop.0+0x134>
         : 107   ./elf/../sysdeps/x86/cpu-features.c:377
    0.00 :   186f3:  mov    $0x19,%eax
    0.00 :   186f8:  mov    %esi,%ecx
    0.00 :   186fa:  cpuid
    0.00 :   186fc:  mov    %eax,0x21542(%rip)        # 39c44 <_rtld_global_ro+0x164>
    0.00 :   18702:  mov    %ebx,0x21540(%rip)        # 39c48 <_rtld_global_ro+0x168>
    0.00 :   18708:  mov    %ecx,0x2153e(%rip)        # 39c4c <_rtld_global_ro+0x16c>
    0.00 :   1870e:  mov    %edx,0x2153c(%rip)        # 39c50 <_rtld_global_ro+0x170>
         : 115   dl_check_minsigstacksize():
         : 116   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:24
    0.00 :   18714:  cmpq   $0x0,0x213e4(%rip)        # 39b00 <_rtld_global_ro+0x20>
    0.00 :   1871c:  jne    18746 <get_common_indices.constprop.0+0x166>
         : 119   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:27
    0.00 :   1871e:  cmpl   $0xc,0x2142f(%rip)        # 39b54 <_rtld_global_ro+0x74>
    0.00 :   18725:  jle    18750 <get_common_indices.constprop.0+0x170>
         : 122   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:28
    0.00 :   18727:  testb  $0x8,0x21441(%rip)        # 39b6f <_rtld_global_ro+0x8f>
    0.00 :   1872e:  je     18750 <get_common_indices.constprop.0+0x170>
         : 125   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:65
    0.00 :   18730:  mov    $0xd,%eax
    0.00 :   18735:  xor    %ecx,%ecx
    0.00 :   18737:  cpuid
         : 129   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:72
    0.00 :   18739:  lea    0x204(%rbx),%eax
         : 131   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:74
    0.00 :   1873f:  mov    %rax,0x213ba(%rip)        # 39b00 <_rtld_global_ro+0x20>
         : 133   get_common_indices():
         : 134   ./elf/../sysdeps/x86/cpu-features.c:384
    0.00 :   18746:  pop    %rbx
    0.00 :   18747:  ret
    0.00 :   18748:  nopl   0x0(%rax,%rax,1)
         : 138   dl_check_minsigstacksize():
         : 139   ./elf/../sysdeps/unix/sysv/linux/x86/dl-minsigstacksize.h:81
    0.00 :   18750:  movq   $0x800,0x213a5(%rip)        # 39b00 <_rtld_global_ro+0x20>
         : 141   get_common_indices():
         : 142   ./elf/../sysdeps/x86/cpu-features.c:384
    0.00 :   1875b:  pop    %rbx
    0.00 :   1875c:  ret
    0.00 :   1875d:  nopl   (%rax)
         : 146   ./elf/../sysdeps/x86/cpu-features.c:343
    0.00 :   18760:  shr    $0x14,%eax
    0.00 :   18763:  movzbl %al,%eax
    0.00 :   18766:  add    $0xf,%eax
    0.00 :   18769:  mov    %eax,(%rdi)
         : 151   ./elf/../sysdeps/x86/cpu-features.c:344
    0.00 :   1876b:  mov    (%r8),%eax
    0.00 :   1876e:  add    %eax,(%rsi)
    0.00 :   18770:  jmp    1863e <get_common_indices.constprop.0+0x5e>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000018400 <handle_amd>:
         : 6     handle_amd():
         : 7     ./elf/../sysdeps/x86/dl-cacheinfo.h:315
    0.00 :   18400:  push   %rbx
         : 9     ./elf/../sysdeps/x86/dl-cacheinfo.h:320
  100.00 :   18401:  mov    $0x80000000,%eax
    0.00 :   18406:  cpuid
         : 12    ./elf/../sysdeps/x86/dl-cacheinfo.h:326
    0.00 :   18408:  xor    %edx,%edx
    0.00 :   1840a:  cmp    $0xbe,%edi
    0.00 :   18410:  setg   %dl
         : 16    ./elf/../sysdeps/x86/dl-cacheinfo.h:328
    0.00 :   18413:  xor    %r8d,%r8d
         : 18    ./elf/../sysdeps/x86/dl-cacheinfo.h:326
    0.00 :   18416:  sub    $0x7ffffffb,%edx
         : 20    ./elf/../sysdeps/x86/dl-cacheinfo.h:327
    0.00 :   1841c:  cmp    %eax,%edx
    0.00 :   1841e:  ja     1846b <handle_amd+0x6b>
    0.00 :   18420:  mov    %edi,%esi
         : 24    ./elf/../sysdeps/x86/dl-cacheinfo.h:330
    0.00 :   18422:  mov    %edx,%eax
    0.00 :   18424:  cpuid
         : 27    ./elf/../sysdeps/x86/dl-cacheinfo.h:332
    0.00 :   18426:  cmp    $0xbb,%edi
    0.00 :   1842c:  jle    18470 <handle_amd+0x70>
         : 30    ./elf/../sysdeps/x86/dl-cacheinfo.h:338
    0.00 :   1842e:  sub    $0xbd,%esi
    0.00 :   18434:  cmp    $0x7,%esi
    0.00 :   18437:  ja     185c5 <handle_amd+0x1c5>
    0.00 :   1843d:  lea    0x13efc(%rip),%rdi        # 2c340 <msg.0+0x60>
    0.00 :   18444:  movslq (%rdi,%rsi,4),%rax
    0.00 :   18448:  add    %rdi,%rax
    0.00 :   1844b:  notrack jmp *%rax
    0.00 :   1844e:  xchg   %ax,%ax
         : 39    ./elf/../sysdeps/x86/dl-cacheinfo.h:344
    0.00 :   18450:  shr    $0x10,%ecx
         : 41    ./elf/../sysdeps/x86/dl-cacheinfo.h:345
    0.00 :   18453:  movzbl %cl,%r8d
         : 43    ./elf/../sysdeps/x86/dl-cacheinfo.h:347
    0.00 :   18457:  shl    $0x2,%ecx
    0.00 :   1845a:  and    $0x3fc00,%ecx
    0.00 :   18460:  cmp    $0xff,%r8d
    0.00 :   18467:  cmove  %rcx,%r8
         : 48    ./elf/../sysdeps/x86/dl-cacheinfo.h:427
    0.00 :   1846b:  mov    %r8,%rax
    0.00 :   1846e:  pop    %rbx
    0.00 :   1846f:  ret
         : 52    ./elf/../sysdeps/x86/dl-cacheinfo.h:334
    0.00 :   18470:  add    $0x3,%esi
         : 54    ./elf/../sysdeps/x86/dl-cacheinfo.h:330
    0.00 :   18473:  mov    %edx,%ecx
    0.00 :   18475:  jmp    1842e <handle_amd+0x2e>
    0.00 :   18477:  nopw   0x0(%rax,%rax,1)
         : 58    ./elf/../sysdeps/x86/dl-cacheinfo.h:392
    0.00 :   18480:  mov    %edx,%r8d
    0.00 :   18483:  lea    0x13ed6(%rip),%rcx        # 2c360 <msg.0+0x80>
    0.00 :   1848a:  shr    $0xc,%r8d
    0.00 :   1848e:  and    $0xf,%r8d
    0.00 :   18492:  movslq (%rcx,%r8,4),%rax
    0.00 :   18496:  add    %rcx,%rax
    0.00 :   18499:  notrack jmp *%rax
    0.00 :   1849c:  nopl   0x0(%rax)
         : 67    ./elf/../sysdeps/x86/dl-cacheinfo.h:421
    0.00 :   184a0:  movzbl %dl,%r8d
    0.00 :   184a4:  xor    %eax,%eax
    0.00 :   184a6:  and    $0xf0,%dh
    0.00 :   184a9:  cmove  %rax,%r8
    0.00 :   184ad:  jmp    1846b <handle_amd+0x6b>
    0.00 :   184af:  nop
         : 74    ./elf/../sysdeps/x86/dl-cacheinfo.h:328
    0.00 :   184b0:  xor    %r8d,%r8d
         : 76    ./elf/../sysdeps/x86/dl-cacheinfo.h:354
    0.00 :   184b3:  test   $0xf0,%ch
    0.00 :   184b6:  je     1846b <handle_amd+0x6b>
         : 79    ./elf/../sysdeps/x86/dl-cacheinfo.h:354 (discriminator 1)
    0.00 :   184b8:  shr    $0x6,%ecx
    0.00 :   184bb:  mov    %ecx,%r8d
    0.00 :   184be:  and    $0x3fffc00,%r8d
    0.00 :   184c5:  jmp    1846b <handle_amd+0x6b>
    0.00 :   184c7:  nopw   0x0(%rax,%rax,1)
         : 85    ./elf/../sysdeps/x86/dl-cacheinfo.h:357
    0.00 :   184d0:  mov    %ecx,%r8d
    0.00 :   184d3:  lea    0x13ec6(%rip),%rsi        # 2c3a0 <msg.0+0xc0>
    0.00 :   184da:  shr    $0xc,%r8d
    0.00 :   184de:  mov    %r8d,%edx
    0.00 :   184e1:  and    $0xf,%edx
    0.00 :   184e4:  movslq (%rsi,%rdx,4),%rax
    0.00 :   184e8:  add    %rsi,%rax
    0.00 :   184eb:  notrack jmp *%rax
    0.00 :   184ee:  xchg   %ax,%ax
         : 95    ./elf/../sysdeps/x86/dl-cacheinfo.h:386
    0.00 :   184f0:  movzbl %cl,%edx
    0.00 :   184f3:  xor    %eax,%eax
    0.00 :   184f5:  and    $0xf0,%ch
    0.00 :   184f8:  cmovne %rdx,%rax
    0.00 :   184fc:  mov    %rax,%r8
    0.00 :   184ff:  jmp    1846b <handle_amd+0x6b>
    0.00 :   18504:  nopl   0x0(%rax)
         : 103   ./elf/../sysdeps/x86/dl-cacheinfo.h:328
    0.00 :   18508:  xor    %r8d,%r8d
         : 105   ./elf/../sysdeps/x86/dl-cacheinfo.h:389
    0.00 :   1850b:  test   $0xf0,%dh
    0.00 :   1850e:  je     1846b <handle_amd+0x6b>
         : 108   ./elf/../sysdeps/x86/dl-cacheinfo.h:389 (discriminator 1)
    0.00 :   18514:  lea    (%rdx,%rdx,1),%r8d
    0.00 :   18518:  and    $0x7ff80000,%r8d
    0.00 :   1851f:  jmp    1846b <handle_amd+0x6b>
    0.00 :   18524:  nopl   0x0(%rax)
         : 113   ./elf/../sysdeps/x86/dl-cacheinfo.h:351
    0.00 :   18528:  movzbl %cl,%r8d
    0.00 :   1852c:  jmp    1846b <handle_amd+0x6b>
    0.00 :   18531:  nopl   0x0(%rax)
         : 117   ./elf/../sysdeps/x86/dl-cacheinfo.h:363
    0.00 :   18538:  mov    %rdx,%r8
    0.00 :   1853b:  jmp    1846b <handle_amd+0x6b>
         : 120   ./elf/../sysdeps/x86/dl-cacheinfo.h:392
    0.00 :   18540:  xor    %r8d,%r8d
    0.00 :   18543:  jmp    1846b <handle_amd+0x6b>
         : 123   ./elf/../sysdeps/x86/dl-cacheinfo.h:369
    0.00 :   18548:  mov    $0x20,%r8d
    0.00 :   1854e:  jmp    1846b <handle_amd+0x6b>
         : 126   ./elf/../sysdeps/x86/dl-cacheinfo.h:367
    0.00 :   18553:  mov    $0x10,%r8d
    0.00 :   18559:  jmp    1846b <handle_amd+0x6b>
         : 129   ./elf/../sysdeps/x86/dl-cacheinfo.h:375
    0.00 :   1855e:  mov    $0x60,%r8d
    0.00 :   18564:  jmp    1846b <handle_amd+0x6b>
         : 132   ./elf/../sysdeps/x86/dl-cacheinfo.h:373
    0.00 :   18569:  mov    $0x40,%r8d
    0.00 :   1856f:  jmp    1846b <handle_amd+0x6b>
         : 135   ./elf/../sysdeps/x86/dl-cacheinfo.h:371
    0.00 :   18574:  mov    $0x30,%r8d
    0.00 :   1857a:  jmp    1846b <handle_amd+0x6b>
         : 138   ./elf/../sysdeps/x86/dl-cacheinfo.h:377
    0.00 :   1857f:  mov    $0x80,%r8d
    0.00 :   18585:  jmp    1846b <handle_amd+0x6b>
         : 141   ./elf/../sysdeps/x86/dl-cacheinfo.h:365
    0.00 :   1858a:  mov    $0x8,%r8d
    0.00 :   18590:  jmp    1846b <handle_amd+0x6b>
         : 144   ./elf/../sysdeps/x86/dl-cacheinfo.h:379
    0.00 :   18595:  mov    %ecx,%eax
    0.00 :   18597:  xor    %edx,%edx
    0.00 :   18599:  movzbl %cl,%ecx
    0.00 :   1859c:  shr    $0x6,%eax
    0.00 :   1859f:  and    $0x3fffc00,%eax
    0.00 :   185a4:  div    %ecx
    0.00 :   185a6:  mov    %eax,%r8d
    0.00 :   185a9:  jmp    1846b <handle_amd+0x6b>
         : 153   ./elf/../sysdeps/x86/dl-cacheinfo.h:414
    0.00 :   185ae:  lea    (%rdx,%rdx,1),%eax
    0.00 :   185b1:  movzbl %dl,%ecx
    0.00 :   185b4:  xor    %edx,%edx
    0.00 :   185b6:  and    $0x7ff80000,%eax
    0.00 :   185bb:  div    %ecx
    0.00 :   185bd:  mov    %eax,%r8d
    0.00 :   185c0:  jmp    1846b <handle_amd+0x6b>
         : 161   ./elf/../sysdeps/x86/dl-cacheinfo.h:341
    0.00 :   185c5:  shr    $0xe,%ecx
    0.00 :   185c8:  mov    %ecx,%r8d
    0.00 :   185cb:  and    $0x3fc00,%r8d
    0.00 :   185d2:  jmp    1846b <handle_amd+0x6b>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000008b600 <_IO_file_xsputn@@GLIBC_2.2.5>:
         : 6     _IO_new_file_xsputn():
         : 7     ./libio/fileops.c:1197
    0.00 :   8b600:  endbr64
    0.00 :   8b604:  push   %r15
    0.00 :   8b606:  push   %r14
    0.00 :   8b608:  push   %r13
    0.00 :   8b60a:  push   %r12
         : 13    ./libio/fileops.c:1204
    0.00 :   8b60c:  xor    %r12d,%r12d
         : 15    ./libio/fileops.c:1197
    0.00 :   8b60f:  push   %rbp
    0.00 :   8b610:  push   %rbx
    0.00 :   8b611:  sub    $0x18,%rsp
         : 19    ./libio/fileops.c:1203
    0.00 :   8b615:  test   %rdx,%rdx
    0.00 :   8b618:  je     8b66e <_IO_file_xsputn@@GLIBC_2.2.5+0x6e>
    0.00 :   8b61a:  mov    %rdi,%rbp
    0.00 :   8b61d:  mov    %rsi,%r13
         : 24    ./libio/fileops.c:1212
    0.00 :   8b620:  mov    0x28(%rdi),%rdi
    0.00 :   8b624:  mov    %rdx,%rbx
         : 27    ./libio/fileops.c:1210
    0.00 :   8b627:  mov    0x0(%rbp),%eax
    0.00 :   8b62a:  and    $0xa00,%eax
    0.00 :   8b62f:  cmp    $0xa00,%eax
    0.00 :   8b634:  je     8b680 <_IO_file_xsputn@@GLIBC_2.2.5+0x80>
         : 32    ./libio/fileops.c:1227
    0.00 :   8b636:  mov    0x30(%rbp),%r12
    0.00 :   8b63a:  cmp    %rdi,%r12
    0.00 :   8b63d:  jbe    8b6a0 <_IO_file_xsputn@@GLIBC_2.2.5+0xa0>
         : 36    ./libio/fileops.c:1228
    0.00 :   8b63f:  sub    %rdi,%r12
         : 38    ./libio/fileops.c:1231
    0.00 :   8b642:  xor    %r14d,%r14d
    0.00 :   8b645:  test   %r12,%r12
    0.00 :   8b648:  je     8b6a0 <_IO_file_xsputn@@GLIBC_2.2.5+0xa0>
         : 42    ./libio/fileops.c:1233
    0.00 :   8b64a:  cmp    %rbx,%r12
         : 44    ./libio/fileops.c:1235
    0.00 :   8b64d:  mov    %r13,%rsi
         : 46    ./libio/fileops.c:1237
    0.00 :   8b650:  mov    %rbx,%r15
    0.00 :   8b653:  cmova  %rbx,%r12
         : 49    ./libio/fileops.c:1235
    0.00 :   8b657:  mov    %r12,%rdx
         : 51    ./libio/fileops.c:1236
    0.00 :   8b65a:  add    %r12,%r13
         : 53    ./libio/fileops.c:1237
    0.00 :   8b65d:  sub    %r12,%r15
         : 55    ./libio/fileops.c:1235
    0.00 :   8b660:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   8b665:  mov    %rax,0x28(%rbp)
         : 58    ./libio/fileops.c:1239
    0.00 :   8b669:  add    %r15,%r14
    0.00 :   8b66c:  jne    8b6a3 <_IO_file_xsputn@@GLIBC_2.2.5+0xa3>
         : 61    ./libio/fileops.c:1267
    0.00 :   8b66e:  add    $0x18,%rsp
    0.00 :   8b672:  mov    %r12,%rax
    0.00 :   8b675:  pop    %rbx
    0.00 :   8b676:  pop    %rbp
    0.00 :   8b677:  pop    %r12
    0.00 :   8b679:  pop    %r13
    0.00 :   8b67b:  pop    %r14
    0.00 :   8b67d:  pop    %r15
    0.00 :   8b67f:  ret
         : 71    ./libio/fileops.c:1212
    0.00 :   8b680:  mov    0x40(%rbp),%r12
         : 73    ./libio/fileops.c:1216
    0.00 :   8b684:  lea    (%rsi,%rdx,1),%rax
         : 75    ./libio/fileops.c:1212
    0.00 :   8b688:  sub    %rdi,%r12
         : 77    ./libio/fileops.c:1213
    0.00 :   8b68b:  cmp    %r12,%rdx
    0.00 :   8b68e:  jbe    8b73d <_IO_file_xsputn@@GLIBC_2.2.5+0x13d>
         : 80    ./libio/fileops.c:1231
    0.00 :   8b694:  xor    %r14d,%r14d
    0.00 :   8b697:  test   %r12,%r12
    0.00 :   8b69a:  jne    8b64a <_IO_file_xsputn@@GLIBC_2.2.5+0x4a>
    0.00 :   8b69c:  nopl   0x0(%rax)
    0.00 :   8b6a0:  mov    %rbx,%r15
         : 86    ./libio/fileops.c:1243
    0.00 :   8b6a3:  mov    0xd8(%rbp),%rax
         : 88    IO_validate_vtable():
         : 89    ./libio/libioP.h:940
    0.00 :   8b6aa:  lea    0x18b34f(%rip),%r14        # 216a00 <_IO_helper_jumps>
    0.00 :   8b6b1:  lea    0x18c0b0(%rip),%r12        # 217768 <__stop___libc_IO_vtables>
    0.00 :   8b6b8:  sub    %r14,%r12
         : 93    ./libio/libioP.h:942
    0.00 :   8b6bb:  mov    %rax,%rdx
    0.00 :   8b6be:  sub    %r14,%rdx
         : 96    ./libio/libioP.h:943
    0.00 :   8b6c1:  cmp    %rdx,%r12
    0.00 :   8b6c4:  jbe    8b880 <_IO_file_xsputn@@GLIBC_2.2.5+0x280>
         : 99    _IO_new_file_xsputn():
         : 100   ./libio/fileops.c:1243
    0.00 :   8b6ca:  mov    $0xffffffff,%esi
    0.00 :   8b6cf:  mov    %rbp,%rdi
    0.00 :   8b6d2:  call   *0x18(%rax)
    0.00 :   8b6d5:  cmp    $0xffffffff,%eax
    0.00 :   8b6d8:  je     8b830 <_IO_file_xsputn@@GLIBC_2.2.5+0x230>
         : 106   ./libio/fileops.c:1249
    0.00 :   8b6de:  mov    0x40(%rbp),%rcx
    0.00 :   8b6e2:  sub    0x38(%rbp),%rcx
         : 109   ./libio/fileops.c:1250
    0.00 :   8b6e6:  mov    %r15,%r8
    0.00 :   8b6e9:  cmp    $0x7f,%rcx
    0.00 :   8b6ed:  jbe    8b6fa <_IO_file_xsputn@@GLIBC_2.2.5+0xfa>
    0.00 :   8b6ef:  mov    %r15,%rax
    0.00 :   8b6f2:  xor    %edx,%edx
    0.00 :   8b6f4:  div    %rcx
    0.00 :   8b6f7:  sub    %rdx,%r8
         : 117   ./libio/fileops.c:1252
    0.00 :   8b6fa:  test   %r8,%r8
    0.00 :   8b6fd:  jne    8b750 <_IO_file_xsputn@@GLIBC_2.2.5+0x150>
         : 120   ./libio/fileops.c:1263
    0.00 :   8b6ff:  mov    %rbx,%r12
    0.00 :   8b702:  test   %r15,%r15
    0.00 :   8b705:  je     8b66e <_IO_file_xsputn@@GLIBC_2.2.5+0x6e>
         : 124   ./libio/fileops.c:1264
    0.00 :   8b70b:  lea    0x0(%r13,%r8,1),%rsi
    0.00 :   8b710:  mov    %r15,%rdx
    0.00 :   8b713:  mov    %rbp,%rdi
    0.00 :   8b716:  call   8ddc0 <_IO_default_xsputn>
         : 129   ./libio/fileops.c:1266
    0.00 :   8b71b:  sub    %r15,%rax
    0.00 :   8b71e:  add    %rax,%r12
    0.00 :   8b721:  jmp    8b66e <_IO_file_xsputn@@GLIBC_2.2.5+0x6e>
    0.00 :   8b726:  cs nopw 0x0(%rax,%rax,1)
         : 134   ./libio/fileops.c:1218
    0.00 :   8b730:  sub    $0x1,%rax
    0.00 :   8b734:  cmpb   $0xa,(%rax)
    0.00 :   8b737:  je     8b850 <_IO_file_xsputn@@GLIBC_2.2.5+0x250>
         : 138   ./libio/fileops.c:1216
    0.00 :   8b73d:  cmp    %rax,%r13
  100.00 :   8b740:  jb     8b730 <_IO_file_xsputn@@GLIBC_2.2.5+0x130>
    0.00 :   8b742:  xor    %r14d,%r14d
    0.00 :   8b745:  jmp    8b64a <_IO_file_xsputn@@GLIBC_2.2.5+0x4a>
    0.00 :   8b74a:  nopw   0x0(%rax,%rax,1)
         : 144   new_do_write():
         : 145   ./libio/fileops.c:443
    0.00 :   8b750:  mov    0xd8(%rbp),%rax
         : 147   ./libio/fileops.c:433
    0.00 :   8b757:  testl  $0x1000,0x0(%rbp)
    0.00 :   8b75e:  jne    8b870 <_IO_file_xsputn@@GLIBC_2.2.5+0x270>
         : 150   ./libio/fileops.c:440
    0.00 :   8b764:  mov    0x10(%rbp),%rdx
    0.00 :   8b768:  mov    0x20(%rbp),%rsi
    0.00 :   8b76c:  cmp    %rsi,%rdx
    0.00 :   8b76f:  je     8b7b1 <_IO_file_xsputn@@GLIBC_2.2.5+0x1b1>
         : 155   IO_validate_vtable():
         : 156   ./libio/libioP.h:942
    0.00 :   8b771:  mov    %rax,%rcx
    0.00 :   8b774:  sub    %r14,%rcx
         : 159   ./libio/libioP.h:943
    0.00 :   8b777:  cmp    %rcx,%r12
    0.00 :   8b77a:  jbe    8b8fd <_IO_file_xsputn@@GLIBC_2.2.5+0x2fd>
         : 162   new_do_write():
         : 163   ./libio/fileops.c:443
    0.00 :   8b780:  sub    %rdx,%rsi
    0.00 :   8b783:  mov    %r8,(%rsp)
    0.00 :   8b787:  mov    $0x1,%edx
    0.00 :   8b78c:  mov    %rbp,%rdi
    0.00 :   8b78f:  call   *0x80(%rax)
         : 169   ./libio/fileops.c:444
    0.00 :   8b795:  cmp    $0xffffffffffffffff,%rax
    0.00 :   8b799:  je     8b8aa <_IO_file_xsputn@@GLIBC_2.2.5+0x2aa>
         : 172   ./libio/fileops.c:446
    0.00 :   8b79f:  mov    %rax,0x90(%rbp)
    0.00 :   8b7a6:  mov    (%rsp),%r8
    0.00 :   8b7aa:  mov    0xd8(%rbp),%rax
         : 176   IO_validate_vtable():
         : 177   ./libio/libioP.h:942
    0.00 :   8b7b1:  mov    %rax,%rdx
    0.00 :   8b7b4:  sub    %r14,%rdx
         : 180   ./libio/libioP.h:943
    0.00 :   8b7b7:  cmp    %rdx,%r12
    0.00 :   8b7ba:  jbe    8b8e1 <_IO_file_xsputn@@GLIBC_2.2.5+0x2e1>
         : 183   new_do_write():
         : 184   ./libio/fileops.c:448
    0.00 :   8b7c0:  mov    %r8,(%rsp)
    0.00 :   8b7c4:  mov    %r8,%rdx
    0.00 :   8b7c7:  mov    %r13,%rsi
    0.00 :   8b7ca:  mov    %rbp,%rdi
    0.00 :   8b7cd:  call   *0x78(%rax)
         : 190   ./libio/fileops.c:449
    0.00 :   8b7d0:  mov    (%rsp),%r8
         : 192   ./libio/fileops.c:448
    0.00 :   8b7d4:  mov    %rax,%r14
         : 194   ./libio/fileops.c:449
    0.00 :   8b7d7:  movzwl 0x80(%rbp),%eax
    0.00 :   8b7de:  test   %r14,%r14
    0.00 :   8b7e1:  je     8b7ec <_IO_file_xsputn@@GLIBC_2.2.5+0x1ec>
    0.00 :   8b7e3:  test   %ax,%ax
    0.00 :   8b7e6:  jne    8b8c0 <_IO_file_xsputn@@GLIBC_2.2.5+0x2c0>
         : 200   ./libio/fileops.c:451
    0.00 :   8b7ec:  mov    0x38(%rbp),%rax
         : 202   ./libio/fileops.c:455
    0.00 :   8b7f0:  mov    0xc0(%rbp),%edx
    0.00 :   8b7f6:  movq   %rax,%xmm0
         : 205   ./libio/fileops.c:452
    0.00 :   8b7fb:  mov    %rax,0x28(%rbp)
    0.00 :   8b7ff:  punpcklqdq %xmm0,%xmm0
         : 208   ./libio/fileops.c:451
    0.00 :   8b803:  movups %xmm0,0x8(%rbp)
    0.00 :   8b807:  movups %xmm0,0x18(%rbp)
         : 211   ./libio/fileops.c:455
    0.00 :   8b80b:  test   %edx,%edx
    0.00 :   8b80d:  jle    8b898 <_IO_file_xsputn@@GLIBC_2.2.5+0x298>
    0.00 :   8b813:  mov    0x40(%rbp),%rax
         : 215   ./libio/fileops.c:453
    0.00 :   8b817:  mov    %rax,0x30(%rbp)
         : 217   _IO_new_file_xsputn():
         : 218   ./libio/fileops.c:1256
    0.00 :   8b81b:  cmp    %r8,%r14
    0.00 :   8b81e:  jb     8b8ad <_IO_file_xsputn@@GLIBC_2.2.5+0x2ad>
         : 221   ./libio/fileops.c:1255
    0.00 :   8b824:  sub    %r14,%r15
    0.00 :   8b827:  jmp    8b6ff <_IO_file_xsputn@@GLIBC_2.2.5+0xff>
    0.00 :   8b82c:  nopl   0x0(%rax)
         : 225   ./libio/fileops.c:1246
    0.00 :   8b830:  sub    %r15,%rbx
    0.00 :   8b833:  mov    $0xffffffffffffffff,%rax
    0.00 :   8b83a:  test   %r15,%r15
    0.00 :   8b83d:  mov    %rbx,%r12
    0.00 :   8b840:  cmove  %rax,%r12
    0.00 :   8b844:  jmp    8b66e <_IO_file_xsputn@@GLIBC_2.2.5+0x6e>
    0.00 :   8b849:  nopl   0x0(%rax)
         : 233   ./libio/fileops.c:1220
    0.00 :   8b850:  sub    %r13,%rax
         : 235   ./libio/fileops.c:1231
    0.00 :   8b853:  add    $0x1,%rax
    0.00 :   8b857:  mov    %rax,%r12
    0.00 :   8b85a:  jne    8b921 <_IO_file_xsputn@@GLIBC_2.2.5+0x321>
    0.00 :   8b860:  mov    %rbx,%r15
    0.00 :   8b863:  mov    $0x1,%r14d
    0.00 :   8b869:  jmp    8b669 <_IO_file_xsputn@@GLIBC_2.2.5+0x69>
    0.00 :   8b86e:  xchg   %ax,%ax
         : 243   new_do_write():
         : 244   ./libio/fileops.c:439
    0.00 :   8b870:  movq   $0xffffffffffffffff,0x90(%rbp)
    0.00 :   8b87b:  jmp    8b7b1 <_IO_file_xsputn@@GLIBC_2.2.5+0x1b1>
    0.00 :   8b880:  mov    %rax,(%rsp)
         : 248   IO_validate_vtable():
         : 249   ./libio/libioP.h:946
    0.00 :   8b884:  call   89ef0 <_IO_vtable_check>
    0.00 :   8b889:  mov    (%rsp),%rax
    0.00 :   8b88d:  jmp    8b6ca <_IO_file_xsputn@@GLIBC_2.2.5+0xca>
    0.00 :   8b892:  nopw   0x0(%rax,%rax,1)
         : 254   new_do_write():
         : 255   ./libio/fileops.c:454
    0.00 :   8b898:  testl  $0x202,0x0(%rbp)
    0.00 :   8b89f:  jne    8b817 <_IO_file_xsputn@@GLIBC_2.2.5+0x217>
    0.00 :   8b8a5:  jmp    8b813 <_IO_file_xsputn@@GLIBC_2.2.5+0x213>
         : 259   ./libio/fileops.c:445
    0.00 :   8b8aa:  xor    %r14d,%r14d
         : 261   _IO_new_file_xsputn():
         : 262   ./libio/fileops.c:1257
    0.00 :   8b8ad:  sub    %r15,%rbx
    0.00 :   8b8b0:  mov    %rbx,%r12
    0.00 :   8b8b3:  add    %r14,%r12
    0.00 :   8b8b6:  jmp    8b66e <_IO_file_xsputn@@GLIBC_2.2.5+0x6e>
    0.00 :   8b8bb:  nopl   0x0(%rax,%rax,1)
         : 268   new_do_write():
         : 269   ./libio/fileops.c:450
    0.00 :   8b8c0:  lea    -0x1(%rax),%edi
    0.00 :   8b8c3:  mov    %r14d,%edx
    0.00 :   8b8c6:  mov    %r13,%rsi
    0.00 :   8b8c9:  call   8e8b0 <_IO_adjust_column>
    0.00 :   8b8ce:  mov    (%rsp),%r8
    0.00 :   8b8d2:  add    $0x1,%eax
    0.00 :   8b8d5:  mov    %ax,0x80(%rbp)
    0.00 :   8b8dc:  jmp    8b7ec <_IO_file_xsputn@@GLIBC_2.2.5+0x1ec>
    0.00 :   8b8e1:  mov    %rax,0x8(%rsp)
    0.00 :   8b8e6:  mov    %r8,(%rsp)
         : 280   IO_validate_vtable():
         : 281   ./libio/libioP.h:946
    0.00 :   8b8ea:  call   89ef0 <_IO_vtable_check>
    0.00 :   8b8ef:  mov    0x8(%rsp),%rax
    0.00 :   8b8f4:  mov    (%rsp),%r8
    0.00 :   8b8f8:  jmp    8b7c0 <_IO_file_xsputn@@GLIBC_2.2.5+0x1c0>
    0.00 :   8b8fd:  mov    %rax,0x8(%rsp)
    0.00 :   8b902:  mov    %r8,(%rsp)
    0.00 :   8b906:  call   89ef0 <_IO_vtable_check>
         : 289   new_do_write():
         : 290   ./libio/fileops.c:443
    0.00 :   8b90b:  mov    0x20(%rbp),%rsi
    0.00 :   8b90f:  mov    0x10(%rbp),%rdx
    0.00 :   8b913:  mov    0x8(%rsp),%rax
    0.00 :   8b918:  mov    (%rsp),%r8
    0.00 :   8b91c:  jmp    8b780 <_IO_file_xsputn@@GLIBC_2.2.5+0x180>
         : 296   _IO_new_file_xsputn():
         : 297   ./libio/fileops.c:443
    0.00 :   8b921:  mov    $0x1,%r14d
    0.00 :   8b927:  jmp    8b64a <_IO_file_xsputn@@GLIBC_2.2.5+0x4a>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    00000000000060f0 <Minisat::SimpSolver::removeClause(unsigned int)>:
         : 6    Minisat::SimpSolver::removeClause(unsigned int):
         : 176  return true;
         : 177  }
         :
         :
         : 180  void SimpSolver::removeClause(CRef cr)
         : 181  {
    0.00 :   60f0:   endbr64
    0.00 :   60f4:   push   %r15
    0.00 :   60f6:   push   %r14
    0.00 :   60f8:   push   %r13
    0.00 :   60fa:   push   %r12
    0.00 :   60fc:   push   %rbp
    0.00 :   60fd:   push   %rbx
    0.00 :   60fe:   sub    $0x38,%rsp
    0.00 :   6102:   mov    %esi,0x18(%rsp)
         : 191  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
         :
         : 64   Ref      alloc     (int size);
         : 65   void     free      (int size)    { wasted_ += size; }
         :
         : 67   // Deref, Load Effective Address (LEA), Inverse of LEA (AEL):
         : 68   T&       operator[](Ref r)       { assert(r >= 0 && r < sz); return memory[r]; }
    0.00 :   6106:   cmp    0x230(%rdi),%esi
    0.00 :   610c:   jae    6676 <Minisat::SimpSolver::removeClause(unsigned int)+0x586>
         : 71   Minisat::SimpSolver::removeClause(unsigned int):
         : 179  const Clause& c = ca[cr];
         :
         : 181  if (use_simplification)
    0.00 :   6112:   movzbl 0x2d4(%rdi),%ecx
         : 183  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   6119:   mov    0x228(%rdi),%rax
         : 64   Minisat::SimpSolver::removeClause(unsigned int):
    0.00 :   6120:   mov    %rdi,%r15
    0.00 :   6123:   test   %cl,%cl
    0.00 :   6125:   je     6350 <Minisat::SimpSolver::removeClause(unsigned int)+0x260>
         : 182  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   612b:   mov    0x18(%rsp),%edx
    0.00 :   612f:   lea    (%rax,%rdx,4),%rbx
         : 65   Minisat::Clause::size() const:
         : 162  for (int i = 0; i < size(); i++)
         : 163  abstraction |= 1 << (var(data[i].lit) & 31);
         : 164  data[header.size].abs = abstraction;  }
         :
         :
         : 167  int          size        ()      const   { return header.size; }
    0.00 :   6133:   mov    (%rbx),%eax
         : 169  Minisat::SimpSolver::removeClause(unsigned int):
         : 180  for (int i = 0; i < c.size(); i++){
    0.00 :   6135:   shr    $0x5,%eax
    0.00 :   6138:   je     6350 <Minisat::SimpSolver::removeClause(unsigned int)+0x260>
         : 183  Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 101  }
         :
         :
         : 104  void insert(int n)
         : 105  {
         : 106  indices.growTo(n+1, -1);
    0.00 :   613e:   lea    0x358(%rdi),%rax
         : 108  Minisat::SimpSolver::removeClause(unsigned int):
    0.00 :   6145:   mov    $0x1,%r14d
         : 181  Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
    0.00 :   614b:   mov    %rax,0x10(%rsp)
         : 102  Minisat::vec<int>::operator[](int):
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
         : 92   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6150:   movslq (%rbx,%r14,4),%rdx
    0.00 :   6154:   mov    0x330(%r15),%rax
         : 95   Minisat::SimpSolver::removeClause(unsigned int):
         : 181  n_occ[toInt(c[i])]--;
    0.00 :   615b:   subl   $0x1,(%rax,%rdx,4)
         : 183  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   615f:   mov    (%rbx,%r14,4),%r8d
    0.00 :   6163:   sar    %r8d
         : 65   Minisat::SimpSolver::updateElimHeap(int):
         : 171  // Implementation of inline methods:
         :
         :
         : 174  inline bool SimpSolver::isEliminated (Var v) const { return eliminated[v]; }
         : 175  inline void SimpSolver::updateElimHeap(Var v) {
         : 176  assert(use_simplification);
    0.00 :   6166:   test   %cl,%cl
    0.00 :   6168:   je     6657 <Minisat::SimpSolver::removeClause(unsigned int)+0x567>
         : 179  Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   616e:   mov    0x360(%r15),%eax
         : 65   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6175:   movslq %r8d,%rbp
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   6178:   cmp    %eax,%r8d
    0.00 :   617b:   jge    6370 <Minisat::SimpSolver::removeClause(unsigned int)+0x280>
         : 83   Minisat::vec<int>::operator[](int) const:
    0.00 :   6181:   mov    0x358(%r15),%r12
    0.00 :   6188:   lea    (%r12,%rbp,4),%r13
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
    0.00 :   618c:   mov    0x0(%r13),%edx
    0.00 :   6190:   test   %edx,%edx
    0.00 :   6192:   js     6370 <Minisat::SimpSolver::removeClause(unsigned int)+0x280>
         : 83   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6198:   mov    0x348(%r15),%rsi
    0.00 :   619f:   movslq %edx,%r8
         : 90   Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   61a2:   lea    -0x1(%rdx),%edi
    0.00 :   61a5:   sar    %edi
         : 44   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.00 :   61a7:   mov    (%rsi,%r8,4),%eax
    0.00 :   61ab:   mov    %eax,(%rsp)
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   61ae:   test   %edx,%edx
    0.00 :   61b0:   je     664f <Minisat::SimpSolver::removeClause(unsigned int)+0x55f>
         : 52   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   61b6:   mov    0x340(%r15),%rcx
         : 88   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   61bd:   add    %eax,%eax
    0.00 :   61bf:   mov    %rbx,0x8(%rsp)
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   61c4:   mov    (%rcx),%r10
    0.00 :   61c7:   movslq %eax,%rcx
         : 88   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   61ca:   xor    $0x1,%eax
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   61cd:   cltq
    0.00 :   61cf:   lea    (%r10,%rax,4),%rax
    0.00 :   61d3:   lea    (%r10,%rcx,4),%rbp
    0.00 :   61d7:   mov    %rax,%rbx
    0.00 :   61da:   jmp    61fb <Minisat::SimpSolver::removeClause(unsigned int)+0x10b>
    0.00 :   61dc:   nopl   0x0(%rax)
         : 92   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    0.00 :   61e0:   mov    %eax,(%r11)
         : 51   indices[heap[p]] = i;
    0.00 :   61e3:   mov    %edx,(%r12,%rax,4)
         : 53   Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   61e7:   lea    -0x1(%rdi),%eax
    0.00 :   61ea:   mov    %edi,%edx
    0.00 :   61ec:   sar    %eax
         : 45   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   61ee:   test   %edi,%edi
    0.00 :   61f0:   je     6600 <Minisat::SimpSolver::removeClause(unsigned int)+0x510>
         : 53   p                = parent(p);
    0.00 :   61f6:   mov    %eax,%edi
    0.00 :   61f8:   movslq %edx,%r8
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   61fb:   movslq %edi,%rax
         : 89   Minisat::SimpSolver::ElimLt::cost(int) const:
         : 109  uint64_t cost  (Var x)        const { return (uint64_t)n_occ[toInt(mkLit(x))] * (uint64_t)n_occ[toInt(~mkLit(x))]; }
    0.00 :   61fe:   movslq 0x0(%rbp),%r9
         : 111  Minisat::vec<int>::operator[](int):
    0.00 :   6202:   lea    (%rsi,%r8,4),%r11
         : 88   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6206:   movslq (%rbx),%r8
         : 110  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   6209:   movslq (%rsi,%rax,4),%rax
         : 51   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   620d:   imul   %r8,%r9
         : 110  Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6211:   lea    (%rax,%rax,1),%ecx
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6214:   mov    %ecx,%r8d
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6217:   movslq %ecx,%rcx
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   621a:   xor    $0x1,%r8d
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   621e:   movslq (%r10,%rcx,4),%rcx
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   6222:   movslq %r8d,%r8
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6225:   movslq (%r10,%r8,4),%r8
    0.00 :   6229:   imul   %rcx,%r8
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
    0.00 :   622d:   cmp    %r8,%r9
    0.00 :   6230:   jb     61e0 <Minisat::SimpSolver::removeClause(unsigned int)+0xf0>
    0.00 :   6232:   mov    0x8(%rsp),%rbx
         : 55   heap   [i] = x;
    0.00 :   6237:   movslq (%rsp),%rax
    0.00 :   623b:   mov    %eax,(%r11)
         : 56   indices[x] = i;
    0.00 :   623e:   mov    %edx,(%r12,%rax,4)
         : 58   Minisat::Heap<Minisat::SimpSolver::ElimLt>::update(int):
         : 95   percolateDown(indices[n]); }
    0.00 :   6242:   movslq 0x0(%r13),%r13
         : 97   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6246:   mov    0x350(%r15),%r11d
         : 65   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   624d:   lea    (%rsi,%r13,4),%r10
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   6251:   lea    0x1(%r13,%r13,1),%r8d
         : 41   Minisat::Heap<Minisat::SimpSolver::ElimLt>::update(int):
         : 95   percolateDown(indices[n]); }
    0.00 :   6256:   mov    %r13,%rdi
         : 97   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 62   int x = heap[i];
    0.00 :   6259:   mov    (%r10),%edx
    0.00 :   625c:   mov    %edx,0x1c(%rsp)
         : 63   while (left(i) < heap.size()){
    0.00 :   6260:   cmp    %r8d,%r11d
    0.00 :   6263:   jle    65ba <Minisat::SimpSolver::removeClause(unsigned int)+0x4ca>
         : 66   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6269:   mov    0x340(%r15),%rax
    0.00 :   6270:   mov    %rbx,0x20(%rsp)
    0.00 :   6275:   mov    %r14,0x28(%rsp)
    0.00 :   627a:   mov    (%rax),%r9
         : 91   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   627d:   lea    (%rdx,%rdx,1),%eax
         : 60   Minisat::vec<int>::operator[](int) const:
    0.00 :   6280:   movslq %eax,%rdx
         : 87   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6283:   xor    $0x1,%eax
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   6286:   cltq
    0.00 :   6288:   lea    (%r9,%rdx,4),%rdx
    0.00 :   628c:   lea    (%r9,%rax,4),%rax
    0.00 :   6290:   mov    %rdx,(%rsp)
    0.00 :   6294:   mov    %rax,0x8(%rsp)
    0.00 :   6299:   jmp    6317 <Minisat::SimpSolver::removeClause(unsigned int)+0x227>
    0.00 :   629b:   nopl   0x0(%rax,%rax,1)
         : 93   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   62a0:   movslq %edx,%r10
    0.00 :   62a3:   lea    (%rsi,%r10,4),%rbx
         : 90   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   62a7:   mov    (%rbx),%r14d
         : 66   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   62aa:   lea    (%r14,%r14,1),%r10d
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   62ae:   mov    %r10d,%r11d
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   62b1:   movslq %r10d,%r10
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   62b4:   xor    $0x1,%r11d
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   62b8:   movslq (%r9,%r10,4),%r10
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   62bc:   movslq %r11d,%r11
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   62bf:   movslq (%r9,%r11,4),%r11
    0.00 :   62c3:   imul   %r10,%r11
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   62c7:   cmp    %rcx,%r11
    0.00 :   62ca:   jae    634b <Minisat::SimpSolver::removeClause(unsigned int)+0x25b>
    0.00 :   62cc:   mov    %r11,%rcx
    0.00 :   62cf:   movslq %r14d,%rax
    0.00 :   62d2:   mov    %rbx,%rbp
         : 69   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   62d5:   mov    (%rsp),%rbx
         : 110  Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   62d9:   lea    (%rsi,%r13,4),%r10
         : 89   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   62dd:   movslq (%rbx),%r8
    0.00 :   62e0:   mov    0x8(%rsp),%rbx
    0.00 :   62e5:   movslq (%rbx),%r11
    0.00 :   62e8:   imul   %r11,%r8
         : 113  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 65   if (!lt(heap[child], x)) break;
    0.00 :   62ec:   cmp    %rcx,%r8
    0.00 :   62ef:   jbe    65b0 <Minisat::SimpSolver::removeClause(unsigned int)+0x4c0>
         : 66   heap[i]          = heap[child];
    0.00 :   62f5:   mov    %eax,(%r10)
         : 68   Minisat::Heap<Minisat::SimpSolver::ElimLt>::left(int):
         : 39   static inline int left  (int i) { return i*2+1; }
    0.00 :   62f8:   lea    0x1(%rdx,%rdx,1),%r8d
         : 41   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 67   indices[heap[i]] = i;
    0.00 :   62fd:   mov    %edi,(%r12,%rax,4)
         : 69   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   6301:   mov    0x350(%r15),%r11d
         : 65   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 63   while (left(i) < heap.size()){
    0.00 :   6308:   cmp    %r8d,%r11d
    0.00 :   630b:   jle    6610 <Minisat::SimpSolver::removeClause(unsigned int)+0x520>
    0.00 :   6311:   movslq %edx,%r13
    0.00 :   6314:   mov    %r13,%rdi
         : 68   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6317:   movslq %r8d,%rax
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::right(int):
         : 40   static inline int right (int i) { return (i+1)*2; }
    0.00 :   631a:   lea    0x2(%rdi,%rdi,1),%edx
         : 42   Minisat::vec<int>::operator[](int):
    0.00 :   631e:   lea    (%rsi,%rax,4),%rbp
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 64   int child = right(i) < heap.size() && lt(heap[right(i)], heap[left(i)]) ? right(i) : left(i);
    0.00 :   6322:   movslq 0x0(%rbp),%rax
         : 66   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6326:   lea    (%rax,%rax,1),%r10d
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   632a:   mov    %r10d,%ecx
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   632d:   movslq %r10d,%r10
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   6330:   xor    $0x1,%ecx
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6333:   movslq (%r9,%r10,4),%r10
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   6337:   movslq %ecx,%rcx
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   633a:   movslq (%r9,%rcx,4),%rcx
    0.00 :   633e:   imul   %r10,%rcx
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   6342:   cmp    %r11d,%edx
    0.00 :   6345:   jl     62a0 <Minisat::SimpSolver::removeClause(unsigned int)+0x1b0>
    0.00 :   634b:   mov    %r8d,%edx
    0.00 :   634e:   jmp    62d5 <Minisat::SimpSolver::removeClause(unsigned int)+0x1e5>
         : 68   Minisat::SimpSolver::removeClause(unsigned int):
         : 186  updateElimHeap(var(c[i]));
         : 187  occurs.smudge(var(c[i]));
         : 188  }
         :
         : 190  Solver::removeClause(cr);
    0.00 :   6350:   mov    0x18(%rsp),%esi
         : 187  }
    0.00 :   6354:   add    $0x38,%rsp
         : 186  Solver::removeClause(cr);
    0.00 :   6358:   mov    %r15,%rdi
         : 187  }
    0.00 :   635b:   pop    %rbx
    0.00 :   635c:   pop    %rbp
    0.00 :   635d:   pop    %r12
    0.00 :   635f:   pop    %r13
    0.00 :   6361:   pop    %r14
    0.00 :   6363:   pop    %r15
         : 186  Solver::removeClause(cr);
    0.00 :   6365:   jmp    de80 <Minisat::Solver::removeClause(unsigned int)>
    0.00 :   636a:   nopw   0x0(%rax,%rax,1)
         : 189  Minisat::SimpSolver::updateElimHeap(int):
         : 173  // if (!frozen[v] && !isEliminated(v) && value(v) == l_Undef)
         : 174  if (elim_heap.inHeap(v) || (!frozen[v] && !isEliminated(v) && value(v) == l_Undef))
    0.00 :   6370:   mov    0x380(%r15),%rdx
    0.00 :   6377:   cmpb   $0x0,(%rdx,%rbp,1)
    0.00 :   637b:   jne    6495 <Minisat::SimpSolver::removeClause(unsigned int)+0x3a5>
         : 178  Minisat::SimpSolver::isEliminated(int) const:
         : 169  inline bool SimpSolver::isEliminated (Var v) const { return eliminated[v]; }
    0.00 :   6381:   mov    0x390(%r15),%rdx
         : 171  Minisat::SimpSolver::updateElimHeap(int):
         : 173  if (elim_heap.inHeap(v) || (!frozen[v] && !isEliminated(v) && value(v) == l_Undef))
    0.00 :   6388:   cmpb   $0x0,(%rdx,%rbp,1)
    0.00 :   638c:   jne    6495 <Minisat::SimpSolver::removeClause(unsigned int)+0x3a5>
         : 176  Minisat::Solver::value(int) const:
         : 321  inline bool     Solver::locked          (const Clause& c) const { return value(c[0]) == l_True && reason(var(c[0])) != CRef_Undef && ca.lea(reason(var(c[0]))) == &c; }
         : 322  inline void     Solver::newDecisionLevel()                      { trail_lim.push(trail.size()); }
         :
         : 324  inline int      Solver::decisionLevel ()      const   { return trail_lim.size(); }
         : 325  inline uint32_t Solver::abstractLevel (Var x) const   { return 1 << (level(x) & 31); }
         : 326  inline lbool    Solver::value         (Var x) const   { return assigns[x]; }
    0.00 :   6392:   mov    0x170(%r15),%rdx
         : 328  Minisat::SimpSolver::updateElimHeap(int):
    0.00 :   6399:   testb  $0x2,(%rdx,%rbp,1)
    0.00 :   639d:   je     6495 <Minisat::SimpSolver::removeClause(unsigned int)+0x3a5>
         : 175  Minisat::vec<int>::operator[](int) const:
    0.00 :   63a3:   shl    $0x2,%rbp
         : 87   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   63a7:   cmp    %eax,%r8d
    0.00 :   63aa:   jl     64f7 <Minisat::SimpSolver::removeClause(unsigned int)+0x407>
         : 83   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   63b0:   lea    0x1(%r8),%ecx
         : 103  Minisat::vec<int>::growTo(int, int const&):
         : 106  }
         :
         :
         : 109  template<class T>
         : 110  void vec<T>::growTo(int size, const T& pad) {
         : 111  if (sz >= size) return;
    0.00 :   63b4:   cmp    %ecx,%eax
    0.00 :   63b6:   jl     6516 <Minisat::SimpSolver::removeClause(unsigned int)+0x426>
         : 114  Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   63bc:   mov    0x358(%r15),%r12
    0.00 :   63c3:   lea    (%r12,%rbp,1),%r13
         : 89   Minisat::vec<int>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   63c7:   mov    0x350(%r15),%esi
         : 65   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 104  assert(!inHeap(n));
         :
         : 106  indices[n] = heap.size();
    0.00 :   63ce:   mov    %esi,0x0(%r13)
         : 108  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   63d2:   cmp    0x354(%r15),%esi
    0.00 :   63d9:   je     6628 <Minisat::SimpSolver::removeClause(unsigned int)+0x538>
    0.00 :   63df:   movslq 0x350(%r15),%rax
    0.00 :   63e6:   mov    0x348(%r15),%r9
    0.00 :   63ed:   lea    0x1(%rax),%edx
    0.00 :   63f0:   mov    %edx,0x350(%r15)
    0.00 :   63f7:   mov    %r8d,(%r9,%rax,4)
         : 82   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 106  heap.push(n);
         : 107  percolateUp(indices[n]);
    0.00 :   63fb:   movslq 0x0(%r13),%rdi
         : 109  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.00 :   63ff:   mov    (%r9,%rdi,4),%eax
         : 48   Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   6403:   lea    -0x1(%rdi),%esi
         : 43   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 106  percolateUp(indices[n]);
    0.00 :   6406:   mov    %rdi,%rcx
         : 108  Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   6409:   sar    %esi
         : 43   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 46   int x  = heap[i];
    0.00 :   640b:   mov    %eax,(%rsp)
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   640e:   test   %edi,%edi
    0.00 :   6410:   je     6480 <Minisat::SimpSolver::removeClause(unsigned int)+0x390>
         : 52   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6412:   mov    0x340(%r15),%rdx
         : 88   Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   6419:   add    %eax,%eax
         : 60   Minisat::vec<int>::operator[](int) const:
    0.00 :   641b:   mov    (%rdx),%r10
    0.00 :   641e:   movslq %eax,%rdx
         : 88   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6421:   xor    $0x1,%eax
         : 61   Minisat::vec<int>::operator[](int) const:
    0.00 :   6424:   cltq
    0.00 :   6426:   lea    (%r10,%rdx,4),%r13
    0.00 :   642a:   lea    (%r10,%rax,4),%rbp
    0.00 :   642e:   jmp    6447 <Minisat::SimpSolver::removeClause(unsigned int)+0x357>
         : 90   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 50   heap[i]          = heap[p];
    0.00 :   6430:   mov    %eax,(%r11)
         : 51   indices[heap[p]] = i;
    0.00 :   6433:   mov    %ecx,(%r12,%rax,4)
         : 53   Minisat::Heap<Minisat::SimpSolver::ElimLt>::parent(int):
         : 41   static inline int parent(int i) { return (i-1) >> 1; }
    0.00 :   6437:   lea    -0x1(%rsi),%eax
    0.00 :   643a:   mov    %esi,%ecx
    0.00 :   643c:   sar    %eax
         : 45   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   643e:   test   %esi,%esi
    0.00 :   6440:   je     6480 <Minisat::SimpSolver::removeClause(unsigned int)+0x390>
         : 53   p                = parent(p);
    0.00 :   6442:   mov    %eax,%esi
    0.00 :   6444:   movslq %ecx,%rdi
         : 56   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   6447:   movslq %esi,%rax
         : 89   Minisat::SimpSolver::ElimLt::cost(int) const:
         : 109  uint64_t cost  (Var x)        const { return (uint64_t)n_occ[toInt(mkLit(x))] * (uint64_t)n_occ[toInt(~mkLit(x))]; }
    0.00 :   644a:   movslq 0x0(%r13),%r8
         : 111  Minisat::vec<int>::operator[](int):
    0.00 :   644e:   lea    (%r9,%rdi,4),%r11
         : 88   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6452:   movslq 0x0(%rbp),%rdi
         : 110  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   6456:   movslq (%r9,%rax,4),%rax
         : 51   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   645a:   imul   %rdi,%r8
         : 110  Minisat::mkLit(int, bool):
         : 58   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   645e:   lea    (%rax,%rax,1),%edx
         : 60   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   6461:   mov    %edx,%edi
         : 61   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6463:   movslq %edx,%rdx
         : 88   Minisat::operator~(Minisat::Lit):
    0.00 :   6466:   xor    $0x1,%edi
         : 60   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6469:   movslq (%r10,%rdx,4),%rdx
         : 110  Minisat::vec<int>::operator[](int) const:
    0.00 :   646d:   movslq %edi,%rdi
         : 87   Minisat::SimpSolver::ElimLt::cost(int) const:
    0.00 :   6470:   movslq (%r10,%rdi,4),%rdi
    0.00 :   6474:   imul   %rdx,%rdi
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
    0.00 :   6478:   cmp    %rdi,%r8
    0.00 :   647b:   jb     6430 <Minisat::SimpSolver::removeClause(unsigned int)+0x340>
         : 51   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   647d:   mov    %r11,%r9
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 55   heap   [i] = x;
    0.00 :   6480:   movslq (%rsp),%rax
    0.00 :   6484:   mov    %eax,(%r9)
         : 56   indices[x] = i;
    0.00 :   6487:   mov    %ecx,(%r12,%rax,4)
         : 58   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   648b:   mov    (%rbx,%r14,4),%r8d
    0.00 :   648f:   sar    %r8d
         : 65   Minisat::vec<char>::operator[](int):
    0.00 :   6492:   movslq %r8d,%rbp
    0.00 :   6495:   add    0x308(%r15),%rbp
         : 89   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::smudge(int const&):
         : 274  Vec&  lookup    (const Idx& idx){ if (dirty[toInt(idx)]) clean(idx); return occs[toInt(idx)]; }
         :
         : 276  void  cleanAll  ();
         : 277  void  clean     (const Idx& idx);
         : 278  void  smudge    (const Idx& idx){
         : 279  if (dirty[toInt(idx)] == 0){
    0.00 :   649c:   cmpb   $0x0,0x0(%rbp)
    0.00 :   64a0:   je     64c8 <Minisat::SimpSolver::removeClause(unsigned int)+0x3d8>
         : 282  Minisat::Clause::size() const:
         : 162  int          size        ()      const   { return header.size; }
    0.00 :   64a2:   mov    (%rbx),%eax
    0.00 :   64a4:   shr    $0x5,%eax
         : 165  Minisat::SimpSolver::removeClause(unsigned int):
         : 180  for (int i = 0; i < c.size(); i++){
    0.00 :   64a7:   cmp    %r14d,%eax
    0.00 :   64aa:   jle    6350 <Minisat::SimpSolver::removeClause(unsigned int)+0x260>
         : 183  Minisat::SimpSolver::updateElimHeap(int):
         : 171  assert(use_simplification);
    0.00 :   64b0:   movzbl 0x2d4(%r15),%ecx
    0.00 :   64b8:   add    $0x1,%r14
    0.00 :   64bc:   jmp    6150 <Minisat::SimpSolver::removeClause(unsigned int)+0x60>
    0.00 :   64c1:   nopl   0x0(%rax)
         : 176  Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::smudge(int const&):
         : 275  dirty[toInt(idx)] = 1;
    0.00 :   64c8:   movb   $0x1,0x0(%rbp)
         : 277  Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   64cc:   movslq 0x320(%r15),%rsi
    0.00 :   64d3:   cmp    0x324(%r15),%esi
    0.00 :   64da:   je     65d8 <Minisat::SimpSolver::removeClause(unsigned int)+0x4e8>
    0.00 :   64e0:   mov    0x318(%r15),%rax
    0.00 :   64e7:   lea    0x1(%rsi),%edx
    0.00 :   64ea:   mov    %edx,0x320(%r15)
    0.00 :   64f1:   mov    %r8d,(%rax,%rsi,4)
    0.00 :   64f5:   jmp    64a2 <Minisat::SimpSolver::removeClause(unsigned int)+0x3b2>
         : 83   Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   64f7:   mov    0x358(%r15),%r12
    0.00 :   64fe:   lea    (%r12,%rbp,1),%r13
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   6502:   mov    0x0(%r13),%edx
    0.00 :   6506:   test   %edx,%edx
    0.00 :   6508:   jns    6198 <Minisat::SimpSolver::removeClause(unsigned int)+0xa8>
         : 84   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 101  indices.growTo(n+1, -1);
    0.00 :   650e:   lea    0x1(%r8),%ecx
         : 103  Minisat::vec<int>::growTo(int, int const&):
         : 106  if (sz >= size) return;
    0.00 :   6512:   cmp    %ecx,%eax
    0.00 :   6514:   jge    657d <Minisat::SimpSolver::removeClause(unsigned int)+0x48d>
         : 107  capacity(size);
    0.00 :   6516:   mov    0x10(%rsp),%rdi
    0.00 :   651b:   mov    %ecx,%esi
    0.00 :   651d:   mov    %r8d,0x8(%rsp)
    0.00 :   6522:   mov    %ecx,(%rsp)
    0.00 :   6525:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 108  for (int i = sz; i < size; i++) data[i] = pad;
    0.00 :   652a:   movslq 0x360(%r15),%rax
    0.00 :   6531:   mov    (%rsp),%ecx
    0.00 :   6534:   mov    0x358(%r15),%r12
    0.00 :   653b:   mov    0x8(%rsp),%r8d
    0.00 :   6540:   cmp    %eax,%ecx
    0.00 :   6542:   jle    6569 <Minisat::SimpSolver::removeClause(unsigned int)+0x479>
    0.00 :   6544:   mov    %ecx,%edx
    0.00 :   6546:   lea    (%r12,%rax,4),%rdi
    0.00 :   654a:   mov    $0xff,%esi
    0.00 :   654f:   sub    %eax,%edx
    0.00 :   6551:   sub    $0x1,%edx
    0.00 :   6554:   lea    0x4(,%rdx,4),%rdx
    0.00 :   655c:   call   2370 <memset@plt>
    0.00 :   6561:   mov    (%rsp),%ecx
    0.00 :   6564:   mov    0x8(%rsp),%r8d
         : 109  sz = size; }
    0.00 :   6569:   mov    %ecx,0x360(%r15)
         : 111  Minisat::vec<int>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   6570:   lea    (%r12,%rbp,1),%r13
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::inHeap(int) const:
         : 80   bool inHeap    (int n)     const { return n < indices.size() && indices[n] >= 0; }
    0.00 :   6574:   cmp    %ecx,%r8d
    0.00 :   6577:   jge    63c7 <Minisat::SimpSolver::removeClause(unsigned int)+0x2d7>
    0.00 :   657d:   mov    0x0(%r13),%eax
    0.00 :   6581:   test   %eax,%eax
    0.00 :   6583:   js     63c7 <Minisat::SimpSolver::removeClause(unsigned int)+0x2d7>
         : 86   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 102  assert(!inHeap(n));
    0.00 :   6589:   lea    0xd6b0(%rip),%rcx        # 13c40 <typeinfo name for Minisat::BoolOption+0x330>
    0.00 :   6590:   mov    $0x66,%edx
    0.00 :   6595:   lea    0xdef7(%rip),%rsi        # 14493 <typeinfo name for Minisat::BoolOption+0xb83>
    0.00 :   659c:   lea    0xdefe(%rip),%rdi        # 144a1 <typeinfo name for Minisat::BoolOption+0xb91>
    0.00 :   65a3:   call   23b0 <__assert_fail@plt>
    0.00 :   65a8:   nopl   0x0(%rax,%rax,1)
    0.00 :   65b0:   mov    0x20(%rsp),%rbx
  100.00 :   65b5:   mov    0x28(%rsp),%r14
         : 111  Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 70   heap   [i] = x;
    0.00 :   65ba:   movslq 0x1c(%rsp),%rax
    0.00 :   65bf:   mov    %eax,(%r10)
         : 71   indices[x] = i;
    0.00 :   65c2:   mov    %edi,(%r12,%rax,4)
         : 73   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   65c6:   mov    (%rbx,%r14,4),%r8d
    0.00 :   65ca:   sar    %r8d
         : 65   Minisat::vec<char>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   65cd:   movslq %r8d,%rbp
         : 89   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
         : 72   }
    0.00 :   65d0:   jmp    6495 <Minisat::SimpSolver::removeClause(unsigned int)+0x3a5>
    0.00 :   65d5:   nopl   (%rax)
         : 75   Minisat::vec<int>::push(int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   65d8:   add    $0x1,%esi
         : 76   Minisat::OccLists<int, Minisat::vec<unsigned int>, Minisat::SimpSolver::ClauseDeleted>::smudge(int const&):
         : 276  dirties.push(idx);
    0.00 :   65db:   lea    0x318(%r15),%rdi
    0.00 :   65e2:   mov    %r8d,(%rsp)
         : 279  Minisat::vec<int>::push(int const&):
    0.00 :   65e6:   call   b430 <Minisat::vec<int>::capacity(int)>
    0.00 :   65eb:   movslq 0x320(%r15),%rsi
    0.00 :   65f2:   mov    (%rsp),%r8d
    0.00 :   65f6:   jmp    64e0 <Minisat::SimpSolver::removeClause(unsigned int)+0x3f0>
    0.00 :   65fb:   nopl   0x0(%rax,%rax,1)
         : 79   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
    0.00 :   6600:   mov    0x8(%rsp),%rbx
    0.00 :   6605:   mov    %rsi,%r11
    0.00 :   6608:   jmp    6237 <Minisat::SimpSolver::removeClause(unsigned int)+0x147>
    0.00 :   660d:   nopl   (%rax)
         : 78   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateDown(int):
    0.00 :   6610:   mov    0x20(%rsp),%rbx
    0.00 :   6615:   mov    0x28(%rsp),%r14
    0.00 :   661a:   mov    %rbp,%r10
    0.00 :   661d:   mov    %edx,%edi
    0.00 :   661f:   jmp    65ba <Minisat::SimpSolver::removeClause(unsigned int)+0x4ca>
    0.00 :   6621:   nopl   0x0(%rax)
         : 80   Minisat::vec<int>::push(int const&):
    0.00 :   6628:   add    $0x1,%esi
         : 75   Minisat::Heap<Minisat::SimpSolver::ElimLt>::insert(int):
         : 105  heap.push(n);
    0.00 :   662b:   lea    0x348(%r15),%rdi
    0.00 :   6632:   mov    %r8d,(%rsp)
         : 108  Minisat::vec<int>::push(int const&):
    0.00 :   6636:   call   b430 <Minisat::vec<int>::capacity(int)>
         : 75   Minisat::vec<int>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   663b:   mov    0x358(%r15),%r12
    0.00 :   6642:   mov    (%rsp),%r8d
    0.00 :   6646:   lea    (%r12,%rbp,1),%r13
         : 91   Minisat::vec<int>::push(int const&):
    0.00 :   664a:   jmp    63df <Minisat::SimpSolver::removeClause(unsigned int)+0x2ef>
         : 88   Minisat::Heap<Minisat::SimpSolver::ElimLt>::percolateUp(int):
         : 49   while (i != 0 && lt(x, heap[p])){
    0.00 :   664f:   mov    %rsi,%r11
    0.00 :   6652:   jmp    6237 <Minisat::SimpSolver::removeClause(unsigned int)+0x147>
         : 52   Minisat::SimpSolver::updateElimHeap(int):
    0.00 :   6657:   lea    0xd5aa(%rip),%rcx        # 13c08 <typeinfo name for Minisat::BoolOption+0x2f8>
    0.00 :   665e:   mov    $0xab,%edx
    0.00 :   6663:   lea    0xde01(%rip),%rsi        # 1446b <typeinfo name for Minisat::BoolOption+0xb5b>
    0.00 :   666a:   lea    0xde0f(%rip),%rdi        # 14480 <typeinfo name for Minisat::BoolOption+0xb70>
    0.00 :   6671:   call   23b0 <__assert_fail@plt>
         : 176  Minisat::RegionAllocator<unsigned int>::operator[](unsigned int):
    0.00 :   6676:   lea    0xd3bb(%rip),%rcx        # 13a38 <typeinfo name for Minisat::BoolOption+0x128>
    0.00 :   667d:   mov    $0x3f,%edx
    0.00 :   6682:   lea    0xd391(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   6689:   lea    0xdd88(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   6690:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000f9e0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)>:
         : 6    Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 133  return v;
         : 134  }
         :
         :
         : 137  bool Solver::addClause_(vec<Lit>& ps)
         : 138  {
    0.00 :   f9e0:   endbr64
    0.00 :   f9e4:   push   %r15
    0.00 :   f9e6:   push   %r14
    0.00 :   f9e8:   push   %r13
    0.00 :   f9ea:   push   %r12
    0.00 :   f9ec:   push   %rbp
    0.00 :   f9ed:   push   %rbx
    0.00 :   f9ee:   sub    $0x8,%rsp
         : 147  Minisat::vec<int>::size() const:
         :
         : 64   // Pointer to first element:
         : 65   operator T*       (void)           { return data; }
         :
         : 67   // Size operations:
         : 68   int      size     (void) const     { return sz; }
    0.00 :   f9f2:   mov    0x1b8(%rdi),%r13d
         : 70   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 134  assert(decisionLevel() == 0);
    0.00 :   f9f9:   test   %r13d,%r13d
    0.00 :   f9fc:   jne    fcd1 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2f1>
         : 135  if (!ok) return false;
    0.00 :   fa02:   movzbl 0xf0(%rdi),%r14d
    0.00 :   fa0a:   mov    %rdi,%r12
    0.00 :   fa0d:   test   %r14b,%r14b
    0.00 :   fa10:   jne    fa28 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x48>
         : 159  clauses.push(cr);
         : 160  attachClause(cr);
         : 161  }
         :
         : 163  return true;
         : 164  }
    0.00 :   fa12:   add    $0x8,%rsp
    0.00 :   fa16:   mov    %r14d,%eax
    0.00 :   fa19:   pop    %rbx
    0.00 :   fa1a:   pop    %rbp
    0.00 :   fa1b:   pop    %r12
    0.00 :   fa1d:   pop    %r13
    0.00 :   fa1f:   pop    %r14
    0.00 :   fa21:   pop    %r15
    0.00 :   fa23:   ret
    0.00 :   fa24:   nopl   0x0(%rax)
         : 175  Minisat::vec<Minisat::Lit>::size() const:
    0.00 :   fa28:   mov    0x8(%rsi),%ebx
         : 64   Minisat::vec<Minisat::Lit>::operator Minisat::Lit*():
         : 60   operator T*       (void)           { return data; }
    0.00 :   fa2b:   mov    (%rsi),%rbp
    0.00 :   fa2e:   mov    %rsi,%r15
         : 63   void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::vec<Minisat::Lit>&, Minisat::LessThan_default<Minisat::Lit>):
         : 90   //=================================================================================================
         : 91   // For 'vec's:
         :
         :
         : 94   template <class T, class LessThan> void sort(vec<T>& v, LessThan lt) {
         : 95   sort((T*)v, v.size(), lt); }
    0.00 :   fa31:   mov    %rbp,%rdi
    0.00 :   fa34:   mov    %ebx,%esi
    0.00 :   fa36:   call   c3e0 <void Minisat::sort<Minisat::Lit, Minisat::LessThan_default<Minisat::Lit> >(Minisat::Lit*, int, Minisat::LessThan_default<Minisat::Lit>) [clone .isra.0]>
         : 99   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 140  for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
    0.00 :   fa3b:   test   %ebx,%ebx
    0.00 :   fa3d:   jle    fc6a <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x28a>
    0.00 :   fa43:   lea    0x1(%rbx),%r9d
         : 144  Minisat::vec<Minisat::lbool>::operator[](int) const:
         :
         : 87   const T& last  (void) const        { return data[sz-1]; }
         : 88   T&       last  (void)              { return data[sz-1]; }
         :
         : 90   // Vector interface:
         : 91   const T& operator [] (int index) const { return data[index]; }
    0.00 :   fa47:   mov    $0x1,%edx
         : 93   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   fa4c:   mov    $0xfffffffe,%edi
         : 141  Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   fa51:   mov    0x170(%r12),%r8
    0.00 :   fa59:   nopl   0x0(%rax)
         : 88   Minisat::lbool::lbool(unsigned char):
         :
         : 93   class lbool {
         : 94   uint8_t value;
         :
         : 96   public:
         : 97   explicit lbool(uint8_t v) : value(v) { }
    0.00 :   fa60:   mov    -0x4(%rbp,%rdx,4),%eax
         : 99   Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   fa64:   mov    %eax,%ecx
    0.00 :   fa66:   sar    %ecx
         : 65   Minisat::vec<Minisat::lbool>::operator[](int) const:
    0.00 :   fa68:   movslq %ecx,%rcx
         : 87   Minisat::lbool::operator^(bool) const:
         : 99   lbool()       : value(0) { }
         : 100  explicit lbool(bool x) : value(!x) { }
         :
         : 102  bool  operator == (lbool b) const { return ((b.value&2) & (value&2)) | (!(b.value&2)&(value == b.value)); }
         : 103  bool  operator != (lbool b) const { return !(*this == b); }
         : 104  lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   fa6b:   movzbl (%r8,%rcx,1),%esi
         : 106  Minisat::sign(Minisat::Lit):
         : 61   inline  bool sign      (Lit p)              { return p.x & 1; }
  100.00 :   fa70:   mov    %eax,%ecx
    0.00 :   fa72:   and    $0x1,%ecx
         : 64   Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   fa75:   mov    %esi,%r10d
    0.00 :   fa78:   xor    %ecx,%r10d
         : 102  Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 141  if (value(ps[i]) == l_True || ps[i] == ~p)
    0.00 :   fa7b:   cmp    %cl,%sil
    0.00 :   fa7e:   je     fa12 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32>
         : 144  Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   fa80:   mov    %edi,%ecx
    0.00 :   fa82:   xor    $0x1,%ecx
         : 62   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   fa85:   cmp    %ecx,%eax
    0.00 :   fa87:   je     fa12 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32>
         : 143  else if (value(ps[i]) != l_False && ps[i] != p)
    0.00 :   fa89:   cmp    $0x1,%r10b
    0.00 :   fa8d:   je     faa0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0xc0>
    0.00 :   fa8f:   cmp    %eax,%edi
    0.00 :   fa91:   je     faa0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0xc0>
         : 148  Minisat::vec<Minisat::Lit>::operator[](int):
         : 87   T&       operator [] (int index)       { return data[index]; }
    0.00 :   fa93:   movslq %r13d,%rcx
         : 89   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   fa96:   mov    %eax,%edi
         : 144  ps[j++] = p = ps[i];
    0.00 :   fa98:   add    $0x1,%r13d
    0.00 :   fa9c:   mov    %eax,0x0(%rbp,%rcx,4)
         : 140  for (i = j = 0, p = lit_Undef; i < ps.size(); i++)
    0.00 :   faa0:   mov    %edx,%eax
    0.00 :   faa2:   add    $0x1,%rdx
    0.00 :   faa6:   cmp    %rdx,%r9
    0.00 :   faa9:   jne    fa60 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x80>
         : 145  ps.shrink(i - j);
    0.00 :   faab:   sub    %r13d,%eax
         : 147  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   faae:   cmp    %ebx,%eax
    0.00 :   fab0:   jg     fc70 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x290>
    0.00 :   fab6:   test   %eax,%eax
    0.00 :   fab8:   jle    fac6 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0xe6>
    0.00 :   faba:   sub    %eax,%ebx
    0.00 :   fabc:   mov    %ebx,0x8(%r15)
         : 71   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 147  if (ps.size() == 0)
    0.00 :   fac0:   je     fbc8 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1e8>
         : 149  else if (ps.size() == 1){
    0.00 :   fac6:   cmp    $0x1,%ebx
    0.00 :   fac9:   je     fbf3 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x213>
         : 152  unsigned int Minisat::ClauseAllocator::alloc<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool):
         : 213  template<class Lits>
         : 214  CRef alloc(const Lits& ps, bool learnt = false)
         : 215  {
         : 216  assert(sizeof(Lit)      == sizeof(uint32_t));
         : 217  assert(sizeof(float)    == sizeof(uint32_t));
         : 218  bool use_extra = learnt | extra_clause_field;
    0.00 :   facf:   movzbl 0x23c(%r12),%r13d
         :
         : 216  CRef cid = RegionAllocator<uint32_t>::alloc(clauseWord32Size(ps.size(), use_extra));
    0.00 :   fad8:   lea    0x228(%r12),%rdi
         : 218  Minisat::ClauseAllocator::clauseWord32Size(int, bool):
         : 197  return (sizeof(Clause) + (sizeof(Lit) * (size + (int)has_extra))) / sizeof(uint32_t); }
    0.00 :   fae0:   lea    0x1(%rbx,%r13,1),%ebx
         : 199  Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 114  template<class T>
         : 115  typename RegionAllocator<T>::Ref
         : 116  RegionAllocator<T>::alloc(int size)
         : 117  {
         : 118  // printf("ALLOC called (this = %p, size = %d)\n", this, size); fflush(stdout);
         : 119  assert(size > 0);
    0.00 :   fae5:   test   %ebx,%ebx
    0.00 :   fae7:   jle    fd4d <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x36d>
         : 115  capacity(sz + size);
    0.00 :   faed:   mov    0x230(%r12),%esi
    0.00 :   faf5:   add    %ebx,%esi
    0.00 :   faf7:   call   b2f0 <Minisat::RegionAllocator<unsigned int>::capacity(unsigned int)>
         :
         : 118  uint32_t prev_sz = sz;
    0.00 :   fafc:   mov    0x230(%r12),%ebp
    0.00 :   fb04:   xor    %r9d,%r9d
    0.00 :   fb07:   add    %ebp,%ebx
    0.00 :   fb09:   setb   %r9b
         : 118  sz += size;
    0.00 :   fb0d:   mov    %ebx,0x230(%r12)
         :
         : 122  // Handle overflow:
         : 123  if (sz < prev_sz)
    0.00 :   fb15:   test   %r9d,%r9d
    0.00 :   fb18:   jne    29ae <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&) [clone .cold]>
         : 126  Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
         : 66   T*       lea       (Ref r)       { assert(r >= 0 && r < sz); return &memory[r]; }
    0.00 :   fb1e:   cmp    %ebx,%ebp
    0.00 :   fb20:   jae    fcf0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x310>
    0.00 :   fb26:   mov    0x228(%r12),%rdx
         : 70   Minisat::vec<Minisat::Lit>::size() const:
         : 63   int      size     (void) const     { return sz; }
    0.00 :   fb2e:   mov    0x8(%r15),%r8d
         : 65   Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   fb32:   mov    %ebp,%eax
         : 67   Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
         : 137  header.mark      = 0;
    0.00 :   fb34:   shl    $0x3,%r13d
         : 139  Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   fb38:   lea    (%rdx,%rax,4),%rsi
         : 67   Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
    0.00 :   fb3c:   mov    %r8d,%eax
    0.00 :   fb3f:   shl    $0x5,%eax
    0.00 :   fb42:   or     %r13d,%eax
    0.00 :   fb45:   mov    %eax,(%rsi)
         : 143  for (int i = 0; i < ps.size(); i++)
    0.00 :   fb47:   test   %r8d,%r8d
    0.00 :   fb4a:   jle    fb68 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x188>
         : 146  Minisat::vec<Minisat::Lit>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   fb4c:   mov    (%r15),%rdi
    0.00 :   fb4f:   movslq %r8d,%rcx
    0.00 :   fb52:   xor    %eax,%eax
    0.00 :   fb54:   nopl   0x0(%rax)
         : 91   Minisat::Clause::Clause<Minisat::vec<Minisat::Lit> >(Minisat::vec<Minisat::Lit> const&, bool, bool):
         : 144  data[i].lit = ps[i];
    0.00 :   fb58:   mov    (%rdi,%rax,4),%edx
    0.00 :   fb5b:   mov    %edx,0x4(%rsi,%rax,4)
         : 143  for (int i = 0; i < ps.size(); i++)
    0.00 :   fb5f:   add    $0x1,%rax
    0.00 :   fb63:   cmp    %rax,%rcx
    0.00 :   fb66:   jne    fb58 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x178>
         : 146  if (header.has_extra){
    0.00 :   fb68:   movzbl (%rsi),%eax
    0.00 :   fb6b:   test   $0x8,%al
    0.00 :   fb6d:   je     fb8a <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1aa>
    0.00 :   fb6f:   and    $0x7ffffff,%r8d
         : 147  if (header.learnt)
    0.00 :   fb76:   test   $0x4,%al
    0.00 :   fb78:   je     fc90 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2b0>
         : 148  data[header.size].act = 0;
    0.00 :   fb7e:   movslq %r8d,%r8
    0.00 :   fb81:   movl   $0x0,0x4(%rsi,%r8,4)
         : 151  Minisat::vec<unsigned int>::push(unsigned int const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   fb8a:   movslq 0x100(%r12),%rax
    0.00 :   fb92:   cmp    0x104(%r12),%eax
    0.00 :   fb9a:   je     fbd9 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1f9>
    0.00 :   fb9c:   mov    0xf8(%r12),%rdx
    0.00 :   fba4:   lea    0x1(%rax),%ecx
         : 80   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 155  attachClause(cr);
    0.00 :   fba7:   mov    %ebp,%esi
    0.00 :   fba9:   mov    %r12,%rdi
         : 158  Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   fbac:   mov    %ecx,0x100(%r12)
    0.00 :   fbb4:   mov    %ebp,(%rdx,%rax,4)
         : 76   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   fbb7:   call   f2e0 <Minisat::Solver::attachClause(unsigned int)>
         : 158  return true;
    0.00 :   fbbc:   jmp    fa12 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32>
    0.00 :   fbc1:   nopl   0x0(%rax)
         : 148  return ok = false;
    0.00 :   fbc8:   movb   $0x0,0xf0(%r12)
    0.00 :   fbd1:   xor    %r14d,%r14d
    0.00 :   fbd4:   jmp    fa12 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32>
         : 152  Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   fbd9:   lea    0x1(%rax),%esi
         : 75   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 154  clauses.push(cr);
    0.00 :   fbdc:   lea    0xf8(%r12),%rdi
         : 156  Minisat::vec<unsigned int>::push(unsigned int const&):
    0.00 :   fbe4:   call   b550 <Minisat::vec<unsigned int>::capacity(int)>
    0.00 :   fbe9:   movslq 0x100(%r12),%rax
    0.00 :   fbf1:   jmp    fb9c <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1bc>
         : 77   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 150  uncheckedEnqueue(ps[0]);
    0.00 :   fbf3:   mov    0x0(%rbp),%edx
         : 152  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   fbf6:   mov    %edx,%eax
         : 64   Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   fbf8:   mov    %edx,%ecx
         : 101  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   fbfa:   sar    %eax
         : 64   Minisat::lbool::operator^(bool) const:
         : 99   lbool operator ^  (bool  b) const { return lbool((uint8_t)(value^(uint8_t)b)); }
    0.00 :   fbfc:   and    $0x1,%ecx
         : 101  Minisat::vec<Minisat::lbool>::operator[](int) const:
         : 86   const T& operator [] (int index) const { return data[index]; }
    0.00 :   fbff:   cltq
    0.00 :   fc01:   add    %rax,%r8
         : 89   Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431  }
         :
         :
         : 434  void Solver::uncheckedEnqueue(Lit p, CRef from)
         : 435  {
         : 436  assert(value(p) == l_Undef);
    0.00 :   fc04:   testb  $0x2,(%r8)
    0.00 :   fc08:   je     fd2e <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x34e>
         : 432  assigns[var(p)] = lbool(!sign(p));
    0.00 :   fc0e:   mov    %cl,(%r8)
         : 433  vardata[var(p)] = mkVarData(from, decisionLevel());
    0.00 :   fc11:   mov    0x1c0(%r12),%rcx
    0.00 :   fc19:   mov    $0xffffffff,%ebx
    0.00 :   fc1e:   mov    %rbx,(%rcx,%rax,8)
         : 437  Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75   void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.00 :   fc22:   movslq 0x1a8(%r12),%rax
    0.00 :   fc2a:   cmp    0x1ac(%r12),%eax
    0.00 :   fc32:   jge    fd0f <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32f>
    0.00 :   fc38:   mov    0x1a0(%r12),%rcx
    0.00 :   fc40:   lea    0x1(%rax),%esi
         : 81   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 151  return ok = (propagate() == CRef_Undef);
    0.00 :   fc43:   mov    %r12,%rdi
         : 153  Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
    0.00 :   fc46:   mov    %esi,0x1a8(%r12)
    0.00 :   fc4e:   mov    %edx,(%rcx,%rax,4)
         : 77   Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
    0.00 :   fc51:   call   f450 <Minisat::Solver::propagate()>
    0.00 :   fc56:   cmp    $0xffffffff,%eax
    0.00 :   fc59:   sete   %r14b
    0.00 :   fc5d:   mov    %r14b,0xf0(%r12)
    0.00 :   fc65:   jmp    fa12 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x32>
         : 156  Minisat::vec<Minisat::Lit>::shrink(int):
         : 64   void     shrink   (int nelems)     { assert(nelems <= sz); for (int i = 0; i < nelems; i++) sz--, data[sz].~T(); }
    0.00 :   fc6a:   je     fbc8 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1e8>
    0.00 :   fc70:   lea    0x4e71(%rip),%rcx        # 14ae8 <Minisat::lit_Undef+0x390>
    0.00 :   fc77:   mov    $0x40,%edx
    0.00 :   fc7c:   lea    0x484f(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   fc83:   lea    0x4a88(%rip),%rdi        # 14712 <typeinfo name for Minisat::BoolOption+0xe02>
    0.00 :   fc8a:   call   23b0 <__assert_fail@plt>
    0.00 :   fc8f:   nop
         : 72   Minisat::Clause::calcAbstraction():
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   fc90:   test   %r8d,%r8d
    0.00 :   fc93:   je     fcc4 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2e4>
    0.00 :   fc95:   lea    -0x1(%r8),%edx
    0.00 :   fc99:   lea    0x4(%rsi),%rax
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   fc9d:   mov    $0x1,%edi
    0.00 :   fca2:   lea    0x8(%rsi,%rdx,4),%r10
    0.00 :   fca7:   nopw   0x0(%rax,%rax,1)
         : 162  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   fcb0:   mov    (%rax),%ecx
         : 64   Minisat::Clause::calcAbstraction():
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   fcb2:   mov    %edi,%edx
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   fcb4:   add    $0x4,%rax
         : 159  Minisat::var(Minisat::Lit):
         : 62   inline  int  var       (Lit p)              { return p.x >> 1; }
    0.00 :   fcb8:   sar    %ecx
         : 64   Minisat::Clause::calcAbstraction():
         : 158  abstraction |= 1 << (var(data[i].lit) & 31);
    0.00 :   fcba:   shl    %cl,%edx
    0.00 :   fcbc:   or     %edx,%r9d
         : 157  for (int i = 0; i < size(); i++)
    0.00 :   fcbf:   cmp    %r10,%rax
    0.00 :   fcc2:   jne    fcb0 <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x2d0>
         : 159  data[header.size].abs = abstraction;  }
    0.00 :   fcc4:   movslq %r8d,%r8
    0.00 :   fcc7:   mov    %r9d,0x4(%rsi,%r8,4)
    0.00 :   fccc:   jmp    fb8a <Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&)+0x1aa>
         : 163  Minisat::Solver::addClause_(Minisat::vec<Minisat::Lit>&):
         : 134  assert(decisionLevel() == 0);
    0.00 :   fcd1:   lea    0x50e0(%rip),%rcx        # 14db8 <Minisat::lit_Undef+0x660>
    0.00 :   fcd8:   mov    $0x86,%edx
    0.00 :   fcdd:   lea    0x5463(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   fce4:   lea    0x4754(%rip),%rdi        # 1443f <typeinfo name for Minisat::BoolOption+0xb2f>
    0.00 :   fceb:   call   23b0 <__assert_fail@plt>
         : 140  Minisat::RegionAllocator<unsigned int>::lea(unsigned int):
    0.00 :   fcf0:   lea    0x3dd9(%rip),%rcx        # 13ad0 <typeinfo name for Minisat::BoolOption+0x1c0>
    0.00 :   fcf7:   mov    $0x42,%edx
    0.00 :   fcfc:   lea    0x3d17(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   fd03:   lea    0x470e(%rip),%rdi        # 14418 <typeinfo name for Minisat::BoolOption+0xb08>
    0.00 :   fd0a:   call   23b0 <__assert_fail@plt>
         : 71   Minisat::vec<Minisat::Lit>::push_(Minisat::Lit const&):
         : 75   void     push_ (const T& elem)     { assert(sz < cap); data[sz++] = elem; }
    0.00 :   fd0f:   lea    0x4cd2(%rip),%rcx        # 149e8 <Minisat::lit_Undef+0x290>
    0.00 :   fd16:   mov    $0x4b,%edx
    0.00 :   fd1b:   lea    0x47b0(%rip),%rsi        # 144d2 <typeinfo name for Minisat::BoolOption+0xbc2>
    0.00 :   fd22:   lea    0x5444(%rip),%rdi        # 1516d <Minisat::lit_Undef+0xa15>
    0.00 :   fd29:   call   23b0 <__assert_fail@plt>
         : 81   Minisat::Solver::uncheckedEnqueue(Minisat::Lit, unsigned int):
         : 431  assert(value(p) == l_Undef);
    0.00 :   fd2e:   lea    0x4c6b(%rip),%rcx        # 149a0 <Minisat::lit_Undef+0x248>
    0.00 :   fd35:   mov    $0x1af,%edx
    0.00 :   fd3a:   lea    0x5406(%rip),%rsi        # 15147 <Minisat::lit_Undef+0x9ef>
    0.00 :   fd41:   lea    0x5411(%rip),%rdi        # 15159 <Minisat::lit_Undef+0xa01>
    0.00 :   fd48:   call   23b0 <__assert_fail@plt>
         : 437  Minisat::RegionAllocator<unsigned int>::alloc(int):
         : 114  assert(size > 0);
    0.00 :   fd4d:   lea    0x3c34(%rip),%rcx        # 13988 <typeinfo name for Minisat::BoolOption+0x78>
    0.00 :   fd54:   mov    $0x72,%edx
    0.00 :   fd59:   lea    0x3cba(%rip),%rsi        # 13a1a <typeinfo name for Minisat::BoolOption+0x10a>
    0.00 :   fd60:   lea    0x3cc2(%rip),%rdi        # 13a29 <typeinfo name for Minisat::BoolOption+0x119>
    0.00 :   fd67:   call   23b0 <__assert_fail@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    0000000000004880 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)>:
         : 6    void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 84   }
         :
         : 86   // Inserts problem into solver.
         : 87   //
         : 88   template<class Solver>
         : 89   static void parse_DIMACS(gzFile input_stream, Solver& S) {
    0.00 :   4880:   push   %r15
    0.00 :   4882:   push   %r14
    0.00 :   4884:   push   %r13
    0.00 :   4886:   push   %r12
    0.00 :   4888:   push   %rbp
    0.00 :   4889:   push   %rbx
    0.00 :   488a:   lea    -0x100000(%rsp),%r11
    0.00 :   4892:   sub    $0x1000,%rsp
    0.00 :   4899:   orq    $0x0,(%rsp)
    0.00 :   489e:   cmp    %r11,%rsp
    0.00 :   48a1:   jne    4892 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x12>
    0.00 :   48a3:   sub    $0x48,%rsp
         : 102  Minisat::StreamBuffer::assureLookahead():
         : 46   int           size;
         :
         : 48   void assureLookahead() {
         : 49   if (pos >= size) {
         : 50   pos  = 0;
         : 51   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   48a7:   mov    $0x100000,%edx
         : 53   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
    0.00 :   48ac:   mov    %fs:0x28,%rax
    0.00 :   48b5:   mov    %rax,0x100038(%rsp)
    0.00 :   48bd:   xor    %eax,%eax
         : 87   Minisat::StreamBuffer::assureLookahead():
    0.00 :   48bf:   lea    0x28(%rsp),%r13
         : 47   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
    0.00 :   48c4:   mov    %rsi,%r14
         : 85   Minisat::StreamBuffer::StreamBuffer(gzFile_s*):
         :
         : 50   public:
         : 51   explicit StreamBuffer(gzFile i) : in(i), pos(0), size(0) { assureLookahead(); }
    0.00 :   48c7:   mov    %rdi,0x20(%rsp)
         : 53   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   48cc:   mov    %r13,%rsi
    0.00 :   48cf:   lea    0x20(%rsp),%r12
         : 49   Minisat::StreamBuffer::StreamBuffer(gzFile_s*):
         : 49   explicit StreamBuffer(gzFile i) : in(i), pos(0), size(0) { assureLookahead(); }
    0.00 :   48d4:   movq   $0x0,0x100028(%rsp)
         : 51   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   48e0:   call   25e0 <gzread@plt>
         : 48   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 52   int cnt     = 0;
    0.00 :   48e5:   movl   $0x0,0x4(%rsp)
         : 54   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
    0.00 :   48ed:   mov    0x100028(%rsp),%ecx
         : 53   Minisat::StreamBuffer::assureLookahead():
    0.00 :   48f4:   mov    %eax,0x10002c(%rsp)
         : 47   Minisat::vec<Minisat::Lit>::vec():
         : 54   //static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         : 55   static inline void nextCap(int& cap){ cap += ((cap >> 1) + 2) & ~1; }
         :
         : 57   public:
         : 58   // Constructors:
         : 59   vec()                       : data(NULL) , sz(0)   , cap(0)    { }
    0.00 :   48fb:   movq   $0x0,0x10(%rsp)
    0.00 :   4904:   movq   $0x0,0x18(%rsp)
         : 62   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 51   int clauses = 0;
    0.00 :   490d:   movl   $0x0,0xc(%rsp)
         : 50   int vars    = 0;
    0.00 :   4915:   movl   $0x0,0x8(%rsp)
    0.00 :   491d:   nopl   (%rax)
    0.00 :   4920:   movslq %ecx,%rdx
    0.00 :   4923:   xor    %edi,%edi
         : 55   Minisat::StreamBuffer::operator*() const:
         :
         : 52   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4925:   lea    (%r12,%rdx,1),%rsi
         : 54   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
    0.00 :   4929:   mov    %ecx,%edx
         : 51   Minisat::StreamBuffer::operator*() const:
    0.00 :   492b:   cmp    %eax,%ecx
    0.00 :   492d:   jge    4993 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x113>
    0.00 :   492f:   nop
    0.00 :   4930:   movzbl 0x8(%rsi),%r8d
         : 55   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 70   // Generic parse functions parametrized over the input-stream type.
         :
         :
         : 73   template<class B>
         : 74   static void skipWhitespace(B& in) {
         : 75   while ((*in >= 9 && *in <= 13) || *in == 32)
  100.00 :   4935:   lea    -0x9(%r8),%r10d
         : 77   skipWhitespace<Minisat::StreamBuffer>():
    0.00 :   4939:   cmp    $0x4,%r10d
    0.00 :   493d:   jbe    4949 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xc9>
    0.00 :   493f:   cmp    $0x20,%r8b
    0.00 :   4943:   jne    4a00 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x180>
         : 74   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4949:   add    $0x1,%edx
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   494c:   add    $0x1,%rsi
    0.00 :   4950:   mov    $0x1,%edi
    0.00 :   4955:   cmp    %eax,%edx
    0.00 :   4957:   jl     4930 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xb0>
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4959:   mov    0x20(%rsp),%rdi
    0.00 :   495e:   mov    $0x100000,%edx
    0.00 :   4963:   mov    %r13,%rsi
         : 45   pos  = 0;
    0.00 :   4966:   movl   $0x0,0x100028(%rsp)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4971:   call   25e0 <gzread@plt>
    0.00 :   4976:   mov    0x100028(%rsp),%ecx
    0.00 :   497d:   mov    %eax,0x10002c(%rsp)
         : 50   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
    0.00 :   4984:   xor    %edi,%edi
         : 51   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4986:   movslq %ecx,%rdx
    0.00 :   4989:   lea    (%r12,%rdx,1),%rsi
         : 54   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
    0.00 :   498d:   mov    %ecx,%edx
         : 51   Minisat::StreamBuffer::operator*() const:
    0.00 :   498f:   cmp    %eax,%ecx
    0.00 :   4991:   jl     4930 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xb0>
    0.00 :   4993:   test   %dil,%dil
    0.00 :   4996:   je     499f <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x11f>
    0.00 :   4998:   mov    %ecx,0x100028(%rsp)
         : 56   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 75   if (vars != S.nVars())
    0.00 :   499f:   mov    0x8(%rsp),%eax
    0.00 :   49a3:   cmp    %eax,0x1c8(%r14)
    0.00 :   49aa:   jne    4c69 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x3e9>
         : 77   if (cnt  != clauses)
    0.00 :   49b0:   mov    0xc(%rsp),%edi
    0.00 :   49b4:   cmp    %edi,0x4(%rsp)
    0.00 :   49b8:   jne    4c47 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x3c7>
         : 81   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  sz = size; }
         :
         :
         : 125  template<class T>
         : 126  void vec<T>::clear(bool dealloc) {
         : 127  if (data != NULL){
    0.00 :   49be:   mov    0x10(%rsp),%rdi
    0.00 :   49c3:   test   %rdi,%rdi
    0.00 :   49c6:   je     49cd <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x14d>
         : 125  for (int i = 0; i < sz; i++) data[i].~T();
         : 126  sz = 0;
         : 127  if (dealloc) free(data), data = NULL, cap = 0; } }
    0.00 :   49c8:   call   2440 <free@plt>
         : 129  void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 86   StreamBuffer in(input_stream);
         : 87   parse_DIMACS_main(in, S); }
    0.00 :   49cd:   mov    0x100038(%rsp),%rax
    0.00 :   49d5:   sub    %fs:0x28,%rax
    0.00 :   49de:   jne    4c8b <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x40b>
    0.00 :   49e4:   add    $0x100048,%rsp
    0.00 :   49eb:   pop    %rbx
    0.00 :   49ec:   pop    %rbp
    0.00 :   49ed:   pop    %r12
    0.00 :   49ef:   pop    %r13
    0.00 :   49f1:   pop    %r14
    0.00 :   49f3:   pop    %r15
    0.00 :   49f5:   ret
    0.00 :   49f6:   cs nopw 0x0(%rax,%rax,1)
    0.00 :   4a00:   test   %dil,%dil
    0.00 :   4a03:   je     4b58 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x2d8>
    0.00 :   4a09:   mov    %edx,0x100028(%rsp)
         : 103  parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 56   else if (*in == 'p'){
    0.00 :   4a10:   cmp    $0x70,%r8d
    0.00 :   4a14:   je     4b64 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x2e4>
         : 66   } else if (*in == 'c' || *in == 'p')
    0.00 :   4a1a:   cmp    $0x63,%r8d
    0.00 :   4a1e:   je     4ae3 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x263>
         : 68   else if (*in == '%')
    0.00 :   4a24:   cmp    $0x25,%r8d
    0.00 :   4a28:   je     499f <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x11f>
         : 71   cnt++;
    0.00 :   4a2e:   addl   $0x1,0x4(%rsp)
         : 73   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   4a33:   cmpq   $0x0,0x10(%rsp)
    0.00 :   4a39:   je     4a43 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x1c3>
         : 124  sz = 0;
    0.00 :   4a3b:   movl   $0x0,0x18(%rsp)
         : 126  Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
         : 74   void     push  (const T& elem)     { if (sz == cap) capacity(sz+1); data[sz++] = elem; }
    0.00 :   4a43:   lea    0x10(%rsp),%r15
    0.00 :   4a48:   nopl   0x0(%rax,%rax,1)
         : 77   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 39   parsed_lit = parseInt(in);
    0.00 :   4a50:   mov    %r12,%rdi
         : 41   readClause<Minisat::StreamBuffer, Minisat::SimpSolver>():
    0.00 :   4a53:   call   4310 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)>
    0.00 :   4a58:   mov    %eax,%ebp
         : 40   if (parsed_lit == 0) break;
    0.00 :   4a5a:   test   %eax,%eax
    0.00 :   4a5c:   je     4b38 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x2b8>
         : 41   var = abs(parsed_lit)-1;
    0.00 :   4a62:   mov    %eax,%ebx
    0.00 :   4a64:   neg    %ebx
    0.00 :   4a66:   cmovs  %eax,%ebx
    0.00 :   4a69:   sub    $0x1,%ebx
         : 42   while (var >= S.nVars()) S.newVar();
    0.00 :   4a6c:   jmp    4a82 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x202>
    0.00 :   4a6e:   xchg   %ax,%ax
    0.00 :   4a70:   mov    $0x1,%edx
    0.00 :   4a75:   mov    $0x1,%esi
    0.00 :   4a7a:   mov    %r14,%rdi
    0.00 :   4a7d:   call   ac20 <Minisat::SimpSolver::newVar(bool, bool)>
    0.00 :   4a82:   cmp    0x1c8(%r14),%ebx
    0.00 :   4a89:   jge    4a70 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x1f0>
         : 51   Minisat::mkLit(int, bool):
         : 58   bool operator != (Lit p) const { return x != p.x; }
         : 59   bool operator <  (Lit p) const { return x < p.x;  } // '<' makes p, ~p adjacent in the ordering.
         : 60   };
         :
         :
         : 63   inline  Lit  mkLit     (Var var, bool sign) { Lit p; p.x = var + var + (int)sign; return p; }
    0.00 :   4a8b:   add    %ebx,%ebx
         : 65   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   4a8d:   movslq 0x18(%rsp),%rsi
         : 75   Minisat::operator~(Minisat::Lit):
         : 59   inline  Lit  operator ~(Lit p)              { Lit q; q.x = p.x ^ 1; return q; }
    0.00 :   4a92:   mov    %ebx,%eax
    0.00 :   4a94:   xor    $0x1,%eax
    0.00 :   4a97:   test   %ebp,%ebp
    0.00 :   4a99:   cmovle %eax,%ebx
         : 64   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   4a9c:   cmp    0x1c(%rsp),%esi
    0.00 :   4aa0:   je     4b20 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x2a0>
    0.00 :   4aa2:   lea    0x1(%rsi),%eax
    0.00 :   4aa5:   mov    %eax,0x18(%rsp)
    0.00 :   4aa9:   mov    0x10(%rsp),%rax
    0.00 :   4aae:   mov    %ebx,(%rax,%rsi,4)
         : 80   readClause<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 39   parsed_lit = parseInt(in);
    0.00 :   4ab1:   jmp    4a50 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x1d0>
    0.00 :   4ab3:   nopl   0x0(%rax,%rax,1)
         : 42   Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4ab8:   mov    0x20(%rsp),%rdi
    0.00 :   4abd:   mov    $0x100000,%edx
    0.00 :   4ac2:   mov    %r13,%rsi
         : 45   pos  = 0;
    0.00 :   4ac5:   movl   $0x0,0x100028(%rsp)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4ad0:   call   25e0 <gzread@plt>
    0.00 :   4ad5:   mov    %eax,0x10002c(%rsp)
    0.00 :   4adc:   mov    0x100028(%rsp),%edx
    0.00 :   4ae3:   movslq %edx,%rsi
         : 51   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4ae6:   mov    %edx,%ecx
    0.00 :   4ae8:   xor    %edi,%edi
    0.00 :   4aea:   add    %r12,%rsi
    0.00 :   4aed:   cmp    %eax,%ecx
    0.00 :   4aef:   jge    4b0f <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x28f>
         : 57   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4af1:   add    $0x1,%ecx
         : 54   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         :
         : 79   template<class B>
         : 80   static void skipLine(B& in) {
         : 81   for (;;){
         : 82   if (isEof(in)) return;
         : 83   if (*in == '\n') { ++in; return; }
    0.00 :   4af4:   cmpb   $0xa,0x8(%rsi)
         : 85   skipLine<Minisat::StreamBuffer>():
    0.00 :   4af8:   je     4c08 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x388>
         : 79   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   4afe:   add    $0x1,%rsi
    0.00 :   4b02:   mov    $0x1,%edi
    0.00 :   4b07:   cmp    %ecx,%eax
    0.00 :   4b09:   jle    4ab8 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x238>
         : 49   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4b0b:   cmp    %eax,%ecx
    0.00 :   4b0d:   jl     4af1 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x271>
    0.00 :   4b0f:   test   %dil,%dil
    0.00 :   4b12:   jne    4c10 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x390>
    0.00 :   4b18:   mov    %edx,%ecx
    0.00 :   4b1a:   jmp    4920 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xa0>
    0.00 :   4b1f:   nop
         : 59   Minisat::vec<Minisat::Lit>::push(Minisat::Lit const&):
    0.00 :   4b20:   add    $0x1,%esi
    0.00 :   4b23:   mov    %r15,%rdi
    0.00 :   4b26:   call   5330 <Minisat::vec<Minisat::Lit>::capacity(int)>
    0.00 :   4b2b:   movslq 0x18(%rsp),%rsi
    0.00 :   4b30:   jmp    4aa2 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x222>
    0.00 :   4b35:   nopl   (%rax)
         : 80   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 73   S.addClause_(lits); }
    0.00 :   4b38:   lea    0x10(%rsp),%rsi
    0.00 :   4b3d:   mov    %r14,%rdi
    0.00 :   4b40:   call   6a70 <Minisat::SimpSolver::addClause_(Minisat::vec<Minisat::Lit>&)>
    0.00 :   4b45:   mov    0x100028(%rsp),%ecx
         : 78   Minisat::StreamBuffer::operator*() const:
    0.00 :   4b4c:   mov    0x10002c(%rsp),%eax
         : 52   skipWhitespace<Minisat::StreamBuffer>():
         : 70   while ((*in >= 9 && *in <= 13) || *in == 32)
    0.00 :   4b53:   jmp    4920 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xa0>
    0.00 :   4b58:   mov    %ecx,%edx
         : 73   parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 56   else if (*in == 'p'){
    0.00 :   4b5a:   cmp    $0x70,%r8d
    0.00 :   4b5e:   jne    4a1a <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x19a>
    0.00 :   4b64:   lea    0xec64(%rip),%rbx        # 137cf <_IO_stdin_used+0x7cf>
         : 60   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 113  }
         :
         : 115  // String matching: consumes characters eagerly, but does not require random access iterator.
         : 116  template<class B>
         : 117  static bool eagerMatch(B& in, const char* str) {
         : 118  for (; *str != '\0'; ++str, ++in)
    0.00 :   4b6b:   mov    $0x70,%ecx
         : 120  eagerMatch<Minisat::StreamBuffer>():
    0.00 :   4b70:   jmp    4b8d <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x30d>
    0.00 :   4b72:   nopw   0x0(%rax,%rax,1)
    0.00 :   4b78:   movsbl (%rbx),%ecx
         : 116  Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4b7b:   mov    %edx,0x100028(%rsp)
         : 54   eagerMatch<Minisat::StreamBuffer>():
         : 113  for (; *str != '\0'; ++str, ++in)
    0.00 :   4b82:   test   %cl,%cl
    0.00 :   4b84:   je     4bdd <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x35d>
         : 116  Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4b86:   mov    0x100028(%rsp),%edx
    0.00 :   4b8d:   cmp    %eax,%edx
    0.00 :   4b8f:   jge    4c1c <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x39c>
    0.00 :   4b95:   movslq %edx,%rsi
    0.00 :   4b98:   movzbl 0x28(%rsp,%rsi,1),%r8d
         : 57   eagerMatch<Minisat::StreamBuffer>():
         : 114  if (*str != *in)
    0.00 :   4b9e:   cmp    %r8d,%ecx
    0.00 :   4ba1:   jne    4c27 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x3a7>
         : 117  Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4ba7:   add    $0x1,%edx
         : 54   eagerMatch<Minisat::StreamBuffer>():
         : 113  for (; *str != '\0'; ++str, ++in)
    0.00 :   4baa:   add    $0x1,%rbx
         : 115  Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   4bae:   cmp    %eax,%edx
    0.00 :   4bb0:   jl     4b78 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x2f8>
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4bb2:   mov    0x20(%rsp),%rdi
    0.00 :   4bb7:   mov    $0x100000,%edx
    0.00 :   4bbc:   mov    %r13,%rsi
         : 45   pos  = 0;
    0.00 :   4bbf:   movl   $0x0,0x100028(%rsp)
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4bca:   call   25e0 <gzread@plt>
         : 48   eagerMatch<Minisat::StreamBuffer>():
         : 113  for (; *str != '\0'; ++str, ++in)
    0.00 :   4bcf:   movsbl (%rbx),%ecx
         : 115  Minisat::StreamBuffer::assureLookahead():
         : 46   size = gzread(in, buf, sizeof(buf)); } }
    0.00 :   4bd2:   mov    %eax,0x10002c(%rsp)
         : 48   eagerMatch<Minisat::StreamBuffer>():
         : 113  for (; *str != '\0'; ++str, ++in)
    0.00 :   4bd9:   test   %cl,%cl
    0.00 :   4bdb:   jne    4b86 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x306>
         : 116  parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 58   vars    = parseInt(in);
    0.00 :   4bdd:   mov    %r12,%rdi
    0.00 :   4be0:   call   4310 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)>
         : 59   clauses = parseInt(in);
    0.00 :   4be5:   mov    %r12,%rdi
         : 58   vars    = parseInt(in);
    0.00 :   4be8:   mov    %eax,0x8(%rsp)
         : 59   clauses = parseInt(in);
    0.00 :   4bec:   call   4310 <int Minisat::parseInt<Minisat::StreamBuffer>(Minisat::StreamBuffer&)>
    0.00 :   4bf1:   mov    %eax,0xc(%rsp)
    0.00 :   4bf5:   mov    0x100028(%rsp),%ecx
         : 63   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4bfc:   mov    0x10002c(%rsp),%eax
    0.00 :   4c03:   jmp    4920 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xa0>
         : 54   Minisat::StreamBuffer::assureLookahead():
         : 44   if (pos >= size) {
    0.00 :   4c08:   cmp    %ecx,%eax
    0.00 :   4c0a:   jle    4959 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xd9>
         : 47   Minisat::StreamBuffer::operator++():
         : 52   void operator ++ ()       { pos++; assureLookahead(); }
    0.00 :   4c10:   mov    %ecx,0x100028(%rsp)
    0.00 :   4c17:   jmp    4920 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0xa0>
         : 55   Minisat::StreamBuffer::operator*() const:
         : 51   int  operator *  () const { return (pos >= size) ? EOF : buf[pos]; }
    0.00 :   4c1c:   mov    $0xffffffff,%r8d
         : 53   eagerMatch<Minisat::StreamBuffer>():
         : 114  if (*str != *in)
    0.00 :   4c22:   cmp    %r8d,%ecx
    0.00 :   4c25:   je     4ba7 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x327>
         : 117  void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 112  }
         :
         : 114  __fortify_function int
         : 115  printf (const char *__restrict __fmt, ...)
         : 116  {
         : 117  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
    0.00 :   4c27:   mov    %r8d,%edx
         : 119  printf():
    0.00 :   4c2a:   lea    0xe4b7(%rip),%rsi        # 130e8 <_IO_stdin_used+0xe8>
    0.00 :   4c31:   mov    $0x1,%edi
    0.00 :   4c36:   xor    %eax,%eax
    0.00 :   4c38:   call   2320 <__printf_chk@plt>
         : 116  parse_DIMACS_main<Minisat::StreamBuffer, Minisat::SimpSolver>():
         : 64   printf("PARSE ERROR! Unexpected char: %c\n", *in), exit(3);
    0.00 :   4c3d:   mov    $0x3,%edi
    0.00 :   4c42:   call   2450 <exit@plt>
         : 67   void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   4c47:   mov    0x143f2(%rip),%rcx        # 19040 <stderr@GLIBC_2.2.5>
         : 107  fprintf():
    0.00 :   4c4e:   mov    $0x3a,%edx
    0.00 :   4c53:   mov    $0x1,%esi
    0.00 :   4c58:   lea    0xe5f1(%rip),%rdi        # 13250 <_IO_stdin_used+0x250>
    0.00 :   4c5f:   call   25f0 <fwrite@plt>
         : 106  __va_arg_pack ());
    0.00 :   4c64:   jmp    49be <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x13e>
         : 108  void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 105  return __fprintf_chk (__stream, __USE_FORTIFY_LEVEL - 1, __fmt,
    0.00 :   4c69:   mov    0x143d0(%rip),%rcx        # 19040 <stderr@GLIBC_2.2.5>
         : 107  fprintf():
    0.00 :   4c70:   mov    $0x3c,%edx
    0.00 :   4c75:   mov    $0x1,%esi
    0.00 :   4c7a:   lea    0xe58f(%rip),%rdi        # 13210 <_IO_stdin_used+0x210>
    0.00 :   4c81:   call   25f0 <fwrite@plt>
         : 106  __va_arg_pack ());
    0.00 :   4c86:   jmp    49b0 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&)+0x130>
         : 108  void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&):
         : 86   parse_DIMACS_main(in, S); }
    0.00 :   4c8b:   call   2410 <__stack_chk_fail@plt>
    0.00 :   4c90:   endbr64
         : 89   Minisat::vec<Minisat::Lit>::clear(bool):
         : 122  if (data != NULL){
    0.00 :   4c94:   mov    %rax,%rbp
    0.00 :   4c97:   jmp    2600 <void Minisat::parse_DIMACS<Minisat::SimpSolver>(gzFile_s*, Minisat::SimpSolver&) [clone .cold]>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b550 <Minisat::vec<unsigned int>::capacity(int)>:
         : 6    Minisat::vec<unsigned int>::capacity(int):
         : 96   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
         : 97   };
         :
         :
         : 100  template<class T>
         : 101  void vec<T>::capacity(int min_cap) {
  100.00 :   b550:   endbr64
         : 97   if (cap >= min_cap) return;
    0.00 :   b554:   mov    0xc(%rdi),%eax
    0.00 :   b557:   cmp    %esi,%eax
    0.00 :   b559:   jge    b5b0 <Minisat::vec<unsigned int>::capacity(int)+0x60>
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   b55b:   mov    %eax,%ecx
    0.00 :   b55d:   sub    %eax,%esi
         : 96   void vec<T>::capacity(int min_cap) {
    0.00 :   b55f:   push   %rbx
    0.00 :   b560:   mov    %rdi,%rbx
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   b563:   sar    %ecx
    0.00 :   b565:   add    $0x1,%esi
    0.00 :   b568:   add    $0x2,%ecx
    0.00 :   b56b:   and    $0xfffffffe,%esi
    0.00 :   b56e:   and    $0xfffffffe,%ecx
         : 104  Minisat::vec<unsigned int>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   b571:   mov    %ecx,%edi
    0.00 :   b573:   sub    %esi,%edi
    0.00 :   b575:   sar    $0x1f,%edi
    0.00 :   b578:   mov    %edi,%edx
    0.00 :   b57a:   and    %edi,%esi
    0.00 :   b57c:   not    %edx
    0.00 :   b57e:   and    %ecx,%edx
         : 56   Minisat::vec<unsigned int>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b580:   mov    $0x7fffffff,%ecx
         : 101  Minisat::vec<unsigned int>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   b585:   add    %esi,%edx
         : 50   Minisat::vec<unsigned int>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b587:   sub    %eax,%ecx
    0.00 :   b589:   cmp    %edx,%ecx
    0.00 :   b58b:   jl     b5bb <Minisat::vec<unsigned int>::capacity(int)+0x6b>
    0.00 :   b58d:   add    %edx,%eax
    0.00 :   b58f:   mov    (%rbx),%rdi
    0.00 :   b592:   mov    %eax,0xc(%rbx)
    0.00 :   b595:   cltq
    0.00 :   b597:   lea    0x0(,%rax,4),%rsi
    0.00 :   b59f:   call   2540 <realloc@plt>
    0.00 :   b5a4:   mov    %rax,(%rbx)
    0.00 :   b5a7:   test   %rax,%rax
    0.00 :   b5aa:   je     b5b1 <Minisat::vec<unsigned int>::capacity(int)+0x61>
         : 101  throw OutOfMemoryException();
         : 102  }
    0.00 :   b5ac:   pop    %rbx
    0.00 :   b5ad:   ret
    0.00 :   b5ae:   xchg   %ax,%ax
    0.00 :   b5b0:   ret
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b5b1:   call   2330 <__errno_location@plt>
    0.00 :   b5b6:   cmpl   $0xc,(%rax)
    0.00 :   b5b9:   jne    b5ac <Minisat::vec<unsigned int>::capacity(int)+0x5c>
         : 100  throw OutOfMemoryException();
    0.00 :   b5bb:   mov    $0x1,%edi
    0.00 :   b5c0:   call   2360 <__cxa_allocate_exception@plt>
    0.00 :   b5c5:   xor    %edx,%edx
    0.00 :   b5c7:   lea    0xd57a(%rip),%rsi        # 18b48 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    0.00 :   b5ce:   mov    %rax,%rdi
    0.00 :   b5d1:   call   2570 <__cxa_throw@plt>
 Percent |	Source code & Disassembly of minisat for cycles:u (1 samples, percent: local period)
----------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3    Disassembly of section .text:
         :
         : 5    000000000000b430 <Minisat::vec<int>::capacity(int)>:
         : 6    Minisat::vec<int>::capacity(int):
         : 96   void moveTo(vec<T>& dest) { dest.clear(true); dest.data = data; dest.sz = sz; dest.cap = cap; data = NULL; sz = 0; cap = 0; }
         : 97   };
         :
         :
         : 100  template<class T>
         : 101  void vec<T>::capacity(int min_cap) {
    0.00 :   b430:   endbr64
         : 97   if (cap >= min_cap) return;
    0.00 :   b434:   mov    0xc(%rdi),%eax
    0.00 :   b437:   cmp    %esi,%eax
    0.00 :   b439:   jge    b490 <Minisat::vec<int>::capacity(int)+0x60>
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
    0.00 :   b43b:   mov    %eax,%ecx
    0.00 :   b43d:   sub    %eax,%esi
         : 96   void vec<T>::capacity(int min_cap) {
    0.00 :   b43f:   push   %rbx
    0.00 :   b440:   mov    %rdi,%rbx
         : 98   int add = imax((min_cap - cap + 1) & ~1, ((cap >> 1) + 2) & ~1);   // NOTE: grow by approximately 3/2
  100.00 :   b443:   sar    %ecx
    0.00 :   b445:   add    $0x1,%esi
    0.00 :   b448:   add    $0x2,%ecx
    0.00 :   b44b:   and    $0xfffffffe,%esi
    0.00 :   b44e:   and    $0xfffffffe,%ecx
         : 104  Minisat::vec<int>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   b451:   mov    %ecx,%edi
    0.00 :   b453:   sub    %esi,%edi
    0.00 :   b455:   sar    $0x1f,%edi
    0.00 :   b458:   mov    %edi,%edx
    0.00 :   b45a:   and    %edi,%esi
    0.00 :   b45c:   not    %edx
    0.00 :   b45e:   and    %ecx,%edx
         : 56   Minisat::vec<int>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b460:   mov    $0x7fffffff,%ecx
         : 101  Minisat::vec<int>::imax(int, int):
         : 48   static inline int  imax   (int x, int y) { int mask = (y-x) >> (sizeof(int)*8-1); return (x&mask) + (y&(~mask)); }
    0.00 :   b465:   add    %esi,%edx
         : 50   Minisat::vec<int>::capacity(int):
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b467:   sub    %eax,%ecx
    0.00 :   b469:   cmp    %edx,%ecx
    0.00 :   b46b:   jl     b49b <Minisat::vec<int>::capacity(int)+0x6b>
    0.00 :   b46d:   add    %edx,%eax
    0.00 :   b46f:   mov    (%rbx),%rdi
    0.00 :   b472:   mov    %eax,0xc(%rbx)
    0.00 :   b475:   cltq
    0.00 :   b477:   lea    0x0(,%rax,4),%rsi
    0.00 :   b47f:   call   2540 <realloc@plt>
    0.00 :   b484:   mov    %rax,(%rbx)
    0.00 :   b487:   test   %rax,%rax
    0.00 :   b48a:   je     b491 <Minisat::vec<int>::capacity(int)+0x61>
         : 101  throw OutOfMemoryException();
         : 102  }
    0.00 :   b48c:   pop    %rbx
    0.00 :   b48d:   ret
    0.00 :   b48e:   xchg   %ax,%ax
    0.00 :   b490:   ret
         : 99   if (add > INT_MAX - cap || ((data = (T*)::realloc(data, (cap += add) * sizeof(T))) == NULL) && errno == ENOMEM)
    0.00 :   b491:   call   2330 <__errno_location@plt>
    0.00 :   b496:   cmpl   $0xc,(%rax)
    0.00 :   b499:   jne    b48c <Minisat::vec<int>::capacity(int)+0x5c>
         : 100  throw OutOfMemoryException();
    0.00 :   b49b:   mov    $0x1,%edi
    0.00 :   b4a0:   call   2360 <__cxa_allocate_exception@plt>
    0.00 :   b4a5:   xor    %edx,%edx
    0.00 :   b4a7:   lea    0xd69a(%rip),%rsi        # 18b48 <vtable for __cxxabiv1::__class_type_info@CXXABI_1.3>
    0.00 :   b4ae:   mov    %rax,%rdi
    0.00 :   b4b1:   call   2570 <__cxa_throw@plt>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000015df0 <_dl_check_map_versions>:
         : 6     _dl_check_map_versions():
         : 7     ./elf/dl-version.c:155
    0.00 :   15df0:  endbr64
    0.00 :   15df4:  push   %r15
    0.00 :   15df6:  push   %r14
    0.00 :   15df8:  push   %r13
    0.00 :   15dfa:  push   %r12
    0.00 :   15dfc:  push   %rbp
    0.00 :   15dfd:  push   %rbx
    0.00 :   15dfe:  sub    $0x98,%rsp
         : 16    ./elf/dl-version.c:170
    0.00 :   15e05:  mov    0x68(%rdi),%rax
         : 18    ./elf/dl-version.c:155
    0.00 :   15e09:  mov    %esi,0x38(%rsp)
    0.00 :   15e0d:  mov    %edx,0x3c(%rsp)
         : 21    ./elf/dl-version.c:170
    0.00 :   15e11:  test   %rax,%rax
    0.00 :   15e14:  je     163ac <_dl_check_map_versions+0x5bc>
         : 24    ./elf/dl-version.c:172
    0.00 :   15e1a:  mov    0x8(%rax),%rax
    0.00 :   15e1e:  mov    %rdi,%r15
    0.00 :   15e21:  mov    %rax,0x8(%rsp)
    0.00 :   15e26:  testb  $0x20,0x31e(%rdi)
    0.00 :   15e2d:  jne    1627d <_dl_check_map_versions+0x48d>
         : 30    ./elf/dl-version.c:174 (discriminator 4)
    0.00 :   15e33:  mov    0x160(%r15),%rax
         : 32    ./elf/dl-version.c:175 (discriminator 4)
    0.00 :   15e3a:  mov    0x170(%r15),%rdi
         : 34    ./elf/dl-version.c:174 (discriminator 4)
    0.00 :   15e41:  mov    %rax,0x48(%rsp)
         : 36    ./elf/dl-version.c:175 (discriminator 4)
    0.00 :   15e46:  mov    %rdi,0x40(%rsp)
         : 38    ./elf/dl-version.c:177 (discriminator 4)
    0.00 :   15e4b:  test   %rax,%rax
    0.00 :   15e4e:  je     16478 <_dl_check_map_versions+0x688>
         : 41    ./elf/dl-version.c:180
    0.00 :   15e54:  mov    0x8(%rax),%rax
    0.00 :   15e58:  add    (%r15),%rax
         : 44    ./elf/dl-version.c:164
    0.00 :   15e5b:  xor    %r14d,%r14d
         : 46    ./elf/dl-version.c:156
    0.00 :   15e5e:  movl   $0x0,0x34(%rsp)
         : 48    ./elf/dl-version.c:184
    0.00 :   15e66:  cmpw   $0x1,(%rax)
         : 50    ./elf/dl-version.c:180
    0.00 :   15e6a:  mov    %rax,0x28(%rsp)
         : 52    ./elf/dl-version.c:184
    0.00 :   15e6f:  jne    1649c <_dl_check_map_versions+0x6ac>
    0.00 :   15e75:  nopl   (%rax)
         : 55    ./elf/dl-version.c:200
    0.00 :   15e78:  mov    0x4(%rax),%ebx
         : 57    find_needed():
         : 58    ./elf/dl-version.c:36
    0.00 :   15e7b:  mov    0x30(%r15),%rax
    0.00 :   15e7f:  lea    0x241ba(%rip),%rdi        # 3a040 <_rtld_global>
         : 61    _dl_check_map_versions():
         : 62    ./elf/dl-version.c:200
    0.00 :   15e86:  add    0x8(%rsp),%rbx
         : 64    find_needed():
         : 65    ./elf/dl-version.c:36
    0.00 :   15e8b:  lea    (%rax,%rax,4),%rax
    0.00 :   15e8f:  shl    $0x5,%rax
    0.00 :   15e93:  mov    (%rdi,%rax,1),%r12
    0.00 :   15e97:  test   %r12,%r12
    0.00 :   15e9a:  jne    15eb6 <_dl_check_map_versions+0xc6>
    0.00 :   15e9c:  jmp    16180 <_dl_check_map_versions+0x390>
    0.00 :   15ea1:  nopl   0x0(%rax)
         : 73    ./elf/dl-version.c:37
    0.00 :   15ea8:  mov    0x18(%r12),%r12
         : 75    ./elf/dl-version.c:36
    0.00 :   15ead:  test   %r12,%r12
    0.00 :   15eb0:  je     16180 <_dl_check_map_versions+0x390>
         : 78    ./elf/dl-version.c:38
    0.00 :   15eb6:  mov    %r12,%rsi
    0.00 :   15eb9:  mov    %rbx,%rdi
    0.00 :   15ebc:  call   d690 <_dl_name_match_p>
    0.00 :   15ec1:  test   %eax,%eax
    0.00 :   15ec3:  je     15ea8 <_dl_check_map_versions+0xb8>
         : 84    _dl_check_map_versions():
         : 85    ./elf/dl-version.c:208
    0.00 :   15ec5:  mov    0x3c(%rsp),%ecx
    0.00 :   15ec9:  test   %ecx,%ecx
    0.00 :   15ecb:  jne    16269 <_dl_check_map_versions+0x479>
         : 89    ./elf/dl-version.c:213
    0.00 :   15ed1:  mov    0x28(%rsp),%rax
         : 91    match_symbol():
         : 92    ./elf/dl-version.c:142
    0.00 :   15ed6:  mov    %r12,0x10(%rsp)
    0.00 :   15edb:  mov    %r15,(%rsp)
         : 95    _dl_check_map_versions():
         : 96    ./elf/dl-version.c:213
    0.00 :   15edf:  mov    0x8(%rax),%ebx
    0.00 :   15ee2:  add    %rax,%rbx
    0.00 :   15ee5:  nopl   (%rax)
         : 100   ./elf/dl-version.c:221
    0.00 :   15ee8:  movzwl 0x4(%rbx),%eax
         : 102   ./elf/dl-version.c:219
    0.00 :   15eec:  mov    0x8(%rbx),%r12d
         : 104   ./elf/dl-version.c:217
    0.00 :   15ef0:  add    0x8(%rsp),%r12
    0.00 :   15ef5:  mov    (%rbx),%r13d
         : 107   ./elf/dl-version.c:221
    0.00 :   15ef8:  mov    %ax,0x32(%rsp)
         : 109   ./elf/dl-version.c:217
    0.00 :   15efd:  mov    0x10(%rsp),%rax
    0.00 :   15f02:  mov    0x28(%rax),%rbp
    0.00 :   15f06:  mov    (%rsp),%rax
    0.00 :   15f0a:  mov    0x8(%rax),%r15
    0.00 :   15f0e:  cmpb   $0x0,(%r15)
    0.00 :   15f12:  jne    15f2c <_dl_check_map_versions+0x13c>
         : 116   ./elf/dl-version.c:217 (discriminator 2)
    0.00 :   15f14:  mov    0x23ba5(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   15f1b:  mov    (%rax),%r15
    0.00 :   15f1e:  lea    0x17bfe(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   15f25:  test   %r15,%r15
    0.00 :   15f28:  cmove  %rax,%r15
         : 122   match_symbol():
         : 123   ./elf/dl-version.c:56 (discriminator 8)
    0.00 :   15f2c:  mov    0x68(%rbp),%rax
    0.00 :   15f30:  mov    0x8(%rax),%r11
    0.00 :   15f34:  testb  $0x20,0x31e(%rbp)
    0.00 :   15f3b:  je     15f41 <_dl_check_map_versions+0x151>
         : 128   ./elf/dl-version.c:56
    0.00 :   15f3d:  add    0x0(%rbp),%r11
         : 130   ./elf/dl-version.c:64
    0.00 :   15f41:  lea    0x23b98(%rip),%rax        # 39ae0 <_rtld_global_ro>
    0.00 :   15f48:  testb  $0x10,(%rax)
    0.00 :   15f4b:  jne    16130 <_dl_check_map_versions+0x340>
         : 134   ./elf/dl-version.c:70
    0.00 :   15f51:  mov    0x170(%rbp),%rax
    0.00 :   15f58:  test   %rax,%rax
    0.00 :   15f5b:  je     160e0 <_dl_check_map_versions+0x2f0>
         : 138   ./elf/dl-version.c:86
    0.00 :   15f61:  mov    0x8(%rax),%rdx
         : 140   ./elf/dl-version.c:87
    0.00 :   15f65:  test   %rdx,%rdx
    0.00 :   15f68:  je     16531 <_dl_check_map_versions+0x741>
         : 143   ./elf/dl-version.c:89
    0.00 :   15f6e:  add    0x0(%rbp),%rdx
         : 145   ./elf/dl-version.c:94
    0.00 :   15f72:  cmpw   $0x1,(%rdx)
    0.00 :   15f76:  jne    15fbd <_dl_check_map_versions+0x1cd>
    0.00 :   15f78:  mov    %rbp,0x18(%rsp)
    0.00 :   15f7d:  mov    %rbx,%rbp
    0.00 :   15f80:  mov    %r11,%rbx
    0.00 :   15f83:  mov    %r15,0x20(%rsp)
    0.00 :   15f88:  mov    %r12,%r15
    0.00 :   15f8b:  mov    %r13d,%r12d
    0.00 :   15f8e:  mov    %rdx,%r13
         : 155   ./elf/dl-version.c:108
    0.00 :   15f91:  cmp    0x8(%r13),%r12d
    0.00 :   15f95:  je     16090 <_dl_check_map_versions+0x2a0>
         : 158   ./elf/dl-version.c:120
    0.00 :   15f9b:  mov    0x10(%r13),%eax
    0.00 :   15f9f:  test   %eax,%eax
    0.00 :   15fa1:  je     16200 <_dl_check_map_versions+0x410>
         : 162   ./elf/dl-version.c:124
    0.00 :   15fa7:  add    %rax,%r13
         : 164   ./elf/dl-version.c:94
    0.00 :   15faa:  cmpw   $0x1,0x0(%r13)
    0.00 :   15fb0:  je     15f91 <_dl_check_map_versions+0x1a1>
    0.00 :   15fb2:  mov    %rbp,%rbx
    0.00 :   15fb5:  mov    0x18(%rsp),%rbp
    0.00 :   15fba:  mov    %r13,%rdx
         : 170   ./elf/dl-version.c:97
    0.00 :   15fbd:  movb   $0x0,0x63(%rsp)
         : 172   ./elf/dl-version.c:99
    0.00 :   15fc2:  movzwl (%rdx),%ecx
    0.00 :   15fc5:  lea    0x63(%rsp),%r8
    0.00 :   15fca:  lea    0x19cff(%rip),%rdi        # 2fcd0 <__GI__itoa_lower_digits>
         : 176   _itoa_word():
         : 177   ./elf/../sysdeps/generic/_itoa.h:76
    0.00 :   15fd1:  movabs $0xcccccccccccccccd,%rsi
    0.00 :   15fdb:  nopl   0x0(%rax,%rax,1)
    0.00 :   15fe0:  mov    %rcx,%rax
    0.00 :   15fe3:  mov    %rcx,%r9
    0.00 :   15fe6:  sub    $0x1,%r8
    0.00 :   15fea:  mul    %rsi
    0.00 :   15fed:  shr    $0x3,%rdx
    0.00 :   15ff1:  lea    (%rdx,%rdx,4),%rax
    0.00 :   15ff5:  add    %rax,%rax
    0.00 :   15ff8:  sub    %rax,%r9
    0.00 :   15ffb:  movzbl (%rdi,%r9,1),%eax
    0.00 :   16000:  mov    %al,(%r8)
    0.00 :   16003:  mov    %rcx,%rax
    0.00 :   16006:  mov    %rdx,%rcx
    0.00 :   16009:  cmp    $0x9,%rax
    0.00 :   1600d:  ja     15fe0 <_dl_check_map_versions+0x1f0>
         : 194   match_symbol():
         : 195   ./elf/dl-version.c:100
    0.00 :   1600f:  mov    0x8(%rbp),%rsi
         : 197   ./elf/dl-version.c:99
    0.00 :   16013:  cmpb   $0x0,(%rsi)
    0.00 :   16016:  jne    16030 <_dl_check_map_versions+0x240>
         : 200   ./elf/dl-version.c:100
    0.00 :   16018:  mov    0x23aa1(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   1601f:  mov    (%rax),%rsi
    0.00 :   16022:  lea    0x17afa(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   16029:  test   %rsi,%rsi
    0.00 :   1602c:  cmove  %rax,%rsi
         : 206   ./elf/dl-version.c:99
    0.00 :   16030:  lea    0x70(%rsp),%rbp
    0.00 :   16035:  mov    %r8,%rcx
    0.00 :   16038:  xor    %eax,%eax
    0.00 :   1603a:  lea    0x1b4a7(%rip),%rdx        # 314e8 <__PRETTY_FUNCTION__.0+0x328>
    0.00 :   16041:  mov    %rbp,%rdi
    0.00 :   16044:  call   4ba0 <_dl_exception_create_format>
         : 213   ./elf/dl-version.c:104
    0.00 :   16049:  movl   $0x1,0x34(%rsp)
         : 215   ./elf/dl-version.c:147
    0.00 :   16051:  xor    %edi,%edi
    0.00 :   16053:  lea    0x181ac(%rip),%rdx        # 2e206 <_sys_errnameidx+0x906>
    0.00 :   1605a:  mov    %rbp,%rsi
    0.00 :   1605d:  call   1d1c0 <_dl_signal_cexception>
         : 220   ./elf/dl-version.c:148
    0.00 :   16062:  mov    %rbp,%rdi
    0.00 :   16065:  call   5010 <_dl_exception_free>
         : 223   _dl_check_map_versions():
         : 224   ./elf/dl-version.c:224
    0.00 :   1606a:  movzwl 0x6(%rbx),%eax
    0.00 :   1606e:  and    $0x7fff,%eax
    0.00 :   16073:  cmp    %eax,%r14d
    0.00 :   16076:  cmovb  %eax,%r14d
         : 229   ./elf/dl-version.c:227
    0.00 :   1607a:  mov    0xc(%rbx),%eax
    0.00 :   1607d:  test   %eax,%eax
    0.00 :   1607f:  je     160b8 <_dl_check_map_versions+0x2c8>
         : 233   ./elf/dl-version.c:232
    0.00 :   16081:  add    %rax,%rbx
         : 235   ./elf/dl-version.c:221
    0.00 :   16084:  jmp    15ee8 <_dl_check_map_versions+0xf8>
    0.00 :   16089:  nopl   0x0(%rax)
         : 238   match_symbol():
         : 239   ./elf/dl-version.c:110
    0.00 :   16090:  mov    0xc(%r13),%eax
         : 241   ./elf/dl-version.c:113
    0.00 :   16094:  mov    %r15,%rdi
    0.00 :   16097:  mov    0x0(%r13,%rax,1),%esi
    0.00 :   1609c:  add    %rbx,%rsi
    0.00 :   1609f:  call   27220 <strcmp>
    0.00 :   160a4:  test   %eax,%eax
    0.00 :   160a6:  jne    15f9b <_dl_check_map_versions+0x1ab>
    0.00 :   160ac:  mov    %rbp,%rbx
    0.00 :   160af:  jmp    1606a <_dl_check_map_versions+0x27a>
    0.00 :   160b1:  nopl   0x0(%rax)
    0.00 :   160b8:  mov    (%rsp),%r15
         : 252   _dl_check_map_versions():
         : 253   ./elf/dl-version.c:236
    0.00 :   160bc:  mov    0x28(%rsp),%rdi
    0.00 :   160c1:  mov    0xc(%rdi),%eax
    0.00 :   160c4:  test   %eax,%eax
    0.00 :   160c6:  je     1628d <_dl_check_map_versions+0x49d>
         : 258   ./elf/dl-version.c:241
    0.00 :   160cc:  add    %rax,%rdi
    0.00 :   160cf:  mov    %rdi,0x28(%rsp)
         : 261   ./elf/dl-version.c:197
    0.00 :   160d4:  mov    %rdi,%rax
         : 263   ./elf/dl-version.c:198
    0.00 :   160d7:  jmp    15e78 <_dl_check_map_versions+0x88>
    0.00 :   160dc:  nopl   0x0(%rax)
         : 266   match_symbol():
         : 267   ./elf/dl-version.c:75
    0.00 :   160e0:  mov    0x38(%rsp),%edx
    0.00 :   160e4:  test   %edx,%edx
    0.00 :   160e6:  je     1606a <_dl_check_map_versions+0x27a>
         : 271   ./elf/dl-version.c:79
    0.00 :   160e8:  mov    0x8(%rbp),%rsi
         : 273   ./elf/dl-version.c:78
    0.00 :   160ec:  cmpb   $0x0,(%rsi)
    0.00 :   160ef:  jne    16109 <_dl_check_map_versions+0x319>
         : 276   ./elf/dl-version.c:79
    0.00 :   160f1:  mov    0x239c8(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   160f8:  mov    (%rax),%rsi
    0.00 :   160fb:  lea    0x17a21(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   16102:  test   %rsi,%rsi
    0.00 :   16105:  cmove  %rax,%rsi
         : 282   ./elf/dl-version.c:78
    0.00 :   16109:  lea    0x70(%rsp),%rbp
    0.00 :   1610e:  mov    %r15,%rcx
    0.00 :   16111:  xor    %eax,%eax
    0.00 :   16113:  lea    0x1b396(%rip),%rdx        # 314b0 <__PRETTY_FUNCTION__.0+0x2f0>
    0.00 :   1611a:  mov    %rbp,%rdi
    0.00 :   1611d:  call   4ba0 <_dl_exception_create_format>
         : 289   ./elf/dl-version.c:81
    0.00 :   16122:  jmp    16051 <_dl_check_map_versions+0x261>
    0.00 :   16127:  nopw   0x0(%rax,%rax,1)
         : 292   ./elf/dl-version.c:67
    0.00 :   16130:  mov    0x8(%rbp),%rdx
         : 294   ./elf/dl-version.c:65
    0.00 :   16134:  mov    0x30(%rbp),%rcx
    0.00 :   16138:  cmpb   $0x0,(%rdx)
    0.00 :   1613b:  jne    16155 <_dl_check_map_versions+0x365>
         : 298   ./elf/dl-version.c:67
    0.00 :   1613d:  mov    0x2397c(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   16144:  mov    (%rax),%rdx
    0.00 :   16147:  lea    0x179d5(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   1614e:  test   %rdx,%rdx
    0.00 :   16151:  cmove  %rax,%rdx
         : 304   ./elf/dl-version.c:65
    0.00 :   16155:  mov    (%rsp),%rax
    0.00 :   16159:  mov    %r15,%r8
    0.00 :   1615c:  mov    %r12,%rsi
    0.00 :   1615f:  mov    %r11,0x18(%rsp)
    0.00 :   16164:  lea    0x1b2fd(%rip),%rdi        # 31468 <__PRETTY_FUNCTION__.0+0x2a8>
    0.00 :   1616b:  mov    0x30(%rax),%r9
    0.00 :   1616f:  xor    %eax,%eax
    0.00 :   16171:  call   fbc0 <_dl_debug_printf>
    0.00 :   16176:  mov    0x18(%rsp),%r11
    0.00 :   1617b:  jmp    15f51 <_dl_check_map_versions+0x161>
         : 315   find_needed():
         : 316   ./elf/dl-version.c:43
    0.00 :   16180:  mov    0x2c8(%r15),%esi
    0.00 :   16187:  test   %esi,%esi
    0.00 :   16189:  je     161d8 <_dl_check_map_versions+0x3e8>
    0.00 :   1618b:  xor    %r12d,%r12d
    0.00 :   1618e:  jmp    1619d <_dl_check_map_versions+0x3ad>
    0.00 :   16190:  add    $0x1,%r12d
    0.00 :   16194:  cmp    0x2c8(%r15),%r12d
    0.00 :   1619b:  jae    161d8 <_dl_check_map_versions+0x3e8>
         : 325   ./elf/dl-version.c:44
    0.00 :   1619d:  mov    0x2c0(%r15),%rdx
    0.00 :   161a4:  mov    %r12d,%eax
    0.00 :   161a7:  mov    %rbx,%rdi
    0.00 :   161aa:  lea    0x0(,%rax,8),%rbp
    0.00 :   161b2:  mov    (%rdx,%rax,8),%rsi
    0.00 :   161b6:  call   d690 <_dl_name_match_p>
    0.00 :   161bb:  test   %eax,%eax
    0.00 :   161bd:  je     16190 <_dl_check_map_versions+0x3a0>
         : 334   ./elf/dl-version.c:45
    0.00 :   161bf:  mov    0x2c0(%r15),%rax
    0.00 :   161c6:  mov    (%rax,%rbp,1),%r12
         : 337   _dl_check_map_versions():
         : 338   ./elf/dl-version.c:204
    0.00 :   161ca:  test   %r12,%r12
    0.00 :   161cd:  jne    15ec5 <_dl_check_map_versions+0xd5>
    0.00 :   161d3:  nopl   0x0(%rax,%rax,1)
    0.00 :   161d8:  lea    0x199d1(%rip),%rcx        # 2fbb0 <__PRETTY_FUNCTION__.1>
    0.00 :   161df:  mov    $0xcc,%edx
    0.00 :   161e4:  lea    0x17fef(%rip),%rsi        # 2e1da <_sys_errnameidx+0x8da>
    0.00 :   161eb:  lea    0x17ff5(%rip),%rdi        # 2e1e7 <_sys_errnameidx+0x8e7>
    0.00 :   161f2:  call   1e460 <__GI___assert_fail>
    0.00 :   161f7:  nopw   0x0(%rax,%rax,1)
         : 348   match_symbol():
         : 349   ./elf/dl-version.c:128
    0.00 :   16200:  mov    %r15,%r12
    0.00 :   16203:  mov    %rbp,%rbx
    0.00 :   16206:  mov    0x20(%rsp),%r15
    0.00 :   1620b:  mov    0x18(%rsp),%rbp
    0.00 :   16210:  testb  $0x2,0x32(%rsp)
    0.00 :   16215:  je     163ca <_dl_check_map_versions+0x5da>
         : 356   ./elf/dl-version.c:130
    0.00 :   1621b:  mov    0x38(%rsp),%eax
    0.00 :   1621f:  test   %eax,%eax
    0.00 :   16221:  je     1606a <_dl_check_map_versions+0x27a>
         : 360   ./elf/dl-version.c:134
    0.00 :   16227:  mov    0x8(%rbp),%rsi
         : 362   ./elf/dl-version.c:133
    0.00 :   1622b:  cmpb   $0x0,(%rsi)
    0.00 :   1622e:  jne    16248 <_dl_check_map_versions+0x458>
         : 365   ./elf/dl-version.c:134
    0.00 :   16230:  mov    0x23889(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   16237:  mov    (%rax),%rsi
    0.00 :   1623a:  lea    0x178e2(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   16241:  test   %rsi,%rsi
    0.00 :   16244:  cmove  %rax,%rsi
         : 371   ./elf/dl-version.c:133
    0.00 :   16248:  lea    0x70(%rsp),%rbp
    0.00 :   1624d:  mov    %r15,%r8
    0.00 :   16250:  mov    %r12,%rcx
    0.00 :   16253:  lea    0x1b2b6(%rip),%rdx        # 31510 <__PRETTY_FUNCTION__.0+0x350>
    0.00 :   1625a:  mov    %rbp,%rdi
    0.00 :   1625d:  xor    %eax,%eax
    0.00 :   1625f:  call   4ba0 <_dl_exception_create_format>
         : 379   ./elf/dl-version.c:136
    0.00 :   16264:  jmp    16051 <_dl_check_map_versions+0x261>
         : 381   _dl_check_map_versions():
         : 382   ./elf/dl-version.c:209
    0.00 :   16269:  testb  $0x20,0x31d(%r12)
    0.00 :   16272:  je     15ed1 <_dl_check_map_versions+0xe1>
    0.00 :   16278:  jmp    160bc <_dl_check_map_versions+0x2cc>
         : 386   ./elf/dl-version.c:172 (discriminator 1)
    0.00 :   1627d:  mov    (%rdi),%rdi
    0.00 :   16280:  add    %rdi,%rax
    0.00 :   16283:  mov    %rax,0x8(%rsp)
    0.00 :   16288:  jmp    15e33 <_dl_check_map_versions+0x43>
         : 391   ./elf/dl-version.c:250
    0.00 :   1628d:  cmpq   $0x0,0x40(%rsp)
    0.00 :   16293:  je     162c2 <_dl_check_map_versions+0x4d2>
         : 394   ./elf/dl-version.c:253
    0.00 :   16295:  mov    0x40(%rsp),%rax
    0.00 :   1629a:  mov    0x8(%rax),%rdx
    0.00 :   1629e:  add    (%r15),%rdx
    0.00 :   162a1:  jmp    162ab <_dl_check_map_versions+0x4bb>
    0.00 :   162a3:  nopl   0x0(%rax,%rax,1)
         : 400   ./elf/dl-version.c:263
    0.00 :   162a8:  add    %rax,%rdx
         : 402   ./elf/dl-version.c:256
    0.00 :   162ab:  movzwl 0x4(%rdx),%eax
    0.00 :   162af:  and    $0x7fff,%eax
    0.00 :   162b4:  cmp    %eax,%r14d
    0.00 :   162b7:  cmovb  %eax,%r14d
         : 407   ./elf/dl-version.c:259
    0.00 :   162bb:  mov    0x10(%rdx),%eax
    0.00 :   162be:  test   %eax,%eax
    0.00 :   162c0:  jne    162a8 <_dl_check_map_versions+0x4b8>
         : 411   ./elf/dl-version.c:267
    0.00 :   162c2:  test   %r14d,%r14d
    0.00 :   162c5:  je     163b4 <_dl_check_map_versions+0x5c4>
         : 414   ./elf/dl-version.c:273
    0.00 :   162cb:  lea    0x1(%r14),%edi
         : 416   calloc():
         : 417   ./elf/../include/rtld-malloc.h:44
    0.00 :   162cf:  mov    $0x18,%esi
         : 419   _dl_check_map_versions():
         : 420   ./elf/dl-version.c:273
    0.00 :   162d4:  mov    %rdi,%rbx
         : 422   calloc():
         : 423   ./elf/../include/rtld-malloc.h:44
    0.00 :   162d7:  call   *0x23793(%rip)        # 39a70 <__rtld_calloc>
         : 425   _dl_check_map_versions():
         : 426   ./elf/dl-version.c:272
    0.00 :   162dd:  mov    %rax,0x2e8(%r15)
         : 428   calloc():
         : 429   ./elf/../include/rtld-malloc.h:44
    0.00 :   162e4:  mov    %rax,%rsi
         : 431   _dl_check_map_versions():
         : 432   ./elf/dl-version.c:274
    0.00 :   162e7:  test   %rax,%rax
    0.00 :   162ea:  je     16550 <_dl_check_map_versions+0x760>
         : 435   ./elf/dl-version.c:287
    0.00 :   162f0:  mov    0x1d0(%r15),%rax
         : 437   ./elf/dl-version.c:284
    0.00 :   162f7:  mov    %ebx,0x2f0(%r15)
         : 439   ./elf/dl-version.c:287
    0.00 :   162fe:  mov    0x8(%rax),%rax
    0.00 :   16302:  testb  $0x20,0x31e(%r15)
    0.00 :   1630a:  jne    16494 <_dl_check_map_versions+0x6a4>
         : 443   ./elf/dl-version.c:287 (discriminator 4)
    0.00 :   16310:  mov    %rax,0x348(%r15)
         : 445   ./elf/dl-version.c:289 (discriminator 4)
    0.00 :   16317:  mov    0x48(%rsp),%rax
    0.00 :   1631c:  test   %rax,%rax
    0.00 :   1631f:  je     16414 <_dl_check_map_versions+0x624>
         : 449   ./elf/dl-version.c:292
    0.00 :   16325:  mov    0x8(%rsp),%r8
    0.00 :   1632a:  mov    0x8(%rax),%rdi
    0.00 :   1632e:  add    (%r15),%rdi
    0.00 :   16331:  nopl   0x0(%rax)
         : 454   ./elf/dl-version.c:296
    0.00 :   16338:  mov    0x8(%rdi),%eax
    0.00 :   1633b:  add    %rdi,%rax
    0.00 :   1633e:  jmp    16378 <_dl_check_map_versions+0x588>
         : 458   ./elf/dl-version.c:303
    0.00 :   16340:  movzwl %cx,%ecx
         : 460   ./elf/dl-version.c:304
    0.00 :   16343:  and    $0x8000,%edx
         : 462   ./elf/dl-version.c:303
    0.00 :   16349:  mov    (%rax),%r9d
    0.00 :   1634c:  lea    (%rcx,%rcx,2),%rcx
    0.00 :   16350:  lea    (%rsi,%rcx,8),%rcx
         : 466   ./elf/dl-version.c:304
    0.00 :   16354:  mov    %edx,0xc(%rcx)
         : 468   ./elf/dl-version.c:305
    0.00 :   16357:  mov    0x8(%rax),%edx
         : 470   ./elf/dl-version.c:303
    0.00 :   1635a:  mov    %r9d,0x8(%rcx)
         : 472   ./elf/dl-version.c:305
    0.00 :   1635e:  add    %r8,%rdx
    0.00 :   16361:  mov    %rdx,(%rcx)
         : 475   ./elf/dl-version.c:306
    0.00 :   16364:  mov    0x4(%rdi),%edx
    0.00 :   16367:  add    %r8,%rdx
    0.00 :   1636a:  mov    %rdx,0x10(%rcx)
         : 479   ./elf/dl-version.c:309
    0.00 :   1636e:  mov    0xc(%rax),%edx
    0.00 :   16371:  test   %edx,%edx
    0.00 :   16373:  je     163a0 <_dl_check_map_versions+0x5b0>
         : 483   ./elf/dl-version.c:314
    0.00 :   16375:  add    %rdx,%rax
         : 485   ./elf/dl-version.c:299
    0.00 :   16378:  movzwl 0x6(%rax),%edx
         : 487   ./elf/dl-version.c:301
    0.00 :   1637c:  mov    %edx,%r9d
         : 489   ./elf/dl-version.c:299
    0.00 :   1637f:  mov    %edx,%ecx
         : 491   ./elf/dl-version.c:301
    0.00 :   16381:  and    $0x7fff,%r9d
         : 493   ./elf/dl-version.c:299
    0.00 :   16388:  and    $0x7fff,%cx
         : 495   ./elf/dl-version.c:301
    0.00 :   1638d:  cmp    %r9d,%ebx
    0.00 :   16390:  ja     16340 <_dl_check_map_versions+0x550>
         : 498   ./elf/dl-version.c:309
    0.00 :   16392:  mov    0xc(%rax),%edx
    0.00 :   16395:  test   %edx,%edx
    0.00 :   16397:  jne    16375 <_dl_check_map_versions+0x585>
    0.00 :   16399:  nopl   0x0(%rax)
         : 503   ./elf/dl-version.c:317
    0.00 :   163a0:  mov    0xc(%rdi),%eax
    0.00 :   163a3:  test   %eax,%eax
    0.00 :   163a5:  je     16414 <_dl_check_map_versions+0x624>
         : 507   ./elf/dl-version.c:322
    0.00 :   163a7:  add    %rax,%rdi
         : 509   ./elf/dl-version.c:294
    0.00 :   163aa:  jmp    16338 <_dl_check_map_versions+0x548>
         : 511   ./elf/dl-version.c:171
    0.00 :   163ac:  movl   $0x0,0x34(%rsp)
         : 513   ./elf/dl-version.c:356
    0.00 :   163b4:  mov    0x34(%rsp),%eax
    0.00 :   163b8:  add    $0x98,%rsp
    0.00 :   163bf:  pop    %rbx
    0.00 :   163c0:  pop    %rbp
    0.00 :   163c1:  pop    %r12
    0.00 :   163c3:  pop    %r13
    0.00 :   163c5:  pop    %r14
    0.00 :   163c7:  pop    %r15
    0.00 :   163c9:  ret
         : 523   match_symbol():
         : 524   ./elf/dl-version.c:143
    0.00 :   163ca:  mov    0x8(%rbp),%rsi
         : 526   ./elf/dl-version.c:142
    0.00 :   163ce:  cmpb   $0x0,(%rsi)
    0.00 :   163d1:  jne    163eb <_dl_check_map_versions+0x5fb>
         : 529   ./elf/dl-version.c:143
    0.00 :   163d3:  mov    0x236e6(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   163da:  mov    (%rax),%rsi
    0.00 :   163dd:  lea    0x1773f(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   163e4:  test   %rsi,%rsi
    0.00 :   163e7:  cmove  %rax,%rsi
         : 535   ./elf/dl-version.c:142
    0.00 :   163eb:  lea    0x70(%rsp),%rbp
    0.00 :   163f0:  mov    %r15,%r8
    0.00 :   163f3:  mov    %r12,%rcx
    0.00 :   163f6:  lea    0x1b143(%rip),%rdx        # 31540 <__PRETTY_FUNCTION__.0+0x380>
    0.00 :   163fd:  mov    %rbp,%rdi
    0.00 :   16400:  xor    %eax,%eax
    0.00 :   16402:  call   4ba0 <_dl_exception_create_format>
    0.00 :   16407:  movl   $0x1,0x34(%rsp)
    0.00 :   1640f:  jmp    16051 <_dl_check_map_versions+0x261>
         : 545   _dl_check_map_versions():
         : 546   ./elf/dl-version.c:327
    0.00 :   16414:  mov    0x40(%rsp),%rax
    0.00 :   16419:  test   %rax,%rax
    0.00 :   1641c:  je     163b4 <_dl_check_map_versions+0x5c4>
         : 550   ./elf/dl-version.c:330
    0.00 :   1641e:  mov    0x8(%rax),%rax
    0.00 :   16422:  mov    0x8(%rsp),%r8
    0.00 :   16427:  add    (%r15),%rax
    0.00 :   1642a:  jmp    16466 <_dl_check_map_versions+0x676>
         : 555   ./elf/dl-version.c:334
    0.00 :   1642c:  mov    0xc(%rax),%ecx
         : 557   ./elf/dl-version.c:340
    0.00 :   1642f:  movzwl 0x4(%rax),%edx
         : 559   ./elf/dl-version.c:341
    0.00 :   16433:  mov    0x8(%rax),%edi
         : 561   ./elf/dl-version.c:342
    0.00 :   16436:  mov    (%rax,%rcx,1),%ecx
         : 563   ./elf/dl-version.c:341
    0.00 :   16439:  and    $0x7fff,%edx
    0.00 :   1643f:  lea    (%rdx,%rdx,2),%rdx
    0.00 :   16443:  lea    (%rsi,%rdx,8),%rdx
         : 567   ./elf/dl-version.c:342
    0.00 :   16447:  add    %r8,%rcx
         : 569   ./elf/dl-version.c:341
    0.00 :   1644a:  mov    %edi,0x8(%rdx)
         : 571   ./elf/dl-version.c:342
  100.00 :   1644d:  mov    %rcx,(%rdx)
         : 573   ./elf/dl-version.c:343
    0.00 :   16450:  movq   $0x0,0x10(%rdx)
         : 575   ./elf/dl-version.c:346
    0.00 :   16458:  mov    0x10(%rax),%edx
    0.00 :   1645b:  test   %edx,%edx
    0.00 :   1645d:  je     163b4 <_dl_check_map_versions+0x5c4>
         : 579   ./elf/dl-version.c:350
    0.00 :   16463:  add    %rdx,%rax
         : 581   ./elf/dl-version.c:336
    0.00 :   16466:  testb  $0x1,0x2(%rax)
    0.00 :   1646a:  je     1642c <_dl_check_map_versions+0x63c>
         : 584   ./elf/dl-version.c:346
    0.00 :   1646c:  mov    0x10(%rax),%edx
    0.00 :   1646f:  test   %edx,%edx
    0.00 :   16471:  jne    16463 <_dl_check_map_versions+0x673>
    0.00 :   16473:  jmp    163b4 <_dl_check_map_versions+0x5c4>
         : 589   ./elf/dl-version.c:164
    0.00 :   16478:  xor    %r14d,%r14d
         : 591   ./elf/dl-version.c:250
    0.00 :   1647b:  cmpq   $0x0,0x40(%rsp)
         : 593   ./elf/dl-version.c:156
    0.00 :   16481:  movl   $0x0,0x34(%rsp)
         : 595   ./elf/dl-version.c:250
    0.00 :   16489:  jne    16295 <_dl_check_map_versions+0x4a5>
    0.00 :   1648f:  jmp    163b4 <_dl_check_map_versions+0x5c4>
         : 598   ./elf/dl-version.c:287 (discriminator 1)
    0.00 :   16494:  add    (%r15),%rax
    0.00 :   16497:  jmp    16310 <_dl_check_map_versions+0x520>
         : 601   ./elf/dl-version.c:187
    0.00 :   1649c:  movb   $0x0,0x63(%rsp)
         : 603   ./elf/dl-version.c:189
    0.00 :   164a1:  movzwl (%rax),%ecx
    0.00 :   164a4:  lea    0x63(%rsp),%r8
    0.00 :   164a9:  lea    0x19820(%rip),%r9        # 2fcd0 <__GI__itoa_lower_digits>
         : 607   _itoa_word():
         : 608   ./elf/../sysdeps/generic/_itoa.h:76
    0.00 :   164b0:  movabs $0xcccccccccccccccd,%rdi
    0.00 :   164ba:  mov    %rcx,%rax
    0.00 :   164bd:  mov    %rcx,%rsi
    0.00 :   164c0:  sub    $0x1,%r8
    0.00 :   164c4:  mul    %rdi
    0.00 :   164c7:  shr    $0x3,%rdx
    0.00 :   164cb:  lea    (%rdx,%rdx,4),%rax
    0.00 :   164cf:  add    %rax,%rax
    0.00 :   164d2:  sub    %rax,%rsi
    0.00 :   164d5:  movzbl (%r9,%rsi,1),%eax
    0.00 :   164da:  mov    %al,(%r8)
    0.00 :   164dd:  mov    %rcx,%rax
    0.00 :   164e0:  mov    %rdx,%rcx
    0.00 :   164e3:  cmp    $0x9,%rax
    0.00 :   164e7:  ja     164ba <_dl_check_map_versions+0x6ca>
         : 624   _dl_check_map_versions():
         : 625   ./elf/dl-version.c:190
    0.00 :   164e9:  mov    0x8(%r15),%rsi
         : 627   ./elf/dl-version.c:189
    0.00 :   164ed:  cmpb   $0x0,(%rsi)
    0.00 :   164f0:  je     16517 <_dl_check_map_versions+0x727>
         : 630   ./elf/dl-version.c:189 (discriminator 2)
    0.00 :   164f2:  lea    0x70(%rsp),%rbx
    0.00 :   164f7:  mov    %r8,%rcx
    0.00 :   164fa:  lea    0x1af37(%rip),%rdx        # 31438 <__PRETTY_FUNCTION__.0+0x278>
    0.00 :   16501:  xor    %eax,%eax
    0.00 :   16503:  mov    %rbx,%rdi
    0.00 :   16506:  call   4ba0 <_dl_exception_create_format>
         : 637   ./elf/dl-version.c:167 (discriminator 2)
    0.00 :   1650b:  xor    %edi,%edi
         : 639   ./elf/dl-version.c:194
    0.00 :   1650d:  xor    %edx,%edx
    0.00 :   1650f:  mov    %rbx,%rsi
    0.00 :   16512:  call   2060 <_dl_signal_exception@plt>
         : 643   ./elf/dl-version.c:190
    0.00 :   16517:  mov    0x235a2(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   1651e:  mov    (%rax),%rsi
    0.00 :   16521:  lea    0x175fb(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   16528:  test   %rsi,%rsi
    0.00 :   1652b:  cmove  %rax,%rsi
    0.00 :   1652f:  jmp    164f2 <_dl_check_map_versions+0x702>
         : 650   match_symbol():
         : 651   ./elf/dl-version.c:87
    0.00 :   16531:  lea    0x1b058(%rip),%rcx        # 31590 <__PRETTY_FUNCTION__.0>
    0.00 :   16538:  mov    $0x57,%edx
    0.00 :   1653d:  lea    0x17c96(%rip),%rsi        # 2e1da <_sys_errnameidx+0x8da>
    0.00 :   16544:  lea    0x17cab(%rip),%rdi        # 2e1f6 <_sys_errnameidx+0x8f6>
    0.00 :   1654b:  call   1e460 <__GI___assert_fail>
         : 657   _dl_check_map_versions():
         : 658   ./elf/dl-version.c:277
    0.00 :   16550:  mov    0x8(%r15),%rsi
         : 660   ./elf/dl-version.c:276
    0.00 :   16554:  cmpb   $0x0,(%rsi)
    0.00 :   16557:  jne    16571 <_dl_check_map_versions+0x781>
         : 663   ./elf/dl-version.c:277
    0.00 :   16559:  mov    0x23560(%rip),%rax        # 39ac0 <_dl_argv>
    0.00 :   16560:  mov    (%rax),%rsi
    0.00 :   16563:  lea    0x175b9(%rip),%rax        # 2db23 <_sys_errnameidx+0x223>
    0.00 :   1656a:  test   %rsi,%rsi
    0.00 :   1656d:  cmove  %rax,%rsi
         : 669   ./elf/dl-version.c:276 (discriminator 2)
    0.00 :   16571:  lea    0x70(%rsp),%rbx
    0.00 :   16576:  lea    0x1afeb(%rip),%rdx        # 31568 <__PRETTY_FUNCTION__.0+0x3a8>
    0.00 :   1657d:  mov    %rbx,%rdi
    0.00 :   16580:  call   4aa0 <_dl_exception_create>
         : 674   ./elf/dl-version.c:279 (discriminator 2)
    0.00 :   16585:  mov    $0xc,%edi
         : 676   ./elf/dl-version.c:280 (discriminator 2)
    0.00 :   1658a:  jmp    1650d <_dl_check_map_versions+0x71d>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000003d5f0 <read_alias_file>:
         : 6     read_alias_file():
         : 7     ./intl/localealias.c:211
    0.00 :   3d5f0:  push   %rbp
         : 9     ./intl/localealias.c:217
    0.00 :   3d5f1:  movslq %esi,%rdx
         : 11    ./intl/localealias.c:211
    0.00 :   3d5f4:  mov    %rsp,%rbp
    0.00 :   3d5f7:  push   %r15
    0.00 :   3d5f9:  push   %r14
    0.00 :   3d5fb:  push   %r13
    0.00 :   3d5fd:  push   %r12
    0.00 :   3d5ff:  push   %rbx
    0.00 :   3d600:  sub    $0x1f8,%rsp
    0.00 :   3d607:  mov    %fs:0x28,%rax
    0.00 :   3d610:  mov    %rax,-0x38(%rbp)
    0.00 :   3d614:  xor    %eax,%eax
         : 22    ./intl/localealias.c:217
    0.00 :   3d616:  lea    0x25(%rdx),%rax
    0.00 :   3d61a:  mov    %rsp,%rsi
    0.00 :   3d61d:  mov    %rax,%rcx
    0.00 :   3d620:  and    $0xfffffffffffff000,%rax
    0.00 :   3d626:  sub    %rax,%rsi
    0.00 :   3d629:  and    $0xfffffffffffffff0,%rcx
    0.00 :   3d62d:  cmp    %rsi,%rsp
    0.00 :   3d630:  je     3d647 <read_alias_file+0x57>
    0.00 :   3d632:  sub    $0x1000,%rsp
    0.00 :   3d639:  orq    $0x0,0xff8(%rsp)
    0.00 :   3d642:  cmp    %rsi,%rsp
    0.00 :   3d645:  jne    3d632 <read_alias_file+0x42>
    0.00 :   3d647:  and    $0xfff,%ecx
    0.00 :   3d64d:  sub    %rcx,%rsp
    0.00 :   3d650:  test   %rcx,%rcx
    0.00 :   3d653:  jne    3da77 <read_alias_file+0x487>
    0.00 :   3d659:  lea    0xf(%rsp),%r12
         : 40    ./intl/localealias.c:219
    0.00 :   3d65e:  mov    %rdi,%rsi
         : 42    ./intl/localealias.c:217
    0.00 :   3d661:  and    $0xfffffffffffffff0,%r12
         : 44    ./intl/localealias.c:219
    0.00 :   3d665:  mov    %r12,%rdi
    0.00 :   3d668:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   3d66d:  mov    0x19fb24(%rip),%rdx        # 1dd198 <aliasfile.0>
         : 48    ./intl/localealias.c:229
    0.00 :   3d674:  lea    0x19a9d9(%rip),%rsi        # 1d8054 <__PRETTY_FUNCTION__.0+0x7b>
    0.00 :   3d67b:  mov    %r12,%rdi
         : 51    ./intl/localealias.c:219
    0.00 :   3d67e:  mov    %rdx,(%rax)
    0.00 :   3d681:  mov    0x19fb19(%rip),%edx        # 1dd1a0 <aliasfile.0+0x8>
    0.00 :   3d687:  mov    %edx,0x8(%rax)
    0.00 :   3d68a:  movzwl 0x19fb13(%rip),%edx        # 1dd1a4 <aliasfile.0+0xc>
    0.00 :   3d691:  mov    %dx,0xc(%rax)
         : 57    ./intl/localealias.c:229
    0.00 :   3d695:  call   7f630 <_IO_fopen@@GLIBC_2.2.5>
    0.00 :   3d69a:  mov    %rax,%r15
         : 60    ./intl/localealias.c:234
    0.00 :   3d69d:  test   %rax,%rax
    0.00 :   3d6a0:  je     3da82 <read_alias_file+0x492>
         : 63    ./intl/localealias.c:239
    0.00 :   3d6a6:  mov    (%rax),%eax
    0.00 :   3d6a8:  lea    -0x1d0(%rbp),%rbx
         : 66    ./intl/localealias.c:242
    0.00 :   3d6af:  movq   $0x0,-0x1d8(%rbp)
         : 68    ./intl/localealias.c:239
    0.00 :   3d6ba:  mov    %eax,%edx
    0.00 :   3d6bc:  or     $0x80,%dh
    0.00 :   3d6bf:  mov    %edx,(%r15)
         : 72    ./intl/localealias.c:243
    0.00 :   3d6c2:  test   $0x10,%al
    0.00 :   3d6c4:  jne    3dad5 <read_alias_file+0x4e5>
    0.00 :   3d6ca:  nopw   0x0(%rax,%rax,1)
         : 76    ./intl/localealias.c:258
    0.00 :   3d6d0:  mov    %r15,%rdx
    0.00 :   3d6d3:  mov    $0x190,%esi
    0.00 :   3d6d8:  mov    %rbx,%rdi
    0.00 :   3d6db:  call   8a2f0 <fgets_unlocked>
    0.00 :   3d6e0:  test   %rax,%rax
    0.00 :   3d6e3:  je     3d743 <read_alias_file+0x153>
         : 83    ./intl/localealias.c:263
    0.00 :   3d6e5:  mov    $0xa,%esi
    0.00 :   3d6ea:  mov    %rbx,%rdi
         : 86    ./intl/localealias.c:265
    0.00 :   3d6ed:  mov    %rbx,%r12
         : 88    ./intl/localealias.c:263
    0.00 :   3d6f0:  call   28600 <*ABS*+0xa8260@plt>
         : 90    ./intl/localealias.c:267
    0.00 :   3d6f5:  movzbl -0x1d0(%rbp),%edx
         : 92    ./intl/localealias.c:263
    0.00 :   3d6fc:  mov    %rax,%rcx
         : 94    ./intl/localealias.c:267
    0.00 :   3d6ff:  mov    0x1dc6f2(%rip),%rax        # 219df8 <_DYNAMIC+0x238>
    0.00 :   3d706:  mov    %fs:(%rax),%rsi
    0.00 :   3d70a:  mov    %rdx,%rax
    0.00 :   3d70d:  testb  $0x20,0x1(%rsi,%rdx,2)
    0.00 :   3d712:  je     3d72c <read_alias_file+0x13c>
    0.00 :   3d714:  nopl   0x0(%rax)
    0.00 :   3d718:  movzbl 0x1(%r12),%edx
         : 102   ./intl/localealias.c:268
    0.00 :   3d71e:  add    $0x1,%r12
         : 104   ./intl/localealias.c:267
    0.00 :   3d722:  mov    %rdx,%rax
    0.00 :   3d725:  testb  $0x20,0x1(%rsi,%rdx,2)
    0.00 :   3d72a:  jne    3d718 <read_alias_file+0x128>
         : 108   ./intl/localealias.c:271
    0.00 :   3d72c:  test   %al,%al
    0.00 :   3d72e:  je     3d738 <read_alias_file+0x148>
    0.00 :   3d730:  cmp    $0x23,%al
    0.00 :   3d732:  jne    3d7d0 <read_alias_file+0x1e0>
         : 113   ./intl/localealias.c:372
    0.00 :   3d738:  test   %rcx,%rcx
    0.00 :   3d73b:  je     3d7b2 <read_alias_file+0x1c2>
         : 116   ./intl/localealias.c:243
    0.00 :   3d73d:  testb  $0x10,(%r15)
    0.00 :   3d741:  je     3d6d0 <read_alias_file+0xe0>
         : 119   ./intl/localealias.c:384
    0.00 :   3d743:  mov    %r15,%rdi
    0.00 :   3d746:  call   7ec70 <_IO_fclose@@GLIBC_2.2.5>
         : 122   ./intl/localealias.c:386
    0.00 :   3d74b:  cmpq   $0x0,-0x1d8(%rbp)
    0.00 :   3d753:  je     3d774 <read_alias_file+0x184>
         : 125   ./intl/localealias.c:387
    0.00 :   3d755:  mov    0x1de674(%rip),%rsi        # 21bdd0 <nmap>
    0.00 :   3d75c:  mov    0x1de13d(%rip),%rdi        # 21b8a0 <map>
    0.00 :   3d763:  mov    $0x10,%edx
    0.00 :   3d768:  lea    -0x19f(%rip),%rcx        # 3d5d0 <alias_compare>
    0.00 :   3d76f:  call   44b60 <qsort>
         : 131   ./intl/localealias.c:391
    0.00 :   3d774:  mov    -0x38(%rbp),%rax
    0.00 :   3d778:  sub    %fs:0x28,%rax
    0.00 :   3d781:  jne    3dae2 <read_alias_file+0x4f2>
    0.00 :   3d787:  mov    -0x1d8(%rbp),%rax
    0.00 :   3d78e:  lea    -0x28(%rbp),%rsp
    0.00 :   3d792:  pop    %rbx
    0.00 :   3d793:  pop    %r12
    0.00 :   3d795:  pop    %r13
    0.00 :   3d797:  pop    %r14
    0.00 :   3d799:  pop    %r15
    0.00 :   3d79b:  pop    %rbp
    0.00 :   3d79c:  ret
    0.00 :   3d79d:  nopl   (%rax)
         : 145   ./intl/localealias.c:378
    0.00 :   3d7a0:  mov    $0xa,%esi
    0.00 :   3d7a5:  mov    %rbx,%rdi
    0.00 :   3d7a8:  call   28600 <*ABS*+0xa8260@plt>
    0.00 :   3d7ad:  test   %rax,%rax
    0.00 :   3d7b0:  jne    3d73d <read_alias_file+0x14d>
         : 151   ./intl/localealias.c:374
    0.00 :   3d7b2:  mov    %r15,%rdx
    0.00 :   3d7b5:  mov    $0x190,%esi
    0.00 :   3d7ba:  mov    %rbx,%rdi
    0.00 :   3d7bd:  call   8a2f0 <fgets_unlocked>
    0.00 :   3d7c2:  test   %rax,%rax
    0.00 :   3d7c5:  jne    3d7a0 <read_alias_file+0x1b0>
    0.00 :   3d7c7:  jmp    3d73d <read_alias_file+0x14d>
    0.00 :   3d7cc:  nopl   0x0(%rax)
         : 160   ./intl/localealias.c:274
    0.00 :   3d7d0:  movzbl 0x1(%r12),%eax
         : 162   ./intl/localealias.c:273
    0.00 :   3d7d6:  lea    0x1(%r12),%r13
         : 164   ./intl/localealias.c:274
    0.00 :   3d7db:  test   %al,%al
    0.00 :   3d7dd:  jne    3d7ec <read_alias_file+0x1fc>
    0.00 :   3d7df:  jmp    3d805 <read_alias_file+0x215>
    0.00 :   3d7e1:  nopl   0x0(%rax)
    0.00 :   3d7e8:  test   %al,%al
    0.00 :   3d7ea:  je     3d805 <read_alias_file+0x215>
    0.00 :   3d7ec:  movzbl %al,%edx
    0.00 :   3d7ef:  mov    %r13,%rdi
    0.00 :   3d7f2:  movzbl 0x1(%r13),%eax
         : 174   ./intl/localealias.c:275
    0.00 :   3d7f7:  add    $0x1,%r13
         : 176   ./intl/localealias.c:274
    0.00 :   3d7fb:  testb  $0x20,0x1(%rsi,%rdx,2)
    0.00 :   3d800:  je     3d7e8 <read_alias_file+0x1f8>
         : 179   ./intl/localealias.c:278
    0.00 :   3d802:  movb   $0x0,(%rdi)
         : 181   ./intl/localealias.c:281
    0.00 :   3d805:  movzbl %al,%edx
    0.00 :   3d808:  testb  $0x20,0x1(%rsi,%rdx,2)
    0.00 :   3d80d:  je     3d823 <read_alias_file+0x233>
    0.00 :   3d80f:  nop
    0.00 :   3d810:  movzbl 0x1(%r13),%edx
         : 187   ./intl/localealias.c:282
    0.00 :   3d815:  add    $0x1,%r13
         : 189   ./intl/localealias.c:281
    0.00 :   3d819:  mov    %rdx,%rax
    0.00 :   3d81c:  testb  $0x20,0x1(%rsi,%rdx,2)
    0.00 :   3d821:  jne    3d810 <read_alias_file+0x220>
         : 193   ./intl/localealias.c:284
    0.00 :   3d823:  test   %al,%al
    0.00 :   3d825:  je     3d738 <read_alias_file+0x148>
         : 196   ./intl/localealias.c:287
    0.00 :   3d82b:  movzbl 0x1(%r13),%eax
         : 198   ./intl/localealias.c:286
    0.00 :   3d830:  lea    0x1(%r13),%rdx
         : 200   ./intl/localealias.c:287
    0.00 :   3d834:  test   %al,%al
    0.00 :   3d836:  jne    3d84c <read_alias_file+0x25c>
    0.00 :   3d838:  jmp    3d866 <read_alias_file+0x276>
    0.00 :   3d83a:  nopw   0x0(%rax,%rax,1)
    0.00 :   3d840:  movzbl 0x1(%rdx),%eax
         : 206   ./intl/localealias.c:288
    0.00 :   3d844:  add    $0x1,%rdx
         : 208   ./intl/localealias.c:287
    0.00 :   3d848:  test   %al,%al
    0.00 :   3d84a:  je     3d866 <read_alias_file+0x276>
    0.00 :   3d84c:  movzbl %al,%edi
    0.00 :   3d84f:  testb  $0x20,0x1(%rsi,%rdi,2)
  100.00 :   3d854:  je     3d840 <read_alias_file+0x250>
         : 214   ./intl/localealias.c:290
    0.00 :   3d856:  cmp    $0xa,%al
    0.00 :   3d858:  jne    3da62 <read_alias_file+0x472>
         : 217   ./intl/localealias.c:295
    0.00 :   3d85e:  mov    $0xa00,%eax
    0.00 :   3d863:  mov    %ax,(%rdx)
         : 220   ./intl/localealias.c:312
    0.00 :   3d866:  mov    0x1de563(%rip),%rdi        # 21bdd0 <nmap>
    0.00 :   3d86d:  mov    0x1de554(%rip),%rax        # 21bdc8 <maxmap>
    0.00 :   3d874:  mov    %rdi,-0x1e0(%rbp)
    0.00 :   3d87b:  cmp    %rax,%rdi
    0.00 :   3d87e:  jae    3da1c <read_alias_file+0x42c>
         : 226   ./intl/localealias.c:316
    0.00 :   3d884:  mov    %r12,%rdi
    0.00 :   3d887:  mov    %rcx,-0x1f8(%rbp)
    0.00 :   3d88e:  call   28490 <*ABS*+0xa86a0@plt>
         : 230   ./intl/localealias.c:317
    0.00 :   3d893:  mov    %r13,%rdi
         : 232   ./intl/localealias.c:316
    0.00 :   3d896:  lea    0x1(%rax),%rdx
    0.00 :   3d89a:  mov    %rdx,-0x1e8(%rbp)
         : 235   ./intl/localealias.c:317
    0.00 :   3d8a1:  call   28490 <*ABS*+0xa86a0@plt>
         : 237   ./intl/localealias.c:319
    0.00 :   3d8a6:  mov    -0x1e8(%rbp),%rdx
    0.00 :   3d8ad:  mov    0x1de52c(%rip),%r11        # 21bde0 <string_space_act>
         : 240   ./intl/localealias.c:317
    0.00 :   3d8b4:  lea    0x1(%rax),%r10
         : 242   ./intl/localealias.c:333
    0.00 :   3d8b8:  mov    0x1ddfe9(%rip),%r9        # 21b8a8 <string_space>
         : 244   ./intl/localealias.c:343
    0.00 :   3d8bf:  mov    0x1ddfda(%rip),%r14        # 21b8a0 <map>
         : 246   ./intl/localealias.c:319
    0.00 :   3d8c6:  lea    (%r11,%rdx,1),%rax
    0.00 :   3d8ca:  mov    %rax,-0x1e8(%rbp)
    0.00 :   3d8d1:  add    %r10,%rax
    0.00 :   3d8d4:  mov    %rax,%rcx
    0.00 :   3d8d7:  mov    %rax,-0x1f0(%rbp)
    0.00 :   3d8de:  mov    0x1de4f3(%rip),%rax        # 21bdd8 <string_space_max>
    0.00 :   3d8e5:  cmp    %rax,%rcx
    0.00 :   3d8e8:  mov    -0x1f8(%rbp),%rcx
    0.00 :   3d8ef:  jbe    3d992 <read_alias_file+0x3a2>
         : 256   ./intl/localealias.c:332
    0.00 :   3d8f5:  mov    $0x400,%edi
         : 258   ./intl/localealias.c:331
    0.00 :   3d8fa:  lea    (%rdx,%r10,1),%rsi
    0.00 :   3d8fe:  mov    %r11,-0x220(%rbp)
         : 261   ./intl/localealias.c:332
    0.00 :   3d905:  cmp    %rdi,%rsi
    0.00 :   3d908:  mov    %rcx,-0x218(%rbp)
    0.00 :   3d90f:  cmovb  %rdi,%rsi
         : 265   ./intl/localealias.c:333
    0.00 :   3d913:  mov    %r9,%rdi
         : 267   ./intl/localealias.c:331
    0.00 :   3d916:  mov    %r10,-0x210(%rbp)
    0.00 :   3d91d:  mov    %rdx,-0x208(%rbp)
         : 270   ./intl/localealias.c:330
    0.00 :   3d924:  lea    (%rsi,%rax,1),%r8
         : 272   ./intl/localealias.c:333
    0.00 :   3d928:  mov    %r9,-0x1f8(%rbp)
    0.00 :   3d92f:  mov    %r8,%rsi
    0.00 :   3d932:  mov    %r8,-0x200(%rbp)
    0.00 :   3d939:  call   283b0 <realloc@plt>
         : 277   ./intl/localealias.c:334
    0.00 :   3d93e:  test   %rax,%rax
    0.00 :   3d941:  je     3d743 <read_alias_file+0x153>
         : 280   ./intl/localealias.c:337
    0.00 :   3d947:  mov    -0x1f8(%rbp),%r9
         : 282   ./intl/localealias.c:343
    0.00 :   3d94e:  mov    0x1ddf4b(%rip),%r14        # 21b8a0 <map>
         : 284   ./intl/localealias.c:337
    0.00 :   3d955:  mov    -0x200(%rbp),%r8
    0.00 :   3d95c:  mov    -0x208(%rbp),%rdx
    0.00 :   3d963:  cmp    %r9,%rax
    0.00 :   3d966:  mov    -0x210(%rbp),%r10
    0.00 :   3d96d:  mov    -0x218(%rbp),%rcx
    0.00 :   3d974:  mov    -0x220(%rbp),%r11
    0.00 :   3d97b:  jne    3da92 <read_alias_file+0x4a2>
         : 292   ./intl/localealias.c:348
    0.00 :   3d981:  mov    %rax,0x1ddf20(%rip)        # 21b8a8 <string_space>
         : 294   ./intl/localealias.c:349
    0.00 :   3d988:  mov    %rax,%r9
    0.00 :   3d98b:  mov    %r8,0x1de446(%rip)        # 21bdd8 <string_space_max>
         : 297   ./intl/localealias.c:352
    0.00 :   3d992:  mov    -0x1e0(%rbp),%rax
         : 299   ./intl/localealias.c:353
    0.00 :   3d999:  lea    (%r9,%r11,1),%rdi
    0.00 :   3d99d:  mov    %r12,%rsi
    0.00 :   3d9a0:  mov    %rcx,-0x200(%rbp)
         : 303   ./intl/localealias.c:352
    0.00 :   3d9a7:  mov    %r10,-0x208(%rbp)
    0.00 :   3d9ae:  shl    $0x4,%rax
         : 306   ./intl/localealias.c:353
    0.00 :   3d9b2:  mov    %r9,-0x1f8(%rbp)
         : 308   ./intl/localealias.c:352
    0.00 :   3d9b9:  add    %rax,%r14
         : 310   ./intl/localealias.c:353
    0.00 :   3d9bc:  call   28620 <*ABS*+0xa9c10@plt>
         : 312   ./intl/localealias.c:358
    0.00 :   3d9c1:  mov    -0x1e8(%rbp),%rdi
    0.00 :   3d9c8:  mov    -0x1f8(%rbp),%r9
    0.00 :   3d9cf:  mov    %r13,%rsi
         : 316   ./intl/localealias.c:352
    0.00 :   3d9d2:  mov    %rax,(%r14)
         : 318   ./intl/localealias.c:358
    0.00 :   3d9d5:  mov    -0x208(%rbp),%rdx
    0.00 :   3d9dc:  add    %r9,%rdi
    0.00 :   3d9df:  call   28620 <*ABS*+0xa9c10@plt>
         : 322   ./intl/localealias.c:364
    0.00 :   3d9e4:  mov    -0x1e0(%rbp),%r13
         : 324   ./intl/localealias.c:360
    0.00 :   3d9eb:  mov    -0x1f0(%rbp),%rcx
         : 326   ./intl/localealias.c:365
    0.00 :   3d9f2:  addq   $0x1,-0x1d8(%rbp)
         : 328   ./intl/localealias.c:364
    0.00 :   3d9fa:  add    $0x1,%r13
         : 330   ./intl/localealias.c:360
    0.00 :   3d9fe:  mov    %rcx,0x1de3db(%rip)        # 21bde0 <string_space_act>
         : 332   ./intl/localealias.c:365
    0.00 :   3da05:  mov    -0x200(%rbp),%rcx
         : 334   ./intl/localealias.c:357
    0.00 :   3da0c:  mov    %rax,0x8(%r14)
         : 336   ./intl/localealias.c:364
    0.00 :   3da10:  mov    %r13,0x1de3b9(%rip)        # 21bdd0 <nmap>
         : 338   ./intl/localealias.c:365
    0.00 :   3da17:  jmp    3d738 <read_alias_file+0x148>
         : 340   extend_alias_table():
         : 341   ./intl/localealias.c:400
    0.00 :   3da1c:  test   %rax,%rax
    0.00 :   3da1f:  jne    3da6a <read_alias_file+0x47a>
    0.00 :   3da21:  mov    $0x640,%esi
    0.00 :   3da26:  mov    $0x64,%r14d
         : 346   ./intl/localealias.c:401
    0.00 :   3da2c:  mov    0x1dde6d(%rip),%rdi        # 21b8a0 <map>
    0.00 :   3da33:  mov    %rcx,-0x1e8(%rbp)
    0.00 :   3da3a:  call   283b0 <realloc@plt>
         : 350   ./intl/localealias.c:403
    0.00 :   3da3f:  test   %rax,%rax
    0.00 :   3da42:  je     3d743 <read_alias_file+0x153>
         : 353   ./intl/localealias.c:407
    0.00 :   3da48:  mov    %rax,0x1dde51(%rip)        # 21b8a0 <map>
         : 355   ./intl/localealias.c:408
    0.00 :   3da4f:  mov    -0x1e8(%rbp),%rcx
    0.00 :   3da56:  mov    %r14,0x1de36b(%rip)        # 21bdc8 <maxmap>
    0.00 :   3da5d:  jmp    3d884 <read_alias_file+0x294>
         : 359   read_alias_file():
         : 360   ./intl/localealias.c:299
    0.00 :   3da62:  movb   $0x0,(%rdx)
    0.00 :   3da65:  jmp    3d866 <read_alias_file+0x276>
         : 363   extend_alias_table():
         : 364   ./intl/localealias.c:400
    0.00 :   3da6a:  lea    (%rax,%rax,1),%r14
         : 366   ./intl/localealias.c:401
    0.00 :   3da6e:  shl    $0x5,%rax
    0.00 :   3da72:  mov    %rax,%rsi
    0.00 :   3da75:  jmp    3da2c <read_alias_file+0x43c>
         : 370   read_alias_file():
         : 371   ./intl/localealias.c:217
    0.00 :   3da77:  orq    $0x0,-0x8(%rsp,%rcx,1)
    0.00 :   3da7d:  jmp    3d659 <read_alias_file+0x69>
         : 374   ./intl/localealias.c:235
    0.00 :   3da82:  movq   $0x0,-0x1d8(%rbp)
    0.00 :   3da8d:  jmp    3d774 <read_alias_file+0x184>
         : 377   ./intl/localealias.c:341
    0.00 :   3da92:  mov    -0x1e0(%rbp),%rdi
    0.00 :   3da99:  test   %rdi,%rdi
    0.00 :   3da9c:  je     3d981 <read_alias_file+0x391>
         : 381   ./intl/localealias.c:343
    0.00 :   3daa2:  mov    %rax,%rsi
    0.00 :   3daa5:  shl    $0x4,%rdi
    0.00 :   3daa9:  sub    %r9,%rsi
    0.00 :   3daac:  add    %r14,%rdi
    0.00 :   3daaf:  movq   %rsi,%xmm1
    0.00 :   3dab4:  mov    %r14,%rsi
    0.00 :   3dab7:  punpcklqdq %xmm1,%xmm1
         : 389   ./intl/localealias.c:343 (discriminator 3)
    0.00 :   3dabb:  movdqu (%rsi),%xmm0
    0.00 :   3dabf:  add    $0x10,%rsi
    0.00 :   3dac3:  paddq  %xmm1,%xmm0
    0.00 :   3dac7:  movups %xmm0,-0x10(%rsi)
         : 394   ./intl/localealias.c:341 (discriminator 3)
    0.00 :   3dacb:  cmp    %rdi,%rsi
    0.00 :   3dace:  jne    3dabb <read_alias_file+0x4cb>
    0.00 :   3dad0:  jmp    3d981 <read_alias_file+0x391>
         : 398   ./intl/localealias.c:384
    0.00 :   3dad5:  mov    %r15,%rdi
    0.00 :   3dad8:  call   7ec70 <_IO_fclose@@GLIBC_2.2.5>
         : 401   ./intl/localealias.c:386
    0.00 :   3dadd:  jmp    3d774 <read_alias_file+0x184>
         : 403   ./intl/localealias.c:391
    0.00 :   3dae2:  call   136550 <__stack_chk_fail>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000378f0 <_nl_intern_locale_data>:
         : 6     _nl_intern_locale_data():
         : 7     ./locale/loadlocale.c:68
    0.00 :   378f0:  endbr64
    0.00 :   378f4:  push   %r15
    0.00 :   378f6:  push   %r14
    0.00 :   378f8:  push   %r13
    0.00 :   378fa:  push   %r12
    0.00 :   378fc:  push   %rbp
    0.00 :   378fd:  push   %rbx
    0.00 :   378fe:  sub    $0x8,%rsp
         : 16    ./locale/loadlocale.c:78
    0.00 :   37902:  cmp    $0x7,%rdx
    0.00 :   37906:  jbe    379f8 <_nl_intern_locale_data+0x108>
    0.00 :   3790c:  mov    %rdx,%r12
    0.00 :   3790f:  mov    %edi,%ebp
         : 21    ./locale/loadlocale.c:79
    0.00 :   37911:  mov    (%rsi),%edx
    0.00 :   37913:  mov    %rsi,%rbx
    0.00 :   37916:  mov    $0x20051017,%eax
    0.00 :   3791b:  cmp    $0x3,%edi
    0.00 :   3791e:  je     37931 <_nl_intern_locale_data+0x41>
         : 27    ./locale/loadlocale.c:79 (discriminator 2)
    0.00 :   37920:  mov    %edi,%eax
    0.00 :   37922:  mov    $0x20090720,%ecx
    0.00 :   37927:  xor    $0x20031115,%eax
    0.00 :   3792c:  test   %edi,%edi
    0.00 :   3792e:  cmove  %ecx,%eax
         : 33    ./locale/loadlocale.c:79 (discriminator 8)
    0.00 :   37931:  cmp    %eax,%edx
    0.00 :   37933:  jne    379f8 <_nl_intern_locale_data+0x108>
         : 36    ./locale/loadlocale.c:86
    0.00 :   37939:  movslq %ebp,%r14
    0.00 :   3793c:  lea    0x18623d(%rip),%rax        # 1bdb80 <_nl_category_num_items>
    0.00 :   37943:  mov    0x4(%rbx),%r13d
    0.00 :   37947:  cmp    (%rax,%r14,8),%r13
    0.00 :   3794b:  jb     379f8 <_nl_intern_locale_data+0x108>
         : 42    ./locale/loadlocale.c:89
    0.00 :   37951:  lea    0x8(,%r13,4),%rax
         : 44    ./locale/loadlocale.c:88
    0.00 :   37959:  cmp    %r12,%rax
    0.00 :   3795c:  jae    379f8 <_nl_intern_locale_data+0x108>
         : 47    ./locale/loadlocale.c:97
    0.00 :   37962:  lea    0x40(,%r13,8),%rdi
    0.00 :   3796a:  call   28380 <malloc@plt>
    0.00 :   3796f:  mov    %rax,%r8
         : 51    ./locale/loadlocale.c:99
    0.00 :   37972:  test   %rax,%rax
    0.00 :   37975:  je     37a09 <_nl_intern_locale_data+0x119>
         : 54    ./locale/loadlocale.c:102
    0.00 :   3797b:  mov    %rbx,0x8(%rax)
         : 56    ./locale/loadlocale.c:103
    0.00 :   3797f:  mov    %r12,0x10(%rax)
         : 58    ./locale/loadlocale.c:105
    0.00 :   37983:  movq   $0x0,0x20(%rax)
         : 60    ./locale/loadlocale.c:104
    0.00 :   3798b:  movq   $0x0,0x28(%rax)
         : 62    ./locale/loadlocale.c:106
    0.00 :   37993:  movq   $0x0,0x30(%rax)
         : 64    ./locale/loadlocale.c:108
    0.00 :   3799b:  mov    %r13d,0x38(%rax)
         : 66    ./locale/loadlocale.c:109
    0.00 :   3799f:  test   %r13,%r13
    0.00 :   379a2:  je     37a09 <_nl_intern_locale_data+0x119>
    0.00 :   379a4:  xor    %eax,%eax
         : 70    ./locale/loadlocale.c:150
    0.00 :   379a6:  lea    0x1dfdf3(%rip),%r10        # 2177a0 <_nl_value_types>
         : 72    ./locale/loadlocale.c:123
    0.00 :   379ad:  mov    %ebp,%r9d
    0.00 :   379b0:  lea    0x185b89(%rip),%rdi        # 1bd540 <codeset_idx.2+0x40>
         : 75    ./locale/loadlocale.c:111
    0.00 :   379b7:  mov    0x8(%rbx,%rax,4),%edx
    0.00 :   379bb:  mov    %rdx,%rsi
         : 78    ./locale/loadlocale.c:112
    0.00 :   379be:  cmp    %rdx,%r12
    0.00 :   379c1:  jb     379f0 <_nl_intern_locale_data+0x100>
         : 81    ./locale/loadlocale.c:123
    0.00 :   379c3:  cmp    $0xc,%ebp
    0.00 :   379c6:  ja     37b10 <_nl_intern_locale_data+0x220>
    0.00 :   379cc:  movslq (%rdi,%r9,4),%rcx
    0.00 :   379d0:  add    %rdi,%rcx
    0.00 :   379d3:  notrack jmp *%rcx
    0.00 :   379d6:  cs nopw 0x0(%rax,%rax,1)
         : 88    ./locale/loadlocale.c:140
    0.00 :   379e0:  cmp    $0x1,%rax
    0.00 :   379e4:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   379e6:  cs nopw 0x0(%rax,%rax,1)
         : 92    ./locale/loadlocale.c:115
    0.00 :   379f0:  mov    %r8,%rdi
    0.00 :   379f3:  call   28370 <free@plt>
         : 95    ./locale/loadlocale.c:116
    0.00 :   379f8:  mov    0x1e2411(%rip),%rax        # 219e10 <_DYNAMIC+0x250>
         : 97    ./locale/loadlocale.c:117
    0.00 :   379ff:  xor    %r8d,%r8d
         : 99    ./locale/loadlocale.c:116
    0.00 :   37a02:  movl   $0x16,%fs:(%rax)
         : 101   ./locale/loadlocale.c:162
    0.00 :   37a09:  add    $0x8,%rsp
    0.00 :   37a0d:  mov    %r8,%rax
    0.00 :   37a10:  pop    %rbx
    0.00 :   37a11:  pop    %rbp
    0.00 :   37a12:  pop    %r12
    0.00 :   37a14:  pop    %r13
    0.00 :   37a16:  pop    %r14
    0.00 :   37a18:  pop    %r15
    0.00 :   37a1a:  ret
    0.00 :   37a1b:  nopl   0x0(%rax,%rax,1)
         : 112   ./locale/loadlocale.c:139
    0.00 :   37a20:  cmp    $0x4,%rax
    0.00 :   37a24:  ja     379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37a26:  cs nopw 0x0(%rax,%rax,1)
         : 116   ./locale/loadlocale.c:150
    0.00 :   37a30:  mov    (%r10,%r14,8),%rcx
    0.00 :   37a34:  cmpl   $0x5,(%rcx,%rax,4)
  100.00 :   37a38:  je     37a70 <_nl_intern_locale_data+0x180>
         : 120   ./locale/loadlocale.c:151
    0.00 :   37a3a:  add    %rbx,%rdx
    0.00 :   37a3d:  mov    %rdx,0x40(%r8,%rax,8)
         : 123   ./locale/loadlocale.c:109 (discriminator 2)
    0.00 :   37a42:  add    $0x1,%rax
    0.00 :   37a46:  cmp    %rax,%r13
    0.00 :   37a49:  jne    379b7 <_nl_intern_locale_data+0xc7>
    0.00 :   37a4f:  jmp    37a09 <_nl_intern_locale_data+0x119>
    0.00 :   37a51:  nopl   0x0(%rax)
         : 129   ./locale/loadlocale.c:138
    0.00 :   37a58:  cmp    $0xc,%rax
    0.00 :   37a5c:  ja     379f0 <_nl_intern_locale_data+0x100>
         : 132   ./locale/loadlocale.c:150
    0.00 :   37a5e:  mov    (%r10,%r14,8),%rcx
    0.00 :   37a62:  cmpl   $0x5,(%rcx,%rax,4)
    0.00 :   37a66:  jne    37a3a <_nl_intern_locale_data+0x14a>
    0.00 :   37a68:  nopl   0x0(%rax,%rax,1)
         : 137   ./locale/loadlocale.c:154
    0.00 :   37a70:  and    $0x3,%esi
    0.00 :   37a73:  jne    379f0 <_nl_intern_locale_data+0x100>
         : 140   ./locale/loadlocale.c:156
    0.00 :   37a79:  mov    (%rbx,%rdx,1),%edx
    0.00 :   37a7c:  mov    %edx,0x40(%r8,%rax,8)
    0.00 :   37a81:  jmp    37a42 <_nl_intern_locale_data+0x152>
    0.00 :   37a83:  nopl   0x0(%rax,%rax,1)
         : 145   ./locale/loadlocale.c:137
    0.00 :   37a88:  cmp    $0x6,%rax
    0.00 :   37a8c:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37a8e:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37a93:  nopl   0x0(%rax,%rax,1)
         : 150   ./locale/loadlocale.c:136
    0.00 :   37a98:  cmp    $0x2,%rax
    0.00 :   37a9c:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37a9e:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37aa3:  nopl   0x0(%rax,%rax,1)
         : 155   ./locale/loadlocale.c:141
    0.00 :   37aa8:  cmp    $0xf,%rax
    0.00 :   37aac:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37aae:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37ab3:  nopl   0x0(%rax,%rax,1)
         : 160   ./locale/loadlocale.c:134
    0.00 :   37ab8:  cmp    $0x2d,%rax
    0.00 :   37abc:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37ac2:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37ac7:  nopw   0x0(%rax,%rax,1)
         : 165   ./locale/loadlocale.c:133
    0.00 :   37ad0:  cmp    $0x12,%rax
    0.00 :   37ad4:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37ada:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37adf:  nop
         : 170   ./locale/loadlocale.c:132
    0.00 :   37ae0:  cmp    $0x9e,%rax
    0.00 :   37ae6:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37aec:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37af1:  nopl   0x0(%rax)
         : 175   ./locale/loadlocale.c:131
    0.00 :   37af8:  cmp    $0x5,%rax
    0.00 :   37afc:  jbe    37a30 <_nl_intern_locale_data+0x140>
    0.00 :   37b02:  jmp    379f0 <_nl_intern_locale_data+0x100>
    0.00 :   37b07:  nopw   0x0(%rax,%rax,1)
         : 180   ./locale/loadlocale.c:143
    0.00 :   37b10:  test   %ebp,%ebp
    0.00 :   37b12:  jne    37b23 <_nl_intern_locale_data+0x233>
         : 183   ./locale/loadlocale.c:147
    0.00 :   37b14:  cmp    $0x55,%rax
    0.00 :   37b18:  ja     37a3a <_nl_intern_locale_data+0x14a>
    0.00 :   37b1e:  jmp    37a30 <_nl_intern_locale_data+0x140>
         : 187   ./locale/loadlocale.c:143 (discriminator 1)
    0.00 :   37b23:  lea    0x1a99c6(%rip),%rcx        # 1e14f0 <__PRETTY_FUNCTION__.0>
    0.00 :   37b2a:  mov    $0x8f,%edx
    0.00 :   37b2f:  lea    0x1a07ad(%rip),%rsi        # 1d82e3 <dir_suffix+0x2>
    0.00 :   37b36:  lea    0x1a07b3(%rip),%rdi        # 1d82f0 <dir_suffix+0xf>
    0.00 :   37b3d:  call   39e50 <__assert_fail>
 Percent |	Source code & Disassembly of bash for cycles:u (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .plt.sec:
         :
         : 5     0000000000030610 <malloc@plt>:
    0.00 :   30610:  endbr64
  100.00 :   30614:  bnd jmp *0x11c4a5(%rip)        # 14cac0 <malloc@GLIBC_2.2.5>
    0.00 :   3061b:  nopl   0x0(%rax,%rax,1)
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3      Disassembly of section .text:
         :
         : 5      0000000000198940 <__strcmp_avx2>:
         : 6      __strcmp_avx2():
         : 7      ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:83
    0.00 :   198940: endbr64
         : 9      ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:106
    0.00 :   198944: mov    %edi,%eax
         : 11     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:107
    0.00 :   198946: xor    %edx,%edx
         : 13     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:109
    0.00 :   198948: vpxor  %xmm7,%xmm7,%xmm7
         : 15     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:110
    0.00 :   19894c: or     %esi,%eax
         : 17     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:111
    0.00 :   19894e: and    $0xfff,%eax
         : 19     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:112
    0.00 :   198953: cmp    $0xf80,%eax
         : 21     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:113
    0.00 :   198958: jg     198cb0 <__strcmp_avx2+0x370>
         : 23     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:115
    0.00 :   19895e: vmovdqu (%rdi),%ymm1
         : 25     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:116
    0.00 :   198962: vpcmpeqb (%rsi),%ymm1,%ymm0
         : 27     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:117
    0.00 :   198966: vpminub %ymm1,%ymm0,%ymm0
         : 29     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:118
    0.00 :   19896a: vpcmpeqb %ymm7,%ymm0,%ymm0
         : 31     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:119
    0.00 :   19896e: vpmovmskb %ymm0,%ecx
         : 33     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:120
    0.00 :   198972: test   %ecx,%ecx
         : 35     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:121
    0.00 :   198974: je     1989f0 <__strcmp_avx2+0xb0>
         : 37     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:122
    0.00 :   198976: tzcnt  %ecx,%edx
         : 39     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:140
  100.00 :   19897a: movzbl (%rdi,%rdx,1),%eax
         : 41     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:141
    0.00 :   19897e: movzbl (%rsi,%rdx,1),%edx
         : 43     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:142
    0.00 :   198982: sub    %edx,%eax
         : 45     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:145
    0.00 :   198984: vzeroupper
    0.00 :   198987: ret
    0.00 :   198988: nopl   0x0(%rax,%rax,1)
         : 49     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:149
    0.00 :   198990: tzcnt  %ecx,%edx
         : 51     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:173
    0.00 :   198994: movzbl 0x20(%rdi,%rdx,1),%eax
         : 53     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:174
    0.00 :   198999: movzbl 0x20(%rsi,%rdx,1),%edx
         : 55     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:175
    0.00 :   19899e: sub    %edx,%eax
         : 57     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:178
    0.00 :   1989a0: vzeroupper
    0.00 :   1989a3: ret
    0.00 :   1989a4: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1989af: nop
         : 62     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:182
    0.00 :   1989b0: tzcnt  %ecx,%edx
         : 64     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:206
    0.00 :   1989b4: movzbl 0x40(%rdi,%rdx,1),%eax
         : 66     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:207
    0.00 :   1989b9: movzbl 0x40(%rsi,%rdx,1),%edx
         : 68     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:208
    0.00 :   1989be: sub    %edx,%eax
         : 70     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:211
    0.00 :   1989c0: vzeroupper
    0.00 :   1989c3: ret
    0.00 :   1989c4: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1989cf: nop
         : 75     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:215
    0.00 :   1989d0: tzcnt  %ecx,%edx
         : 77     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:239
    0.00 :   1989d4: movzbl 0x60(%rdi,%rdx,1),%eax
         : 79     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:240
    0.00 :   1989d9: movzbl 0x60(%rsi,%rdx,1),%edx
         : 81     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:241
    0.00 :   1989de: sub    %edx,%eax
         : 83     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:244
    0.00 :   1989e0: vzeroupper
    0.00 :   1989e3: ret
    0.00 :   1989e4: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   1989ef: nop
         : 88     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:248
    0.00 :   1989f0: vmovdqu 0x20(%rdi),%ymm6
         : 90     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:249
    0.00 :   1989f5: vpcmpeqb 0x20(%rsi),%ymm6,%ymm3
         : 92     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:250
    0.00 :   1989fa: vpminub %ymm6,%ymm3,%ymm3
         : 94     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:251
    0.00 :   1989fe: vpcmpeqb %ymm7,%ymm3,%ymm3
         : 96     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:252
    0.00 :   198a02: vpmovmskb %ymm3,%ecx
         : 98     ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:253
    0.00 :   198a06: test   %ecx,%ecx
         : 100    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:254
    0.00 :   198a08: jne    198990 <__strcmp_avx2+0x50>
         : 102    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:255
    0.00 :   198a0a: vmovdqu 0x40(%rdi),%ymm5
         : 104    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:256
    0.00 :   198a0f: vmovdqu 0x60(%rdi),%ymm4
         : 106    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:257
    0.00 :   198a14: vmovdqu 0x60(%rsi),%ymm0
         : 108    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:258
    0.00 :   198a19: vpcmpeqb 0x40(%rsi),%ymm5,%ymm2
         : 110    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:259
    0.00 :   198a1e: vpminub %ymm5,%ymm2,%ymm2
         : 112    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:260
    0.00 :   198a22: vpcmpeqb %ymm4,%ymm0,%ymm0
         : 114    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:261
    0.00 :   198a26: vpcmpeqb %ymm7,%ymm2,%ymm2
         : 116    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:262
    0.00 :   198a2a: vpmovmskb %ymm2,%ecx
         : 118    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:263
    0.00 :   198a2e: test   %ecx,%ecx
         : 120    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:264
    0.00 :   198a30: jne    1989b0 <__strcmp_avx2+0x70>
         : 122    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:265
    0.00 :   198a36: vpminub %ymm4,%ymm0,%ymm0
         : 124    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:266
    0.00 :   198a3a: vpcmpeqb %ymm7,%ymm0,%ymm0
         : 126    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:267
    0.00 :   198a3e: vpmovmskb %ymm0,%ecx
         : 128    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:268
    0.00 :   198a42: test   %ecx,%ecx
         : 130    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:269
    0.00 :   198a44: jne    1989d0 <__strcmp_avx2+0x90>
         : 132    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:271
    0.00 :   198a46: lea    0x80(%rdi),%rdx
         : 134    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:272
    0.00 :   198a4d: mov    $0x1000,%ecx
         : 136    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:274
    0.00 :   198a52: and    $0xffffffffffffff80,%rdx
         : 138    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:275
    0.00 :   198a56: sub    %rdi,%rdx
         : 140    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:276
    0.00 :   198a59: lea    (%rdi,%rdx,1),%rax
         : 142    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:287
    0.00 :   198a5d: add    %rsi,%rdx
         : 144    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:288
    0.00 :   198a60: mov    %rdx,%rsi
         : 146    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:289
    0.00 :   198a63: and    $0xfff,%esi
         : 148    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:291
    0.00 :   198a69: sub    %rsi,%rcx
         : 150    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:293
    0.00 :   198a6c: shr    $0x7,%rcx
         : 152    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:295
    0.00 :   198a70: mov    %ecx,%esi
         : 154    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:296
    0.00 :   198a72: jmp    198a8d <__strcmp_avx2+0x14d>
    0.00 :   198a74: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   198a7f: nop
         : 158    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:306
    0.00 :   198a80: add    $0x80,%rax
         : 160    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:307
    0.00 :   198a86: add    $0x80,%rdx
         : 162    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:309
    0.00 :   198a8d: test   %esi,%esi
         : 164    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:310
    0.00 :   198a8f: lea    -0x1(%esi),%esi
         : 166    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:311
    0.00 :   198a93: je     198b70 <__strcmp_avx2+0x230>
         : 168    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:314
    0.00 :   198a99: vmovdqa (%rax),%ymm0
         : 170    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:315
    0.00 :   198a9d: vmovdqa 0x20(%rax),%ymm3
         : 172    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:316
    0.00 :   198aa2: vpcmpeqb (%rdx),%ymm0,%ymm4
         : 174    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:317
    0.00 :   198aa6: vpcmpeqb 0x20(%rdx),%ymm3,%ymm1
         : 176    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:318
    0.00 :   198aab: vpminub %ymm0,%ymm4,%ymm4
         : 178    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:319
    0.00 :   198aaf: vpminub %ymm3,%ymm1,%ymm1
         : 180    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:320
    0.00 :   198ab3: vmovdqa 0x40(%rax),%ymm2
         : 182    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:321
    0.00 :   198ab8: vpminub %ymm1,%ymm4,%ymm0
         : 184    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:322
    0.00 :   198abc: vmovdqa 0x60(%rax),%ymm3
         : 186    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:323
    0.00 :   198ac1: vpcmpeqb 0x40(%rdx),%ymm2,%ymm5
         : 188    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:324
    0.00 :   198ac6: vpcmpeqb 0x60(%rdx),%ymm3,%ymm6
         : 190    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:325
    0.00 :   198acb: vpminub %ymm2,%ymm5,%ymm5
         : 192    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:326
    0.00 :   198acf: vpminub %ymm3,%ymm6,%ymm6
         : 194    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:327
    0.00 :   198ad3: vpminub %ymm5,%ymm0,%ymm0
         : 196    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:328
    0.00 :   198ad7: vpminub %ymm6,%ymm0,%ymm0
         : 198    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:329
    0.00 :   198adb: vpcmpeqb %ymm7,%ymm0,%ymm0
         : 200    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:335
    0.00 :   198adf: vpmovmskb %ymm0,%ecx
         : 202    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:336
    0.00 :   198ae3: test   %ecx,%ecx
         : 204    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:337
    0.00 :   198ae5: je     198a80 <__strcmp_avx2+0x140>
         : 206    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:338
    0.00 :   198ae7: vpcmpeqb %ymm7,%ymm4,%ymm0
         : 208    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:339
    0.00 :   198aeb: vpmovmskb %ymm0,%edi
         : 210    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:340
    0.00 :   198aef: test   %edi,%edi
         : 212    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:341
    0.00 :   198af1: je     198b10 <__strcmp_avx2+0x1d0>
         : 214    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:342
    0.00 :   198af3: tzcnt  %edi,%ecx
         : 216    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:365
    0.00 :   198af7: movzbl (%rax,%rcx,1),%eax
         : 218    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:366
    0.00 :   198afb: movzbl (%rdx,%rcx,1),%edx
         : 220    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:367
    0.00 :   198aff: sub    %edx,%eax
         : 222    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:370
    0.00 :   198b01: vzeroupper
    0.00 :   198b04: ret
    0.00 :   198b05: data16 cs nopw 0x0(%rax,%rax,1)
         : 226    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:380
    0.00 :   198b10: vpcmpeqb %ymm7,%ymm1,%ymm1
         : 228    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:381
    0.00 :   198b14: vpmovmskb %ymm1,%ecx
         : 230    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:382
    0.00 :   198b18: test   %ecx,%ecx
         : 232    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:383
    0.00 :   198b1a: je     198b30 <__strcmp_avx2+0x1f0>
         : 234    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:384
    0.00 :   198b1c: tzcnt  %ecx,%edi
         : 236    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:408
    0.00 :   198b20: movzbl 0x20(%rax,%rdi,1),%eax
         : 238    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:409
    0.00 :   198b25: movzbl 0x20(%rdx,%rdi,1),%edx
         : 240    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:410
    0.00 :   198b2a: sub    %edx,%eax
         : 242    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:413
    0.00 :   198b2c: vzeroupper
    0.00 :   198b2f: ret
         : 245    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:423
    0.00 :   198b30: vpcmpeqb %ymm7,%ymm5,%ymm5
         : 247    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:424
    0.00 :   198b34: vpmovmskb %ymm5,%ecx
         : 249    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:425
    0.00 :   198b38: test   %ecx,%ecx
         : 251    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:426
    0.00 :   198b3a: je     198b50 <__strcmp_avx2+0x210>
         : 253    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:427
    0.00 :   198b3c: tzcnt  %ecx,%edi
         : 255    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:451
    0.00 :   198b40: movzbl 0x40(%rax,%rdi,1),%eax
         : 257    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:452
    0.00 :   198b45: movzbl 0x40(%rdx,%rdi,1),%edx
         : 259    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:453
    0.00 :   198b4a: sub    %edx,%eax
         : 261    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:456
    0.00 :   198b4c: vzeroupper
    0.00 :   198b4f: ret
         : 264    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:466
    0.00 :   198b50: vpcmpeqb %ymm7,%ymm6,%ymm6
         : 266    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:467
    0.00 :   198b54: vpmovmskb %ymm6,%esi
         : 268    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:468
    0.00 :   198b58: tzcnt  %esi,%ecx
         : 270    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:492
    0.00 :   198b5c: movzbl 0x60(%rax,%rcx,1),%eax
         : 272    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:493
    0.00 :   198b61: movzbl 0x60(%rdx,%rcx,1),%edx
         : 274    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:494
    0.00 :   198b66: sub    %edx,%eax
         : 276    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:497
    0.00 :   198b68: vzeroupper
    0.00 :   198b6b: ret
    0.00 :   198b6c: nopl   0x0(%rax)
         : 280    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:501
    0.00 :   198b70: xor    %r10d,%r10d
         : 282    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:502
    0.00 :   198b73: mov    %rdx,%rcx
         : 284    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:505
    0.00 :   198b76: and    $0x7f,%ecx
         : 286    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:507
    0.00 :   198b79: sub    %rcx,%r10
         : 288    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:515
    0.00 :   198b7c: cmp    $0x40,%ecx
         : 290    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:516
    0.00 :   198b7f: jge    198be0 <__strcmp_avx2+0x2a0>
         : 292    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:518
    0.00 :   198b81: vmovdqu (%rax,%r10,1),%ymm2
         : 294    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:519
    0.00 :   198b87: vmovdqu 0x20(%rax,%r10,1),%ymm3
         : 296    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:520
    0.00 :   198b8e: vpcmpeqb (%rdx,%r10,1),%ymm2,%ymm0
         : 298    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:521
    0.00 :   198b94: vpcmpeqb 0x20(%rdx,%r10,1),%ymm3,%ymm1
         : 300    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:522
    0.00 :   198b9b: vpminub %ymm2,%ymm0,%ymm0
         : 302    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:523
    0.00 :   198b9f: vpminub %ymm3,%ymm1,%ymm1
         : 304    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:524
    0.00 :   198ba3: vpcmpeqb %ymm7,%ymm0,%ymm0
         : 306    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:525
    0.00 :   198ba7: vpcmpeqb %ymm7,%ymm1,%ymm1
         : 308    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:527
    0.00 :   198bab: vpmovmskb %ymm0,%edi
         : 310    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:528
    0.00 :   198baf: vpmovmskb %ymm1,%esi
         : 312    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:530
    0.00 :   198bb3: shl    $0x20,%rsi
         : 314    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:531
    0.00 :   198bb7: xor    %rsi,%rdi
         : 316    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:534
    0.00 :   198bba: shr    %cl,%rdi
         : 318    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:536
    0.00 :   198bbd: test   %rdi,%rdi
         : 320    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:537
    0.00 :   198bc0: je     198be0 <__strcmp_avx2+0x2a0>
         : 322    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:538
    0.00 :   198bc2: tzcnt  %rdi,%rcx
         : 324    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:561
    0.00 :   198bc7: movzbl (%rax,%rcx,1),%eax
         : 326    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:562
    0.00 :   198bcb: movzbl (%rdx,%rcx,1),%edx
         : 328    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:563
    0.00 :   198bcf: sub    %edx,%eax
         : 330    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:566
    0.00 :   198bd1: vzeroupper
    0.00 :   198bd4: ret
    0.00 :   198bd5: data16 cs nopw 0x0(%rax,%rax,1)
         : 334    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:571
    0.00 :   198be0: vmovdqu 0x40(%rax,%r10,1),%ymm2
         : 336    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:572
    0.00 :   198be7: vmovdqu 0x60(%rax,%r10,1),%ymm3
         : 338    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:573
    0.00 :   198bee: vpcmpeqb 0x40(%rdx,%r10,1),%ymm2,%ymm5
         : 340    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:574
    0.00 :   198bf5: vpminub %ymm2,%ymm5,%ymm5
         : 342    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:575
    0.00 :   198bf9: vpcmpeqb 0x60(%rdx,%r10,1),%ymm3,%ymm6
         : 344    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:576
    0.00 :   198c00: vpcmpeqb %ymm7,%ymm5,%ymm5
         : 346    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:577
    0.00 :   198c04: vpminub %ymm3,%ymm6,%ymm6
         : 348    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:578
    0.00 :   198c08: vpcmpeqb %ymm7,%ymm6,%ymm6
         : 350    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:580
    0.00 :   198c0c: vpmovmskb %ymm5,%edi
         : 352    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:581
    0.00 :   198c10: vpmovmskb %ymm6,%esi
         : 354    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:583
    0.00 :   198c14: shl    $0x20,%rsi
         : 356    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:584
    0.00 :   198c18: xor    %rsi,%rdi
         : 358    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:586
    0.00 :   198c1b: xor    %r8d,%r8d
         : 360    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:588
    0.00 :   198c1e: sub    $0x40,%ecx
         : 362    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:589
    0.00 :   198c21: jle    198c29 <__strcmp_avx2+0x2e9>
         : 364    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:591
    0.00 :   198c23: shr    %cl,%rdi
         : 366    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:593
    0.00 :   198c26: mov    %ecx,%r8d
         : 368    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:597
    0.00 :   198c29: mov    $0x1f,%esi
         : 370    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:599
    0.00 :   198c2e: test   %rdi,%rdi
         : 372    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:606
    0.00 :   198c31: je     198a99 <__strcmp_avx2+0x159>
         : 374    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:608
    0.00 :   198c37: tzcnt  %rdi,%rcx
         : 376    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:609
    0.00 :   198c3c: add    %r10,%rcx
         : 378    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:611
    0.00 :   198c3f: add    %r8,%rcx
         : 380    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:635
    0.00 :   198c42: movzbl 0x40(%rax,%rcx,1),%eax
         : 382    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:636
    0.00 :   198c47: movzbl 0x40(%rdx,%rcx,1),%edx
         : 384    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:637
    0.00 :   198c4c: sub    %edx,%eax
         : 386    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:640
    0.00 :   198c4e: vzeroupper
    0.00 :   198c51: ret
    0.00 :   198c52: data16 cs nopw 0x0(%rax,%rax,1)
    0.00 :   198c5d: nopl   (%rax)
         : 391    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:656
    0.00 :   198c60: sub    %ecx,%eax
         : 393    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:658
    0.00 :   198c62: jne    198c81 <__strcmp_avx2+0x341>
         : 395    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:659
    0.00 :   198c64: add    $0x1,%edx
         : 397    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:660
    0.00 :   198c67: cmp    $0x80,%edx
         : 399    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:661
    0.00 :   198c6d: je     198a46 <__strcmp_avx2+0x106>
         : 401    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:670
    0.00 :   198c73: movzbl (%rdi,%rdx,1),%eax
         : 403    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:671
    0.00 :   198c77: movzbl (%rsi,%rdx,1),%ecx
         : 405    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:674
    0.00 :   198c7b: test   %eax,%eax
         : 407    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:675
    0.00 :   198c7d: jne    198c60 <__strcmp_avx2+0x320>
         : 409    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:678
    0.00 :   198c7f: sub    %ecx,%eax
         : 411    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:682
    0.00 :   198c81: vzeroupper
    0.00 :   198c84: ret
    0.00 :   198c85: data16 cs nopw 0x0(%rax,%rax,1)
         : 415    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:718
    0.00 :   198c90: add    %rdx,%rdi
         : 417    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:719
    0.00 :   198c93: add    %rdx,%rsi
         : 419    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:723
    0.00 :   198c96: tzcnt  %ecx,%edx
         : 421    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:734
    0.00 :   198c9a: movzbl (%rdi,%rdx,1),%eax
         : 423    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:735
    0.00 :   198c9e: movzbl (%rsi,%rdx,1),%edx
         : 425    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:736
    0.00 :   198ca2: sub    %edx,%eax
         : 427    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:738
    0.00 :   198ca4: vzeroupper
    0.00 :   198ca7: ret
    0.00 :   198ca8: nopl   0x0(%rax,%rax,1)
         : 431    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:748
    0.00 :   198cb0: cmp    $0xfe0,%eax
         : 433    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:749
    0.00 :   198cb5: jg     198cde <__strcmp_avx2+0x39e>
         : 435    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:751
    0.00 :   198cb7: vmovdqu (%rdi,%rdx,1),%ymm1
         : 437    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:752
    0.00 :   198cbc: vpcmpeqb (%rsi,%rdx,1),%ymm1,%ymm0
         : 439    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:753
    0.00 :   198cc1: vpminub %ymm1,%ymm0,%ymm0
         : 441    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:754
    0.00 :   198cc5: vpcmpeqb %ymm7,%ymm0,%ymm0
         : 443    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:755
    0.00 :   198cc9: vpmovmskb %ymm0,%ecx
         : 445    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:756
    0.00 :   198ccd: test   %ecx,%ecx
         : 447    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:757
    0.00 :   198ccf: jne    198c90 <__strcmp_avx2+0x350>
         : 449    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:759
    0.00 :   198cd1: add    $0x20,%edx
         : 451    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:761
    0.00 :   198cd4: add    $0x20,%eax
         : 453    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:768
    0.00 :   198cd7: cmp    $0xfe0,%eax
         : 455    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:769
    0.00 :   198cdc: jle    198cb7 <__strcmp_avx2+0x377>
         : 457    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:772
    0.00 :   198cde: cmp    $0xff0,%eax
         : 459    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:773
    0.00 :   198ce3: jg     198d05 <__strcmp_avx2+0x3c5>
         : 461    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:774
    0.00 :   198ce5: vmovdqu (%rdi,%rdx,1),%xmm1
         : 463    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:775
    0.00 :   198cea: vpcmpeqb (%rsi,%rdx,1),%xmm1,%xmm0
         : 465    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:776
    0.00 :   198cef: vpminub %xmm1,%xmm0,%xmm0
         : 467    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:777
    0.00 :   198cf3: vpcmpeqb %xmm7,%xmm0,%xmm0
         : 469    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:778
    0.00 :   198cf7: vpmovmskb %xmm0,%ecx
         : 471    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:779
    0.00 :   198cfb: test   %ecx,%ecx
         : 473    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:780
    0.00 :   198cfd: jne    198c90 <__strcmp_avx2+0x350>
         : 475    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:782
    0.00 :   198cff: add    $0x10,%edx
         : 477    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:784
    0.00 :   198d02: add    $0x10,%eax
         : 479    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:797
    0.00 :   198d05: cmp    $0xff8,%eax
         : 481    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:798
    0.00 :   198d0a: jg     198d3a <__strcmp_avx2+0x3fa>
         : 483    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:799
    0.00 :   198d0c: vmovq  (%rdi,%rdx,1),%xmm1
         : 485    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:800
    0.00 :   198d11: vmovq  (%rsi,%rdx,1),%xmm0
         : 487    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:801
    0.00 :   198d16: vpcmpeqb %xmm0,%xmm1,%xmm0
         : 489    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:802
    0.00 :   198d1a: vpminub %xmm1,%xmm0,%xmm0
         : 491    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:803
    0.00 :   198d1e: vpcmpeqb %xmm7,%xmm0,%xmm0
         : 493    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:804
    0.00 :   198d22: vpmovmskb %xmm0,%ecx
         : 495    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:806
    0.00 :   198d26: and    $0xff,%ecx
         : 497    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:807
    0.00 :   198d2c: test   %ecx,%ecx
         : 499    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:808
    0.00 :   198d2e: jne    198c90 <__strcmp_avx2+0x350>
         : 501    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:810
    0.00 :   198d34: add    $0x8,%edx
         : 503    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:811
    0.00 :   198d37: add    $0x8,%eax
         : 505    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:821
    0.00 :   198d3a: cmp    $0xffc,%eax
         : 507    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:822
    0.00 :   198d3f: jg     198d69 <__strcmp_avx2+0x429>
         : 509    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:823
    0.00 :   198d41: vmovd  (%rdi,%rdx,1),%xmm1
         : 511    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:824
    0.00 :   198d46: vmovd  (%rsi,%rdx,1),%xmm0
         : 513    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:825
    0.00 :   198d4b: vpcmpeqb %xmm0,%xmm1,%xmm0
         : 515    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:826
    0.00 :   198d4f: vpminub %xmm1,%xmm0,%xmm0
         : 517    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:827
    0.00 :   198d53: vpcmpeqb %xmm7,%xmm0,%xmm0
         : 519    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:828
    0.00 :   198d57: vpmovmskb %xmm0,%ecx
         : 521    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:830
    0.00 :   198d5b: and    $0xf,%ecx
         : 523    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:831
    0.00 :   198d5e: test   %ecx,%ecx
         : 525    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:832
    0.00 :   198d60: jne    198c90 <__strcmp_avx2+0x350>
         : 527    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:834
    0.00 :   198d66: add    $0x4,%edx
         : 529    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:853
    0.00 :   198d69: movzbl (%rdi,%rdx,1),%eax
         : 531    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:854
    0.00 :   198d6d: movzbl (%rsi,%rdx,1),%ecx
         : 533    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:856
    0.00 :   198d71: test   %eax,%eax
         : 535    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:857
    0.00 :   198d73: jne    198c60 <__strcmp_avx2+0x320>
         : 537    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:858
    0.00 :   198d79: sub    %ecx,%eax
         : 539    ./string/../sysdeps/x86_64/multiarch/strcmp-avx2.S:859
    0.00 :   198d7b: vzeroupper
    0.00 :   198d7e: ret
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000044360 <msort_with_tmp.part.0>:
         : 6     msort_with_tmp():
         : 7     ./stdlib/msort.c:39
    0.00 :   44360:  push   %r15
    0.00 :   44362:  mov    %rdx,%rax
    0.00 :   44365:  push   %r14
    0.00 :   44367:  push   %r13
    0.00 :   44369:  push   %r12
    0.00 :   4436b:  push   %rbp
         : 14    ./stdlib/msort.c:47
    0.00 :   4436c:  mov    %rdx,%rbp
         : 16    ./stdlib/msort.c:39
    0.00 :   4436f:  push   %rbx
         : 18    ./stdlib/msort.c:47
    0.00 :   44370:  shr    %rbp
         : 20    ./stdlib/msort.c:48
    0.00 :   44373:  sub    %rbp,%rax
    0.00 :   44376:  mov    %rax,%rbx
         : 23    ./stdlib/msort.c:39
    0.00 :   44379:  sub    $0x48,%rsp
         : 25    ./stdlib/msort.c:50
    0.00 :   4437d:  mov    (%rdi),%rcx
         : 27    ./stdlib/msort.c:39
    0.00 :   44380:  mov    %rdi,0x10(%rsp)
         : 29    ./stdlib/msort.c:50
    0.00 :   44385:  imul   %rbp,%rcx
         : 31    ./stdlib/msort.c:39
    0.00 :   44389:  mov    %rsi,0x18(%rsp)
    0.00 :   4438e:  mov    %rdx,0x30(%rsp)
         : 34    ./stdlib/msort.c:50
    0.00 :   44393:  lea    (%rsi,%rcx,1),%r13
         : 36    ./stdlib/msort.c:44
    0.00 :   44397:  cmp    $0x1,%rbp
    0.00 :   4439b:  je     443a5 <msort_with_tmp.part.0+0x45>
    0.00 :   4439d:  mov    %rbp,%rdx
    0.00 :   443a0:  call   44360 <msort_with_tmp.part.0>
    0.00 :   443a5:  cmp    $0x1,%rbx
    0.00 :   443a9:  jbe    444b8 <msort_with_tmp.part.0+0x158>
    0.00 :   443af:  mov    0x10(%rsp),%r14
    0.00 :   443b4:  mov    %rbx,%rdx
    0.00 :   443b7:  mov    %r13,%rsi
    0.00 :   443ba:  mov    %r14,%rdi
    0.00 :   443bd:  call   44360 <msort_with_tmp.part.0>
         : 48    ./stdlib/msort.c:56
    0.00 :   443c2:  mov    (%r14),%rcx
         : 50    ./stdlib/msort.c:55
    0.00 :   443c5:  mov    %r14,%rax
    0.00 :   443c8:  mov    0x20(%r14),%r15
         : 53    ./stdlib/msort.c:59
    0.00 :   443cc:  mov    0x8(%rax),%rax
         : 55    ./stdlib/msort.c:56
    0.00 :   443d0:  mov    %rcx,0x20(%rsp)
         : 57    ./stdlib/msort.c:57
    0.00 :   443d5:  mov    0x10(%r14),%rcx
         : 59    ./stdlib/msort.c:58
    0.00 :   443d9:  mov    0x18(%r14),%r14
         : 61    ./stdlib/msort.c:57
    0.00 :   443dd:  mov    %rcx,(%rsp)
         : 63    ./stdlib/msort.c:59
    0.00 :   443e1:  cmp    $0x2,%rax
    0.00 :   443e5:  je     445df <msort_with_tmp.part.0+0x27f>
    0.00 :   443eb:  ja     44470 <msort_with_tmp.part.0+0x110>
    0.00 :   443f1:  test   %rax,%rax
    0.00 :   443f4:  je     44528 <msort_with_tmp.part.0+0x1c8>
         : 69    ./stdlib/msort.c:49
    0.00 :   443fa:  mov    0x18(%rsp),%r12
    0.00 :   443ff:  nop
         : 72    ./stdlib/msort.c:82
    0.00 :   44400:  mov    (%rsp),%rax
    0.00 :   44404:  mov    %r14,%rdx
    0.00 :   44407:  mov    %r13,%rsi
    0.00 :   4440a:  mov    %r12,%rdi
    0.00 :   4440d:  call   *%rax
    0.00 :   4440f:  test   %eax,%eax
    0.00 :   44411:  jle    44720 <msort_with_tmp.part.0+0x3c0>
         : 80    ./stdlib/msort.c:90
    0.00 :   44417:  mov    0x0(%r13),%rax
         : 82    ./stdlib/msort.c:94
    0.00 :   4441b:  add    $0x8,%r15
         : 84    ./stdlib/msort.c:91
    0.00 :   4441f:  add    $0x8,%r13
         : 86    ./stdlib/msort.c:92
    0.00 :   44423:  mov    %rax,-0x8(%r15)
         : 88    ./stdlib/msort.c:80
    0.00 :   44427:  sub    $0x1,%rbx
    0.00 :   4442b:  jne    44400 <msort_with_tmp.part.0+0xa0>
         : 91    ./stdlib/msort.c:159
    0.00 :   4442d:  mov    0x30(%rsp),%r14
         : 93    ./stdlib/msort.c:158
    0.00 :   44432:  mov    0x20(%rsp),%rdx
    0.00 :   44437:  mov    %r12,%rsi
    0.00 :   4443a:  mov    %r15,%rdi
    0.00 :   4443d:  imul   %rbp,%rdx
    0.00 :   44441:  call   28620 <*ABS*+0xa9c10@plt>
         : 99    ./stdlib/msort.c:159
    0.00 :   44446:  mov    0x20(%rsp),%rdx
    0.00 :   4444b:  mov    0x10(%rsp),%rax
    0.00 :   44450:  mov    0x18(%rsp),%rdi
  100.00 :   44455:  imul   %r14,%rdx
    0.00 :   44459:  mov    0x20(%rax),%rsi
         : 105   ./stdlib/msort.c:160
    0.00 :   4445d:  add    $0x48,%rsp
    0.00 :   44461:  pop    %rbx
    0.00 :   44462:  pop    %rbp
    0.00 :   44463:  pop    %r12
    0.00 :   44465:  pop    %r13
    0.00 :   44467:  pop    %r14
    0.00 :   44469:  pop    %r15
         : 113   ./stdlib/msort.c:159
    0.00 :   4446b:  jmp    28620 <*ABS*+0xa9c10@plt>
         : 115   ./stdlib/msort.c:59
    0.00 :   44470:  cmp    $0x3,%rax
    0.00 :   44474:  jne    44567 <msort_with_tmp.part.0+0x207>
         : 118   ./stdlib/msort.c:121
    0.00 :   4447a:  mov    0x18(%rsp),%r12
    0.00 :   4447f:  nop
         : 121   ./stdlib/msort.c:123
    0.00 :   44480:  mov    0x0(%r13),%rsi
    0.00 :   44484:  mov    (%r12),%rdi
    0.00 :   44488:  mov    %r14,%rdx
    0.00 :   4448b:  mov    (%rsp),%rax
    0.00 :   4448f:  call   *%rax
    0.00 :   44491:  test   %eax,%eax
    0.00 :   44493:  jle    44758 <msort_with_tmp.part.0+0x3f8>
         : 129   ./stdlib/msort.c:131
    0.00 :   44499:  mov    0x0(%r13),%rax
         : 131   ./stdlib/msort.c:135
    0.00 :   4449d:  add    $0x8,%r15
         : 133   ./stdlib/msort.c:132
    0.00 :   444a1:  add    $0x8,%r13
         : 135   ./stdlib/msort.c:133
    0.00 :   444a5:  mov    %rax,-0x8(%r15)
         : 137   ./stdlib/msort.c:121
    0.00 :   444a9:  sub    $0x1,%rbx
    0.00 :   444ad:  jne    44480 <msort_with_tmp.part.0+0x120>
    0.00 :   444af:  jmp    4442d <msort_with_tmp.part.0+0xcd>
    0.00 :   444b4:  nopl   0x0(%rax)
         : 142   ./stdlib/msort.c:55
    0.00 :   444b8:  mov    0x10(%rsp),%rax
         : 144   ./stdlib/msort.c:56
    0.00 :   444bd:  mov    (%rax),%rcx
         : 146   ./stdlib/msort.c:55
    0.00 :   444c0:  mov    0x20(%rax),%r15
         : 148   ./stdlib/msort.c:58
    0.00 :   444c4:  mov    0x18(%rax),%r14
         : 150   ./stdlib/msort.c:56
    0.00 :   444c8:  mov    %rcx,0x20(%rsp)
         : 152   ./stdlib/msort.c:57
    0.00 :   444cd:  mov    0x10(%rax),%rcx
         : 154   ./stdlib/msort.c:59
    0.00 :   444d1:  mov    0x8(%rax),%rax
         : 156   ./stdlib/msort.c:57
    0.00 :   444d5:  mov    %rcx,(%rsp)
         : 158   ./stdlib/msort.c:59
    0.00 :   444d9:  cmp    $0x2,%rax
    0.00 :   444dd:  je     445d6 <msort_with_tmp.part.0+0x276>
    0.00 :   444e3:  ja     44500 <msort_with_tmp.part.0+0x1a0>
    0.00 :   444e5:  test   %rax,%rax
    0.00 :   444e8:  je     44518 <msort_with_tmp.part.0+0x1b8>
         : 164   ./stdlib/msort.c:80
    0.00 :   444ea:  test   %rbx,%rbx
    0.00 :   444ed:  jne    443fa <msort_with_tmp.part.0+0x9a>
    0.00 :   444f3:  mov    0x18(%rsp),%r12
         : 168   ./stdlib/msort.c:47
    0.00 :   444f8:  mov    %rbp,%r14
    0.00 :   444fb:  jmp    44432 <msort_with_tmp.part.0+0xd2>
         : 171   ./stdlib/msort.c:59
    0.00 :   44500:  cmp    $0x3,%rax
    0.00 :   44504:  jne    44562 <msort_with_tmp.part.0+0x202>
         : 174   ./stdlib/msort.c:121
    0.00 :   44506:  test   %rbx,%rbx
    0.00 :   44509:  je     444f3 <msort_with_tmp.part.0+0x193>
    0.00 :   4450b:  mov    $0x1,%ebx
    0.00 :   44510:  jmp    4447a <msort_with_tmp.part.0+0x11a>
    0.00 :   44515:  nopl   (%rax)
         : 180   ./stdlib/msort.c:62
    0.00 :   44518:  test   %rbx,%rbx
    0.00 :   4451b:  je     444f3 <msort_with_tmp.part.0+0x193>
    0.00 :   4451d:  mov    $0x1,%ebx
    0.00 :   44522:  nopw   0x0(%rax,%rax,1)
    0.00 :   44528:  mov    0x18(%rsp),%r12
    0.00 :   4452d:  nopl   (%rax)
         : 187   ./stdlib/msort.c:64
    0.00 :   44530:  mov    (%rsp),%rax
    0.00 :   44534:  mov    %r14,%rdx
    0.00 :   44537:  mov    %r13,%rsi
    0.00 :   4453a:  mov    %r12,%rdi
    0.00 :   4453d:  call   *%rax
    0.00 :   4453f:  test   %eax,%eax
    0.00 :   44541:  jle    44700 <msort_with_tmp.part.0+0x3a0>
         : 195   ./stdlib/msort.c:72
    0.00 :   44547:  mov    0x0(%r13),%eax
         : 197   ./stdlib/msort.c:76
    0.00 :   4454b:  add    $0x4,%r15
         : 199   ./stdlib/msort.c:73
    0.00 :   4454f:  add    $0x4,%r13
         : 201   ./stdlib/msort.c:74
    0.00 :   44553:  mov    %eax,-0x4(%r15)
         : 203   ./stdlib/msort.c:62
    0.00 :   44557:  sub    $0x1,%rbx
    0.00 :   4455b:  jne    44530 <msort_with_tmp.part.0+0x1d0>
    0.00 :   4455d:  jmp    4442d <msort_with_tmp.part.0+0xcd>
         : 207   ./stdlib/msort.c:139
    0.00 :   44562:  test   %rbx,%rbx
    0.00 :   44565:  je     444f3 <msort_with_tmp.part.0+0x193>
         : 210   ./stdlib/msort.c:121
    0.00 :   44567:  mov    %r14,0x8(%rsp)
    0.00 :   4456c:  mov    0x18(%rsp),%r12
    0.00 :   44571:  mov    0x20(%rsp),%r14
    0.00 :   44576:  jmp    445a7 <msort_with_tmp.part.0+0x247>
    0.00 :   44578:  nopl   0x0(%rax,%rax,1)
         : 216   ./stdlib/msort.c:149
    0.00 :   44580:  mov    %r13,%rsi
    0.00 :   44583:  mov    %r15,%rdi
         : 219   ./stdlib/msort.c:150
    0.00 :   44586:  add    %r14,%r13
         : 221   ./stdlib/msort.c:151
    0.00 :   44589:  sub    $0x1,%rbx
         : 223   ./stdlib/msort.c:149
    0.00 :   4458d:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   44592:  mov    %rax,%r15
         : 226   ./stdlib/msort.c:139
    0.00 :   44595:  test   %rbp,%rbp
    0.00 :   44598:  je     446c3 <msort_with_tmp.part.0+0x363>
    0.00 :   4459e:  test   %rbx,%rbx
    0.00 :   445a1:  je     446c3 <msort_with_tmp.part.0+0x363>
         : 231   ./stdlib/msort.c:141
    0.00 :   445a7:  mov    0x8(%rsp),%rdx
    0.00 :   445ac:  mov    (%rsp),%rax
    0.00 :   445b0:  mov    %r13,%rsi
    0.00 :   445b3:  mov    %r12,%rdi
    0.00 :   445b6:  call   *%rax
         : 237   ./stdlib/msort.c:143
    0.00 :   445b8:  mov    %r14,%rdx
         : 239   ./stdlib/msort.c:141
    0.00 :   445bb:  test   %eax,%eax
    0.00 :   445bd:  jg     44580 <msort_with_tmp.part.0+0x220>
         : 242   ./stdlib/msort.c:143
    0.00 :   445bf:  mov    %r12,%rsi
    0.00 :   445c2:  mov    %r15,%rdi
         : 245   ./stdlib/msort.c:144
    0.00 :   445c5:  add    %r14,%r12
         : 247   ./stdlib/msort.c:145
    0.00 :   445c8:  sub    $0x1,%rbp
         : 249   ./stdlib/msort.c:143
    0.00 :   445cc:  call   283e0 <*ABS*+0xa97d0@plt>
    0.00 :   445d1:  mov    %rax,%r15
         : 252   ./stdlib/msort.c:145
    0.00 :   445d4:  jmp    44595 <msort_with_tmp.part.0+0x235>
         : 254   ./stdlib/msort.c:98
    0.00 :   445d6:  test   %rbx,%rbx
    0.00 :   445d9:  je     444f3 <msort_with_tmp.part.0+0x193>
         : 257   ./stdlib/msort.c:49
    0.00 :   445df:  mov    0x18(%rsp),%r12
    0.00 :   445e4:  mov    %r14,0x38(%rsp)
    0.00 :   445e9:  mov    %rbx,%r8
    0.00 :   445ec:  mov    %r13,%rbx
    0.00 :   445ef:  mov    0x20(%rsp),%r14
    0.00 :   445f4:  mov    %rbp,0x28(%rsp)
    0.00 :   445f9:  mov    %r12,%rbp
    0.00 :   445fc:  mov    %r15,%r12
    0.00 :   445ff:  nop
    0.00 :   44600:  mov    %r8,0x8(%rsp)
         : 268   ./stdlib/msort.c:104
    0.00 :   44605:  mov    0x38(%rsp),%rdx
    0.00 :   4460a:  mov    %rbx,%rsi
    0.00 :   4460d:  mov    %rbp,%rdi
    0.00 :   44610:  mov    (%rsp),%rax
    0.00 :   44614:  mov    %r15,%r13
         : 274   ./stdlib/msort.c:103
    0.00 :   44617:  add    %r14,%r15
         : 276   ./stdlib/msort.c:104
    0.00 :   4461a:  call   *%rax
    0.00 :   4461c:  mov    0x8(%rsp),%r8
    0.00 :   44621:  test   %eax,%eax
    0.00 :   44623:  jle    44740 <msort_with_tmp.part.0+0x3e0>
         : 281   ./stdlib/msort.c:114
    0.00 :   44629:  mov    %rbx,%rdx
    0.00 :   4462c:  sub    $0x1,%r8
         : 284   ./stdlib/msort.c:113
    0.00 :   44630:  add    %r14,%rbx
         : 286   ./stdlib/msort.c:116
    0.00 :   44633:  cmp    %r12,%r15
    0.00 :   44636:  jbe    446a4 <msort_with_tmp.part.0+0x344>
    0.00 :   44638:  mov    %r15,%r9
    0.00 :   4463b:  lea    0x8(%rdx),%rax
    0.00 :   4463f:  sub    %r12,%r9
    0.00 :   44642:  sub    $0x1,%r9
    0.00 :   44646:  cmp    %r12,%rax
    0.00 :   44649:  je     446e4 <msort_with_tmp.part.0+0x384>
    0.00 :   4464f:  cmp    $0x17,%r9
    0.00 :   44653:  jbe    446e4 <msort_with_tmp.part.0+0x384>
    0.00 :   44659:  shr    $0x3,%r9
    0.00 :   4465d:  xor    %eax,%eax
    0.00 :   4465f:  add    $0x1,%r9
    0.00 :   44663:  mov    %r9,%r10
    0.00 :   44666:  shr    %r10
    0.00 :   44669:  shl    $0x4,%r10
    0.00 :   4466d:  nopl   (%rax)
         : 304   ./stdlib/msort.c:117
    0.00 :   44670:  movdqu (%rdx,%rax,1),%xmm0
    0.00 :   44675:  movups %xmm0,0x0(%r13,%rax,1)
         : 307   ./stdlib/msort.c:116
    0.00 :   4467b:  add    $0x10,%rax
    0.00 :   4467f:  cmp    %rax,%r10
    0.00 :   44682:  jne    44670 <msort_with_tmp.part.0+0x310>
    0.00 :   44684:  mov    %r9,%rax
    0.00 :   44687:  and    $0xfffffffffffffffe,%rax
    0.00 :   4468b:  lea    0x0(,%rax,8),%r10
    0.00 :   44693:  add    %r10,%rdx
    0.00 :   44696:  add    %r13,%r10
    0.00 :   44699:  cmp    %r9,%rax
    0.00 :   4469c:  je     446a4 <msort_with_tmp.part.0+0x344>
         : 318   ./stdlib/msort.c:117
    0.00 :   4469e:  mov    (%rdx),%rax
    0.00 :   446a1:  mov    %rax,(%r10)
         : 321   ./stdlib/msort.c:98
    0.00 :   446a4:  add    %r14,%r12
    0.00 :   446a7:  cmpq   $0x0,0x28(%rsp)
    0.00 :   446ad:  je     446b8 <msort_with_tmp.part.0+0x358>
    0.00 :   446af:  test   %r8,%r8
    0.00 :   446b2:  jne    44600 <msort_with_tmp.part.0+0x2a0>
    0.00 :   446b8:  mov    %rbp,%r12
    0.00 :   446bb:  mov    0x28(%rsp),%rbp
    0.00 :   446c0:  mov    %r8,%rbx
         : 330   ./stdlib/msort.c:159
    0.00 :   446c3:  mov    0x30(%rsp),%r14
    0.00 :   446c8:  sub    %rbx,%r14
         : 333   ./stdlib/msort.c:157
    0.00 :   446cb:  test   %rbp,%rbp
    0.00 :   446ce:  je     44446 <msort_with_tmp.part.0+0xe6>
    0.00 :   446d4:  jmp    44432 <msort_with_tmp.part.0+0xd2>
    0.00 :   446d9:  nopl   0x0(%rax)
    0.00 :   446e0:  add    $0x8,%rax
         : 339   ./stdlib/msort.c:117
    0.00 :   446e4:  mov    -0x8(%rax),%rdx
    0.00 :   446e8:  add    $0x8,%r13
    0.00 :   446ec:  mov    %rdx,-0x8(%r13)
         : 343   ./stdlib/msort.c:116
    0.00 :   446f0:  cmp    %r13,%r15
    0.00 :   446f3:  ja     446e0 <msort_with_tmp.part.0+0x380>
    0.00 :   446f5:  jmp    446a4 <msort_with_tmp.part.0+0x344>
    0.00 :   446f7:  nopw   0x0(%rax,%rax,1)
         : 348   ./stdlib/msort.c:66
    0.00 :   44700:  mov    (%r12),%eax
         : 350   ./stdlib/msort.c:76
    0.00 :   44704:  add    $0x4,%r15
         : 352   ./stdlib/msort.c:67
    0.00 :   44708:  add    $0x4,%r12
         : 354   ./stdlib/msort.c:68
    0.00 :   4470c:  mov    %eax,-0x4(%r15)
         : 356   ./stdlib/msort.c:62
    0.00 :   44710:  sub    $0x1,%rbp
    0.00 :   44714:  jne    44530 <msort_with_tmp.part.0+0x1d0>
    0.00 :   4471a:  jmp    446c3 <msort_with_tmp.part.0+0x363>
    0.00 :   4471c:  nopl   0x0(%rax)
         : 361   ./stdlib/msort.c:84
    0.00 :   44720:  mov    (%r12),%rax
         : 363   ./stdlib/msort.c:94
    0.00 :   44724:  add    $0x8,%r15
         : 365   ./stdlib/msort.c:85
    0.00 :   44728:  add    $0x8,%r12
         : 367   ./stdlib/msort.c:86
    0.00 :   4472c:  mov    %rax,-0x8(%r15)
         : 369   ./stdlib/msort.c:80
    0.00 :   44730:  sub    $0x1,%rbp
    0.00 :   44734:  jne    44400 <msort_with_tmp.part.0+0xa0>
    0.00 :   4473a:  jmp    446c3 <msort_with_tmp.part.0+0x363>
    0.00 :   4473c:  nopl   0x0(%rax)
         : 374   ./stdlib/msort.c:108
    0.00 :   44740:  mov    %rbp,%rdx
    0.00 :   44743:  subq   $0x1,0x28(%rsp)
         : 377   ./stdlib/msort.c:107
    0.00 :   44749:  add    %r14,%rbp
    0.00 :   4474c:  jmp    44633 <msort_with_tmp.part.0+0x2d3>
    0.00 :   44751:  nopl   0x0(%rax)
         : 381   ./stdlib/msort.c:125
    0.00 :   44758:  mov    (%r12),%rax
         : 383   ./stdlib/msort.c:135
    0.00 :   4475c:  add    $0x8,%r15
         : 385   ./stdlib/msort.c:126
    0.00 :   44760:  add    $0x8,%r12
         : 387   ./stdlib/msort.c:127
    0.00 :   44764:  mov    %rax,-0x8(%r15)
         : 389   ./stdlib/msort.c:121
    0.00 :   44768:  sub    $0x1,%rbp
    0.00 :   4476c:  jne    44480 <msort_with_tmp.part.0+0x120>
    0.00 :   44772:  jmp    446c3 <msort_with_tmp.part.0+0x363>
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000044b70 <getenv>:
         : 6     __GI_getenv():
         : 7     ./stdlib/getenv.c:34
    0.00 :   44b70:  endbr64
    0.00 :   44b74:  push   %r15
    0.00 :   44b76:  push   %r14
    0.00 :   44b78:  push   %r13
    0.00 :   44b7a:  push   %r12
    0.00 :   44b7c:  push   %rbp
    0.00 :   44b7d:  push   %rbx
    0.00 :   44b7e:  sub    $0x8,%rsp
         : 16    ./stdlib/getenv.c:38
    0.00 :   44b82:  mov    0x1d542f(%rip),%rax        # 219fb8 <__environ@@GLIBC_2.2.5-0x8248>
    0.00 :   44b89:  mov    (%rax),%rbx
    0.00 :   44b8c:  test   %rbx,%rbx
    0.00 :   44b8f:  je     44c50 <getenv+0xe0>
         : 21    ./stdlib/getenv.c:38 (discriminator 1)
    0.00 :   44b95:  movzbl (%rdi),%eax
    0.00 :   44b98:  mov    %rdi,%r15
    0.00 :   44b9b:  test   %al,%al
    0.00 :   44b9d:  je     44c50 <getenv+0xe0>
         : 26    ./stdlib/getenv.c:41
    0.00 :   44ba3:  cmpb   $0x0,0x1(%rdi)
    0.00 :   44ba7:  jne    44bf0 <getenv+0x80>
         : 29    ./stdlib/getenv.c:51
    0.00 :   44ba9:  mov    (%rbx),%r12
         : 31    ./stdlib/getenv.c:47
    0.00 :   44bac:  or     $0x3d,%ah
         : 33    ./stdlib/getenv.c:51
    0.00 :   44baf:  test   %r12,%r12
    0.00 :   44bb2:  jne    44bcd <getenv+0x5d>
    0.00 :   44bb4:  jmp    44bd8 <getenv+0x68>
    0.00 :   44bb6:  cs nopw 0x0(%rax,%rax,1)
         : 38    ./stdlib/getenv.c:51 (discriminator 2)
    0.00 :   44bc0:  mov    0x8(%rbx),%r12
    0.00 :   44bc4:  add    $0x8,%rbx
    0.00 :   44bc8:  test   %r12,%r12
    0.00 :   44bcb:  je     44bd8 <getenv+0x68>
         : 43    ./stdlib/getenv.c:59
    0.00 :   44bcd:  cmp    (%r12),%ax
    0.00 :   44bd2:  jne    44bc0 <getenv+0x50>
         : 46    ./stdlib/getenv.c:60
    0.00 :   44bd4:  add    $0x2,%r12
         : 48    ./stdlib/getenv.c:91
    0.00 :   44bd8:  add    $0x8,%rsp
    0.00 :   44bdc:  mov    %r12,%rax
    0.00 :   44bdf:  pop    %rbx
    0.00 :   44be0:  pop    %rbp
    0.00 :   44be1:  pop    %r12
    0.00 :   44be3:  pop    %r13
    0.00 :   44be5:  pop    %r14
    0.00 :   44be7:  pop    %r15
    0.00 :   44be9:  ret
    0.00 :   44bea:  nopw   0x0(%rax,%rax,1)
         : 59    ./stdlib/getenv.c:65
    0.00 :   44bf0:  call   28490 <*ABS*+0xa86a0@plt>
         : 61    ./stdlib/getenv.c:75
    0.00 :   44bf5:  mov    (%rbx),%r12
         : 63    ./stdlib/getenv.c:67
    0.00 :   44bf8:  movzwl (%r15),%ebp
         : 65    ./stdlib/getenv.c:73
    0.00 :   44bfc:  add    $0x2,%r15
         : 67    ./stdlib/getenv.c:65
    0.00 :   44c00:  mov    %rax,%r13
         : 69    ./stdlib/getenv.c:72
    0.00 :   44c03:  lea    -0x2(%rax),%r14
         : 71    ./stdlib/getenv.c:75
    0.00 :   44c07:  test   %r12,%r12
    0.00 :   44c0a:  jne    44c1d <getenv+0xad>
    0.00 :   44c0c:  jmp    44bd8 <getenv+0x68>
    0.00 :   44c0e:  xchg   %ax,%ax
         : 76    ./stdlib/getenv.c:75 (discriminator 2)
    0.00 :   44c10:  mov    0x8(%rbx),%r12
    0.00 :   44c14:  add    $0x8,%rbx
    0.00 :   44c18:  test   %r12,%r12
    0.00 :   44c1b:  je     44bd8 <getenv+0x68>
         : 81    ./stdlib/getenv.c:84
    0.00 :   44c1d:  cmp    (%r12),%bp
  100.00 :   44c22:  jne    44c10 <getenv+0xa0>
         : 84    ./stdlib/getenv.c:84 (discriminator 1)
    0.00 :   44c24:  lea    0x2(%r12),%rdi
    0.00 :   44c29:  mov    %r14,%rdx
    0.00 :   44c2c:  mov    %r15,%rsi
    0.00 :   44c2f:  call   28590 <*ABS*+0xa8830@plt>
    0.00 :   44c34:  test   %eax,%eax
    0.00 :   44c36:  jne    44c10 <getenv+0xa0>
         : 91    ./stdlib/getenv.c:85
    0.00 :   44c38:  cmpb   $0x3d,(%r12,%r13,1)
    0.00 :   44c3d:  jne    44c10 <getenv+0xa0>
         : 94    ./stdlib/getenv.c:86
    0.00 :   44c3f:  lea    0x1(%r12,%r13,1),%r12
    0.00 :   44c44:  jmp    44bd8 <getenv+0x68>
    0.00 :   44c46:  cs nopw 0x0(%rax,%rax,1)
         : 98    ./stdlib/getenv.c:39
    0.00 :   44c50:  xor    %r12d,%r12d
    0.00 :   44c53:  jmp    44bd8 <getenv+0x68>
 Percent |	Source code & Disassembly of libtinfo.so.6.3 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000012df0 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226>:
    0.00 :   12df0:  endbr64
    0.00 :   12df4:  push   %r12
    0.00 :   12df6:  push   %rbp
    0.00 :   12df7:  mov    %rdx,%rbp
    0.00 :   12dfa:  push   %rbx
    0.00 :   12dfb:  mov    %rsi,%rbx
    0.00 :   12dfe:  test   %rdi,%rdi
    0.00 :   12e01:  je     12ec8 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xd8>
    0.00 :   12e07:  cmpq   $0x0,0x30(%rdi)
    0.00 :   12e0c:  je     12ec8 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xd8>
    0.00 :   12e12:  cmpb   $0x0,(%rbx)
  100.00 :   12e15:  je     12ed9 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xe9>
    0.00 :   12e1b:  cmpb   $0x0,0x1(%rbx)
    0.00 :   12e1f:  je     12ed9 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xe9>
    0.00 :   12e25:  test   %rdi,%rdi
    0.00 :   12e28:  je     12ee8 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xf8>
    0.00 :   12e2e:  mov    0x30(%rdi),%r12
    0.00 :   12e32:  test   %r12,%r12
    0.00 :   12e35:  je     12ee8 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xf8>
    0.00 :   12e3b:  mov    $0x1,%edx
    0.00 :   12e40:  mov    $0x2,%esi
    0.00 :   12e45:  mov    %rbx,%rdi
    0.00 :   12e48:  call   10340 <_nc_find_type_entry@@NCURSES6_TINFO_5.0.19991023>
    0.00 :   12e4d:  test   %rax,%rax
    0.00 :   12e50:  je     12f00 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x110>
    0.00 :   12e56:  movswq 0xc(%rax),%rcx
    0.00 :   12e5b:  test   %ecx,%ecx
    0.00 :   12e5d:  js     12ed9 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xe9>
    0.00 :   12e5f:  mov    0x2d0(%r12),%rax
    0.00 :   12e67:  mov    (%rax,%rcx,8),%r12
    0.00 :   12e6b:  lea    -0x1(%r12),%rax
    0.00 :   12e70:  cmp    $0xfffffffffffffffd,%rax
    0.00 :   12e74:  ja     12edc <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xec>
    0.00 :   12e76:  mov    0x1e153(%rip),%rax        # 30fd0 <cur_term@@NCURSES6_TINFO_5.0.19991023-0x640>
    0.00 :   12e7d:  mov    (%rax),%rax
    0.00 :   12e80:  mov    0x2d0(%rax),%rax
    0.00 :   12e87:  cmp    0x138(%rax),%r12
    0.00 :   12e8e:  je     12f90 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x1a0>
    0.00 :   12e94:  test   %rbp,%rbp
    0.00 :   12e97:  je     12edc <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xec>
    0.00 :   12e99:  mov    0x0(%rbp),%rdi
    0.00 :   12e9d:  test   %rdi,%rdi
    0.00 :   12ea0:  je     12edc <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xec>
    0.00 :   12ea2:  mov    %r12,%rsi
    0.00 :   12ea5:  call   e440 <strcpy@plt>
    0.00 :   12eaa:  mov    0x0(%rbp),%r12
    0.00 :   12eae:  mov    %r12,%rdi
    0.00 :   12eb1:  call   e4b0 <strlen@plt>
    0.00 :   12eb6:  lea    0x1(%r12,%rax,1),%rax
    0.00 :   12ebb:  mov    %rax,0x0(%rbp)
    0.00 :   12ebf:  jmp    12edc <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xec>
    0.00 :   12ec1:  nopl   0x0(%rax)
    0.00 :   12ec8:  mov    0x1e101(%rip),%rax        # 30fd0 <cur_term@@NCURSES6_TINFO_5.0.19991023-0x640>
    0.00 :   12ecf:  cmpq   $0x0,(%rax)
    0.00 :   12ed3:  jne    12e12 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x22>
    0.00 :   12ed9:  xor    %r12d,%r12d
    0.00 :   12edc:  mov    %r12,%rax
    0.00 :   12edf:  pop    %rbx
    0.00 :   12ee0:  pop    %rbp
    0.00 :   12ee1:  pop    %r12
    0.00 :   12ee3:  ret
    0.00 :   12ee4:  nopl   0x0(%rax)
    0.00 :   12ee8:  mov    0x1e0e1(%rip),%rax        # 30fd0 <cur_term@@NCURSES6_TINFO_5.0.19991023-0x640>
    0.00 :   12eef:  mov    (%rax),%r12
    0.00 :   12ef2:  jmp    12e3b <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x4b>
    0.00 :   12ef7:  nopw   0x0(%rax,%rax,1)
    0.00 :   12f00:  movzwl 0x2ec(%r12),%edi
    0.00 :   12f09:  cmp    $0x19e,%edi
    0.00 :   12f0f:  jle    12ed9 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xe9>
    0.00 :   12f11:  movzwl 0x2ee(%r12),%edx
    0.00 :   12f1a:  movzbl (%rbx),%esi
    0.00 :   12f1d:  movzwl 0x2f0(%r12),%eax
    0.00 :   12f26:  movzwl 0x2f2(%r12),%ecx
    0.00 :   12f2f:  add    %edx,%eax
    0.00 :   12f31:  mov    %edi,%edx
    0.00 :   12f33:  sub    %ecx,%edx
    0.00 :   12f35:  cltq
    0.00 :   12f37:  movslq %edx,%rdx
    0.00 :   12f3a:  sub    %rdx,%rax
    0.00 :   12f3d:  mov    0x2e0(%r12),%rdx
    0.00 :   12f45:  lea    (%rdx,%rax,8),%r8
    0.00 :   12f49:  mov    $0x19e,%eax
    0.00 :   12f4e:  jmp    12f58 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x168>
    0.00 :   12f50:  add    $0x1,%rax
    0.00 :   12f54:  cmp    %eax,%edi
    0.00 :   12f56:  jle    12ed9 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xe9>
    0.00 :   12f58:  mov    (%r8,%rax,8),%rdx
    0.00 :   12f5c:  movslq %eax,%rcx
    0.00 :   12f5f:  cmp    (%rdx),%sil
    0.00 :   12f62:  jne    12f50 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x160>
    0.00 :   12f64:  movzbl 0x1(%rdx),%r9d
    0.00 :   12f69:  cmp    %r9b,0x1(%rbx)
    0.00 :   12f6d:  sete   %r11b
    0.00 :   12f71:  test   %sil,%sil
    0.00 :   12f74:  setne  %r10b
    0.00 :   12f78:  test   %r10b,%r11b
    0.00 :   12f7b:  je     12f50 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x160>
    0.00 :   12f7d:  test   %r9b,%r9b
    0.00 :   12f80:  je     12f50 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x160>
    0.00 :   12f82:  cmpb   $0x0,0x2(%rdx)
    0.00 :   12f86:  jne    12f50 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x160>
    0.00 :   12f88:  jmp    12e5f <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0x6f>
    0.00 :   12f8d:  nopl   (%rax)
    0.00 :   12f90:  mov    0x1e051(%rip),%rax        # 30fe8 <_nc_globals@@NCURSES6_TINFO_5.7.20081102-0x2d8>
    0.00 :   12f97:  movslq 0x110(%rax),%rdx
    0.00 :   12f9e:  lea    (%rdx,%rdx,4),%rdx
    0.00 :   12fa2:  mov    0x80(%rax,%rdx,8),%rax
    0.00 :   12faa:  test   %rax,%rax
    0.00 :   12fad:  cmovne %rax,%r12
    0.00 :   12fb1:  jmp    12e94 <tgetstr_sp@@NCURSES6_TINFO_5.8.20110226+0xa4>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000002b1a0 <memset>:
         : 6     memset():
         : 7     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:125
    0.00 :   2b1a0:  endbr64
         : 9     ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:126
    0.00 :   2b1a4:  movd   %esi,%xmm0
    0.00 :   2b1a8:  mov    %rdi,%rax
    0.00 :   2b1ab:  punpcklbw %xmm0,%xmm0
    0.00 :   2b1af:  punpcklwd %xmm0,%xmm0
    0.00 :   2b1b3:  pshufd $0x0,%xmm0,%xmm0
         : 15    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:132
    0.00 :   2b1b8:  cmp    $0x10,%rdx
         : 17    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:133
    0.00 :   2b1bc:  jb     2b240 <memset+0xa0>
         : 19    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:134
    0.00 :   2b1c2:  cmp    $0x20,%rdx
         : 21    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:135
    0.00 :   2b1c6:  ja     2b1da <memset+0x3a>
         : 23    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:137
    0.00 :   2b1c8:  movups %xmm0,-0x10(%rdi,%rdx,1)
         : 25    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:138
    0.00 :   2b1cd:  movups %xmm0,(%rdi)
         : 27    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:139
    0.00 :   2b1d0:  ret
         : 29    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:204
    0.00 :   2b1d1:  movups %xmm0,-0x20(%rdi)
         : 31    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:205
    0.00 :   2b1d5:  movups %xmm0,-0x10(%rdi)
         : 33    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:207
    0.00 :   2b1d9:  ret
         : 35    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:283
    0.00 :   2b1da:  movups %xmm0,(%rax)
         : 37    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:284
    0.00 :   2b1dd:  movups %xmm0,0x10(%rax)
         : 39    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:289
    0.00 :   2b1e1:  add    %rdx,%rdi
         : 41    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:292
    0.00 :   2b1e4:  cmp    $0x40,%rdx
         : 43    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:293
    0.00 :   2b1e8:  jbe    2b1d1 <memset+0x31>
         : 45    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:296
    0.00 :   2b1ea:  movups %xmm0,0x20(%rax)
         : 47    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:297
    0.00 :   2b1ee:  movups %xmm0,0x30(%rax)
         : 49    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:310
    0.00 :   2b1f2:  add    $0xffffffffffffffc0,%rdi
         : 51    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:311
    0.00 :   2b1f6:  cmp    $0x80,%rdx
         : 53    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:313
    0.00 :   2b1fd:  jbe    2b228 <memset+0x88>
         : 55    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:316
    0.00 :   2b1ff:  lea    0x40(%rax),%rdx
         : 57    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:319
    0.00 :   2b203:  and    $0xffffffffffffffe0,%rdx
    0.00 :   2b207:  nopw   0x0(%rax,%rax,1)
         : 60    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:322
    0.00 :   2b210:  movaps %xmm0,(%rdx)
         : 62    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:323
    0.00 :   2b213:  movaps %xmm0,0x10(%rdx)
         : 64    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:324
    0.00 :   2b217:  movaps %xmm0,0x20(%rdx)
         : 66    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:325
    0.00 :   2b21b:  movaps %xmm0,0x30(%rdx)
         : 68    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:326
  100.00 :   2b21f:  sub    $0xffffffffffffffc0,%rdx
         : 70    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:327
    0.00 :   2b223:  cmp    %rdi,%rdx
         : 72    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:328
    0.00 :   2b226:  jb     2b210 <memset+0x70>
         : 74    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:331
    0.00 :   2b228:  movups %xmm0,(%rdi)
         : 76    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:332
    0.00 :   2b22b:  movups %xmm0,0x10(%rdi)
         : 78    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:333
    0.00 :   2b22f:  movups %xmm0,0x20(%rdi)
         : 80    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:334
    0.00 :   2b233:  movups %xmm0,0x30(%rdi)
         : 82    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:339
    0.00 :   2b237:  ret
    0.00 :   2b238:  nopl   0x0(%rax,%rax,1)
         : 85    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:368
    0.00 :   2b240:  movq   %xmm0,%rdi
         : 87    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:369
    0.00 :   2b245:  cmp    $0x8,%edx
         : 89    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:370
    0.00 :   2b248:  jae    2b260 <memset+0xc0>
         : 91    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:371
    0.00 :   2b24a:  cmp    $0x4,%edx
         : 93    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:372
    0.00 :   2b24d:  jae    2b269 <memset+0xc9>
         : 95    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:373
    0.00 :   2b24f:  cmp    $0x1,%edx
         : 97    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:374
    0.00 :   2b252:  ja     2b270 <memset+0xd0>
         : 99    ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:375
    0.00 :   2b254:  jb     2b237 <memset+0x97>
         : 101   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:376
    0.00 :   2b256:  mov    %sil,(%rax)
         : 103   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:377
    0.00 :   2b259:  ret
    0.00 :   2b25a:  nopw   0x0(%rax,%rax,1)
         : 106   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:402
    0.00 :   2b260:  mov    %rdi,(%rax)
         : 108   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:403
    0.00 :   2b263:  mov    %rdi,-0x8(%rax,%rdx,1)
         : 110   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:404
    0.00 :   2b268:  ret
         : 112   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:409
    0.00 :   2b269:  mov    %edi,(%rax)
         : 114   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:410
    0.00 :   2b26b:  mov    %edi,-0x4(%rax,%rdx,1)
         : 116   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:411
    0.00 :   2b26f:  ret
         : 118   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:416
    0.00 :   2b270:  mov    %di,(%rax)
         : 120   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:417
    0.00 :   2b273:  mov    %dil,-0x1(%rax,%rdx,1)
         : 122   ./string/../sysdeps/x86_64/multiarch/memset-vec-unaligned-erms.S:418
    0.00 :   2b278:  ret
 Percent |	Source code & Disassembly of bash for cycles:u (1 samples, percent: local period)
-------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000003d7e0 <yyparse@@Base>:
    0.00 :   3d7e0:  endbr64
    0.00 :   3d7e4:  push   %r15
    0.00 :   3d7e6:  lea    0xe1e73(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3d7ed:  push   %r14
    0.00 :   3d7ef:  push   %r13
    0.00 :   3d7f1:  xor    %r13d,%r13d
    0.00 :   3d7f4:  push   %r12
    0.00 :   3d7f6:  push   %rbp
    0.00 :   3d7f7:  push   %rbx
    0.00 :   3d7f8:  mov    $0xc8,%ebx
    0.00 :   3d7fd:  sub    $0xe68,%rsp
    0.00 :   3d804:  mov    %fs:0x28,%rax
    0.00 :   3d80d:  mov    %rax,0xe58(%rsp)
    0.00 :   3d815:  lea    0x118458(%rip),%rax        # 155c74 <yynerrs@@Base>
    0.00 :   3d81c:  lea    0x40(%rsp),%r10
    0.00 :   3d821:  lea    0x1d0(%rsp),%rbp
    0.00 :   3d829:  movl   $0x0,0x1c(%rsp)
    0.00 :   3d831:  mov    %rbp,0x10(%rsp)
    0.00 :   3d836:  mov    %r10,%r15
    0.00 :   3d839:  mov    %r10,0x20(%rsp)
    0.00 :   3d83e:  mov    %r10,0x8(%rsp)
    0.00 :   3d843:  movl   $0x0,(%rax)
    0.00 :   3d849:  lea    0x118420(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3d850:  movl   $0xfffffffe,(%rax)
    0.00 :   3d856:  xor    %eax,%eax
    0.00 :   3d858:  mov    %ax,0x40(%rsp)
    0.00 :   3d85d:  movslq %r13d,%r12
    0.00 :   3d860:  movswl (%r11,%r12,2),%r14d
    0.00 :   3d865:  mov    %r14d,%r13d
    0.00 :   3d868:  cmp    $0xffffff34,%r14d
    0.00 :   3d86f:  je     3d920 <yyparse@@Base+0x140>
    0.00 :   3d875:  lea    0x1183f4(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3d87c:  mov    (%rax),%eax
    0.00 :   3d87e:  cmp    $0xfffffffe,%eax
    0.00 :   3d881:  je     3dbb8 <yyparse@@Base+0x3d8>
    0.00 :   3d887:  test   %eax,%eax
    0.00 :   3d889:  jle    3dba0 <yyparse@@Base+0x3c0>
    0.00 :   3d88f:  cmp    $0x100,%eax
    0.00 :   3d894:  je     3dde4 <yyparse@@Base+0x604>
    0.00 :   3d89a:  cmp    $0x130,%eax
    0.00 :   3d89f:  jle    3dc70 <yyparse@@Base+0x490>
    0.00 :   3d8a5:  lea    0x2(%r14),%r13d
    0.00 :   3d8a9:  mov    $0x2,%eax
    0.00 :   3d8ae:  cmp    $0x295,%r13d
    0.00 :   3d8b5:  ja     3d920 <yyparse@@Base+0x140>
    0.00 :   3d8b7:  movslq %r13d,%rdx
    0.00 :   3d8ba:  lea    0xe171f(%rip),%rsi        # 11efe0 <patch_level@@Base+0x950>
    0.00 :   3d8c1:  movswl (%rsi,%rdx,2),%esi
    0.00 :   3d8c5:  cmp    %eax,%esi
    0.00 :   3d8c7:  jne    3d920 <yyparse@@Base+0x140>
    0.00 :   3d8c9:  lea    0xe11d0(%rip),%rax        # 11eaa0 <patch_level@@Base+0x410>
    0.00 :   3d8d0:  movswl (%rax,%rdx,2),%r13d
    0.00 :   3d8d5:  mov    %r13d,%eax
    0.00 :   3d8d8:  test   %r13d,%r13d
    0.00 :   3d8db:  jle    3d9f0 <yyparse@@Base+0x210>
    0.00 :   3d8e1:  mov    0x1c(%rsp),%esi
    0.00 :   3d8e5:  lea    0x118374(%rip),%rdx        # 155c60 <yylval@@Base>
    0.00 :   3d8ec:  mov    %r15,%rcx
    0.00 :   3d8ef:  cmp    $0x1,%esi
    0.00 :   3d8f2:  movdqa (%rdx),%xmm0
    0.00 :   3d8f6:  adc    $0xffffffff,%esi
    0.00 :   3d8f9:  add    $0x10,%rbp
    0.00 :   3d8fd:  mov    %esi,0x1c(%rsp)
    0.00 :   3d901:  lea    0x118368(%rip),%rsi        # 155c70 <yychar@@Base>
    0.00 :   3d908:  movups %xmm0,0x0(%rbp)
    0.00 :   3d90c:  movl   $0xfffffffe,(%rsi)
    0.00 :   3d912:  jmp    3dab0 <yyparse@@Base+0x2d0>
    0.00 :   3d917:  nopw   0x0(%rax,%rax,1)
    0.00 :   3d920:  lea    0xe1019(%rip),%rax        # 11e940 <patch_level@@Base+0x2b0>
    0.00 :   3d927:  movzbl (%rax,%r12,1),%eax
    0.00 :   3d92c:  test   %eax,%eax
    0.00 :   3d92e:  jne    3d9f2 <yyparse@@Base+0x212>
    0.00 :   3d934:  mov    0x1c(%rsp),%r12d
    0.00 :   3d939:  test   %r12d,%r12d
    0.00 :   3d93c:  je     3dd10 <yyparse@@Base+0x530>
    0.00 :   3d942:  cmpl   $0x3,0x1c(%rsp)
    0.00 :   3d947:  jne    40c09 <yyparse@@Base+0x3429>
    0.00 :   3d94d:  lea    0x11831c(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3d954:  mov    (%rax),%eax
    0.00 :   3d956:  test   %eax,%eax
    0.00 :   3d958:  jg     3dc90 <yyparse@@Base+0x4b0>
    0.00 :   3d95e:  mov    0x8(%rsp),%r10
    0.00 :   3d963:  jne    3d98b <yyparse@@Base+0x1ab>
    0.00 :   3d965:  jmp    3f834 <yyparse@@Base+0x2054>
    0.00 :   3d96a:  nopw   0x0(%rax,%rax,1)
    0.00 :   3d970:  cmp    %r10,%r15
    0.00 :   3d973:  je     3dcb0 <yyparse@@Base+0x4d0>
    0.00 :   3d979:  movswq -0x2(%r15),%rax
    0.00 :   3d97e:  sub    $0x2,%r15
    0.00 :   3d982:  sub    $0x10,%rbp
    0.00 :   3d986:  movswl (%r11,%rax,2),%r14d
    0.00 :   3d98b:  cmp    $0xffffff34,%r14d
    0.00 :   3d992:  je     3d970 <yyparse@@Base+0x190>
    0.00 :   3d994:  add    $0x1,%r14d
    0.00 :   3d998:  cmp    $0x295,%r14d
    0.00 :   3d99f:  ja     3d970 <yyparse@@Base+0x190>
    0.00 :   3d9a1:  movslq %r14d,%r14
    0.00 :   3d9a4:  lea    0xe1635(%rip),%rax        # 11efe0 <patch_level@@Base+0x950>
    0.00 :   3d9ab:  cmpw   $0x1,(%rax,%r14,2)
    0.00 :   3d9b1:  jne    3d970 <yyparse@@Base+0x190>
    0.00 :   3d9b3:  lea    0xe10e6(%rip),%rax        # 11eaa0 <patch_level@@Base+0x410>
    0.00 :   3d9ba:  movswl (%rax,%r14,2),%r13d
    0.00 :   3d9bf:  mov    %r13d,%eax
    0.00 :   3d9c2:  test   %r13d,%r13d
    0.00 :   3d9c5:  jle    3d970 <yyparse@@Base+0x190>
    0.00 :   3d9c7:  lea    0x118292(%rip),%rdx        # 155c60 <yylval@@Base>
    0.00 :   3d9ce:  movl   $0x3,0x1c(%rsp)
    0.00 :   3d9d6:  add    $0x10,%rbp
    0.00 :   3d9da:  mov    %r15,%rcx
    0.00 :   3d9dd:  movdqa (%rdx),%xmm1
    0.00 :   3d9e1:  movups %xmm1,0x0(%rbp)
    0.00 :   3d9e5:  jmp    3dab0 <yyparse@@Base+0x2d0>
    0.00 :   3d9ea:  nopw   0x0(%rax,%rax,1)
    0.00 :   3d9f0:  neg    %eax
    0.00 :   3d9f2:  movslq %eax,%r14
    0.00 :   3d9f5:  lea    0xe0e84(%rip),%rsi        # 11e880 <patch_level@@Base+0x1f0>
    0.00 :   3d9fc:  mov    $0x1,%ecx
    0.00 :   3da01:  movsbq (%rsi,%r14,1),%rdx
    0.00 :   3da06:  sub    %edx,%ecx
    0.00 :   3da08:  mov    %rdx,%r13
    0.00 :   3da0b:  movslq %ecx,%rcx
    0.00 :   3da0e:  shl    $0x4,%rcx
    0.00 :   3da12:  add    %rbp,%rcx
    0.00 :   3da15:  mov    (%rcx),%rdx
    0.00 :   3da18:  mov    0x8(%rcx),%r12
    0.00 :   3da1c:  cmp    $0xac,%eax
    0.00 :   3da21:  ja     3da40 <yyparse@@Base+0x260>
    0.00 :   3da23:  lea    0xe08d6(%rip),%rcx        # 11e300 <_IO_stdin_used@@Base+0x10300>
    0.00 :   3da2a:  mov    %eax,%eax
    0.00 :   3da2c:  movslq (%rcx,%rax,4),%rax
    0.00 :   3da30:  add    %rcx,%rax
    0.00 :   3da33:  notrack jmp *%rax
    0.00 :   3da36:  mov    0x0(%rbp),%rdx
    0.00 :   3da3a:  nopw   0x0(%rax,%rax,1)
    0.00 :   3da40:  mov    %r13,%rcx
    0.00 :   3da43:  mov    %rbp,%rax
    0.00 :   3da46:  add    %r13,%r13
    0.00 :   3da49:  shl    $0x4,%rcx
    0.00 :   3da4d:  sub    %rcx,%rax
    0.00 :   3da50:  mov    %r15,%rcx
    0.00 :   3da53:  mov    %rdx,0x10(%rax)
    0.00 :   3da57:  lea    0x10(%rax),%rbp
    0.00 :   3da5b:  sub    %r13,%rcx
    0.00 :   3da5e:  lea    0xe0cfb(%rip),%rdx        # 11e760 <patch_level@@Base+0xd0>
    0.00 :   3da65:  mov    %r12,0x18(%rax)
    0.00 :   3da69:  lea    0xe0d50(%rip),%rax        # 11e7c0 <patch_level@@Base+0x130>
    0.00 :   3da70:  movswl (%rcx),%edi
    0.00 :   3da73:  movsbl (%rax,%r14,1),%eax
    0.00 :   3da78:  mov    %edi,%esi
    0.00 :   3da7a:  sub    $0x3d,%eax
    0.00 :   3da7d:  cltq
    0.00 :   3da7f:  movswl (%rdx,%rax,2),%edx
  100.00 :   3da83:  add    %edi,%edx
    0.00 :   3da85:  cmp    $0x295,%edx
    0.00 :   3da8b:  ja     3daa1 <yyparse@@Base+0x2c1>
    0.00 :   3da8d:  movslq %edx,%rdx
    0.00 :   3da90:  lea    0xe1549(%rip),%rdi        # 11efe0 <patch_level@@Base+0x950>
    0.00 :   3da97:  cmp    (%rdi,%rdx,2),%si
    0.00 :   3da9b:  je     3ddd0 <yyparse@@Base+0x5f0>
    0.00 :   3daa1:  lea    0xe0c58(%rip),%rdx        # 11e700 <patch_level@@Base+0x70>
    0.00 :   3daa8:  movswl (%rdx,%rax,2),%r13d
    0.00 :   3daad:  mov    %r13d,%eax
    0.00 :   3dab0:  mov    0x8(%rsp),%rdi
    0.00 :   3dab5:  mov    %ax,0x2(%rcx)
    0.00 :   3dab9:  lea    (%rbx,%rbx,1),%rax
    0.00 :   3dabd:  lea    0x2(%rcx),%r15
    0.00 :   3dac1:  lea    -0x2(%rdi,%rax,1),%rdx
    0.00 :   3dac6:  cmp    %rdx,%r15
    0.00 :   3dac9:  jb     3db87 <yyparse@@Base+0x3a7>
    0.00 :   3dacf:  sub    %rdi,%r15
    0.00 :   3dad2:  mov    %r15,%r12
    0.00 :   3dad5:  sar    %r12
    0.00 :   3dad8:  lea    0x1(%r12),%rbp
    0.00 :   3dadd:  cmp    $0x270f,%rbx
    0.00 :   3dae4:  jg     405a5 <yyparse@@Base+0x2dc5>
    0.00 :   3daea:  mov    $0x2710,%ebx
    0.00 :   3daef:  cmp    %rbx,%rax
    0.00 :   3daf2:  cmovle %rax,%rbx
    0.00 :   3daf6:  lea    (%rbx,%rbx,8),%rax
    0.00 :   3dafa:  lea    0xf(%rax,%rax,1),%rdi
    0.00 :   3daff:  call   30610 <malloc@plt>
    0.00 :   3db04:  mov    %rax,%r14
    0.00 :   3db07:  test   %rax,%rax
    0.00 :   3db0a:  je     405a5 <yyparse@@Base+0x2dc5>
    0.00 :   3db10:  mov    0x8(%rsp),%rsi
    0.00 :   3db15:  lea    0x2(%r15),%rdx
    0.00 :   3db19:  mov    %rax,%rdi
    0.00 :   3db1c:  shl    $0x4,%rbp
    0.00 :   3db20:  lea    0xf(%rbx,%rbx,1),%r12
    0.00 :   3db25:  call   30530 <memcpy@plt>
    0.00 :   3db2a:  mov    %r12,%rax
    0.00 :   3db2d:  mov    0x10(%rsp),%rsi
    0.00 :   3db32:  mov    %rbp,%rdx
    0.00 :   3db35:  and    $0xfffffffffffffff0,%rax
    0.00 :   3db39:  lea    (%r14,%rax,1),%r12
    0.00 :   3db3d:  mov    %r12,%rdi
    0.00 :   3db40:  call   30530 <memcpy@plt>
    0.00 :   3db45:  mov    0x8(%rsp),%rdi
    0.00 :   3db4a:  mov    0x20(%rsp),%rax
    0.00 :   3db4f:  lea    0xe1b0a(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3db56:  cmp    %rax,%rdi
    0.00 :   3db59:  je     3db67 <yyparse@@Base+0x387>
    0.00 :   3db5b:  call   2fea0 <free@plt>
    0.00 :   3db60:  lea    0xe1af9(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3db67:  add    %r14,%r15
    0.00 :   3db6a:  lea    -0x2(%r14,%rbx,2),%rax
    0.00 :   3db6f:  lea    -0x10(%r12,%rbp,1),%rbp
    0.00 :   3db74:  cmp    %rax,%r15
    0.00 :   3db77:  jae    405c1 <yyparse@@Base+0x2de1>
    0.00 :   3db7d:  mov    %r12,0x10(%rsp)
    0.00 :   3db82:  mov    %r14,0x8(%rsp)
    0.00 :   3db87:  cmp    $0x76,%r13d
    0.00 :   3db8b:  jne    3d85d <yyparse@@Base+0x7d>
    0.00 :   3db91:  mov    0x8(%rsp),%r12
    0.00 :   3db96:  xor    %r13d,%r13d
    0.00 :   3db99:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3db9e:  xchg   %ax,%ax
    0.00 :   3dba0:  lea    0x1180c9(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3dba7:  movl   $0x0,(%rax)
    0.00 :   3dbad:  xor    %eax,%eax
    0.00 :   3dbaf:  jmp    3d8ae <yyparse@@Base+0xce>
    0.00 :   3dbb4:  nopl   0x0(%rax)
    0.00 :   3dbb8:  lea    0x118085(%rip),%rax        # 155c44 <current_token@@Base>
    0.00 :   3dbbf:  mov    (%rax),%esi
    0.00 :   3dbc1:  lea    0x118428(%rip),%rax        # 155ff0 <interactive@@Base>
    0.00 :   3dbc8:  mov    (%rax),%eax
    0.00 :   3dbca:  test   %eax,%eax
    0.00 :   3dbcc:  jne    3dd40 <yyparse@@Base+0x560>
    0.00 :   3dbd2:  mov    0x1180f8(%rip),%eax        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3dbd8:  mov    0x118042(%rip),%edi        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3dbde:  mov    %edi,0x118038(%rip)        # 155c1c <rl_instream@@Base+0x24>
    0.00 :   3dbe4:  mov    0x11802e(%rip),%edi        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3dbea:  mov    %esi,0x118028(%rip)        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3dbf0:  mov    %edi,0x11802a(%rip)        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3dbf6:  test   %eax,%eax
    0.00 :   3dbf8:  jne    3dd99 <yyparse@@Base+0x5b9>
    0.00 :   3dbfe:  call   39f80 <parser_save_alias@@Base+0x20b0>
    0.00 :   3dc03:  lea    0xe1a56(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3dc0a:  lea    0x118033(%rip),%rsi        # 155c44 <current_token@@Base>
    0.00 :   3dc11:  lea    0x118034(%rip),%rdi        # 155c4c <parser_state@@Base>
    0.00 :   3dc18:  mov    %eax,(%rsi)
    0.00 :   3dc1a:  mov    (%rdi),%esi
    0.00 :   3dc1c:  test   $0x8000,%esi
    0.00 :   3dc22:  je     3dcf8 <yyparse@@Base+0x518>
    0.00 :   3dc28:  lea    0x118011(%rip),%rdx        # 155c40 <shell_eof_token@@Base>
    0.00 :   3dc2f:  cmp    %eax,(%rdx)
    0.00 :   3dc31:  jne    3dcf8 <yyparse@@Base+0x518>
    0.00 :   3dc37:  lea    0x118006(%rip),%rax        # 155c44 <current_token@@Base>
    0.00 :   3dc3e:  movl   $0x130,(%rax)
    0.00 :   3dc44:  lea    0x118175(%rip),%rax        # 155dc0 <bash_input@@Base>
    0.00 :   3dc4b:  cmpl   $0x3,(%rax)
    0.00 :   3dc4e:  je     405f0 <yyparse@@Base+0x2e10>
    0.00 :   3dc54:  and    $0xffff7fff,%esi
    0.00 :   3dc5a:  lea    0x11800f(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3dc61:  mov    %esi,(%rdi)
    0.00 :   3dc63:  movl   $0x130,(%rax)
    0.00 :   3dc69:  mov    $0x130,%eax
    0.00 :   3dc6e:  xchg   %ax,%ax
    0.00 :   3dc70:  cltq
    0.00 :   3dc72:  lea    0xe18a7(%rip),%rdx        # 11f520 <patch_level@@Base+0xe90>
    0.00 :   3dc79:  movsbl (%rdx,%rax,1),%eax
    0.00 :   3dc7d:  lea    (%r14,%rax,1),%r13d
    0.00 :   3dc81:  jmp    3d8ae <yyparse@@Base+0xce>
    0.00 :   3dc86:  cs nopw 0x0(%rax,%rax,1)
    0.00 :   3dc90:  lea    0x117fd9(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3dc97:  mov    0x8(%rsp),%r10
    0.00 :   3dc9c:  movl   $0xfffffffe,(%rax)
    0.00 :   3dca2:  jmp    3d98b <yyparse@@Base+0x1ab>
    0.00 :   3dca7:  nopw   0x0(%rax,%rax,1)
    0.00 :   3dcb0:  mov    %r15,%r12
    0.00 :   3dcb3:  mov    $0x1,%r13d
    0.00 :   3dcb9:  cmp    0x20(%rsp),%r12
    0.00 :   3dcbe:  je     3dcc8 <yyparse@@Base+0x4e8>
    0.00 :   3dcc0:  mov    %r12,%rdi
    0.00 :   3dcc3:  call   2fea0 <free@plt>
    0.00 :   3dcc8:  mov    0xe58(%rsp),%rax
    0.00 :   3dcd0:  sub    %fs:0x28,%rax
    0.00 :   3dcd9:  jne    40c04 <yyparse@@Base+0x3424>
    0.00 :   3dcdf:  add    $0xe68,%rsp
    0.00 :   3dce6:  mov    %r13d,%eax
    0.00 :   3dce9:  pop    %rbx
    0.00 :   3dcea:  pop    %rbp
    0.00 :   3dceb:  pop    %r12
    0.00 :   3dced:  pop    %r13
    0.00 :   3dcef:  pop    %r14
    0.00 :   3dcf1:  pop    %r15
    0.00 :   3dcf3:  ret
    0.00 :   3dcf4:  nopl   0x0(%rax)
    0.00 :   3dcf8:  and    $0xffff7fff,%esi
    0.00 :   3dcfe:  mov    %esi,(%rdi)
    0.00 :   3dd00:  lea    0x117f69(%rip),%rsi        # 155c70 <yychar@@Base>
    0.00 :   3dd07:  mov    %eax,(%rsi)
    0.00 :   3dd09:  jmp    3d887 <yyparse@@Base+0xa7>
    0.00 :   3dd0e:  xchg   %ax,%ax
    0.00 :   3dd10:  lea    0x117f5d(%rip),%rax        # 155c74 <yynerrs@@Base>
    0.00 :   3dd17:  xor    %edi,%edi
    0.00 :   3dd19:  addl   $0x1,(%rax)
    0.00 :   3dd1c:  call   36b90 <read_secondary_line@@Base+0x620>
    0.00 :   3dd21:  call   33d40 <reset_parser@@Base>
    0.00 :   3dd26:  mov    0x8(%rsp),%r10
    0.00 :   3dd2b:  lea    0xe192e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3dd32:  jmp    3d98b <yyparse@@Base+0x1ab>
    0.00 :   3dd37:  nopw   0x0(%rax,%rax,1)
    0.00 :   3dd40:  test   %esi,%esi
    0.00 :   3dd42:  je     3dd4d <yyparse@@Base+0x56d>
    0.00 :   3dd44:  cmp    $0xa,%esi
    0.00 :   3dd47:  jne    3dbd2 <yyparse@@Base+0x3f2>
    0.00 :   3dd4d:  lea    0x117f3c(%rip),%rax        # 155c90 <prompt_string_pointer@@Base>
    0.00 :   3dd54:  mov    (%rax),%rax
    0.00 :   3dd57:  cmp    0x10f142(%rip),%rax        # 14cea0 <o_options@@Base+0x23e0>
    0.00 :   3dd5e:  je     3ddfb <yyparse@@Base+0x61b>
    0.00 :   3dd64:  test   %rax,%rax
    0.00 :   3dd67:  je     3ddfb <yyparse@@Base+0x61b>
    0.00 :   3dd6d:  mov    0x117f5d(%rip),%eax        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3dd73:  test   %eax,%eax
    0.00 :   3dd75:  je     405cf <yyparse@@Base+0x2def>
    0.00 :   3dd7b:  mov    0x117e9f(%rip),%edi        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3dd81:  mov    %edi,0x117e95(%rip)        # 155c1c <rl_instream@@Base+0x24>
    0.00 :   3dd87:  mov    0x117e8b(%rip),%edi        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3dd8d:  mov    %esi,0x117e85(%rip)        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3dd93:  mov    %edi,0x117e87(%rip)        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3dd99:  lea    -0x119(%rax),%esi
    0.00 :   3dd9f:  cmp    $0x1,%esi
    0.00 :   3dda2:  ja     3ddc0 <yyparse@@Base+0x5e0>
    0.00 :   3dda4:  mov    0x118585(%rip),%rdi        # 156330 <top_level@@Base+0x1b0>
    0.00 :   3ddab:  lea    0x117eae(%rip),%rsi        # 155c60 <yylval@@Base>
    0.00 :   3ddb2:  movq   $0x0,0x118573(%rip)        # 156330 <top_level@@Base+0x1b0>
    0.00 :   3ddbd:  mov    %rdi,(%rsi)
    0.00 :   3ddc0:  movl   $0x0,0x117f06(%rip)        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3ddca:  jmp    3dc0a <yyparse@@Base+0x42a>
    0.00 :   3ddcf:  nop
    0.00 :   3ddd0:  lea    0xe0cc9(%rip),%rax        # 11eaa0 <patch_level@@Base+0x410>
    0.00 :   3ddd7:  movswl (%rax,%rdx,2),%r13d
    0.00 :   3dddc:  mov    %r13d,%eax
    0.00 :   3dddf:  jmp    3dab0 <yyparse@@Base+0x2d0>
    0.00 :   3dde4:  lea    0x117e85(%rip),%rax        # 155c70 <yychar@@Base>
    0.00 :   3ddeb:  mov    0x8(%rsp),%r10
    0.00 :   3ddf0:  movl   $0x101,(%rax)
    0.00 :   3ddf6:  jmp    3d98b <yyparse@@Base+0x1ab>
    0.00 :   3ddfb:  lea    0x117e46(%rip),%rax        # 155c48 <parse_and_execute_level@@Base>
    0.00 :   3de02:  mov    (%rax),%eax
    0.00 :   3de04:  test   %eax,%eax
    0.00 :   3de06:  jne    3dd6d <yyparse@@Base+0x58d>
    0.00 :   3de0c:  call   84d20 <time_to_check_mail@@Base>
    0.00 :   3de11:  lea    0xe1848(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3de18:  test   %eax,%eax
    0.00 :   3de1a:  jne    4061e <yyparse@@Base+0x2e3e>
    0.00 :   3de20:  mov    0x117eaa(%rip),%eax        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3de26:  test   %eax,%eax
    0.00 :   3de28:  jne    40bcd <yyparse@@Base+0x33ed>
    0.00 :   3de2e:  lea    0x1181bb(%rip),%rax        # 155ff0 <interactive@@Base>
    0.00 :   3de35:  mov    (%rax),%eax
    0.00 :   3de37:  test   %eax,%eax
    0.00 :   3de39:  jne    405cf <yyparse@@Base+0x2def>
    0.00 :   3de3f:  mov    0x117ddb(%rip),%esi        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3de45:  lea    0x117df8(%rip),%rax        # 155c44 <current_token@@Base>
    0.00 :   3de4c:  mov    %esi,0x117dca(%rip)        # 155c1c <rl_instream@@Base+0x24>
    0.00 :   3de52:  mov    (%rax),%eax
    0.00 :   3de54:  mov    0x117dbe(%rip),%esi        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3de5a:  mov    %eax,0x117db8(%rip)        # 155c18 <rl_instream@@Base+0x20>
    0.00 :   3de60:  mov    %esi,0x117dba(%rip)        # 155c20 <rl_instream@@Base+0x28>
    0.00 :   3de66:  jmp    3dbfe <yyparse@@Base+0x41e>
    0.00 :   3de6b:  movabs $0xffffffff00000000,%rax
    0.00 :   3de75:  and    %rdx,%rax
    0.00 :   3de78:  or     $0x180,%rax
    0.00 :   3de7e:  mov    %rax,%rdx
    0.00 :   3de81:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3de86:  mov    0x1184ac(%rip),%edx        # 156338 <top_level@@Base+0x1b8>
    0.00 :   3de8c:  mov    -0x40(%rbp),%rdi
    0.00 :   3de90:  mov    0x1184a6(%rip),%ecx        # 15633c <top_level@@Base+0x1bc>
    0.00 :   3de96:  mov    0x0(%rbp),%rsi
    0.00 :   3de9a:  call   47190 <make_function_def@@Base>
    0.00 :   3de9f:  lea    0xe17ba(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3dea6:  mov    %rax,%rdx
    0.00 :   3dea9:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3deae:  mov    -0x30(%rbp),%rdi
    0.00 :   3deb2:  mov    0x0(%rbp),%rsi
    0.00 :   3deb6:  mov    $0x121,%edx
    0.00 :   3debb:  call   44380 <command_connect@@Base>
    0.00 :   3dec0:  lea    0xe1799(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3dec7:  mov    %rax,%rdx
    0.00 :   3deca:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3decf:  mov    -0x30(%rbp),%rdi
    0.00 :   3ded3:  mov    0x0(%rbp),%rsi
    0.00 :   3ded7:  mov    $0x120,%edx
    0.00 :   3dedc:  call   44380 <command_connect@@Base>
    0.00 :   3dee1:  lea    0xe1778(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3dee8:  mov    %rax,%rdx
    0.00 :   3deeb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3def0:  mov    -0x20(%rbp),%rdi
    0.00 :   3def4:  xor    %esi,%esi
    0.00 :   3def6:  call   446e0 <make_pattern_list@@Base>
    0.00 :   3defb:  lea    0xe175e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3df02:  mov    %rax,%rdx
    0.00 :   3df05:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3df0a:  mov    -0x20(%rbp),%rdi
    0.00 :   3df0e:  mov    0x0(%rbp),%rsi
    0.00 :   3df12:  call   446e0 <make_pattern_list@@Base>
    0.00 :   3df17:  lea    0xe1742(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3df1e:  mov    %rax,%rdx
    0.00 :   3df21:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3df26:  mov    0x0(%rbp),%rdi
    0.00 :   3df2a:  xor    %esi,%esi
    0.00 :   3df2c:  call   442b0 <make_word_list@@Base>
    0.00 :   3df31:  lea    0xe1728(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3df38:  mov    %rax,%rdx
    0.00 :   3df3b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3df40:  mov    -0x30(%rbp),%rdi
    0.00 :   3df44:  mov    0x0(%rbp),%rsi
    0.00 :   3df48:  mov    $0x3b,%edx
    0.00 :   3df4d:  call   44380 <command_connect@@Base>
    0.00 :   3df52:  lea    0xe1707(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3df59:  mov    %rax,%rdx
    0.00 :   3df5c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3df61:  mov    0x0(%rbp),%eax
    0.00 :   3df64:  mov    $0x30,%edi
    0.00 :   3df69:  movl   $0x0,0x1185fd(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3df73:  mov    %eax,0x1185ef(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3df79:  mov    0x1185f0(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3df80:  mov    %rax,0x30(%rsp)
    0.00 :   3df85:  mov    0x1185dc(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3df8c:  mov    %rax,0x28(%rsp)
    0.00 :   3df91:  call   30610 <malloc@plt>
    0.00 :   3df96:  lea    0xe16c3(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3df9d:  test   %rax,%rax
    0.00 :   3dfa0:  mov    %rax,%rdx
    0.00 :   3dfa3:  je     40bdb <yyparse@@Base+0x33fb>
    0.00 :   3dfa9:  mov    0x30(%rsp),%rax
    0.00 :   3dfae:  movq   $0x0,0x28(%rdx)
    0.00 :   3dfb6:  movq   $0x0,0x10(%rdx)
    0.00 :   3dfbe:  mov    %rax,0x8(%rdx)
    0.00 :   3dfc2:  mov    0x28(%rsp),%rax
    0.00 :   3dfc7:  movl   $0x6,0x18(%rdx)
    0.00 :   3dfce:  mov    %rax,0x20(%rdx)
    0.00 :   3dfd2:  movq   $0x0,(%rdx)
    0.00 :   3dfd9:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3dfde:  movslq 0x10f4a3(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3dfe5:  lea    0x118374(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3dfec:  mov    -0x40(%rbp),%rdi
    0.00 :   3dff0:  xor    %esi,%esi
    0.00 :   3dff2:  mov    (%rax,%rdx,4),%edx
    0.00 :   3dff5:  call   44610 <make_case_command@@Base>
    0.00 :   3dffa:  lea    0xe165f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e001:  mov    %rax,%rdx
    0.00 :   3e004:  mov    0x10f47e(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e00a:  test   %eax,%eax
    0.00 :   3e00c:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e012:  sub    $0x1,%eax
    0.00 :   3e015:  mov    %eax,0x10f46d(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e01b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e020:  movslq 0x10f461(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e027:  lea    0x118332(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e02e:  mov    -0x70(%rbp),%rdi
    0.00 :   3e032:  xor    %esi,%esi
    0.00 :   3e034:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e037:  mov    -0x10(%rbp),%rdx
    0.00 :   3e03b:  call   444d0 <make_select_command@@Base>
    0.00 :   3e040:  lea    0xe1619(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e047:  mov    %rax,%rdx
    0.00 :   3e04a:  mov    0x10f438(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e050:  test   %eax,%eax
    0.00 :   3e052:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e058:  sub    $0x1,%eax
    0.00 :   3e05b:  mov    %eax,0x10f427(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e061:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e066:  movslq 0x10f41b(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e06d:  mov    -0x50(%rbp),%rsi
    0.00 :   3e071:  lea    0x1182e8(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e078:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e07b:  mov    -0x10(%rbp),%rdx
    0.00 :   3e07f:  test   %rsi,%rsi
    0.00 :   3e082:  je     3e0a1 <yyparse@@Base+0x8c1>
    0.00 :   3e084:  mov    (%rsi),%rax
    0.00 :   3e087:  test   %rax,%rax
    0.00 :   3e08a:  je     3e0a1 <yyparse@@Base+0x8c1>
    0.00 :   3e08c:  xor    %edi,%edi
    0.00 :   3e08e:  jmp    3e099 <yyparse@@Base+0x8b9>
    0.00 :   3e090:  mov    %rsi,%rdi
    0.00 :   3e093:  mov    %rax,%rsi
    0.00 :   3e096:  mov    (%rax),%rax
    0.00 :   3e099:  mov    %rdi,(%rsi)
    0.00 :   3e09c:  test   %rax,%rax
    0.00 :   3e09f:  jne    3e090 <yyparse@@Base+0x8b0>
    0.00 :   3e0a1:  mov    -0x80(%rbp),%rdi
    0.00 :   3e0a5:  call   444d0 <make_select_command@@Base>
    0.00 :   3e0aa:  lea    0xe15af(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e0b1:  mov    %rax,%rdx
    0.00 :   3e0b4:  mov    0x10f3ce(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e0ba:  test   %eax,%eax
    0.00 :   3e0bc:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e0c2:  sub    $0x1,%eax
    0.00 :   3e0c5:  mov    %eax,0x10f3bd(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e0cb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e0d0:  movslq 0x10f3b1(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e0d7:  mov    -0x50(%rbp),%rsi
    0.00 :   3e0db:  lea    0x11827e(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e0e2:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e0e5:  mov    -0x10(%rbp),%rdx
    0.00 :   3e0e9:  test   %rsi,%rsi
    0.00 :   3e0ec:  je     3e10b <yyparse@@Base+0x92b>
    0.00 :   3e0ee:  mov    (%rsi),%rax
    0.00 :   3e0f1:  test   %rax,%rax
    0.00 :   3e0f4:  je     3e10b <yyparse@@Base+0x92b>
    0.00 :   3e0f6:  xor    %edi,%edi
    0.00 :   3e0f8:  jmp    3e103 <yyparse@@Base+0x923>
    0.00 :   3e0fa:  mov    %rsi,%rdi
    0.00 :   3e0fd:  mov    %rax,%rsi
    0.00 :   3e100:  mov    (%rax),%rax
    0.00 :   3e103:  mov    %rdi,(%rsi)
    0.00 :   3e106:  test   %rax,%rax
    0.00 :   3e109:  jne    3e0fa <yyparse@@Base+0x91a>
    0.00 :   3e10b:  mov    -0x80(%rbp),%rdi
    0.00 :   3e10f:  call   444d0 <make_select_command@@Base>
    0.00 :   3e114:  lea    0xe1545(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e11b:  mov    %rax,%rdx
    0.00 :   3e11e:  mov    0x10f364(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e124:  test   %eax,%eax
    0.00 :   3e126:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e12c:  sub    $0x1,%eax
    0.00 :   3e12f:  mov    %eax,0x10f353(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e135:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e13a:  lea    0x11821f(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e141:  movslq 0x10f340(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e148:  mov    -0x20(%rbp),%rsi
    0.00 :   3e14c:  mov    -0x50(%rbp),%rdi
    0.00 :   3e150:  mov    (%rax,%rdx,4),%edx
    0.00 :   3e153:  call   44610 <make_case_command@@Base>
    0.00 :   3e158:  lea    0xe1501(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e15f:  mov    %rax,%rdx
    0.00 :   3e162:  mov    0x10f320(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e168:  test   %eax,%eax
    0.00 :   3e16a:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e170:  sub    $0x1,%eax
    0.00 :   3e173:  mov    %eax,0x10f30f(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e179:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e17e:  lea    0x1181db(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e185:  movslq 0x10f2fc(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e18c:  mov    -0x10(%rbp),%rsi
    0.00 :   3e190:  mov    -0x40(%rbp),%rdi
    0.00 :   3e194:  mov    (%rax,%rdx,4),%edx
    0.00 :   3e197:  call   44610 <make_case_command@@Base>
    0.00 :   3e19c:  lea    0xe14bd(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e1a3:  mov    %rax,%rdx
    0.00 :   3e1a6:  mov    0x10f2dc(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e1ac:  test   %eax,%eax
    0.00 :   3e1ae:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e1b4:  sub    $0x1,%eax
    0.00 :   3e1b7:  mov    %eax,0x10f2cb(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e1bd:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e1c2:  mov    -0x10(%rbp),%rdx
    0.00 :   3e1c6:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e1cb:  mov    0x0(%rbp),%rdi
    0.00 :   3e1cf:  call   44940 <make_arith_command@@Base>
    0.00 :   3e1d4:  lea    0xe1485(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e1db:  mov    %rax,%rdx
    0.00 :   3e1de:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e1e3:  mov    -0x10(%rbp),%rdi
    0.00 :   3e1e7:  call   44580 <make_group_command@@Base>
    0.00 :   3e1ec:  lea    0xe146d(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e1f3:  mov    %rax,%rdx
    0.00 :   3e1f6:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e1fb:  mov    -0x10(%rbp),%rdx
    0.00 :   3e1ff:  mov    -0x20(%rbp),%rsi
    0.00 :   3e203:  mov    -0x40(%rbp),%rdi
    0.00 :   3e207:  call   44770 <make_if_command@@Base>
    0.00 :   3e20c:  lea    0xe144d(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e213:  mov    %rax,%rdx
    0.00 :   3e216:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e21b:  mov    -0x10(%rbp),%rdx
    0.00 :   3e21f:  mov    -0x30(%rbp),%rsi
    0.00 :   3e223:  mov    -0x50(%rbp),%rdi
    0.00 :   3e227:  call   44770 <make_if_command@@Base>
    0.00 :   3e22c:  lea    0xe142d(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e233:  mov    %rax,%rdx
    0.00 :   3e236:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e23b:  mov    -0x10(%rbp),%rsi
    0.00 :   3e23f:  mov    -0x30(%rbp),%rdi
    0.00 :   3e243:  xor    %edx,%edx
    0.00 :   3e245:  call   44770 <make_if_command@@Base>
    0.00 :   3e24a:  lea    0xe140f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e251:  mov    %rax,%rdx
    0.00 :   3e254:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e259:  mov    0x0(%rbp),%rdi
    0.00 :   3e25d:  call   47330 <clean_simple_command@@Base>
    0.00 :   3e262:  lea    0xcff4a(%rip),%rdi        # 10e1b3 <_IO_stdin_used@@Base+0x1b3>
    0.00 :   3e269:  mov    %rax,%rsi
    0.00 :   3e26c:  call   44d70 <make_coproc_command@@Base>
    0.00 :   3e271:  lea    0xe13e8(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e278:  orl    $0x1001,0x4(%rax)
    0.00 :   3e27f:  mov    %rax,%rdx
    0.00 :   3e282:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e287:  movabs $0xffffffff00000000,%rax
    0.00 :   3e291:  and    %rdx,%rax
    0.00 :   3e294:  or     $0x80,%al
    0.00 :   3e296:  mov    %rax,%rdx
    0.00 :   3e299:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e29e:  mov    -0x20(%rbp),%rdi
    0.00 :   3e2a2:  mov    0x0(%rbp),%rsi
    0.00 :   3e2a6:  xor    %edx,%edx
    0.00 :   3e2a8:  call   44770 <make_if_command@@Base>
    0.00 :   3e2ad:  lea    0xe13ac(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e2b4:  mov    %rax,%rdx
    0.00 :   3e2b7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e2bc:  mov    -0x20(%rbp),%eax
    0.00 :   3e2bf:  mov    0x0(%rbp),%rdx
    0.00 :   3e2c3:  xor    %ecx,%ecx
    0.00 :   3e2c5:  mov    $0xd,%esi
    0.00 :   3e2ca:  mov    %eax,0x1182a0(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e2d0:  mov    0x118299(%rip),%rdi        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e2d7:  mov    %rdx,0x11828a(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e2de:  call   46fa0 <make_redirection@@Base>
    0.00 :   3e2e3:  lea    0xe1376(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e2ea:  mov    %rax,%rdx
    0.00 :   3e2ed:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e2f2:  mov    0x0(%rbp),%rdx
    0.00 :   3e2f6:  xor    %ecx,%ecx
    0.00 :   3e2f8:  mov    $0xd,%esi
    0.00 :   3e2fd:  movl   $0x0,0x118269(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e307:  mov    0x118262(%rip),%rdi        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e30e:  mov    %rdx,0x118253(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e315:  call   46fa0 <make_redirection@@Base>
    0.00 :   3e31a:  lea    0xe133f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e321:  mov    %rax,%rdx
    0.00 :   3e324:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e329:  mov    -0x20(%rbp),%rax
    0.00 :   3e32d:  mov    $0x30,%edi
    0.00 :   3e332:  mov    %rax,0x30(%rsp)
    0.00 :   3e337:  mov    %rax,0x118232(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e33e:  mov    0x0(%rbp),%eax
    0.00 :   3e341:  mov    %eax,0x118221(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e347:  mov    0x11821a(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e34e:  mov    %rax,0x28(%rsp)
    0.00 :   3e353:  call   30610 <malloc@plt>
    0.00 :   3e358:  lea    0xe1301(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e35f:  test   %rax,%rax
    0.00 :   3e362:  mov    %rax,%rdx
    0.00 :   3e365:  je     40d9b <yyparse@@Base+0x35bb>
    0.00 :   3e36b:  mov    0x30(%rsp),%rax
    0.00 :   3e370:  movq   $0x0,0x28(%rdx)
    0.00 :   3e378:  movq   $0x1,0x10(%rdx)
    0.00 :   3e380:  mov    %rax,0x8(%rdx)
    0.00 :   3e384:  mov    0x28(%rsp),%rax
    0.00 :   3e389:  movl   $0x7,0x18(%rdx)
    0.00 :   3e390:  mov    %rax,0x20(%rdx)
    0.00 :   3e394:  movq   $0x0,(%rdx)
    0.00 :   3e39b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e3a0:  mov    -0x20(%rbp),%eax
    0.00 :   3e3a3:  mov    $0x30,%edi
    0.00 :   3e3a8:  mov    %eax,0x1181c2(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e3ae:  mov    0x0(%rbp),%eax
    0.00 :   3e3b1:  mov    %eax,0x1181b1(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e3b7:  mov    0x1181b2(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e3be:  mov    %rax,0x30(%rsp)
    0.00 :   3e3c3:  mov    0x11819e(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e3ca:  mov    %rax,0x28(%rsp)
    0.00 :   3e3cf:  call   30610 <malloc@plt>
    0.00 :   3e3d4:  lea    0xe1285(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e3db:  test   %rax,%rax
    0.00 :   3e3de:  mov    %rax,%rdx
    0.00 :   3e3e1:  je     40d72 <yyparse@@Base+0x3592>
    0.00 :   3e3e7:  mov    0x30(%rsp),%rax
    0.00 :   3e3ec:  movq   $0x0,0x28(%rdx)
    0.00 :   3e3f4:  movq   $0x0,0x10(%rdx)
    0.00 :   3e3fc:  mov    %rax,0x8(%rdx)
    0.00 :   3e400:  mov    0x28(%rsp),%rax
    0.00 :   3e405:  movl   $0x7,0x18(%rdx)
    0.00 :   3e40c:  mov    %rax,0x20(%rdx)
    0.00 :   3e410:  movq   $0x0,(%rdx)
    0.00 :   3e417:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e41c:  mov    0x0(%rbp),%eax
    0.00 :   3e41f:  mov    $0x30,%edi
    0.00 :   3e424:  movl   $0x1,0x118142(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e42e:  mov    %eax,0x118134(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e434:  mov    0x118135(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e43b:  mov    %rax,0x30(%rsp)
    0.00 :   3e440:  mov    0x118121(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e447:  mov    %rax,0x28(%rsp)
    0.00 :   3e44c:  call   30610 <malloc@plt>
    0.00 :   3e451:  lea    0xe1208(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e458:  test   %rax,%rax
    0.00 :   3e45b:  mov    %rax,%rdx
    0.00 :   3e45e:  je     409c6 <yyparse@@Base+0x31e6>
    0.00 :   3e464:  mov    0x30(%rsp),%rax
    0.00 :   3e469:  movq   $0x0,0x28(%rdx)
    0.00 :   3e471:  movq   $0x0,0x10(%rdx)
    0.00 :   3e479:  mov    %rax,0x8(%rdx)
    0.00 :   3e47d:  mov    0x28(%rsp),%rax
    0.00 :   3e482:  movl   $0x7,0x18(%rdx)
    0.00 :   3e489:  mov    %rax,0x20(%rdx)
    0.00 :   3e48d:  movq   $0x0,(%rdx)
    0.00 :   3e494:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e499:  mov    -0x30(%rbp),%rdi
    0.00 :   3e49d:  mov    0x0(%rbp),%rsi
    0.00 :   3e4a1:  mov    $0x7c,%edx
    0.00 :   3e4a6:  call   44380 <command_connect@@Base>
    0.00 :   3e4ab:  lea    0xe11ae(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e4b2:  mov    %rax,%rdx
    0.00 :   3e4b5:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e4ba:  mov    -0x20(%rbp),%eax
    0.00 :   3e4bd:  mov    $0x30,%edi
    0.00 :   3e4c2:  mov    %eax,0x1180a8(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e4c8:  mov    0x0(%rbp),%eax
    0.00 :   3e4cb:  mov    %eax,0x118097(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e4d1:  mov    0x118098(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e4d8:  mov    %rax,0x30(%rsp)
    0.00 :   3e4dd:  mov    0x118084(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e4e4:  mov    %rax,0x28(%rsp)
    0.00 :   3e4e9:  call   30610 <malloc@plt>
    0.00 :   3e4ee:  lea    0xe116b(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e4f5:  test   %rax,%rax
    0.00 :   3e4f8:  mov    %rax,%rdx
    0.00 :   3e4fb:  je     40dc4 <yyparse@@Base+0x35e4>
    0.00 :   3e501:  mov    0x30(%rsp),%rax
    0.00 :   3e506:  movq   $0x0,0x28(%rdx)
    0.00 :   3e50e:  movq   $0x0,0x10(%rdx)
    0.00 :   3e516:  mov    %rax,0x8(%rdx)
    0.00 :   3e51a:  mov    0x28(%rsp),%rax
    0.00 :   3e51f:  movl   $0x6,0x18(%rdx)
    0.00 :   3e526:  mov    %rax,0x20(%rdx)
    0.00 :   3e52a:  movq   $0x0,(%rdx)
    0.00 :   3e531:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e536:  mov    -0x30(%rbp),%r8
    0.00 :   3e53a:  cmpl   $0x4,(%r8)
    0.00 :   3e53e:  mov    %r8,0x28(%rsp)
    0.00 :   3e543:  jne    3e54e <yyparse@@Base+0xd6e>
    0.00 :   3e545:  mov    0x18(%r8),%rax
    0.00 :   3e549:  mov    %rax,0x28(%rsp)
    0.00 :   3e54e:  mov    $0x30,%edi
    0.00 :   3e553:  mov    %r8,0x30(%rsp)
    0.00 :   3e558:  call   30610 <malloc@plt>
    0.00 :   3e55d:  mov    0x30(%rsp),%r8
    0.00 :   3e562:  test   %rax,%rax
    0.00 :   3e565:  mov    %rax,%rdx
    0.00 :   3e568:  je     40d4b <yyparse@@Base+0x356b>
    0.00 :   3e56e:  mov    0x28(%rsp),%rax
    0.00 :   3e573:  movl   $0x2,0x8(%rdx)
    0.00 :   3e57a:  movl   $0x1,0x20(%rdx)
    0.00 :   3e581:  mov    0x10(%rax),%rax
    0.00 :   3e585:  movq   $0x0,0x28(%rdx)
    0.00 :   3e58d:  movq   $0x0,0x10(%rdx)
    0.00 :   3e595:  movl   $0x7,0x18(%rdx)
    0.00 :   3e59c:  movq   $0x0,(%rdx)
    0.00 :   3e5a3:  test   %rax,%rax
    0.00 :   3e5a6:  jne    3e5d1 <yyparse@@Base+0xdf1>
    0.00 :   3e5a8:  mov    0x28(%rsp),%rax
    0.00 :   3e5ad:  mov    %rdx,0x10(%rax)
    0.00 :   3e5b1:  mov    0x0(%rbp),%rsi
    0.00 :   3e5b5:  mov    $0x7c,%edx
    0.00 :   3e5ba:  mov    %r8,%rdi
    0.00 :   3e5bd:  call   44380 <command_connect@@Base>
    0.00 :   3e5c2:  lea    0xe1097(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e5c9:  mov    %rax,%rdx
    0.00 :   3e5cc:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e5d1:  mov    %rax,%rsi
    0.00 :   3e5d4:  mov    (%rax),%rax
    0.00 :   3e5d7:  test   %rax,%rax
    0.00 :   3e5da:  jne    3e5d1 <yyparse@@Base+0xdf1>
    0.00 :   3e5dc:  mov    %rdx,(%rsi)
    0.00 :   3e5df:  jmp    3e5b1 <yyparse@@Base+0xdd1>
    0.00 :   3e5e1:  mov    0x0(%rbp),%rdx
    0.00 :   3e5e5:  test   %rdx,%rdx
    0.00 :   3e5e8:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   3e5ee:  xorl   $0x4,0x4(%rdx)
    0.00 :   3e5f2:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e5f7:  mov    -0x20(%rbp),%rax
    0.00 :   3e5fb:  mov    $0x30,%edi
    0.00 :   3e600:  mov    %rax,0x30(%rsp)
    0.00 :   3e605:  mov    %rax,0x117f64(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3e60c:  mov    0x0(%rbp),%eax
    0.00 :   3e60f:  mov    %eax,0x117f53(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e615:  mov    0x117f4c(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3e61c:  mov    %rax,0x28(%rsp)
    0.00 :   3e621:  call   30610 <malloc@plt>
    0.00 :   3e626:  lea    0xe1033(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e62d:  test   %rax,%rax
    0.00 :   3e630:  mov    %rax,%rdx
    0.00 :   3e633:  je     4097b <yyparse@@Base+0x319b>
    0.00 :   3e639:  mov    0x30(%rsp),%rax
    0.00 :   3e63e:  movq   $0x0,0x28(%rdx)
    0.00 :   3e646:  movq   $0x1,0x10(%rdx)
    0.00 :   3e64e:  mov    %rax,0x8(%rdx)
    0.00 :   3e652:  mov    0x28(%rsp),%rax
    0.00 :   3e657:  movl   $0x6,0x18(%rdx)
    0.00 :   3e65e:  mov    %rax,0x20(%rdx)
    0.00 :   3e662:  movq   $0x0,(%rdx)
    0.00 :   3e669:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e66e:  xor    %edx,%edx
    0.00 :   3e670:  xor    %edi,%edi
    0.00 :   3e672:  xor    %esi,%esi
    0.00 :   3e674:  call   44b60 <make_simple_command@@Base>
    0.00 :   3e679:  lea    0xe0fe0(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e680:  mov    %rax,%rdx
    0.00 :   3e683:  mov    -0x10(%rbp),%eax
    0.00 :   3e686:  or     %eax,0x4(%rdx)
    0.00 :   3e689:  mov    0x0(%rbp),%eax
    0.00 :   3e68c:  cmp    $0xa,%eax
    0.00 :   3e68f:  je     40696 <yyparse@@Base+0x2eb6>
    0.00 :   3e695:  cmp    $0x3b,%eax
    0.00 :   3e698:  jne    3e6a4 <yyparse@@Base+0xec4>
    0.00 :   3e69a:  movl   $0x3b,0x11762c(%rip)        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3e6a4:  lea    0x1175a1(%rip),%rax        # 155c4c <parser_state@@Base>
    0.00 :   3e6ab:  andl   $0xfff7ffff,(%rax)
    0.00 :   3e6b1:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e6b6:  mov    -0x20(%rbp),%rdi
    0.00 :   3e6ba:  mov    0x0(%rbp),%rsi
    0.00 :   3e6be:  mov    $0x26,%edx
    0.00 :   3e6c3:  cmpl   $0x6,(%rdi)
    0.00 :   3e6c6:  je     406a5 <yyparse@@Base+0x2ec5>
    0.00 :   3e6cc:  call   44380 <command_connect@@Base>
    0.00 :   3e6d1:  lea    0xe0f88(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e6d8:  mov    %rax,%rdx
    0.00 :   3e6db:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e6e0:  movslq 0x10eda1(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e6e7:  lea    0x117c72(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e6ee:  mov    -0x70(%rbp),%rdi
    0.00 :   3e6f2:  xor    %esi,%esi
    0.00 :   3e6f4:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e6f7:  mov    -0x10(%rbp),%rdx
    0.00 :   3e6fb:  call   444d0 <make_select_command@@Base>
    0.00 :   3e700:  lea    0xe0f59(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e707:  mov    %rax,%rdx
    0.00 :   3e70a:  mov    0x10ed78(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e710:  test   %eax,%eax
    0.00 :   3e712:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e718:  sub    $0x1,%eax
    0.00 :   3e71b:  mov    %eax,0x10ed67(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e721:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e726:  xor    %edx,%edx
    0.00 :   3e728:  xor    %edi,%edi
    0.00 :   3e72a:  xor    %esi,%esi
    0.00 :   3e72c:  call   44b60 <make_simple_command@@Base>
    0.00 :   3e731:  lea    0xe0f28(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e738:  orl    $0x4,0x4(%rax)
    0.00 :   3e73c:  mov    %rax,%rdx
    0.00 :   3e73f:  mov    0x0(%rbp),%eax
    0.00 :   3e742:  cmp    $0xa,%eax
    0.00 :   3e745:  je     406b9 <yyparse@@Base+0x2ed9>
    0.00 :   3e74b:  cmp    $0x3b,%eax
    0.00 :   3e74e:  jne    3e75a <yyparse@@Base+0xf7a>
    0.00 :   3e750:  movl   $0x3b,0x117576(%rip)        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   3e75a:  lea    0x1174eb(%rip),%rax        # 155c4c <parser_state@@Base>
    0.00 :   3e761:  andl   $0xfff7ffff,(%rax)
    0.00 :   3e767:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e76c:  mov    0x0(%rbp),%rdx
    0.00 :   3e770:  test   %rdx,%rdx
    0.00 :   3e773:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   3e779:  mov    -0x10(%rbp),%eax
    0.00 :   3e77c:  or     %eax,0x4(%rdx)
    0.00 :   3e77f:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e784:  mov    -0x20(%rbp),%rdi
    0.00 :   3e788:  mov    0x0(%rbp),%rsi
    0.00 :   3e78c:  mov    $0x3b,%edx
    0.00 :   3e791:  call   44380 <command_connect@@Base>
    0.00 :   3e796:  lea    0xe0ec3(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e79d:  mov    %rax,%rdx
    0.00 :   3e7a0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e7a5:  movslq 0x10ecdc(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e7ac:  lea    0x117bad(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e7b3:  lea    0xcf9f4(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e7ba:  mov    %rsi,%rdi
    0.00 :   3e7bd:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e7c0:  mov    -0x10(%rbp),%rdx
    0.00 :   3e7c4:  mov    %ecx,0x30(%rsp)
    0.00 :   3e7c8:  mov    %rdx,0x28(%rsp)
    0.00 :   3e7cd:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3e7d2:  lea    0xcf9d5(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e7d9:  mov    %rax,%rdi
    0.00 :   3e7dc:  call   440e0 <make_word_flags@@Base>
    0.00 :   3e7e1:  xor    %esi,%esi
    0.00 :   3e7e3:  mov    %rax,%rdi
    0.00 :   3e7e6:  call   442b0 <make_word_list@@Base>
    0.00 :   3e7eb:  mov    0x28(%rsp),%rdx
    0.00 :   3e7f0:  mov    -0x50(%rbp),%rdi
    0.00 :   3e7f4:  mov    0x30(%rsp),%ecx
    0.00 :   3e7f8:  mov    %rax,%rsi
    0.00 :   3e7fb:  call   444d0 <make_select_command@@Base>
    0.00 :   3e800:  lea    0xe0e59(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e807:  mov    %rax,%rdx
    0.00 :   3e80a:  mov    0x10ec78(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e810:  test   %eax,%eax
    0.00 :   3e812:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e818:  sub    $0x1,%eax
    0.00 :   3e81b:  mov    %eax,0x10ec67(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e821:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e826:  movslq 0x10ec5b(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e82d:  lea    0x117b2c(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e834:  lea    0xcf973(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e83b:  mov    %rsi,%rdi
    0.00 :   3e83e:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e841:  mov    -0x10(%rbp),%rdx
    0.00 :   3e845:  mov    %ecx,0x30(%rsp)
    0.00 :   3e849:  mov    %rdx,0x28(%rsp)
    0.00 :   3e84e:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3e853:  lea    0xcf954(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e85a:  mov    %rax,%rdi
    0.00 :   3e85d:  call   440e0 <make_word_flags@@Base>
    0.00 :   3e862:  xor    %esi,%esi
    0.00 :   3e864:  mov    %rax,%rdi
    0.00 :   3e867:  call   442b0 <make_word_list@@Base>
    0.00 :   3e86c:  mov    0x28(%rsp),%rdx
    0.00 :   3e871:  mov    -0x40(%rbp),%rdi
    0.00 :   3e875:  mov    0x30(%rsp),%ecx
    0.00 :   3e879:  mov    %rax,%rsi
    0.00 :   3e87c:  call   444d0 <make_select_command@@Base>
    0.00 :   3e881:  lea    0xe0dd8(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e888:  mov    %rax,%rdx
    0.00 :   3e88b:  mov    0x10ebf7(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e891:  test   %eax,%eax
    0.00 :   3e893:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e899:  sub    $0x1,%eax
    0.00 :   3e89c:  mov    %eax,0x10ebe6(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e8a2:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e8a7:  movslq 0x10ebda(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e8ae:  lea    0x117aab(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3e8b5:  lea    0xcf8f2(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e8bc:  mov    %rsi,%rdi
    0.00 :   3e8bf:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3e8c2:  mov    -0x10(%rbp),%rdx
    0.00 :   3e8c6:  mov    %ecx,0x30(%rsp)
    0.00 :   3e8ca:  mov    %rdx,0x28(%rsp)
    0.00 :   3e8cf:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3e8d4:  lea    0xcf8d3(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3e8db:  mov    %rax,%rdi
    0.00 :   3e8de:  call   440e0 <make_word_flags@@Base>
    0.00 :   3e8e3:  xor    %esi,%esi
    0.00 :   3e8e5:  mov    %rax,%rdi
    0.00 :   3e8e8:  call   442b0 <make_word_list@@Base>
    0.00 :   3e8ed:  mov    0x28(%rsp),%rdx
    0.00 :   3e8f2:  mov    -0x40(%rbp),%rdi
    0.00 :   3e8f6:  mov    0x30(%rsp),%ecx
    0.00 :   3e8fa:  mov    %rax,%rsi
    0.00 :   3e8fd:  call   444d0 <make_select_command@@Base>
    0.00 :   3e902:  lea    0xe0d57(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e909:  mov    %rax,%rdx
    0.00 :   3e90c:  mov    0x10eb76(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e912:  test   %eax,%eax
    0.00 :   3e914:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e91a:  sub    $0x1,%eax
    0.00 :   3e91d:  mov    %eax,0x10eb65(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e923:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e928:  mov    0x117a12(%rip),%edx        # 156340 <top_level@@Base+0x1c0>
    0.00 :   3e92e:  mov    -0x10(%rbp),%rsi
    0.00 :   3e932:  mov    -0x30(%rbp),%rdi
    0.00 :   3e936:  call   46570 <make_arith_for_command@@Base>
    0.00 :   3e93b:  lea    0xe0d1e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e942:  test   %rax,%rax
    0.00 :   3e945:  mov    %rax,%rdx
    0.00 :   3e948:  je     40673 <yyparse@@Base+0x2e93>
    0.00 :   3e94e:  mov    0x10eb34(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e954:  test   %eax,%eax
    0.00 :   3e956:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e95c:  sub    $0x1,%eax
    0.00 :   3e95f:  mov    %eax,0x10eb23(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e965:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e96a:  mov    0x1179d0(%rip),%edx        # 156340 <top_level@@Base+0x1c0>
    0.00 :   3e970:  mov    -0x10(%rbp),%rsi
    0.00 :   3e974:  mov    -0x30(%rbp),%rdi
    0.00 :   3e978:  call   46570 <make_arith_for_command@@Base>
    0.00 :   3e97d:  lea    0xe0cdc(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e984:  test   %rax,%rax
    0.00 :   3e987:  mov    %rax,%rdx
    0.00 :   3e98a:  je     40673 <yyparse@@Base+0x2e93>
    0.00 :   3e990:  mov    0x10eaf2(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e996:  test   %eax,%eax
    0.00 :   3e998:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3e99e:  sub    $0x1,%eax
    0.00 :   3e9a1:  mov    %eax,0x10eae1(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3e9a7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e9ac:  mov    0x0(%rbp),%rdx
    0.00 :   3e9b0:  mov    -0x10(%rbp),%rax
    0.00 :   3e9b4:  mov    %rax,(%rdx)
    0.00 :   3e9b7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e9bc:  mov    0x0(%rbp),%rdx
    0.00 :   3e9c0:  mov    -0x10(%rbp),%rsi
    0.00 :   3e9c4:  mov    -0x30(%rbp),%rdi
    0.00 :   3e9c8:  call   44770 <make_if_command@@Base>
    0.00 :   3e9cd:  lea    0xe0c8c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e9d4:  mov    %rax,%rdx
    0.00 :   3e9d7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e9dc:  mov    0x0(%rbp),%rdx
    0.00 :   3e9e0:  mov    -0x20(%rbp),%rsi
    0.00 :   3e9e4:  mov    -0x40(%rbp),%rdi
    0.00 :   3e9e8:  call   44770 <make_if_command@@Base>
    0.00 :   3e9ed:  lea    0xe0c6c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3e9f4:  mov    %rax,%rdx
    0.00 :   3e9f7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3e9fc:  mov    -0x20(%rbp),%rdi
    0.00 :   3ea00:  xor    %esi,%esi
    0.00 :   3ea02:  mov    $0x26,%edx
    0.00 :   3ea07:  cmpl   $0x6,(%rdi)
    0.00 :   3ea0a:  je     406c8 <yyparse@@Base+0x2ee8>
    0.00 :   3ea10:  call   44380 <command_connect@@Base>
    0.00 :   3ea15:  lea    0xe0c44(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ea1c:  mov    %rax,%rdx
    0.00 :   3ea1f:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ea24:  lea    0x117289(%rip),%rax        # 155cb4 <need_here_doc@@Base>
    0.00 :   3ea2b:  mov    0x0(%rbp),%rdx
    0.00 :   3ea2f:  mov    (%rax),%r8d
    0.00 :   3ea32:  test   %r8d,%r8d
    0.00 :   3ea35:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   3ea3b:  mov    %rdx,0x28(%rsp)
    0.00 :   3ea40:  call   35200 <gather_here_documents@@Base>
    0.00 :   3ea45:  mov    0x28(%rsp),%rdx
    0.00 :   3ea4a:  lea    0xe0c0f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ea51:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ea56:  mov    -0x10(%rbp),%rdx
    0.00 :   3ea5a:  mov    -0x20(%rbp),%rax
    0.00 :   3ea5e:  mov    %rax,(%rdx)
    0.00 :   3ea61:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ea66:  mov    -0x20(%rbp),%eax
    0.00 :   3ea69:  mov    $0x30,%edi
    0.00 :   3ea6e:  movl   $0x0,0x117af0(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ea78:  mov    %eax,0x117af2(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ea7e:  mov    0x117aeb(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ea85:  mov    %rax,0x30(%rsp)
    0.00 :   3ea8a:  mov    0x117ad7(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ea91:  mov    %rax,0x28(%rsp)
    0.00 :   3ea96:  call   30610 <malloc@plt>
    0.00 :   3ea9b:  lea    0xe0bbe(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eaa2:  test   %rax,%rax
    0.00 :   3eaa5:  mov    %rax,%rdx
    0.00 :   3eaa8:  je     4071d <yyparse@@Base+0x2f3d>
    0.00 :   3eaae:  mov    0x30(%rsp),%rax
    0.00 :   3eab3:  movq   $0x0,0x28(%rdx)
    0.00 :   3eabb:  movq   $0x0,0x10(%rdx)
    0.00 :   3eac3:  mov    %rax,0x8(%rdx)
    0.00 :   3eac7:  mov    0x28(%rsp),%rax
    0.00 :   3eacc:  movl   $0x9,0x18(%rdx)
    0.00 :   3ead3:  mov    %rax,0x20(%rdx)
    0.00 :   3ead7:  movq   $0x0,(%rdx)
    0.00 :   3eade:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3eae3:  mov    -0x10(%rbp),%rdx
    0.00 :   3eae7:  orl    $0x1,0x18(%rdx)
    0.00 :   3eaeb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3eaf0:  movl   $0x0,0x117a76(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3eafa:  mov    0x117a6f(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3eb01:  mov    $0x30,%edi
    0.00 :   3eb06:  movl   $0x0,0x117a58(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3eb10:  mov    %rax,0x30(%rsp)
    0.00 :   3eb15:  mov    0x117a4c(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3eb1c:  mov    %rax,0x28(%rsp)
    0.00 :   3eb21:  call   30610 <malloc@plt>
    0.00 :   3eb26:  lea    0xe0b33(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eb2d:  test   %rax,%rax
    0.00 :   3eb30:  mov    %rax,%rdx
    0.00 :   3eb33:  je     409ef <yyparse@@Base+0x320f>
    0.00 :   3eb39:  mov    0x30(%rsp),%rax
    0.00 :   3eb3e:  movq   $0x0,0x28(%rdx)
    0.00 :   3eb46:  movq   $0x0,0x10(%rdx)
    0.00 :   3eb4e:  mov    %rax,0x8(%rdx)
    0.00 :   3eb52:  mov    0x28(%rsp),%rax
    0.00 :   3eb57:  movl   $0x9,0x18(%rdx)
    0.00 :   3eb5e:  mov    %rax,0x20(%rdx)
    0.00 :   3eb62:  movq   $0x0,(%rdx)
    0.00 :   3eb69:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3eb6e:  mov    -0x20(%rbp),%rax
    0.00 :   3eb72:  mov    $0x30,%edi
    0.00 :   3eb77:  movl   $0x0,0x1179e7(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3eb81:  mov    %rax,0x30(%rsp)
    0.00 :   3eb86:  mov    %rax,0x1179e3(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3eb8d:  mov    0x1179d4(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3eb94:  mov    %rax,0x28(%rsp)
    0.00 :   3eb99:  call   30610 <malloc@plt>
    0.00 :   3eb9e:  lea    0xe0abb(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eba5:  test   %rax,%rax
    0.00 :   3eba8:  mov    %rax,%rdx
    0.00 :   3ebab:  je     40a41 <yyparse@@Base+0x3261>
    0.00 :   3ebb1:  mov    0x30(%rsp),%rax
    0.00 :   3ebb6:  movq   $0x0,0x28(%rdx)
    0.00 :   3ebbe:  movq   $0x1,0x10(%rdx)
    0.00 :   3ebc6:  mov    %rax,0x8(%rdx)
    0.00 :   3ebca:  mov    0x28(%rsp),%rax
    0.00 :   3ebcf:  movl   $0x9,0x18(%rdx)
    0.00 :   3ebd6:  mov    %rax,0x20(%rdx)
    0.00 :   3ebda:  movq   $0x0,(%rdx)
    0.00 :   3ebe1:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ebe6:  mov    -0x20(%rbp),%eax
    0.00 :   3ebe9:  mov    $0x30,%edi
    0.00 :   3ebee:  movl   $0x0,0x117970(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ebf8:  mov    %eax,0x117972(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ebfe:  mov    0x11796b(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ec05:  mov    %rax,0x30(%rsp)
    0.00 :   3ec0a:  mov    0x117957(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ec11:  mov    %rax,0x28(%rsp)
    0.00 :   3ec16:  call   30610 <malloc@plt>
    0.00 :   3ec1b:  lea    0xe0a3e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ec22:  test   %rax,%rax
    0.00 :   3ec25:  mov    %rax,%rdx
    0.00 :   3ec28:  je     40a6a <yyparse@@Base+0x328a>
    0.00 :   3ec2e:  mov    0x30(%rsp),%rax
    0.00 :   3ec33:  movq   $0x0,0x28(%rdx)
    0.00 :   3ec3b:  movq   $0x0,0x10(%rdx)
    0.00 :   3ec43:  mov    %rax,0x8(%rdx)
    0.00 :   3ec47:  mov    0x28(%rsp),%rax
    0.00 :   3ec4c:  movl   $0x9,0x18(%rdx)
    0.00 :   3ec53:  mov    %rax,0x20(%rdx)
    0.00 :   3ec57:  movq   $0x0,(%rdx)
    0.00 :   3ec5e:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ec63:  movl   $0x1,0x117903(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ec6d:  mov    0x1178fc(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ec74:  mov    $0x30,%edi
    0.00 :   3ec79:  movl   $0x0,0x1178e5(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ec83:  mov    %rax,0x30(%rsp)
    0.00 :   3ec88:  mov    0x1178d9(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ec8f:  mov    %rax,0x28(%rsp)
    0.00 :   3ec94:  call   30610 <malloc@plt>
    0.00 :   3ec99:  lea    0xe09c0(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eca0:  test   %rax,%rax
    0.00 :   3eca3:  mov    %rax,%rdx
    0.00 :   3eca6:  je     40a18 <yyparse@@Base+0x3238>
    0.00 :   3ecac:  mov    0x30(%rsp),%rax
    0.00 :   3ecb1:  movq   $0x0,0x28(%rdx)
    0.00 :   3ecb9:  movq   $0x0,0x10(%rdx)
    0.00 :   3ecc1:  mov    %rax,0x8(%rdx)
    0.00 :   3ecc5:  mov    0x28(%rsp),%rax
    0.00 :   3ecca:  movl   $0x9,0x18(%rdx)
    0.00 :   3ecd1:  mov    %rax,0x20(%rdx)
    0.00 :   3ecd5:  movq   $0x0,(%rdx)
    0.00 :   3ecdc:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ece1:  mov    0x0(%rbp),%rdx
    0.00 :   3ece5:  mov    -0x20(%rbp),%rdi
    0.00 :   3ece9:  mov    $0x1,%ecx
    0.00 :   3ecee:  mov    $0xe,%esi
    0.00 :   3ecf3:  mov    %rdx,0x11786e(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ecfa:  mov    %rdi,0x11786f(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed01:  call   46fa0 <make_redirection@@Base>
    0.00 :   3ed06:  lea    0xe0953(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ed0d:  mov    %rax,%rdx
    0.00 :   3ed10:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ed15:  mov    0x0(%rbp),%rdx
    0.00 :   3ed19:  xor    %ecx,%ecx
    0.00 :   3ed1b:  mov    $0xe,%esi
    0.00 :   3ed20:  movl   $0x1,0x117846(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed2a:  mov    0x11783f(%rip),%rdi        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed31:  mov    %rdx,0x117830(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ed38:  call   46fa0 <make_redirection@@Base>
    0.00 :   3ed3d:  lea    0xe091c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ed44:  mov    %rax,%rdx
    0.00 :   3ed47:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ed4c:  mov    0x0(%rbp),%rdx
    0.00 :   3ed50:  mov    -0x20(%rbp),%rdi
    0.00 :   3ed54:  mov    $0x1,%ecx
    0.00 :   3ed59:  mov    $0xd,%esi
    0.00 :   3ed5e:  mov    %rdx,0x117803(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ed65:  mov    %rdi,0x117804(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed6c:  call   46fa0 <make_redirection@@Base>
    0.00 :   3ed71:  lea    0xe08e8(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ed78:  mov    %rax,%rdx
    0.00 :   3ed7b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ed80:  mov    -0x20(%rbp),%eax
    0.00 :   3ed83:  mov    0x0(%rbp),%rdx
    0.00 :   3ed87:  xor    %ecx,%ecx
    0.00 :   3ed89:  mov    $0xe,%esi
    0.00 :   3ed8e:  mov    %eax,0x1177dc(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed94:  mov    0x1177d5(%rip),%rdi        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ed9b:  mov    %rdx,0x1177c6(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3eda2:  call   46fa0 <make_redirection@@Base>
    0.00 :   3eda7:  lea    0xe08b2(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3edae:  mov    %rax,%rdx
    0.00 :   3edb1:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3edb6:  movslq 0x10e6cb(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3edbd:  lea    0x11759c(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3edc4:  mov    -0x70(%rbp),%rdi
    0.00 :   3edc8:  xor    %esi,%esi
    0.00 :   3edca:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3edcd:  mov    -0x10(%rbp),%rdx
    0.00 :   3edd1:  call   44420 <make_for_command@@Base>
    0.00 :   3edd6:  lea    0xe0883(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eddd:  mov    %rax,%rdx
    0.00 :   3ede0:  mov    0x10e6a2(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ede6:  test   %eax,%eax
    0.00 :   3ede8:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3edee:  sub    $0x1,%eax
    0.00 :   3edf1:  mov    %eax,0x10e691(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3edf7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3edfc:  movslq 0x10e685(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ee03:  mov    -0x50(%rbp),%rsi
    0.00 :   3ee07:  lea    0x117552(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3ee0e:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3ee11:  mov    -0x10(%rbp),%rdx
    0.00 :   3ee15:  test   %rsi,%rsi
    0.00 :   3ee18:  je     3ee37 <yyparse@@Base+0x1657>
    0.00 :   3ee1a:  mov    (%rsi),%rax
    0.00 :   3ee1d:  test   %rax,%rax
    0.00 :   3ee20:  je     3ee37 <yyparse@@Base+0x1657>
    0.00 :   3ee22:  xor    %edi,%edi
    0.00 :   3ee24:  jmp    3ee2f <yyparse@@Base+0x164f>
    0.00 :   3ee26:  mov    %rsi,%rdi
    0.00 :   3ee29:  mov    %rax,%rsi
    0.00 :   3ee2c:  mov    (%rax),%rax
    0.00 :   3ee2f:  mov    %rdi,(%rsi)
    0.00 :   3ee32:  test   %rax,%rax
    0.00 :   3ee35:  jne    3ee26 <yyparse@@Base+0x1646>
    0.00 :   3ee37:  mov    -0x80(%rbp),%rdi
    0.00 :   3ee3b:  call   44420 <make_for_command@@Base>
    0.00 :   3ee40:  lea    0xe0819(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ee47:  mov    %rax,%rdx
    0.00 :   3ee4a:  mov    0x10e638(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ee50:  test   %eax,%eax
    0.00 :   3ee52:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3ee58:  sub    $0x1,%eax
    0.00 :   3ee5b:  mov    %eax,0x10e627(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ee61:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ee66:  movslq 0x10e61b(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ee6d:  mov    -0x50(%rbp),%rsi
    0.00 :   3ee71:  lea    0x1174e8(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3ee78:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3ee7b:  mov    -0x10(%rbp),%rdx
    0.00 :   3ee7f:  test   %rsi,%rsi
    0.00 :   3ee82:  je     3eea1 <yyparse@@Base+0x16c1>
    0.00 :   3ee84:  mov    (%rsi),%rax
    0.00 :   3ee87:  test   %rax,%rax
    0.00 :   3ee8a:  je     3eea1 <yyparse@@Base+0x16c1>
    0.00 :   3ee8c:  xor    %edi,%edi
    0.00 :   3ee8e:  jmp    3ee99 <yyparse@@Base+0x16b9>
    0.00 :   3ee90:  mov    %rsi,%rdi
    0.00 :   3ee93:  mov    %rax,%rsi
    0.00 :   3ee96:  mov    (%rax),%rax
    0.00 :   3ee99:  mov    %rdi,(%rsi)
    0.00 :   3ee9c:  test   %rax,%rax
    0.00 :   3ee9f:  jne    3ee90 <yyparse@@Base+0x16b0>
    0.00 :   3eea1:  mov    -0x80(%rbp),%rdi
    0.00 :   3eea5:  call   44420 <make_for_command@@Base>
    0.00 :   3eeaa:  lea    0xe07af(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3eeb1:  mov    %rax,%rdx
    0.00 :   3eeb4:  mov    0x10e5ce(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3eeba:  test   %eax,%eax
    0.00 :   3eebc:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3eec2:  sub    $0x1,%eax
    0.00 :   3eec5:  mov    %eax,0x10e5bd(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3eecb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3eed0:  movslq 0x10e5b1(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3eed7:  lea    0x117482(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3eede:  lea    0xcf2c9(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3eee5:  mov    %rsi,%rdi
    0.00 :   3eee8:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3eeeb:  mov    -0x10(%rbp),%rdx
    0.00 :   3eeef:  mov    %ecx,0x30(%rsp)
    0.00 :   3eef3:  mov    %rdx,0x28(%rsp)
    0.00 :   3eef8:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3eefd:  lea    0xcf2aa(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3ef04:  mov    %rax,%rdi
    0.00 :   3ef07:  call   440e0 <make_word_flags@@Base>
    0.00 :   3ef0c:  xor    %esi,%esi
    0.00 :   3ef0e:  mov    %rax,%rdi
    0.00 :   3ef11:  call   442b0 <make_word_list@@Base>
    0.00 :   3ef16:  mov    0x28(%rsp),%rdx
    0.00 :   3ef1b:  mov    -0x50(%rbp),%rdi
    0.00 :   3ef1f:  mov    0x30(%rsp),%ecx
    0.00 :   3ef23:  mov    %rax,%rsi
    0.00 :   3ef26:  call   44420 <make_for_command@@Base>
    0.00 :   3ef2b:  lea    0xe072e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ef32:  mov    %rax,%rdx
    0.00 :   3ef35:  mov    0x10e54d(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ef3b:  test   %eax,%eax
    0.00 :   3ef3d:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3ef43:  sub    $0x1,%eax
    0.00 :   3ef46:  mov    %eax,0x10e53c(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ef4c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ef51:  movslq 0x10e530(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3ef58:  lea    0x117401(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3ef5f:  lea    0xcf248(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3ef66:  mov    %rsi,%rdi
    0.00 :   3ef69:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3ef6c:  mov    -0x10(%rbp),%rdx
    0.00 :   3ef70:  mov    %ecx,0x30(%rsp)
    0.00 :   3ef74:  mov    %rdx,0x28(%rsp)
    0.00 :   3ef79:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3ef7e:  lea    0xcf229(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3ef85:  mov    %rax,%rdi
    0.00 :   3ef88:  call   440e0 <make_word_flags@@Base>
    0.00 :   3ef8d:  xor    %esi,%esi
    0.00 :   3ef8f:  mov    %rax,%rdi
    0.00 :   3ef92:  call   442b0 <make_word_list@@Base>
    0.00 :   3ef97:  mov    0x28(%rsp),%rdx
    0.00 :   3ef9c:  mov    -0x50(%rbp),%rdi
    0.00 :   3efa0:  mov    0x30(%rsp),%ecx
    0.00 :   3efa4:  mov    %rax,%rsi
    0.00 :   3efa7:  call   44420 <make_for_command@@Base>
    0.00 :   3efac:  lea    0xe06ad(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3efb3:  mov    %rax,%rdx
    0.00 :   3efb6:  mov    0x10e4cc(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3efbc:  test   %eax,%eax
    0.00 :   3efbe:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3efc4:  sub    $0x1,%eax
    0.00 :   3efc7:  mov    %eax,0x10e4bb(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3efcd:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3efd2:  movslq 0x10e4af(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3efd9:  lea    0x117380(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3efe0:  lea    0xcf1c7(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3efe7:  mov    %rsi,%rdi
    0.00 :   3efea:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3efed:  mov    -0x10(%rbp),%rdx
    0.00 :   3eff1:  mov    %ecx,0x30(%rsp)
    0.00 :   3eff5:  mov    %rdx,0x28(%rsp)
    0.00 :   3effa:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3efff:  lea    0xcf1a8(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3f006:  mov    %rax,%rdi
    0.00 :   3f009:  call   440e0 <make_word_flags@@Base>
    0.00 :   3f00e:  xor    %esi,%esi
    0.00 :   3f010:  mov    %rax,%rdi
    0.00 :   3f013:  call   442b0 <make_word_list@@Base>
    0.00 :   3f018:  mov    0x28(%rsp),%rdx
    0.00 :   3f01d:  mov    -0x40(%rbp),%rdi
    0.00 :   3f021:  mov    0x30(%rsp),%ecx
    0.00 :   3f025:  mov    %rax,%rsi
    0.00 :   3f028:  call   44420 <make_for_command@@Base>
    0.00 :   3f02d:  lea    0xe062c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f034:  mov    %rax,%rdx
    0.00 :   3f037:  mov    0x10e44b(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f03d:  test   %eax,%eax
    0.00 :   3f03f:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3f045:  sub    $0x1,%eax
    0.00 :   3f048:  mov    %eax,0x10e43a(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f04e:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f053:  movslq 0x10e42e(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f05a:  lea    0x1172ff(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3f061:  lea    0xcf146(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3f068:  mov    %rsi,%rdi
    0.00 :   3f06b:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3f06e:  mov    -0x10(%rbp),%rdx
    0.00 :   3f072:  mov    %ecx,0x30(%rsp)
    0.00 :   3f076:  mov    %rdx,0x28(%rsp)
    0.00 :   3f07b:  call   43fe0 <make_bare_word@@Base>
    0.00 :   3f080:  lea    0xcf127(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   3f087:  mov    %rax,%rdi
    0.00 :   3f08a:  call   440e0 <make_word_flags@@Base>
    0.00 :   3f08f:  xor    %esi,%esi
    0.00 :   3f091:  mov    %rax,%rdi
    0.00 :   3f094:  call   442b0 <make_word_list@@Base>
    0.00 :   3f099:  mov    0x28(%rsp),%rdx
    0.00 :   3f09e:  mov    -0x40(%rbp),%rdi
    0.00 :   3f0a2:  mov    0x30(%rsp),%ecx
    0.00 :   3f0a6:  mov    %rax,%rsi
    0.00 :   3f0a9:  call   44420 <make_for_command@@Base>
    0.00 :   3f0ae:  lea    0xe05ab(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f0b5:  mov    %rax,%rdx
    0.00 :   3f0b8:  mov    0x10e3ca(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f0be:  test   %eax,%eax
    0.00 :   3f0c0:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3f0c6:  sub    $0x1,%eax
    0.00 :   3f0c9:  mov    %eax,0x10e3b9(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f0cf:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f0d4:  mov    -0x10(%rbp),%rdx
    0.00 :   3f0d8:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f0dd:  mov    0x11725d(%rip),%edx        # 156340 <top_level@@Base+0x1c0>
    0.00 :   3f0e3:  mov    -0x10(%rbp),%rsi
    0.00 :   3f0e7:  mov    -0x50(%rbp),%rdi
    0.00 :   3f0eb:  call   46570 <make_arith_for_command@@Base>
    0.00 :   3f0f0:  lea    0xe0569(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f0f7:  test   %rax,%rax
    0.00 :   3f0fa:  mov    %rax,%rdx
    0.00 :   3f0fd:  je     40673 <yyparse@@Base+0x2e93>
    0.00 :   3f103:  mov    0x10e37f(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f109:  test   %eax,%eax
    0.00 :   3f10b:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3f111:  sub    $0x1,%eax
    0.00 :   3f114:  mov    %eax,0x10e36e(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f11a:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f11f:  movslq 0x10e362(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f126:  lea    0x117233(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   3f12d:  mov    -0x70(%rbp),%rdi
    0.00 :   3f131:  xor    %esi,%esi
    0.00 :   3f133:  mov    (%rax,%rdx,4),%ecx
    0.00 :   3f136:  mov    -0x10(%rbp),%rdx
    0.00 :   3f13a:  call   44420 <make_for_command@@Base>
    0.00 :   3f13f:  lea    0xe051a(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f146:  mov    %rax,%rdx
    0.00 :   3f149:  mov    0x10e339(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f14f:  test   %eax,%eax
    0.00 :   3f151:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3f157:  sub    $0x1,%eax
    0.00 :   3f15a:  mov    %eax,0x10e328(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f160:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f165:  mov    0x1171d5(%rip),%edx        # 156340 <top_level@@Base+0x1c0>
    0.00 :   3f16b:  mov    -0x10(%rbp),%rsi
    0.00 :   3f16f:  mov    -0x50(%rbp),%rdi
    0.00 :   3f173:  call   46570 <make_arith_for_command@@Base>
    0.00 :   3f178:  lea    0xe04e1(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f17f:  test   %rax,%rax
    0.00 :   3f182:  mov    %rax,%rdx
    0.00 :   3f185:  je     40673 <yyparse@@Base+0x2e93>
    0.00 :   3f18b:  mov    0x10e2f7(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f191:  test   %eax,%eax
    0.00 :   3f193:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   3f199:  sub    $0x1,%eax
    0.00 :   3f19c:  mov    %eax,0x10e2e6(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   3f1a2:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f1a7:  lea    0x116bca(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f1ae:  mov    0x8(%rsp),%r10
    0.00 :   3f1b3:  movq   $0x0,(%rax)
    0.00 :   3f1ba:  lea    0x116a8f(%rip),%rax        # 155c50 <eof_encountered@@Base>
    0.00 :   3f1c1:  movl   $0x0,(%rax)
    0.00 :   3f1c7:  lea    0x116e22(%rip),%rax        # 155ff0 <interactive@@Base>
    0.00 :   3f1ce:  mov    (%rax),%ebx
    0.00 :   3f1d0:  test   %ebx,%ebx
    0.00 :   3f1d2:  je     3f834 <yyparse@@Base+0x2054>
    0.00 :   3f1d8:  lea    0x116a69(%rip),%rax        # 155c48 <parse_and_execute_level@@Base>
    0.00 :   3f1df:  xor    %r13d,%r13d
    0.00 :   3f1e2:  mov    %r10,%r12
    0.00 :   3f1e5:  mov    (%rax),%r11d
    0.00 :   3f1e8:  test   %r11d,%r11d
    0.00 :   3f1eb:  setne  %r13b
    0.00 :   3f1ef:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f1f4:  lea    0x116b7d(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f1fb:  mov    0x8(%rsp),%r10
    0.00 :   3f200:  movq   $0x0,(%rax)
    0.00 :   3f207:  lea    0x116a3e(%rip),%rdx        # 155c4c <parser_state@@Base>
    0.00 :   3f20e:  mov    %r10,%r12
    0.00 :   3f211:  mov    (%rdx),%eax
    0.00 :   3f213:  mov    %eax,%r13d
    0.00 :   3f216:  and    $0x40,%r13d
    0.00 :   3f21a:  je     3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f220:  or     $0x80,%ah
    0.00 :   3f223:  xor    %r13d,%r13d
    0.00 :   3f226:  mov    %eax,(%rdx)
    0.00 :   3f228:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f22d:  mov    -0x20(%rbp),%rsi
    0.00 :   3f231:  mov    0x0(%rbp),%rdi
    0.00 :   3f235:  call   442b0 <make_word_list@@Base>
    0.00 :   3f23a:  lea    0xe041f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f241:  mov    %rax,%rdx
    0.00 :   3f244:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f249:  mov    -0x10(%rbp),%rdx
    0.00 :   3f24d:  mov    -0x20(%rbp),%rax
    0.00 :   3f251:  orl    $0x2,0x18(%rdx)
    0.00 :   3f255:  mov    %rax,(%rdx)
    0.00 :   3f258:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f25d:  mov    -0x10(%rbp),%rdx
    0.00 :   3f261:  orl    $0x2,0x18(%rdx)
    0.00 :   3f265:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f26a:  mov    -0x10(%rbp),%rdx
    0.00 :   3f26e:  mov    -0x20(%rbp),%rax
    0.00 :   3f272:  orl    $0x1,0x18(%rdx)
    0.00 :   3f276:  mov    %rax,(%rdx)
    0.00 :   3f279:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f27e:  mov    -0x10(%rbp),%rsi
    0.00 :   3f282:  mov    0x0(%rbp),%rdi
    0.00 :   3f286:  call   442b0 <make_word_list@@Base>
    0.00 :   3f28b:  lea    0xe03ce(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f292:  mov    %rax,%rdx
    0.00 :   3f295:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f29a:  mov    -0x30(%rbp),%rdi
    0.00 :   3f29e:  mov    0x0(%rbp),%rsi
    0.00 :   3f2a2:  mov    $0x26,%edx
    0.00 :   3f2a7:  cmpl   $0x6,(%rdi)
    0.00 :   3f2aa:  je     406f0 <yyparse@@Base+0x2f10>
    0.00 :   3f2b0:  call   44380 <command_connect@@Base>
    0.00 :   3f2b5:  lea    0xe03a4(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f2bc:  mov    %rax,%rdx
    0.00 :   3f2bf:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f2c4:  movabs $0xffffffff00000000,%rax
    0.00 :   3f2ce:  and    %rdx,%rax
    0.00 :   3f2d1:  or     $0x3b,%rax
    0.00 :   3f2d5:  mov    %rax,%rdx
    0.00 :   3f2d8:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f2dd:  mov    -0x20(%rbp),%eax
    0.00 :   3f2e0:  mov    $0x30,%edi
    0.00 :   3f2e5:  mov    %eax,0x117285(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f2eb:  mov    0x0(%rbp),%rax
    0.00 :   3f2ef:  mov    %rax,0x30(%rsp)
    0.00 :   3f2f4:  mov    %rax,0x11726d(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f2fb:  mov    0x11726e(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f302:  mov    %rax,0x28(%rsp)
    0.00 :   3f307:  call   30610 <malloc@plt>
    0.00 :   3f30c:  mov    %rax,%rdx
    0.00 :   3f30f:  test   %rax,%rax
    0.00 :   3f312:  je     409a4 <yyparse@@Base+0x31c4>
    0.00 :   3f318:  mov    0x28(%rsp),%rax
    0.00 :   3f31d:  movq   $0x0,0x28(%rdx)
    0.00 :   3f325:  mov    %rdx,%rdi
    0.00 :   3f328:  movq   $0x0,0x10(%rdx)
    0.00 :   3f330:  mov    %rax,0x8(%rdx)
    0.00 :   3f334:  mov    0x30(%rsp),%rax
    0.00 :   3f339:  movl   $0x4,0x18(%rdx)
    0.00 :   3f340:  mov    %rax,0x20(%rdx)
    0.00 :   3f344:  movq   $0x0,(%rdx)
    0.00 :   3f34b:  mov    %rdx,0x28(%rsp)
    0.00 :   3f350:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   3f355:  mov    0x28(%rsp),%rdx
    0.00 :   3f35a:  lea    0xe02ff(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f361:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f366:  mov    0x0(%rbp),%rax
    0.00 :   3f36a:  mov    $0x30,%edi
    0.00 :   3f36f:  movl   $0x0,0x1171f7(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f379:  mov    %rax,0x30(%rsp)
    0.00 :   3f37e:  mov    %rax,0x1171e3(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f385:  mov    0x1171e4(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f38c:  mov    %rax,0x28(%rsp)
    0.00 :   3f391:  call   30610 <malloc@plt>
    0.00 :   3f396:  mov    %rax,%rdx
    0.00 :   3f399:  test   %rax,%rax
    0.00 :   3f39c:  je     4088c <yyparse@@Base+0x30ac>
    0.00 :   3f3a2:  mov    0x28(%rsp),%rax
    0.00 :   3f3a7:  movq   $0x0,0x28(%rdx)
    0.00 :   3f3af:  mov    %rdx,%rdi
    0.00 :   3f3b2:  movq   $0x0,0x10(%rdx)
    0.00 :   3f3ba:  mov    %rax,0x8(%rdx)
    0.00 :   3f3be:  mov    0x30(%rsp),%rax
    0.00 :   3f3c3:  movl   $0x4,0x18(%rdx)
    0.00 :   3f3ca:  mov    %rax,0x20(%rdx)
    0.00 :   3f3ce:  movq   $0x0,(%rdx)
    0.00 :   3f3d5:  mov    %rdx,0x28(%rsp)
    0.00 :   3f3da:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   3f3df:  mov    0x28(%rsp),%rdx
    0.00 :   3f3e4:  lea    0xe0275(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f3eb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f3f0:  lea    0x116981(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f3f7:  mov    -0x10(%rbp),%rdx
    0.00 :   3f3fb:  mov    0x8(%rsp),%r10
    0.00 :   3f400:  mov    %rdx,(%rax)
    0.00 :   3f403:  lea    0x116846(%rip),%rax        # 155c50 <eof_encountered@@Base>
    0.00 :   3f40a:  movl   $0x0,(%rax)
    0.00 :   3f410:  jmp    3f207 <yyparse@@Base+0x1a27>
    0.00 :   3f415:  mov    0x0(%rbp),%rdx
    0.00 :   3f419:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f41e:  mov    0x0(%rbp),%r12
    0.00 :   3f422:  xor    %edx,%edx
    0.00 :   3f424:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f429:  mov    0x0(%rbp),%rdx
    0.00 :   3f42d:  xor    %r12d,%r12d
    0.00 :   3f430:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f435:  mov    0x0(%rbp),%rdx
    0.00 :   3f439:  xor    %r12d,%r12d
    0.00 :   3f43c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f441:  mov    0x0(%rbp),%rax
    0.00 :   3f445:  mov    $0x30,%edi
    0.00 :   3f44a:  movl   $0x1,0x11711c(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f454:  mov    %rax,0x30(%rsp)
    0.00 :   3f459:  mov    %rax,0x117108(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f460:  mov    0x117109(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f467:  mov    %rax,0x28(%rsp)
    0.00 :   3f46c:  call   30610 <malloc@plt>
    0.00 :   3f471:  lea    0xe01e8(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f478:  test   %rax,%rax
    0.00 :   3f47b:  mov    %rax,%rdx
    0.00 :   3f47e:  je     40746 <yyparse@@Base+0x2f66>
    0.00 :   3f484:  mov    0x28(%rsp),%rax
    0.00 :   3f489:  movq   $0x0,0x28(%rdx)
    0.00 :   3f491:  movq   $0x0,(%rdx)
    0.00 :   3f498:  mov    %rax,0x8(%rdx)
    0.00 :   3f49c:  mov    0x30(%rsp),%rax
    0.00 :   3f4a1:  movl   $0x13,0x18(%rdx)
    0.00 :   3f4a8:  mov    %rax,0x20(%rdx)
    0.00 :   3f4ac:  movabs $0x44100000000,%rax
    0.00 :   3f4b6:  mov    %rax,0x10(%rdx)
    0.00 :   3f4ba:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f4bf:  mov    0x0(%rbp),%rax
    0.00 :   3f4c3:  mov    $0x30,%edi
    0.00 :   3f4c8:  movl   $0x1,0x11709e(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f4d2:  mov    %rax,0x30(%rsp)
    0.00 :   3f4d7:  mov    %rax,0x11708a(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f4de:  mov    0x11708b(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f4e5:  mov    %rax,0x28(%rsp)
    0.00 :   3f4ea:  call   30610 <malloc@plt>
    0.00 :   3f4ef:  lea    0xe016a(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f4f6:  test   %rax,%rax
    0.00 :   3f4f9:  mov    %rax,%rdx
    0.00 :   3f4fc:  je     40a93 <yyparse@@Base+0x32b3>
    0.00 :   3f502:  mov    0x28(%rsp),%rax
    0.00 :   3f507:  movq   $0x0,0x28(%rdx)
    0.00 :   3f50f:  movq   $0x0,(%rdx)
    0.00 :   3f516:  mov    %rax,0x8(%rdx)
    0.00 :   3f51a:  mov    0x30(%rsp),%rax
    0.00 :   3f51f:  movl   $0xa,0x18(%rdx)
    0.00 :   3f526:  mov    %rax,0x20(%rdx)
    0.00 :   3f52a:  movabs $0x24100000000,%rax
    0.00 :   3f534:  mov    %rax,0x10(%rdx)
    0.00 :   3f538:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f53d:  mov    -0x20(%rbp),%rax
    0.00 :   3f541:  mov    $0x30,%edi
    0.00 :   3f546:  movl   $0x0,0x117018(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f550:  mov    %rax,0x30(%rsp)
    0.00 :   3f555:  mov    %rax,0x117014(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f55c:  mov    0x117005(%rip),%rax        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f563:  mov    %rax,0x28(%rsp)
    0.00 :   3f568:  call   30610 <malloc@plt>
    0.00 :   3f56d:  lea    0xe00ec(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f574:  test   %rax,%rax
    0.00 :   3f577:  mov    %rax,%rdx
    0.00 :   3f57a:  je     40900 <yyparse@@Base+0x3120>
    0.00 :   3f580:  mov    0x30(%rsp),%rax
    0.00 :   3f585:  movq   $0x0,0x28(%rdx)
    0.00 :   3f58d:  movq   $0x1,0x10(%rdx)
    0.00 :   3f595:  mov    %rax,0x8(%rdx)
    0.00 :   3f599:  mov    0x28(%rsp),%rax
    0.00 :   3f59e:  movl   $0x9,0x18(%rdx)
    0.00 :   3f5a5:  mov    %rax,0x20(%rdx)
    0.00 :   3f5a9:  movq   $0x0,(%rdx)
    0.00 :   3f5b0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f5b5:  lea    0x1166f8(%rip),%rax        # 155cb4 <need_here_doc@@Base>
    0.00 :   3f5bc:  mov    0x0(%rbp),%rcx
    0.00 :   3f5c0:  mov    (%rax),%edi
    0.00 :   3f5c2:  mov    %rcx,%rdx
    0.00 :   3f5c5:  test   %edi,%edi
    0.00 :   3f5c7:  jne    3f75c <yyparse@@Base+0x1f7c>
    0.00 :   3f5cd:  lea    0x116678(%rip),%rax        # 155c4c <parser_state@@Base>
    0.00 :   3f5d4:  testb  $0x40,(%rax)
    0.00 :   3f5d7:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   3f5dd:  lea    0x11665c(%rip),%rax        # 155c40 <shell_eof_token@@Base>
    0.00 :   3f5e4:  lea    0x116659(%rip),%rsi        # 155c44 <current_token@@Base>
    0.00 :   3f5eb:  mov    (%rax),%eax
    0.00 :   3f5ed:  cmp    %eax,(%rsi)
    0.00 :   3f5ef:  jne    3da40 <yyparse@@Base+0x260>
    0.00 :   3f5f5:  lea    0x11677c(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f5fc:  mov    0x8(%rsp),%r10
    0.00 :   3f601:  xor    %r13d,%r13d
    0.00 :   3f604:  mov    %rcx,(%rax)
    0.00 :   3f607:  lea    0x116642(%rip),%rax        # 155c50 <eof_encountered@@Base>
    0.00 :   3f60e:  mov    %r10,%r12
    0.00 :   3f611:  movl   $0x0,(%rax)
    0.00 :   3f617:  call   33020 <set_current_prompt_level@@Base+0x40>
    0.00 :   3f61c:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f621:  nopl   0x0(%rax)
    0.00 :   3f628:  mov    -0x20(%rbp),%rax
    0.00 :   3f62c:  mov    $0x30,%edi
    0.00 :   3f631:  mov    %rax,0x28(%rsp)
    0.00 :   3f636:  mov    %rax,0x116f33(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f63d:  mov    0x0(%rbp),%rax
    0.00 :   3f641:  mov    %rax,0x30(%rsp)
    0.00 :   3f646:  mov    %rax,0x116f1b(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f64d:  call   30610 <malloc@plt>
    0.00 :   3f652:  lea    0xe0007(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f659:  test   %rax,%rax
    0.00 :   3f65c:  mov    %rax,%rdx
    0.00 :   3f65f:  je     408ae <yyparse@@Base+0x30ce>
    0.00 :   3f665:  mov    0x28(%rsp),%rax
    0.00 :   3f66a:  movq   $0x0,0x28(%rdx)
    0.00 :   3f672:  movq   $0x0,(%rdx)
    0.00 :   3f679:  mov    %rax,0x8(%rdx)
    0.00 :   3f67d:  mov    0x30(%rsp),%rax
    0.00 :   3f682:  movl   $0x3,0x18(%rdx)
    0.00 :   3f689:  mov    %rax,0x20(%rdx)
    0.00 :   3f68d:  movabs $0x44100000001,%rax
    0.00 :   3f697:  mov    %rax,0x10(%rdx)
    0.00 :   3f69b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f6a0:  mov    0x0(%rbp),%rax
    0.00 :   3f6a4:  mov    $0x30,%edi
    0.00 :   3f6a9:  movl   $0x1,0x116ebd(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f6b3:  mov    %rax,0x30(%rsp)
    0.00 :   3f6b8:  mov    %rax,0x116ea9(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f6bf:  mov    0x116eaa(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f6c6:  mov    %rax,0x28(%rsp)
    0.00 :   3f6cb:  call   30610 <malloc@plt>
    0.00 :   3f6d0:  lea    0xdff89(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f6d7:  test   %rax,%rax
    0.00 :   3f6da:  mov    %rax,%rdx
    0.00 :   3f6dd:  je     40b29 <yyparse@@Base+0x3349>
    0.00 :   3f6e3:  mov    0x28(%rsp),%rax
    0.00 :   3f6e8:  movq   $0x0,0x28(%rdx)
    0.00 :   3f6f0:  movq   $0x0,(%rdx)
    0.00 :   3f6f7:  mov    %rax,0x8(%rdx)
    0.00 :   3f6fb:  mov    0x30(%rsp),%rax
    0.00 :   3f700:  movl   $0x0,0x18(%rdx)
    0.00 :   3f707:  mov    %rax,0x20(%rdx)
    0.00 :   3f70b:  movabs $0x24100000000,%rax
    0.00 :   3f715:  mov    %rax,0x10(%rdx)
    0.00 :   3f719:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f71e:  mov    -0x10(%rbp),%rax
    0.00 :   3f722:  mov    0x0(%rbp),%rsi
    0.00 :   3f726:  mov    (%rax),%rdi
    0.00 :   3f729:  call   44d70 <make_coproc_command@@Base>
    0.00 :   3f72e:  lea    0xdff2b(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f735:  orl    $0x1001,0x4(%rax)
    0.00 :   3f73c:  mov    %rax,%rdx
    0.00 :   3f73f:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f744:  mov    -0x10(%rbp),%rcx
    0.00 :   3f748:  mov    %rcx,%rdx
    0.00 :   3f74b:  lea    0x116562(%rip),%rax        # 155cb4 <need_here_doc@@Base>
    0.00 :   3f752:  mov    (%rax),%esi
    0.00 :   3f754:  test   %esi,%esi
    0.00 :   3f756:  je     3f5cd <yyparse@@Base+0x1ded>
    0.00 :   3f75c:  mov    %rcx,0x30(%rsp)
    0.00 :   3f761:  mov    %rdx,0x28(%rsp)
    0.00 :   3f766:  call   35200 <gather_here_documents@@Base>
    0.00 :   3f76b:  mov    0x30(%rsp),%rcx
    0.00 :   3f770:  mov    0x28(%rsp),%rdx
    0.00 :   3f775:  lea    0xdfee4(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f77c:  jmp    3f5cd <yyparse@@Base+0x1ded>
    0.00 :   3f781:  mov    -0x10(%rbp),%rcx
    0.00 :   3f785:  xor    %esi,%esi
    0.00 :   3f787:  mov    $0x26,%edx
    0.00 :   3f78c:  cmpl   $0x6,(%rcx)
    0.00 :   3f78f:  mov    %rcx,0x28(%rsp)
    0.00 :   3f794:  mov    %rcx,%rdi
    0.00 :   3f797:  je     40704 <yyparse@@Base+0x2f24>
    0.00 :   3f79d:  call   44380 <command_connect@@Base>
    0.00 :   3f7a2:  mov    0x28(%rsp),%rcx
    0.00 :   3f7a7:  lea    0xdfeb2(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f7ae:  mov    %rax,%rdx
    0.00 :   3f7b1:  jmp    3f74b <yyparse@@Base+0x1f6b>
    0.00 :   3f7b3:  movabs $0xffffffff00000000,%rax
    0.00 :   3f7bd:  and    %rdx,%rax
    0.00 :   3f7c0:  or     $0xa,%rax
    0.00 :   3f7c4:  mov    %rax,%rdx
    0.00 :   3f7c7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f7cc:  lea    0x1165a5(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f7d3:  xor    %r13d,%r13d
    0.00 :   3f7d6:  movq   $0x0,(%rax)
    0.00 :   3f7dd:  call   36910 <read_secondary_line@@Base+0x3a0>
    0.00 :   3f7e2:  mov    0x8(%rsp),%r12
    0.00 :   3f7e7:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f7ec:  lea    0x116585(%rip),%rax        # 155d78 <global_command@@Base>
    0.00 :   3f7f3:  mov    0x8(%rsp),%r10
    0.00 :   3f7f8:  movq   $0x0,(%rax)
    0.00 :   3f7ff:  lea    0x1167ee(%rip),%rax        # 155ff4 <last_command_exit_value@@Base>
    0.00 :   3f806:  mov    (%rax),%edx
    0.00 :   3f808:  test   %edx,%edx
    0.00 :   3f80a:  jne    3f812 <yyparse@@Base+0x2032>
    0.00 :   3f80c:  movl   $0x2,(%rax)
    0.00 :   3f812:  lea    0x1167d7(%rip),%rax        # 155ff0 <interactive@@Base>
    0.00 :   3f819:  mov    (%rax),%r9d
    0.00 :   3f81c:  test   %r9d,%r9d
    0.00 :   3f81f:  je     3f834 <yyparse@@Base+0x2054>
    0.00 :   3f821:  lea    0x116420(%rip),%rax        # 155c48 <parse_and_execute_level@@Base>
    0.00 :   3f828:  mov    (%rax),%r13d
    0.00 :   3f82b:  test   %r13d,%r13d
    0.00 :   3f82e:  je     406dc <yyparse@@Base+0x2efc>
    0.00 :   3f834:  mov    %r10,%r12
    0.00 :   3f837:  mov    $0x1,%r13d
    0.00 :   3f83d:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   3f842:  movabs $0xffffffff00000000,%rax
    0.00 :   3f84c:  and    %rdx,%rax
    0.00 :   3f84f:  or     $0x130,%rax
    0.00 :   3f855:  mov    %rax,%rdx
    0.00 :   3f858:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f85d:  mov    -0x20(%rbp),%rax
    0.00 :   3f861:  mov    $0x30,%edi
    0.00 :   3f866:  mov    %rax,0x28(%rsp)
    0.00 :   3f86b:  mov    %rax,0x116cfe(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f872:  mov    0x0(%rbp),%rax
    0.00 :   3f876:  mov    %rax,0x30(%rsp)
    0.00 :   3f87b:  mov    %rax,0x116ce6(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f882:  call   30610 <malloc@plt>
    0.00 :   3f887:  lea    0xdfdd2(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f88e:  test   %rax,%rax
    0.00 :   3f891:  mov    %rax,%rdx
    0.00 :   3f894:  je     40929 <yyparse@@Base+0x3149>
    0.00 :   3f89a:  mov    0x28(%rsp),%rax
    0.00 :   3f89f:  movq   $0x0,0x28(%rdx)
    0.00 :   3f8a7:  movq   $0x0,(%rdx)
    0.00 :   3f8ae:  mov    %rax,0x8(%rdx)
    0.00 :   3f8b2:  mov    0x30(%rsp),%rax
    0.00 :   3f8b7:  movl   $0x0,0x18(%rdx)
    0.00 :   3f8be:  mov    %rax,0x20(%rdx)
    0.00 :   3f8c2:  movabs $0x24100000001,%rax
    0.00 :   3f8cc:  mov    %rax,0x10(%rdx)
    0.00 :   3f8d0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f8d5:  mov    -0x20(%rbp),%eax
    0.00 :   3f8d8:  mov    $0x30,%edi
    0.00 :   3f8dd:  mov    %eax,0x116c8d(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f8e3:  mov    0x0(%rbp),%rax
    0.00 :   3f8e7:  mov    %rax,0x30(%rsp)
    0.00 :   3f8ec:  mov    %rax,0x116c75(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f8f3:  mov    0x116c76(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f8fa:  mov    %rax,0x28(%rsp)
    0.00 :   3f8ff:  call   30610 <malloc@plt>
    0.00 :   3f904:  lea    0xdfd55(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f90b:  test   %rax,%rax
    0.00 :   3f90e:  mov    %rax,%rdx
    0.00 :   3f911:  je     40b7b <yyparse@@Base+0x339b>
    0.00 :   3f917:  mov    0x28(%rsp),%rax
    0.00 :   3f91c:  movq   $0x0,0x28(%rdx)
    0.00 :   3f924:  movq   $0x0,0x10(%rdx)
    0.00 :   3f92c:  mov    %rax,0x8(%rdx)
    0.00 :   3f930:  mov    0x30(%rsp),%rax
    0.00 :   3f935:  movl   $0x1,0x18(%rdx)
    0.00 :   3f93c:  mov    %rax,0x20(%rdx)
    0.00 :   3f940:  movq   $0x0,(%rdx)
    0.00 :   3f947:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f94c:  mov    0x0(%rbp),%rax
    0.00 :   3f950:  mov    $0x30,%edi
    0.00 :   3f955:  movl   $0x0,0x116c11(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f95f:  mov    %rax,0x30(%rsp)
    0.00 :   3f964:  mov    %rax,0x116bfd(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f96b:  mov    0x116bfe(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f972:  mov    %rax,0x28(%rsp)
    0.00 :   3f977:  call   30610 <malloc@plt>
    0.00 :   3f97c:  lea    0xdfcdd(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3f983:  test   %rax,%rax
    0.00 :   3f986:  mov    %rax,%rdx
    0.00 :   3f989:  je     4076f <yyparse@@Base+0x2f8f>
    0.00 :   3f98f:  mov    0x28(%rsp),%rax
    0.00 :   3f994:  movq   $0x0,0x28(%rdx)
    0.00 :   3f99c:  movq   $0x0,(%rdx)
    0.00 :   3f9a3:  mov    %rax,0x8(%rdx)
    0.00 :   3f9a7:  mov    0x30(%rsp),%rax
    0.00 :   3f9ac:  movl   $0xb,0x18(%rdx)
    0.00 :   3f9b3:  mov    %rax,0x20(%rdx)
    0.00 :   3f9b7:  movabs $0x4200000000,%rax
    0.00 :   3f9c1:  mov    %rax,0x10(%rdx)
    0.00 :   3f9c5:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3f9ca:  mov    -0x20(%rbp),%rax
    0.00 :   3f9ce:  mov    $0x30,%edi
    0.00 :   3f9d3:  mov    %rax,0x28(%rsp)
    0.00 :   3f9d8:  mov    %rax,0x116b91(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3f9df:  mov    0x0(%rbp),%rax
    0.00 :   3f9e3:  mov    %rax,0x30(%rsp)
    0.00 :   3f9e8:  mov    %rax,0x116b79(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3f9ef:  call   30610 <malloc@plt>
    0.00 :   3f9f4:  mov    %rax,%rdx
    0.00 :   3f9f7:  test   %rax,%rax
    0.00 :   3f9fa:  je     40abc <yyparse@@Base+0x32dc>
    0.00 :   3fa00:  mov    0x28(%rsp),%rax
    0.00 :   3fa05:  movq   $0x0,0x28(%rdx)
    0.00 :   3fa0d:  mov    %rdx,%rdi
    0.00 :   3fa10:  movq   $0x1,0x10(%rdx)
    0.00 :   3fa18:  mov    %rax,0x8(%rdx)
    0.00 :   3fa1c:  mov    0x30(%rsp),%rax
    0.00 :   3fa21:  movl   $0x8,0x18(%rdx)
    0.00 :   3fa28:  mov    %rax,0x20(%rdx)
    0.00 :   3fa2c:  movq   $0x0,(%rdx)
    0.00 :   3fa33:  mov    %rdx,0x28(%rsp)
    0.00 :   3fa38:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   3fa3d:  mov    0x28(%rsp),%rdx
    0.00 :   3fa42:  lea    0xdfc17(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fa49:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fa4e:  mov    -0x10(%rbp),%rsi
    0.00 :   3fa52:  test   %rsi,%rsi
    0.00 :   3fa55:  je     3fa68 <yyparse@@Base+0x2288>
    0.00 :   3fa57:  mov    0x10(%rsi),%rax
    0.00 :   3fa5b:  mov    0x0(%rbp),%rdx
    0.00 :   3fa5f:  test   %rax,%rax
    0.00 :   3fa62:  jne    3fa8a <yyparse@@Base+0x22aa>
    0.00 :   3fa64:  mov    %rdx,0x10(%rsi)
    0.00 :   3fa68:  mov    -0x20(%rbp),%rax
    0.00 :   3fa6c:  mov    (%rax),%rdi
    0.00 :   3fa6f:  call   44d70 <make_coproc_command@@Base>
    0.00 :   3fa74:  lea    0xdfbe5(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fa7b:  orl    $0x1001,0x4(%rax)
    0.00 :   3fa82:  mov    %rax,%rdx
    0.00 :   3fa85:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fa8a:  mov    %rax,%rcx
    0.00 :   3fa8d:  mov    (%rax),%rax
    0.00 :   3fa90:  test   %rax,%rax
    0.00 :   3fa93:  jne    3fa8a <yyparse@@Base+0x22aa>
    0.00 :   3fa95:  mov    %rdx,(%rcx)
    0.00 :   3fa98:  jmp    3fa68 <yyparse@@Base+0x2288>
    0.00 :   3fa9a:  mov    0x0(%rbp),%rax
    0.00 :   3fa9e:  mov    $0x30,%edi
    0.00 :   3faa3:  movl   $0x1,0x116ac3(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3faad:  mov    %rax,0x30(%rsp)
    0.00 :   3fab2:  mov    %rax,0x116aaf(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fab9:  mov    0x116ab0(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fac0:  mov    %rax,0x28(%rsp)
    0.00 :   3fac5:  call   30610 <malloc@plt>
    0.00 :   3faca:  lea    0xdfb8f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fad1:  test   %rax,%rax
    0.00 :   3fad4:  mov    %rax,%rdx
    0.00 :   3fad7:  je     40c65 <yyparse@@Base+0x3485>
    0.00 :   3fadd:  mov    0x28(%rsp),%rax
    0.00 :   3fae2:  movq   $0x0,0x28(%rdx)
    0.00 :   3faea:  movq   $0x0,(%rdx)
    0.00 :   3faf1:  mov    %rax,0x8(%rdx)
    0.00 :   3faf5:  mov    0x30(%rsp),%rax
    0.00 :   3fafa:  movl   $0x3,0x18(%rdx)
    0.00 :   3fb01:  mov    %rax,0x20(%rdx)
    0.00 :   3fb05:  movabs $0x44100000000,%rax
    0.00 :   3fb0f:  mov    %rax,0x10(%rdx)
    0.00 :   3fb13:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fb18:  mov    0x0(%rbp),%rdi
    0.00 :   3fb1c:  call   47330 <clean_simple_command@@Base>
    0.00 :   3fb21:  lea    0xdfb38(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fb28:  mov    %rax,%rdx
    0.00 :   3fb2b:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fb30:  mov    -0x20(%rbp),%eax
    0.00 :   3fb33:  mov    $0x30,%edi
    0.00 :   3fb38:  mov    %eax,0x116a32(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fb3e:  mov    0x0(%rbp),%rax
    0.00 :   3fb42:  mov    %rax,0x30(%rsp)
    0.00 :   3fb47:  mov    %rax,0x116a1a(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fb4e:  mov    0x116a1b(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fb55:  mov    %rax,0x28(%rsp)
    0.00 :   3fb5a:  call   30610 <malloc@plt>
    0.00 :   3fb5f:  lea    0xdfafa(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fb66:  test   %rax,%rax
    0.00 :   3fb69:  mov    %rax,%rdx
    0.00 :   3fb6c:  je     40863 <yyparse@@Base+0x3083>
    0.00 :   3fb72:  mov    0x28(%rsp),%rax
    0.00 :   3fb77:  movq   $0x0,0x28(%rdx)
    0.00 :   3fb7f:  movq   $0x0,0x10(%rdx)
    0.00 :   3fb87:  mov    %rax,0x8(%rdx)
    0.00 :   3fb8b:  mov    0x30(%rsp),%rax
    0.00 :   3fb90:  movl   $0x5,0x18(%rdx)
    0.00 :   3fb97:  mov    %rax,0x20(%rdx)
    0.00 :   3fb9b:  movq   $0x0,(%rdx)
    0.00 :   3fba2:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fba7:  mov    0x0(%rbp),%rax
    0.00 :   3fbab:  mov    $0x30,%edi
    0.00 :   3fbb0:  movl   $0x0,0x1169b6(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fbba:  mov    %rax,0x30(%rsp)
    0.00 :   3fbbf:  mov    %rax,0x1169a2(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fbc6:  mov    0x1169a3(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fbcd:  mov    %rax,0x28(%rsp)
    0.00 :   3fbd2:  call   30610 <malloc@plt>
    0.00 :   3fbd7:  lea    0xdfa82(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fbde:  test   %rax,%rax
    0.00 :   3fbe1:  mov    %rax,%rdx
    0.00 :   3fbe4:  je     408d7 <yyparse@@Base+0x30f7>
    0.00 :   3fbea:  mov    0x28(%rsp),%rax
    0.00 :   3fbef:  movq   $0x0,0x28(%rdx)
    0.00 :   3fbf7:  movq   $0x0,0x10(%rdx)
    0.00 :   3fbff:  mov    %rax,0x8(%rdx)
    0.00 :   3fc03:  mov    0x30(%rsp),%rax
    0.00 :   3fc08:  movl   $0x5,0x18(%rdx)
    0.00 :   3fc0f:  mov    %rax,0x20(%rdx)
    0.00 :   3fc13:  movq   $0x0,(%rdx)
    0.00 :   3fc1a:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fc1f:  mov    -0x20(%rbp),%rax
    0.00 :   3fc23:  mov    $0x30,%edi
    0.00 :   3fc28:  mov    %rax,0x28(%rsp)
    0.00 :   3fc2d:  mov    %rax,0x11693c(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fc34:  mov    0x0(%rbp),%rax
    0.00 :   3fc38:  mov    %rax,0x30(%rsp)
    0.00 :   3fc3d:  mov    %rax,0x116924(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fc44:  call   30610 <malloc@plt>
    0.00 :   3fc49:  lea    0xdfa10(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fc50:  test   %rax,%rax
    0.00 :   3fc53:  mov    %rax,%rdx
    0.00 :   3fc56:  je     40811 <yyparse@@Base+0x3031>
    0.00 :   3fc5c:  mov    0x28(%rsp),%rax
    0.00 :   3fc61:  movq   $0x0,0x28(%rdx)
    0.00 :   3fc69:  movq   $0x1,0x10(%rdx)
    0.00 :   3fc71:  mov    %rax,0x8(%rdx)
    0.00 :   3fc75:  mov    0x30(%rsp),%rax
    0.00 :   3fc7a:  movl   $0x5,0x18(%rdx)
    0.00 :   3fc81:  mov    %rax,0x20(%rdx)
    0.00 :   3fc85:  movq   $0x0,(%rdx)
    0.00 :   3fc8c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fc91:  mov    0x0(%rbp),%rax
    0.00 :   3fc95:  mov    $0x30,%edi
    0.00 :   3fc9a:  movl   $0x0,0x1168cc(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fca4:  mov    %rax,0x30(%rsp)
    0.00 :   3fca9:  mov    %rax,0x1168b8(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fcb0:  mov    0x1168b9(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fcb7:  mov    %rax,0x28(%rsp)
    0.00 :   3fcbc:  call   30610 <malloc@plt>
    0.00 :   3fcc1:  mov    %rax,%rdx
    0.00 :   3fcc4:  test   %rax,%rax
    0.00 :   3fcc7:  je     40cb7 <yyparse@@Base+0x34d7>
    0.00 :   3fccd:  mov    0x28(%rsp),%rax
    0.00 :   3fcd2:  movq   $0x0,0x28(%rdx)
    0.00 :   3fcda:  mov    %rdx,%rdi
    0.00 :   3fcdd:  movq   $0x0,0x10(%rdx)
    0.00 :   3fce5:  mov    %rax,0x8(%rdx)
    0.00 :   3fce9:  mov    0x30(%rsp),%rax
    0.00 :   3fcee:  movl   $0x8,0x18(%rdx)
    0.00 :   3fcf5:  mov    %rax,0x20(%rdx)
    0.00 :   3fcf9:  movq   $0x0,(%rdx)
    0.00 :   3fd00:  mov    %rdx,0x28(%rsp)
    0.00 :   3fd05:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   3fd0a:  mov    0x28(%rsp),%rdx
    0.00 :   3fd0f:  lea    0xdf94a(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fd16:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fd1b:  mov    -0x10(%rbp),%rdx
    0.00 :   3fd1f:  test   %rdx,%rdx
    0.00 :   3fd22:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   3fd28:  mov    0x10(%rdx),%rax
    0.00 :   3fd2c:  mov    0x0(%rbp),%rcx
    0.00 :   3fd30:  test   %rax,%rax
    0.00 :   3fd33:  jne    3fd3e <yyparse@@Base+0x255e>
    0.00 :   3fd35:  mov    %rcx,0x10(%rdx)
    0.00 :   3fd39:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fd3e:  mov    %rax,%rsi
    0.00 :   3fd41:  mov    (%rax),%rax
    0.00 :   3fd44:  test   %rax,%rax
    0.00 :   3fd47:  jne    3fd3e <yyparse@@Base+0x255e>
    0.00 :   3fd49:  mov    %rcx,(%rsi)
    0.00 :   3fd4c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fd51:  mov    -0x20(%rbp),%eax
    0.00 :   3fd54:  mov    $0x30,%edi
    0.00 :   3fd59:  mov    %eax,0x116811(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fd5f:  mov    0x0(%rbp),%rax
    0.00 :   3fd63:  mov    %rax,0x30(%rsp)
    0.00 :   3fd68:  mov    %rax,0x1167f9(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fd6f:  mov    0x1167fa(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fd76:  mov    %rax,0x28(%rsp)
    0.00 :   3fd7b:  call   30610 <malloc@plt>
    0.00 :   3fd80:  lea    0xdf8d9(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fd87:  test   %rax,%rax
    0.00 :   3fd8a:  mov    %rax,%rdx
    0.00 :   3fd8d:  je     40b00 <yyparse@@Base+0x3320>
    0.00 :   3fd93:  mov    0x28(%rsp),%rax
    0.00 :   3fd98:  movq   $0x0,0x28(%rdx)
    0.00 :   3fda0:  movq   $0x0,(%rdx)
    0.00 :   3fda7:  mov    %rax,0x8(%rdx)
    0.00 :   3fdab:  mov    0x30(%rsp),%rax
    0.00 :   3fdb0:  movl   $0x0,0x18(%rdx)
    0.00 :   3fdb7:  mov    %rax,0x20(%rdx)
    0.00 :   3fdbb:  movabs $0x24100000000,%rax
    0.00 :   3fdc5:  mov    %rax,0x10(%rdx)
    0.00 :   3fdc9:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fdce:  mov    -0x20(%rbp),%rax
    0.00 :   3fdd2:  mov    $0x30,%edi
    0.00 :   3fdd7:  mov    %rax,0x28(%rsp)
    0.00 :   3fddc:  mov    %rax,0x11678d(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fde3:  mov    0x0(%rbp),%rax
    0.00 :   3fde7:  mov    %rax,0x30(%rsp)
    0.00 :   3fdec:  mov    %rax,0x116775(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fdf3:  call   30610 <malloc@plt>
    0.00 :   3fdf8:  lea    0xdf861(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fdff:  test   %rax,%rax
    0.00 :   3fe02:  mov    %rax,%rdx
    0.00 :   3fe05:  je     40798 <yyparse@@Base+0x2fb8>
    0.00 :   3fe0b:  mov    0x28(%rsp),%rax
    0.00 :   3fe10:  movq   $0x0,0x28(%rdx)
    0.00 :   3fe18:  movq   $0x0,(%rdx)
    0.00 :   3fe1f:  mov    %rax,0x8(%rdx)
    0.00 :   3fe23:  mov    0x30(%rsp),%rax
    0.00 :   3fe28:  movl   $0xb,0x18(%rdx)
    0.00 :   3fe2f:  mov    %rax,0x20(%rdx)
    0.00 :   3fe33:  movabs $0x4200000001,%rax
    0.00 :   3fe3d:  mov    %rax,0x10(%rdx)
    0.00 :   3fe41:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fe46:  mov    -0x20(%rbp),%eax
    0.00 :   3fe49:  mov    $0x30,%edi
    0.00 :   3fe4e:  mov    %eax,0x11671c(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fe54:  mov    0x0(%rbp),%rax
    0.00 :   3fe58:  mov    %rax,0x30(%rsp)
    0.00 :   3fe5d:  mov    %rax,0x116704(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3fe64:  mov    0x116705(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3fe6b:  mov    %rax,0x28(%rsp)
    0.00 :   3fe70:  call   30610 <malloc@plt>
    0.00 :   3fe75:  mov    %rax,%rdx
    0.00 :   3fe78:  test   %rax,%rax
    0.00 :   3fe7b:  je     40ade <yyparse@@Base+0x32fe>
    0.00 :   3fe81:  mov    0x28(%rsp),%rax
    0.00 :   3fe86:  movq   $0x0,0x28(%rdx)
    0.00 :   3fe8e:  mov    %rdx,%rdi
    0.00 :   3fe91:  movq   $0x0,0x10(%rdx)
    0.00 :   3fe99:  mov    %rax,0x8(%rdx)
    0.00 :   3fe9d:  mov    0x30(%rsp),%rax
    0.00 :   3fea2:  movl   $0x8,0x18(%rdx)
    0.00 :   3fea9:  mov    %rax,0x20(%rdx)
    0.00 :   3fead:  movq   $0x0,(%rdx)
    0.00 :   3feb4:  mov    %rdx,0x28(%rsp)
    0.00 :   3feb9:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   3febe:  mov    0x28(%rsp),%rdx
    0.00 :   3fec3:  lea    0xdf796(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3feca:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fecf:  mov    0x0(%rbp),%rsi
    0.00 :   3fed3:  lea    0xce2d9(%rip),%rdi        # 10e1b3 <_IO_stdin_used@@Base+0x1b3>
    0.00 :   3feda:  call   44d70 <make_coproc_command@@Base>
    0.00 :   3fedf:  lea    0xdf77a(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3fee6:  orl    $0x1001,0x4(%rax)
    0.00 :   3feed:  mov    %rax,%rdx
    0.00 :   3fef0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3fef5:  mov    -0x20(%rbp),%eax
    0.00 :   3fef8:  mov    $0x30,%edi
    0.00 :   3fefd:  mov    %eax,0x11666d(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ff03:  mov    0x0(%rbp),%rax
    0.00 :   3ff07:  mov    %rax,0x30(%rsp)
    0.00 :   3ff0c:  mov    %rax,0x116655(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ff13:  mov    0x116656(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ff1a:  mov    %rax,0x28(%rsp)
    0.00 :   3ff1f:  call   30610 <malloc@plt>
    0.00 :   3ff24:  lea    0xdf735(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ff2b:  test   %rax,%rax
    0.00 :   3ff2e:  mov    %rax,%rdx
    0.00 :   3ff31:  je     4083a <yyparse@@Base+0x305a>
    0.00 :   3ff37:  mov    0x28(%rsp),%rax
    0.00 :   3ff3c:  movq   $0x0,0x28(%rdx)
    0.00 :   3ff44:  movq   $0x0,(%rdx)
    0.00 :   3ff4b:  mov    %rax,0x8(%rdx)
    0.00 :   3ff4f:  mov    0x30(%rsp),%rax
    0.00 :   3ff54:  movl   $0x3,0x18(%rdx)
    0.00 :   3ff5b:  mov    %rax,0x20(%rdx)
    0.00 :   3ff5f:  movabs $0x44100000000,%rax
    0.00 :   3ff69:  mov    %rax,0x10(%rdx)
    0.00 :   3ff6d:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ff72:  mov    -0x20(%rbp),%rax
    0.00 :   3ff76:  mov    $0x30,%edi
    0.00 :   3ff7b:  mov    %rax,0x28(%rsp)
    0.00 :   3ff80:  mov    %rax,0x1165e9(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   3ff87:  mov    0x0(%rbp),%rax
    0.00 :   3ff8b:  mov    %rax,0x30(%rsp)
    0.00 :   3ff90:  mov    %rax,0x1165d1(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   3ff97:  call   30610 <malloc@plt>
    0.00 :   3ff9c:  lea    0xdf6bd(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   3ffa3:  test   %rax,%rax
    0.00 :   3ffa6:  mov    %rax,%rdx
    0.00 :   3ffa9:  je     40c13 <yyparse@@Base+0x3433>
    0.00 :   3ffaf:  mov    0x28(%rsp),%rax
    0.00 :   3ffb4:  movq   $0x0,0x28(%rdx)
    0.00 :   3ffbc:  movq   $0x1,0x10(%rdx)
    0.00 :   3ffc4:  mov    %rax,0x8(%rdx)
    0.00 :   3ffc8:  mov    0x30(%rsp),%rax
    0.00 :   3ffcd:  movl   $0x1,0x18(%rdx)
    0.00 :   3ffd4:  mov    %rax,0x20(%rdx)
    0.00 :   3ffd8:  movq   $0x0,(%rdx)
    0.00 :   3ffdf:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   3ffe4:  mov    -0x10(%rbp),%rax
    0.00 :   3ffe8:  mov    $0x18,%edi
    0.00 :   3ffed:  mov    %rax,0x28(%rsp)
    0.00 :   3fff2:  mov    -0x30(%rbp),%rax
    0.00 :   3fff6:  mov    %rax,0x30(%rsp)
    0.00 :   3fffb:  call   30610 <malloc@plt>
    0.00 :   40000:  mov    %rax,%rcx
    0.00 :   40003:  test   %rax,%rax
    0.00 :   40006:  je     40d29 <yyparse@@Base+0x3549>
    0.00 :   4000c:  mov    0x30(%rsp),%rax
    0.00 :   40011:  movl   $0x0,(%rcx)
    0.00 :   40017:  mov    $0x20,%edi
    0.00 :   4001c:  mov    %rax,0x8(%rcx)
    0.00 :   40020:  mov    0x28(%rsp),%rax
    0.00 :   40025:  mov    %rcx,0x28(%rsp)
    0.00 :   4002a:  mov    %rax,0x10(%rcx)
    0.00 :   4002e:  call   30610 <malloc@plt>
    0.00 :   40033:  mov    0x28(%rsp),%rcx
    0.00 :   40038:  lea    0xdf621(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4003f:  test   %rax,%rax
    0.00 :   40042:  mov    %rax,%rdx
    0.00 :   40045:  je     40cfb <yyparse@@Base+0x351b>
    0.00 :   4004b:  mov    %rcx,0x18(%rdx)
    0.00 :   4004f:  movq   $0x8,(%rdx)
    0.00 :   40056:  movl   $0x0,(%rcx)
    0.00 :   4005c:  movq   $0x0,0x10(%rdx)
    0.00 :   40064:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40069:  mov    -0x10(%rbp),%rdx
    0.00 :   4006d:  test   %rdx,%rdx
    0.00 :   40070:  je     3da40 <yyparse@@Base+0x260>
    0.00 :   40076:  mov    0x10(%rdx),%rax
    0.00 :   4007a:  mov    0x0(%rbp),%rcx
    0.00 :   4007e:  test   %rax,%rax
    0.00 :   40081:  jne    4008c <yyparse@@Base+0x28ac>
    0.00 :   40083:  mov    %rcx,0x10(%rdx)
    0.00 :   40087:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   4008c:  mov    %rax,%rsi
    0.00 :   4008f:  mov    (%rax),%rax
    0.00 :   40092:  test   %rax,%rax
    0.00 :   40095:  jne    4008c <yyparse@@Base+0x28ac>
    0.00 :   40097:  mov    %rcx,(%rsi)
    0.00 :   4009a:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   4009f:  mov    -0x10(%rbp),%rax
    0.00 :   400a3:  mov    $0x18,%edi
    0.00 :   400a8:  mov    %rax,0x28(%rsp)
    0.00 :   400ad:  mov    -0x30(%rbp),%rax
    0.00 :   400b1:  mov    %rax,0x30(%rsp)
    0.00 :   400b6:  call   30610 <malloc@plt>
    0.00 :   400bb:  mov    %rax,%rcx
    0.00 :   400be:  test   %rax,%rax
    0.00 :   400c1:  je     407ef <yyparse@@Base+0x300f>
    0.00 :   400c7:  mov    0x30(%rsp),%rax
    0.00 :   400cc:  movl   $0x0,(%rcx)
    0.00 :   400d2:  mov    $0x20,%edi
    0.00 :   400d7:  mov    %rax,0x8(%rcx)
    0.00 :   400db:  mov    0x28(%rsp),%rax
    0.00 :   400e0:  mov    %rcx,0x28(%rsp)
    0.00 :   400e5:  mov    %rax,0x10(%rcx)
    0.00 :   400e9:  call   30610 <malloc@plt>
    0.00 :   400ee:  mov    0x28(%rsp),%rcx
    0.00 :   400f3:  lea    0xdf566(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   400fa:  test   %rax,%rax
    0.00 :   400fd:  mov    %rax,%rdx
    0.00 :   40100:  je     407c1 <yyparse@@Base+0x2fe1>
    0.00 :   40106:  mov    %rcx,0x18(%rdx)
    0.00 :   4010a:  movq   $0x2,(%rdx)
    0.00 :   40111:  movl   $0x0,(%rcx)
    0.00 :   40117:  movq   $0x0,0x10(%rdx)
    0.00 :   4011f:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40124:  mov    -0x20(%rbp),%rax
    0.00 :   40128:  mov    $0x30,%edi
    0.00 :   4012d:  mov    %rax,0x28(%rsp)
    0.00 :   40132:  mov    %rax,0x116437(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   40139:  mov    0x0(%rbp),%rax
    0.00 :   4013d:  mov    %rax,0x30(%rsp)
    0.00 :   40142:  mov    %rax,0x11641f(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   40149:  call   30610 <malloc@plt>
    0.00 :   4014e:  mov    %rax,%rdx
    0.00 :   40151:  test   %rax,%rax
    0.00 :   40154:  je     40cd9 <yyparse@@Base+0x34f9>
    0.00 :   4015a:  mov    0x28(%rsp),%rax
    0.00 :   4015f:  movq   $0x0,0x28(%rdx)
    0.00 :   40167:  mov    %rdx,%rdi
    0.00 :   4016a:  movq   $0x1,0x10(%rdx)
    0.00 :   40172:  mov    %rax,0x8(%rdx)
    0.00 :   40176:  mov    0x30(%rsp),%rax
    0.00 :   4017b:  movl   $0x4,0x18(%rdx)
    0.00 :   40182:  mov    %rax,0x20(%rdx)
    0.00 :   40186:  movq   $0x0,(%rdx)
    0.00 :   4018d:  mov    %rdx,0x28(%rsp)
    0.00 :   40192:  call   36fa0 <read_secondary_line@@Base+0xa30>
    0.00 :   40197:  mov    0x28(%rsp),%rdx
    0.00 :   4019c:  lea    0xdf4bd(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   401a3:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   401a8:  mov    0x11618a(%rip),%edx        # 156338 <top_level@@Base+0x1b8>
    0.00 :   401ae:  mov    -0x10(%rbp),%rdi
    0.00 :   401b2:  mov    0x116184(%rip),%ecx        # 15633c <top_level@@Base+0x1bc>
    0.00 :   401b8:  mov    0x0(%rbp),%rsi
    0.00 :   401bc:  call   47190 <make_function_def@@Base>
    0.00 :   401c1:  lea    0xdf498(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   401c8:  mov    %rax,%rdx
    0.00 :   401cb:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   401d0:  mov    0x0(%rbp),%rax
    0.00 :   401d4:  mov    $0x30,%edi
    0.00 :   401d9:  movl   $0x0,0x11638d(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   401e3:  mov    %rax,0x30(%rsp)
    0.00 :   401e8:  mov    %rax,0x116379(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   401ef:  mov    0x11637a(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   401f6:  mov    %rax,0x28(%rsp)
    0.00 :   401fb:  call   30610 <malloc@plt>
    0.00 :   40200:  lea    0xdf459(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40207:  test   %rax,%rax
    0.00 :   4020a:  mov    %rax,%rdx
    0.00 :   4020d:  je     40952 <yyparse@@Base+0x3172>
    0.00 :   40213:  mov    0x28(%rsp),%rax
    0.00 :   40218:  movq   $0x0,0x28(%rdx)
    0.00 :   40220:  movq   $0x0,0x10(%rdx)
    0.00 :   40228:  mov    %rax,0x8(%rdx)
    0.00 :   4022c:  mov    0x30(%rsp),%rax
    0.00 :   40231:  movl   $0x1,0x18(%rdx)
    0.00 :   40238:  mov    %rax,0x20(%rdx)
    0.00 :   4023c:  movq   $0x0,(%rdx)
    0.00 :   40243:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40248:  mov    -0x20(%rbp),%eax
    0.00 :   4024b:  mov    $0x30,%edi
    0.00 :   40250:  mov    %eax,0x11631a(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   40256:  mov    0x0(%rbp),%rax
    0.00 :   4025a:  mov    %rax,0x30(%rsp)
    0.00 :   4025f:  mov    %rax,0x116302(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   40266:  mov    0x116303(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   4026d:  mov    %rax,0x28(%rsp)
    0.00 :   40272:  call   30610 <malloc@plt>
    0.00 :   40277:  lea    0xdf3e2(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4027e:  test   %rax,%rax
    0.00 :   40281:  mov    %rax,%rdx
    0.00 :   40284:  je     40b52 <yyparse@@Base+0x3372>
    0.00 :   4028a:  mov    0x28(%rsp),%rax
    0.00 :   4028f:  movq   $0x0,0x28(%rdx)
    0.00 :   40297:  movq   $0x0,(%rdx)
    0.00 :   4029e:  mov    %rax,0x8(%rdx)
    0.00 :   402a2:  mov    0x30(%rsp),%rax
    0.00 :   402a7:  movl   $0xc,0x18(%rdx)
    0.00 :   402ae:  mov    %rax,0x20(%rdx)
    0.00 :   402b2:  movabs $0x24100000000,%rax
    0.00 :   402bc:  mov    %rax,0x10(%rdx)
    0.00 :   402c0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   402c5:  mov    -0x10(%rbp),%rsi
    0.00 :   402c9:  test   %rsi,%rsi
    0.00 :   402cc:  je     402df <yyparse@@Base+0x2aff>
    0.00 :   402ce:  mov    0x10(%rsi),%rax
    0.00 :   402d2:  mov    0x0(%rbp),%rdx
    0.00 :   402d6:  test   %rax,%rax
    0.00 :   402d9:  jne    40301 <yyparse@@Base+0x2b21>
    0.00 :   402db:  mov    %rdx,0x10(%rsi)
    0.00 :   402df:  lea    0xcdecd(%rip),%rdi        # 10e1b3 <_IO_stdin_used@@Base+0x1b3>
    0.00 :   402e6:  call   44d70 <make_coproc_command@@Base>
    0.00 :   402eb:  lea    0xdf36e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   402f2:  orl    $0x1001,0x4(%rax)
    0.00 :   402f9:  mov    %rax,%rdx
    0.00 :   402fc:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40301:  mov    %rax,%rcx
    0.00 :   40304:  mov    (%rax),%rax
    0.00 :   40307:  test   %rax,%rax
    0.00 :   4030a:  jne    40301 <yyparse@@Base+0x2b21>
    0.00 :   4030c:  mov    %rdx,(%rcx)
    0.00 :   4030f:  jmp    402df <yyparse@@Base+0x2aff>
    0.00 :   40311:  mov    0x0(%rbp),%rdi
    0.00 :   40315:  mov    0x8(%rbp),%rsi
    0.00 :   40319:  xor    %edx,%edx
    0.00 :   4031b:  call   44b60 <make_simple_command@@Base>
    0.00 :   40320:  lea    0xdf339(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40327:  mov    %rax,%rdx
    0.00 :   4032a:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   4032f:  mov    0x116003(%rip),%edx        # 156338 <top_level@@Base+0x1b8>
    0.00 :   40335:  mov    -0x30(%rbp),%rdi
    0.00 :   40339:  mov    0x115ffd(%rip),%ecx        # 15633c <top_level@@Base+0x1bc>
    0.00 :   4033f:  mov    0x0(%rbp),%rsi
    0.00 :   40343:  call   47190 <make_function_def@@Base>
    0.00 :   40348:  lea    0xdf311(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4034f:  mov    %rax,%rdx
    0.00 :   40352:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40357:  movslq 0x10d12a(%rip),%rdx        # 14d488 <job_control@@Base+0x4>
    0.00 :   4035e:  lea    0x115ffb(%rip),%rax        # 156360 <top_level@@Base+0x1e0>
    0.00 :   40365:  lea    0xcde42(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   4036c:  mov    %rsi,%rdi
    0.00 :   4036f:  mov    (%rax,%rdx,4),%ecx
    0.00 :   40372:  mov    -0x10(%rbp),%rdx
    0.00 :   40376:  mov    %ecx,0x30(%rsp)
    0.00 :   4037a:  mov    %rdx,0x28(%rsp)
    0.00 :   4037f:  call   43fe0 <make_bare_word@@Base>
    0.00 :   40384:  lea    0xcde23(%rip),%rsi        # 10e1ae <_IO_stdin_used@@Base+0x1ae>
    0.00 :   4038b:  mov    %rax,%rdi
    0.00 :   4038e:  call   440e0 <make_word_flags@@Base>
    0.00 :   40393:  xor    %esi,%esi
    0.00 :   40395:  mov    %rax,%rdi
    0.00 :   40398:  call   442b0 <make_word_list@@Base>
    0.00 :   4039d:  mov    0x28(%rsp),%rdx
    0.00 :   403a2:  mov    -0x50(%rbp),%rdi
    0.00 :   403a6:  mov    0x30(%rsp),%ecx
    0.00 :   403aa:  mov    %rax,%rsi
    0.00 :   403ad:  call   444d0 <make_select_command@@Base>
    0.00 :   403b2:  lea    0xdf2a7(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   403b9:  mov    %rax,%rdx
    0.00 :   403bc:  mov    0x10d0c6(%rip),%eax        # 14d488 <job_control@@Base+0x4>
    0.00 :   403c2:  test   %eax,%eax
    0.00 :   403c4:  jle    3da40 <yyparse@@Base+0x260>
    0.00 :   403ca:  sub    $0x1,%eax
    0.00 :   403cd:  mov    %eax,0x10d0b5(%rip)        # 14d488 <job_control@@Base+0x4>
    0.00 :   403d3:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   403d8:  mov    -0x10(%rbp),%rdi
    0.00 :   403dc:  call   44cd0 <make_subshell_command@@Base>
    0.00 :   403e1:  lea    0xdf278(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   403e8:  orl    $0x1,0x4(%rax)
    0.00 :   403ec:  mov    %rax,%rdx
    0.00 :   403ef:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   403f4:  mov    -0x20(%rbp),%eax
    0.00 :   403f7:  mov    $0x30,%edi
    0.00 :   403fc:  mov    %eax,0x11616e(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   40402:  mov    0x0(%rbp),%rax
    0.00 :   40406:  mov    %rax,0x30(%rsp)
    0.00 :   4040b:  mov    %rax,0x116156(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   40412:  mov    0x116157(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   40419:  mov    %rax,0x28(%rsp)
    0.00 :   4041e:  call   30610 <malloc@plt>
    0.00 :   40423:  lea    0xdf236(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4042a:  test   %rax,%rax
    0.00 :   4042d:  mov    %rax,%rdx
    0.00 :   40430:  je     40ba4 <yyparse@@Base+0x33c4>
    0.00 :   40436:  mov    0x28(%rsp),%rax
    0.00 :   4043b:  movq   $0x0,0x28(%rdx)
    0.00 :   40443:  movq   $0x0,(%rdx)
    0.00 :   4044a:  mov    %rax,0x8(%rdx)
    0.00 :   4044e:  mov    0x30(%rsp),%rax
    0.00 :   40453:  movl   $0xb,0x18(%rdx)
    0.00 :   4045a:  mov    %rax,0x20(%rdx)
    0.00 :   4045e:  movabs $0x4200000000,%rax
    0.00 :   40468:  mov    %rax,0x10(%rdx)
    0.00 :   4046c:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40471:  mov    -0x20(%rbp),%rax
    0.00 :   40475:  mov    $0x30,%edi
    0.00 :   4047a:  mov    %rax,0x28(%rsp)
    0.00 :   4047f:  mov    %rax,0x1160ea(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   40486:  mov    0x0(%rbp),%rax
    0.00 :   4048a:  mov    %rax,0x30(%rsp)
    0.00 :   4048f:  mov    %rax,0x1160d2(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   40496:  call   30610 <malloc@plt>
    0.00 :   4049b:  lea    0xdf1be(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   404a2:  test   %rax,%rax
    0.00 :   404a5:  mov    %rax,%rdx
    0.00 :   404a8:  je     40c8e <yyparse@@Base+0x34ae>
    0.00 :   404ae:  mov    0x28(%rsp),%rax
    0.00 :   404b3:  movq   $0x0,0x28(%rdx)
    0.00 :   404bb:  movq   $0x0,(%rdx)
    0.00 :   404c2:  mov    %rax,0x8(%rdx)
    0.00 :   404c6:  mov    0x30(%rsp),%rax
    0.00 :   404cb:  movl   $0xc,0x18(%rdx)
    0.00 :   404d2:  mov    %rax,0x20(%rdx)
    0.00 :   404d6:  movabs $0x24100000001,%rax
    0.00 :   404e0:  mov    %rax,0x10(%rdx)
    0.00 :   404e4:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   404e9:  mov    -0x10(%rbp),%rdx
    0.00 :   404ed:  mov    0x0(%rbp),%rdi
    0.00 :   404f1:  mov    0x8(%rbp),%rsi
    0.00 :   404f5:  call   44b60 <make_simple_command@@Base>
    0.00 :   404fa:  lea    0xdf15f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40501:  mov    %rax,%rdx
    0.00 :   40504:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40509:  mov    0x0(%rbp),%rax
    0.00 :   4050d:  mov    $0x30,%edi
    0.00 :   40512:  movl   $0x1,0x116054(%rip)        # 156570 <top_level@@Base+0x3f0>
    0.00 :   4051c:  mov    %rax,0x30(%rsp)
    0.00 :   40521:  mov    %rax,0x116040(%rip)        # 156568 <top_level@@Base+0x3e8>
    0.00 :   40528:  mov    0x116041(%rip),%rax        # 156570 <top_level@@Base+0x3f0>
    0.00 :   4052f:  mov    %rax,0x28(%rsp)
    0.00 :   40534:  call   30610 <malloc@plt>
    0.00 :   40539:  lea    0xdf120(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40540:  test   %rax,%rax
    0.00 :   40543:  mov    %rax,%rdx
    0.00 :   40546:  je     40c3c <yyparse@@Base+0x345c>
    0.00 :   4054c:  mov    0x28(%rsp),%rax
    0.00 :   40551:  movq   $0x0,0x28(%rdx)
    0.00 :   40559:  movq   $0x0,(%rdx)
    0.00 :   40560:  mov    %rax,0x8(%rdx)
    0.00 :   40564:  mov    0x30(%rsp),%rax
    0.00 :   40569:  movl   $0xc,0x18(%rdx)
    0.00 :   40570:  mov    %rax,0x20(%rdx)
    0.00 :   40574:  movabs $0x24100000000,%rax
    0.00 :   4057e:  mov    %rax,0x10(%rdx)
    0.00 :   40582:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40587:  mov    -0x10(%rbp),%rdx
    0.00 :   4058b:  mov    %rdx,%rax
    0.00 :   4058e:  mov    %rax,%rcx
    0.00 :   40591:  mov    (%rax),%rax
    0.00 :   40594:  test   %rax,%rax
    0.00 :   40597:  jne    4058e <yyparse@@Base+0x2dae>
    0.00 :   40599:  mov    0x0(%rbp),%rax
    0.00 :   4059d:  mov    %rax,(%rcx)
    0.00 :   405a0:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   405a5:  xor    %edi,%edi
    0.00 :   405a7:  mov    $0x2,%r13d
    0.00 :   405ad:  call   36b90 <read_secondary_line@@Base+0x620>
    0.00 :   405b2:  call   33d40 <reset_parser@@Base>
    0.00 :   405b7:  mov    0x8(%rsp),%r12
    0.00 :   405bc:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   405c1:  mov    %r14,%r12
    0.00 :   405c4:  mov    $0x1,%r13d
    0.00 :   405ca:  jmp    3dcc0 <yyparse@@Base+0x4e0>
    0.00 :   405cf:  lea    0x1157ea(%rip),%rax        # 155dc0 <bash_input@@Base>
    0.00 :   405d6:  mov    (%rax),%eax
    0.00 :   405d8:  sub    $0x1,%eax
    0.00 :   405db:  cmp    $0x1,%eax
    0.00 :   405de:  jbe    4063d <yyparse@@Base+0x2e5d>
    0.00 :   405e0:  lea    0x11565d(%rip),%rax        # 155c44 <current_token@@Base>
    0.00 :   405e7:  mov    (%rax),%esi
    0.00 :   405e9:  xor    %eax,%eax
    0.00 :   405eb:  jmp    3dbd8 <yyparse@@Base+0x3f8>
    0.00 :   405f0:  mov    0x10(%rax),%rcx
    0.00 :   405f4:  xor    %r13d,%r13d
    0.00 :   405f7:  mov    0x115612(%rip),%rdx        # 155c10 <rl_instream@@Base+0x18>
    0.00 :   405fe:  sub    0x115604(%rip),%edx        # 155c08 <rl_instream@@Base+0x10>
    0.00 :   40604:  cmpb   $0xa,-0x1(%rcx)
    0.00 :   40608:  sete   %r13b
    0.00 :   4060c:  add    %r13d,%edx
    0.00 :   4060f:  movslq %edx,%rdx
    0.00 :   40612:  sub    %rdx,%rcx
    0.00 :   40615:  mov    %rcx,0x10(%rax)
    0.00 :   40619:  jmp    3dc54 <yyparse@@Base+0x474>
    0.00 :   4061e:  call   84fb0 <check_mail@@Base>
    0.00 :   40623:  xor    %edi,%edi
    0.00 :   40625:  call   30580 <time@plt>
    0.00 :   4062a:  lea    0xdf02f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40631:  mov    %rax,0x1155c8(%rip)        # 155c00 <rl_instream@@Base+0x8>
    0.00 :   40638:  jmp    3de20 <yyparse@@Base+0x640>
    0.00 :   4063d:  lea    0x115654(%rip),%rax        # 155c98 <pushed_string_list@@Base>
    0.00 :   40644:  mov    (%rax),%rax
    0.00 :   40647:  test   %rax,%rax
    0.00 :   4064a:  je     40653 <yyparse@@Base+0x2e73>
    0.00 :   4064c:  cmpq   $0x0,0x18(%rax)
    0.00 :   40651:  jne    405e0 <yyparse@@Base+0x2e00>
    0.00 :   40653:  call   36420 <decode_prompt_string@@Base+0x10d0>
    0.00 :   40658:  lea    0x1155e5(%rip),%rax        # 155c44 <current_token@@Base>
    0.00 :   4065f:  lea    0xdeffa(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40666:  mov    (%rax),%esi
    0.00 :   40668:  mov    0x115662(%rip),%eax        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   4066e:  jmp    3dbd8 <yyparse@@Base+0x3f8>
    0.00 :   40673:  mov    %r13,%rax
    0.00 :   40676:  add    %r13,%r13
    0.00 :   40679:  mov    0x8(%rsp),%r10
    0.00 :   4067e:  shl    $0x4,%rax
    0.00 :   40682:  sub    %r13,%r15
    0.00 :   40685:  sub    %rax,%rbp
    0.00 :   40688:  movswq (%r15),%rax
    0.00 :   4068c:  movswl (%r11,%rax,2),%r14d
    0.00 :   40691:  jmp    3d98b <yyparse@@Base+0x1ab>
    0.00 :   40696:  movl   $0xa,0x115630(%rip)        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   406a0:  jmp    3e6a4 <yyparse@@Base+0xec4>
    0.00 :   406a5:  call   44e50 <connect_async_list@@Base>
    0.00 :   406aa:  lea    0xdefaf(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   406b1:  mov    %rax,%rdx
    0.00 :   406b4:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   406b9:  movl   $0xa,0x11560d(%rip)        # 155cd0 <command_string_index@@Base+0x8>
    0.00 :   406c3:  jmp    3e75a <yyparse@@Base+0xf7a>
    0.00 :   406c8:  call   44e50 <connect_async_list@@Base>
    0.00 :   406cd:  lea    0xdef8c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   406d4:  mov    %rax,%rdx
    0.00 :   406d7:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   406dc:  mov    %r10,0x8(%rsp)
    0.00 :   406e1:  call   36910 <read_secondary_line@@Base+0x3a0>
    0.00 :   406e6:  mov    0x8(%rsp),%r12
    0.00 :   406eb:  jmp    3dcb9 <yyparse@@Base+0x4d9>
    0.00 :   406f0:  call   44e50 <connect_async_list@@Base>
    0.00 :   406f5:  lea    0xdef64(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   406fc:  mov    %rax,%rdx
    0.00 :   406ff:  jmp    3da40 <yyparse@@Base+0x260>
    0.00 :   40704:  call   44e50 <connect_async_list@@Base>
    0.00 :   40709:  mov    0x28(%rsp),%rcx
    0.00 :   4070e:  lea    0xdef4b(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40715:  mov    %rax,%rdx
    0.00 :   40718:  jmp    3f74b <yyparse@@Base+0x1f6b>
    0.00 :   4071d:  mov    %rax,0x38(%rsp)
    0.00 :   40722:  mov    $0x30,%esi
    0.00 :   40727:  lea    0xcd8dc(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   4072e:  xor    %eax,%eax
    0.00 :   40730:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40735:  mov    0x38(%rsp),%rdx
    0.00 :   4073a:  lea    0xdef1f(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40741:  jmp    3eaae <yyparse@@Base+0x12ce>
    0.00 :   40746:  mov    %rax,0x38(%rsp)
    0.00 :   4074b:  mov    $0x30,%esi
    0.00 :   40750:  lea    0xcd8b3(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40757:  xor    %eax,%eax
    0.00 :   40759:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   4075e:  mov    0x38(%rsp),%rdx
    0.00 :   40763:  lea    0xdeef6(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4076a:  jmp    3f484 <yyparse@@Base+0x1ca4>
    0.00 :   4076f:  mov    %rax,0x38(%rsp)
    0.00 :   40774:  mov    $0x30,%esi
    0.00 :   40779:  lea    0xcd88a(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40780:  xor    %eax,%eax
    0.00 :   40782:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40787:  mov    0x38(%rsp),%rdx
    0.00 :   4078c:  lea    0xdeecd(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40793:  jmp    3f98f <yyparse@@Base+0x21af>
    0.00 :   40798:  mov    %rax,0x38(%rsp)
    0.00 :   4079d:  mov    $0x30,%esi
    0.00 :   407a2:  lea    0xcd861(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   407a9:  xor    %eax,%eax
    0.00 :   407ab:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   407b0:  mov    0x38(%rsp),%rdx
    0.00 :   407b5:  lea    0xdeea4(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   407bc:  jmp    3fe0b <yyparse@@Base+0x262b>
    0.00 :   407c1:  mov    %rax,0x30(%rsp)
    0.00 :   407c6:  mov    $0x20,%esi
    0.00 :   407cb:  lea    0xcd838(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   407d2:  xor    %eax,%eax
    0.00 :   407d4:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   407d9:  mov    0x30(%rsp),%rdx
    0.00 :   407de:  mov    0x28(%rsp),%rcx
    0.00 :   407e3:  lea    0xdee76(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   407ea:  jmp    40106 <yyparse@@Base+0x2926>
    0.00 :   407ef:  mov    %rax,0x38(%rsp)
    0.00 :   407f4:  mov    $0x18,%esi
    0.00 :   407f9:  lea    0xcd80a(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40800:  xor    %eax,%eax
    0.00 :   40802:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40807:  mov    0x38(%rsp),%rcx
    0.00 :   4080c:  jmp    400c7 <yyparse@@Base+0x28e7>
    0.00 :   40811:  mov    %rax,0x38(%rsp)
    0.00 :   40816:  mov    $0x30,%esi
    0.00 :   4081b:  lea    0xcd7e8(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40822:  xor    %eax,%eax
    0.00 :   40824:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40829:  mov    0x38(%rsp),%rdx
    0.00 :   4082e:  lea    0xdee2b(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40835:  jmp    3fc5c <yyparse@@Base+0x247c>
    0.00 :   4083a:  mov    %rax,0x38(%rsp)
    0.00 :   4083f:  mov    $0x30,%esi
    0.00 :   40844:  lea    0xcd7bf(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   4084b:  xor    %eax,%eax
    0.00 :   4084d:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40852:  mov    0x38(%rsp),%rdx
    0.00 :   40857:  lea    0xdee02(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4085e:  jmp    3ff37 <yyparse@@Base+0x2757>
    0.00 :   40863:  mov    %rax,0x38(%rsp)
    0.00 :   40868:  mov    $0x30,%esi
    0.00 :   4086d:  lea    0xcd796(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40874:  xor    %eax,%eax
    0.00 :   40876:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   4087b:  mov    0x38(%rsp),%rdx
    0.00 :   40880:  lea    0xdedd9(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40887:  jmp    3fb72 <yyparse@@Base+0x2392>
    0.00 :   4088c:  mov    %rax,0x38(%rsp)
    0.00 :   40891:  mov    $0x30,%esi
    0.00 :   40896:  lea    0xcd76d(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   4089d:  xor    %eax,%eax
    0.00 :   4089f:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   408a4:  mov    0x38(%rsp),%rdx
    0.00 :   408a9:  jmp    3f3a2 <yyparse@@Base+0x1bc2>
    0.00 :   408ae:  mov    %rax,0x38(%rsp)
    0.00 :   408b3:  mov    $0x30,%esi
    0.00 :   408b8:  lea    0xcd74b(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   408bf:  xor    %eax,%eax
    0.00 :   408c1:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   408c6:  mov    0x38(%rsp),%rdx
    0.00 :   408cb:  lea    0xded8e(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   408d2:  jmp    3f665 <yyparse@@Base+0x1e85>
    0.00 :   408d7:  mov    %rax,0x38(%rsp)
    0.00 :   408dc:  mov    $0x30,%esi
    0.00 :   408e1:  lea    0xcd722(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   408e8:  xor    %eax,%eax
    0.00 :   408ea:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   408ef:  mov    0x38(%rsp),%rdx
    0.00 :   408f4:  lea    0xded65(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   408fb:  jmp    3fbea <yyparse@@Base+0x240a>
    0.00 :   40900:  mov    %rax,0x38(%rsp)
    0.00 :   40905:  mov    $0x30,%esi
    0.00 :   4090a:  lea    0xcd6f9(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40911:  xor    %eax,%eax
    0.00 :   40913:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40918:  mov    0x38(%rsp),%rdx
    0.00 :   4091d:  lea    0xded3c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40924:  jmp    3f580 <yyparse@@Base+0x1da0>
    0.00 :   40929:  mov    %rax,0x38(%rsp)
    0.00 :   4092e:  mov    $0x30,%esi
    0.00 :   40933:  lea    0xcd6d0(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   4093a:  xor    %eax,%eax
    0.00 :   4093c:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40941:  mov    0x38(%rsp),%rdx
    0.00 :   40946:  lea    0xded13(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4094d:  jmp    3f89a <yyparse@@Base+0x20ba>
    0.00 :   40952:  mov    %rax,0x38(%rsp)
    0.00 :   40957:  mov    $0x30,%esi
    0.00 :   4095c:  lea    0xcd6a7(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40963:  xor    %eax,%eax
    0.00 :   40965:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   4096a:  mov    0x38(%rsp),%rdx
    0.00 :   4096f:  lea    0xdecea(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40976:  jmp    40213 <yyparse@@Base+0x2a33>
    0.00 :   4097b:  mov    %rax,0x38(%rsp)
    0.00 :   40980:  mov    $0x30,%esi
    0.00 :   40985:  lea    0xcd67e(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   4098c:  xor    %eax,%eax
    0.00 :   4098e:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40993:  mov    0x38(%rsp),%rdx
    0.00 :   40998:  lea    0xdecc1(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   4099f:  jmp    3e639 <yyparse@@Base+0xe59>
    0.00 :   409a4:  mov    %rax,0x38(%rsp)
    0.00 :   409a9:  mov    $0x30,%esi
    0.00 :   409ae:  lea    0xcd655(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   409b5:  xor    %eax,%eax
    0.00 :   409b7:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   409bc:  mov    0x38(%rsp),%rdx
    0.00 :   409c1:  jmp    3f318 <yyparse@@Base+0x1b38>
    0.00 :   409c6:  mov    %rax,0x38(%rsp)
    0.00 :   409cb:  mov    $0x30,%esi
    0.00 :   409d0:  lea    0xcd633(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   409d7:  xor    %eax,%eax
    0.00 :   409d9:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   409de:  mov    0x38(%rsp),%rdx
    0.00 :   409e3:  lea    0xdec76(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   409ea:  jmp    3e464 <yyparse@@Base+0xc84>
    0.00 :   409ef:  mov    %rax,0x38(%rsp)
    0.00 :   409f4:  mov    $0x30,%esi
    0.00 :   409f9:  lea    0xcd60a(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40a00:  xor    %eax,%eax
    0.00 :   40a02:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40a07:  mov    0x38(%rsp),%rdx
    0.00 :   40a0c:  lea    0xdec4d(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40a13:  jmp    3eb39 <yyparse@@Base+0x1359>
    0.00 :   40a18:  mov    %rax,0x38(%rsp)
    0.00 :   40a1d:  mov    $0x30,%esi
    0.00 :   40a22:  lea    0xcd5e1(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40a29:  xor    %eax,%eax
    0.00 :   40a2b:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40a30:  mov    0x38(%rsp),%rdx
    0.00 :   40a35:  lea    0xdec24(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40a3c:  jmp    3ecac <yyparse@@Base+0x14cc>
    0.00 :   40a41:  mov    %rax,0x38(%rsp)
    0.00 :   40a46:  mov    $0x30,%esi
    0.00 :   40a4b:  lea    0xcd5b8(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40a52:  xor    %eax,%eax
    0.00 :   40a54:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40a59:  mov    0x38(%rsp),%rdx
    0.00 :   40a5e:  lea    0xdebfb(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40a65:  jmp    3ebb1 <yyparse@@Base+0x13d1>
    0.00 :   40a6a:  mov    %rax,0x38(%rsp)
    0.00 :   40a6f:  mov    $0x30,%esi
    0.00 :   40a74:  lea    0xcd58f(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40a7b:  xor    %eax,%eax
    0.00 :   40a7d:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40a82:  mov    0x38(%rsp),%rdx
    0.00 :   40a87:  lea    0xdebd2(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40a8e:  jmp    3ec2e <yyparse@@Base+0x144e>
    0.00 :   40a93:  mov    %rax,0x38(%rsp)
    0.00 :   40a98:  mov    $0x30,%esi
    0.00 :   40a9d:  lea    0xcd566(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40aa4:  xor    %eax,%eax
    0.00 :   40aa6:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40aab:  mov    0x38(%rsp),%rdx
    0.00 :   40ab0:  lea    0xdeba9(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40ab7:  jmp    3f502 <yyparse@@Base+0x1d22>
    0.00 :   40abc:  mov    %rax,0x38(%rsp)
    0.00 :   40ac1:  mov    $0x30,%esi
    0.00 :   40ac6:  lea    0xcd53d(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40acd:  xor    %eax,%eax
    0.00 :   40acf:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40ad4:  mov    0x38(%rsp),%rdx
    0.00 :   40ad9:  jmp    3fa00 <yyparse@@Base+0x2220>
    0.00 :   40ade:  mov    %rax,0x38(%rsp)
    0.00 :   40ae3:  mov    $0x30,%esi
    0.00 :   40ae8:  lea    0xcd51b(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40aef:  xor    %eax,%eax
    0.00 :   40af1:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40af6:  mov    0x38(%rsp),%rdx
    0.00 :   40afb:  jmp    3fe81 <yyparse@@Base+0x26a1>
    0.00 :   40b00:  mov    %rax,0x38(%rsp)
    0.00 :   40b05:  mov    $0x30,%esi
    0.00 :   40b0a:  lea    0xcd4f9(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40b11:  xor    %eax,%eax
    0.00 :   40b13:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40b18:  mov    0x38(%rsp),%rdx
    0.00 :   40b1d:  lea    0xdeb3c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40b24:  jmp    3fd93 <yyparse@@Base+0x25b3>
    0.00 :   40b29:  mov    %rax,0x38(%rsp)
    0.00 :   40b2e:  mov    $0x30,%esi
    0.00 :   40b33:  lea    0xcd4d0(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40b3a:  xor    %eax,%eax
    0.00 :   40b3c:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40b41:  mov    0x38(%rsp),%rdx
    0.00 :   40b46:  lea    0xdeb13(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40b4d:  jmp    3f6e3 <yyparse@@Base+0x1f03>
    0.00 :   40b52:  mov    %rax,0x38(%rsp)
    0.00 :   40b57:  mov    $0x30,%esi
    0.00 :   40b5c:  lea    0xcd4a7(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40b63:  xor    %eax,%eax
    0.00 :   40b65:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40b6a:  mov    0x38(%rsp),%rdx
    0.00 :   40b6f:  lea    0xdeaea(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40b76:  jmp    4028a <yyparse@@Base+0x2aaa>
    0.00 :   40b7b:  mov    %rax,0x38(%rsp)
    0.00 :   40b80:  mov    $0x30,%esi
    0.00 :   40b85:  lea    0xcd47e(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40b8c:  xor    %eax,%eax
    0.00 :   40b8e:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40b93:  mov    0x38(%rsp),%rdx
    0.00 :   40b98:  lea    0xdeac1(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40b9f:  jmp    3f917 <yyparse@@Base+0x2137>
    0.00 :   40ba4:  mov    %rax,0x38(%rsp)
    0.00 :   40ba9:  mov    $0x30,%esi
    0.00 :   40bae:  lea    0xcd455(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40bb5:  xor    %eax,%eax
    0.00 :   40bb7:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40bbc:  mov    0x38(%rsp),%rdx
    0.00 :   40bc1:  lea    0xdea98(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40bc8:  jmp    40436 <yyparse@@Base+0x2c56>
    0.00 :   40bcd:  lea    0x115070(%rip),%rsi        # 155c44 <current_token@@Base>
    0.00 :   40bd4:  mov    (%rsi),%esi
    0.00 :   40bd6:  jmp    3dd7b <yyparse@@Base+0x59b>
    0.00 :   40bdb:  mov    %rax,0x38(%rsp)
    0.00 :   40be0:  mov    $0x30,%esi
    0.00 :   40be5:  lea    0xcd41e(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40bec:  xor    %eax,%eax
    0.00 :   40bee:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40bf3:  mov    0x38(%rsp),%rdx
    0.00 :   40bf8:  lea    0xdea61(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40bff:  jmp    3dfa9 <yyparse@@Base+0x7c9>
    0.00 :   40c04:  call   30210 <__stack_chk_fail@plt>
    0.00 :   40c09:  mov    0x8(%rsp),%r10
    0.00 :   40c0e:  jmp    3d98b <yyparse@@Base+0x1ab>
    0.00 :   40c13:  mov    %rax,0x38(%rsp)
    0.00 :   40c18:  mov    $0x30,%esi
    0.00 :   40c1d:  lea    0xcd3e6(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40c24:  xor    %eax,%eax
    0.00 :   40c26:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40c2b:  mov    0x38(%rsp),%rdx
    0.00 :   40c30:  lea    0xdea29(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40c37:  jmp    3ffaf <yyparse@@Base+0x27cf>
    0.00 :   40c3c:  mov    %rax,0x38(%rsp)
    0.00 :   40c41:  mov    $0x30,%esi
    0.00 :   40c46:  lea    0xcd3bd(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40c4d:  xor    %eax,%eax
    0.00 :   40c4f:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40c54:  mov    0x38(%rsp),%rdx
    0.00 :   40c59:  lea    0xdea00(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40c60:  jmp    4054c <yyparse@@Base+0x2d6c>
    0.00 :   40c65:  mov    %rax,0x38(%rsp)
    0.00 :   40c6a:  mov    $0x30,%esi
    0.00 :   40c6f:  lea    0xcd394(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40c76:  xor    %eax,%eax
    0.00 :   40c78:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40c7d:  mov    0x38(%rsp),%rdx
    0.00 :   40c82:  lea    0xde9d7(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40c89:  jmp    3fadd <yyparse@@Base+0x22fd>
    0.00 :   40c8e:  mov    %rax,0x38(%rsp)
    0.00 :   40c93:  mov    $0x30,%esi
    0.00 :   40c98:  lea    0xcd36b(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40c9f:  xor    %eax,%eax
    0.00 :   40ca1:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40ca6:  mov    0x38(%rsp),%rdx
    0.00 :   40cab:  lea    0xde9ae(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40cb2:  jmp    404ae <yyparse@@Base+0x2cce>
    0.00 :   40cb7:  mov    %rax,0x38(%rsp)
    0.00 :   40cbc:  mov    $0x30,%esi
    0.00 :   40cc1:  lea    0xcd342(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40cc8:  xor    %eax,%eax
    0.00 :   40cca:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40ccf:  mov    0x38(%rsp),%rdx
    0.00 :   40cd4:  jmp    3fccd <yyparse@@Base+0x24ed>
    0.00 :   40cd9:  mov    %rax,0x38(%rsp)
    0.00 :   40cde:  mov    $0x30,%esi
    0.00 :   40ce3:  lea    0xcd320(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40cea:  xor    %eax,%eax
    0.00 :   40cec:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40cf1:  mov    0x38(%rsp),%rdx
    0.00 :   40cf6:  jmp    4015a <yyparse@@Base+0x297a>
    0.00 :   40cfb:  mov    %rax,0x30(%rsp)
    0.00 :   40d00:  mov    $0x20,%esi
    0.00 :   40d05:  lea    0xcd2fe(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40d0c:  xor    %eax,%eax
    0.00 :   40d0e:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40d13:  mov    0x30(%rsp),%rdx
    0.00 :   40d18:  mov    0x28(%rsp),%rcx
    0.00 :   40d1d:  lea    0xde93c(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40d24:  jmp    4004b <yyparse@@Base+0x286b>
    0.00 :   40d29:  mov    %rax,0x38(%rsp)
    0.00 :   40d2e:  mov    $0x18,%esi
    0.00 :   40d33:  lea    0xcd2d0(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40d3a:  xor    %eax,%eax
    0.00 :   40d3c:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40d41:  mov    0x38(%rsp),%rcx
    0.00 :   40d46:  jmp    4000c <yyparse@@Base+0x282c>
    0.00 :   40d4b:  mov    %rax,0x38(%rsp)
    0.00 :   40d50:  mov    $0x30,%esi
    0.00 :   40d55:  lea    0xcd2ae(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40d5c:  xor    %eax,%eax
    0.00 :   40d5e:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40d63:  mov    0x38(%rsp),%rdx
    0.00 :   40d68:  mov    0x30(%rsp),%r8
    0.00 :   40d6d:  jmp    3e56e <yyparse@@Base+0xd8e>
    0.00 :   40d72:  mov    %rax,0x38(%rsp)
    0.00 :   40d77:  mov    $0x30,%esi
    0.00 :   40d7c:  lea    0xcd287(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40d83:  xor    %eax,%eax
    0.00 :   40d85:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40d8a:  mov    0x38(%rsp),%rdx
    0.00 :   40d8f:  lea    0xde8ca(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40d96:  jmp    3e3e7 <yyparse@@Base+0xc07>
    0.00 :   40d9b:  mov    %rax,0x38(%rsp)
    0.00 :   40da0:  mov    $0x30,%esi
    0.00 :   40da5:  lea    0xcd25e(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40dac:  xor    %eax,%eax
    0.00 :   40dae:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40db3:  mov    0x38(%rsp),%rdx
    0.00 :   40db8:  lea    0xde8a1(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40dbf:  jmp    3e36b <yyparse@@Base+0xb8b>
    0.00 :   40dc4:  mov    %rax,0x38(%rsp)
    0.00 :   40dc9:  mov    $0x30,%esi
    0.00 :   40dce:  lea    0xcd235(%rip),%rdi        # 10e00a <_IO_stdin_used@@Base+0xa>
    0.00 :   40dd5:  xor    %eax,%eax
    0.00 :   40dd7:  call   a05a0 <setup_exec_ignore@@Base+0x10>
    0.00 :   40ddc:  mov    0x38(%rsp),%rdx
    0.00 :   40de1:  lea    0xde878(%rip),%r11        # 11f660 <patch_level@@Base+0xfd0>
    0.00 :   40de8:  jmp    3e501 <yyparse@@Base+0xd21>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000002a410 <bcmp>:
         : 6     bcmp():
         : 7     ./string/../sysdeps/x86_64/memcmp.S:22
    0.00 :   2a410:  endbr64
         : 9     ./string/../sysdeps/x86_64/memcmp.S:27
  100.00 :   2a414:  test   %rdx,%rdx
         : 11    ./string/../sysdeps/x86_64/memcmp.S:28
    0.00 :   2a417:  je     2a510 <bcmp+0x100>
         : 13    ./string/../sysdeps/x86_64/memcmp.S:29
    0.00 :   2a41d:  cmp    $0x1,%rdx
         : 15    ./string/../sysdeps/x86_64/memcmp.S:30
    0.00 :   2a421:  jbe    2a4e1 <bcmp+0xd1>
         : 17    ./string/../sysdeps/x86_64/memcmp.S:31
    0.00 :   2a427:  sub    %rdi,%rsi
         : 19    ./string/../sysdeps/x86_64/memcmp.S:32
    0.00 :   2a42a:  mov    %rdx,%r10
         : 21    ./string/../sysdeps/x86_64/memcmp.S:33
    0.00 :   2a42d:  cmp    $0x20,%r10
         : 23    ./string/../sysdeps/x86_64/memcmp.S:34
    0.00 :   2a431:  jae    2a513 <bcmp+0x103>
         : 25    ./string/../sysdeps/x86_64/memcmp.S:37
    0.00 :   2a437:  test   $0x1,%r10
         : 27    ./string/../sysdeps/x86_64/memcmp.S:38
    0.00 :   2a43e:  je     2a45d <bcmp+0x4d>
         : 29    ./string/../sysdeps/x86_64/memcmp.S:39
    0.00 :   2a440:  movzbl (%rdi),%eax
         : 31    ./string/../sysdeps/x86_64/memcmp.S:40
    0.00 :   2a443:  movzbl (%rdi,%rsi,1),%edx
         : 33    ./string/../sysdeps/x86_64/memcmp.S:41
    0.00 :   2a447:  sub    $0x1,%r10
         : 35    ./string/../sysdeps/x86_64/memcmp.S:42
    0.00 :   2a44b:  je     2a4e7 <bcmp+0xd7>
         : 37    ./string/../sysdeps/x86_64/memcmp.S:43
    0.00 :   2a451:  add    $0x1,%rdi
         : 39    ./string/../sysdeps/x86_64/memcmp.S:44
    0.00 :   2a455:  sub    %edx,%eax
         : 41    ./string/../sysdeps/x86_64/memcmp.S:45
    0.00 :   2a457:  jne    2a4e9 <bcmp+0xd9>
         : 43    ./string/../sysdeps/x86_64/memcmp.S:47
    0.00 :   2a45d:  test   $0x2,%r10
         : 45    ./string/../sysdeps/x86_64/memcmp.S:48
    0.00 :   2a464:  je     2a47b <bcmp+0x6b>
         : 47    ./string/../sysdeps/x86_64/memcmp.S:49
    0.00 :   2a466:  movzwl (%rdi),%eax
         : 49    ./string/../sysdeps/x86_64/memcmp.S:50
    0.00 :   2a469:  movzwl (%rdi,%rsi,1),%edx
         : 51    ./string/../sysdeps/x86_64/memcmp.S:51
    0.00 :   2a46d:  sub    $0x2,%r10
         : 53    ./string/../sysdeps/x86_64/memcmp.S:55
    0.00 :   2a471:  je     2a4ea <bcmp+0xda>
         : 55    ./string/../sysdeps/x86_64/memcmp.S:57
    0.00 :   2a473:  add    $0x2,%rdi
         : 57    ./string/../sysdeps/x86_64/memcmp.S:58
    0.00 :   2a477:  cmp    %edx,%eax
         : 59    ./string/../sysdeps/x86_64/memcmp.S:62
    0.00 :   2a479:  jne    2a4ea <bcmp+0xda>
         : 61    ./string/../sysdeps/x86_64/memcmp.S:65
    0.00 :   2a47b:  test   $0x4,%r10
         : 63    ./string/../sysdeps/x86_64/memcmp.S:66
    0.00 :   2a482:  je     2a497 <bcmp+0x87>
         : 65    ./string/../sysdeps/x86_64/memcmp.S:67
    0.00 :   2a484:  mov    (%rdi),%eax
         : 67    ./string/../sysdeps/x86_64/memcmp.S:68
    0.00 :   2a486:  mov    (%rdi,%rsi,1),%edx
         : 69    ./string/../sysdeps/x86_64/memcmp.S:69
    0.00 :   2a489:  sub    $0x4,%r10
         : 71    ./string/../sysdeps/x86_64/memcmp.S:73
    0.00 :   2a48d:  je     2a4ea <bcmp+0xda>
         : 73    ./string/../sysdeps/x86_64/memcmp.S:75
    0.00 :   2a48f:  add    $0x4,%rdi
         : 75    ./string/../sysdeps/x86_64/memcmp.S:76
    0.00 :   2a493:  cmp    %edx,%eax
         : 77    ./string/../sysdeps/x86_64/memcmp.S:80
    0.00 :   2a495:  jne    2a4ea <bcmp+0xda>
         : 79    ./string/../sysdeps/x86_64/memcmp.S:83
    0.00 :   2a497:  test   $0x8,%r10
         : 81    ./string/../sysdeps/x86_64/memcmp.S:84
    0.00 :   2a49e:  je     2a4b6 <bcmp+0xa6>
         : 83    ./string/../sysdeps/x86_64/memcmp.S:85
    0.00 :   2a4a0:  mov    (%rdi),%rax
         : 85    ./string/../sysdeps/x86_64/memcmp.S:86
    0.00 :   2a4a3:  mov    (%rdi,%rsi,1),%rdx
         : 87    ./string/../sysdeps/x86_64/memcmp.S:87
    0.00 :   2a4a7:  sub    $0x8,%r10
         : 89    ./string/../sysdeps/x86_64/memcmp.S:91
    0.00 :   2a4ab:  je     2a4ea <bcmp+0xda>
         : 91    ./string/../sysdeps/x86_64/memcmp.S:93
    0.00 :   2a4ad:  add    $0x8,%rdi
         : 93    ./string/../sysdeps/x86_64/memcmp.S:94
    0.00 :   2a4b1:  cmp    %rdx,%rax
         : 95    ./string/../sysdeps/x86_64/memcmp.S:98
    0.00 :   2a4b4:  jne    2a4ea <bcmp+0xda>
         : 97    ./string/../sysdeps/x86_64/memcmp.S:101
    0.00 :   2a4b6:  movdqu (%rdi),%xmm1
         : 99    ./string/../sysdeps/x86_64/memcmp.S:102
    0.00 :   2a4ba:  movdqu (%rdi,%rsi,1),%xmm0
         : 101   ./string/../sysdeps/x86_64/memcmp.S:103
    0.00 :   2a4bf:  pcmpeqb %xmm0,%xmm1
         : 103   ./string/../sysdeps/x86_64/memcmp.S:109
    0.00 :   2a4c3:  pmovmskb %xmm1,%edx
         : 105   ./string/../sysdeps/x86_64/memcmp.S:110
    0.00 :   2a4c7:  xor    %eax,%eax
         : 107   ./string/../sysdeps/x86_64/memcmp.S:111
    0.00 :   2a4c9:  sub    $0xffff,%edx
         : 109   ./string/../sysdeps/x86_64/memcmp.S:112
    0.00 :   2a4cf:  je     2a510 <bcmp+0x100>
         : 111   ./string/../sysdeps/x86_64/memcmp.S:113
    0.00 :   2a4d1:  bsf    %edx,%ecx
         : 113   ./string/../sysdeps/x86_64/memcmp.S:114
    0.00 :   2a4d4:  lea    (%rdi,%rcx,1),%rcx
         : 115   ./string/../sysdeps/x86_64/memcmp.S:115
    0.00 :   2a4d8:  movzbl (%rcx),%eax
         : 117   ./string/../sysdeps/x86_64/memcmp.S:116
    0.00 :   2a4db:  movzbl (%rsi,%rcx,1),%edx
         : 119   ./string/../sysdeps/x86_64/memcmp.S:117
    0.00 :   2a4df:  jmp    2a4e7 <bcmp+0xd7>
         : 121   ./string/../sysdeps/x86_64/memcmp.S:121
    0.00 :   2a4e1:  movzbl (%rdi),%eax
         : 123   ./string/../sysdeps/x86_64/memcmp.S:122
    0.00 :   2a4e4:  movzbl (%rsi),%edx
         : 125   ./string/../sysdeps/x86_64/memcmp.S:124
    0.00 :   2a4e7:  sub    %edx,%eax
         : 127   ./string/../sysdeps/x86_64/memcmp.S:126
    0.00 :   2a4e9:  ret
         : 129   ./string/../sysdeps/x86_64/memcmp.S:138
    0.00 :   2a4ea:  cmp    %rdx,%rax
         : 131   ./string/../sysdeps/x86_64/memcmp.S:139
    0.00 :   2a4ed:  je     2a510 <bcmp+0x100>
         : 133   ./string/../sysdeps/x86_64/memcmp.S:140
    0.00 :   2a4ef:  mov    %rax,%r11
         : 135   ./string/../sysdeps/x86_64/memcmp.S:141
    0.00 :   2a4f2:  sub    %rdx,%r11
         : 137   ./string/../sysdeps/x86_64/memcmp.S:142
    0.00 :   2a4f5:  bsf    %r11,%rcx
         : 139   ./string/../sysdeps/x86_64/memcmp.S:143
    0.00 :   2a4f9:  sar    $0x3,%rcx
         : 141   ./string/../sysdeps/x86_64/memcmp.S:144
    0.00 :   2a4fd:  shl    $0x3,%rcx
         : 143   ./string/../sysdeps/x86_64/memcmp.S:145
    0.00 :   2a501:  sar    %cl,%rax
         : 145   ./string/../sysdeps/x86_64/memcmp.S:146
    0.00 :   2a504:  movzbl %al,%eax
         : 147   ./string/../sysdeps/x86_64/memcmp.S:147
    0.00 :   2a507:  sar    %cl,%rdx
         : 149   ./string/../sysdeps/x86_64/memcmp.S:148
    0.00 :   2a50a:  movzbl %dl,%edx
         : 151   ./string/../sysdeps/x86_64/memcmp.S:149
    0.00 :   2a50d:  sub    %edx,%eax
         : 153   ./string/../sysdeps/x86_64/memcmp.S:150
    0.00 :   2a50f:  ret
         : 155   ./string/../sysdeps/x86_64/memcmp.S:154
    0.00 :   2a510:  xor    %eax,%eax
         : 157   ./string/../sysdeps/x86_64/memcmp.S:155
    0.00 :   2a512:  ret
         : 159   ./string/../sysdeps/x86_64/memcmp.S:173
    0.00 :   2a513:  mov    %rdx,%r11
         : 161   ./string/../sysdeps/x86_64/memcmp.S:174
    0.00 :   2a516:  add    %rdi,%r11
         : 163   ./string/../sysdeps/x86_64/memcmp.S:175
    0.00 :   2a519:  mov    %rdi,%r8
         : 165   ./string/../sysdeps/x86_64/memcmp.S:177
    0.00 :   2a51c:  and    $0xf,%r8
         : 167   ./string/../sysdeps/x86_64/memcmp.S:178
    0.00 :   2a520:  je     2a547 <bcmp+0x137>
         : 169   ./string/../sysdeps/x86_64/memcmp.S:180
    0.00 :   2a522:  movdqu (%rdi),%xmm1
         : 171   ./string/../sysdeps/x86_64/memcmp.S:181
    0.00 :   2a526:  movdqu (%rdi,%rsi,1),%xmm0
         : 173   ./string/../sysdeps/x86_64/memcmp.S:182
    0.00 :   2a52b:  pcmpeqb %xmm0,%xmm1
         : 175   ./string/../sysdeps/x86_64/memcmp.S:183
    0.00 :   2a52f:  pmovmskb %xmm1,%edx
         : 177   ./string/../sysdeps/x86_64/memcmp.S:184
    0.00 :   2a533:  sub    $0xffff,%edx
         : 179   ./string/../sysdeps/x86_64/memcmp.S:185
    0.00 :   2a539:  jne    2a6a0 <bcmp+0x290>
         : 181   ./string/../sysdeps/x86_64/memcmp.S:186
    0.00 :   2a53f:  neg    %r8
         : 183   ./string/../sysdeps/x86_64/memcmp.S:187
    0.00 :   2a542:  lea    0x10(%rdi,%r8,1),%rdi
         : 185   ./string/../sysdeps/x86_64/memcmp.S:190
    0.00 :   2a547:  test   $0xf,%rsi
         : 187   ./string/../sysdeps/x86_64/memcmp.S:191
    0.00 :   2a54e:  je     2a6b3 <bcmp+0x2a3>
         : 189   ./string/../sysdeps/x86_64/memcmp.S:192
    0.00 :   2a554:  test   $0x10,%rdi
         : 191   ./string/../sysdeps/x86_64/memcmp.S:193
    0.00 :   2a55b:  je     2a57a <bcmp+0x16a>
         : 193   ./string/../sysdeps/x86_64/memcmp.S:194
    0.00 :   2a55d:  movdqu (%rdi,%rsi,1),%xmm0
         : 195   ./string/../sysdeps/x86_64/memcmp.S:195
    0.00 :   2a562:  pcmpeqb (%rdi),%xmm0
         : 197   ./string/../sysdeps/x86_64/memcmp.S:196
    0.00 :   2a566:  pmovmskb %xmm0,%edx
         : 199   ./string/../sysdeps/x86_64/memcmp.S:197
    0.00 :   2a56a:  sub    $0xffff,%edx
         : 201   ./string/../sysdeps/x86_64/memcmp.S:198
    0.00 :   2a570:  jne    2a6a0 <bcmp+0x290>
         : 203   ./string/../sysdeps/x86_64/memcmp.S:199
    0.00 :   2a576:  add    $0x10,%rdi
         : 205   ./string/../sysdeps/x86_64/memcmp.S:201
    0.00 :   2a57a:  mov    %r11,%r10
         : 207   ./string/../sysdeps/x86_64/memcmp.S:202
    0.00 :   2a57d:  and    $0xffffffffffffffe0,%r10
         : 209   ./string/../sysdeps/x86_64/memcmp.S:203
    0.00 :   2a581:  cmp    %r10,%rdi
         : 211   ./string/../sysdeps/x86_64/memcmp.S:204
    0.00 :   2a584:  jae    2a68d <bcmp+0x27d>
         : 213   ./string/../sysdeps/x86_64/memcmp.S:206
    0.00 :   2a58a:  test   $0x20,%rdi
         : 215   ./string/../sysdeps/x86_64/memcmp.S:207
    0.00 :   2a591:  je     2a5cd <bcmp+0x1bd>
         : 217   ./string/../sysdeps/x86_64/memcmp.S:208
    0.00 :   2a593:  movdqu (%rdi,%rsi,1),%xmm0
         : 219   ./string/../sysdeps/x86_64/memcmp.S:209
    0.00 :   2a598:  pcmpeqb (%rdi),%xmm0
         : 221   ./string/../sysdeps/x86_64/memcmp.S:210
    0.00 :   2a59c:  pmovmskb %xmm0,%edx
         : 223   ./string/../sysdeps/x86_64/memcmp.S:211
    0.00 :   2a5a0:  sub    $0xffff,%edx
         : 225   ./string/../sysdeps/x86_64/memcmp.S:212
    0.00 :   2a5a6:  jne    2a6a0 <bcmp+0x290>
         : 227   ./string/../sysdeps/x86_64/memcmp.S:213
    0.00 :   2a5ac:  add    $0x10,%rdi
         : 229   ./string/../sysdeps/x86_64/memcmp.S:215
    0.00 :   2a5b0:  movdqu (%rdi,%rsi,1),%xmm0
         : 231   ./string/../sysdeps/x86_64/memcmp.S:216
    0.00 :   2a5b5:  pcmpeqb (%rdi),%xmm0
         : 233   ./string/../sysdeps/x86_64/memcmp.S:217
    0.00 :   2a5b9:  pmovmskb %xmm0,%edx
         : 235   ./string/../sysdeps/x86_64/memcmp.S:218
    0.00 :   2a5bd:  sub    $0xffff,%edx
         : 237   ./string/../sysdeps/x86_64/memcmp.S:219
    0.00 :   2a5c3:  jne    2a6a0 <bcmp+0x290>
         : 239   ./string/../sysdeps/x86_64/memcmp.S:220
    0.00 :   2a5c9:  add    $0x10,%rdi
         : 241   ./string/../sysdeps/x86_64/memcmp.S:223
    0.00 :   2a5cd:  mov    %r11,%r10
         : 243   ./string/../sysdeps/x86_64/memcmp.S:224
    0.00 :   2a5d0:  and    $0xffffffffffffffc0,%r10
         : 245   ./string/../sysdeps/x86_64/memcmp.S:225
    0.00 :   2a5d4:  cmp    %r10,%rdi
         : 247   ./string/../sysdeps/x86_64/memcmp.S:226
    0.00 :   2a5d7:  jae    2a64a <bcmp+0x23a>
         : 249   ./string/../sysdeps/x86_64/memcmp.S:229
    0.00 :   2a5d9:  movdqu (%rdi,%rsi,1),%xmm0
         : 251   ./string/../sysdeps/x86_64/memcmp.S:230
    0.00 :   2a5de:  pcmpeqb (%rdi),%xmm0
         : 253   ./string/../sysdeps/x86_64/memcmp.S:231
    0.00 :   2a5e2:  pmovmskb %xmm0,%edx
         : 255   ./string/../sysdeps/x86_64/memcmp.S:232
    0.00 :   2a5e6:  sub    $0xffff,%edx
         : 257   ./string/../sysdeps/x86_64/memcmp.S:233
    0.00 :   2a5ec:  jne    2a6a0 <bcmp+0x290>
         : 259   ./string/../sysdeps/x86_64/memcmp.S:234
    0.00 :   2a5f2:  add    $0x10,%rdi
         : 261   ./string/../sysdeps/x86_64/memcmp.S:236
    0.00 :   2a5f6:  movdqu (%rdi,%rsi,1),%xmm0
         : 263   ./string/../sysdeps/x86_64/memcmp.S:237
    0.00 :   2a5fb:  pcmpeqb (%rdi),%xmm0
         : 265   ./string/../sysdeps/x86_64/memcmp.S:238
    0.00 :   2a5ff:  pmovmskb %xmm0,%edx
         : 267   ./string/../sysdeps/x86_64/memcmp.S:239
    0.00 :   2a603:  sub    $0xffff,%edx
         : 269   ./string/../sysdeps/x86_64/memcmp.S:240
    0.00 :   2a609:  jne    2a6a0 <bcmp+0x290>
         : 271   ./string/../sysdeps/x86_64/memcmp.S:241
    0.00 :   2a60f:  add    $0x10,%rdi
         : 273   ./string/../sysdeps/x86_64/memcmp.S:243
    0.00 :   2a613:  movdqu (%rdi,%rsi,1),%xmm0
         : 275   ./string/../sysdeps/x86_64/memcmp.S:244
    0.00 :   2a618:  pcmpeqb (%rdi),%xmm0
         : 277   ./string/../sysdeps/x86_64/memcmp.S:245
    0.00 :   2a61c:  pmovmskb %xmm0,%edx
         : 279   ./string/../sysdeps/x86_64/memcmp.S:246
    0.00 :   2a620:  sub    $0xffff,%edx
         : 281   ./string/../sysdeps/x86_64/memcmp.S:247
    0.00 :   2a626:  jne    2a6a0 <bcmp+0x290>
         : 283   ./string/../sysdeps/x86_64/memcmp.S:248
    0.00 :   2a628:  add    $0x10,%rdi
         : 285   ./string/../sysdeps/x86_64/memcmp.S:250
    0.00 :   2a62c:  movdqu (%rdi,%rsi,1),%xmm0
         : 287   ./string/../sysdeps/x86_64/memcmp.S:251
    0.00 :   2a631:  pcmpeqb (%rdi),%xmm0
         : 289   ./string/../sysdeps/x86_64/memcmp.S:252
    0.00 :   2a635:  pmovmskb %xmm0,%edx
         : 291   ./string/../sysdeps/x86_64/memcmp.S:253
    0.00 :   2a639:  sub    $0xffff,%edx
         : 293   ./string/../sysdeps/x86_64/memcmp.S:254
    0.00 :   2a63f:  jne    2a6a0 <bcmp+0x290>
         : 295   ./string/../sysdeps/x86_64/memcmp.S:255
    0.00 :   2a641:  add    $0x10,%rdi
         : 297   ./string/../sysdeps/x86_64/memcmp.S:257
    0.00 :   2a645:  cmp    %rdi,%r10
         : 299   ./string/../sysdeps/x86_64/memcmp.S:258
    0.00 :   2a648:  jne    2a5d9 <bcmp+0x1c9>
         : 301   ./string/../sysdeps/x86_64/memcmp.S:261
    0.00 :   2a64a:  mov    %r11,%r10
         : 303   ./string/../sysdeps/x86_64/memcmp.S:262
    0.00 :   2a64d:  and    $0xffffffffffffffe0,%r10
         : 305   ./string/../sysdeps/x86_64/memcmp.S:263
    0.00 :   2a651:  cmp    %r10,%rdi
         : 307   ./string/../sysdeps/x86_64/memcmp.S:264
    0.00 :   2a654:  jae    2a68d <bcmp+0x27d>
         : 309   ./string/../sysdeps/x86_64/memcmp.S:267
    0.00 :   2a656:  movdqu (%rdi,%rsi,1),%xmm0
         : 311   ./string/../sysdeps/x86_64/memcmp.S:268
    0.00 :   2a65b:  pcmpeqb (%rdi),%xmm0
         : 313   ./string/../sysdeps/x86_64/memcmp.S:269
    0.00 :   2a65f:  pmovmskb %xmm0,%edx
         : 315   ./string/../sysdeps/x86_64/memcmp.S:270
    0.00 :   2a663:  sub    $0xffff,%edx
         : 317   ./string/../sysdeps/x86_64/memcmp.S:271
    0.00 :   2a669:  jne    2a6a0 <bcmp+0x290>
         : 319   ./string/../sysdeps/x86_64/memcmp.S:272
    0.00 :   2a66b:  add    $0x10,%rdi
         : 321   ./string/../sysdeps/x86_64/memcmp.S:274
    0.00 :   2a66f:  movdqu (%rdi,%rsi,1),%xmm0
         : 323   ./string/../sysdeps/x86_64/memcmp.S:275
    0.00 :   2a674:  pcmpeqb (%rdi),%xmm0
         : 325   ./string/../sysdeps/x86_64/memcmp.S:276
    0.00 :   2a678:  pmovmskb %xmm0,%edx
         : 327   ./string/../sysdeps/x86_64/memcmp.S:277
    0.00 :   2a67c:  sub    $0xffff,%edx
         : 329   ./string/../sysdeps/x86_64/memcmp.S:278
    0.00 :   2a682:  jne    2a6a0 <bcmp+0x290>
         : 331   ./string/../sysdeps/x86_64/memcmp.S:279
    0.00 :   2a684:  add    $0x10,%rdi
         : 333   ./string/../sysdeps/x86_64/memcmp.S:281
    0.00 :   2a688:  cmp    %rdi,%r10
         : 335   ./string/../sysdeps/x86_64/memcmp.S:282
    0.00 :   2a68b:  jne    2a656 <bcmp+0x246>
         : 337   ./string/../sysdeps/x86_64/memcmp.S:284
    0.00 :   2a68d:  sub    %rdi,%r11
         : 339   ./string/../sysdeps/x86_64/memcmp.S:285
    0.00 :   2a690:  je     2a510 <bcmp+0x100>
         : 341   ./string/../sysdeps/x86_64/memcmp.S:286
    0.00 :   2a696:  mov    %r11,%r10
         : 343   ./string/../sysdeps/x86_64/memcmp.S:287
    0.00 :   2a699:  jmp    2a437 <bcmp+0x27>
    0.00 :   2a69e:  xchg   %ax,%ax
         : 346   ./string/../sysdeps/x86_64/memcmp.S:295
    0.00 :   2a6a0:  bsf    %edx,%ecx
         : 348   ./string/../sysdeps/x86_64/memcmp.S:296
    0.00 :   2a6a3:  movzbl (%rdi,%rcx,1),%eax
         : 350   ./string/../sysdeps/x86_64/memcmp.S:297
    0.00 :   2a6a7:  add    %rdi,%rsi
         : 352   ./string/../sysdeps/x86_64/memcmp.S:298
    0.00 :   2a6aa:  movzbl (%rsi,%rcx,1),%edx
         : 354   ./string/../sysdeps/x86_64/memcmp.S:299
    0.00 :   2a6ae:  jmp    2a4e7 <bcmp+0xd7>
         : 356   ./string/../sysdeps/x86_64/memcmp.S:304
    0.00 :   2a6b3:  mov    %r11,%r10
         : 358   ./string/../sysdeps/x86_64/memcmp.S:305
    0.00 :   2a6b6:  and    $0xffffffffffffffe0,%r10
         : 360   ./string/../sysdeps/x86_64/memcmp.S:306
    0.00 :   2a6ba:  cmp    %r10,%rdi
         : 362   ./string/../sysdeps/x86_64/memcmp.S:307
    0.00 :   2a6bd:  jae    2a68d <bcmp+0x27d>
         : 364   ./string/../sysdeps/x86_64/memcmp.S:308
    0.00 :   2a6bf:  test   $0x10,%rdi
         : 366   ./string/../sysdeps/x86_64/memcmp.S:309
    0.00 :   2a6c6:  je     2a6e6 <bcmp+0x2d6>
         : 368   ./string/../sysdeps/x86_64/memcmp.S:311
    0.00 :   2a6c8:  movdqa (%rdi,%rsi,1),%xmm0
         : 370   ./string/../sysdeps/x86_64/memcmp.S:312
    0.00 :   2a6cd:  pcmpeqb (%rdi),%xmm0
         : 372   ./string/../sysdeps/x86_64/memcmp.S:313
    0.00 :   2a6d1:  pmovmskb %xmm0,%edx
         : 374   ./string/../sysdeps/x86_64/memcmp.S:314
    0.00 :   2a6d5:  sub    $0xffff,%edx
         : 376   ./string/../sysdeps/x86_64/memcmp.S:315
    0.00 :   2a6db:  jne    2a6a0 <bcmp+0x290>
         : 378   ./string/../sysdeps/x86_64/memcmp.S:316
    0.00 :   2a6dd:  add    $0x10,%rdi
         : 380   ./string/../sysdeps/x86_64/memcmp.S:317
    0.00 :   2a6e1:  cmp    %rdi,%r10
         : 382   ./string/../sysdeps/x86_64/memcmp.S:318
    0.00 :   2a6e4:  je     2a68d <bcmp+0x27d>
         : 384   ./string/../sysdeps/x86_64/memcmp.S:321
    0.00 :   2a6e6:  mov    %r11,%r10
         : 386   ./string/../sysdeps/x86_64/memcmp.S:322
    0.00 :   2a6e9:  and    $0xffffffffffffffc0,%r10
         : 388   ./string/../sysdeps/x86_64/memcmp.S:323
    0.00 :   2a6ed:  test   $0x20,%rdi
         : 390   ./string/../sysdeps/x86_64/memcmp.S:324
    0.00 :   2a6f4:  je     2a72c <bcmp+0x31c>
         : 392   ./string/../sysdeps/x86_64/memcmp.S:326
    0.00 :   2a6f6:  movdqa (%rdi,%rsi,1),%xmm0
         : 394   ./string/../sysdeps/x86_64/memcmp.S:327
    0.00 :   2a6fb:  pcmpeqb (%rdi),%xmm0
         : 396   ./string/../sysdeps/x86_64/memcmp.S:328
    0.00 :   2a6ff:  pmovmskb %xmm0,%edx
         : 398   ./string/../sysdeps/x86_64/memcmp.S:329
    0.00 :   2a703:  sub    $0xffff,%edx
         : 400   ./string/../sysdeps/x86_64/memcmp.S:330
    0.00 :   2a709:  jne    2a6a0 <bcmp+0x290>
         : 402   ./string/../sysdeps/x86_64/memcmp.S:331
    0.00 :   2a70b:  add    $0x10,%rdi
         : 404   ./string/../sysdeps/x86_64/memcmp.S:333
    0.00 :   2a70f:  movdqa (%rdi,%rsi,1),%xmm0
         : 406   ./string/../sysdeps/x86_64/memcmp.S:334
    0.00 :   2a714:  pcmpeqb (%rdi),%xmm0
         : 408   ./string/../sysdeps/x86_64/memcmp.S:335
    0.00 :   2a718:  pmovmskb %xmm0,%edx
         : 410   ./string/../sysdeps/x86_64/memcmp.S:336
    0.00 :   2a71c:  sub    $0xffff,%edx
         : 412   ./string/../sysdeps/x86_64/memcmp.S:337
    0.00 :   2a722:  jne    2a6a0 <bcmp+0x290>
         : 414   ./string/../sysdeps/x86_64/memcmp.S:338
    0.00 :   2a728:  add    $0x10,%rdi
         : 416   ./string/../sysdeps/x86_64/memcmp.S:341
    0.00 :   2a72c:  cmp    %rdi,%r10
         : 418   ./string/../sysdeps/x86_64/memcmp.S:342
    0.00 :   2a72f:  je     2a64a <bcmp+0x23a>
         : 420   ./string/../sysdeps/x86_64/memcmp.S:345
    0.00 :   2a735:  movdqa (%rdi,%rsi,1),%xmm0
         : 422   ./string/../sysdeps/x86_64/memcmp.S:346
    0.00 :   2a73a:  pcmpeqb (%rdi),%xmm0
         : 424   ./string/../sysdeps/x86_64/memcmp.S:347
    0.00 :   2a73e:  pmovmskb %xmm0,%edx
         : 426   ./string/../sysdeps/x86_64/memcmp.S:348
    0.00 :   2a742:  sub    $0xffff,%edx
         : 428   ./string/../sysdeps/x86_64/memcmp.S:349
    0.00 :   2a748:  jne    2a6a0 <bcmp+0x290>
         : 430   ./string/../sysdeps/x86_64/memcmp.S:350
    0.00 :   2a74e:  add    $0x10,%rdi
         : 432   ./string/../sysdeps/x86_64/memcmp.S:352
    0.00 :   2a752:  movdqa (%rdi,%rsi,1),%xmm0
         : 434   ./string/../sysdeps/x86_64/memcmp.S:353
    0.00 :   2a757:  pcmpeqb (%rdi),%xmm0
         : 436   ./string/../sysdeps/x86_64/memcmp.S:354
    0.00 :   2a75b:  pmovmskb %xmm0,%edx
         : 438   ./string/../sysdeps/x86_64/memcmp.S:355
    0.00 :   2a75f:  sub    $0xffff,%edx
         : 440   ./string/../sysdeps/x86_64/memcmp.S:356
    0.00 :   2a765:  jne    2a6a0 <bcmp+0x290>
         : 442   ./string/../sysdeps/x86_64/memcmp.S:357
    0.00 :   2a76b:  add    $0x10,%rdi
         : 444   ./string/../sysdeps/x86_64/memcmp.S:359
    0.00 :   2a76f:  movdqa (%rdi,%rsi,1),%xmm0
         : 446   ./string/../sysdeps/x86_64/memcmp.S:360
    0.00 :   2a774:  pcmpeqb (%rdi),%xmm0
         : 448   ./string/../sysdeps/x86_64/memcmp.S:361
    0.00 :   2a778:  pmovmskb %xmm0,%edx
         : 450   ./string/../sysdeps/x86_64/memcmp.S:362
    0.00 :   2a77c:  sub    $0xffff,%edx
         : 452   ./string/../sysdeps/x86_64/memcmp.S:363
    0.00 :   2a782:  jne    2a6a0 <bcmp+0x290>
         : 454   ./string/../sysdeps/x86_64/memcmp.S:364
    0.00 :   2a788:  add    $0x10,%rdi
         : 456   ./string/../sysdeps/x86_64/memcmp.S:366
    0.00 :   2a78c:  movdqa (%rdi,%rsi,1),%xmm0
         : 458   ./string/../sysdeps/x86_64/memcmp.S:367
    0.00 :   2a791:  pcmpeqb (%rdi),%xmm0
         : 460   ./string/../sysdeps/x86_64/memcmp.S:368
    0.00 :   2a795:  pmovmskb %xmm0,%edx
         : 462   ./string/../sysdeps/x86_64/memcmp.S:369
    0.00 :   2a799:  sub    $0xffff,%edx
         : 464   ./string/../sysdeps/x86_64/memcmp.S:370
    0.00 :   2a79f:  jne    2a6a0 <bcmp+0x290>
         : 466   ./string/../sysdeps/x86_64/memcmp.S:371
    0.00 :   2a7a5:  add    $0x10,%rdi
         : 468   ./string/../sysdeps/x86_64/memcmp.S:372
    0.00 :   2a7a9:  cmp    %rdi,%r10
         : 470   ./string/../sysdeps/x86_64/memcmp.S:373
    0.00 :   2a7ac:  jne    2a735 <bcmp+0x325>
         : 472   ./string/../sysdeps/x86_64/memcmp.S:375
    0.00 :   2a7ae:  mov    %r11,%r10
         : 474   ./string/../sysdeps/x86_64/memcmp.S:376
    0.00 :   2a7b1:  and    $0xffffffffffffffe0,%r10
         : 476   ./string/../sysdeps/x86_64/memcmp.S:377
    0.00 :   2a7b5:  cmp    %r10,%rdi
         : 478   ./string/../sysdeps/x86_64/memcmp.S:378
    0.00 :   2a7b8:  jae    2a68d <bcmp+0x27d>
         : 480   ./string/../sysdeps/x86_64/memcmp.S:381
    0.00 :   2a7be:  movdqa (%rdi,%rsi,1),%xmm0
         : 482   ./string/../sysdeps/x86_64/memcmp.S:382
    0.00 :   2a7c3:  pcmpeqb (%rdi),%xmm0
         : 484   ./string/../sysdeps/x86_64/memcmp.S:383
    0.00 :   2a7c7:  pmovmskb %xmm0,%edx
         : 486   ./string/../sysdeps/x86_64/memcmp.S:384
    0.00 :   2a7cb:  sub    $0xffff,%edx
         : 488   ./string/../sysdeps/x86_64/memcmp.S:385
    0.00 :   2a7d1:  jne    2a6a0 <bcmp+0x290>
         : 490   ./string/../sysdeps/x86_64/memcmp.S:386
    0.00 :   2a7d7:  add    $0x10,%rdi
         : 492   ./string/../sysdeps/x86_64/memcmp.S:388
    0.00 :   2a7db:  movdqa (%rdi,%rsi,1),%xmm0
         : 494   ./string/../sysdeps/x86_64/memcmp.S:389
    0.00 :   2a7e0:  pcmpeqb (%rdi),%xmm0
         : 496   ./string/../sysdeps/x86_64/memcmp.S:390
    0.00 :   2a7e4:  pmovmskb %xmm0,%edx
         : 498   ./string/../sysdeps/x86_64/memcmp.S:391
    0.00 :   2a7e8:  sub    $0xffff,%edx
         : 500   ./string/../sysdeps/x86_64/memcmp.S:392
    0.00 :   2a7ee:  jne    2a6a0 <bcmp+0x290>
         : 502   ./string/../sysdeps/x86_64/memcmp.S:393
    0.00 :   2a7f4:  add    $0x10,%rdi
         : 504   ./string/../sysdeps/x86_64/memcmp.S:395
    0.00 :   2a7f8:  cmp    %r10,%rdi
         : 506   ./string/../sysdeps/x86_64/memcmp.S:396
    0.00 :   2a7fb:  jne    2a7be <bcmp+0x3ae>
         : 508   ./string/../sysdeps/x86_64/memcmp.S:398
    0.00 :   2a7fd:  sub    %rdi,%r11
         : 510   ./string/../sysdeps/x86_64/memcmp.S:399
    0.00 :   2a800:  je     2a510 <bcmp+0x100>
         : 512   ./string/../sysdeps/x86_64/memcmp.S:400
    0.00 :   2a806:  mov    %r11,%r10
         : 514   ./string/../sysdeps/x86_64/memcmp.S:401
    0.00 :   2a809:  jmp    2a437 <bcmp+0x27>
    0.00 :   2a80e:  xchg   %ax,%ax
 Percent |	Source code & Disassembly of libc.so.6 for cycles:u (1 samples, percent: local period)
------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     00000000000a82e0 <strcmp_ifunc>:
         : 6     strcmp_ifunc():
         : 7     ./string/../sysdeps/x86_64/multiarch/strcmp.c:65
    0.00 :   a82e0:  endbr64
         : 9     strcmp_ifunc_selector():
         : 10    ./string/../sysdeps/x86_64/multiarch/strcmp.c:41
    0.00 :   a82e4:  mov    0x171bdd(%rip),%rdx        # 219ec8 <_rtld_global_ro@GLIBC_PRIVATE>
    0.00 :   a82eb:  mov    0xb8(%rdx),%ecx
         : 13    ./string/../sysdeps/x86_64/multiarch/strcmp.c:42
    0.00 :   a82f1:  mov    0x1a4(%rdx),%esi
         : 15    ./string/../sysdeps/x86_64/multiarch/strcmp.c:41
    0.00 :   a82f7:  test   $0x20,%cl
    0.00 :   a82fa:  je     a8304 <strcmp_ifunc+0x24>
         : 18    ./string/../sysdeps/x86_64/multiarch/strcmp.c:42
    0.00 :   a82fc:  test   $0x200,%esi
    0.00 :   a8302:  jne    a8330 <strcmp_ifunc+0x50>
         : 21    ./string/../sysdeps/x86_64/multiarch/strcmp.c:56
    0.00 :   a8304:  and    $0x8,%esi
    0.00 :   a8307:  lea    0xaa62(%rip),%rax        # b2d70 <__strcmp_sse2_unaligned>
    0.00 :   a830e:  jne    a8329 <strcmp_ifunc+0x49>
         : 25    ./string/../sysdeps/x86_64/multiarch/strcmp.c:59
    0.00 :   a8310:  testb  $0x2,0x9d(%rdx)
    0.00 :   a8317:  lea    0x9602(%rip),%rax        # b1920 <__strcmp_sse2>
    0.00 :   a831e:  lea    0xcfedb(%rip),%rdx        # 178200 <__GI___strcmp_ssse3>
    0.00 :   a8325:  cmovne %rdx,%rax
         : 30    strcmp_ifunc():
         : 31    ./string/../sysdeps/x86_64/multiarch/strcmp.c:65
    0.00 :   a8329:  ret
    0.00 :   a832a:  nopw   0x0(%rax,%rax,1)
         : 34    strcmp_ifunc_selector():
         : 35    ./string/../sysdeps/x86_64/multiarch/strcmp.c:44
    0.00 :   a8330:  test   %ecx,%ecx
  100.00 :   a8332:  js     a8350 <strcmp_ifunc+0x70>
         : 38    ./string/../sysdeps/x86_64/multiarch/strcmp.c:49
    0.00 :   a8334:  lea    0x100965(%rip),%rax        # 1a8ca0 <__strcmp_avx2_rtm>
    0.00 :   a833b:  and    $0x8,%ch
    0.00 :   a833e:  jne    a8329 <strcmp_ifunc+0x49>
         : 42    ./string/../sysdeps/x86_64/multiarch/strcmp.c:52
    0.00 :   a8340:  lea    0xf05f9(%rip),%rax        # 198940 <__strcmp_avx2>
    0.00 :   a8347:  test   $0x400,%esi
    0.00 :   a834d:  jne    a8304 <strcmp_ifunc+0x24>
         : 46    strcmp_ifunc():
         : 47    ./string/../sysdeps/x86_64/multiarch/strcmp.c:65
    0.00 :   a834f:  ret
         : 49    strcmp_ifunc_selector():
         : 50    ./string/../sysdeps/x86_64/multiarch/strcmp.c:46
    0.00 :   a8350:  mov    %ecx,%edi
    0.00 :   a8352:  lea    0x109487(%rip),%rax        # 1b17e0 <__strcmp_evex>
    0.00 :   a8359:  and    $0x40000100,%edi
    0.00 :   a835f:  cmp    $0x40000100,%edi
    0.00 :   a8365:  jne    a8334 <strcmp_ifunc+0x54>
    0.00 :   a8367:  jmp    a8329 <strcmp_ifunc+0x49>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000020d10 <init_tls>:
         : 6     init_tls():
         : 7     ./elf/rtld.c:756
    0.00 :   20d10:  push   %r12
  100.00 :   20d12:  push   %rbp
    0.00 :   20d13:  sub    $0x8,%rsp
         : 11    ./elf/rtld.c:758
    0.00 :   20d17:  mov    0x1a36a(%rip),%r12        # 3b088 <_rtld_global+0x1048>
         : 13    ./elf/rtld.c:762
    0.00 :   20d1e:  cmpq   $0x0,0x1a38a(%rip)        # 3b0b0 <_rtld_global+0x1070>
         : 15    ./elf/rtld.c:758
    0.00 :   20d26:  mov    %r12,0x1a36b(%rip)        # 3b098 <_rtld_global+0x1058>
         : 17    ./elf/rtld.c:762
    0.00 :   20d2d:  jne    20e38 <init_tls+0x128>
    0.00 :   20d33:  mov    %rdi,%rbp
         : 20    ./elf/rtld.c:773
    0.00 :   20d36:  lea    0x40(%r12),%rdi
         : 22    calloc():
         : 23    ./elf/../include/rtld-malloc.h:44
    0.00 :   20d3b:  mov    $0x1,%esi
         : 25    init_tls():
         : 26    ./elf/rtld.c:768
    0.00 :   20d40:  add    $0x3f,%r12
         : 28    ./elf/rtld.c:772
    0.00 :   20d44:  shl    $0x4,%rdi
         : 30    calloc():
         : 31    ./elf/../include/rtld-malloc.h:44
    0.00 :   20d48:  call   *0x18d22(%rip)        # 39a70 <__rtld_calloc>
         : 33    init_tls():
         : 34    ./elf/rtld.c:783
    0.00 :   20d4e:  cmpq   $0x0,0x1938a(%rip)        # 3a0e0 <_rtld_global+0xa0>
         : 36    ./elf/rtld.c:771
    0.00 :   20d56:  mov    %rax,0x1a333(%rip)        # 3b090 <_rtld_global+0x1050>
         : 38    ./elf/rtld.c:777
    0.00 :   20d5d:  lea    0x10(%rax),%rsi
         : 40    ./elf/rtld.c:768
    0.00 :   20d61:  mov    %r12,(%rax)
         : 42    ./elf/rtld.c:779
    0.00 :   20d64:  movq   $0x0,0x8(%rax)
         : 44    ./elf/rtld.c:783
    0.00 :   20d6c:  jne    20e9c <init_tls+0x18c>
         : 46    ./elf/rtld.c:785
    0.00 :   20d72:  mov    0x192c7(%rip),%rax        # 3a040 <_rtld_global>
    0.00 :   20d79:  test   %rax,%rax
    0.00 :   20d7c:  je     20e68 <init_tls+0x158>
         : 50    ./elf/rtld.c:784
    0.00 :   20d82:  xor    %ecx,%ecx
    0.00 :   20d84:  nopl   0x0(%rax)
         : 53    ./elf/rtld.c:787
    0.00 :   20d88:  cmpq   $0x0,0x440(%rax)
    0.00 :   20d90:  je     20e20 <init_tls+0x110>
         : 56    ./elf/rtld.c:791
    0.00 :   20d96:  movslq %ecx,%rdx
         : 58    ./elf/rtld.c:793
    0.00 :   20d99:  add    $0x1,%ecx
         : 60    ./elf/rtld.c:791
    0.00 :   20d9c:  shl    $0x4,%rdx
    0.00 :   20da0:  mov    %rax,0x8(%rsi,%rdx,1)
         : 63    ./elf/rtld.c:786
    0.00 :   20da5:  mov    0x18(%rax),%rax
         : 65    ./elf/rtld.c:785
    0.00 :   20da9:  test   %rax,%rax
    0.00 :   20dac:  jne    20d88 <init_tls+0x78>
         : 68    ./elf/rtld.c:795
    0.00 :   20dae:  movslq %ecx,%rcx
    0.00 :   20db1:  cmp    %rcx,0x1a2d0(%rip)        # 3b088 <_rtld_global+0x1048>
    0.00 :   20db8:  jne    20e6f <init_tls+0x15f>
         : 72    ./elf/rtld.c:798
    0.00 :   20dbe:  mov    %rbp,%rdi
    0.00 :   20dc1:  call   14020 <_dl_tls_static_surplus_init>
         : 75    ./elf/rtld.c:801
    0.00 :   20dc6:  call   14230 <_dl_determine_tlsoffset>
         : 77    ./elf/rtld.c:808
    0.00 :   20dcb:  call   14410 <_dl_allocate_tls_storage>
    0.00 :   20dd0:  mov    %rax,%r12
         : 80    ./elf/rtld.c:809
    0.00 :   20dd3:  test   %rax,%rax
    0.00 :   20dd6:  je     20e8e <init_tls+0x17e>
         : 83    ./elf/rtld.c:815
    0.00 :   20ddc:  mov    0x8(%rax),%rax
         : 85    ./elf/rtld.c:818
    0.00 :   20de0:  mov    $0x1002,%edi
    0.00 :   20de5:  mov    %r12,%rsi
         : 88    ./elf/rtld.c:815
    0.00 :   20de8:  mov    %rax,0x1a2c1(%rip)        # 3b0b0 <_rtld_global+0x1070>
         : 90    ./elf/rtld.c:818
    0.00 :   20def:  mov    $0x9e,%eax
    0.00 :   20df4:  mov    %r12,(%r12)
    0.00 :   20df8:  mov    %r12,0x10(%r12)
    0.00 :   20dfd:  syscall
    0.00 :   20dff:  test   %eax,%eax
    0.00 :   20e01:  jne    20e50 <init_tls+0x140>
         : 97    ./elf/rtld.c:821
    0.00 :   20e03:  call   150f0 <__tls_init_tp>
         : 99    ./elf/rtld.c:822
    0.00 :   20e08:  movb   $0x1,0x1a439(%rip)        # 3b248 <tls_init_tp_called>
         : 101   ./elf/rtld.c:825
    0.00 :   20e0f:  add    $0x8,%rsp
    0.00 :   20e13:  mov    %r12,%rax
    0.00 :   20e16:  pop    %rbp
    0.00 :   20e17:  pop    %r12
    0.00 :   20e19:  ret
    0.00 :   20e1a:  nopw   0x0(%rax,%rax,1)
         : 108   ./elf/rtld.c:786
    0.00 :   20e20:  mov    0x18(%rax),%rax
         : 110   ./elf/rtld.c:785
    0.00 :   20e24:  test   %rax,%rax
    0.00 :   20e27:  jne    20d88 <init_tls+0x78>
    0.00 :   20e2d:  jmp    20dae <init_tls+0x9e>
    0.00 :   20e32:  nopw   0x0(%rax,%rax,1)
         : 115   ./elf/rtld.c:763
    0.00 :   20e38:  xor    %r12d,%r12d
         : 117   ./elf/rtld.c:825
    0.00 :   20e3b:  add    $0x8,%rsp
    0.00 :   20e3f:  mov    %r12,%rax
    0.00 :   20e42:  pop    %rbp
    0.00 :   20e43:  pop    %r12
    0.00 :   20e45:  ret
    0.00 :   20e46:  cs nopw 0x0(%rax,%rax,1)
         : 124   ./elf/rtld.c:820
    0.00 :   20e50:  lea    0x11661(%rip),%rsi        # 324b8 <__PRETTY_FUNCTION__.3+0xc70>
    0.00 :   20e57:  lea    0x11692(%rip),%rdi        # 324f0 <__PRETTY_FUNCTION__.3+0xca8>
    0.00 :   20e5e:  xor    %eax,%eax
    0.00 :   20e60:  call   ff20 <_dl_fatal_printf>
    0.00 :   20e65:  nopl   (%rax)
         : 130   ./elf/rtld.c:785
    0.00 :   20e68:  xor    %ecx,%ecx
    0.00 :   20e6a:  jmp    20db1 <init_tls+0xa1>
         : 133   ./elf/rtld.c:795 (discriminator 1)
    0.00 :   20e6f:  lea    0x11c02(%rip),%rcx        # 32a78 <__PRETTY_FUNCTION__.14>
    0.00 :   20e76:  mov    $0x31b,%edx
    0.00 :   20e7b:  lea    0xdcbb(%rip),%rsi        # 2eb3d <__PRETTY_FUNCTION__.2+0x1cf>
    0.00 :   20e82:  lea    0xdcbb(%rip),%rdi        # 2eb44 <__PRETTY_FUNCTION__.2+0x1d6>
    0.00 :   20e89:  call   1e460 <__GI___assert_fail>
         : 139   ./elf/rtld.c:810
    0.00 :   20e8e:  lea    0x115eb(%rip),%rdi        # 32480 <__PRETTY_FUNCTION__.3+0xc38>
    0.00 :   20e95:  xor    %eax,%eax
    0.00 :   20e97:  call   ff20 <_dl_fatal_printf>
         : 143   ./elf/rtld.c:783 (discriminator 1)
    0.00 :   20e9c:  lea    0x11bd5(%rip),%rcx        # 32a78 <__PRETTY_FUNCTION__.14>
    0.00 :   20ea3:  mov    $0x30f,%edx
    0.00 :   20ea8:  lea    0xdc8e(%rip),%rsi        # 2eb3d <__PRETTY_FUNCTION__.2+0x1cf>
    0.00 :   20eaf:  lea    0x1159a(%rip),%rdi        # 32450 <__PRETTY_FUNCTION__.3+0xc08>
    0.00 :   20eb6:  call   1e460 <__GI___assert_fail>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (1 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     000000000001f440 <_dl_sysdep_start>:
         : 6     _dl_sysdep_start():
         : 7     ./elf/../elf/dl-sysdep.c:85
    0.00 :   1f440:  endbr64
  100.00 :   1f444:  push   %r15
    0.00 :   1f446:  mov    %rdi,%rax
    0.00 :   1f449:  push   %r14
         : 12    ./elf/../elf/dl-sysdep.c:110
    0.00 :   1f44b:  add    $0x8,%rax
         : 14    ./elf/../elf/dl-sysdep.c:85
    0.00 :   1f44f:  push   %r13
    0.00 :   1f451:  push   %r12
    0.00 :   1f453:  push   %rbp
    0.00 :   1f454:  push   %rbx
    0.00 :   1f455:  mov    %rsi,%rbx
    0.00 :   1f458:  sub    $0x68,%rsp
         : 21    ./elf/../elf/dl-sysdep.c:110
    0.00 :   1f45c:  mov    (%rdi),%rdx
         : 23    ./elf/../elf/dl-sysdep.c:109
    0.00 :   1f45f:  mov    %rdi,0x1a62a(%rip)        # 39a90 <__libc_stack_end>
         : 25    ./elf/../elf/dl-sysdep.c:110
    0.00 :   1f466:  mov    %rax,0x1a653(%rip)        # 39ac0 <_dl_argv>
    0.00 :   1f46d:  mov    %edx,0x1a655(%rip)        # 39ac8 <_dl_argc>
    0.00 :   1f473:  movslq %edx,%rdx
    0.00 :   1f476:  lea    0x8(%rax,%rdx,8),%rdi
    0.00 :   1f47b:  mov    %rdi,0x1be4e(%rip)        # 3b2d0 <__environ>
    0.00 :   1f482:  cmpq   $0x0,(%rdi)
    0.00 :   1f486:  mov    %rdi,%rax
    0.00 :   1f489:  je     1f495 <_dl_sysdep_start+0x55>
         : 34    ./elf/../elf/dl-sysdep.c:110 (discriminator 4)
    0.00 :   1f48b:  add    $0x8,%rax
    0.00 :   1f48f:  cmpq   $0x0,(%rax)
    0.00 :   1f493:  jne    1f48b <_dl_sysdep_start+0x4b>
         : 38    ./elf/../elf/dl-sysdep.c:110 (discriminator 5)
    0.00 :   1f495:  lea    0x8(%rax),%rdx
         : 40    ./elf/../elf/dl-sysdep.c:121 (discriminator 5)
    0.00 :   1f499:  mov    0x8(%rax),%rax
         : 42    ./elf/../elf/dl-sysdep.c:113 (discriminator 5)
    0.00 :   1f49d:  lea    0xdec(%rip),%rsi        # 20290 <_start>
         : 44    ./elf/../elf/dl-sysdep.c:114 (discriminator 5)
    0.00 :   1f4a4:  movq   $0x0,0x1a639(%rip)        # 39ae8 <_rtld_global_ro+0x8>
         : 46    ./elf/../elf/dl-sysdep.c:110 (discriminator 5)
    0.00 :   1f4af:  mov    %rdx,0x1a692(%rip)        # 39b48 <_rtld_global_ro+0x68>
         : 48    ./elf/../elf/dl-sysdep.c:113 (discriminator 5)
    0.00 :   1f4b6:  mov    %rsi,0x58(%rsp)
         : 50    ./elf/../elf/dl-sysdep.c:119 (discriminator 5)
    0.00 :   1f4bb:  movq   $0x0,0x1a63a(%rip)        # 39b00 <_rtld_global_ro+0x20>
         : 52    ./elf/../elf/dl-sysdep.c:121 (discriminator 5)
    0.00 :   1f4c6:  test   %rax,%rax
    0.00 :   1f4c9:  je     1f7d8 <_dl_sysdep_start+0x398>
         : 55    ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f4cf:  movb   $0x0,0x1b(%rsp)
    0.00 :   1f4d4:  xor    %esi,%esi
    0.00 :   1f4d6:  xor    %r8d,%r8d
    0.00 :   1f4d9:  xor    %r9d,%r9d
    0.00 :   1f4dc:  movb   $0x0,0x1c(%rsp)
    0.00 :   1f4e1:  xor    %r10d,%r10d
    0.00 :   1f4e4:  xor    %r11d,%r11d
    0.00 :   1f4e7:  xor    %r13d,%r13d
    0.00 :   1f4ea:  movb   $0x0,0x1d(%rsp)
    0.00 :   1f4ef:  xor    %r14d,%r14d
    0.00 :   1f4f2:  xor    %r15d,%r15d
         : 67    ./elf/../elf/dl-sysdep.c:87
    0.00 :   1f4f5:  xor    %r12d,%r12d
         : 69    ./elf/../elf/dl-sysdep.c:86
    0.00 :   1f4f8:  xor    %ebp,%ebp
         : 71    ./elf/../elf/dl-sysdep.c:122
    0.00 :   1f4fa:  lea    0xd4fb(%rip),%rcx        # 2c9fc <unfiltered.1+0x23c>
    0.00 :   1f501:  nopl   0x0(%rax)
    0.00 :   1f508:  sub    $0x3,%rax
    0.00 :   1f50c:  cmp    $0x30,%rax
    0.00 :   1f510:  ja     1f528 <_dl_sysdep_start+0xe8>
    0.00 :   1f512:  movslq (%rcx,%rax,4),%rax
    0.00 :   1f516:  add    %rcx,%rax
    0.00 :   1f519:  notrack jmp *%rax
    0.00 :   1f51c:  nopl   0x0(%rax)
         : 81    ./elf/../elf/dl-sysdep.c:125
    0.00 :   1f520:  mov    0x8(%rdx),%rbp
         : 83    ./elf/../elf/dl-sysdep.c:126
    0.00 :   1f524:  nopl   0x0(%rax)
         : 85    ./elf/../elf/dl-sysdep.c:121 (discriminator 2)
    0.00 :   1f528:  mov    0x10(%rdx),%rax
    0.00 :   1f52c:  add    $0x10,%rdx
    0.00 :   1f530:  test   %rax,%rax
    0.00 :   1f533:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f535:  nopl   (%rax)
    0.00 :   1f538:  test   %sil,%sil
    0.00 :   1f53b:  je     1f548 <_dl_sysdep_start+0x108>
    0.00 :   1f53d:  mov    (%rsp),%rax
    0.00 :   1f541:  mov    %rax,0x1a5b8(%rip)        # 39b00 <_rtld_global_ro+0x20>
    0.00 :   1f548:  test   %r8b,%r8b
    0.00 :   1f54b:  je     1f559 <_dl_sysdep_start+0x119>
    0.00 :   1f54d:  mov    0x8(%rsp),%rax
    0.00 :   1f552:  mov    %rax,0x1a52f(%rip)        # 39a88 <_dl_random>
    0.00 :   1f559:  test   %r9b,%r9b
    0.00 :   1f55c:  je     1f56a <_dl_sysdep_start+0x12a>
    0.00 :   1f55e:  mov    0x10(%rsp),%rax
    0.00 :   1f563:  mov    %rax,0x1a85e(%rip)        # 39dc8 <_rtld_global_ro+0x2e8>
    0.00 :   1f56a:  test   %r10b,%r10b
    0.00 :   1f56d:  je     1f57b <_dl_sysdep_start+0x13b>
    0.00 :   1f56f:  movzwl 0x1e(%rsp),%eax
    0.00 :   1f574:  mov    %ax,0x1a5bd(%rip)        # 39b38 <_rtld_global_ro+0x58>
    0.00 :   1f57b:  test   %r11b,%r11b
    0.00 :   1f57e:  je     1f58a <_dl_sysdep_start+0x14a>
    0.00 :   1f580:  mov    0x38(%rsp),%eax
    0.00 :   1f584:  mov    %eax,0x1a596(%rip)        # 39b20 <_rtld_global_ro+0x40>
    0.00 :   1f58a:  test   %r13b,%r13b
    0.00 :   1f58d:  je     1f59b <_dl_sysdep_start+0x15b>
    0.00 :   1f58f:  mov    0x20(%rsp),%rax
    0.00 :   1f594:  mov    %rax,0x1a865(%rip)        # 39e00 <_rtld_global_ro+0x320>
    0.00 :   1f59b:  test   %r14b,%r14b
    0.00 :   1f59e:  je     1f5ac <_dl_sysdep_start+0x16c>
    0.00 :   1f5a0:  mov    0x28(%rsp),%rax
    0.00 :   1f5a5:  mov    %rax,0x1a594(%rip)        # 39b40 <_rtld_global_ro+0x60>
    0.00 :   1f5ac:  test   %r15b,%r15b
    0.00 :   1f5af:  je     1f5bd <_dl_sysdep_start+0x17d>
    0.00 :   1f5b1:  mov    0x30(%rsp),%rax
    0.00 :   1f5b6:  mov    %rax,0x1a52b(%rip)        # 39ae8 <_rtld_global_ro+0x8>
    0.00 :   1f5bd:  cmpb   $0x0,0x1b(%rsp)
    0.00 :   1f5c2:  je     1f5ce <_dl_sysdep_start+0x18e>
    0.00 :   1f5c4:  mov    0x3c(%rsp),%eax
    0.00 :   1f5c8:  mov    %eax,0x1a4ca(%rip)        # 39a98 <__libc_enable_secure>
    0.00 :   1f5ce:  cmpb   $0x0,0x1c(%rsp)
    0.00 :   1f5d3:  je     1f5df <_dl_sysdep_start+0x19f>
    0.00 :   1f5d5:  mov    0x48(%rsp),%rax
    0.00 :   1f5da:  mov    %rax,0x58(%rsp)
    0.00 :   1f5df:  cmpb   $0x0,0x1d(%rsp)
    0.00 :   1f5e4:  je     1f7dd <_dl_sysdep_start+0x39d>
    0.00 :   1f5ea:  mov    0x40(%rsp),%rax
    0.00 :   1f5ef:  mov    %rax,0x1a502(%rip)        # 39af8 <_rtld_global_ro+0x18>
    0.00 :   1f5f6:  jmp    1f7dd <_dl_sysdep_start+0x39d>
    0.00 :   1f5fb:  nopl   0x0(%rax,%rax,1)
         : 137   ./elf/../elf/dl-sysdep.c:181
    0.00 :   1f600:  mov    0x8(%rdx),%rax
         : 139   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f604:  add    $0x10,%rdx
         : 141   ./elf/../elf/dl-sysdep.c:182
    0.00 :   1f608:  mov    $0x1,%esi
         : 143   ./elf/../elf/dl-sysdep.c:181
    0.00 :   1f60d:  mov    %rax,(%rsp)
         : 145   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f611:  mov    (%rdx),%rax
    0.00 :   1f614:  test   %rax,%rax
    0.00 :   1f617:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f61d:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f622:  nopw   0x0(%rax,%rax,1)
         : 151   ./elf/../elf/dl-sysdep.c:174
    0.00 :   1f628:  mov    0x8(%rdx),%rax
         : 153   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f62c:  add    $0x10,%rdx
         : 155   ./elf/../elf/dl-sysdep.c:175
    0.00 :   1f630:  mov    $0x1,%r9d
         : 157   ./elf/../elf/dl-sysdep.c:174
    0.00 :   1f636:  mov    %rax,0x10(%rsp)
         : 159   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f63b:  mov    (%rdx),%rax
    0.00 :   1f63e:  test   %rax,%rax
    0.00 :   1f641:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f647:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f64c:  nopl   0x0(%rax)
         : 165   ./elf/../elf/dl-sysdep.c:159
    0.00 :   1f650:  mov    0x8(%rdx),%rax
         : 167   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f654:  add    $0x10,%rdx
         : 169   ./elf/../elf/dl-sysdep.c:160
    0.00 :   1f658:  mov    $0x1,%r13d
         : 171   ./elf/../elf/dl-sysdep.c:159
    0.00 :   1f65e:  mov    %rax,0x20(%rsp)
         : 173   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f663:  mov    (%rdx),%rax
    0.00 :   1f666:  test   %rax,%rax
    0.00 :   1f669:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f66f:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f674:  nopl   0x0(%rax)
         : 179   ./elf/../elf/dl-sysdep.c:178
    0.00 :   1f678:  mov    0x8(%rdx),%rax
         : 181   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f67c:  add    $0x10,%rdx
         : 183   ./elf/../elf/dl-sysdep.c:179
    0.00 :   1f680:  mov    $0x1,%r8d
         : 185   ./elf/../elf/dl-sysdep.c:178
    0.00 :   1f686:  mov    %rax,0x8(%rsp)
         : 187   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f68b:  mov    (%rdx),%rax
    0.00 :   1f68e:  test   %rax,%rax
    0.00 :   1f691:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f697:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f69c:  nopl   0x0(%rax)
         : 193   ./elf/../elf/dl-sysdep.c:150
    0.00 :   1f6a0:  mov    0x8(%rdx),%eax
         : 195   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f6a3:  add    $0x10,%rdx
         : 197   ./elf/../elf/dl-sysdep.c:151
    0.00 :   1f6a7:  movb   $0x1,0x1b(%rsp)
         : 199   ./elf/../elf/dl-sysdep.c:150
    0.00 :   1f6ac:  mov    %eax,0x3c(%rsp)
         : 201   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f6b0:  mov    (%rdx),%rax
    0.00 :   1f6b3:  test   %rax,%rax
    0.00 :   1f6b6:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f6bc:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f6c1:  nopl   0x0(%rax)
         : 207   ./elf/../elf/dl-sysdep.c:165
    0.00 :   1f6c8:  movzwl 0x8(%rdx),%eax
         : 209   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f6cc:  add    $0x10,%rdx
         : 211   ./elf/../elf/dl-sysdep.c:166
    0.00 :   1f6d0:  mov    $0x1,%r10d
         : 213   ./elf/../elf/dl-sysdep.c:165
    0.00 :   1f6d6:  mov    %ax,0x1e(%rsp)
         : 215   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f6db:  mov    (%rdx),%rax
    0.00 :   1f6de:  test   %rax,%rax
    0.00 :   1f6e1:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f6e7:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f6ec:  nopl   0x0(%rax)
         : 221   ./elf/../elf/dl-sysdep.c:162
    0.00 :   1f6f0:  mov    0x8(%rdx),%eax
         : 223   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f6f3:  add    $0x10,%rdx
         : 225   ./elf/../elf/dl-sysdep.c:163
    0.00 :   1f6f7:  mov    $0x1,%r11d
         : 227   ./elf/../elf/dl-sysdep.c:162
    0.00 :   1f6fd:  mov    %eax,0x38(%rsp)
         : 229   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f701:  mov    (%rdx),%rax
    0.00 :   1f704:  test   %rax,%rax
    0.00 :   1f707:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f70d:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f712:  nopw   0x0(%rax,%rax,1)
         : 235   ./elf/../elf/dl-sysdep.c:156
    0.00 :   1f718:  mov    0x8(%rdx),%rax
         : 237   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f71c:  add    $0x10,%rdx
         : 239   ./elf/../elf/dl-sysdep.c:157
    0.00 :   1f720:  mov    $0x1,%r14d
         : 241   ./elf/../elf/dl-sysdep.c:156
    0.00 :   1f726:  mov    %rax,0x28(%rsp)
         : 243   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f72b:  mov    (%rdx),%rax
    0.00 :   1f72e:  test   %rax,%rax
    0.00 :   1f731:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f737:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f73c:  nopl   0x0(%rax)
         : 249   ./elf/../elf/dl-sysdep.c:153
    0.00 :   1f740:  mov    0x8(%rdx),%rax
         : 251   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f744:  add    $0x10,%rdx
         : 253   ./elf/../elf/dl-sysdep.c:154
    0.00 :   1f748:  mov    $0x1,%r15d
         : 255   ./elf/../elf/dl-sysdep.c:153
    0.00 :   1f74e:  mov    %rax,0x30(%rsp)
         : 257   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f753:  mov    (%rdx),%rax
    0.00 :   1f756:  test   %rax,%rax
    0.00 :   1f759:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f75f:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f764:  nopl   0x0(%rax)
         : 263   ./elf/../elf/dl-sysdep.c:134
    0.00 :   1f768:  mov    0x8(%rdx),%rax
         : 265   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f76c:  add    $0x10,%rdx
         : 267   ./elf/../elf/dl-sysdep.c:135
    0.00 :   1f770:  movb   $0x1,0x1c(%rsp)
         : 269   ./elf/../elf/dl-sysdep.c:134
    0.00 :   1f775:  mov    %rax,0x48(%rsp)
         : 271   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f77a:  mov    (%rdx),%rax
    0.00 :   1f77d:  test   %rax,%rax
    0.00 :   1f780:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f786:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f78b:  nopl   0x0(%rax,%rax,1)
         : 277   ./elf/../elf/dl-sysdep.c:131
    0.00 :   1f790:  mov    0x8(%rdx),%rax
         : 279   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f794:  add    $0x10,%rdx
         : 281   ./elf/../elf/dl-sysdep.c:132
    0.00 :   1f798:  movb   $0x1,0x1d(%rsp)
         : 283   ./elf/../elf/dl-sysdep.c:131
    0.00 :   1f79d:  mov    %rax,0x40(%rsp)
         : 285   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f7a2:  mov    (%rdx),%rax
    0.00 :   1f7a5:  test   %rax,%rax
    0.00 :   1f7a8:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f7ae:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f7b3:  nopl   0x0(%rax,%rax,1)
         : 291   ./elf/../elf/dl-sysdep.c:128
    0.00 :   1f7b8:  mov    0x8(%rdx),%r12d
         : 293   ./elf/../elf/dl-sysdep.c:121
    0.00 :   1f7bc:  mov    0x10(%rdx),%rax
    0.00 :   1f7c0:  add    $0x10,%rdx
    0.00 :   1f7c4:  test   %rax,%rax
    0.00 :   1f7c7:  jne    1f508 <_dl_sysdep_start+0xc8>
    0.00 :   1f7cd:  jmp    1f538 <_dl_sysdep_start+0xf8>
    0.00 :   1f7d2:  nopw   0x0(%rax,%rax,1)
         : 300   ./elf/../elf/dl-sysdep.c:87
    0.00 :   1f7d8:  xor    %r12d,%r12d
         : 302   ./elf/../elf/dl-sysdep.c:86
    0.00 :   1f7db:  xor    %ebp,%ebp
         : 304   ./elf/../elf/dl-sysdep.c:224
    0.00 :   1f7dd:  call   17970 <__GI___tunables_init>
         : 306   ./elf/../elf/dl-sysdep.c:227
    0.00 :   1f7e2:  call   13700 <_dl_sort_maps_init>
         : 308   frob_brk():
         : 309   ./elf/../sysdeps/unix/sysv/linux/dl-sysdep.c:36
    0.00 :   1f7e7:  xor    %edi,%edi
    0.00 :   1f7e9:  call   25a80 <__brk>
         : 312   dl_platform_init():
         : 313   ./elf/../sysdeps/x86_64/dl-machine.h:215
    0.00 :   1f7ee:  call   1a7b0 <_dl_x86_init_cpu_features>
         : 315   _dl_sysdep_start():
         : 316   ./elf/../elf/dl-sysdep.c:238
    0.00 :   1f7f3:  mov    0x1a2ee(%rip),%rdi        # 39ae8 <_rtld_global_ro+0x8>
    0.00 :   1f7fa:  test   %rdi,%rdi
    0.00 :   1f7fd:  je     1f80b <_dl_sysdep_start+0x3cb>
         : 320   ./elf/../elf/dl-sysdep.c:239
    0.00 :   1f7ff:  call   2aa40 <strlen>
    0.00 :   1f804:  mov    %rax,0x1a2e5(%rip)        # 39af0 <_rtld_global_ro+0x10>
         : 323   ./elf/../elf/dl-sysdep.c:241
    0.00 :   1f80b:  xor    %edi,%edi
    0.00 :   1f80d:  call   25ab0 <__sbrk>
    0.00 :   1f812:  lea    0x1babf(%rip),%rdx        # 3b2d8 <_end>
    0.00 :   1f819:  cmp    %rdx,%rax
    0.00 :   1f81c:  je     1f850 <_dl_sysdep_start+0x410>
         : 329   ./elf/../elf/dl-sysdep.c:253
    0.00 :   1f81e:  mov    0x1a274(%rip),%eax        # 39a98 <__libc_enable_secure>
    0.00 :   1f824:  test   %eax,%eax
    0.00 :   1f826:  jne    1f870 <_dl_sysdep_start+0x430>
         : 333   ./elf/../elf/dl-sysdep.c:256
    0.00 :   1f828:  lea    0x58(%rsp),%rdx
    0.00 :   1f82d:  mov    %r12d,%esi
    0.00 :   1f830:  mov    %rbp,%rdi
    0.00 :   1f833:  mov    0x1a30e(%rip),%rcx        # 39b48 <_rtld_global_ro+0x68>
    0.00 :   1f83a:  call   *%rbx
         : 339   ./elf/../elf/dl-sysdep.c:258
    0.00 :   1f83c:  mov    0x58(%rsp),%rax
    0.00 :   1f841:  add    $0x68,%rsp
    0.00 :   1f845:  pop    %rbx
    0.00 :   1f846:  pop    %rbp
    0.00 :   1f847:  pop    %r12
    0.00 :   1f849:  pop    %r13
    0.00 :   1f84b:  pop    %r14
    0.00 :   1f84d:  pop    %r15
    0.00 :   1f84f:  ret
         : 349   ./elf/../elf/dl-sysdep.c:247
    0.00 :   1f850:  mov    0x1a2a1(%rip),%rdi        # 39af8 <_rtld_global_ro+0x18>
         : 351   ./elf/../elf/dl-sysdep.c:248
    0.00 :   1f857:  lea    -0x1(%rdi),%rdx
    0.00 :   1f85b:  and    %rdx,%rax
    0.00 :   1f85e:  sub    %rax,%rdi
         : 355   ./elf/../elf/dl-sysdep.c:247
    0.00 :   1f861:  call   25ab0 <__sbrk>
         : 357   ./elf/../elf/dl-sysdep.c:253
    0.00 :   1f866:  mov    0x1a22c(%rip),%eax        # 39a98 <__libc_enable_secure>
    0.00 :   1f86c:  test   %eax,%eax
    0.00 :   1f86e:  je     1f828 <_dl_sysdep_start+0x3e8>
         : 361   ./elf/../elf/dl-sysdep.c:254
    0.00 :   1f870:  call   26390 <__libc_check_standard_fds>
    0.00 :   1f875:  jmp    1f828 <_dl_sysdep_start+0x3e8>
 Percent |	Source code & Disassembly of ld-linux-x86-64.so.2 for cycles:u (5 samples, percent: local period)
-----------------------------------------------------------------------------------------------------------------
         :
         :
         :
         : 3     Disassembly of section .text:
         :
         : 5     0000000000021030 <_dl_start>:
         : 6     _dl_start():
         : 7     ./elf/rtld.c:527
    0.00 :   21030:  endbr64
    0.01 :   21034:  push   %rbp
    0.00 :   21035:  mov    %rsp,%rbp
    0.00 :   21038:  push   %r15
    0.00 :   2103a:  push   %r14
    0.00 :   2103c:  push   %r13
    0.00 :   2103e:  push   %r12
    0.00 :   21040:  push   %rbx
    0.00 :   21041:  sub    $0x88,%rsp
    0.00 :   21048:  mov    %rdi,-0x78(%rbp)
         : 18    rtld_timer_start():
         : 19    ./elf/rtld.c:85
    0.00 :   2104c:  rdtsc
         : 21    elf_machine_load_address():
         : 22    ./elf/../sysdeps/x86_64/dl-machine.h:45
    0.00 :   2104e:  lea    -0x21055(%rip),%r12        # 0 <GLIBC_2.2.5>
         : 24    _dl_start():
         : 25    ./elf/rtld.c:557
    0.00 :   21055:  andb   $0xdf,0x19db2(%rip)        # 3ae0e <_rtld_global+0xdce>
         : 27    ./elf/rtld.c:553
    0.00 :   2105c:  mov    %r12,0x19a8d(%rip)        # 3aaf0 <_rtld_global+0xab0>
         : 29    rtld_timer_start():
         : 30    ./elf/rtld.c:85
    0.00 :   21063:  shl    $0x20,%rdx
    0.00 :   21067:  or     %rdx,%rax
         : 33    _dl_start():
         : 34    ./elf/rtld.c:556
    0.00 :   2106a:  lea    0x18e0f(%rip),%rdx        # 39e80 <_DYNAMIC>
         : 36    rtld_timer_start():
         : 37    ./elf/rtld.c:85
    0.00 :   21071:  mov    %rax,0x18a28(%rip)        # 39aa0 <start_time>
         : 39    elf_get_dynamic_info():
         : 40    ./elf/./get-dynamic-info.h:45
    0.00 :   21078:  mov    0x18e01(%rip),%rax        # 39e80 <_DYNAMIC>
         : 42    _dl_start():
         : 43    ./elf/rtld.c:556
    0.00 :   2107f:  mov    %rdx,0x19a7a(%rip)        # 3ab00 <_rtld_global+0xac0>
         : 45    elf_get_dynamic_info():
         : 46    ./elf/./get-dynamic-info.h:45
    0.00 :   21086:  test   %rax,%rax
    0.00 :   21089:  je     21128 <_dl_start+0xf8>
         : 49    ./elf/./get-dynamic-info.h:54
    0.00 :   2108f:  mov    $0x6fffffff,%edi
         : 51    ./elf/./get-dynamic-info.h:59
    0.00 :   21094:  mov    $0x6ffffdff,%r10d
         : 53    ./elf/./get-dynamic-info.h:62
    0.00 :   2109a:  mov    $0x6ffffeff,%ebx
         : 55    ./elf/./get-dynamic-info.h:64
    0.00 :   2109f:  mov    $0x6fffff41,%r13d
         : 57    ./elf/./get-dynamic-info.h:68
    0.00 :   210a5:  lea    0x19a84(%rip),%rcx        # 3ab30 <_rtld_global+0xaf0>
         : 59    ./elf/./get-dynamic-info.h:61
    0.00 :   210ac:  mov    $0x6ffffe35,%r11d
         : 61    ./elf/./get-dynamic-info.h:58
    0.00 :   210b2:  mov    $0x32,%r9d
         : 63    ./elf/./get-dynamic-info.h:55
    0.00 :   210b8:  mov    $0x70000022,%r8d
    0.00 :   210be:  jmp    210da <_dl_start+0xaa>
    0.00 :   210c0:  mov    %r8,%rsi
    0.00 :   210c3:  sub    %rax,%rsi
    0.00 :   210c6:  mov    %rsi,%rax
         : 69    ./elf/./get-dynamic-info.h:68
    0.00 :   210c9:  mov    %rdx,(%rcx,%rax,8)
         : 71    ./elf/./get-dynamic-info.h:45
    0.43 :   210cd:  mov    0x10(%rdx),%rax
    0.00 :   210d1:  add    $0x10,%rdx
    0.00 :   210d5:  test   %rax,%rax
    0.00 :   210d8:  je     21128 <_dl_start+0xf8>
         : 76    ./elf/./get-dynamic-info.h:49
    0.00 :   210da:  cmp    $0x22,%rax
    0.00 :   210de:  jbe    210c9 <_dl_start+0x99>
         : 79    ./elf/./get-dynamic-info.h:54
    0.00 :   210e0:  mov    %rdi,%rsi
    0.00 :   210e3:  sub    %rax,%rsi
    0.00 :   210e6:  cmp    $0xf,%rsi
    0.00 :   210ea:  jbe    210c0 <_dl_start+0x90>
         : 84    ./elf/./get-dynamic-info.h:56
    0.00 :   210ec:  lea    (%rax,%rax,1),%esi
    0.00 :   210ef:  mov    %esi,%r14d
    0.00 :   210f2:  sar    %r14d
    0.00 :   210f5:  cmp    $0xfffffff8,%esi
    0.00 :   210f8:  jbe    21108 <_dl_start+0xd8>
         : 90    ./elf/./get-dynamic-info.h:57
    0.00 :   210fa:  mov    %r9d,%eax
    0.00 :   210fd:  sub    %r14d,%eax
    0.00 :   21100:  jmp    210c9 <_dl_start+0x99>
    0.00 :   21102:  nopw   0x0(%rax,%rax,1)
         : 95    ./elf/./get-dynamic-info.h:59
    0.00 :   21108:  mov    %r10,%rsi
    0.00 :   2110b:  sub    %rax,%rsi
    0.00 :   2110e:  cmp    $0xb,%rsi
    0.00 :   21112:  ja     215d0 <_dl_start+0x5a0>
         : 100   ./elf/./get-dynamic-info.h:61
    0.00 :   21118:  mov    %r11,%rsi
    0.00 :   2111b:  sub    %rax,%rsi
    0.00 :   2111e:  mov    %rsi,%rax
    0.00 :   21121:  jmp    210c9 <_dl_start+0x99>
    0.00 :   21123:  nopl   0x0(%rax,%rax,1)
         : 106   dl_relocate_ld():
         : 107   ./elf/../sysdeps/generic/ldsodefs.h:80
    0.00 :   21128:  movzbl 0x19cdf(%rip),%edx        # 3ae0e <_rtld_global+0xdce>
         : 109   elf_get_dynamic_info():
         : 110   ./elf/./get-dynamic-info.h:72
    0.00 :   2112f:  mov    %edx,%edi
    0.00 :   21131:  and    $0x20,%edi
    0.00 :   21134:  jne    211ba <_dl_start+0x18a>
         : 114   ./elf/./get-dynamic-info.h:82
    0.00 :   2113a:  mov    0x19a0f(%rip),%rax        # 3ab50 <_rtld_global+0xb10>
    0.00 :   21141:  test   %rax,%rax
    0.00 :   21144:  je     2114a <_dl_start+0x11a>
    0.00 :   21146:  add    %r12,0x8(%rax)
         : 119   ./elf/./get-dynamic-info.h:83
    0.00 :   2114a:  mov    0x199f7(%rip),%rax        # 3ab48 <_rtld_global+0xb08>
    0.00 :   21151:  test   %rax,%rax
    0.00 :   21154:  je     2115a <_dl_start+0x12a>
    0.00 :   21156:  add    %r12,0x8(%rax)
         : 124   ./elf/./get-dynamic-info.h:84
    0.00 :   2115a:  mov    0x199f7(%rip),%rax        # 3ab58 <_rtld_global+0xb18>
    0.00 :   21161:  test   %rax,%rax
    0.00 :   21164:  je     2116a <_dl_start+0x13a>
    0.00 :   21166:  add    %r12,0x8(%rax)
         : 129   ./elf/./get-dynamic-info.h:85
    0.00 :   2116a:  mov    0x199ef(%rip),%rax        # 3ab60 <_rtld_global+0xb20>
    0.00 :   21171:  test   %rax,%rax
    0.00 :   21174:  je     2117a <_dl_start+0x14a>
    0.00 :   21176:  add    %r12,0x8(%rax)
         : 134   ./elf/./get-dynamic-info.h:87
    0.00 :   2117a:  mov    0x199e7(%rip),%rax        # 3ab68 <_rtld_global+0xb28>
    0.00 :   21181:  test   %rax,%rax
    0.00 :   21184:  je     2118a <_dl_start+0x15a>
    0.00 :   21186:  add    %r12,0x8(%rax)
         : 139   ./elf/./get-dynamic-info.h:92
    0.00 :   2118a:  mov    0x19a57(%rip),%rax        # 3abe8 <_rtld_global+0xba8>
    0.00 :   21191:  test   %rax,%rax
    0.00 :   21194:  je     2119a <_dl_start+0x16a>
    0.00 :   21196:  add    %r12,0x8(%rax)
         : 144   ./elf/./get-dynamic-info.h:93
    0.00 :   2119a:  mov    0x19b1f(%rip),%rax        # 3acc0 <_rtld_global+0xc80>
    0.00 :   211a1:  test   %rax,%rax
    0.00 :   211a4:  je     211aa <_dl_start+0x17a>
    0.00 :   211a6:  add    %r12,0x8(%rax)
         : 149   ./elf/./get-dynamic-info.h:94
    0.00 :   211aa:  mov    0x19bdf(%rip),%rax        # 3ad90 <_rtld_global+0xd50>
    0.00 :   211b1:  test   %rax,%rax
    0.00 :   211b4:  je     211ba <_dl_start+0x18a>
    0.00 :   211b6:  add    %r12,0x8(%rax)
         : 154   ./elf/./get-dynamic-info.h:97
    0.00 :   211ba:  mov    0x19a0f(%rip),%rax        # 3abd0 <_rtld_global+0xb90>
    0.00 :   211c1:  test   %rax,%rax
    0.00 :   211c4:  je     211d1 <_dl_start+0x1a1>
         : 158   ./elf/./get-dynamic-info.h:102
    0.00 :   211c6:  cmpq   $0x7,0x8(%rax)
    0.00 :   211cb:  jne    2171a <_dl_start+0x6ea>
         : 161   ./elf/./get-dynamic-info.h:109
    0.00 :   211d1:  mov    0x19990(%rip),%rcx        # 3ab68 <_rtld_global+0xb28>
    0.00 :   211d8:  test   %rcx,%rcx
    0.00 :   211db:  je     211ef <_dl_start+0x1bf>
         : 165   ./elf/./get-dynamic-info.h:110
    0.00 :   211dd:  mov    0x19994(%rip),%rsi        # 3ab78 <_rtld_global+0xb38>
    0.00 :   211e4:  cmpq   $0x18,0x8(%rsi)
    0.00 :   211e9:  jne    216bd <_dl_start+0x68d>
         : 169   ./elf/./get-dynamic-info.h:118
    0.00 :   211ef:  cmpq   $0x0,0x19a21(%rip)        # 3ac18 <_rtld_global+0xbd8>
    0.00 :   211f7:  jne    2169e <_dl_start+0x66e>
         : 172   ./elf/./get-dynamic-info.h:119
    0.00 :   211fd:  cmpq   $0x0,0x199a3(%rip)        # 3aba8 <_rtld_global+0xb68>
    0.00 :   21205:  jne    2167f <_dl_start+0x64f>
         : 175   ./elf/./get-dynamic-info.h:124
    0.00 :   2120b:  mov    0x19a56(%rip),%rsi        # 3ac68 <_rtld_global+0xc28>
    0.00 :   21212:  test   %rsi,%rsi
    0.00 :   21215:  je     21225 <_dl_start+0x1f5>
    0.00 :   21217:  testq  $0xfffffffffffffffe,0x8(%rsi)
    0.00 :   2121f:  jne    21660 <_dl_start+0x630>
         : 181   ./elf/./get-dynamic-info.h:127
    0.00 :   21225:  mov    0x199f4(%rip),%rsi        # 3ac20 <_rtld_global+0xbe0>
    0.00 :   2122c:  test   %rsi,%rsi
    0.00 :   2122f:  je     2123f <_dl_start+0x20f>
    0.00 :   21231:  testq  $0xfffffffffffffff7,0x8(%rsi)
    0.00 :   21239:  jne    216dc <_dl_start+0x6ac>
         : 187   _dl_start():
         : 188   ./elf/rtld.c:573
    0.00 :   2123f:  pxor   %xmm0,%xmm0
         : 190   elf_machine_runtime_setup():
         : 191   ./elf/../sysdeps/x86_64/dl-machine.h:71
    0.00 :   21243:  mov    0x1999e(%rip),%r10        # 3abe8 <_rtld_global+0xba8>
         : 193   _dl_start():
         : 194   ./elf/rtld.c:573
    0.00 :   2124a:  movaps %xmm0,-0x70(%rbp)
    0.00 :   2124e:  movaps %xmm0,-0x60(%rbp)
    0.00 :   21252:  movaps %xmm0,-0x50(%rbp)
    0.00 :   21256:  movaps %xmm0,-0x40(%rbp)
    0.00 :   2125a:  test   %rcx,%rcx
    0.00 :   2125d:  je     21610 <_dl_start+0x5e0>
         : 201   ./elf/rtld.c:573 (discriminator 1)
    0.00 :   21263:  mov    0x8(%rcx),%rcx
    0.00 :   21267:  test   %dil,%dil
    0.00 :   2126a:  mov    0x19a07(%rip),%r9        # 3ac78 <_rtld_global+0xc38>
    0.00 :   21271:  lea    (%rcx,%r12,1),%rsi
    0.00 :   21275:  cmovne %rsi,%rcx
    0.00 :   21279:  mov    0x198f0(%rip),%rsi        # 3ab70 <_rtld_global+0xb30>
    0.00 :   21280:  mov    0x8(%rsi),%rsi
    0.00 :   21284:  movq   %rcx,%xmm0
    0.00 :   21289:  movq   %rsi,%xmm2
    0.00 :   2128e:  lea    (%rsi,%rcx,1),%r8
    0.00 :   21292:  punpcklqdq %xmm2,%xmm0
    0.00 :   21296:  movaps %xmm0,-0x70(%rbp)
    0.00 :   2129a:  test   %r9,%r9
    0.00 :   2129d:  je     212a7 <_dl_start+0x277>
         : 216   ./elf/rtld.c:573 (discriminator 7)
    0.00 :   2129f:  mov    0x8(%r9),%r9
    0.00 :   212a3:  mov    %r9,-0x60(%rbp)
         : 219   ./elf/rtld.c:573 (discriminator 9)
    0.00 :   212a7:  test   %rax,%rax
    0.00 :   212aa:  je     212ee <_dl_start+0x2be>
         : 222   ./elf/rtld.c:573 (discriminator 10)
    0.00 :   212ac:  mov    0x8(%r10),%rax
    0.00 :   212b0:  test   %dil,%dil
    0.00 :   212b3:  mov    0x19886(%rip),%rdi        # 3ab40 <_rtld_global+0xb00>
    0.00 :   212ba:  lea    (%rax,%r12,1),%r9
    0.00 :   212be:  mov    0x8(%rdi),%rdi
    0.00 :   212c2:  cmovne %r9,%rax
    0.00 :   212c6:  movq   %rdi,%xmm3
    0.00 :   212cb:  movq   %rax,%xmm0
    0.00 :   212d0:  lea    (%rdi,%rax,1),%r9
    0.00 :   212d4:  punpcklqdq %xmm3,%xmm0
    0.00 :   212d8:  cmp    %r8,%r9
    0.00 :   212db:  je     215fa <_dl_start+0x5ca>
         : 235   ./elf/rtld.c:573 (discriminator 18)
    0.00 :   212e1:  cmp    %r8,%rax
    0.00 :   212e4:  je     215ee <_dl_start+0x5be>
         : 238   ./elf/rtld.c:573 (discriminator 22)
    0.00 :   212ea:  movaps %xmm0,-0x50(%rbp)
    0.00 :   212ee:  lea    -0x70(%rbp),%rax
    0.00 :   212f2:  lea    -0x30(%rbp),%r10
    0.00 :   212f6:  mov    %rax,-0xa8(%rbp)
    0.00 :   212fd:  mov    %rax,%r8
         : 244   elf_machine_rela():
         : 245   ./elf/../sysdeps/x86_64/dl-machine.h:414 (discriminator 27)
    0.00 :   21300:  lea    -0x9207(%rip),%r9        # 18100 <_dl_tlsdesc_return>
         : 247   elf_dynamic_do_Rela():
         : 248   ./elf/do-rel.h:86 (discriminator 27)
    0.00 :   21307:  mov    0x19852(%rip),%rsi        # 3ab60 <_rtld_global+0xb20>
         : 250   _dl_start():
         : 251   ./elf/rtld.c:573 (discriminator 27)
    0.00 :   2130e:  mov    (%r8),%rax
    0.00 :   21311:  mov    0x10(%r8),%rcx
         : 254   elf_dynamic_do_Rela():
         : 255   ./elf/do-rel.h:49 (discriminator 27)
    0.00 :   21315:  mov    0x8(%r8),%rdi
         : 257   ./elf/do-rel.h:86 (discriminator 27)
    0.00 :   21319:  mov    0x8(%rsi),%rsi
         : 259   ./elf/do-rel.h:49 (discriminator 27)
    0.00 :   2131d:  add    %rax,%rdi
         : 261   ./elf/do-rel.h:86 (discriminator 27)
    0.00 :   21320:  and    $0x20,%edx
         : 263   ./elf/do-rel.h:88 (discriminator 27)
    0.00 :   21323:  lea    (%rcx,%rcx,2),%rdx
         : 265   ./elf/do-rel.h:86 (discriminator 27)
    0.00 :   21327:  lea    (%rsi,%r12,1),%r11
         : 267   ./elf/do-rel.h:88 (discriminator 27)
    0.00 :   2132b:  lea    (%rax,%rdx,8),%rbx
         : 269   ./elf/do-rel.h:86 (discriminator 27)
    0.00 :   2132f:  cmovne %r11,%rsi
         : 271   ./elf/do-rel.h:113 (discriminator 27)
    0.00 :   21333:  cmp    %rbx,%rax
    0.00 :   21336:  jae    21363 <_dl_start+0x333>
    0.00 :   21338:  nopl   0x0(%rax,%rax,1)
         : 275   ./elf/do-rel.h:114
    0.00 :   21340:  mov    (%rax),%rdx
    6.31 :   21343:  add    %r12,%rdx
         : 278   elf_machine_rela_relative():
         : 279   ./elf/../sysdeps/x86_64/dl-machine.h:534
    0.00 :   21346:  cmpl   $0x8,0x8(%rax)
   93.25 :   2134a:  jne    21641 <_dl_start+0x611>
         : 282   ./elf/../sysdeps/x86_64/dl-machine.h:535
    0.00 :   21350:  mov    0x10(%rax),%rcx
         : 284   elf_dynamic_do_Rela():
         : 285   ./elf/do-rel.h:113
    0.00 :   21354:  add    $0x18,%rax
         : 287   elf_machine_rela_relative():
         : 288   ./elf/../sysdeps/x86_64/dl-machine.h:535
    0.00 :   21358:  add    %r12,%rcx
    0.00 :   2135b:  mov    %rcx,(%rdx)
         : 291   elf_dynamic_do_Rela():
         : 292   ./elf/do-rel.h:113
    0.00 :   2135e:  cmp    %rax,%rbx
    0.00 :   21361:  ja     21340 <_dl_start+0x310>
         : 295   ./elf/do-rel.h:118
    0.00 :   21363:  cmpq   $0x0,0x19955(%rip)        # 3acc0 <_rtld_global+0xc80>
    0.00 :   2136b:  je     216fb <_dl_start+0x6cb>
         : 298   ./elf/do-rel.h:126
    0.00 :   21371:  mov    %r12,%rdx
    0.00 :   21374:  cmp    %rbx,%rdi
    0.00 :   21377:  ja     21397 <_dl_start+0x367>
    0.00 :   21379:  jmp    21428 <_dl_start+0x3f8>
    0.00 :   2137e:  xchg   %ax,%ax
         : 304   elf_machine_rela():
         : 305   ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   21380:  cmp    $0x5,%r14
    0.00 :   21384:  ja     21480 <_dl_start+0x450>
         : 308   elf_dynamic_do_Rela():
         : 309   ./elf/do-rel.h:126
    0.00 :   2138a:  add    $0x18,%rbx
    0.00 :   2138e:  cmp    %rbx,%rdi
    0.00 :   21391:  jbe    21428 <_dl_start+0x3f8>
         : 313   ./elf/do-rel.h:128
    0.00 :   21397:  mov    0x8(%rbx),%r13
         : 315   ./elf/do-rel.h:130
    0.00 :   2139b:  mov    (%rbx),%r12
         : 317   ./elf/do-rel.h:128
    0.00 :   2139e:  mov    %r13,%rax
         : 319   elf_machine_rela():
         : 320   ./elf/../sysdeps/x86_64/dl-machine.h:287
    0.00 :   213a1:  mov    %r13,%r14
         : 322   elf_dynamic_do_Rela():
         : 323   ./elf/do-rel.h:130
    0.00 :   213a4:  add    %rdx,%r12
         : 325   ./elf/do-rel.h:128
    0.00 :   213a7:  shr    $0x20,%rax
         : 327   ./elf/do-rel.h:129
    0.00 :   213ab:  lea    (%rax,%rax,2),%rax
    0.00 :   213af:  lea    (%rsi,%rax,8),%r15
         : 330   elf_machine_rela():
         : 331   ./elf/../sysdeps/x86_64/dl-machine.h:287
    0.00 :   213b3:  and    $0xffffffff,%r14d
    0.00 :   213b7:  je     2138a <_dl_start+0x35a>
         : 334   ./elf/../sysdeps/x86_64/dl-machine.h:296
    0.00 :   213b9:  xor    %eax,%eax
    0.00 :   213bb:  test   %r15,%r15
    0.00 :   213be:  je     213ec <_dl_start+0x3bc>
    0.00 :   213c0:  movzbl 0x4(%r15),%ecx
    0.00 :   213c5:  movzwl 0x6(%r15),%r11d
    0.00 :   213ca:  mov    0x8(%r15),%rax
    0.00 :   213ce:  and    $0xf,%ecx
    0.00 :   213d1:  cmp    $0xfff1,%r11w
    0.00 :   213d6:  je     214b0 <_dl_start+0x480>
    0.00 :   213dc:  add    0x1970d(%rip),%rax        # 3aaf0 <_rtld_global+0xab0>
         : 345   ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   213e3:  cmp    $0xa,%cl
    0.00 :   213e6:  je     215c0 <_dl_start+0x590>
         : 348   ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   213ec:  cmp    $0x12,%r14
    0.00 :   213f0:  je     21490 <_dl_start+0x460>
    0.00 :   213f6:  ja     21450 <_dl_start+0x420>
    0.00 :   213f8:  test   $0xfffffff8,%r13d
    0.00 :   213ff:  je     21380 <_dl_start+0x350>
    0.00 :   21405:  cmp    $0x10,%r14
    0.00 :   21409:  jne    2138a <_dl_start+0x35a>
         : 356   elf_dynamic_do_Rela():
         : 357   ./elf/do-rel.h:126
    0.00 :   2140f:  add    $0x18,%rbx
         : 359   elf_machine_rela():
         : 360   ./elf/../sysdeps/x86_64/dl-machine.h:356
    0.00 :   21413:  movq   $0x1,(%r12)
         : 362   elf_dynamic_do_Rela():
         : 363   ./elf/do-rel.h:126
    0.00 :   2141b:  cmp    %rbx,%rdi
    0.00 :   2141e:  ja     21397 <_dl_start+0x367>
    0.00 :   21424:  nopl   0x0(%rax)
         : 367   _dl_start():
         : 368   ./elf/rtld.c:573
    0.00 :   21428:  add    $0x20,%r8
    0.00 :   2142c:  cmp    %r10,%r8
    0.00 :   2142f:  je     21510 <_dl_start+0x4e0>
         : 372   elf_dynamic_do_Rela():
         : 373   ./elf/do-rel.h:50
    0.00 :   21435:  mov    0x196b4(%rip),%r12        # 3aaf0 <_rtld_global+0xab0>
         : 375   dl_relocate_ld():
         : 376   ./elf/../sysdeps/generic/ldsodefs.h:80
    0.00 :   2143c:  movzbl 0x199cb(%rip),%edx        # 3ae0e <_rtld_global+0xdce>
    0.00 :   21443:  jmp    21307 <_dl_start+0x2d7>
    0.00 :   21448:  nopl   0x0(%rax,%rax,1)
         : 380   elf_machine_rela():
         : 381   ./elf/../sysdeps/x86_64/dl-machine.h:326
    0.00 :   21450:  cmp    $0x24,%r14
    0.00 :   21454:  jne    2138a <_dl_start+0x35a>
         : 384   ./elf/../sysdeps/x86_64/dl-machine.h:413
    0.00 :   2145a:  mov    0x10(%rbx),%rax
    0.00 :   2145e:  sub    0x19ae3(%rip),%rax        # 3af48 <_rtld_global+0xf08>
    0.00 :   21465:  add    0x8(%r15),%rax
         : 388   ./elf/../sysdeps/x86_64/dl-machine.h:412
    0.00 :   21469:  mov    %rax,0x8(%r12)
         : 390   ./elf/../sysdeps/x86_64/dl-machine.h:414
    0.00 :   2146e:  mov    %r9,(%r12)
         : 392   ./elf/../sysdeps/x86_64/dl-machine.h:417
    0.00 :   21472:  jmp    2138a <_dl_start+0x35a>
    0.00 :   21477:  nopw   0x0(%rax,%rax,1)
         : 395   ./elf/../sysdeps/x86_64/dl-machine.h:346
    0.00 :   21480:  add    0x10(%rbx),%rax
    0.00 :   21484:  mov    %rax,(%r12)
         : 398   ./elf/../sysdeps/x86_64/dl-machine.h:347
    0.00 :   21488:  jmp    2138a <_dl_start+0x35a>
    0.00 :   2148d:  nopl   (%rax)
         : 401   ./elf/../sysdeps/x86_64/dl-machine.h:431
    0.00 :   21490:  mov    0x10(%rbx),%rax
    0.00 :   21494:  sub    0x19aad(%rip),%rax        # 3af48 <_rtld_global+0xf08>
    0.00 :   2149b:  add    0x8(%r15),%rax
         : 405   ./elf/../sysdeps/x86_64/dl-machine.h:440
    0.00 :   2149f:  mov    %rax,(%r12)
         : 407   ./elf/../sysdeps/x86_64/dl-machine.h:443
    0.00 :   214a3:  jmp    2138a <_dl_start+0x35a>
    0.00 :   214a8:  nopl   0x0(%rax,%rax,1)
         : 410   ./elf/../sysdeps/x86_64/dl-machine.h:299
    0.00 :   214b0:  cmp    $0xa,%cl
    0.00 :   214b3:  jne    213ec <_dl_start+0x3bc>
    0.00 :   214b9:  nopl   0x0(%rax)
         : 414   ./elf/../sysdeps/x86_64/dl-machine.h:323
    0.00 :   214c0:  mov    %r10,-0xa0(%rbp)
    0.00 :   214c7:  mov    %rdx,-0x98(%rbp)
    0.00 :   214ce:  mov    %rsi,-0x90(%rbp)
    0.00 :   214d5:  mov    %rdi,-0x88(%rbp)
    0.00 :   214dc:  mov    %r8,-0x80(%rbp)
    0.00 :   214e0:  call   *%rax
    0.00 :   214e2:  mov    -0xa0(%rbp),%r10
    0.00 :   214e9:  mov    -0x98(%rbp),%rdx
    0.00 :   214f0:  lea    -0x93f7(%rip),%r9        # 18100 <_dl_tlsdesc_return>
    0.00 :   214f7:  mov    -0x90(%rbp),%rsi
    0.00 :   214fe:  mov    -0x88(%rbp),%rdi
    0.00 :   21505:  mov    -0x80(%rbp),%r8
    0.00 :   21509:  jmp    213ec <_dl_start+0x3bc>
    0.00 :   2150e:  xchg   %ax,%ax
         : 429   _dl_start():
         : 430   ./elf/rtld.c:575
    0.00 :   21510:  orb    $0x4,0x198f5(%rip)        # 3ae0c <_rtld_global+0xdcc>
         : 432   ./elf/rtld.c:588
    0.00 :   21517:  call   1e2e0 <__rtld_malloc_init_stubs>
         : 434   ./elf/rtld.c:592
    0.00 :   2151c:  lea    -0x1c103(%rip),%rax        # 5420 <__GI__dl_find_object>
    0.00 :   21523:  mov    %rax,0x1892e(%rip)        # 39e58 <_rtld_global_ro+0x378>
         : 437   rtld_timer_start():
         : 438   ./elf/rtld.c:85
    0.00 :   2152a:  rdtsc
         : 440   _dl_start_final():
         : 441   ./elf/rtld.c:488
    0.00 :   2152c:  lea    0x195bd(%rip),%rbx        # 3aaf0 <_rtld_global+0xab0>
    0.00 :   21533:  mov    %rbx,%rdi
         : 444   rtld_timer_start():
         : 445   ./elf/rtld.c:85
    0.00 :   21536:  shl    $0x20,%rdx
    0.00 :   2153a:  or     %rdx,%rax
    0.00 :   2153d:  mov    %rax,0x1855c(%rip)        # 39aa0 <start_time>
         : 449   _dl_start_final():
         : 450   ./elf/rtld.c:488
    0.00 :   21544:  call   13530 <_dl_setup_hash>
         : 452   ./elf/rtld.c:490
    0.00 :   21549:  lea    0x19d88(%rip),%rax        # 3b2d8 <_end>
    0.00 :   21550:  lea    -0x21557(%rip),%rdi        # 0 <GLIBC_2.2.5>
         : 455   ./elf/rtld.c:489
    0.00 :   21557:  mov    %rbx,0x195ba(%rip)        # 3ab18 <_rtld_global+0xad8>
         : 457   ./elf/rtld.c:490
    0.00 :   2155e:  movq   %rax,%xmm1
    0.00 :   21563:  movq   %rdi,%xmm0
         : 460   ./elf/rtld.c:507
    0.00 :   21568:  mov    -0x78(%rbp),%rdi
         : 462   ./elf/rtld.c:492
    0.00 :   2156c:  lea    0x9da2(%rip),%rax        # 2b315 <_etext>
         : 464   ./elf/rtld.c:490
    0.00 :   21573:  punpcklqdq %xmm1,%xmm0
         : 466   ./elf/rtld.c:507
    0.00 :   21577:  lea    0x362(%rip),%rsi        # 218e0 <dl_main>
         : 468   ./elf/rtld.c:492
    0.00 :   2157e:  mov    %rax,0x198d3(%rip)        # 3ae58 <_rtld_global+0xe18>
         : 470   ./elf/rtld.c:501
    0.00 :   21585:  mov    %rbp,0x18504(%rip)        # 39a90 <__libc_stack_end>
         : 472   ./elf/rtld.c:490
    0.00 :   2158c:  movups %xmm0,0x198b5(%rip)        # 3ae48 <_rtld_global+0xe08>
         : 474   ./elf/rtld.c:507
    0.00 :   21593:  call   1f440 <_dl_sysdep_start>
    0.00 :   21598:  mov    %rax,%r12
         : 477   ./elf/rtld.c:509
    0.00 :   2159b:  testb  $0x80,0x1853e(%rip)        # 39ae0 <_rtld_global_ro>
    0.00 :   215a2:  jne    2161c <_dl_start+0x5ec>
         : 480   _dl_start():
         : 481   ./elf/rtld.c:607
    0.00 :   215a4:  add    $0x88,%rsp
    0.00 :   215ab:  mov    %r12,%rax
    0.00 :   215ae:  pop    %rbx
    0.00 :   215af:  pop    %r12
    0.00 :   215b1:  pop    %r13
    0.00 :   215b3:  pop    %r14
    0.00 :   215b5:  pop    %r15
    0.00 :   215b7:  pop    %rbp
    0.00 :   215b8:  ret
    0.00 :   215b9:  nopl   0x0(%rax)
         : 492   elf_machine_rela():
         : 493   ./elf/../sysdeps/x86_64/dl-machine.h:300
    0.00 :   215c0:  test   %r11w,%r11w
    0.00 :   215c4:  jne    214c0 <_dl_start+0x490>
    0.00 :   215ca:  jmp    213ec <_dl_start+0x3bc>
    0.00 :   215cf:  nop
         : 498   elf_get_dynamic_info():
         : 499   ./elf/./get-dynamic-info.h:62
    0.00 :   215d0:  mov    %rbx,%rsi
    0.00 :   215d3:  sub    %rax,%rsi
    0.00 :   215d6:  cmp    $0xa,%rsi
    0.00 :   215da:  ja     210cd <_dl_start+0x9d>
         : 504   ./elf/./get-dynamic-info.h:64
    0.00 :   215e0:  mov    %r13,%rsi
    0.00 :   215e3:  sub    %rax,%rsi
    0.00 :   215e6:  mov    %rsi,%rax
    0.00 :   215e9:  jmp    210c9 <_dl_start+0x99>
         : 509   _dl_start():
         : 510   ./elf/rtld.c:573 (discriminator 21)
    0.00 :   215ee:  add    %rsi,%rdi
    0.00 :   215f1:  mov    %rdi,-0x68(%rbp)
    0.00 :   215f5:  jmp    212ee <_dl_start+0x2be>
         : 514   ./elf/rtld.c:573 (discriminator 16)
    0.00 :   215fa:  sub    %rdi,%rsi
    0.00 :   215fd:  lea    (%rsi,%rcx,1),%r8
    0.00 :   21601:  mov    %rsi,-0x68(%rbp)
    0.00 :   21605:  cmp    %r8,%rax
    0.00 :   21608:  jne    212ea <_dl_start+0x2ba>
    0.00 :   2160e:  jmp    215ee <_dl_start+0x5be>
    0.00 :   21610:  xor    %r8d,%r8d
    0.00 :   21613:  xor    %esi,%esi
    0.00 :   21615:  xor    %ecx,%ecx
    0.00 :   21617:  jmp    212a7 <_dl_start+0x277>
         : 525   rtld_timer_stop():
         : 526   ./elf/rtld.c:92
    0.00 :   2161c:  rdtsc
         : 528   _dl_start_final():
         : 529   ./elf/rtld.c:513
    0.00 :   2161e:  mov    -0xa8(%rbp),%rdi
         : 531   rtld_timer_stop():
         : 532   ./elf/rtld.c:92
    0.00 :   21625:  shl    $0x20,%rdx
    0.00 :   21629:  or     %rdx,%rax
         : 535   ./elf/rtld.c:93
    0.00 :   2162c:  sub    0x1846d(%rip),%rax        # 39aa0 <start_time>
    0.00 :   21633:  mov    %rax,-0x70(%rbp)
         : 538   _dl_start_final():
         : 539   ./elf/rtld.c:513
    0.00 :   21637:  call   20600 <print_statistics>
         : 541   _dl_start():
         : 542   ./elf/rtld.c:605
    0.00 :   2163c:  jmp    215a4 <_dl_start+0x574>
         : 544   elf_machine_rela_relative():
         : 545   ./elf/../sysdeps/x86_64/dl-machine.h:534
    0.00 :   21641:  lea    0xe468(%rip),%rcx        # 2fab0 <__PRETTY_FUNCTION__.2>
    0.00 :   21648:  mov    $0x216,%edx
    0.00 :   2164d:  lea    0xfa64(%rip),%rsi        # 310b8 <__PRETTY_FUNCTION__.0+0x2a8>
    0.00 :   21654:  lea    0xfa7d(%rip),%rdi        # 310d8 <__PRETTY_FUNCTION__.0+0x2c8>
    0.00 :   2165b:  call   1e460 <__GI___assert_fail>
         : 551   elf_get_dynamic_info():
         : 552   ./elf/./get-dynamic-info.h:124
    0.00 :   21660:  lea    0xe2c9(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21667:  mov    $0x7c,%edx
    0.00 :   2166c:  lea    0xd4ed(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   21673:  lea    0x10ebe(%rip),%rdi        # 32538 <__PRETTY_FUNCTION__.3+0xcf0>
    0.00 :   2167a:  call   1e460 <__GI___assert_fail>
         : 558   ./elf/./get-dynamic-info.h:119
    0.00 :   2167f:  lea    0xe2aa(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21686:  mov    $0x77,%edx
    0.00 :   2168b:  lea    0xd4ce(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   21692:  lea    0xd4f5(%rip),%rdi        # 2eb8e <__PRETTY_FUNCTION__.2+0x220>
    0.00 :   21699:  call   1e460 <__GI___assert_fail>
         : 564   ./elf/./get-dynamic-info.h:118
    0.00 :   2169e:  lea    0xe28b(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216a5:  mov    $0x76,%edx
    0.00 :   216aa:  lea    0xd4af(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216b1:  lea    0xd4bd(%rip),%rdi        # 2eb75 <__PRETTY_FUNCTION__.2+0x207>
    0.00 :   216b8:  call   1e460 <__GI___assert_fail>
         : 570   ./elf/./get-dynamic-info.h:110
    0.00 :   216bd:  lea    0xe26c(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216c4:  mov    $0x6e,%edx
    0.00 :   216c9:  lea    0xd490(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216d0:  lea    0xeff9(%rip),%rdi        # 306d0 <__PRETTY_FUNCTION__.0+0x3f0>
    0.00 :   216d7:  call   1e460 <__GI___assert_fail>
         : 576   ./elf/./get-dynamic-info.h:127
    0.00 :   216dc:  lea    0xe24d(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   216e3:  mov    $0x7f,%edx
    0.00 :   216e8:  lea    0xd471(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   216ef:  lea    0x10eaa(%rip),%rdi        # 325a0 <__PRETTY_FUNCTION__.3+0xd58>
    0.00 :   216f6:  call   1e460 <__GI___assert_fail>
         : 582   elf_dynamic_do_Rela():
         : 583   ./elf/do-rel.h:118
    0.00 :   216fb:  lea    0xe6ae(%rip),%rcx        # 2fdb0 <__PRETTY_FUNCTION__.1>
    0.00 :   21702:  mov    $0x76,%edx
    0.00 :   21707:  lea    0xd497(%rip),%rsi        # 2eba5 <__PRETTY_FUNCTION__.2+0x237>
    0.00 :   2170e:  lea    0x10edb(%rip),%rdi        # 325f0 <__PRETTY_FUNCTION__.3+0xda8>
    0.00 :   21715:  call   1e460 <__GI___assert_fail>
         : 589   elf_get_dynamic_info():
         : 590   ./elf/./get-dynamic-info.h:102
    0.00 :   2171a:  lea    0xe20f(%rip),%rcx        # 2f930 <__PRETTY_FUNCTION__.0>
    0.00 :   21721:  mov    $0x66,%edx
    0.00 :   21726:  lea    0xd433(%rip),%rsi        # 2eb60 <__PRETTY_FUNCTION__.2+0x1f2>
    0.00 :   2172d:  lea    0xef74(%rip),%rdi        # 306a8 <__PRETTY_FUNCTION__.0+0x3c8>
    0.00 :   21734:  call   1e460 <__GI___assert_fail>
